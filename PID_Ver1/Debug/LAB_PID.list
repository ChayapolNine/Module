
LAB_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006db4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08006f50  08006f50  00016f50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fa0  08006fa0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006fa0  08006fa0  00016fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fa8  08006fa8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fa8  08006fa8  00016fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fac  08006fac  00016fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006fb0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000080  08007030  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  08007030  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6b7  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022bf  00000000  00000000  0002f767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00031a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  00032890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182e7  00000000  00000000  00033600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110c9  00000000  00000000  0004b8e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ab84  00000000  00000000  0005c9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7534  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043dc  00000000  00000000  000f7584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006f34 	.word	0x08006f34

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	08006f34 	.word	0x08006f34

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b974 	b.w	8000ea0 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	468e      	mov	lr, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14d      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4694      	mov	ip, r2
 8000be2:	d969      	bls.n	8000cb8 <__udivmoddi4+0xe8>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b152      	cbz	r2, 8000c00 <__udivmoddi4+0x30>
 8000bea:	fa01 f302 	lsl.w	r3, r1, r2
 8000bee:	f1c2 0120 	rsb	r1, r2, #32
 8000bf2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bfe:	4094      	lsls	r4, r2
 8000c00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c04:	0c21      	lsrs	r1, r4, #16
 8000c06:	fbbe f6f8 	udiv	r6, lr, r8
 8000c0a:	fa1f f78c 	uxth.w	r7, ip
 8000c0e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c16:	fb06 f107 	mul.w	r1, r6, r7
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c26:	f080 811f 	bcs.w	8000e68 <__udivmoddi4+0x298>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 811c 	bls.w	8000e68 <__udivmoddi4+0x298>
 8000c30:	3e02      	subs	r6, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c44:	fb00 f707 	mul.w	r7, r0, r7
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x92>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	f080 810a 	bcs.w	8000e6c <__udivmoddi4+0x29c>
 8000c58:	42a7      	cmp	r7, r4
 8000c5a:	f240 8107 	bls.w	8000e6c <__udivmoddi4+0x29c>
 8000c5e:	4464      	add	r4, ip
 8000c60:	3802      	subs	r0, #2
 8000c62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c66:	1be4      	subs	r4, r4, r7
 8000c68:	2600      	movs	r6, #0
 8000c6a:	b11d      	cbz	r5, 8000c74 <__udivmoddi4+0xa4>
 8000c6c:	40d4      	lsrs	r4, r2
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e9c5 4300 	strd	r4, r3, [r5]
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d909      	bls.n	8000c92 <__udivmoddi4+0xc2>
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	f000 80ef 	beq.w	8000e62 <__udivmoddi4+0x292>
 8000c84:	2600      	movs	r6, #0
 8000c86:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	fab3 f683 	clz	r6, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d14a      	bne.n	8000d30 <__udivmoddi4+0x160>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xd4>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 80f9 	bhi.w	8000e96 <__udivmoddi4+0x2c6>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb61 0303 	sbc.w	r3, r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	469e      	mov	lr, r3
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d0e0      	beq.n	8000c74 <__udivmoddi4+0xa4>
 8000cb2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb6:	e7dd      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xec>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f040 8092 	bne.w	8000dea <__udivmoddi4+0x21a>
 8000cc6:	eba1 010c 	sub.w	r1, r1, ip
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2601      	movs	r6, #1
 8000cd4:	0c20      	lsrs	r0, r4, #16
 8000cd6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cda:	fb07 1113 	mls	r1, r7, r3, r1
 8000cde:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce2:	fb0e f003 	mul.w	r0, lr, r3
 8000ce6:	4288      	cmp	r0, r1
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x12c>
 8000cea:	eb1c 0101 	adds.w	r1, ip, r1
 8000cee:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x12a>
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2c0>
 8000cfa:	4643      	mov	r3, r8
 8000cfc:	1a09      	subs	r1, r1, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d04:	fb07 1110 	mls	r1, r7, r0, r1
 8000d08:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x156>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x154>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d24:	4608      	mov	r0, r1
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d2e:	e79c      	b.n	8000c6a <__udivmoddi4+0x9a>
 8000d30:	f1c6 0720 	rsb	r7, r6, #32
 8000d34:	40b3      	lsls	r3, r6
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d42:	fa01 f306 	lsl.w	r3, r1, r6
 8000d46:	431c      	orrs	r4, r3
 8000d48:	40f9      	lsrs	r1, r7
 8000d4a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d52:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d56:	0c20      	lsrs	r0, r4, #16
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d64:	fb08 f00e 	mul.w	r0, r8, lr
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b8>
 8000d70:	eb1c 0101 	adds.w	r1, ip, r1
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2bc>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2bc>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4461      	add	r1, ip
 8000d88:	1a09      	subs	r1, r1, r0
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d90:	fb09 1110 	mls	r1, r9, r0, r1
 8000d94:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	458e      	cmp	lr, r1
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1e2>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000daa:	458e      	cmp	lr, r1
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4461      	add	r1, ip
 8000db2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dba:	eba1 010e 	sub.w	r1, r1, lr
 8000dbe:	42a1      	cmp	r1, r4
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46a6      	mov	lr, r4
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x2a4>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x2a0>
 8000dc8:	b15d      	cbz	r5, 8000de2 <__udivmoddi4+0x212>
 8000dca:	ebb3 0208 	subs.w	r2, r3, r8
 8000dce:	eb61 010e 	sbc.w	r1, r1, lr
 8000dd2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dd6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dda:	40f1      	lsrs	r1, r6
 8000ddc:	431f      	orrs	r7, r3
 8000dde:	e9c5 7100 	strd	r7, r1, [r5]
 8000de2:	2600      	movs	r6, #0
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	f1c2 0320 	rsb	r3, r2, #32
 8000dee:	40d8      	lsrs	r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa21 f303 	lsr.w	r3, r1, r3
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	4301      	orrs	r1, r0
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e08:	fb07 3610 	mls	r6, r7, r0, r3
 8000e0c:	0c0b      	lsrs	r3, r1, #16
 8000e0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e12:	fb00 f60e 	mul.w	r6, r0, lr
 8000e16:	429e      	cmp	r6, r3
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x260>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000e28:	429e      	cmp	r6, r3
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1b9b      	subs	r3, r3, r6
 8000e32:	b289      	uxth	r1, r1
 8000e34:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e38:	fb07 3316 	mls	r3, r7, r6, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb06 f30e 	mul.w	r3, r6, lr
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x28a>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2b0>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2b0>
 8000e56:	3e02      	subs	r6, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0x104>
 8000e62:	462e      	mov	r6, r5
 8000e64:	4628      	mov	r0, r5
 8000e66:	e705      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000e68:	4606      	mov	r6, r0
 8000e6a:	e6e3      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6f8      	b.n	8000c62 <__udivmoddi4+0x92>
 8000e70:	454b      	cmp	r3, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e80:	4646      	mov	r6, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x28a>
 8000e84:	4620      	mov	r0, r4
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1e2>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b8>
 8000e90:	3b02      	subs	r3, #2
 8000e92:	4461      	add	r1, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x12c>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e709      	b.n	8000cae <__udivmoddi4+0xde>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x156>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <rt_powd_snf>:
 * Arguments    : double u0
 *                double u1
 * Return Type  : double
 */
static double rt_powd_snf(double u0, double u1)
{
 8000ea4:	b5b0      	push	{r4, r5, r7, lr}
 8000ea6:	b08c      	sub	sp, #48	; 0x30
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	ed87 0b04 	vstr	d0, [r7, #16]
 8000eae:	ed87 1b02 	vstr	d1, [r7, #8]
  double y;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 8000eb2:	ed97 0b04 	vldr	d0, [r7, #16]
 8000eb6:	f001 faed 	bl	8002494 <rtIsNaN>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d106      	bne.n	8000ece <rt_powd_snf+0x2a>
 8000ec0:	ed97 0b02 	vldr	d0, [r7, #8]
 8000ec4:	f001 fae6 	bl	8002494 <rtIsNaN>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d005      	beq.n	8000eda <rt_powd_snf+0x36>
    y = rtNaN;
 8000ece:	4b80      	ldr	r3, [pc, #512]	; (80010d0 <rt_powd_snf+0x22c>)
 8000ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8000ed8:	e0ef      	b.n	80010ba <rt_powd_snf+0x216>
  } else {
    double d;
    double d1;
    d = fabs(u0);
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	ed97 7b00 	vldr	d7, [r7]
 8000eea:	ed87 7b08 	vstr	d7, [r7, #32]
    d1 = fabs(u1);
 8000eee:	68bc      	ldr	r4, [r7, #8]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8000ef6:	e9c7 4506 	strd	r4, r5, [r7, #24]
    if (rtIsInf(u1)) {
 8000efa:	ed97 0b02 	vldr	d0, [r7, #8]
 8000efe:	f001 fa9b 	bl	8002438 <rtIsInf>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d049      	beq.n	8000f9c <rt_powd_snf+0xf8>
      if (d == 1.0) {
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	4b71      	ldr	r3, [pc, #452]	; (80010d4 <rt_powd_snf+0x230>)
 8000f0e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f12:	f7ff fd85 	bl	8000a20 <__aeabi_dcmpeq>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d005      	beq.n	8000f28 <rt_powd_snf+0x84>
        y = 1.0;
 8000f1c:	f04f 0200 	mov.w	r2, #0
 8000f20:	4b6c      	ldr	r3, [pc, #432]	; (80010d4 <rt_powd_snf+0x230>)
 8000f22:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8000f26:	e0c8      	b.n	80010ba <rt_powd_snf+0x216>
      } else if (d > 1.0) {
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	4b69      	ldr	r3, [pc, #420]	; (80010d4 <rt_powd_snf+0x230>)
 8000f2e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f32:	f7ff fd9d 	bl	8000a70 <__aeabi_dcmpgt>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d017      	beq.n	8000f6c <rt_powd_snf+0xc8>
        if (u1 > 0.0) {
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f48:	f7ff fd92 	bl	8000a70 <__aeabi_dcmpgt>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d005      	beq.n	8000f5e <rt_powd_snf+0xba>
          y = rtInf;
 8000f52:	4b61      	ldr	r3, [pc, #388]	; (80010d8 <rt_powd_snf+0x234>)
 8000f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f58:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8000f5c:	e0ad      	b.n	80010ba <rt_powd_snf+0x216>
        } else {
          y = 0.0;
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8000f6a:	e0a6      	b.n	80010ba <rt_powd_snf+0x216>
        }
      } else if (u1 > 0.0) {
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f78:	f7ff fd7a 	bl	8000a70 <__aeabi_dcmpgt>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d006      	beq.n	8000f90 <rt_powd_snf+0xec>
        y = 0.0;
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8000f8e:	e094      	b.n	80010ba <rt_powd_snf+0x216>
      } else {
        y = rtInf;
 8000f90:	4b51      	ldr	r3, [pc, #324]	; (80010d8 <rt_powd_snf+0x234>)
 8000f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f96:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8000f9a:	e08e      	b.n	80010ba <rt_powd_snf+0x216>
      }
    } else if (d1 == 0.0) {
 8000f9c:	f04f 0200 	mov.w	r2, #0
 8000fa0:	f04f 0300 	mov.w	r3, #0
 8000fa4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fa8:	f7ff fd3a 	bl	8000a20 <__aeabi_dcmpeq>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d005      	beq.n	8000fbe <rt_powd_snf+0x11a>
      y = 1.0;
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	4b47      	ldr	r3, [pc, #284]	; (80010d4 <rt_powd_snf+0x230>)
 8000fb8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8000fbc:	e07d      	b.n	80010ba <rt_powd_snf+0x216>
    } else if (d1 == 1.0) {
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	4b44      	ldr	r3, [pc, #272]	; (80010d4 <rt_powd_snf+0x230>)
 8000fc4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fc8:	f7ff fd2a 	bl	8000a20 <__aeabi_dcmpeq>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d01b      	beq.n	800100a <rt_powd_snf+0x166>
      if (u1 > 0.0) {
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fde:	f7ff fd47 	bl	8000a70 <__aeabi_dcmpgt>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d004      	beq.n	8000ff2 <rt_powd_snf+0x14e>
        y = u0;
 8000fe8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8000ff0:	e063      	b.n	80010ba <rt_powd_snf+0x216>
      } else {
        y = 1.0 / u0;
 8000ff2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ff6:	f04f 0000 	mov.w	r0, #0
 8000ffa:	4936      	ldr	r1, [pc, #216]	; (80010d4 <rt_powd_snf+0x230>)
 8000ffc:	f7ff fbd2 	bl	80007a4 <__aeabi_ddiv>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001008:	e057      	b.n	80010ba <rt_powd_snf+0x216>
      }
    } else if (u1 == 2.0) {
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001012:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001016:	f7ff fd03 	bl	8000a20 <__aeabi_dcmpeq>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00a      	beq.n	8001036 <rt_powd_snf+0x192>
      y = u0 * u0;
 8001020:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001024:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001028:	f7ff fa92 	bl	8000550 <__aeabi_dmul>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001034:	e041      	b.n	80010ba <rt_powd_snf+0x216>
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	4b28      	ldr	r3, [pc, #160]	; (80010dc <rt_powd_snf+0x238>)
 800103c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001040:	f7ff fcee 	bl	8000a20 <__aeabi_dcmpeq>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d011      	beq.n	800106e <rt_powd_snf+0x1ca>
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	f04f 0300 	mov.w	r3, #0
 8001052:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001056:	f7ff fd01 	bl	8000a5c <__aeabi_dcmpge>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d006      	beq.n	800106e <rt_powd_snf+0x1ca>
      y = sqrt(u0);
 8001060:	ed97 0b04 	vldr	d0, [r7, #16]
 8001064:	f005 f890 	bl	8006188 <sqrt>
 8001068:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 800106c:	e025      	b.n	80010ba <rt_powd_snf+0x216>
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	f04f 0300 	mov.w	r3, #0
 8001076:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800107a:	f7ff fcdb 	bl	8000a34 <__aeabi_dcmplt>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d012      	beq.n	80010aa <rt_powd_snf+0x206>
 8001084:	ed97 0b02 	vldr	d0, [r7, #8]
 8001088:	f004 ff8e 	bl	8005fa8 <floor>
 800108c:	ec53 2b10 	vmov	r2, r3, d0
 8001090:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001094:	f7ff fcec 	bl	8000a70 <__aeabi_dcmpgt>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d005      	beq.n	80010aa <rt_powd_snf+0x206>
      y = rtNaN;
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <rt_powd_snf+0x22c>)
 80010a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80010a8:	e007      	b.n	80010ba <rt_powd_snf+0x216>
    } else {
      y = pow(u0, u1);
 80010aa:	ed97 1b02 	vldr	d1, [r7, #8]
 80010ae:	ed97 0b04 	vldr	d0, [r7, #16]
 80010b2:	f004 fff9 	bl	80060a8 <pow>
 80010b6:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
    }
  }
  return y;
 80010ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80010be:	ec43 2b17 	vmov	d7, r2, r3
}
 80010c2:	eeb0 0a47 	vmov.f32	s0, s14
 80010c6:	eef0 0a67 	vmov.f32	s1, s15
 80010ca:	3730      	adds	r7, #48	; 0x30
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bdb0      	pop	{r4, r5, r7, pc}
 80010d0:	20000000 	.word	0x20000000
 80010d4:	3ff00000 	.word	0x3ff00000
 80010d8:	20000008 	.word	0x20000008
 80010dc:	3fe00000 	.word	0x3fe00000

080010e0 <Qubic>:
 * Return Type  : void
 */
void Qubic(double q_k1, double q_k2, double qdot_k1, double qdot_k2, double tf,
           emxArray_real_T *q_position, emxArray_real_T *q_velocity,
           emxArray_real_T *q_acc)
{
 80010e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010e4:	b0a1      	sub	sp, #132	; 0x84
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 80010ec:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 80010f0:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 80010f4:	ed87 3b08 	vstr	d3, [r7, #32]
 80010f8:	ed87 4b06 	vstr	d4, [r7, #24]
 80010fc:	6178      	str	r0, [r7, #20]
 80010fe:	6139      	str	r1, [r7, #16]
 8001100:	60fa      	str	r2, [r7, #12]
  double *q_position_data;
  double *q_velocity_data;
  int i;
  int k;
  int q_acc_tmp_tmp;
  q_acc_data = q_acc->data;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	67fb      	str	r3, [r7, #124]	; 0x7c
  delta1 = tf * 2000.0;
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	4bac      	ldr	r3, [pc, #688]	; (80013c0 <Qubic+0x2e0>)
 800110e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001112:	f7ff fa1d 	bl	8000550 <__aeabi_dmul>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  if (!(delta1 >= 0.0)) {
 800111e:	2301      	movs	r3, #1
 8001120:	461e      	mov	r6, r3
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	f04f 0300 	mov.w	r3, #0
 800112a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800112e:	f7ff fc95 	bl	8000a5c <__aeabi_dcmpge>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <Qubic+0x5c>
 8001138:	2300      	movs	r3, #0
 800113a:	461e      	mov	r6, r3
 800113c:	b2f3      	uxtb	r3, r6
 800113e:	f083 0301 	eor.w	r3, r3, #1
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	d009      	beq.n	800115c <Qubic+0x7c>
    q_acc->size[0] = 1;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2201      	movs	r2, #1
 800114e:	601a      	str	r2, [r3, #0]
    q_acc->size[1] = 0;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	3304      	adds	r3, #4
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	e158      	b.n	800140e <Qubic+0x32e>
  } else {
    d = floor(delta1);
 800115c:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8001160:	f004 ff22 	bl	8005fa8 <floor>
 8001164:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
    i = q_acc->size[0] * q_acc->size[1];
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	6852      	ldr	r2, [r2, #4]
 8001172:	3204      	adds	r2, #4
 8001174:	6812      	ldr	r2, [r2, #0]
 8001176:	fb02 f303 	mul.w	r3, r2, r3
 800117a:	67bb      	str	r3, [r7, #120]	; 0x78
    q_acc->size[0] = 1;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	601a      	str	r2, [r3, #0]
    q_acc->size[1] = (int)d;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	1d1e      	adds	r6, r3, #4
 800118a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800118e:	f7ff fc8f 	bl	8000ab0 <__aeabi_d2iz>
 8001192:	4603      	mov	r3, r0
 8001194:	6033      	str	r3, [r6, #0]
    emxEnsureCapacity_real_T(q_acc, i);
 8001196:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f000 fb3e 	bl	800181a <emxEnsureCapacity_real_T>
    q_acc_data = q_acc->data;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	67fb      	str	r3, [r7, #124]	; 0x7c
    if ((int)d >= 1) {
 80011a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80011a8:	f7ff fc82 	bl	8000ab0 <__aeabi_d2iz>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f340 812d 	ble.w	800140e <Qubic+0x32e>
      q_acc_tmp_tmp = (int)d - 1;
 80011b4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80011b8:	f7ff fc7a 	bl	8000ab0 <__aeabi_d2iz>
 80011bc:	4603      	mov	r3, r0
 80011be:	3b01      	subs	r3, #1
 80011c0:	65fb      	str	r3, [r7, #92]	; 0x5c
      q_acc_data[(int)floor(delta1) - 1] = tf;
 80011c2:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 80011c6:	f004 feef 	bl	8005fa8 <floor>
 80011ca:	ec53 2b10 	vmov	r2, r3, d0
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	f7ff fc6d 	bl	8000ab0 <__aeabi_d2iz>
 80011d6:	4603      	mov	r3, r0
 80011d8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80011dc:	3b01      	subs	r3, #1
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80011e2:	18d1      	adds	r1, r2, r3
 80011e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011e8:	e9c1 2300 	strd	r2, r3, [r1]
      if (q_acc->size[1] >= 2) {
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	3304      	adds	r3, #4
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	f340 810a 	ble.w	800140e <Qubic+0x32e>
        q_acc_data[0] = 0.0;
 80011fa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	e9c1 2300 	strd	r2, r3, [r1]
        if (q_acc->size[1] >= 3) {
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	3304      	adds	r3, #4
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b02      	cmp	r3, #2
 8001212:	f340 80fc 	ble.w	800140e <Qubic+0x32e>
          if (-tf == 0.0) {
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001222:	f7ff fbfd 	bl	8000a20 <__aeabi_dcmpeq>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d051      	beq.n	80012d0 <Qubic+0x1f0>
            delta1 = tf / ((double)q_acc->size[1] - 1.0);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	3304      	adds	r3, #4
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f921 	bl	800047c <__aeabi_i2d>
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	4b61      	ldr	r3, [pc, #388]	; (80013c4 <Qubic+0x2e4>)
 8001240:	f7fe ffce 	bl	80001e0 <__aeabi_dsub>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800124c:	f7ff faaa 	bl	80007a4 <__aeabi_ddiv>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            for (k = 2; k <= q_acc_tmp_tmp; k++) {
 8001258:	2302      	movs	r3, #2
 800125a:	677b      	str	r3, [r7, #116]	; 0x74
 800125c:	e01c      	b.n	8001298 <Qubic+0x1b8>
              q_acc_data[k - 1] =
                  (double)(((k << 1) - q_acc->size[1]) - 1) * delta1;
 800125e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001260:	005a      	lsls	r2, r3, #1
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	3304      	adds	r3, #4
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	3b01      	subs	r3, #1
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f904 	bl	800047c <__aeabi_i2d>
              q_acc_data[k - 1] =
 8001274:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001276:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800127a:	3b01      	subs	r3, #1
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001280:	18d6      	adds	r6, r2, r3
                  (double)(((k << 1) - q_acc->size[1]) - 1) * delta1;
 8001282:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001286:	f7ff f963 	bl	8000550 <__aeabi_dmul>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
              q_acc_data[k - 1] =
 800128e:	e9c6 2300 	strd	r2, r3, [r6]
            for (k = 2; k <= q_acc_tmp_tmp; k++) {
 8001292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001294:	3301      	adds	r3, #1
 8001296:	677b      	str	r3, [r7, #116]	; 0x74
 8001298:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800129a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800129c:	429a      	cmp	r2, r3
 800129e:	ddde      	ble.n	800125e <Qubic+0x17e>
            }
            if ((q_acc->size[1] & 1) == 1) {
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	3304      	adds	r3, #4
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 80ae 	beq.w	800140e <Qubic+0x32e>
              q_acc_data[q_acc->size[1] >> 1] = 0.0;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	3304      	adds	r3, #4
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	105b      	asrs	r3, r3, #1
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80012c0:	18d1      	adds	r1, r2, r3
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	f04f 0300 	mov.w	r3, #0
 80012ca:	e9c1 2300 	strd	r2, r3, [r1]
 80012ce:	e09e      	b.n	800140e <Qubic+0x32e>
            }
          } else if ((tf < 0.0) && (fabs(tf) > 8.9884656743115785E+307)) {
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012dc:	f7ff fbaa 	bl	8000a34 <__aeabi_dcmplt>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d04e      	beq.n	8001384 <Qubic+0x2a4>
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	603b      	str	r3, [r7, #0]
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	f04f 32ff 	mov.w	r2, #4294967295
 80012f6:	4b34      	ldr	r3, [pc, #208]	; (80013c8 <Qubic+0x2e8>)
 80012f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012fc:	f7ff fbb8 	bl	8000a70 <__aeabi_dcmpgt>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d03e      	beq.n	8001384 <Qubic+0x2a4>
            delta1 = tf / ((double)q_acc->size[1] - 1.0);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	3304      	adds	r3, #4
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f8b4 	bl	800047c <__aeabi_i2d>
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <Qubic+0x2e4>)
 800131a:	f7fe ff61 	bl	80001e0 <__aeabi_dsub>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001326:	f7ff fa3d 	bl	80007a4 <__aeabi_ddiv>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            i = q_acc->size[1];
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	67bb      	str	r3, [r7, #120]	; 0x78
            for (k = 0; k <= i - 3; k++) {
 800133a:	2300      	movs	r3, #0
 800133c:	677b      	str	r3, [r7, #116]	; 0x74
 800133e:	e01b      	b.n	8001378 <Qubic+0x298>
              q_acc_data[k + 1] = delta1 * ((double)k + 1.0);
 8001340:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001342:	f7ff f89b 	bl	800047c <__aeabi_i2d>
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <Qubic+0x2e4>)
 800134c:	f7fe ff4a 	bl	80001e4 <__adddf3>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800135a:	3301      	adds	r3, #1
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001360:	18d6      	adds	r6, r2, r3
 8001362:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001366:	f7ff f8f3 	bl	8000550 <__aeabi_dmul>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	e9c6 2300 	strd	r2, r3, [r6]
            for (k = 0; k <= i - 3; k++) {
 8001372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001374:	3301      	adds	r3, #1
 8001376:	677b      	str	r3, [r7, #116]	; 0x74
 8001378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800137a:	3b02      	subs	r3, #2
 800137c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800137e:	429a      	cmp	r2, r3
 8001380:	dbde      	blt.n	8001340 <Qubic+0x260>
          } else if ((tf < 0.0) && (fabs(tf) > 8.9884656743115785E+307)) {
 8001382:	e044      	b.n	800140e <Qubic+0x32e>
            }
          } else {
            delta1 = tf / ((double)q_acc->size[1] - 1.0);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	3304      	adds	r3, #4
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f875 	bl	800047c <__aeabi_i2d>
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <Qubic+0x2e4>)
 8001398:	f7fe ff22 	bl	80001e0 <__aeabi_dsub>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013a4:	f7ff f9fe 	bl	80007a4 <__aeabi_ddiv>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            i = q_acc->size[1];
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	67bb      	str	r3, [r7, #120]	; 0x78
            for (k = 0; k <= i - 3; k++) {
 80013b8:	2300      	movs	r3, #0
 80013ba:	677b      	str	r3, [r7, #116]	; 0x74
 80013bc:	e022      	b.n	8001404 <Qubic+0x324>
 80013be:	bf00      	nop
 80013c0:	409f4000 	.word	0x409f4000
 80013c4:	3ff00000 	.word	0x3ff00000
 80013c8:	7fdfffff 	.word	0x7fdfffff
              q_acc_data[k + 1] = ((double)k + 1.0) * delta1;
 80013cc:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80013ce:	f7ff f855 	bl	800047c <__aeabi_i2d>
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	4b6e      	ldr	r3, [pc, #440]	; (8001590 <Qubic+0x4b0>)
 80013d8:	f7fe ff04 	bl	80001e4 <__adddf3>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013e6:	3301      	adds	r3, #1
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80013ec:	18d6      	adds	r6, r2, r3
 80013ee:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80013f2:	f7ff f8ad 	bl	8000550 <__aeabi_dmul>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	e9c6 2300 	strd	r2, r3, [r6]
            for (k = 0; k <= i - 3; k++) {
 80013fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001400:	3301      	adds	r3, #1
 8001402:	677b      	str	r3, [r7, #116]	; 0x74
 8001404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001406:	3b02      	subs	r3, #2
 8001408:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800140a:	429a      	cmp	r2, r3
 800140c:	dbde      	blt.n	80013cc <Qubic+0x2ec>
          }
        }
      }
    }
  }
  delta1 = q_k2 - q_k1;
 800140e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001412:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001416:	f7fe fee3 	bl	80001e0 <__aeabi_dsub>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  C2_tmp = tf * tf;
 8001422:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001426:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800142a:	f7ff f891 	bl	8000550 <__aeabi_dmul>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  C2 = 3.0 * (delta1 / C2_tmp) + (-qdot_k2 - 2.0 * qdot_k1) / tf;
 8001436:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800143a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800143e:	f7ff f9b1 	bl	80007a4 <__aeabi_ddiv>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4610      	mov	r0, r2
 8001448:	4619      	mov	r1, r3
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	4b51      	ldr	r3, [pc, #324]	; (8001594 <Qubic+0x4b4>)
 8001450:	f7ff f87e 	bl	8000550 <__aeabi_dmul>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4690      	mov	r8, r2
 800145a:	4699      	mov	r9, r3
 800145c:	6a3c      	ldr	r4, [r7, #32]
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001464:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	f7fe feba 	bl	80001e4 <__adddf3>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4620      	mov	r0, r4
 8001476:	4629      	mov	r1, r5
 8001478:	f7fe feb2 	bl	80001e0 <__aeabi_dsub>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001488:	f7ff f98c 	bl	80007a4 <__aeabi_ddiv>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4640      	mov	r0, r8
 8001492:	4649      	mov	r1, r9
 8001494:	f7fe fea6 	bl	80001e4 <__adddf3>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  delta1 =
      -2.0 * (delta1 / rt_powd_snf(tf, 3.0)) + (qdot_k2 + qdot_k1) / C2_tmp;
 80014a0:	ed9f 1b39 	vldr	d1, [pc, #228]	; 8001588 <Qubic+0x4a8>
 80014a4:	ed97 0b06 	vldr	d0, [r7, #24]
 80014a8:	f7ff fcfc 	bl	8000ea4 <rt_powd_snf>
 80014ac:	ec53 2b10 	vmov	r2, r3, d0
 80014b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80014b4:	f7ff f976 	bl	80007a4 <__aeabi_ddiv>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4610      	mov	r0, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80014c8:	f7ff f842 	bl	8000550 <__aeabi_dmul>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4614      	mov	r4, r2
 80014d2:	461d      	mov	r5, r3
 80014d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80014d8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014dc:	f7fe fe82 	bl	80001e4 <__adddf3>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80014ec:	f7ff f95a 	bl	80007a4 <__aeabi_ddiv>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
  delta1 =
 80014f4:	4620      	mov	r0, r4
 80014f6:	4629      	mov	r1, r5
 80014f8:	f7fe fe74 	bl	80001e4 <__adddf3>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  i = q_velocity->size[0] * q_velocity->size[1];
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	6852      	ldr	r2, [r2, #4]
 800150e:	3204      	adds	r2, #4
 8001510:	6812      	ldr	r2, [r2, #0]
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	67bb      	str	r3, [r7, #120]	; 0x78
  q_velocity->size[0] = 1;
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	601a      	str	r2, [r3, #0]
  q_velocity->size[1] = q_acc->size[1];
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	3304      	adds	r3, #4
 800152a:	6852      	ldr	r2, [r2, #4]
 800152c:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_velocity, i);
 800152e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001530:	6938      	ldr	r0, [r7, #16]
 8001532:	f000 f972 	bl	800181a <emxEnsureCapacity_real_T>
  q_velocity_data = q_velocity->data;
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	647b      	str	r3, [r7, #68]	; 0x44
  q_acc_tmp_tmp = q_acc->size[1];
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	65fb      	str	r3, [r7, #92]	; 0x5c
  i = q_position->size[0] * q_position->size[1];
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	6852      	ldr	r2, [r2, #4]
 800154e:	3204      	adds	r2, #4
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	67bb      	str	r3, [r7, #120]	; 0x78
  q_position->size[0] = 1;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	601a      	str	r2, [r3, #0]
  q_position->size[1] = q_acc->size[1];
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	3304      	adds	r3, #4
 800156a:	6852      	ldr	r2, [r2, #4]
 800156c:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_position, i);
 800156e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001570:	6978      	ldr	r0, [r7, #20]
 8001572:	f000 f952 	bl	800181a <emxEnsureCapacity_real_T>
  q_position_data = q_position->data;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	643b      	str	r3, [r7, #64]	; 0x40
  for (i = 0; i < q_acc_tmp_tmp; i++) {
 800157c:	2300      	movs	r3, #0
 800157e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001580:	e067      	b.n	8001652 <Qubic+0x572>
 8001582:	bf00      	nop
 8001584:	f3af 8000 	nop.w
 8001588:	00000000 	.word	0x00000000
 800158c:	40080000 	.word	0x40080000
 8001590:	3ff00000 	.word	0x3ff00000
 8001594:	40080000 	.word	0x40080000
    d = q_acc_data[i];
 8001598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800159e:	4413      	add	r3, r2
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    C2_tmp = d * d;
 80015a8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80015ac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80015b0:	f7fe ffce 	bl	8000550 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    q_velocity_data[i] = C2_tmp;
 80015bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80015c2:	18d1      	adds	r1, r2, r3
 80015c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80015c8:	e9c1 2300 	strd	r2, r3, [r1]
    q_position_data[i] =
        ((q_k1 + qdot_k1 * d) + C2 * C2_tmp) + delta1 * rt_powd_snf(d, 3.0);
 80015cc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80015d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015d4:	f7fe ffbc 	bl	8000550 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80015e4:	f7fe fdfe 	bl	80001e4 <__adddf3>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4614      	mov	r4, r2
 80015ee:	461d      	mov	r5, r3
 80015f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80015f4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80015f8:	f7fe ffaa 	bl	8000550 <__aeabi_dmul>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4620      	mov	r0, r4
 8001602:	4629      	mov	r1, r5
 8001604:	f7fe fdee 	bl	80001e4 <__adddf3>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4690      	mov	r8, r2
 800160e:	4699      	mov	r9, r3
 8001610:	ed9f 1b71 	vldr	d1, [pc, #452]	; 80017d8 <Qubic+0x6f8>
 8001614:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001618:	f7ff fc44 	bl	8000ea4 <rt_powd_snf>
 800161c:	ec51 0b10 	vmov	r0, r1, d0
 8001620:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001624:	f7fe ff94 	bl	8000550 <__aeabi_dmul>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
    q_position_data[i] =
 8001630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001636:	18d4      	adds	r4, r2, r3
        ((q_k1 + qdot_k1 * d) + C2 * C2_tmp) + delta1 * rt_powd_snf(d, 3.0);
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4640      	mov	r0, r8
 800163e:	4649      	mov	r1, r9
 8001640:	f7fe fdd0 	bl	80001e4 <__adddf3>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
    q_position_data[i] =
 8001648:	e9c4 2300 	strd	r2, r3, [r4]
  for (i = 0; i < q_acc_tmp_tmp; i++) {
 800164c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800164e:	3301      	adds	r3, #1
 8001650:	67bb      	str	r3, [r7, #120]	; 0x78
 8001652:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001656:	429a      	cmp	r2, r3
 8001658:	db9e      	blt.n	8001598 <Qubic+0x4b8>
  }
  i = q_velocity->size[0] * q_velocity->size[1];
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	6852      	ldr	r2, [r2, #4]
 8001664:	3204      	adds	r2, #4
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	fb02 f303 	mul.w	r3, r2, r3
 800166c:	67bb      	str	r3, [r7, #120]	; 0x78
  q_velocity->size[0] = 1;
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]
  q_velocity->size[1] = q_acc->size[1];
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	3304      	adds	r3, #4
 8001680:	6852      	ldr	r2, [r2, #4]
 8001682:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_velocity, i);
 8001684:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001686:	6938      	ldr	r0, [r7, #16]
 8001688:	f000 f8c7 	bl	800181a <emxEnsureCapacity_real_T>
  q_velocity_data = q_velocity->data;
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	647b      	str	r3, [r7, #68]	; 0x44
  d = 2.0 * C2;
 8001692:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	f7fe fda3 	bl	80001e4 <__adddf3>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  C2_tmp = 3.0 * delta1;
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	4b4d      	ldr	r3, [pc, #308]	; (80017e0 <Qubic+0x700>)
 80016ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80016b0:	f7fe ff4e 	bl	8000550 <__aeabi_dmul>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  q_acc_tmp_tmp = q_acc->size[1] - 1;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	3304      	adds	r3, #4
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 80016c8:	2300      	movs	r3, #0
 80016ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80016cc:	e034      	b.n	8001738 <Qubic+0x658>
    q_velocity_data[i] =
        (qdot_k1 + d * q_acc_data[i]) + C2_tmp * q_velocity_data[i];
 80016ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80016d4:	4413      	add	r3, r2
 80016d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016da:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80016de:	f7fe ff37 	bl	8000550 <__aeabi_dmul>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80016ee:	f7fe fd79 	bl	80001e4 <__adddf3>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4690      	mov	r8, r2
 80016f8:	4699      	mov	r9, r3
 80016fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001700:	4413      	add	r3, r2
 8001702:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001706:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800170a:	f7fe ff21 	bl	8000550 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
    q_velocity_data[i] =
 8001716:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800171c:	18d4      	adds	r4, r2, r3
        (qdot_k1 + d * q_acc_data[i]) + C2_tmp * q_velocity_data[i];
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4640      	mov	r0, r8
 8001724:	4649      	mov	r1, r9
 8001726:	f7fe fd5d 	bl	80001e4 <__adddf3>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
    q_velocity_data[i] =
 800172e:	e9c4 2300 	strd	r2, r3, [r4]
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001732:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001734:	3301      	adds	r3, #1
 8001736:	67bb      	str	r3, [r7, #120]	; 0x78
 8001738:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800173a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800173c:	429a      	cmp	r2, r3
 800173e:	ddc6      	ble.n	80016ce <Qubic+0x5ee>
  }
  i = q_acc->size[0] * q_acc->size[1];
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	6852      	ldr	r2, [r2, #4]
 800174a:	3204      	adds	r2, #4
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	fb02 f303 	mul.w	r3, r2, r3
 8001752:	67bb      	str	r3, [r7, #120]	; 0x78
  q_acc->size[0] = 1;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_acc, i);
 800175c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f000 f85b 	bl	800181a <emxEnsureCapacity_real_T>
  q_acc_data = q_acc->data;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	67fb      	str	r3, [r7, #124]	; 0x7c
  C2_tmp = 6.0 * delta1;
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <Qubic+0x704>)
 8001770:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001774:	f7fe feec 	bl	8000550 <__aeabi_dmul>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001780:	2300      	movs	r3, #0
 8001782:	67bb      	str	r3, [r7, #120]	; 0x78
 8001784:	e01c      	b.n	80017c0 <Qubic+0x6e0>
    q_acc_data[i] = d + C2_tmp * q_acc_data[i];
 8001786:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800178c:	4413      	add	r3, r2
 800178e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001792:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001796:	f7fe fedb 	bl	8000550 <__aeabi_dmul>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4610      	mov	r0, r2
 80017a0:	4619      	mov	r1, r3
 80017a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80017a8:	18d4      	adds	r4, r2, r3
 80017aa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80017ae:	f7fe fd19 	bl	80001e4 <__adddf3>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	e9c4 2300 	strd	r2, r3, [r4]
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 80017ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017bc:	3301      	adds	r3, #1
 80017be:	67bb      	str	r3, [r7, #120]	; 0x78
 80017c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80017c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017c4:	429a      	cmp	r2, r3
 80017c6:	ddde      	ble.n	8001786 <Qubic+0x6a6>
  }
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	3784      	adds	r7, #132	; 0x84
 80017ce:	46bd      	mov	sp, r7
 80017d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017d4:	f3af 8000 	nop.w
 80017d8:	00000000 	.word	0x00000000
 80017dc:	40080000 	.word	0x40080000
 80017e0:	40080000 	.word	0x40080000
 80017e4:	40180000 	.word	0x40180000

080017e8 <emxDestroyArray_real_T>:
/*
 * Arguments    : emxArray_real_T *emxArray
 * Return Type  : void
 */
void emxDestroyArray_real_T(emxArray_real_T *emxArray)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  emxFree_real_T(&emxArray);
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f878 	bl	80018e8 <emxFree_real_T>
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <emxInitArray_real_T>:
 * Arguments    : emxArray_real_T **pEmxArray
 *                int numDimensions
 * Return Type  : void
 */
void emxInitArray_real_T(emxArray_real_T **pEmxArray, int numDimensions)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  emxInit_real_T(pEmxArray, numDimensions);
 800180a:	6839      	ldr	r1, [r7, #0]
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 f895 	bl	800193c <emxInit_real_T>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <emxEnsureCapacity_real_T>:
 * Arguments    : emxArray_real_T *emxArray
 *                int oldNumel
 * Return Type  : void
 */
void emxEnsureCapacity_real_T(emxArray_real_T *emxArray, int oldNumel)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	6039      	str	r1, [r7, #0]
  int i;
  int newNumel;
  void *newData;
  if (oldNumel < 0) {
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	da01      	bge.n	800182e <emxEnsureCapacity_real_T+0x14>
    oldNumel = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	603b      	str	r3, [r7, #0]
  }
  newNumel = 1;
 800182e:	2301      	movs	r3, #1
 8001830:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e00c      	b.n	8001852 <emxEnsureCapacity_real_T+0x38>
    newNumel *= emxArray->size[i];
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	3301      	adds	r3, #1
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	429a      	cmp	r2, r3
 800185a:	dbed      	blt.n	8001838 <emxEnsureCapacity_real_T+0x1e>
  }
  if (newNumel > emxArray->allocatedSize) {
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	429a      	cmp	r2, r3
 8001864:	dd3c      	ble.n	80018e0 <emxEnsureCapacity_real_T+0xc6>
    i = emxArray->allocatedSize;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	617b      	str	r3, [r7, #20]
    if (i < 16) {
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	2b0f      	cmp	r3, #15
 8001870:	dc0d      	bgt.n	800188e <emxEnsureCapacity_real_T+0x74>
      i = 16;
 8001872:	2310      	movs	r3, #16
 8001874:	617b      	str	r3, [r7, #20]
    }
    while (i < newNumel) {
 8001876:	e00a      	b.n	800188e <emxEnsureCapacity_real_T+0x74>
      if (i > 1073741823) {
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800187e:	db03      	blt.n	8001888 <emxEnsureCapacity_real_T+0x6e>
        i = MAX_int32_T;
 8001880:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	e002      	b.n	800188e <emxEnsureCapacity_real_T+0x74>
      } else {
        i *= 2;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	617b      	str	r3, [r7, #20]
    while (i < newNumel) {
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	429a      	cmp	r2, r3
 8001894:	dbf0      	blt.n	8001878 <emxEnsureCapacity_real_T+0x5e>
      }
    }
    newData = calloc((unsigned int)i, sizeof(double));
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	2108      	movs	r1, #8
 800189a:	4618      	mov	r0, r3
 800189c:	f004 fa18 	bl	8005cd0 <calloc>
 80018a0:	4603      	mov	r3, r0
 80018a2:	60fb      	str	r3, [r7, #12]
    if (emxArray->data != NULL) {
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d010      	beq.n	80018ce <emxEnsureCapacity_real_T+0xb4>
      memcpy(newData, emxArray->data, sizeof(double) * (unsigned int)oldNumel);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6819      	ldr	r1, [r3, #0]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	461a      	mov	r2, r3
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f004 fa4c 	bl	8005d54 <memcpy>
      if (emxArray->canFreeData) {
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	7c1b      	ldrb	r3, [r3, #16]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d004      	beq.n	80018ce <emxEnsureCapacity_real_T+0xb4>
        free(emxArray->data);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f004 fa3b 	bl	8005d44 <free>
      }
    }
    emxArray->data = (double *)newData;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	601a      	str	r2, [r3, #0]
    emxArray->allocatedSize = i;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	609a      	str	r2, [r3, #8]
    emxArray->canFreeData = true;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	741a      	strb	r2, [r3, #16]
  }
}
 80018e0:	bf00      	nop
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <emxFree_real_T>:
/*
 * Arguments    : emxArray_real_T **pEmxArray
 * Return Type  : void
 */
void emxFree_real_T(emxArray_real_T **pEmxArray)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if (*pEmxArray != (emxArray_real_T *)NULL) {
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d01d      	beq.n	8001934 <emxFree_real_T+0x4c>
    if (((*pEmxArray)->data != (double *)NULL) && (*pEmxArray)->canFreeData) {
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00a      	beq.n	8001918 <emxFree_real_T+0x30>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	7c1b      	ldrb	r3, [r3, #16]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <emxFree_real_T+0x30>
      free((*pEmxArray)->data);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f004 fa16 	bl	8005d44 <free>
    }
    free((*pEmxArray)->size);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	4618      	mov	r0, r3
 8001920:	f004 fa10 	bl	8005d44 <free>
    free(*pEmxArray);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f004 fa0b 	bl	8005d44 <free>
    *pEmxArray = (emxArray_real_T *)NULL;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
  }
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <emxInit_real_T>:
 * Arguments    : emxArray_real_T **pEmxArray
 *                int numDimensions
 * Return Type  : void
 */
void emxInit_real_T(emxArray_real_T **pEmxArray, int numDimensions)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  emxArray_real_T *emxArray;
  int i;
  *pEmxArray = (emxArray_real_T *)malloc(sizeof(emxArray_real_T));
 8001946:	2014      	movs	r0, #20
 8001948:	f004 f9f4 	bl	8005d34 <malloc>
 800194c:	4603      	mov	r3, r0
 800194e:	461a      	mov	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	601a      	str	r2, [r3, #0]
  emxArray = *pEmxArray;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	60bb      	str	r3, [r7, #8]
  emxArray->data = (double *)NULL;
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
  emxArray->numDimensions = numDimensions;
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	60da      	str	r2, [r3, #12]
  emxArray->size = (int *)malloc(sizeof(int) * (unsigned int)numDimensions);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4618      	mov	r0, r3
 800196c:	f004 f9e2 	bl	8005d34 <malloc>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	605a      	str	r2, [r3, #4]
  emxArray->allocatedSize = 0;
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  emxArray->canFreeData = true;
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	2201      	movs	r2, #1
 8001982:	741a      	strb	r2, [r3, #16]
  for (i = 0; i < numDimensions; i++) {
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	e009      	b.n	800199e <emxInit_real_T+0x62>
    emxArray->size[i] = 0;
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
  for (i = 0; i < numDimensions; i++) {
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	3301      	adds	r3, #1
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	dbf1      	blt.n	800198a <emxInit_real_T+0x4e>
  }
}
 80019a6:	bf00      	nop
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <argInit_real_T>:
/*
 * Arguments    : void
 * Return Type  : double
 */
static double argInit_real_T(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return 0.0;
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	ec43 2b17 	vmov	d7, r2, r3
}
 80019c0:	eeb0 0a47 	vmov.f32	s0, s14
 80019c4:	eef0 0a67 	vmov.f32	s1, s15
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	main_Qubic();
 80019d6:	f000 fcd3 	bl	8002380 <main_Qubic>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019da:	f000 ffc7 	bl	800296c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019de:	f000 f973 	bl	8001cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019e2:	f000 fb9d 	bl	8002120 <MX_GPIO_Init>
  MX_DMA_Init();
 80019e6:	f000 fb7b 	bl	80020e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80019ea:	f000 fb4f 	bl	800208c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80019ee:	f000 fa35 	bl	8001e5c <MX_TIM2_Init>
  MX_TIM3_Init();
 80019f2:	f000 fa87 	bl	8001f04 <MX_TIM3_Init>
  MX_TIM5_Init();
 80019f6:	f000 fafb 	bl	8001ff0 <MX_TIM5_Init>
  MX_ADC1_Init();
 80019fa:	f000 f9cd 	bl	8001d98 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
    HAL_ADC_Start_DMA(&hadc1, Joystick_position, 2);
 80019fe:	2202      	movs	r2, #2
 8001a00:	4999      	ldr	r1, [pc, #612]	; (8001c68 <main+0x298>)
 8001a02:	489a      	ldr	r0, [pc, #616]	; (8001c6c <main+0x29c>)
 8001a04:	f001 f868 	bl	8002ad8 <HAL_ADC_Start_DMA>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);
 8001a08:	2104      	movs	r1, #4
 8001a0a:	4899      	ldr	r0, [pc, #612]	; (8001c70 <main+0x2a0>)
 8001a0c:	f003 f94c 	bl	8004ca8 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001a10:	2100      	movs	r1, #0
 8001a12:	4898      	ldr	r0, [pc, #608]	; (8001c74 <main+0x2a4>)
 8001a14:	f002 fff2 	bl	80049fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001a18:	2104      	movs	r1, #4
 8001a1a:	4896      	ldr	r0, [pc, #600]	; (8001c74 <main+0x2a4>)
 8001a1c:	f002 ffee 	bl	80049fc <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim5);
 8001a20:	4895      	ldr	r0, [pc, #596]	; (8001c78 <main+0x2a8>)
 8001a22:	f002 ff37 	bl	8004894 <HAL_TIM_Base_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	      static uint64_t timestamp = 0;
	      static float timestampTrajact = 0;
		  if(HAL_GetTick() >= timestampTrajact){
 8001a26:	f001 f807 	bl	8002a38 <HAL_GetTick>
 8001a2a:	ee07 0a90 	vmov	s15, r0
 8001a2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a32:	4b92      	ldr	r3, [pc, #584]	; (8001c7c <main+0x2ac>)
 8001a34:	edd3 7a00 	vldr	s15, [r3]
 8001a38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a40:	db46      	blt.n	8001ad0 <main+0x100>
			  timestampTrajact = HAL_GetTick() + 0.01;
 8001a42:	f000 fff9 	bl	8002a38 <HAL_GetTick>
 8001a46:	4603      	mov	r3, r0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fd07 	bl	800045c <__aeabi_ui2d>
 8001a4e:	a384      	add	r3, pc, #528	; (adr r3, 8001c60 <main+0x290>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f7fe fbc6 	bl	80001e4 <__adddf3>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f7ff f84e 	bl	8000b00 <__aeabi_d2f>
 8001a64:	4603      	mov	r3, r0
 8001a66:	4a85      	ldr	r2, [pc, #532]	; (8001c7c <main+0x2ac>)
 8001a68:	6013      	str	r3, [r2, #0]
			  if(indexposition < (0.5*2000)-1 && path == 1){
 8001a6a:	4b85      	ldr	r3, [pc, #532]	; (8001c80 <main+0x2b0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001a72:	4293      	cmp	r3, r2
 8001a74:	dc2c      	bgt.n	8001ad0 <main+0x100>
 8001a76:	4b83      	ldr	r3, [pc, #524]	; (8001c84 <main+0x2b4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d128      	bne.n	8001ad0 <main+0x100>
			  SetDegree = positionTraject;
 8001a7e:	4b82      	ldr	r3, [pc, #520]	; (8001c88 <main+0x2b8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a82      	ldr	r2, [pc, #520]	; (8001c8c <main+0x2bc>)
 8001a84:	6013      	str	r3, [r2, #0]
			  indexposition += 1;
 8001a86:	4b7e      	ldr	r3, [pc, #504]	; (8001c80 <main+0x2b0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	4a7c      	ldr	r2, [pc, #496]	; (8001c80 <main+0x2b0>)
 8001a8e:	6013      	str	r3, [r2, #0]
		      positionTraject = q_positionN->data[indexposition];
 8001a90:	4b7f      	ldr	r3, [pc, #508]	; (8001c90 <main+0x2c0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4b7a      	ldr	r3, [pc, #488]	; (8001c80 <main+0x2b0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f7ff f82b 	bl	8000b00 <__aeabi_d2f>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4a76      	ldr	r2, [pc, #472]	; (8001c88 <main+0x2b8>)
 8001aae:	6013      	str	r3, [r2, #0]
		      velocityTraject = q_velocityN->data[indexposition];
 8001ab0:	4b78      	ldr	r3, [pc, #480]	; (8001c94 <main+0x2c4>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	4b72      	ldr	r3, [pc, #456]	; (8001c80 <main+0x2b0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	4413      	add	r3, r2
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f7ff f81b 	bl	8000b00 <__aeabi_d2f>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4a72      	ldr	r2, [pc, #456]	; (8001c98 <main+0x2c8>)
 8001ace:	6013      	str	r3, [r2, #0]
			  }
		  }
	      if (HAL_GetTick() >= timestamp) {
 8001ad0:	f000 ffb2 	bl	8002a38 <HAL_GetTick>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	461c      	mov	r4, r3
 8001ada:	4615      	mov	r5, r2
 8001adc:	4b6f      	ldr	r3, [pc, #444]	; (8001c9c <main+0x2cc>)
 8001ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae2:	4294      	cmp	r4, r2
 8001ae4:	eb75 0303 	sbcs.w	r3, r5, r3
 8001ae8:	d39d      	bcc.n	8001a26 <main+0x56>
			  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2); // Read QEI
 8001aea:	4b61      	ldr	r3, [pc, #388]	; (8001c70 <main+0x2a0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	4a6b      	ldr	r2, [pc, #428]	; (8001ca0 <main+0x2d0>)
 8001af2:	6013      	str	r3, [r2, #0]
			  ReadDegree = QEIReadRaw / 8192.0 * 360; // pulse to degree
 8001af4:	4b6a      	ldr	r3, [pc, #424]	; (8001ca0 <main+0x2d0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fcaf 	bl	800045c <__aeabi_ui2d>
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	4b68      	ldr	r3, [pc, #416]	; (8001ca4 <main+0x2d4>)
 8001b04:	f7fe fe4e 	bl	80007a4 <__aeabi_ddiv>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	4b64      	ldr	r3, [pc, #400]	; (8001ca8 <main+0x2d8>)
 8001b16:	f7fe fd1b 	bl	8000550 <__aeabi_dmul>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	f7fe ffed 	bl	8000b00 <__aeabi_d2f>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4a60      	ldr	r2, [pc, #384]	; (8001cac <main+0x2dc>)
 8001b2a:	6013      	str	r3, [r2, #0]
			  error = SetDegree - ReadDegree;
 8001b2c:	4b57      	ldr	r3, [pc, #348]	; (8001c8c <main+0x2bc>)
 8001b2e:	ed93 7a00 	vldr	s14, [r3]
 8001b32:	4b5e      	ldr	r3, [pc, #376]	; (8001cac <main+0x2dc>)
 8001b34:	edd3 7a00 	vldr	s15, [r3]
 8001b38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b3c:	4b5c      	ldr	r3, [pc, #368]	; (8001cb0 <main+0x2e0>)
 8001b3e:	edc3 7a00 	vstr	s15, [r3]
			  DegreeFeedback = control_interrupt(); // PID function
 8001b42:	f000 fb8f 	bl	8002264 <control_interrupt>
 8001b46:	eef0 7a40 	vmov.f32	s15, s0
 8001b4a:	4b5a      	ldr	r3, [pc, #360]	; (8001cb4 <main+0x2e4>)
 8001b4c:	edc3 7a00 	vstr	s15, [r3]
	          timestamp = HAL_GetTick() + 1;
 8001b50:	f000 ff72 	bl	8002a38 <HAL_GetTick>
 8001b54:	4603      	mov	r3, r0
 8001b56:	3301      	adds	r3, #1
 8001b58:	2200      	movs	r2, #0
 8001b5a:	4698      	mov	r8, r3
 8001b5c:	4691      	mov	r9, r2
 8001b5e:	4b4f      	ldr	r3, [pc, #316]	; (8001c9c <main+0x2cc>)
 8001b60:	e9c3 8900 	strd	r8, r9, [r3]
	          if (Joystick_Control == 1) {
 8001b64:	4b54      	ldr	r3, [pc, #336]	; (8001cb8 <main+0x2e8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d10d      	bne.n	8001b88 <main+0x1b8>
	        	  DegreeFeedback = 0;
 8001b6c:	4b51      	ldr	r3, [pc, #324]	; (8001cb4 <main+0x2e4>)
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
//	              else if (Joystick_position[1] <= 5) {
//	                  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 100);
//	                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
//	              }
//	              else{
	            	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001b74:	4b3f      	ldr	r3, [pc, #252]	; (8001c74 <main+0x2a4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	635a      	str	r2, [r3, #52]	; 0x34
	            	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2180      	movs	r1, #128	; 0x80
 8001b80:	484e      	ldr	r0, [pc, #312]	; (8001cbc <main+0x2ec>)
 8001b82:	f002 f96d 	bl	8003e60 <HAL_GPIO_WritePin>
 8001b86:	e74e      	b.n	8001a26 <main+0x56>
//	              }
	          }
	          else if (Joystick_Control == 0) {
 8001b88:	4b4b      	ldr	r3, [pc, #300]	; (8001cb8 <main+0x2e8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f47f af4a 	bne.w	8001a26 <main+0x56>
	              if (SetDegree < 0) {
 8001b92:	4b3e      	ldr	r3, [pc, #248]	; (8001c8c <main+0x2bc>)
 8001b94:	edd3 7a00 	vldr	s15, [r3]
 8001b98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba0:	d503      	bpl.n	8001baa <main+0x1da>
	                  SetDegree = 0; // minimum value
 8001ba2:	4b3a      	ldr	r3, [pc, #232]	; (8001c8c <main+0x2bc>)
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
	              }
	              if (SetDegree > 1800) {
 8001baa:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <main+0x2bc>)
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001cc0 <main+0x2f0>
 8001bb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbc:	dd02      	ble.n	8001bc4 <main+0x1f4>
	                  SetDegree = 1800; // maximum value
 8001bbe:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <main+0x2bc>)
 8001bc0:	4a40      	ldr	r2, [pc, #256]	; (8001cc4 <main+0x2f4>)
 8001bc2:	601a      	str	r2, [r3, #0]
	              }

	              if (error > 0) { // setpoint > read_encoder
 8001bc4:	4b3a      	ldr	r3, [pc, #232]	; (8001cb0 <main+0x2e0>)
 8001bc6:	edd3 7a00 	vldr	s15, [r3]
 8001bca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd2:	dd1c      	ble.n	8001c0e <main+0x23e>
	                  if (error < 2.0) {
 8001bd4:	4b36      	ldr	r3, [pc, #216]	; (8001cb0 <main+0x2e0>)
 8001bd6:	edd3 7a00 	vldr	s15, [r3]
 8001bda:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001bde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be6:	d503      	bpl.n	8001bf0 <main+0x220>
	                      DegreeFeedback = 0; // Limit Position
 8001be8:	4b32      	ldr	r3, [pc, #200]	; (8001cb4 <main+0x2e4>)
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
	                  }
	                  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DegreeFeedback);
 8001bf0:	4b30      	ldr	r3, [pc, #192]	; (8001cb4 <main+0x2e4>)
 8001bf2:	edd3 7a00 	vldr	s15, [r3]
 8001bf6:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <main+0x2a4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bfe:	ee17 2a90 	vmov	r2, s15
 8001c02:	635a      	str	r2, [r3, #52]	; 0x34
	                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2180      	movs	r1, #128	; 0x80
 8001c08:	482c      	ldr	r0, [pc, #176]	; (8001cbc <main+0x2ec>)
 8001c0a:	f002 f929 	bl	8003e60 <HAL_GPIO_WritePin>
	              }
	              if (error < 0) { // setpoint < read_encoder
 8001c0e:	4b28      	ldr	r3, [pc, #160]	; (8001cb0 <main+0x2e0>)
 8001c10:	edd3 7a00 	vldr	s15, [r3]
 8001c14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1c:	d51e      	bpl.n	8001c5c <main+0x28c>
	                  if (error * -1 < 2.0) {
 8001c1e:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <main+0x2e0>)
 8001c20:	edd3 7a00 	vldr	s15, [r3]
 8001c24:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c30:	dd03      	ble.n	8001c3a <main+0x26a>
	                      DegreeFeedback = 0; // Limit Position
 8001c32:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <main+0x2e4>)
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
	                  }
	                  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DegreeFeedback * -1);
 8001c3a:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <main+0x2e4>)
 8001c3c:	edd3 7a00 	vldr	s15, [r3]
 8001c40:	eef1 7a67 	vneg.f32	s15, s15
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <main+0x2a4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c4c:	ee17 2a90 	vmov	r2, s15
 8001c50:	635a      	str	r2, [r3, #52]	; 0x34
	                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001c52:	2201      	movs	r2, #1
 8001c54:	2180      	movs	r1, #128	; 0x80
 8001c56:	4819      	ldr	r0, [pc, #100]	; (8001cbc <main+0x2ec>)
 8001c58:	f002 f902 	bl	8003e60 <HAL_GPIO_WritePin>
  {
 8001c5c:	e6e3      	b.n	8001a26 <main+0x56>
 8001c5e:	bf00      	nop
 8001c60:	47ae147b 	.word	0x47ae147b
 8001c64:	3f847ae1 	.word	0x3f847ae1
 8001c68:	20000274 	.word	0x20000274
 8001c6c:	2000009c 	.word	0x2000009c
 8001c70:	20000144 	.word	0x20000144
 8001c74:	2000018c 	.word	0x2000018c
 8001c78:	200001d4 	.word	0x200001d4
 8001c7c:	200002b4 	.word	0x200002b4
 8001c80:	2000028c 	.word	0x2000028c
 8001c84:	20000260 	.word	0x20000260
 8001c88:	2000026c 	.word	0x2000026c
 8001c8c:	200002a8 	.word	0x200002a8
 8001c90:	20000284 	.word	0x20000284
 8001c94:	20000280 	.word	0x20000280
 8001c98:	20000270 	.word	0x20000270
 8001c9c:	200002b8 	.word	0x200002b8
 8001ca0:	20000264 	.word	0x20000264
 8001ca4:	40c00000 	.word	0x40c00000
 8001ca8:	40768000 	.word	0x40768000
 8001cac:	200002a4 	.word	0x200002a4
 8001cb0:	200002b0 	.word	0x200002b0
 8001cb4:	200002ac 	.word	0x200002ac
 8001cb8:	2000027c 	.word	0x2000027c
 8001cbc:	40020000 	.word	0x40020000
 8001cc0:	44e10000 	.word	0x44e10000
 8001cc4:	44e10000 	.word	0x44e10000

08001cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b094      	sub	sp, #80	; 0x50
 8001ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cce:	f107 0320 	add.w	r3, r7, #32
 8001cd2:	2230      	movs	r2, #48	; 0x30
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f004 f84a 	bl	8005d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cec:	2300      	movs	r3, #0
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	4b27      	ldr	r3, [pc, #156]	; (8001d90 <SystemClock_Config+0xc8>)
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	4a26      	ldr	r2, [pc, #152]	; (8001d90 <SystemClock_Config+0xc8>)
 8001cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfc:	4b24      	ldr	r3, [pc, #144]	; (8001d90 <SystemClock_Config+0xc8>)
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d08:	2300      	movs	r3, #0
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <SystemClock_Config+0xcc>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a20      	ldr	r2, [pc, #128]	; (8001d94 <SystemClock_Config+0xcc>)
 8001d12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <SystemClock_Config+0xcc>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d24:	2302      	movs	r3, #2
 8001d26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d2c:	2310      	movs	r3, #16
 8001d2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d30:	2302      	movs	r3, #2
 8001d32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d34:	2300      	movs	r3, #0
 8001d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d38:	2308      	movs	r3, #8
 8001d3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001d3c:	2354      	movs	r3, #84	; 0x54
 8001d3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d40:	2302      	movs	r3, #2
 8001d42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d44:	2304      	movs	r3, #4
 8001d46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d48:	f107 0320 	add.w	r3, r7, #32
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f002 f8b9 	bl	8003ec4 <HAL_RCC_OscConfig>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d58:	f000 fb68 	bl	800242c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d5c:	230f      	movs	r3, #15
 8001d5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d60:	2302      	movs	r3, #2
 8001d62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d72:	f107 030c 	add.w	r3, r7, #12
 8001d76:	2102      	movs	r1, #2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f002 fb1b 	bl	80043b4 <HAL_RCC_ClockConfig>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d84:	f000 fb52 	bl	800242c <Error_Handler>
  }
}
 8001d88:	bf00      	nop
 8001d8a:	3750      	adds	r7, #80	; 0x50
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40007000 	.word	0x40007000

08001d98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d9e:	463b      	mov	r3, r7
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001daa:	4b29      	ldr	r3, [pc, #164]	; (8001e50 <MX_ADC1_Init+0xb8>)
 8001dac:	4a29      	ldr	r2, [pc, #164]	; (8001e54 <MX_ADC1_Init+0xbc>)
 8001dae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001db0:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <MX_ADC1_Init+0xb8>)
 8001db2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001db6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001db8:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <MX_ADC1_Init+0xb8>)
 8001dba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001dc0:	4b23      	ldr	r3, [pc, #140]	; (8001e50 <MX_ADC1_Init+0xb8>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001dc6:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <MX_ADC1_Init+0xb8>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dcc:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <MX_ADC1_Init+0xb8>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <MX_ADC1_Init+0xb8>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dda:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <MX_ADC1_Init+0xb8>)
 8001ddc:	4a1e      	ldr	r2, [pc, #120]	; (8001e58 <MX_ADC1_Init+0xc0>)
 8001dde:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001de0:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <MX_ADC1_Init+0xb8>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001de6:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <MX_ADC1_Init+0xb8>)
 8001de8:	2202      	movs	r2, #2
 8001dea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001dec:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <MX_ADC1_Init+0xb8>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001df4:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <MX_ADC1_Init+0xb8>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dfa:	4815      	ldr	r0, [pc, #84]	; (8001e50 <MX_ADC1_Init+0xb8>)
 8001dfc:	f000 fe28 	bl	8002a50 <HAL_ADC_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001e06:	f000 fb11 	bl	800242c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001e0a:	2308      	movs	r3, #8
 8001e0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001e12:	2303      	movs	r3, #3
 8001e14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e16:	463b      	mov	r3, r7
 8001e18:	4619      	mov	r1, r3
 8001e1a:	480d      	ldr	r0, [pc, #52]	; (8001e50 <MX_ADC1_Init+0xb8>)
 8001e1c:	f000 ff6a 	bl	8002cf4 <HAL_ADC_ConfigChannel>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001e26:	f000 fb01 	bl	800242c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001e2a:	2309      	movs	r3, #9
 8001e2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e32:	463b      	mov	r3, r7
 8001e34:	4619      	mov	r1, r3
 8001e36:	4806      	ldr	r0, [pc, #24]	; (8001e50 <MX_ADC1_Init+0xb8>)
 8001e38:	f000 ff5c 	bl	8002cf4 <HAL_ADC_ConfigChannel>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001e42:	f000 faf3 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	2000009c 	.word	0x2000009c
 8001e54:	40012000 	.word	0x40012000
 8001e58:	0f000001 	.word	0x0f000001

08001e5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08c      	sub	sp, #48	; 0x30
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e62:	f107 030c 	add.w	r3, r7, #12
 8001e66:	2224      	movs	r2, #36	; 0x24
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f003 ff80 	bl	8005d70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e78:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <MX_TIM2_Init+0xa4>)
 8001e7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e80:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <MX_TIM2_Init+0xa4>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e86:	4b1e      	ldr	r3, [pc, #120]	; (8001f00 <MX_TIM2_Init+0xa4>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = QEI_PERIOD-1;
 8001e8c:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <MX_TIM2_Init+0xa4>)
 8001e8e:	f649 72ff 	movw	r2, #40959	; 0x9fff
 8001e92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <MX_TIM2_Init+0xa4>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e9a:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <MX_TIM2_Init+0xa4>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ec4:	f107 030c 	add.w	r3, r7, #12
 8001ec8:	4619      	mov	r1, r3
 8001eca:	480d      	ldr	r0, [pc, #52]	; (8001f00 <MX_TIM2_Init+0xa4>)
 8001ecc:	f002 fe46 	bl	8004b5c <HAL_TIM_Encoder_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001ed6:	f000 faa9 	bl	800242c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ee2:	1d3b      	adds	r3, r7, #4
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4806      	ldr	r0, [pc, #24]	; (8001f00 <MX_TIM2_Init+0xa4>)
 8001ee8:	f003 fbc2 	bl	8005670 <HAL_TIMEx_MasterConfigSynchronization>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001ef2:	f000 fa9b 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ef6:	bf00      	nop
 8001ef8:	3730      	adds	r7, #48	; 0x30
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000144 	.word	0x20000144

08001f04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08e      	sub	sp, #56	; 0x38
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f18:	f107 0320 	add.w	r3, r7, #32
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
 8001f30:	615a      	str	r2, [r3, #20]
 8001f32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f34:	4b2c      	ldr	r3, [pc, #176]	; (8001fe8 <MX_TIM3_Init+0xe4>)
 8001f36:	4a2d      	ldr	r2, [pc, #180]	; (8001fec <MX_TIM3_Init+0xe8>)
 8001f38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42;
 8001f3a:	4b2b      	ldr	r3, [pc, #172]	; (8001fe8 <MX_TIM3_Init+0xe4>)
 8001f3c:	222a      	movs	r2, #42	; 0x2a
 8001f3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f40:	4b29      	ldr	r3, [pc, #164]	; (8001fe8 <MX_TIM3_Init+0xe4>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001f46:	4b28      	ldr	r3, [pc, #160]	; (8001fe8 <MX_TIM3_Init+0xe4>)
 8001f48:	2263      	movs	r2, #99	; 0x63
 8001f4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f4c:	4b26      	ldr	r3, [pc, #152]	; (8001fe8 <MX_TIM3_Init+0xe4>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f52:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <MX_TIM3_Init+0xe4>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f58:	4823      	ldr	r0, [pc, #140]	; (8001fe8 <MX_TIM3_Init+0xe4>)
 8001f5a:	f002 fc4b 	bl	80047f4 <HAL_TIM_Base_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001f64:	f000 fa62 	bl	800242c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f72:	4619      	mov	r1, r3
 8001f74:	481c      	ldr	r0, [pc, #112]	; (8001fe8 <MX_TIM3_Init+0xe4>)
 8001f76:	f002 ffe7 	bl	8004f48 <HAL_TIM_ConfigClockSource>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001f80:	f000 fa54 	bl	800242c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f84:	4818      	ldr	r0, [pc, #96]	; (8001fe8 <MX_TIM3_Init+0xe4>)
 8001f86:	f002 fcdf 	bl	8004948 <HAL_TIM_PWM_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001f90:	f000 fa4c 	bl	800242c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f94:	2300      	movs	r3, #0
 8001f96:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f9c:	f107 0320 	add.w	r3, r7, #32
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4811      	ldr	r0, [pc, #68]	; (8001fe8 <MX_TIM3_Init+0xe4>)
 8001fa4:	f003 fb64 	bl	8005670 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001fae:	f000 fa3d 	bl	800242c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fb2:	2360      	movs	r3, #96	; 0x60
 8001fb4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4807      	ldr	r0, [pc, #28]	; (8001fe8 <MX_TIM3_Init+0xe4>)
 8001fca:	f002 fefb 	bl	8004dc4 <HAL_TIM_PWM_ConfigChannel>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001fd4:	f000 fa2a 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001fd8:	4803      	ldr	r0, [pc, #12]	; (8001fe8 <MX_TIM3_Init+0xe4>)
 8001fda:	f000 fb8f 	bl	80026fc <HAL_TIM_MspPostInit>

}
 8001fde:	bf00      	nop
 8001fe0:	3738      	adds	r7, #56	; 0x38
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	2000018c 	.word	0x2000018c
 8001fec:	40000400 	.word	0x40000400

08001ff0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ff6:	f107 0308 	add.w	r3, r7, #8
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	609a      	str	r2, [r3, #8]
 8002002:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002004:	463b      	mov	r3, r7
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800200c:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <MX_TIM5_Init+0x94>)
 800200e:	4a1e      	ldr	r2, [pc, #120]	; (8002088 <MX_TIM5_Init+0x98>)
 8002010:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8002012:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <MX_TIM5_Init+0x94>)
 8002014:	2253      	movs	r2, #83	; 0x53
 8002016:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002018:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <MX_TIM5_Init+0x94>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800201e:	4b19      	ldr	r3, [pc, #100]	; (8002084 <MX_TIM5_Init+0x94>)
 8002020:	f04f 32ff 	mov.w	r2, #4294967295
 8002024:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002026:	4b17      	ldr	r3, [pc, #92]	; (8002084 <MX_TIM5_Init+0x94>)
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800202c:	4b15      	ldr	r3, [pc, #84]	; (8002084 <MX_TIM5_Init+0x94>)
 800202e:	2200      	movs	r2, #0
 8002030:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002032:	4814      	ldr	r0, [pc, #80]	; (8002084 <MX_TIM5_Init+0x94>)
 8002034:	f002 fbde 	bl	80047f4 <HAL_TIM_Base_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800203e:	f000 f9f5 	bl	800242c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002046:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002048:	f107 0308 	add.w	r3, r7, #8
 800204c:	4619      	mov	r1, r3
 800204e:	480d      	ldr	r0, [pc, #52]	; (8002084 <MX_TIM5_Init+0x94>)
 8002050:	f002 ff7a 	bl	8004f48 <HAL_TIM_ConfigClockSource>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800205a:	f000 f9e7 	bl	800242c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002066:	463b      	mov	r3, r7
 8002068:	4619      	mov	r1, r3
 800206a:	4806      	ldr	r0, [pc, #24]	; (8002084 <MX_TIM5_Init+0x94>)
 800206c:	f003 fb00 	bl	8005670 <HAL_TIMEx_MasterConfigSynchronization>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002076:	f000 f9d9 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800207a:	bf00      	nop
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	200001d4 	.word	0x200001d4
 8002088:	40000c00 	.word	0x40000c00

0800208c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 8002092:	4a12      	ldr	r2, [pc, #72]	; (80020dc <MX_USART2_UART_Init+0x50>)
 8002094:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 8002098:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800209c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 80020b2:	220c      	movs	r2, #12
 80020b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020b6:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020c2:	4805      	ldr	r0, [pc, #20]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 80020c4:	f003 fb42 	bl	800574c <HAL_UART_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020ce:	f000 f9ad 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	2000021c 	.word	0x2000021c
 80020dc:	40004400 	.word	0x40004400

080020e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	4b0c      	ldr	r3, [pc, #48]	; (800211c <MX_DMA_Init+0x3c>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a0b      	ldr	r2, [pc, #44]	; (800211c <MX_DMA_Init+0x3c>)
 80020f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <MX_DMA_Init+0x3c>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002102:	2200      	movs	r2, #0
 8002104:	2100      	movs	r1, #0
 8002106:	2038      	movs	r0, #56	; 0x38
 8002108:	f001 f97f 	bl	800340a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800210c:	2038      	movs	r0, #56	; 0x38
 800210e:	f001 f998 	bl	8003442 <HAL_NVIC_EnableIRQ>

}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800

08002120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002126:	f107 0314 	add.w	r3, r7, #20
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	60da      	str	r2, [r3, #12]
 8002134:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	4b3c      	ldr	r3, [pc, #240]	; (800222c <MX_GPIO_Init+0x10c>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a3b      	ldr	r2, [pc, #236]	; (800222c <MX_GPIO_Init+0x10c>)
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b39      	ldr	r3, [pc, #228]	; (800222c <MX_GPIO_Init+0x10c>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b35      	ldr	r3, [pc, #212]	; (800222c <MX_GPIO_Init+0x10c>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a34      	ldr	r2, [pc, #208]	; (800222c <MX_GPIO_Init+0x10c>)
 800215c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b32      	ldr	r3, [pc, #200]	; (800222c <MX_GPIO_Init+0x10c>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	4b2e      	ldr	r3, [pc, #184]	; (800222c <MX_GPIO_Init+0x10c>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a2d      	ldr	r2, [pc, #180]	; (800222c <MX_GPIO_Init+0x10c>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b2b      	ldr	r3, [pc, #172]	; (800222c <MX_GPIO_Init+0x10c>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	4b27      	ldr	r3, [pc, #156]	; (800222c <MX_GPIO_Init+0x10c>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a26      	ldr	r2, [pc, #152]	; (800222c <MX_GPIO_Init+0x10c>)
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b24      	ldr	r3, [pc, #144]	; (800222c <MX_GPIO_Init+0x10c>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 80021a6:	2200      	movs	r2, #0
 80021a8:	21a0      	movs	r1, #160	; 0xa0
 80021aa:	4821      	ldr	r0, [pc, #132]	; (8002230 <MX_GPIO_Init+0x110>)
 80021ac:	f001 fe58 	bl	8003e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80021b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021b6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80021ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	4619      	mov	r1, r3
 80021c6:	481b      	ldr	r0, [pc, #108]	; (8002234 <MX_GPIO_Init+0x114>)
 80021c8:	f001 fcc6 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7;
 80021cc:	23a0      	movs	r3, #160	; 0xa0
 80021ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d0:	2301      	movs	r3, #1
 80021d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4619      	mov	r1, r3
 80021e2:	4813      	ldr	r0, [pc, #76]	; (8002230 <MX_GPIO_Init+0x110>)
 80021e4:	f001 fcb8 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	4619      	mov	r1, r3
 80021fe:	480e      	ldr	r0, [pc, #56]	; (8002238 <MX_GPIO_Init+0x118>)
 8002200:	f001 fcaa 	bl	8003b58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002204:	2200      	movs	r2, #0
 8002206:	2100      	movs	r1, #0
 8002208:	2017      	movs	r0, #23
 800220a:	f001 f8fe 	bl	800340a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800220e:	2017      	movs	r0, #23
 8002210:	f001 f917 	bl	8003442 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002214:	2200      	movs	r2, #0
 8002216:	2100      	movs	r1, #0
 8002218:	2028      	movs	r0, #40	; 0x28
 800221a:	f001 f8f6 	bl	800340a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800221e:	2028      	movs	r0, #40	; 0x28
 8002220:	f001 f90f 	bl	8003442 <HAL_NVIC_EnableIRQ>

}
 8002224:	bf00      	nop
 8002226:	3728      	adds	r7, #40	; 0x28
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40023800 	.word	0x40023800
 8002230:	40020000 	.word	0x40020000
 8002234:	40020800 	.word	0x40020800
 8002238:	40020400 	.word	0x40020400

0800223c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_8){
 8002246:	88fb      	ldrh	r3, [r7, #6]
 8002248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800224c:	d102      	bne.n	8002254 <HAL_GPIO_EXTI_Callback+0x18>
		Button1 = 1;
 800224e:	4b04      	ldr	r3, [pc, #16]	; (8002260 <HAL_GPIO_EXTI_Callback+0x24>)
 8002250:	2201      	movs	r2, #1
 8002252:	601a      	str	r2, [r3, #0]
	}
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	20000268 	.word	0x20000268

08002264 <control_interrupt>:
float control_interrupt(){
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
	error = SetDegree - ReadDegree;
 8002268:	4b37      	ldr	r3, [pc, #220]	; (8002348 <control_interrupt+0xe4>)
 800226a:	ed93 7a00 	vldr	s14, [r3]
 800226e:	4b37      	ldr	r3, [pc, #220]	; (800234c <control_interrupt+0xe8>)
 8002270:	edd3 7a00 	vldr	s15, [r3]
 8002274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002278:	4b35      	ldr	r3, [pc, #212]	; (8002350 <control_interrupt+0xec>)
 800227a:	edc3 7a00 	vstr	s15, [r3]
	delta_u = (K_P+K_I+K_D)*error-(K_P+2*K_D)*pe1+(K_D)*pe2;
 800227e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002282:	eddf 7a34 	vldr	s15, [pc, #208]	; 8002354 <control_interrupt+0xf0>
 8002286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800228a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002358 <control_interrupt+0xf4>
 800228e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002292:	4b2f      	ldr	r3, [pc, #188]	; (8002350 <control_interrupt+0xec>)
 8002294:	edd3 7a00 	vldr	s15, [r3]
 8002298:	ee27 7a27 	vmul.f32	s14, s14, s15
 800229c:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8002358 <control_interrupt+0xf4>
 80022a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022a4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80022a8:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80022ac:	4b2b      	ldr	r3, [pc, #172]	; (800235c <control_interrupt+0xf8>)
 80022ae:	edd3 7a00 	vldr	s15, [r3]
 80022b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022ba:	eddf 6a27 	vldr	s13, [pc, #156]	; 8002358 <control_interrupt+0xf4>
 80022be:	4b28      	ldr	r3, [pc, #160]	; (8002360 <control_interrupt+0xfc>)
 80022c0:	edd3 7a00 	vldr	s15, [r3]
 80022c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022cc:	4b25      	ldr	r3, [pc, #148]	; (8002364 <control_interrupt+0x100>)
 80022ce:	edc3 7a00 	vstr	s15, [r3]
	u = pu1+delta_u;
 80022d2:	4b25      	ldr	r3, [pc, #148]	; (8002368 <control_interrupt+0x104>)
 80022d4:	ed93 7a00 	vldr	s14, [r3]
 80022d8:	4b22      	ldr	r3, [pc, #136]	; (8002364 <control_interrupt+0x100>)
 80022da:	edd3 7a00 	vldr	s15, [r3]
 80022de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e2:	4b22      	ldr	r3, [pc, #136]	; (800236c <control_interrupt+0x108>)
 80022e4:	edc3 7a00 	vstr	s15, [r3]
	if(u>100)u=100;
 80022e8:	4b20      	ldr	r3, [pc, #128]	; (800236c <control_interrupt+0x108>)
 80022ea:	edd3 7a00 	vldr	s15, [r3]
 80022ee:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002370 <control_interrupt+0x10c>
 80022f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fa:	dd02      	ble.n	8002302 <control_interrupt+0x9e>
 80022fc:	4b1b      	ldr	r3, [pc, #108]	; (800236c <control_interrupt+0x108>)
 80022fe:	4a1d      	ldr	r2, [pc, #116]	; (8002374 <control_interrupt+0x110>)
 8002300:	601a      	str	r2, [r3, #0]
	if(u<-100)u=-100;
 8002302:	4b1a      	ldr	r3, [pc, #104]	; (800236c <control_interrupt+0x108>)
 8002304:	edd3 7a00 	vldr	s15, [r3]
 8002308:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002378 <control_interrupt+0x114>
 800230c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002314:	d502      	bpl.n	800231c <control_interrupt+0xb8>
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <control_interrupt+0x108>)
 8002318:	4a18      	ldr	r2, [pc, #96]	; (800237c <control_interrupt+0x118>)
 800231a:	601a      	str	r2, [r3, #0]
	pu1=u;
 800231c:	4b13      	ldr	r3, [pc, #76]	; (800236c <control_interrupt+0x108>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a11      	ldr	r2, [pc, #68]	; (8002368 <control_interrupt+0x104>)
 8002322:	6013      	str	r3, [r2, #0]
	pe2=pe1;
 8002324:	4b0d      	ldr	r3, [pc, #52]	; (800235c <control_interrupt+0xf8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a0d      	ldr	r2, [pc, #52]	; (8002360 <control_interrupt+0xfc>)
 800232a:	6013      	str	r3, [r2, #0]
	pe1=error;
 800232c:	4b08      	ldr	r3, [pc, #32]	; (8002350 <control_interrupt+0xec>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a0a      	ldr	r2, [pc, #40]	; (800235c <control_interrupt+0xf8>)
 8002332:	6013      	str	r3, [r2, #0]
return u;
 8002334:	4b0d      	ldr	r3, [pc, #52]	; (800236c <control_interrupt+0x108>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	ee07 3a90 	vmov	s15, r3
}
 800233c:	eeb0 0a67 	vmov.f32	s0, s15
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	200002a8 	.word	0x200002a8
 800234c:	200002a4 	.word	0x200002a4
 8002350:	200002b0 	.word	0x200002b0
 8002354:	3dcccccd 	.word	0x3dcccccd
 8002358:	00000000 	.word	0x00000000
 800235c:	20000294 	.word	0x20000294
 8002360:	20000298 	.word	0x20000298
 8002364:	200002a0 	.word	0x200002a0
 8002368:	20000290 	.word	0x20000290
 800236c:	2000029c 	.word	0x2000029c
 8002370:	42c80000 	.word	0x42c80000
 8002374:	42c80000 	.word	0x42c80000
 8002378:	c2c80000 	.word	0xc2c80000
 800237c:	c2c80000 	.word	0xc2c80000

08002380 <main_Qubic>:
}
uint64_t micros(){
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
}
void main_Qubic(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
  emxArray_real_T *q_acc;
  emxArray_real_T *q_position;
  emxArray_real_T *q_velocity;
  double q_k1_tmp;
  /* Initialize function 'Qubic' input arguments. */
  q_k1_tmp = argInit_real_T();
 8002386:	f7ff fb13 	bl	80019b0 <argInit_real_T>
 800238a:	ed87 0b04 	vstr	d0, [r7, #16]
  /* Call the entry-point 'Qubic'. */
  emxInitArray_real_T(&q_position, 2);
 800238e:	f107 0308 	add.w	r3, r7, #8
 8002392:	2102      	movs	r1, #2
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fa33 	bl	8001800 <emxInitArray_real_T>
  emxInitArray_real_T(&q_velocity, 2);
 800239a:	1d3b      	adds	r3, r7, #4
 800239c:	2102      	movs	r1, #2
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fa2e 	bl	8001800 <emxInitArray_real_T>
  emxInitArray_real_T(&q_acc, 2);
 80023a4:	f107 030c 	add.w	r3, r7, #12
 80023a8:	2102      	movs	r1, #2
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fa28 	bl	8001800 <emxInitArray_real_T>
  Qubic(0, 500, 0, 500, 0.5, q_position,
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4618      	mov	r0, r3
 80023b8:	ed9f 4b13 	vldr	d4, [pc, #76]	; 8002408 <main_Qubic+0x88>
 80023bc:	ed9f 3b14 	vldr	d3, [pc, #80]	; 8002410 <main_Qubic+0x90>
 80023c0:	ed9f 2b15 	vldr	d2, [pc, #84]	; 8002418 <main_Qubic+0x98>
 80023c4:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8002410 <main_Qubic+0x90>
 80023c8:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8002418 <main_Qubic+0x98>
 80023cc:	f7fe fe88 	bl	80010e0 <Qubic>
        q_velocity, q_acc);
  q_positionN = q_position;
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	4a13      	ldr	r2, [pc, #76]	; (8002420 <main_Qubic+0xa0>)
 80023d4:	6013      	str	r3, [r2, #0]
  q_velocityN = q_velocity;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a12      	ldr	r2, [pc, #72]	; (8002424 <main_Qubic+0xa4>)
 80023da:	6013      	str	r3, [r2, #0]
  q_accN = q_acc;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4a12      	ldr	r2, [pc, #72]	; (8002428 <main_Qubic+0xa8>)
 80023e0:	6013      	str	r3, [r2, #0]
  emxDestroyArray_real_T(q_position);
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff f9ff 	bl	80017e8 <emxDestroyArray_real_T>
  emxDestroyArray_real_T(q_velocity);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff f9fb 	bl	80017e8 <emxDestroyArray_real_T>
  emxDestroyArray_real_T(q_acc);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff f9f7 	bl	80017e8 <emxDestroyArray_real_T>
}
 80023fa:	bf00      	nop
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	f3af 8000 	nop.w
 8002408:	00000000 	.word	0x00000000
 800240c:	3fe00000 	.word	0x3fe00000
 8002410:	00000000 	.word	0x00000000
 8002414:	407f4000 	.word	0x407f4000
	...
 8002420:	20000284 	.word	0x20000284
 8002424:	20000280 	.word	0x20000280
 8002428:	20000288 	.word	0x20000288

0800242c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002430:	b672      	cpsid	i
}
 8002432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002434:	e7fe      	b.n	8002434 <Error_Handler+0x8>
	...

08002438 <rtIsInf>:
 * Function: rtIsInf ==================================================
 *  Abstract:
 *  Test if value is infinite
 */
boolean_T rtIsInf(real_T value)
{
 8002438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	ed87 0b00 	vstr	d0, [r7]
  return (isinf(value) != 0U);
 8002442:	683c      	ldr	r4, [r7, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800244a:	2301      	movs	r3, #1
 800244c:	461e      	mov	r6, r3
 800244e:	f04f 32ff 	mov.w	r2, #4294967295
 8002452:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <rtIsInf+0x58>)
 8002454:	4620      	mov	r0, r4
 8002456:	4629      	mov	r1, r5
 8002458:	f7fe fb14 	bl	8000a84 <__aeabi_dcmpun>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10b      	bne.n	800247a <rtIsInf+0x42>
 8002462:	f04f 32ff 	mov.w	r2, #4294967295
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <rtIsInf+0x58>)
 8002468:	4620      	mov	r0, r4
 800246a:	4629      	mov	r1, r5
 800246c:	f7fe faec 	bl	8000a48 <__aeabi_dcmple>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <rtIsInf+0x42>
 8002476:	2300      	movs	r3, #0
 8002478:	461e      	mov	r6, r3
 800247a:	b2f3      	uxtb	r3, r6
 800247c:	f083 0301 	eor.w	r3, r3, #1
 8002480:	b2db      	uxtb	r3, r3
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	b2db      	uxtb	r3, r3
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002490:	7fefffff 	.word	0x7fefffff

08002494 <rtIsNaN>:
 * Function: rtIsNaN ==================================================
 *  Abstract:
 *  Test if value is not a number
 */
boolean_T rtIsNaN(real_T value)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	ed87 0b00 	vstr	d0, [r7]
  return (isnan(value) != 0U);
 800249e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024a6:	f7fe faed 	bl	8000a84 <__aeabi_dcmpun>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <rtIsNaN+0x20>
 80024b0:	2301      	movs	r3, #1
 80024b2:	e000      	b.n	80024b6 <rtIsNaN+0x22>
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <HAL_MspInit+0x4c>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	4a0f      	ldr	r2, [pc, #60]	; (800250c <HAL_MspInit+0x4c>)
 80024d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d4:	6453      	str	r3, [r2, #68]	; 0x44
 80024d6:	4b0d      	ldr	r3, [pc, #52]	; (800250c <HAL_MspInit+0x4c>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	603b      	str	r3, [r7, #0]
 80024e6:	4b09      	ldr	r3, [pc, #36]	; (800250c <HAL_MspInit+0x4c>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	4a08      	ldr	r2, [pc, #32]	; (800250c <HAL_MspInit+0x4c>)
 80024ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f0:	6413      	str	r3, [r2, #64]	; 0x40
 80024f2:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_MspInit+0x4c>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024fe:	2007      	movs	r0, #7
 8002500:	f000 ff78 	bl	80033f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002504:	bf00      	nop
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40023800 	.word	0x40023800

08002510 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	; 0x28
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 0314 	add.w	r3, r7, #20
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a2f      	ldr	r2, [pc, #188]	; (80025ec <HAL_ADC_MspInit+0xdc>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d157      	bne.n	80025e2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	4b2e      	ldr	r3, [pc, #184]	; (80025f0 <HAL_ADC_MspInit+0xe0>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	4a2d      	ldr	r2, [pc, #180]	; (80025f0 <HAL_ADC_MspInit+0xe0>)
 800253c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002540:	6453      	str	r3, [r2, #68]	; 0x44
 8002542:	4b2b      	ldr	r3, [pc, #172]	; (80025f0 <HAL_ADC_MspInit+0xe0>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	4b27      	ldr	r3, [pc, #156]	; (80025f0 <HAL_ADC_MspInit+0xe0>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	4a26      	ldr	r2, [pc, #152]	; (80025f0 <HAL_ADC_MspInit+0xe0>)
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	6313      	str	r3, [r2, #48]	; 0x30
 800255e:	4b24      	ldr	r3, [pc, #144]	; (80025f0 <HAL_ADC_MspInit+0xe0>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800256a:	2303      	movs	r3, #3
 800256c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800256e:	2303      	movs	r3, #3
 8002570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002576:	f107 0314 	add.w	r3, r7, #20
 800257a:	4619      	mov	r1, r3
 800257c:	481d      	ldr	r0, [pc, #116]	; (80025f4 <HAL_ADC_MspInit+0xe4>)
 800257e:	f001 faeb 	bl	8003b58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002582:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <HAL_ADC_MspInit+0xe8>)
 8002584:	4a1d      	ldr	r2, [pc, #116]	; (80025fc <HAL_ADC_MspInit+0xec>)
 8002586:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002588:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <HAL_ADC_MspInit+0xe8>)
 800258a:	2200      	movs	r2, #0
 800258c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800258e:	4b1a      	ldr	r3, [pc, #104]	; (80025f8 <HAL_ADC_MspInit+0xe8>)
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002594:	4b18      	ldr	r3, [pc, #96]	; (80025f8 <HAL_ADC_MspInit+0xe8>)
 8002596:	2200      	movs	r2, #0
 8002598:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800259a:	4b17      	ldr	r3, [pc, #92]	; (80025f8 <HAL_ADC_MspInit+0xe8>)
 800259c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <HAL_ADC_MspInit+0xe8>)
 80025a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80025aa:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <HAL_ADC_MspInit+0xe8>)
 80025ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <HAL_ADC_MspInit+0xe8>)
 80025b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025b8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80025ba:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <HAL_ADC_MspInit+0xe8>)
 80025bc:	2200      	movs	r2, #0
 80025be:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025c0:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <HAL_ADC_MspInit+0xe8>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025c6:	480c      	ldr	r0, [pc, #48]	; (80025f8 <HAL_ADC_MspInit+0xe8>)
 80025c8:	f000 ff56 	bl	8003478 <HAL_DMA_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80025d2:	f7ff ff2b 	bl	800242c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a07      	ldr	r2, [pc, #28]	; (80025f8 <HAL_ADC_MspInit+0xe8>)
 80025da:	639a      	str	r2, [r3, #56]	; 0x38
 80025dc:	4a06      	ldr	r2, [pc, #24]	; (80025f8 <HAL_ADC_MspInit+0xe8>)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025e2:	bf00      	nop
 80025e4:	3728      	adds	r7, #40	; 0x28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40012000 	.word	0x40012000
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40020400 	.word	0x40020400
 80025f8:	200000e4 	.word	0x200000e4
 80025fc:	40026410 	.word	0x40026410

08002600 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08a      	sub	sp, #40	; 0x28
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002608:	f107 0314 	add.w	r3, r7, #20
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002620:	d12b      	bne.n	800267a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	4b17      	ldr	r3, [pc, #92]	; (8002684 <HAL_TIM_Encoder_MspInit+0x84>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	4a16      	ldr	r2, [pc, #88]	; (8002684 <HAL_TIM_Encoder_MspInit+0x84>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	6413      	str	r3, [r2, #64]	; 0x40
 8002632:	4b14      	ldr	r3, [pc, #80]	; (8002684 <HAL_TIM_Encoder_MspInit+0x84>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	4b10      	ldr	r3, [pc, #64]	; (8002684 <HAL_TIM_Encoder_MspInit+0x84>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	4a0f      	ldr	r2, [pc, #60]	; (8002684 <HAL_TIM_Encoder_MspInit+0x84>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6313      	str	r3, [r2, #48]	; 0x30
 800264e:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <HAL_TIM_Encoder_MspInit+0x84>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800265a:	2303      	movs	r3, #3
 800265c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002666:	2300      	movs	r3, #0
 8002668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800266a:	2301      	movs	r3, #1
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266e:	f107 0314 	add.w	r3, r7, #20
 8002672:	4619      	mov	r1, r3
 8002674:	4804      	ldr	r0, [pc, #16]	; (8002688 <HAL_TIM_Encoder_MspInit+0x88>)
 8002676:	f001 fa6f 	bl	8003b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800267a:	bf00      	nop
 800267c:	3728      	adds	r7, #40	; 0x28
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40023800 	.word	0x40023800
 8002688:	40020000 	.word	0x40020000

0800268c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a15      	ldr	r2, [pc, #84]	; (80026f0 <HAL_TIM_Base_MspInit+0x64>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d10e      	bne.n	80026bc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <HAL_TIM_Base_MspInit+0x68>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a13      	ldr	r2, [pc, #76]	; (80026f4 <HAL_TIM_Base_MspInit+0x68>)
 80026a8:	f043 0302 	orr.w	r3, r3, #2
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
 80026ae:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <HAL_TIM_Base_MspInit+0x68>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80026ba:	e012      	b.n	80026e2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a0d      	ldr	r2, [pc, #52]	; (80026f8 <HAL_TIM_Base_MspInit+0x6c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d10d      	bne.n	80026e2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <HAL_TIM_Base_MspInit+0x68>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	4a09      	ldr	r2, [pc, #36]	; (80026f4 <HAL_TIM_Base_MspInit+0x68>)
 80026d0:	f043 0308 	orr.w	r3, r3, #8
 80026d4:	6413      	str	r3, [r2, #64]	; 0x40
 80026d6:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <HAL_TIM_Base_MspInit+0x68>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	68bb      	ldr	r3, [r7, #8]
}
 80026e2:	bf00      	nop
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40000400 	.word	0x40000400
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40000c00 	.word	0x40000c00

080026fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002704:	f107 030c 	add.w	r3, r7, #12
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a12      	ldr	r2, [pc, #72]	; (8002764 <HAL_TIM_MspPostInit+0x68>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d11d      	bne.n	800275a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <HAL_TIM_MspPostInit+0x6c>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	4a10      	ldr	r2, [pc, #64]	; (8002768 <HAL_TIM_MspPostInit+0x6c>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6313      	str	r3, [r2, #48]	; 0x30
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <HAL_TIM_MspPostInit+0x6c>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800273a:	2340      	movs	r3, #64	; 0x40
 800273c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800274a:	2302      	movs	r3, #2
 800274c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274e:	f107 030c 	add.w	r3, r7, #12
 8002752:	4619      	mov	r1, r3
 8002754:	4805      	ldr	r0, [pc, #20]	; (800276c <HAL_TIM_MspPostInit+0x70>)
 8002756:	f001 f9ff 	bl	8003b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800275a:	bf00      	nop
 800275c:	3720      	adds	r7, #32
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40000400 	.word	0x40000400
 8002768:	40023800 	.word	0x40023800
 800276c:	40020000 	.word	0x40020000

08002770 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08a      	sub	sp, #40	; 0x28
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a19      	ldr	r2, [pc, #100]	; (80027f4 <HAL_UART_MspInit+0x84>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d12b      	bne.n	80027ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	4b18      	ldr	r3, [pc, #96]	; (80027f8 <HAL_UART_MspInit+0x88>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	4a17      	ldr	r2, [pc, #92]	; (80027f8 <HAL_UART_MspInit+0x88>)
 800279c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a0:	6413      	str	r3, [r2, #64]	; 0x40
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <HAL_UART_MspInit+0x88>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <HAL_UART_MspInit+0x88>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	4a10      	ldr	r2, [pc, #64]	; (80027f8 <HAL_UART_MspInit+0x88>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6313      	str	r3, [r2, #48]	; 0x30
 80027be:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <HAL_UART_MspInit+0x88>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027ca:	230c      	movs	r3, #12
 80027cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ce:	2302      	movs	r3, #2
 80027d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d6:	2303      	movs	r3, #3
 80027d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027da:	2307      	movs	r3, #7
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027de:	f107 0314 	add.w	r3, r7, #20
 80027e2:	4619      	mov	r1, r3
 80027e4:	4805      	ldr	r0, [pc, #20]	; (80027fc <HAL_UART_MspInit+0x8c>)
 80027e6:	f001 f9b7 	bl	8003b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027ea:	bf00      	nop
 80027ec:	3728      	adds	r7, #40	; 0x28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40004400 	.word	0x40004400
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40020000 	.word	0x40020000

08002800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002804:	e7fe      	b.n	8002804 <NMI_Handler+0x4>

08002806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800280a:	e7fe      	b.n	800280a <HardFault_Handler+0x4>

0800280c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002810:	e7fe      	b.n	8002810 <MemManage_Handler+0x4>

08002812 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002812:	b480      	push	{r7}
 8002814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002816:	e7fe      	b.n	8002816 <BusFault_Handler+0x4>

08002818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800281c:	e7fe      	b.n	800281c <UsageFault_Handler+0x4>

0800281e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800283a:	b480      	push	{r7}
 800283c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800284c:	f000 f8e0 	bl	8002a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002850:	bf00      	nop
 8002852:	bd80      	pop	{r7, pc}

08002854 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002858:	f44f 7080 	mov.w	r0, #256	; 0x100
 800285c:	f001 fb1a 	bl	8003e94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002860:	bf00      	nop
 8002862:	bd80      	pop	{r7, pc}

08002864 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002868:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800286c:	f001 fb12 	bl	8003e94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002870:	bf00      	nop
 8002872:	bd80      	pop	{r7, pc}

08002874 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002878:	4802      	ldr	r0, [pc, #8]	; (8002884 <DMA2_Stream0_IRQHandler+0x10>)
 800287a:	f000 ff03 	bl	8003684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	200000e4 	.word	0x200000e4

08002888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002890:	4a14      	ldr	r2, [pc, #80]	; (80028e4 <_sbrk+0x5c>)
 8002892:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <_sbrk+0x60>)
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800289c:	4b13      	ldr	r3, [pc, #76]	; (80028ec <_sbrk+0x64>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028a4:	4b11      	ldr	r3, [pc, #68]	; (80028ec <_sbrk+0x64>)
 80028a6:	4a12      	ldr	r2, [pc, #72]	; (80028f0 <_sbrk+0x68>)
 80028a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028aa:	4b10      	ldr	r3, [pc, #64]	; (80028ec <_sbrk+0x64>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4413      	add	r3, r2
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d207      	bcs.n	80028c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028b8:	f003 fa12 	bl	8005ce0 <__errno>
 80028bc:	4603      	mov	r3, r0
 80028be:	220c      	movs	r2, #12
 80028c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028c2:	f04f 33ff 	mov.w	r3, #4294967295
 80028c6:	e009      	b.n	80028dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028c8:	4b08      	ldr	r3, [pc, #32]	; (80028ec <_sbrk+0x64>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ce:	4b07      	ldr	r3, [pc, #28]	; (80028ec <_sbrk+0x64>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4413      	add	r3, r2
 80028d6:	4a05      	ldr	r2, [pc, #20]	; (80028ec <_sbrk+0x64>)
 80028d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028da:	68fb      	ldr	r3, [r7, #12]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20020000 	.word	0x20020000
 80028e8:	00000400 	.word	0x00000400
 80028ec:	200002c0 	.word	0x200002c0
 80028f0:	200002d8 	.word	0x200002d8

080028f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <SystemInit+0x20>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fe:	4a05      	ldr	r2, [pc, #20]	; (8002914 <SystemInit+0x20>)
 8002900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002950 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800291c:	480d      	ldr	r0, [pc, #52]	; (8002954 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800291e:	490e      	ldr	r1, [pc, #56]	; (8002958 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002920:	4a0e      	ldr	r2, [pc, #56]	; (800295c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002924:	e002      	b.n	800292c <LoopCopyDataInit>

08002926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800292a:	3304      	adds	r3, #4

0800292c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800292c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800292e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002930:	d3f9      	bcc.n	8002926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002932:	4a0b      	ldr	r2, [pc, #44]	; (8002960 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002934:	4c0b      	ldr	r4, [pc, #44]	; (8002964 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002938:	e001      	b.n	800293e <LoopFillZerobss>

0800293a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800293a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800293c:	3204      	adds	r2, #4

0800293e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800293e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002940:	d3fb      	bcc.n	800293a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002942:	f7ff ffd7 	bl	80028f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002946:	f003 f9d1 	bl	8005cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800294a:	f7ff f841 	bl	80019d0 <main>
  bx  lr    
 800294e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002950:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002958:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800295c:	08006fb0 	.word	0x08006fb0
  ldr r2, =_sbss
 8002960:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002964:	200002d8 	.word	0x200002d8

08002968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002968:	e7fe      	b.n	8002968 <ADC_IRQHandler>
	...

0800296c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002970:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <HAL_Init+0x40>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a0d      	ldr	r2, [pc, #52]	; (80029ac <HAL_Init+0x40>)
 8002976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800297a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800297c:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <HAL_Init+0x40>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a0a      	ldr	r2, [pc, #40]	; (80029ac <HAL_Init+0x40>)
 8002982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002986:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002988:	4b08      	ldr	r3, [pc, #32]	; (80029ac <HAL_Init+0x40>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a07      	ldr	r2, [pc, #28]	; (80029ac <HAL_Init+0x40>)
 800298e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002994:	2003      	movs	r0, #3
 8002996:	f000 fd2d 	bl	80033f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800299a:	2000      	movs	r0, #0
 800299c:	f000 f808 	bl	80029b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029a0:	f7ff fd8e 	bl	80024c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40023c00 	.word	0x40023c00

080029b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029b8:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <HAL_InitTick+0x54>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <HAL_InitTick+0x58>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	4619      	mov	r1, r3
 80029c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fd45 	bl	800345e <HAL_SYSTICK_Config>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e00e      	b.n	80029fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b0f      	cmp	r3, #15
 80029e2:	d80a      	bhi.n	80029fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029e4:	2200      	movs	r2, #0
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ec:	f000 fd0d 	bl	800340a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029f0:	4a06      	ldr	r2, [pc, #24]	; (8002a0c <HAL_InitTick+0x5c>)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	e000      	b.n	80029fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000010 	.word	0x20000010
 8002a08:	20000018 	.word	0x20000018
 8002a0c:	20000014 	.word	0x20000014

08002a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a14:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_IncTick+0x20>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_IncTick+0x24>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4413      	add	r3, r2
 8002a20:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <HAL_IncTick+0x24>)
 8002a22:	6013      	str	r3, [r2, #0]
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	20000018 	.word	0x20000018
 8002a34:	200002c4 	.word	0x200002c4

08002a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a3c:	4b03      	ldr	r3, [pc, #12]	; (8002a4c <HAL_GetTick+0x14>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	200002c4 	.word	0x200002c4

08002a50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e033      	b.n	8002ace <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d109      	bne.n	8002a82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff fd4e 	bl	8002510 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d118      	bne.n	8002ac0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a96:	f023 0302 	bic.w	r3, r3, #2
 8002a9a:	f043 0202 	orr.w	r2, r3, #2
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 fa58 	bl	8002f58 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f023 0303 	bic.w	r3, r3, #3
 8002ab6:	f043 0201 	orr.w	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40
 8002abe:	e001      	b.n	8002ac4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <HAL_ADC_Start_DMA+0x1e>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e0ce      	b.n	8002c94 <HAL_ADC_Start_DMA+0x1bc>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d018      	beq.n	8002b3e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b1c:	4b5f      	ldr	r3, [pc, #380]	; (8002c9c <HAL_ADC_Start_DMA+0x1c4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a5f      	ldr	r2, [pc, #380]	; (8002ca0 <HAL_ADC_Start_DMA+0x1c8>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	0c9a      	lsrs	r2, r3, #18
 8002b28:	4613      	mov	r3, r2
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	4413      	add	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002b30:	e002      	b.n	8002b38 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	3b01      	subs	r3, #1
 8002b36:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f9      	bne.n	8002b32 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b4c:	d107      	bne.n	8002b5e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	f040 8086 	bne.w	8002c7a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b76:	f023 0301 	bic.w	r3, r3, #1
 8002b7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d007      	beq.n	8002ba0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b98:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bac:	d106      	bne.n	8002bbc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb2:	f023 0206 	bic.w	r2, r3, #6
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	645a      	str	r2, [r3, #68]	; 0x44
 8002bba:	e002      	b.n	8002bc2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bca:	4b36      	ldr	r3, [pc, #216]	; (8002ca4 <HAL_ADC_Start_DMA+0x1cc>)
 8002bcc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd2:	4a35      	ldr	r2, [pc, #212]	; (8002ca8 <HAL_ADC_Start_DMA+0x1d0>)
 8002bd4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bda:	4a34      	ldr	r2, [pc, #208]	; (8002cac <HAL_ADC_Start_DMA+0x1d4>)
 8002bdc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be2:	4a33      	ldr	r2, [pc, #204]	; (8002cb0 <HAL_ADC_Start_DMA+0x1d8>)
 8002be4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002bee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002bfe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c0e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	334c      	adds	r3, #76	; 0x4c
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f000 fcd8 	bl	80035d4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 031f 	and.w	r3, r3, #31
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10f      	bne.n	8002c50 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d129      	bne.n	8002c92 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c4c:	609a      	str	r2, [r3, #8]
 8002c4e:	e020      	b.n	8002c92 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a17      	ldr	r2, [pc, #92]	; (8002cb4 <HAL_ADC_Start_DMA+0x1dc>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d11b      	bne.n	8002c92 <HAL_ADC_Start_DMA+0x1ba>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d114      	bne.n	8002c92 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	e00b      	b.n	8002c92 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f043 0210 	orr.w	r2, r3, #16
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8a:	f043 0201 	orr.w	r2, r3, #1
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20000010 	.word	0x20000010
 8002ca0:	431bde83 	.word	0x431bde83
 8002ca4:	40012300 	.word	0x40012300
 8002ca8:	08003151 	.word	0x08003151
 8002cac:	0800320b 	.word	0x0800320b
 8002cb0:	08003227 	.word	0x08003227
 8002cb4:	40012000 	.word	0x40012000

08002cb8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x1c>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e113      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x244>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b09      	cmp	r3, #9
 8002d1e:	d925      	bls.n	8002d6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68d9      	ldr	r1, [r3, #12]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4613      	mov	r3, r2
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	4413      	add	r3, r2
 8002d34:	3b1e      	subs	r3, #30
 8002d36:	2207      	movs	r2, #7
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43da      	mvns	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	400a      	ands	r2, r1
 8002d44:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68d9      	ldr	r1, [r3, #12]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	4618      	mov	r0, r3
 8002d58:	4603      	mov	r3, r0
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	4403      	add	r3, r0
 8002d5e:	3b1e      	subs	r3, #30
 8002d60:	409a      	lsls	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	60da      	str	r2, [r3, #12]
 8002d6a:	e022      	b.n	8002db2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6919      	ldr	r1, [r3, #16]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	4413      	add	r3, r2
 8002d80:	2207      	movs	r2, #7
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43da      	mvns	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	400a      	ands	r2, r1
 8002d8e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6919      	ldr	r1, [r3, #16]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	4618      	mov	r0, r3
 8002da2:	4603      	mov	r3, r0
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	4403      	add	r3, r0
 8002da8:	409a      	lsls	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b06      	cmp	r3, #6
 8002db8:	d824      	bhi.n	8002e04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	3b05      	subs	r3, #5
 8002dcc:	221f      	movs	r2, #31
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43da      	mvns	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	400a      	ands	r2, r1
 8002dda:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	4618      	mov	r0, r3
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	3b05      	subs	r3, #5
 8002df6:	fa00 f203 	lsl.w	r2, r0, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	635a      	str	r2, [r3, #52]	; 0x34
 8002e02:	e04c      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b0c      	cmp	r3, #12
 8002e0a:	d824      	bhi.n	8002e56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3b23      	subs	r3, #35	; 0x23
 8002e1e:	221f      	movs	r2, #31
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43da      	mvns	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	400a      	ands	r2, r1
 8002e2c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	3b23      	subs	r3, #35	; 0x23
 8002e48:	fa00 f203 	lsl.w	r2, r0, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30
 8002e54:	e023      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	3b41      	subs	r3, #65	; 0x41
 8002e68:	221f      	movs	r2, #31
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43da      	mvns	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	400a      	ands	r2, r1
 8002e76:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	4618      	mov	r0, r3
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	3b41      	subs	r3, #65	; 0x41
 8002e92:	fa00 f203 	lsl.w	r2, r0, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e9e:	4b29      	ldr	r3, [pc, #164]	; (8002f44 <HAL_ADC_ConfigChannel+0x250>)
 8002ea0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a28      	ldr	r2, [pc, #160]	; (8002f48 <HAL_ADC_ConfigChannel+0x254>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d10f      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x1d8>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b12      	cmp	r3, #18
 8002eb2:	d10b      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a1d      	ldr	r2, [pc, #116]	; (8002f48 <HAL_ADC_ConfigChannel+0x254>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d12b      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x23a>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a1c      	ldr	r2, [pc, #112]	; (8002f4c <HAL_ADC_ConfigChannel+0x258>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d003      	beq.n	8002ee8 <HAL_ADC_ConfigChannel+0x1f4>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b11      	cmp	r3, #17
 8002ee6:	d122      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a11      	ldr	r2, [pc, #68]	; (8002f4c <HAL_ADC_ConfigChannel+0x258>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d111      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f0a:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <HAL_ADC_ConfigChannel+0x25c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a11      	ldr	r2, [pc, #68]	; (8002f54 <HAL_ADC_ConfigChannel+0x260>)
 8002f10:	fba2 2303 	umull	r2, r3, r2, r3
 8002f14:	0c9a      	lsrs	r2, r3, #18
 8002f16:	4613      	mov	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f20:	e002      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	3b01      	subs	r3, #1
 8002f26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f9      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	40012300 	.word	0x40012300
 8002f48:	40012000 	.word	0x40012000
 8002f4c:	10000012 	.word	0x10000012
 8002f50:	20000010 	.word	0x20000010
 8002f54:	431bde83 	.word	0x431bde83

08002f58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f60:	4b79      	ldr	r3, [pc, #484]	; (8003148 <ADC_Init+0x1f0>)
 8002f62:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6859      	ldr	r1, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	021a      	lsls	r2, r3, #8
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002fb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6859      	ldr	r1, [r3, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6899      	ldr	r1, [r3, #8]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fea:	4a58      	ldr	r2, [pc, #352]	; (800314c <ADC_Init+0x1f4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d022      	beq.n	8003036 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ffe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6899      	ldr	r1, [r3, #8]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003020:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6899      	ldr	r1, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	e00f      	b.n	8003056 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003044:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003054:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0202 	bic.w	r2, r2, #2
 8003064:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6899      	ldr	r1, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	7e1b      	ldrb	r3, [r3, #24]
 8003070:	005a      	lsls	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d01b      	beq.n	80030bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003092:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80030a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6859      	ldr	r1, [r3, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	3b01      	subs	r3, #1
 80030b0:	035a      	lsls	r2, r3, #13
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	605a      	str	r2, [r3, #4]
 80030ba:	e007      	b.n	80030cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	051a      	lsls	r2, r3, #20
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003100:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6899      	ldr	r1, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800310e:	025a      	lsls	r2, r3, #9
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003126:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6899      	ldr	r1, [r3, #8]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	029a      	lsls	r2, r3, #10
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	609a      	str	r2, [r3, #8]
}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	40012300 	.word	0x40012300
 800314c:	0f000001 	.word	0x0f000001

08003150 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003166:	2b00      	cmp	r3, #0
 8003168:	d13c      	bne.n	80031e4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d12b      	bne.n	80031dc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003188:	2b00      	cmp	r3, #0
 800318a:	d127      	bne.n	80031dc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003192:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003196:	2b00      	cmp	r3, #0
 8003198:	d006      	beq.n	80031a8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d119      	bne.n	80031dc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0220 	bic.w	r2, r2, #32
 80031b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d105      	bne.n	80031dc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	f043 0201 	orr.w	r2, r3, #1
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f7ff fd6b 	bl	8002cb8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031e2:	e00e      	b.n	8003202 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7ff fd75 	bl	8002ce0 <HAL_ADC_ErrorCallback>
}
 80031f6:	e004      	b.n	8003202 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	4798      	blx	r3
}
 8003202:	bf00      	nop
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f7ff fd57 	bl	8002ccc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800321e:	bf00      	nop
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003232:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2240      	movs	r2, #64	; 0x40
 8003238:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	f043 0204 	orr.w	r2, r3, #4
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f7ff fd4a 	bl	8002ce0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800324c:	bf00      	nop
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <__NVIC_SetPriorityGrouping+0x44>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003270:	4013      	ands	r3, r2
 8003272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800327c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003286:	4a04      	ldr	r2, [pc, #16]	; (8003298 <__NVIC_SetPriorityGrouping+0x44>)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	60d3      	str	r3, [r2, #12]
}
 800328c:	bf00      	nop
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	e000ed00 	.word	0xe000ed00

0800329c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032a0:	4b04      	ldr	r3, [pc, #16]	; (80032b4 <__NVIC_GetPriorityGrouping+0x18>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	0a1b      	lsrs	r3, r3, #8
 80032a6:	f003 0307 	and.w	r3, r3, #7
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	db0b      	blt.n	80032e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	f003 021f 	and.w	r2, r3, #31
 80032d0:	4907      	ldr	r1, [pc, #28]	; (80032f0 <__NVIC_EnableIRQ+0x38>)
 80032d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	2001      	movs	r0, #1
 80032da:	fa00 f202 	lsl.w	r2, r0, r2
 80032de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	e000e100 	.word	0xe000e100

080032f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	6039      	str	r1, [r7, #0]
 80032fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003304:	2b00      	cmp	r3, #0
 8003306:	db0a      	blt.n	800331e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	b2da      	uxtb	r2, r3
 800330c:	490c      	ldr	r1, [pc, #48]	; (8003340 <__NVIC_SetPriority+0x4c>)
 800330e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003312:	0112      	lsls	r2, r2, #4
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	440b      	add	r3, r1
 8003318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800331c:	e00a      	b.n	8003334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	b2da      	uxtb	r2, r3
 8003322:	4908      	ldr	r1, [pc, #32]	; (8003344 <__NVIC_SetPriority+0x50>)
 8003324:	79fb      	ldrb	r3, [r7, #7]
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	3b04      	subs	r3, #4
 800332c:	0112      	lsls	r2, r2, #4
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	440b      	add	r3, r1
 8003332:	761a      	strb	r2, [r3, #24]
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	e000e100 	.word	0xe000e100
 8003344:	e000ed00 	.word	0xe000ed00

08003348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003348:	b480      	push	{r7}
 800334a:	b089      	sub	sp, #36	; 0x24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f1c3 0307 	rsb	r3, r3, #7
 8003362:	2b04      	cmp	r3, #4
 8003364:	bf28      	it	cs
 8003366:	2304      	movcs	r3, #4
 8003368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	3304      	adds	r3, #4
 800336e:	2b06      	cmp	r3, #6
 8003370:	d902      	bls.n	8003378 <NVIC_EncodePriority+0x30>
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	3b03      	subs	r3, #3
 8003376:	e000      	b.n	800337a <NVIC_EncodePriority+0x32>
 8003378:	2300      	movs	r3, #0
 800337a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800337c:	f04f 32ff 	mov.w	r2, #4294967295
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	43da      	mvns	r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	401a      	ands	r2, r3
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003390:	f04f 31ff 	mov.w	r1, #4294967295
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	fa01 f303 	lsl.w	r3, r1, r3
 800339a:	43d9      	mvns	r1, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a0:	4313      	orrs	r3, r2
         );
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3724      	adds	r7, #36	; 0x24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
	...

080033b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033c0:	d301      	bcc.n	80033c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033c2:	2301      	movs	r3, #1
 80033c4:	e00f      	b.n	80033e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033c6:	4a0a      	ldr	r2, [pc, #40]	; (80033f0 <SysTick_Config+0x40>)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033ce:	210f      	movs	r1, #15
 80033d0:	f04f 30ff 	mov.w	r0, #4294967295
 80033d4:	f7ff ff8e 	bl	80032f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033d8:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <SysTick_Config+0x40>)
 80033da:	2200      	movs	r2, #0
 80033dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033de:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <SysTick_Config+0x40>)
 80033e0:	2207      	movs	r2, #7
 80033e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	e000e010 	.word	0xe000e010

080033f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff ff29 	bl	8003254 <__NVIC_SetPriorityGrouping>
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800340a:	b580      	push	{r7, lr}
 800340c:	b086      	sub	sp, #24
 800340e:	af00      	add	r7, sp, #0
 8003410:	4603      	mov	r3, r0
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	607a      	str	r2, [r7, #4]
 8003416:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800341c:	f7ff ff3e 	bl	800329c <__NVIC_GetPriorityGrouping>
 8003420:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	68b9      	ldr	r1, [r7, #8]
 8003426:	6978      	ldr	r0, [r7, #20]
 8003428:	f7ff ff8e 	bl	8003348 <NVIC_EncodePriority>
 800342c:	4602      	mov	r2, r0
 800342e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003432:	4611      	mov	r1, r2
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff ff5d 	bl	80032f4 <__NVIC_SetPriority>
}
 800343a:	bf00      	nop
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b082      	sub	sp, #8
 8003446:	af00      	add	r7, sp, #0
 8003448:	4603      	mov	r3, r0
 800344a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800344c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff ff31 	bl	80032b8 <__NVIC_EnableIRQ>
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff ffa2 	bl	80033b0 <SysTick_Config>
 800346c:	4603      	mov	r3, r0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003484:	f7ff fad8 	bl	8002a38 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e099      	b.n	80035c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0201 	bic.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034b4:	e00f      	b.n	80034d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034b6:	f7ff fabf 	bl	8002a38 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b05      	cmp	r3, #5
 80034c2:	d908      	bls.n	80034d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2203      	movs	r2, #3
 80034ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e078      	b.n	80035c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1e8      	bne.n	80034b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	4b38      	ldr	r3, [pc, #224]	; (80035d0 <HAL_DMA_Init+0x158>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003502:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800350e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800351a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	4313      	orrs	r3, r2
 8003526:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	2b04      	cmp	r3, #4
 800352e:	d107      	bne.n	8003540 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003538:	4313      	orrs	r3, r2
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	4313      	orrs	r3, r2
 800353e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f023 0307 	bic.w	r3, r3, #7
 8003556:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	4313      	orrs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	2b04      	cmp	r3, #4
 8003568:	d117      	bne.n	800359a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	4313      	orrs	r3, r2
 8003572:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00e      	beq.n	800359a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 fa6f 	bl	8003a60 <DMA_CheckFifoParam>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2240      	movs	r2, #64	; 0x40
 800358c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003596:	2301      	movs	r3, #1
 8003598:	e016      	b.n	80035c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 fa26 	bl	80039f4 <DMA_CalcBaseAndBitshift>
 80035a8:	4603      	mov	r3, r0
 80035aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b0:	223f      	movs	r2, #63	; 0x3f
 80035b2:	409a      	lsls	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	f010803f 	.word	0xf010803f

080035d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
 80035e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035e2:	2300      	movs	r3, #0
 80035e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_DMA_Start_IT+0x26>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e040      	b.n	800367c <HAL_DMA_Start_IT+0xa8>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b01      	cmp	r3, #1
 800360c:	d12f      	bne.n	800366e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2202      	movs	r2, #2
 8003612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	68b9      	ldr	r1, [r7, #8]
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 f9b8 	bl	8003998 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362c:	223f      	movs	r2, #63	; 0x3f
 800362e:	409a      	lsls	r2, r3
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0216 	orr.w	r2, r2, #22
 8003642:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	2b00      	cmp	r3, #0
 800364a:	d007      	beq.n	800365c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0208 	orr.w	r2, r2, #8
 800365a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	e005      	b.n	800367a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003676:	2302      	movs	r3, #2
 8003678:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800367a:	7dfb      	ldrb	r3, [r7, #23]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003690:	4b8e      	ldr	r3, [pc, #568]	; (80038cc <HAL_DMA_IRQHandler+0x248>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a8e      	ldr	r2, [pc, #568]	; (80038d0 <HAL_DMA_IRQHandler+0x24c>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	0a9b      	lsrs	r3, r3, #10
 800369c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ae:	2208      	movs	r2, #8
 80036b0:	409a      	lsls	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4013      	ands	r3, r2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d01a      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d013      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0204 	bic.w	r2, r2, #4
 80036d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036dc:	2208      	movs	r2, #8
 80036de:	409a      	lsls	r2, r3
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e8:	f043 0201 	orr.w	r2, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f4:	2201      	movs	r2, #1
 80036f6:	409a      	lsls	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d012      	beq.n	8003726 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00b      	beq.n	8003726 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003712:	2201      	movs	r2, #1
 8003714:	409a      	lsls	r2, r3
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371e:	f043 0202 	orr.w	r2, r3, #2
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372a:	2204      	movs	r2, #4
 800372c:	409a      	lsls	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4013      	ands	r3, r2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d012      	beq.n	800375c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00b      	beq.n	800375c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003748:	2204      	movs	r2, #4
 800374a:	409a      	lsls	r2, r3
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003754:	f043 0204 	orr.w	r2, r3, #4
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003760:	2210      	movs	r2, #16
 8003762:	409a      	lsls	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4013      	ands	r3, r2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d043      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b00      	cmp	r3, #0
 8003778:	d03c      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377e:	2210      	movs	r2, #16
 8003780:	409a      	lsls	r2, r3
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d018      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d108      	bne.n	80037b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d024      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	4798      	blx	r3
 80037b2:	e01f      	b.n	80037f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d01b      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	4798      	blx	r3
 80037c4:	e016      	b.n	80037f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d107      	bne.n	80037e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0208 	bic.w	r2, r2, #8
 80037e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f8:	2220      	movs	r2, #32
 80037fa:	409a      	lsls	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4013      	ands	r3, r2
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 808f 	beq.w	8003924 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0310 	and.w	r3, r3, #16
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 8087 	beq.w	8003924 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381a:	2220      	movs	r2, #32
 800381c:	409a      	lsls	r2, r3
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b05      	cmp	r3, #5
 800382c:	d136      	bne.n	800389c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0216 	bic.w	r2, r2, #22
 800383c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695a      	ldr	r2, [r3, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800384c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	2b00      	cmp	r3, #0
 8003854:	d103      	bne.n	800385e <HAL_DMA_IRQHandler+0x1da>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800385a:	2b00      	cmp	r3, #0
 800385c:	d007      	beq.n	800386e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0208 	bic.w	r2, r2, #8
 800386c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003872:	223f      	movs	r2, #63	; 0x3f
 8003874:	409a      	lsls	r2, r3
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388e:	2b00      	cmp	r3, #0
 8003890:	d07e      	beq.n	8003990 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	4798      	blx	r3
        }
        return;
 800389a:	e079      	b.n	8003990 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d01d      	beq.n	80038e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10d      	bne.n	80038d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d031      	beq.n	8003924 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	4798      	blx	r3
 80038c8:	e02c      	b.n	8003924 <HAL_DMA_IRQHandler+0x2a0>
 80038ca:	bf00      	nop
 80038cc:	20000010 	.word	0x20000010
 80038d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d023      	beq.n	8003924 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	4798      	blx	r3
 80038e4:	e01e      	b.n	8003924 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10f      	bne.n	8003914 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0210 	bic.w	r2, r2, #16
 8003902:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003928:	2b00      	cmp	r3, #0
 800392a:	d032      	beq.n	8003992 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	d022      	beq.n	800397e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2205      	movs	r2, #5
 800393c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0201 	bic.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	3301      	adds	r3, #1
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	429a      	cmp	r2, r3
 800395a:	d307      	bcc.n	800396c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f2      	bne.n	8003950 <HAL_DMA_IRQHandler+0x2cc>
 800396a:	e000      	b.n	800396e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800396c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003982:	2b00      	cmp	r3, #0
 8003984:	d005      	beq.n	8003992 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	4798      	blx	r3
 800398e:	e000      	b.n	8003992 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003990:	bf00      	nop
    }
  }
}
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2b40      	cmp	r3, #64	; 0x40
 80039c4:	d108      	bne.n	80039d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039d6:	e007      	b.n	80039e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	60da      	str	r2, [r3, #12]
}
 80039e8:	bf00      	nop
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	3b10      	subs	r3, #16
 8003a04:	4a14      	ldr	r2, [pc, #80]	; (8003a58 <DMA_CalcBaseAndBitshift+0x64>)
 8003a06:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a0e:	4a13      	ldr	r2, [pc, #76]	; (8003a5c <DMA_CalcBaseAndBitshift+0x68>)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4413      	add	r3, r2
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d909      	bls.n	8003a36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a2a:	f023 0303 	bic.w	r3, r3, #3
 8003a2e:	1d1a      	adds	r2, r3, #4
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	659a      	str	r2, [r3, #88]	; 0x58
 8003a34:	e007      	b.n	8003a46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a3e:	f023 0303 	bic.w	r3, r3, #3
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	aaaaaaab 	.word	0xaaaaaaab
 8003a5c:	08006f68 	.word	0x08006f68

08003a60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d11f      	bne.n	8003aba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d856      	bhi.n	8003b2e <DMA_CheckFifoParam+0xce>
 8003a80:	a201      	add	r2, pc, #4	; (adr r2, 8003a88 <DMA_CheckFifoParam+0x28>)
 8003a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a86:	bf00      	nop
 8003a88:	08003a99 	.word	0x08003a99
 8003a8c:	08003aab 	.word	0x08003aab
 8003a90:	08003a99 	.word	0x08003a99
 8003a94:	08003b2f 	.word	0x08003b2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d046      	beq.n	8003b32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aa8:	e043      	b.n	8003b32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ab2:	d140      	bne.n	8003b36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ab8:	e03d      	b.n	8003b36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac2:	d121      	bne.n	8003b08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	d837      	bhi.n	8003b3a <DMA_CheckFifoParam+0xda>
 8003aca:	a201      	add	r2, pc, #4	; (adr r2, 8003ad0 <DMA_CheckFifoParam+0x70>)
 8003acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad0:	08003ae1 	.word	0x08003ae1
 8003ad4:	08003ae7 	.word	0x08003ae7
 8003ad8:	08003ae1 	.word	0x08003ae1
 8003adc:	08003af9 	.word	0x08003af9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae4:	e030      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d025      	beq.n	8003b3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af6:	e022      	b.n	8003b3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b00:	d11f      	bne.n	8003b42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b06:	e01c      	b.n	8003b42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d903      	bls.n	8003b16 <DMA_CheckFifoParam+0xb6>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d003      	beq.n	8003b1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b14:	e018      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	73fb      	strb	r3, [r7, #15]
      break;
 8003b1a:	e015      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00e      	beq.n	8003b46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b2c:	e00b      	b.n	8003b46 <DMA_CheckFifoParam+0xe6>
      break;
 8003b2e:	bf00      	nop
 8003b30:	e00a      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
      break;
 8003b32:	bf00      	nop
 8003b34:	e008      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
      break;
 8003b36:	bf00      	nop
 8003b38:	e006      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
      break;
 8003b3a:	bf00      	nop
 8003b3c:	e004      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
      break;
 8003b3e:	bf00      	nop
 8003b40:	e002      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b42:	bf00      	nop
 8003b44:	e000      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
      break;
 8003b46:	bf00      	nop
    }
  } 
  
  return status; 
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop

08003b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b089      	sub	sp, #36	; 0x24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61fb      	str	r3, [r7, #28]
 8003b72:	e159      	b.n	8003e28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b74:	2201      	movs	r2, #1
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4013      	ands	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	f040 8148 	bne.w	8003e22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d005      	beq.n	8003baa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d130      	bne.n	8003c0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003be0:	2201      	movs	r2, #1
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	43db      	mvns	r3, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	091b      	lsrs	r3, r3, #4
 8003bf6:	f003 0201 	and.w	r2, r3, #1
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	2b03      	cmp	r3, #3
 8003c16:	d017      	beq.n	8003c48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	2203      	movs	r2, #3
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f003 0303 	and.w	r3, r3, #3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d123      	bne.n	8003c9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	08da      	lsrs	r2, r3, #3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3208      	adds	r2, #8
 8003c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	220f      	movs	r2, #15
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	43db      	mvns	r3, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4013      	ands	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	08da      	lsrs	r2, r3, #3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3208      	adds	r2, #8
 8003c96:	69b9      	ldr	r1, [r7, #24]
 8003c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	2203      	movs	r2, #3
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	43db      	mvns	r3, r3
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f003 0203 	and.w	r2, r3, #3
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 80a2 	beq.w	8003e22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	4b57      	ldr	r3, [pc, #348]	; (8003e40 <HAL_GPIO_Init+0x2e8>)
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce6:	4a56      	ldr	r2, [pc, #344]	; (8003e40 <HAL_GPIO_Init+0x2e8>)
 8003ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cec:	6453      	str	r3, [r2, #68]	; 0x44
 8003cee:	4b54      	ldr	r3, [pc, #336]	; (8003e40 <HAL_GPIO_Init+0x2e8>)
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cfa:	4a52      	ldr	r2, [pc, #328]	; (8003e44 <HAL_GPIO_Init+0x2ec>)
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	089b      	lsrs	r3, r3, #2
 8003d00:	3302      	adds	r3, #2
 8003d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	220f      	movs	r2, #15
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	43db      	mvns	r3, r3
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a49      	ldr	r2, [pc, #292]	; (8003e48 <HAL_GPIO_Init+0x2f0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d019      	beq.n	8003d5a <HAL_GPIO_Init+0x202>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a48      	ldr	r2, [pc, #288]	; (8003e4c <HAL_GPIO_Init+0x2f4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d013      	beq.n	8003d56 <HAL_GPIO_Init+0x1fe>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a47      	ldr	r2, [pc, #284]	; (8003e50 <HAL_GPIO_Init+0x2f8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d00d      	beq.n	8003d52 <HAL_GPIO_Init+0x1fa>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a46      	ldr	r2, [pc, #280]	; (8003e54 <HAL_GPIO_Init+0x2fc>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d007      	beq.n	8003d4e <HAL_GPIO_Init+0x1f6>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a45      	ldr	r2, [pc, #276]	; (8003e58 <HAL_GPIO_Init+0x300>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d101      	bne.n	8003d4a <HAL_GPIO_Init+0x1f2>
 8003d46:	2304      	movs	r3, #4
 8003d48:	e008      	b.n	8003d5c <HAL_GPIO_Init+0x204>
 8003d4a:	2307      	movs	r3, #7
 8003d4c:	e006      	b.n	8003d5c <HAL_GPIO_Init+0x204>
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e004      	b.n	8003d5c <HAL_GPIO_Init+0x204>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e002      	b.n	8003d5c <HAL_GPIO_Init+0x204>
 8003d56:	2301      	movs	r3, #1
 8003d58:	e000      	b.n	8003d5c <HAL_GPIO_Init+0x204>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	69fa      	ldr	r2, [r7, #28]
 8003d5e:	f002 0203 	and.w	r2, r2, #3
 8003d62:	0092      	lsls	r2, r2, #2
 8003d64:	4093      	lsls	r3, r2
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d6c:	4935      	ldr	r1, [pc, #212]	; (8003e44 <HAL_GPIO_Init+0x2ec>)
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	089b      	lsrs	r3, r3, #2
 8003d72:	3302      	adds	r3, #2
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d7a:	4b38      	ldr	r3, [pc, #224]	; (8003e5c <HAL_GPIO_Init+0x304>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	43db      	mvns	r3, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	4013      	ands	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d9e:	4a2f      	ldr	r2, [pc, #188]	; (8003e5c <HAL_GPIO_Init+0x304>)
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003da4:	4b2d      	ldr	r3, [pc, #180]	; (8003e5c <HAL_GPIO_Init+0x304>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	43db      	mvns	r3, r3
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	4013      	ands	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dc8:	4a24      	ldr	r2, [pc, #144]	; (8003e5c <HAL_GPIO_Init+0x304>)
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dce:	4b23      	ldr	r3, [pc, #140]	; (8003e5c <HAL_GPIO_Init+0x304>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	43db      	mvns	r3, r3
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003df2:	4a1a      	ldr	r2, [pc, #104]	; (8003e5c <HAL_GPIO_Init+0x304>)
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003df8:	4b18      	ldr	r3, [pc, #96]	; (8003e5c <HAL_GPIO_Init+0x304>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	43db      	mvns	r3, r3
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	4013      	ands	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e1c:	4a0f      	ldr	r2, [pc, #60]	; (8003e5c <HAL_GPIO_Init+0x304>)
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	3301      	adds	r3, #1
 8003e26:	61fb      	str	r3, [r7, #28]
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	2b0f      	cmp	r3, #15
 8003e2c:	f67f aea2 	bls.w	8003b74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e30:	bf00      	nop
 8003e32:	bf00      	nop
 8003e34:	3724      	adds	r7, #36	; 0x24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40023800 	.word	0x40023800
 8003e44:	40013800 	.word	0x40013800
 8003e48:	40020000 	.word	0x40020000
 8003e4c:	40020400 	.word	0x40020400
 8003e50:	40020800 	.word	0x40020800
 8003e54:	40020c00 	.word	0x40020c00
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	40013c00 	.word	0x40013c00

08003e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	807b      	strh	r3, [r7, #2]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e70:	787b      	ldrb	r3, [r7, #1]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e76:	887a      	ldrh	r2, [r7, #2]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e7c:	e003      	b.n	8003e86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e7e:	887b      	ldrh	r3, [r7, #2]
 8003e80:	041a      	lsls	r2, r3, #16
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	619a      	str	r2, [r3, #24]
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
	...

08003e94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003e9e:	4b08      	ldr	r3, [pc, #32]	; (8003ec0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ea0:	695a      	ldr	r2, [r3, #20]
 8003ea2:	88fb      	ldrh	r3, [r7, #6]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d006      	beq.n	8003eb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003eaa:	4a05      	ldr	r2, [pc, #20]	; (8003ec0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003eb0:	88fb      	ldrh	r3, [r7, #6]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fe f9c2 	bl	800223c <HAL_GPIO_EXTI_Callback>
  }
}
 8003eb8:	bf00      	nop
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40013c00 	.word	0x40013c00

08003ec4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e267      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d075      	beq.n	8003fce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ee2:	4b88      	ldr	r3, [pc, #544]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d00c      	beq.n	8003f08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eee:	4b85      	ldr	r3, [pc, #532]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d112      	bne.n	8003f20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003efa:	4b82      	ldr	r3, [pc, #520]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f06:	d10b      	bne.n	8003f20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f08:	4b7e      	ldr	r3, [pc, #504]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d05b      	beq.n	8003fcc <HAL_RCC_OscConfig+0x108>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d157      	bne.n	8003fcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e242      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f28:	d106      	bne.n	8003f38 <HAL_RCC_OscConfig+0x74>
 8003f2a:	4b76      	ldr	r3, [pc, #472]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a75      	ldr	r2, [pc, #468]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	e01d      	b.n	8003f74 <HAL_RCC_OscConfig+0xb0>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f40:	d10c      	bne.n	8003f5c <HAL_RCC_OscConfig+0x98>
 8003f42:	4b70      	ldr	r3, [pc, #448]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a6f      	ldr	r2, [pc, #444]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	4b6d      	ldr	r3, [pc, #436]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a6c      	ldr	r2, [pc, #432]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	e00b      	b.n	8003f74 <HAL_RCC_OscConfig+0xb0>
 8003f5c:	4b69      	ldr	r3, [pc, #420]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a68      	ldr	r2, [pc, #416]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f66:	6013      	str	r3, [r2, #0]
 8003f68:	4b66      	ldr	r3, [pc, #408]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a65      	ldr	r2, [pc, #404]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d013      	beq.n	8003fa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7c:	f7fe fd5c 	bl	8002a38 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f84:	f7fe fd58 	bl	8002a38 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b64      	cmp	r3, #100	; 0x64
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e207      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f96:	4b5b      	ldr	r3, [pc, #364]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0f0      	beq.n	8003f84 <HAL_RCC_OscConfig+0xc0>
 8003fa2:	e014      	b.n	8003fce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa4:	f7fe fd48 	bl	8002a38 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fac:	f7fe fd44 	bl	8002a38 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b64      	cmp	r3, #100	; 0x64
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e1f3      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fbe:	4b51      	ldr	r3, [pc, #324]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f0      	bne.n	8003fac <HAL_RCC_OscConfig+0xe8>
 8003fca:	e000      	b.n	8003fce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d063      	beq.n	80040a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fda:	4b4a      	ldr	r3, [pc, #296]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 030c 	and.w	r3, r3, #12
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00b      	beq.n	8003ffe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fe6:	4b47      	ldr	r3, [pc, #284]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d11c      	bne.n	800402c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ff2:	4b44      	ldr	r3, [pc, #272]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d116      	bne.n	800402c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ffe:	4b41      	ldr	r3, [pc, #260]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d005      	beq.n	8004016 <HAL_RCC_OscConfig+0x152>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d001      	beq.n	8004016 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e1c7      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004016:	4b3b      	ldr	r3, [pc, #236]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	4937      	ldr	r1, [pc, #220]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8004026:	4313      	orrs	r3, r2
 8004028:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402a:	e03a      	b.n	80040a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d020      	beq.n	8004076 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004034:	4b34      	ldr	r3, [pc, #208]	; (8004108 <HAL_RCC_OscConfig+0x244>)
 8004036:	2201      	movs	r2, #1
 8004038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403a:	f7fe fcfd 	bl	8002a38 <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004042:	f7fe fcf9 	bl	8002a38 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e1a8      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004054:	4b2b      	ldr	r3, [pc, #172]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f0      	beq.n	8004042 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004060:	4b28      	ldr	r3, [pc, #160]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	4925      	ldr	r1, [pc, #148]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8004070:	4313      	orrs	r3, r2
 8004072:	600b      	str	r3, [r1, #0]
 8004074:	e015      	b.n	80040a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004076:	4b24      	ldr	r3, [pc, #144]	; (8004108 <HAL_RCC_OscConfig+0x244>)
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407c:	f7fe fcdc 	bl	8002a38 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004084:	f7fe fcd8 	bl	8002a38 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e187      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004096:	4b1b      	ldr	r3, [pc, #108]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d036      	beq.n	800411c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d016      	beq.n	80040e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040b6:	4b15      	ldr	r3, [pc, #84]	; (800410c <HAL_RCC_OscConfig+0x248>)
 80040b8:	2201      	movs	r2, #1
 80040ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040bc:	f7fe fcbc 	bl	8002a38 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040c4:	f7fe fcb8 	bl	8002a38 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e167      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040d6:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 80040d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0f0      	beq.n	80040c4 <HAL_RCC_OscConfig+0x200>
 80040e2:	e01b      	b.n	800411c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040e4:	4b09      	ldr	r3, [pc, #36]	; (800410c <HAL_RCC_OscConfig+0x248>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ea:	f7fe fca5 	bl	8002a38 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040f0:	e00e      	b.n	8004110 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040f2:	f7fe fca1 	bl	8002a38 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d907      	bls.n	8004110 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e150      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
 8004104:	40023800 	.word	0x40023800
 8004108:	42470000 	.word	0x42470000
 800410c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004110:	4b88      	ldr	r3, [pc, #544]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 8004112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1ea      	bne.n	80040f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8097 	beq.w	8004258 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800412a:	2300      	movs	r3, #0
 800412c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800412e:	4b81      	ldr	r3, [pc, #516]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10f      	bne.n	800415a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800413a:	2300      	movs	r3, #0
 800413c:	60bb      	str	r3, [r7, #8]
 800413e:	4b7d      	ldr	r3, [pc, #500]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	4a7c      	ldr	r2, [pc, #496]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 8004144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004148:	6413      	str	r3, [r2, #64]	; 0x40
 800414a:	4b7a      	ldr	r3, [pc, #488]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004152:	60bb      	str	r3, [r7, #8]
 8004154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004156:	2301      	movs	r3, #1
 8004158:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415a:	4b77      	ldr	r3, [pc, #476]	; (8004338 <HAL_RCC_OscConfig+0x474>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004162:	2b00      	cmp	r3, #0
 8004164:	d118      	bne.n	8004198 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004166:	4b74      	ldr	r3, [pc, #464]	; (8004338 <HAL_RCC_OscConfig+0x474>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a73      	ldr	r2, [pc, #460]	; (8004338 <HAL_RCC_OscConfig+0x474>)
 800416c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004172:	f7fe fc61 	bl	8002a38 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800417a:	f7fe fc5d 	bl	8002a38 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e10c      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418c:	4b6a      	ldr	r3, [pc, #424]	; (8004338 <HAL_RCC_OscConfig+0x474>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0f0      	beq.n	800417a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d106      	bne.n	80041ae <HAL_RCC_OscConfig+0x2ea>
 80041a0:	4b64      	ldr	r3, [pc, #400]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 80041a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a4:	4a63      	ldr	r2, [pc, #396]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 80041a6:	f043 0301 	orr.w	r3, r3, #1
 80041aa:	6713      	str	r3, [r2, #112]	; 0x70
 80041ac:	e01c      	b.n	80041e8 <HAL_RCC_OscConfig+0x324>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	2b05      	cmp	r3, #5
 80041b4:	d10c      	bne.n	80041d0 <HAL_RCC_OscConfig+0x30c>
 80041b6:	4b5f      	ldr	r3, [pc, #380]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 80041b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ba:	4a5e      	ldr	r2, [pc, #376]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 80041bc:	f043 0304 	orr.w	r3, r3, #4
 80041c0:	6713      	str	r3, [r2, #112]	; 0x70
 80041c2:	4b5c      	ldr	r3, [pc, #368]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 80041c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c6:	4a5b      	ldr	r2, [pc, #364]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 80041c8:	f043 0301 	orr.w	r3, r3, #1
 80041cc:	6713      	str	r3, [r2, #112]	; 0x70
 80041ce:	e00b      	b.n	80041e8 <HAL_RCC_OscConfig+0x324>
 80041d0:	4b58      	ldr	r3, [pc, #352]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 80041d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d4:	4a57      	ldr	r2, [pc, #348]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 80041d6:	f023 0301 	bic.w	r3, r3, #1
 80041da:	6713      	str	r3, [r2, #112]	; 0x70
 80041dc:	4b55      	ldr	r3, [pc, #340]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 80041de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e0:	4a54      	ldr	r2, [pc, #336]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 80041e2:	f023 0304 	bic.w	r3, r3, #4
 80041e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d015      	beq.n	800421c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f0:	f7fe fc22 	bl	8002a38 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f6:	e00a      	b.n	800420e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041f8:	f7fe fc1e 	bl	8002a38 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	f241 3288 	movw	r2, #5000	; 0x1388
 8004206:	4293      	cmp	r3, r2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e0cb      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800420e:	4b49      	ldr	r3, [pc, #292]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 8004210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0ee      	beq.n	80041f8 <HAL_RCC_OscConfig+0x334>
 800421a:	e014      	b.n	8004246 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800421c:	f7fe fc0c 	bl	8002a38 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004222:	e00a      	b.n	800423a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004224:	f7fe fc08 	bl	8002a38 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004232:	4293      	cmp	r3, r2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e0b5      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800423a:	4b3e      	ldr	r3, [pc, #248]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 800423c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1ee      	bne.n	8004224 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004246:	7dfb      	ldrb	r3, [r7, #23]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d105      	bne.n	8004258 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800424c:	4b39      	ldr	r3, [pc, #228]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	4a38      	ldr	r2, [pc, #224]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 8004252:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004256:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 80a1 	beq.w	80043a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004262:	4b34      	ldr	r3, [pc, #208]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 030c 	and.w	r3, r3, #12
 800426a:	2b08      	cmp	r3, #8
 800426c:	d05c      	beq.n	8004328 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d141      	bne.n	80042fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004276:	4b31      	ldr	r3, [pc, #196]	; (800433c <HAL_RCC_OscConfig+0x478>)
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427c:	f7fe fbdc 	bl	8002a38 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004284:	f7fe fbd8 	bl	8002a38 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e087      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004296:	4b27      	ldr	r3, [pc, #156]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f0      	bne.n	8004284 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69da      	ldr	r2, [r3, #28]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	019b      	lsls	r3, r3, #6
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b8:	085b      	lsrs	r3, r3, #1
 80042ba:	3b01      	subs	r3, #1
 80042bc:	041b      	lsls	r3, r3, #16
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	061b      	lsls	r3, r3, #24
 80042c6:	491b      	ldr	r1, [pc, #108]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042cc:	4b1b      	ldr	r3, [pc, #108]	; (800433c <HAL_RCC_OscConfig+0x478>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d2:	f7fe fbb1 	bl	8002a38 <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042da:	f7fe fbad 	bl	8002a38 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e05c      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ec:	4b11      	ldr	r3, [pc, #68]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0f0      	beq.n	80042da <HAL_RCC_OscConfig+0x416>
 80042f8:	e054      	b.n	80043a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fa:	4b10      	ldr	r3, [pc, #64]	; (800433c <HAL_RCC_OscConfig+0x478>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004300:	f7fe fb9a 	bl	8002a38 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004308:	f7fe fb96 	bl	8002a38 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e045      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431a:	4b06      	ldr	r3, [pc, #24]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f0      	bne.n	8004308 <HAL_RCC_OscConfig+0x444>
 8004326:	e03d      	b.n	80043a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d107      	bne.n	8004340 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e038      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
 8004334:	40023800 	.word	0x40023800
 8004338:	40007000 	.word	0x40007000
 800433c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004340:	4b1b      	ldr	r3, [pc, #108]	; (80043b0 <HAL_RCC_OscConfig+0x4ec>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d028      	beq.n	80043a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004358:	429a      	cmp	r2, r3
 800435a:	d121      	bne.n	80043a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004366:	429a      	cmp	r2, r3
 8004368:	d11a      	bne.n	80043a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004370:	4013      	ands	r3, r2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004376:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004378:	4293      	cmp	r3, r2
 800437a:	d111      	bne.n	80043a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004386:	085b      	lsrs	r3, r3, #1
 8004388:	3b01      	subs	r3, #1
 800438a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800438c:	429a      	cmp	r2, r3
 800438e:	d107      	bne.n	80043a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800439c:	429a      	cmp	r2, r3
 800439e:	d001      	beq.n	80043a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e000      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40023800 	.word	0x40023800

080043b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e0cc      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043c8:	4b68      	ldr	r3, [pc, #416]	; (800456c <HAL_RCC_ClockConfig+0x1b8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d90c      	bls.n	80043f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d6:	4b65      	ldr	r3, [pc, #404]	; (800456c <HAL_RCC_ClockConfig+0x1b8>)
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043de:	4b63      	ldr	r3, [pc, #396]	; (800456c <HAL_RCC_ClockConfig+0x1b8>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d001      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0b8      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d020      	beq.n	800443e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004408:	4b59      	ldr	r3, [pc, #356]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	4a58      	ldr	r2, [pc, #352]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004412:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0308 	and.w	r3, r3, #8
 800441c:	2b00      	cmp	r3, #0
 800441e:	d005      	beq.n	800442c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004420:	4b53      	ldr	r3, [pc, #332]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	4a52      	ldr	r2, [pc, #328]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800442a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800442c:	4b50      	ldr	r3, [pc, #320]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	494d      	ldr	r1, [pc, #308]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	4313      	orrs	r3, r2
 800443c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d044      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d107      	bne.n	8004462 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004452:	4b47      	ldr	r3, [pc, #284]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d119      	bne.n	8004492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e07f      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b02      	cmp	r3, #2
 8004468:	d003      	beq.n	8004472 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800446e:	2b03      	cmp	r3, #3
 8004470:	d107      	bne.n	8004482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004472:	4b3f      	ldr	r3, [pc, #252]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d109      	bne.n	8004492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e06f      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004482:	4b3b      	ldr	r3, [pc, #236]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e067      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004492:	4b37      	ldr	r3, [pc, #220]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f023 0203 	bic.w	r2, r3, #3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	4934      	ldr	r1, [pc, #208]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044a4:	f7fe fac8 	bl	8002a38 <HAL_GetTick>
 80044a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044aa:	e00a      	b.n	80044c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ac:	f7fe fac4 	bl	8002a38 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e04f      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c2:	4b2b      	ldr	r3, [pc, #172]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 020c 	and.w	r2, r3, #12
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d1eb      	bne.n	80044ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044d4:	4b25      	ldr	r3, [pc, #148]	; (800456c <HAL_RCC_ClockConfig+0x1b8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d20c      	bcs.n	80044fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e2:	4b22      	ldr	r3, [pc, #136]	; (800456c <HAL_RCC_ClockConfig+0x1b8>)
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ea:	4b20      	ldr	r3, [pc, #128]	; (800456c <HAL_RCC_ClockConfig+0x1b8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d001      	beq.n	80044fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e032      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	d008      	beq.n	800451a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004508:	4b19      	ldr	r3, [pc, #100]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	4916      	ldr	r1, [pc, #88]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	4313      	orrs	r3, r2
 8004518:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d009      	beq.n	800453a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004526:	4b12      	ldr	r3, [pc, #72]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	490e      	ldr	r1, [pc, #56]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	4313      	orrs	r3, r2
 8004538:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800453a:	f000 f821 	bl	8004580 <HAL_RCC_GetSysClockFreq>
 800453e:	4602      	mov	r2, r0
 8004540:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	091b      	lsrs	r3, r3, #4
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	490a      	ldr	r1, [pc, #40]	; (8004574 <HAL_RCC_ClockConfig+0x1c0>)
 800454c:	5ccb      	ldrb	r3, [r1, r3]
 800454e:	fa22 f303 	lsr.w	r3, r2, r3
 8004552:	4a09      	ldr	r2, [pc, #36]	; (8004578 <HAL_RCC_ClockConfig+0x1c4>)
 8004554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004556:	4b09      	ldr	r3, [pc, #36]	; (800457c <HAL_RCC_ClockConfig+0x1c8>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f7fe fa28 	bl	80029b0 <HAL_InitTick>

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40023c00 	.word	0x40023c00
 8004570:	40023800 	.word	0x40023800
 8004574:	08006f50 	.word	0x08006f50
 8004578:	20000010 	.word	0x20000010
 800457c:	20000014 	.word	0x20000014

08004580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004584:	b094      	sub	sp, #80	; 0x50
 8004586:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	647b      	str	r3, [r7, #68]	; 0x44
 800458c:	2300      	movs	r3, #0
 800458e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004590:	2300      	movs	r3, #0
 8004592:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004598:	4b79      	ldr	r3, [pc, #484]	; (8004780 <HAL_RCC_GetSysClockFreq+0x200>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f003 030c 	and.w	r3, r3, #12
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d00d      	beq.n	80045c0 <HAL_RCC_GetSysClockFreq+0x40>
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	f200 80e1 	bhi.w	800476c <HAL_RCC_GetSysClockFreq+0x1ec>
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <HAL_RCC_GetSysClockFreq+0x34>
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d003      	beq.n	80045ba <HAL_RCC_GetSysClockFreq+0x3a>
 80045b2:	e0db      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045b4:	4b73      	ldr	r3, [pc, #460]	; (8004784 <HAL_RCC_GetSysClockFreq+0x204>)
 80045b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80045b8:	e0db      	b.n	8004772 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045ba:	4b73      	ldr	r3, [pc, #460]	; (8004788 <HAL_RCC_GetSysClockFreq+0x208>)
 80045bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045be:	e0d8      	b.n	8004772 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045c0:	4b6f      	ldr	r3, [pc, #444]	; (8004780 <HAL_RCC_GetSysClockFreq+0x200>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045ca:	4b6d      	ldr	r3, [pc, #436]	; (8004780 <HAL_RCC_GetSysClockFreq+0x200>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d063      	beq.n	800469e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045d6:	4b6a      	ldr	r3, [pc, #424]	; (8004780 <HAL_RCC_GetSysClockFreq+0x200>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	099b      	lsrs	r3, r3, #6
 80045dc:	2200      	movs	r2, #0
 80045de:	63bb      	str	r3, [r7, #56]	; 0x38
 80045e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80045e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e8:	633b      	str	r3, [r7, #48]	; 0x30
 80045ea:	2300      	movs	r3, #0
 80045ec:	637b      	str	r3, [r7, #52]	; 0x34
 80045ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80045f2:	4622      	mov	r2, r4
 80045f4:	462b      	mov	r3, r5
 80045f6:	f04f 0000 	mov.w	r0, #0
 80045fa:	f04f 0100 	mov.w	r1, #0
 80045fe:	0159      	lsls	r1, r3, #5
 8004600:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004604:	0150      	lsls	r0, r2, #5
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	4621      	mov	r1, r4
 800460c:	1a51      	subs	r1, r2, r1
 800460e:	6139      	str	r1, [r7, #16]
 8004610:	4629      	mov	r1, r5
 8004612:	eb63 0301 	sbc.w	r3, r3, r1
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004624:	4659      	mov	r1, fp
 8004626:	018b      	lsls	r3, r1, #6
 8004628:	4651      	mov	r1, sl
 800462a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800462e:	4651      	mov	r1, sl
 8004630:	018a      	lsls	r2, r1, #6
 8004632:	4651      	mov	r1, sl
 8004634:	ebb2 0801 	subs.w	r8, r2, r1
 8004638:	4659      	mov	r1, fp
 800463a:	eb63 0901 	sbc.w	r9, r3, r1
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	f04f 0300 	mov.w	r3, #0
 8004646:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800464a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800464e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004652:	4690      	mov	r8, r2
 8004654:	4699      	mov	r9, r3
 8004656:	4623      	mov	r3, r4
 8004658:	eb18 0303 	adds.w	r3, r8, r3
 800465c:	60bb      	str	r3, [r7, #8]
 800465e:	462b      	mov	r3, r5
 8004660:	eb49 0303 	adc.w	r3, r9, r3
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	f04f 0200 	mov.w	r2, #0
 800466a:	f04f 0300 	mov.w	r3, #0
 800466e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004672:	4629      	mov	r1, r5
 8004674:	024b      	lsls	r3, r1, #9
 8004676:	4621      	mov	r1, r4
 8004678:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800467c:	4621      	mov	r1, r4
 800467e:	024a      	lsls	r2, r1, #9
 8004680:	4610      	mov	r0, r2
 8004682:	4619      	mov	r1, r3
 8004684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004686:	2200      	movs	r2, #0
 8004688:	62bb      	str	r3, [r7, #40]	; 0x28
 800468a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800468c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004690:	f7fc fa86 	bl	8000ba0 <__aeabi_uldivmod>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4613      	mov	r3, r2
 800469a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800469c:	e058      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800469e:	4b38      	ldr	r3, [pc, #224]	; (8004780 <HAL_RCC_GetSysClockFreq+0x200>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	099b      	lsrs	r3, r3, #6
 80046a4:	2200      	movs	r2, #0
 80046a6:	4618      	mov	r0, r3
 80046a8:	4611      	mov	r1, r2
 80046aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046ae:	623b      	str	r3, [r7, #32]
 80046b0:	2300      	movs	r3, #0
 80046b2:	627b      	str	r3, [r7, #36]	; 0x24
 80046b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046b8:	4642      	mov	r2, r8
 80046ba:	464b      	mov	r3, r9
 80046bc:	f04f 0000 	mov.w	r0, #0
 80046c0:	f04f 0100 	mov.w	r1, #0
 80046c4:	0159      	lsls	r1, r3, #5
 80046c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046ca:	0150      	lsls	r0, r2, #5
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	4641      	mov	r1, r8
 80046d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80046d6:	4649      	mov	r1, r9
 80046d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046f0:	ebb2 040a 	subs.w	r4, r2, sl
 80046f4:	eb63 050b 	sbc.w	r5, r3, fp
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	00eb      	lsls	r3, r5, #3
 8004702:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004706:	00e2      	lsls	r2, r4, #3
 8004708:	4614      	mov	r4, r2
 800470a:	461d      	mov	r5, r3
 800470c:	4643      	mov	r3, r8
 800470e:	18e3      	adds	r3, r4, r3
 8004710:	603b      	str	r3, [r7, #0]
 8004712:	464b      	mov	r3, r9
 8004714:	eb45 0303 	adc.w	r3, r5, r3
 8004718:	607b      	str	r3, [r7, #4]
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004726:	4629      	mov	r1, r5
 8004728:	028b      	lsls	r3, r1, #10
 800472a:	4621      	mov	r1, r4
 800472c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004730:	4621      	mov	r1, r4
 8004732:	028a      	lsls	r2, r1, #10
 8004734:	4610      	mov	r0, r2
 8004736:	4619      	mov	r1, r3
 8004738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800473a:	2200      	movs	r2, #0
 800473c:	61bb      	str	r3, [r7, #24]
 800473e:	61fa      	str	r2, [r7, #28]
 8004740:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004744:	f7fc fa2c 	bl	8000ba0 <__aeabi_uldivmod>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4613      	mov	r3, r2
 800474e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004750:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <HAL_RCC_GetSysClockFreq+0x200>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	0c1b      	lsrs	r3, r3, #16
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	3301      	adds	r3, #1
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004760:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004764:	fbb2 f3f3 	udiv	r3, r2, r3
 8004768:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800476a:	e002      	b.n	8004772 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800476c:	4b05      	ldr	r3, [pc, #20]	; (8004784 <HAL_RCC_GetSysClockFreq+0x204>)
 800476e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004774:	4618      	mov	r0, r3
 8004776:	3750      	adds	r7, #80	; 0x50
 8004778:	46bd      	mov	sp, r7
 800477a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800477e:	bf00      	nop
 8004780:	40023800 	.word	0x40023800
 8004784:	00f42400 	.word	0x00f42400
 8004788:	007a1200 	.word	0x007a1200

0800478c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004790:	4b03      	ldr	r3, [pc, #12]	; (80047a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004792:	681b      	ldr	r3, [r3, #0]
}
 8004794:	4618      	mov	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	20000010 	.word	0x20000010

080047a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047a8:	f7ff fff0 	bl	800478c <HAL_RCC_GetHCLKFreq>
 80047ac:	4602      	mov	r2, r0
 80047ae:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	0a9b      	lsrs	r3, r3, #10
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	4903      	ldr	r1, [pc, #12]	; (80047c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ba:	5ccb      	ldrb	r3, [r1, r3]
 80047bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40023800 	.word	0x40023800
 80047c8:	08006f60 	.word	0x08006f60

080047cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047d0:	f7ff ffdc 	bl	800478c <HAL_RCC_GetHCLKFreq>
 80047d4:	4602      	mov	r2, r0
 80047d6:	4b05      	ldr	r3, [pc, #20]	; (80047ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	0b5b      	lsrs	r3, r3, #13
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	4903      	ldr	r1, [pc, #12]	; (80047f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047e2:	5ccb      	ldrb	r3, [r1, r3]
 80047e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	40023800 	.word	0x40023800
 80047f0:	08006f60 	.word	0x08006f60

080047f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e041      	b.n	800488a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fd ff36 	bl	800268c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3304      	adds	r3, #4
 8004830:	4619      	mov	r1, r3
 8004832:	4610      	mov	r0, r2
 8004834:	f000 fc50 	bl	80050d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d001      	beq.n	80048ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e03c      	b.n	8004926 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a1e      	ldr	r2, [pc, #120]	; (8004934 <HAL_TIM_Base_Start+0xa0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d018      	beq.n	80048f0 <HAL_TIM_Base_Start+0x5c>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c6:	d013      	beq.n	80048f0 <HAL_TIM_Base_Start+0x5c>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a1a      	ldr	r2, [pc, #104]	; (8004938 <HAL_TIM_Base_Start+0xa4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00e      	beq.n	80048f0 <HAL_TIM_Base_Start+0x5c>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a19      	ldr	r2, [pc, #100]	; (800493c <HAL_TIM_Base_Start+0xa8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d009      	beq.n	80048f0 <HAL_TIM_Base_Start+0x5c>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a17      	ldr	r2, [pc, #92]	; (8004940 <HAL_TIM_Base_Start+0xac>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <HAL_TIM_Base_Start+0x5c>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a16      	ldr	r2, [pc, #88]	; (8004944 <HAL_TIM_Base_Start+0xb0>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d111      	bne.n	8004914 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b06      	cmp	r3, #6
 8004900:	d010      	beq.n	8004924 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 0201 	orr.w	r2, r2, #1
 8004910:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004912:	e007      	b.n	8004924 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0201 	orr.w	r2, r2, #1
 8004922:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	40010000 	.word	0x40010000
 8004938:	40000400 	.word	0x40000400
 800493c:	40000800 	.word	0x40000800
 8004940:	40000c00 	.word	0x40000c00
 8004944:	40014000 	.word	0x40014000

08004948 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e041      	b.n	80049de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d106      	bne.n	8004974 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f839 	bl	80049e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3304      	adds	r3, #4
 8004984:	4619      	mov	r1, r3
 8004986:	4610      	mov	r0, r2
 8004988:	f000 fba6 	bl	80050d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
	...

080049fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d109      	bne.n	8004a20 <HAL_TIM_PWM_Start+0x24>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	bf14      	ite	ne
 8004a18:	2301      	movne	r3, #1
 8004a1a:	2300      	moveq	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	e022      	b.n	8004a66 <HAL_TIM_PWM_Start+0x6a>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d109      	bne.n	8004a3a <HAL_TIM_PWM_Start+0x3e>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	bf14      	ite	ne
 8004a32:	2301      	movne	r3, #1
 8004a34:	2300      	moveq	r3, #0
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	e015      	b.n	8004a66 <HAL_TIM_PWM_Start+0x6a>
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d109      	bne.n	8004a54 <HAL_TIM_PWM_Start+0x58>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	bf14      	ite	ne
 8004a4c:	2301      	movne	r3, #1
 8004a4e:	2300      	moveq	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	e008      	b.n	8004a66 <HAL_TIM_PWM_Start+0x6a>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	bf14      	ite	ne
 8004a60:	2301      	movne	r3, #1
 8004a62:	2300      	moveq	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e068      	b.n	8004b40 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d104      	bne.n	8004a7e <HAL_TIM_PWM_Start+0x82>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a7c:	e013      	b.n	8004aa6 <HAL_TIM_PWM_Start+0xaa>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d104      	bne.n	8004a8e <HAL_TIM_PWM_Start+0x92>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a8c:	e00b      	b.n	8004aa6 <HAL_TIM_PWM_Start+0xaa>
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d104      	bne.n	8004a9e <HAL_TIM_PWM_Start+0xa2>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a9c:	e003      	b.n	8004aa6 <HAL_TIM_PWM_Start+0xaa>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	6839      	ldr	r1, [r7, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 fdb8 	bl	8005624 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a23      	ldr	r2, [pc, #140]	; (8004b48 <HAL_TIM_PWM_Start+0x14c>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d107      	bne.n	8004ace <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004acc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a1d      	ldr	r2, [pc, #116]	; (8004b48 <HAL_TIM_PWM_Start+0x14c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d018      	beq.n	8004b0a <HAL_TIM_PWM_Start+0x10e>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae0:	d013      	beq.n	8004b0a <HAL_TIM_PWM_Start+0x10e>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a19      	ldr	r2, [pc, #100]	; (8004b4c <HAL_TIM_PWM_Start+0x150>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00e      	beq.n	8004b0a <HAL_TIM_PWM_Start+0x10e>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a17      	ldr	r2, [pc, #92]	; (8004b50 <HAL_TIM_PWM_Start+0x154>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d009      	beq.n	8004b0a <HAL_TIM_PWM_Start+0x10e>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a16      	ldr	r2, [pc, #88]	; (8004b54 <HAL_TIM_PWM_Start+0x158>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d004      	beq.n	8004b0a <HAL_TIM_PWM_Start+0x10e>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a14      	ldr	r2, [pc, #80]	; (8004b58 <HAL_TIM_PWM_Start+0x15c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d111      	bne.n	8004b2e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2b06      	cmp	r3, #6
 8004b1a:	d010      	beq.n	8004b3e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0201 	orr.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2c:	e007      	b.n	8004b3e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f042 0201 	orr.w	r2, r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40010000 	.word	0x40010000
 8004b4c:	40000400 	.word	0x40000400
 8004b50:	40000800 	.word	0x40000800
 8004b54:	40000c00 	.word	0x40000c00
 8004b58:	40014000 	.word	0x40014000

08004b5c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e097      	b.n	8004ca0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d106      	bne.n	8004b8a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7fd fd3b 	bl	8002600 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6812      	ldr	r2, [r2, #0]
 8004b9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ba0:	f023 0307 	bic.w	r3, r3, #7
 8004ba4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	3304      	adds	r3, #4
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	f000 fa91 	bl	80050d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bde:	f023 0303 	bic.w	r3, r3, #3
 8004be2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	021b      	lsls	r3, r3, #8
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004bfc:	f023 030c 	bic.w	r3, r3, #12
 8004c00:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	021b      	lsls	r3, r3, #8
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	011a      	lsls	r2, r3, #4
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	031b      	lsls	r3, r3, #12
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004c3a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004c42:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cb8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cc0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cc8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004cd0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d110      	bne.n	8004cfa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d102      	bne.n	8004ce4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cde:	7b7b      	ldrb	r3, [r7, #13]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d001      	beq.n	8004ce8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e069      	b.n	8004dbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cf8:	e031      	b.n	8004d5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	d110      	bne.n	8004d22 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d00:	7bbb      	ldrb	r3, [r7, #14]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d102      	bne.n	8004d0c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d06:	7b3b      	ldrb	r3, [r7, #12]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d001      	beq.n	8004d10 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e055      	b.n	8004dbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d20:	e01d      	b.n	8004d5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d108      	bne.n	8004d3a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d28:	7bbb      	ldrb	r3, [r7, #14]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d105      	bne.n	8004d3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d2e:	7b7b      	ldrb	r3, [r7, #13]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d102      	bne.n	8004d3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d34:	7b3b      	ldrb	r3, [r7, #12]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d001      	beq.n	8004d3e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e03e      	b.n	8004dbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2202      	movs	r2, #2
 8004d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2202      	movs	r2, #2
 8004d4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2202      	movs	r2, #2
 8004d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2202      	movs	r2, #2
 8004d5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <HAL_TIM_Encoder_Start+0xc4>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d008      	beq.n	8004d7c <HAL_TIM_Encoder_Start+0xd4>
 8004d6a:	e00f      	b.n	8004d8c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2201      	movs	r2, #1
 8004d72:	2100      	movs	r1, #0
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fc55 	bl	8005624 <TIM_CCxChannelCmd>
      break;
 8004d7a:	e016      	b.n	8004daa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2201      	movs	r2, #1
 8004d82:	2104      	movs	r1, #4
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fc4d 	bl	8005624 <TIM_CCxChannelCmd>
      break;
 8004d8a:	e00e      	b.n	8004daa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2201      	movs	r2, #1
 8004d92:	2100      	movs	r1, #0
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 fc45 	bl	8005624 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	2104      	movs	r1, #4
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 fc3e 	bl	8005624 <TIM_CCxChannelCmd>
      break;
 8004da8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f042 0201 	orr.w	r2, r2, #1
 8004db8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d101      	bne.n	8004de2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dde:	2302      	movs	r3, #2
 8004de0:	e0ae      	b.n	8004f40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b0c      	cmp	r3, #12
 8004dee:	f200 809f 	bhi.w	8004f30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004df2:	a201      	add	r2, pc, #4	; (adr r2, 8004df8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df8:	08004e2d 	.word	0x08004e2d
 8004dfc:	08004f31 	.word	0x08004f31
 8004e00:	08004f31 	.word	0x08004f31
 8004e04:	08004f31 	.word	0x08004f31
 8004e08:	08004e6d 	.word	0x08004e6d
 8004e0c:	08004f31 	.word	0x08004f31
 8004e10:	08004f31 	.word	0x08004f31
 8004e14:	08004f31 	.word	0x08004f31
 8004e18:	08004eaf 	.word	0x08004eaf
 8004e1c:	08004f31 	.word	0x08004f31
 8004e20:	08004f31 	.word	0x08004f31
 8004e24:	08004f31 	.word	0x08004f31
 8004e28:	08004eef 	.word	0x08004eef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68b9      	ldr	r1, [r7, #8]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 f9d0 	bl	80051d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699a      	ldr	r2, [r3, #24]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0208 	orr.w	r2, r2, #8
 8004e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699a      	ldr	r2, [r3, #24]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0204 	bic.w	r2, r2, #4
 8004e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6999      	ldr	r1, [r3, #24]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	691a      	ldr	r2, [r3, #16]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	619a      	str	r2, [r3, #24]
      break;
 8004e6a:	e064      	b.n	8004f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68b9      	ldr	r1, [r7, #8]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 fa16 	bl	80052a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	699a      	ldr	r2, [r3, #24]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	699a      	ldr	r2, [r3, #24]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6999      	ldr	r1, [r3, #24]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	021a      	lsls	r2, r3, #8
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	619a      	str	r2, [r3, #24]
      break;
 8004eac:	e043      	b.n	8004f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 fa61 	bl	800537c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69da      	ldr	r2, [r3, #28]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f042 0208 	orr.w	r2, r2, #8
 8004ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69da      	ldr	r2, [r3, #28]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0204 	bic.w	r2, r2, #4
 8004ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	69d9      	ldr	r1, [r3, #28]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	61da      	str	r2, [r3, #28]
      break;
 8004eec:	e023      	b.n	8004f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68b9      	ldr	r1, [r7, #8]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 faab 	bl	8005450 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69da      	ldr	r2, [r3, #28]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69da      	ldr	r2, [r3, #28]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69d9      	ldr	r1, [r3, #28]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	021a      	lsls	r2, r3, #8
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	61da      	str	r2, [r3, #28]
      break;
 8004f2e:	e002      	b.n	8004f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	75fb      	strb	r3, [r7, #23]
      break;
 8004f34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d101      	bne.n	8004f64 <HAL_TIM_ConfigClockSource+0x1c>
 8004f60:	2302      	movs	r3, #2
 8004f62:	e0b4      	b.n	80050ce <HAL_TIM_ConfigClockSource+0x186>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f9c:	d03e      	beq.n	800501c <HAL_TIM_ConfigClockSource+0xd4>
 8004f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fa2:	f200 8087 	bhi.w	80050b4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004faa:	f000 8086 	beq.w	80050ba <HAL_TIM_ConfigClockSource+0x172>
 8004fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb2:	d87f      	bhi.n	80050b4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb4:	2b70      	cmp	r3, #112	; 0x70
 8004fb6:	d01a      	beq.n	8004fee <HAL_TIM_ConfigClockSource+0xa6>
 8004fb8:	2b70      	cmp	r3, #112	; 0x70
 8004fba:	d87b      	bhi.n	80050b4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fbc:	2b60      	cmp	r3, #96	; 0x60
 8004fbe:	d050      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x11a>
 8004fc0:	2b60      	cmp	r3, #96	; 0x60
 8004fc2:	d877      	bhi.n	80050b4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc4:	2b50      	cmp	r3, #80	; 0x50
 8004fc6:	d03c      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0xfa>
 8004fc8:	2b50      	cmp	r3, #80	; 0x50
 8004fca:	d873      	bhi.n	80050b4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fcc:	2b40      	cmp	r3, #64	; 0x40
 8004fce:	d058      	beq.n	8005082 <HAL_TIM_ConfigClockSource+0x13a>
 8004fd0:	2b40      	cmp	r3, #64	; 0x40
 8004fd2:	d86f      	bhi.n	80050b4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd4:	2b30      	cmp	r3, #48	; 0x30
 8004fd6:	d064      	beq.n	80050a2 <HAL_TIM_ConfigClockSource+0x15a>
 8004fd8:	2b30      	cmp	r3, #48	; 0x30
 8004fda:	d86b      	bhi.n	80050b4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fdc:	2b20      	cmp	r3, #32
 8004fde:	d060      	beq.n	80050a2 <HAL_TIM_ConfigClockSource+0x15a>
 8004fe0:	2b20      	cmp	r3, #32
 8004fe2:	d867      	bhi.n	80050b4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d05c      	beq.n	80050a2 <HAL_TIM_ConfigClockSource+0x15a>
 8004fe8:	2b10      	cmp	r3, #16
 8004fea:	d05a      	beq.n	80050a2 <HAL_TIM_ConfigClockSource+0x15a>
 8004fec:	e062      	b.n	80050b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6818      	ldr	r0, [r3, #0]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	6899      	ldr	r1, [r3, #8]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f000 faf1 	bl	80055e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005010:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	609a      	str	r2, [r3, #8]
      break;
 800501a:	e04f      	b.n	80050bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6818      	ldr	r0, [r3, #0]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	6899      	ldr	r1, [r3, #8]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f000 fada 	bl	80055e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689a      	ldr	r2, [r3, #8]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800503e:	609a      	str	r2, [r3, #8]
      break;
 8005040:	e03c      	b.n	80050bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6818      	ldr	r0, [r3, #0]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	6859      	ldr	r1, [r3, #4]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	461a      	mov	r2, r3
 8005050:	f000 fa4e 	bl	80054f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2150      	movs	r1, #80	; 0x50
 800505a:	4618      	mov	r0, r3
 800505c:	f000 faa7 	bl	80055ae <TIM_ITRx_SetConfig>
      break;
 8005060:	e02c      	b.n	80050bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6818      	ldr	r0, [r3, #0]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	6859      	ldr	r1, [r3, #4]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	461a      	mov	r2, r3
 8005070:	f000 fa6d 	bl	800554e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2160      	movs	r1, #96	; 0x60
 800507a:	4618      	mov	r0, r3
 800507c:	f000 fa97 	bl	80055ae <TIM_ITRx_SetConfig>
      break;
 8005080:	e01c      	b.n	80050bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6818      	ldr	r0, [r3, #0]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	6859      	ldr	r1, [r3, #4]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	461a      	mov	r2, r3
 8005090:	f000 fa2e 	bl	80054f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2140      	movs	r1, #64	; 0x40
 800509a:	4618      	mov	r0, r3
 800509c:	f000 fa87 	bl	80055ae <TIM_ITRx_SetConfig>
      break;
 80050a0:	e00c      	b.n	80050bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4619      	mov	r1, r3
 80050ac:	4610      	mov	r0, r2
 80050ae:	f000 fa7e 	bl	80055ae <TIM_ITRx_SetConfig>
      break;
 80050b2:	e003      	b.n	80050bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
      break;
 80050b8:	e000      	b.n	80050bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a34      	ldr	r2, [pc, #208]	; (80051bc <TIM_Base_SetConfig+0xe4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d00f      	beq.n	8005110 <TIM_Base_SetConfig+0x38>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f6:	d00b      	beq.n	8005110 <TIM_Base_SetConfig+0x38>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a31      	ldr	r2, [pc, #196]	; (80051c0 <TIM_Base_SetConfig+0xe8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d007      	beq.n	8005110 <TIM_Base_SetConfig+0x38>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a30      	ldr	r2, [pc, #192]	; (80051c4 <TIM_Base_SetConfig+0xec>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d003      	beq.n	8005110 <TIM_Base_SetConfig+0x38>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a2f      	ldr	r2, [pc, #188]	; (80051c8 <TIM_Base_SetConfig+0xf0>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d108      	bne.n	8005122 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	4313      	orrs	r3, r2
 8005120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a25      	ldr	r2, [pc, #148]	; (80051bc <TIM_Base_SetConfig+0xe4>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d01b      	beq.n	8005162 <TIM_Base_SetConfig+0x8a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005130:	d017      	beq.n	8005162 <TIM_Base_SetConfig+0x8a>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a22      	ldr	r2, [pc, #136]	; (80051c0 <TIM_Base_SetConfig+0xe8>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d013      	beq.n	8005162 <TIM_Base_SetConfig+0x8a>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a21      	ldr	r2, [pc, #132]	; (80051c4 <TIM_Base_SetConfig+0xec>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d00f      	beq.n	8005162 <TIM_Base_SetConfig+0x8a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a20      	ldr	r2, [pc, #128]	; (80051c8 <TIM_Base_SetConfig+0xf0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00b      	beq.n	8005162 <TIM_Base_SetConfig+0x8a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a1f      	ldr	r2, [pc, #124]	; (80051cc <TIM_Base_SetConfig+0xf4>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d007      	beq.n	8005162 <TIM_Base_SetConfig+0x8a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a1e      	ldr	r2, [pc, #120]	; (80051d0 <TIM_Base_SetConfig+0xf8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d003      	beq.n	8005162 <TIM_Base_SetConfig+0x8a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a1d      	ldr	r2, [pc, #116]	; (80051d4 <TIM_Base_SetConfig+0xfc>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d108      	bne.n	8005174 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4313      	orrs	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a08      	ldr	r2, [pc, #32]	; (80051bc <TIM_Base_SetConfig+0xe4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d103      	bne.n	80051a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	691a      	ldr	r2, [r3, #16]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	615a      	str	r2, [r3, #20]
}
 80051ae:	bf00      	nop
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	40010000 	.word	0x40010000
 80051c0:	40000400 	.word	0x40000400
 80051c4:	40000800 	.word	0x40000800
 80051c8:	40000c00 	.word	0x40000c00
 80051cc:	40014000 	.word	0x40014000
 80051d0:	40014400 	.word	0x40014400
 80051d4:	40014800 	.word	0x40014800

080051d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	f023 0201 	bic.w	r2, r3, #1
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0303 	bic.w	r3, r3, #3
 800520e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f023 0302 	bic.w	r3, r3, #2
 8005220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a1c      	ldr	r2, [pc, #112]	; (80052a0 <TIM_OC1_SetConfig+0xc8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d10c      	bne.n	800524e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f023 0308 	bic.w	r3, r3, #8
 800523a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f023 0304 	bic.w	r3, r3, #4
 800524c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a13      	ldr	r2, [pc, #76]	; (80052a0 <TIM_OC1_SetConfig+0xc8>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d111      	bne.n	800527a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800525c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4313      	orrs	r3, r2
 800526e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	621a      	str	r2, [r3, #32]
}
 8005294:	bf00      	nop
 8005296:	371c      	adds	r7, #28
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	40010000 	.word	0x40010000

080052a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	f023 0210 	bic.w	r2, r3, #16
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	021b      	lsls	r3, r3, #8
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f023 0320 	bic.w	r3, r3, #32
 80052ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a1e      	ldr	r2, [pc, #120]	; (8005378 <TIM_OC2_SetConfig+0xd4>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d10d      	bne.n	8005320 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800530a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	011b      	lsls	r3, r3, #4
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	4313      	orrs	r3, r2
 8005316:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800531e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a15      	ldr	r2, [pc, #84]	; (8005378 <TIM_OC2_SetConfig+0xd4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d113      	bne.n	8005350 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800532e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005336:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	621a      	str	r2, [r3, #32]
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40010000 	.word	0x40010000

0800537c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0303 	bic.w	r3, r3, #3
 80053b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	021b      	lsls	r3, r3, #8
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a1d      	ldr	r2, [pc, #116]	; (800544c <TIM_OC3_SetConfig+0xd0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d10d      	bne.n	80053f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	021b      	lsls	r3, r3, #8
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a14      	ldr	r2, [pc, #80]	; (800544c <TIM_OC3_SetConfig+0xd0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d113      	bne.n	8005426 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800540c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	621a      	str	r2, [r3, #32]
}
 8005440:	bf00      	nop
 8005442:	371c      	adds	r7, #28
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	40010000 	.word	0x40010000

08005450 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800547e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	4313      	orrs	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800549a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	031b      	lsls	r3, r3, #12
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a10      	ldr	r2, [pc, #64]	; (80054ec <TIM_OC4_SetConfig+0x9c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d109      	bne.n	80054c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	019b      	lsls	r3, r3, #6
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	621a      	str	r2, [r3, #32]
}
 80054de:	bf00      	nop
 80054e0:	371c      	adds	r7, #28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	40010000 	.word	0x40010000

080054f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	f023 0201 	bic.w	r2, r3, #1
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800551a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	011b      	lsls	r3, r3, #4
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	4313      	orrs	r3, r2
 8005524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f023 030a 	bic.w	r3, r3, #10
 800552c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4313      	orrs	r3, r2
 8005534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	621a      	str	r2, [r3, #32]
}
 8005542:	bf00      	nop
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800554e:	b480      	push	{r7}
 8005550:	b087      	sub	sp, #28
 8005552:	af00      	add	r7, sp, #0
 8005554:	60f8      	str	r0, [r7, #12]
 8005556:	60b9      	str	r1, [r7, #8]
 8005558:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	f023 0210 	bic.w	r2, r3, #16
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005578:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	031b      	lsls	r3, r3, #12
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4313      	orrs	r3, r2
 8005582:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800558a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	621a      	str	r2, [r3, #32]
}
 80055a2:	bf00      	nop
 80055a4:	371c      	adds	r7, #28
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b085      	sub	sp, #20
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f043 0307 	orr.w	r3, r3, #7
 80055d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	609a      	str	r2, [r3, #8]
}
 80055d8:	bf00      	nop
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
 80055f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	021a      	lsls	r2, r3, #8
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	431a      	orrs	r2, r3
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4313      	orrs	r3, r2
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	609a      	str	r2, [r3, #8]
}
 8005618:	bf00      	nop
 800561a:	371c      	adds	r7, #28
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f003 031f 	and.w	r3, r3, #31
 8005636:	2201      	movs	r2, #1
 8005638:	fa02 f303 	lsl.w	r3, r2, r3
 800563c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a1a      	ldr	r2, [r3, #32]
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	43db      	mvns	r3, r3
 8005646:	401a      	ands	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a1a      	ldr	r2, [r3, #32]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f003 031f 	and.w	r3, r3, #31
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	fa01 f303 	lsl.w	r3, r1, r3
 800565c:	431a      	orrs	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	621a      	str	r2, [r3, #32]
}
 8005662:	bf00      	nop
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
	...

08005670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005684:	2302      	movs	r3, #2
 8005686:	e050      	b.n	800572a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a1c      	ldr	r2, [pc, #112]	; (8005738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d018      	beq.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d4:	d013      	beq.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a18      	ldr	r2, [pc, #96]	; (800573c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d00e      	beq.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a16      	ldr	r2, [pc, #88]	; (8005740 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d009      	beq.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a15      	ldr	r2, [pc, #84]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d004      	beq.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a13      	ldr	r2, [pc, #76]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d10c      	bne.n	8005718 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005704:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	4313      	orrs	r3, r2
 800570e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	40010000 	.word	0x40010000
 800573c:	40000400 	.word	0x40000400
 8005740:	40000800 	.word	0x40000800
 8005744:	40000c00 	.word	0x40000c00
 8005748:	40014000 	.word	0x40014000

0800574c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e03f      	b.n	80057de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d106      	bne.n	8005778 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7fc fffc 	bl	8002770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2224      	movs	r2, #36	; 0x24
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800578e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f829 	bl	80057e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	695a      	ldr	r2, [r3, #20]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68da      	ldr	r2, [r3, #12]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
	...

080057e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057ec:	b0c0      	sub	sp, #256	; 0x100
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005804:	68d9      	ldr	r1, [r3, #12]
 8005806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	ea40 0301 	orr.w	r3, r0, r1
 8005810:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	431a      	orrs	r2, r3
 8005820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	431a      	orrs	r2, r3
 8005828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	4313      	orrs	r3, r2
 8005830:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005840:	f021 010c 	bic.w	r1, r1, #12
 8005844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800584e:	430b      	orrs	r3, r1
 8005850:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800585e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005862:	6999      	ldr	r1, [r3, #24]
 8005864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	ea40 0301 	orr.w	r3, r0, r1
 800586e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	4b8f      	ldr	r3, [pc, #572]	; (8005ab4 <UART_SetConfig+0x2cc>)
 8005878:	429a      	cmp	r2, r3
 800587a:	d005      	beq.n	8005888 <UART_SetConfig+0xa0>
 800587c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	4b8d      	ldr	r3, [pc, #564]	; (8005ab8 <UART_SetConfig+0x2d0>)
 8005884:	429a      	cmp	r2, r3
 8005886:	d104      	bne.n	8005892 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005888:	f7fe ffa0 	bl	80047cc <HAL_RCC_GetPCLK2Freq>
 800588c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005890:	e003      	b.n	800589a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005892:	f7fe ff87 	bl	80047a4 <HAL_RCC_GetPCLK1Freq>
 8005896:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800589a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a4:	f040 810c 	bne.w	8005ac0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058ac:	2200      	movs	r2, #0
 80058ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80058b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80058ba:	4622      	mov	r2, r4
 80058bc:	462b      	mov	r3, r5
 80058be:	1891      	adds	r1, r2, r2
 80058c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80058c2:	415b      	adcs	r3, r3
 80058c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80058ca:	4621      	mov	r1, r4
 80058cc:	eb12 0801 	adds.w	r8, r2, r1
 80058d0:	4629      	mov	r1, r5
 80058d2:	eb43 0901 	adc.w	r9, r3, r1
 80058d6:	f04f 0200 	mov.w	r2, #0
 80058da:	f04f 0300 	mov.w	r3, #0
 80058de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058ea:	4690      	mov	r8, r2
 80058ec:	4699      	mov	r9, r3
 80058ee:	4623      	mov	r3, r4
 80058f0:	eb18 0303 	adds.w	r3, r8, r3
 80058f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058f8:	462b      	mov	r3, r5
 80058fa:	eb49 0303 	adc.w	r3, r9, r3
 80058fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800590e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005912:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005916:	460b      	mov	r3, r1
 8005918:	18db      	adds	r3, r3, r3
 800591a:	653b      	str	r3, [r7, #80]	; 0x50
 800591c:	4613      	mov	r3, r2
 800591e:	eb42 0303 	adc.w	r3, r2, r3
 8005922:	657b      	str	r3, [r7, #84]	; 0x54
 8005924:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005928:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800592c:	f7fb f938 	bl	8000ba0 <__aeabi_uldivmod>
 8005930:	4602      	mov	r2, r0
 8005932:	460b      	mov	r3, r1
 8005934:	4b61      	ldr	r3, [pc, #388]	; (8005abc <UART_SetConfig+0x2d4>)
 8005936:	fba3 2302 	umull	r2, r3, r3, r2
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	011c      	lsls	r4, r3, #4
 800593e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005942:	2200      	movs	r2, #0
 8005944:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005948:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800594c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005950:	4642      	mov	r2, r8
 8005952:	464b      	mov	r3, r9
 8005954:	1891      	adds	r1, r2, r2
 8005956:	64b9      	str	r1, [r7, #72]	; 0x48
 8005958:	415b      	adcs	r3, r3
 800595a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800595c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005960:	4641      	mov	r1, r8
 8005962:	eb12 0a01 	adds.w	sl, r2, r1
 8005966:	4649      	mov	r1, r9
 8005968:	eb43 0b01 	adc.w	fp, r3, r1
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005978:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800597c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005980:	4692      	mov	sl, r2
 8005982:	469b      	mov	fp, r3
 8005984:	4643      	mov	r3, r8
 8005986:	eb1a 0303 	adds.w	r3, sl, r3
 800598a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800598e:	464b      	mov	r3, r9
 8005990:	eb4b 0303 	adc.w	r3, fp, r3
 8005994:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80059a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80059ac:	460b      	mov	r3, r1
 80059ae:	18db      	adds	r3, r3, r3
 80059b0:	643b      	str	r3, [r7, #64]	; 0x40
 80059b2:	4613      	mov	r3, r2
 80059b4:	eb42 0303 	adc.w	r3, r2, r3
 80059b8:	647b      	str	r3, [r7, #68]	; 0x44
 80059ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80059c2:	f7fb f8ed 	bl	8000ba0 <__aeabi_uldivmod>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	4611      	mov	r1, r2
 80059cc:	4b3b      	ldr	r3, [pc, #236]	; (8005abc <UART_SetConfig+0x2d4>)
 80059ce:	fba3 2301 	umull	r2, r3, r3, r1
 80059d2:	095b      	lsrs	r3, r3, #5
 80059d4:	2264      	movs	r2, #100	; 0x64
 80059d6:	fb02 f303 	mul.w	r3, r2, r3
 80059da:	1acb      	subs	r3, r1, r3
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80059e2:	4b36      	ldr	r3, [pc, #216]	; (8005abc <UART_SetConfig+0x2d4>)
 80059e4:	fba3 2302 	umull	r2, r3, r3, r2
 80059e8:	095b      	lsrs	r3, r3, #5
 80059ea:	005b      	lsls	r3, r3, #1
 80059ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059f0:	441c      	add	r4, r3
 80059f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059f6:	2200      	movs	r2, #0
 80059f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a04:	4642      	mov	r2, r8
 8005a06:	464b      	mov	r3, r9
 8005a08:	1891      	adds	r1, r2, r2
 8005a0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a0c:	415b      	adcs	r3, r3
 8005a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a14:	4641      	mov	r1, r8
 8005a16:	1851      	adds	r1, r2, r1
 8005a18:	6339      	str	r1, [r7, #48]	; 0x30
 8005a1a:	4649      	mov	r1, r9
 8005a1c:	414b      	adcs	r3, r1
 8005a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a20:	f04f 0200 	mov.w	r2, #0
 8005a24:	f04f 0300 	mov.w	r3, #0
 8005a28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a2c:	4659      	mov	r1, fp
 8005a2e:	00cb      	lsls	r3, r1, #3
 8005a30:	4651      	mov	r1, sl
 8005a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a36:	4651      	mov	r1, sl
 8005a38:	00ca      	lsls	r2, r1, #3
 8005a3a:	4610      	mov	r0, r2
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4603      	mov	r3, r0
 8005a40:	4642      	mov	r2, r8
 8005a42:	189b      	adds	r3, r3, r2
 8005a44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a48:	464b      	mov	r3, r9
 8005a4a:	460a      	mov	r2, r1
 8005a4c:	eb42 0303 	adc.w	r3, r2, r3
 8005a50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a68:	460b      	mov	r3, r1
 8005a6a:	18db      	adds	r3, r3, r3
 8005a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a6e:	4613      	mov	r3, r2
 8005a70:	eb42 0303 	adc.w	r3, r2, r3
 8005a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a7e:	f7fb f88f 	bl	8000ba0 <__aeabi_uldivmod>
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	4b0d      	ldr	r3, [pc, #52]	; (8005abc <UART_SetConfig+0x2d4>)
 8005a88:	fba3 1302 	umull	r1, r3, r3, r2
 8005a8c:	095b      	lsrs	r3, r3, #5
 8005a8e:	2164      	movs	r1, #100	; 0x64
 8005a90:	fb01 f303 	mul.w	r3, r1, r3
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	3332      	adds	r3, #50	; 0x32
 8005a9a:	4a08      	ldr	r2, [pc, #32]	; (8005abc <UART_SetConfig+0x2d4>)
 8005a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa0:	095b      	lsrs	r3, r3, #5
 8005aa2:	f003 0207 	and.w	r2, r3, #7
 8005aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4422      	add	r2, r4
 8005aae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ab0:	e105      	b.n	8005cbe <UART_SetConfig+0x4d6>
 8005ab2:	bf00      	nop
 8005ab4:	40011000 	.word	0x40011000
 8005ab8:	40011400 	.word	0x40011400
 8005abc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005aca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ace:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ad2:	4642      	mov	r2, r8
 8005ad4:	464b      	mov	r3, r9
 8005ad6:	1891      	adds	r1, r2, r2
 8005ad8:	6239      	str	r1, [r7, #32]
 8005ada:	415b      	adcs	r3, r3
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ade:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ae2:	4641      	mov	r1, r8
 8005ae4:	1854      	adds	r4, r2, r1
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	eb43 0501 	adc.w	r5, r3, r1
 8005aec:	f04f 0200 	mov.w	r2, #0
 8005af0:	f04f 0300 	mov.w	r3, #0
 8005af4:	00eb      	lsls	r3, r5, #3
 8005af6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005afa:	00e2      	lsls	r2, r4, #3
 8005afc:	4614      	mov	r4, r2
 8005afe:	461d      	mov	r5, r3
 8005b00:	4643      	mov	r3, r8
 8005b02:	18e3      	adds	r3, r4, r3
 8005b04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b08:	464b      	mov	r3, r9
 8005b0a:	eb45 0303 	adc.w	r3, r5, r3
 8005b0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b22:	f04f 0200 	mov.w	r2, #0
 8005b26:	f04f 0300 	mov.w	r3, #0
 8005b2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b2e:	4629      	mov	r1, r5
 8005b30:	008b      	lsls	r3, r1, #2
 8005b32:	4621      	mov	r1, r4
 8005b34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b38:	4621      	mov	r1, r4
 8005b3a:	008a      	lsls	r2, r1, #2
 8005b3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b40:	f7fb f82e 	bl	8000ba0 <__aeabi_uldivmod>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4b60      	ldr	r3, [pc, #384]	; (8005ccc <UART_SetConfig+0x4e4>)
 8005b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	011c      	lsls	r4, r3, #4
 8005b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b56:	2200      	movs	r2, #0
 8005b58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b64:	4642      	mov	r2, r8
 8005b66:	464b      	mov	r3, r9
 8005b68:	1891      	adds	r1, r2, r2
 8005b6a:	61b9      	str	r1, [r7, #24]
 8005b6c:	415b      	adcs	r3, r3
 8005b6e:	61fb      	str	r3, [r7, #28]
 8005b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b74:	4641      	mov	r1, r8
 8005b76:	1851      	adds	r1, r2, r1
 8005b78:	6139      	str	r1, [r7, #16]
 8005b7a:	4649      	mov	r1, r9
 8005b7c:	414b      	adcs	r3, r1
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	f04f 0200 	mov.w	r2, #0
 8005b84:	f04f 0300 	mov.w	r3, #0
 8005b88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b8c:	4659      	mov	r1, fp
 8005b8e:	00cb      	lsls	r3, r1, #3
 8005b90:	4651      	mov	r1, sl
 8005b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b96:	4651      	mov	r1, sl
 8005b98:	00ca      	lsls	r2, r1, #3
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	4642      	mov	r2, r8
 8005ba2:	189b      	adds	r3, r3, r2
 8005ba4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ba8:	464b      	mov	r3, r9
 8005baa:	460a      	mov	r2, r1
 8005bac:	eb42 0303 	adc.w	r3, r2, r3
 8005bb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bbe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005bc0:	f04f 0200 	mov.w	r2, #0
 8005bc4:	f04f 0300 	mov.w	r3, #0
 8005bc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005bcc:	4649      	mov	r1, r9
 8005bce:	008b      	lsls	r3, r1, #2
 8005bd0:	4641      	mov	r1, r8
 8005bd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bd6:	4641      	mov	r1, r8
 8005bd8:	008a      	lsls	r2, r1, #2
 8005bda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005bde:	f7fa ffdf 	bl	8000ba0 <__aeabi_uldivmod>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4b39      	ldr	r3, [pc, #228]	; (8005ccc <UART_SetConfig+0x4e4>)
 8005be8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bec:	095b      	lsrs	r3, r3, #5
 8005bee:	2164      	movs	r1, #100	; 0x64
 8005bf0:	fb01 f303 	mul.w	r3, r1, r3
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	3332      	adds	r3, #50	; 0x32
 8005bfa:	4a34      	ldr	r2, [pc, #208]	; (8005ccc <UART_SetConfig+0x4e4>)
 8005bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8005c00:	095b      	lsrs	r3, r3, #5
 8005c02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c06:	441c      	add	r4, r3
 8005c08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	673b      	str	r3, [r7, #112]	; 0x70
 8005c10:	677a      	str	r2, [r7, #116]	; 0x74
 8005c12:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c16:	4642      	mov	r2, r8
 8005c18:	464b      	mov	r3, r9
 8005c1a:	1891      	adds	r1, r2, r2
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	415b      	adcs	r3, r3
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c26:	4641      	mov	r1, r8
 8005c28:	1851      	adds	r1, r2, r1
 8005c2a:	6039      	str	r1, [r7, #0]
 8005c2c:	4649      	mov	r1, r9
 8005c2e:	414b      	adcs	r3, r1
 8005c30:	607b      	str	r3, [r7, #4]
 8005c32:	f04f 0200 	mov.w	r2, #0
 8005c36:	f04f 0300 	mov.w	r3, #0
 8005c3a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c3e:	4659      	mov	r1, fp
 8005c40:	00cb      	lsls	r3, r1, #3
 8005c42:	4651      	mov	r1, sl
 8005c44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c48:	4651      	mov	r1, sl
 8005c4a:	00ca      	lsls	r2, r1, #3
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4603      	mov	r3, r0
 8005c52:	4642      	mov	r2, r8
 8005c54:	189b      	adds	r3, r3, r2
 8005c56:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c58:	464b      	mov	r3, r9
 8005c5a:	460a      	mov	r2, r1
 8005c5c:	eb42 0303 	adc.w	r3, r2, r3
 8005c60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	663b      	str	r3, [r7, #96]	; 0x60
 8005c6c:	667a      	str	r2, [r7, #100]	; 0x64
 8005c6e:	f04f 0200 	mov.w	r2, #0
 8005c72:	f04f 0300 	mov.w	r3, #0
 8005c76:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c7a:	4649      	mov	r1, r9
 8005c7c:	008b      	lsls	r3, r1, #2
 8005c7e:	4641      	mov	r1, r8
 8005c80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c84:	4641      	mov	r1, r8
 8005c86:	008a      	lsls	r2, r1, #2
 8005c88:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c8c:	f7fa ff88 	bl	8000ba0 <__aeabi_uldivmod>
 8005c90:	4602      	mov	r2, r0
 8005c92:	460b      	mov	r3, r1
 8005c94:	4b0d      	ldr	r3, [pc, #52]	; (8005ccc <UART_SetConfig+0x4e4>)
 8005c96:	fba3 1302 	umull	r1, r3, r3, r2
 8005c9a:	095b      	lsrs	r3, r3, #5
 8005c9c:	2164      	movs	r1, #100	; 0x64
 8005c9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	011b      	lsls	r3, r3, #4
 8005ca6:	3332      	adds	r3, #50	; 0x32
 8005ca8:	4a08      	ldr	r2, [pc, #32]	; (8005ccc <UART_SetConfig+0x4e4>)
 8005caa:	fba2 2303 	umull	r2, r3, r2, r3
 8005cae:	095b      	lsrs	r3, r3, #5
 8005cb0:	f003 020f 	and.w	r2, r3, #15
 8005cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4422      	add	r2, r4
 8005cbc:	609a      	str	r2, [r3, #8]
}
 8005cbe:	bf00      	nop
 8005cc0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cca:	bf00      	nop
 8005ccc:	51eb851f 	.word	0x51eb851f

08005cd0 <calloc>:
 8005cd0:	4b02      	ldr	r3, [pc, #8]	; (8005cdc <calloc+0xc>)
 8005cd2:	460a      	mov	r2, r1
 8005cd4:	4601      	mov	r1, r0
 8005cd6:	6818      	ldr	r0, [r3, #0]
 8005cd8:	f000 b852 	b.w	8005d80 <_calloc_r>
 8005cdc:	2000001c 	.word	0x2000001c

08005ce0 <__errno>:
 8005ce0:	4b01      	ldr	r3, [pc, #4]	; (8005ce8 <__errno+0x8>)
 8005ce2:	6818      	ldr	r0, [r3, #0]
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	2000001c 	.word	0x2000001c

08005cec <__libc_init_array>:
 8005cec:	b570      	push	{r4, r5, r6, lr}
 8005cee:	4d0d      	ldr	r5, [pc, #52]	; (8005d24 <__libc_init_array+0x38>)
 8005cf0:	4c0d      	ldr	r4, [pc, #52]	; (8005d28 <__libc_init_array+0x3c>)
 8005cf2:	1b64      	subs	r4, r4, r5
 8005cf4:	10a4      	asrs	r4, r4, #2
 8005cf6:	2600      	movs	r6, #0
 8005cf8:	42a6      	cmp	r6, r4
 8005cfa:	d109      	bne.n	8005d10 <__libc_init_array+0x24>
 8005cfc:	4d0b      	ldr	r5, [pc, #44]	; (8005d2c <__libc_init_array+0x40>)
 8005cfe:	4c0c      	ldr	r4, [pc, #48]	; (8005d30 <__libc_init_array+0x44>)
 8005d00:	f001 f918 	bl	8006f34 <_init>
 8005d04:	1b64      	subs	r4, r4, r5
 8005d06:	10a4      	asrs	r4, r4, #2
 8005d08:	2600      	movs	r6, #0
 8005d0a:	42a6      	cmp	r6, r4
 8005d0c:	d105      	bne.n	8005d1a <__libc_init_array+0x2e>
 8005d0e:	bd70      	pop	{r4, r5, r6, pc}
 8005d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d14:	4798      	blx	r3
 8005d16:	3601      	adds	r6, #1
 8005d18:	e7ee      	b.n	8005cf8 <__libc_init_array+0xc>
 8005d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d1e:	4798      	blx	r3
 8005d20:	3601      	adds	r6, #1
 8005d22:	e7f2      	b.n	8005d0a <__libc_init_array+0x1e>
 8005d24:	08006fa8 	.word	0x08006fa8
 8005d28:	08006fa8 	.word	0x08006fa8
 8005d2c:	08006fa8 	.word	0x08006fa8
 8005d30:	08006fac 	.word	0x08006fac

08005d34 <malloc>:
 8005d34:	4b02      	ldr	r3, [pc, #8]	; (8005d40 <malloc+0xc>)
 8005d36:	4601      	mov	r1, r0
 8005d38:	6818      	ldr	r0, [r3, #0]
 8005d3a:	f000 b8a3 	b.w	8005e84 <_malloc_r>
 8005d3e:	bf00      	nop
 8005d40:	2000001c 	.word	0x2000001c

08005d44 <free>:
 8005d44:	4b02      	ldr	r3, [pc, #8]	; (8005d50 <free+0xc>)
 8005d46:	4601      	mov	r1, r0
 8005d48:	6818      	ldr	r0, [r3, #0]
 8005d4a:	f000 b82f 	b.w	8005dac <_free_r>
 8005d4e:	bf00      	nop
 8005d50:	2000001c 	.word	0x2000001c

08005d54 <memcpy>:
 8005d54:	440a      	add	r2, r1
 8005d56:	4291      	cmp	r1, r2
 8005d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d5c:	d100      	bne.n	8005d60 <memcpy+0xc>
 8005d5e:	4770      	bx	lr
 8005d60:	b510      	push	{r4, lr}
 8005d62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d6a:	4291      	cmp	r1, r2
 8005d6c:	d1f9      	bne.n	8005d62 <memcpy+0xe>
 8005d6e:	bd10      	pop	{r4, pc}

08005d70 <memset>:
 8005d70:	4402      	add	r2, r0
 8005d72:	4603      	mov	r3, r0
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d100      	bne.n	8005d7a <memset+0xa>
 8005d78:	4770      	bx	lr
 8005d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d7e:	e7f9      	b.n	8005d74 <memset+0x4>

08005d80 <_calloc_r>:
 8005d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d82:	fba1 2402 	umull	r2, r4, r1, r2
 8005d86:	b94c      	cbnz	r4, 8005d9c <_calloc_r+0x1c>
 8005d88:	4611      	mov	r1, r2
 8005d8a:	9201      	str	r2, [sp, #4]
 8005d8c:	f000 f87a 	bl	8005e84 <_malloc_r>
 8005d90:	9a01      	ldr	r2, [sp, #4]
 8005d92:	4605      	mov	r5, r0
 8005d94:	b930      	cbnz	r0, 8005da4 <_calloc_r+0x24>
 8005d96:	4628      	mov	r0, r5
 8005d98:	b003      	add	sp, #12
 8005d9a:	bd30      	pop	{r4, r5, pc}
 8005d9c:	220c      	movs	r2, #12
 8005d9e:	6002      	str	r2, [r0, #0]
 8005da0:	2500      	movs	r5, #0
 8005da2:	e7f8      	b.n	8005d96 <_calloc_r+0x16>
 8005da4:	4621      	mov	r1, r4
 8005da6:	f7ff ffe3 	bl	8005d70 <memset>
 8005daa:	e7f4      	b.n	8005d96 <_calloc_r+0x16>

08005dac <_free_r>:
 8005dac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dae:	2900      	cmp	r1, #0
 8005db0:	d044      	beq.n	8005e3c <_free_r+0x90>
 8005db2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005db6:	9001      	str	r0, [sp, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f1a1 0404 	sub.w	r4, r1, #4
 8005dbe:	bfb8      	it	lt
 8005dc0:	18e4      	addlt	r4, r4, r3
 8005dc2:	f000 f8e3 	bl	8005f8c <__malloc_lock>
 8005dc6:	4a1e      	ldr	r2, [pc, #120]	; (8005e40 <_free_r+0x94>)
 8005dc8:	9801      	ldr	r0, [sp, #4]
 8005dca:	6813      	ldr	r3, [r2, #0]
 8005dcc:	b933      	cbnz	r3, 8005ddc <_free_r+0x30>
 8005dce:	6063      	str	r3, [r4, #4]
 8005dd0:	6014      	str	r4, [r2, #0]
 8005dd2:	b003      	add	sp, #12
 8005dd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005dd8:	f000 b8de 	b.w	8005f98 <__malloc_unlock>
 8005ddc:	42a3      	cmp	r3, r4
 8005dde:	d908      	bls.n	8005df2 <_free_r+0x46>
 8005de0:	6825      	ldr	r5, [r4, #0]
 8005de2:	1961      	adds	r1, r4, r5
 8005de4:	428b      	cmp	r3, r1
 8005de6:	bf01      	itttt	eq
 8005de8:	6819      	ldreq	r1, [r3, #0]
 8005dea:	685b      	ldreq	r3, [r3, #4]
 8005dec:	1949      	addeq	r1, r1, r5
 8005dee:	6021      	streq	r1, [r4, #0]
 8005df0:	e7ed      	b.n	8005dce <_free_r+0x22>
 8005df2:	461a      	mov	r2, r3
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	b10b      	cbz	r3, 8005dfc <_free_r+0x50>
 8005df8:	42a3      	cmp	r3, r4
 8005dfa:	d9fa      	bls.n	8005df2 <_free_r+0x46>
 8005dfc:	6811      	ldr	r1, [r2, #0]
 8005dfe:	1855      	adds	r5, r2, r1
 8005e00:	42a5      	cmp	r5, r4
 8005e02:	d10b      	bne.n	8005e1c <_free_r+0x70>
 8005e04:	6824      	ldr	r4, [r4, #0]
 8005e06:	4421      	add	r1, r4
 8005e08:	1854      	adds	r4, r2, r1
 8005e0a:	42a3      	cmp	r3, r4
 8005e0c:	6011      	str	r1, [r2, #0]
 8005e0e:	d1e0      	bne.n	8005dd2 <_free_r+0x26>
 8005e10:	681c      	ldr	r4, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	6053      	str	r3, [r2, #4]
 8005e16:	4421      	add	r1, r4
 8005e18:	6011      	str	r1, [r2, #0]
 8005e1a:	e7da      	b.n	8005dd2 <_free_r+0x26>
 8005e1c:	d902      	bls.n	8005e24 <_free_r+0x78>
 8005e1e:	230c      	movs	r3, #12
 8005e20:	6003      	str	r3, [r0, #0]
 8005e22:	e7d6      	b.n	8005dd2 <_free_r+0x26>
 8005e24:	6825      	ldr	r5, [r4, #0]
 8005e26:	1961      	adds	r1, r4, r5
 8005e28:	428b      	cmp	r3, r1
 8005e2a:	bf04      	itt	eq
 8005e2c:	6819      	ldreq	r1, [r3, #0]
 8005e2e:	685b      	ldreq	r3, [r3, #4]
 8005e30:	6063      	str	r3, [r4, #4]
 8005e32:	bf04      	itt	eq
 8005e34:	1949      	addeq	r1, r1, r5
 8005e36:	6021      	streq	r1, [r4, #0]
 8005e38:	6054      	str	r4, [r2, #4]
 8005e3a:	e7ca      	b.n	8005dd2 <_free_r+0x26>
 8005e3c:	b003      	add	sp, #12
 8005e3e:	bd30      	pop	{r4, r5, pc}
 8005e40:	200002c8 	.word	0x200002c8

08005e44 <sbrk_aligned>:
 8005e44:	b570      	push	{r4, r5, r6, lr}
 8005e46:	4e0e      	ldr	r6, [pc, #56]	; (8005e80 <sbrk_aligned+0x3c>)
 8005e48:	460c      	mov	r4, r1
 8005e4a:	6831      	ldr	r1, [r6, #0]
 8005e4c:	4605      	mov	r5, r0
 8005e4e:	b911      	cbnz	r1, 8005e56 <sbrk_aligned+0x12>
 8005e50:	f000 f88c 	bl	8005f6c <_sbrk_r>
 8005e54:	6030      	str	r0, [r6, #0]
 8005e56:	4621      	mov	r1, r4
 8005e58:	4628      	mov	r0, r5
 8005e5a:	f000 f887 	bl	8005f6c <_sbrk_r>
 8005e5e:	1c43      	adds	r3, r0, #1
 8005e60:	d00a      	beq.n	8005e78 <sbrk_aligned+0x34>
 8005e62:	1cc4      	adds	r4, r0, #3
 8005e64:	f024 0403 	bic.w	r4, r4, #3
 8005e68:	42a0      	cmp	r0, r4
 8005e6a:	d007      	beq.n	8005e7c <sbrk_aligned+0x38>
 8005e6c:	1a21      	subs	r1, r4, r0
 8005e6e:	4628      	mov	r0, r5
 8005e70:	f000 f87c 	bl	8005f6c <_sbrk_r>
 8005e74:	3001      	adds	r0, #1
 8005e76:	d101      	bne.n	8005e7c <sbrk_aligned+0x38>
 8005e78:	f04f 34ff 	mov.w	r4, #4294967295
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	bd70      	pop	{r4, r5, r6, pc}
 8005e80:	200002cc 	.word	0x200002cc

08005e84 <_malloc_r>:
 8005e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e88:	1ccd      	adds	r5, r1, #3
 8005e8a:	f025 0503 	bic.w	r5, r5, #3
 8005e8e:	3508      	adds	r5, #8
 8005e90:	2d0c      	cmp	r5, #12
 8005e92:	bf38      	it	cc
 8005e94:	250c      	movcc	r5, #12
 8005e96:	2d00      	cmp	r5, #0
 8005e98:	4607      	mov	r7, r0
 8005e9a:	db01      	blt.n	8005ea0 <_malloc_r+0x1c>
 8005e9c:	42a9      	cmp	r1, r5
 8005e9e:	d905      	bls.n	8005eac <_malloc_r+0x28>
 8005ea0:	230c      	movs	r3, #12
 8005ea2:	603b      	str	r3, [r7, #0]
 8005ea4:	2600      	movs	r6, #0
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eac:	4e2e      	ldr	r6, [pc, #184]	; (8005f68 <_malloc_r+0xe4>)
 8005eae:	f000 f86d 	bl	8005f8c <__malloc_lock>
 8005eb2:	6833      	ldr	r3, [r6, #0]
 8005eb4:	461c      	mov	r4, r3
 8005eb6:	bb34      	cbnz	r4, 8005f06 <_malloc_r+0x82>
 8005eb8:	4629      	mov	r1, r5
 8005eba:	4638      	mov	r0, r7
 8005ebc:	f7ff ffc2 	bl	8005e44 <sbrk_aligned>
 8005ec0:	1c43      	adds	r3, r0, #1
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	d14d      	bne.n	8005f62 <_malloc_r+0xde>
 8005ec6:	6834      	ldr	r4, [r6, #0]
 8005ec8:	4626      	mov	r6, r4
 8005eca:	2e00      	cmp	r6, #0
 8005ecc:	d140      	bne.n	8005f50 <_malloc_r+0xcc>
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	4631      	mov	r1, r6
 8005ed2:	4638      	mov	r0, r7
 8005ed4:	eb04 0803 	add.w	r8, r4, r3
 8005ed8:	f000 f848 	bl	8005f6c <_sbrk_r>
 8005edc:	4580      	cmp	r8, r0
 8005ede:	d13a      	bne.n	8005f56 <_malloc_r+0xd2>
 8005ee0:	6821      	ldr	r1, [r4, #0]
 8005ee2:	3503      	adds	r5, #3
 8005ee4:	1a6d      	subs	r5, r5, r1
 8005ee6:	f025 0503 	bic.w	r5, r5, #3
 8005eea:	3508      	adds	r5, #8
 8005eec:	2d0c      	cmp	r5, #12
 8005eee:	bf38      	it	cc
 8005ef0:	250c      	movcc	r5, #12
 8005ef2:	4629      	mov	r1, r5
 8005ef4:	4638      	mov	r0, r7
 8005ef6:	f7ff ffa5 	bl	8005e44 <sbrk_aligned>
 8005efa:	3001      	adds	r0, #1
 8005efc:	d02b      	beq.n	8005f56 <_malloc_r+0xd2>
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	442b      	add	r3, r5
 8005f02:	6023      	str	r3, [r4, #0]
 8005f04:	e00e      	b.n	8005f24 <_malloc_r+0xa0>
 8005f06:	6822      	ldr	r2, [r4, #0]
 8005f08:	1b52      	subs	r2, r2, r5
 8005f0a:	d41e      	bmi.n	8005f4a <_malloc_r+0xc6>
 8005f0c:	2a0b      	cmp	r2, #11
 8005f0e:	d916      	bls.n	8005f3e <_malloc_r+0xba>
 8005f10:	1961      	adds	r1, r4, r5
 8005f12:	42a3      	cmp	r3, r4
 8005f14:	6025      	str	r5, [r4, #0]
 8005f16:	bf18      	it	ne
 8005f18:	6059      	strne	r1, [r3, #4]
 8005f1a:	6863      	ldr	r3, [r4, #4]
 8005f1c:	bf08      	it	eq
 8005f1e:	6031      	streq	r1, [r6, #0]
 8005f20:	5162      	str	r2, [r4, r5]
 8005f22:	604b      	str	r3, [r1, #4]
 8005f24:	4638      	mov	r0, r7
 8005f26:	f104 060b 	add.w	r6, r4, #11
 8005f2a:	f000 f835 	bl	8005f98 <__malloc_unlock>
 8005f2e:	f026 0607 	bic.w	r6, r6, #7
 8005f32:	1d23      	adds	r3, r4, #4
 8005f34:	1af2      	subs	r2, r6, r3
 8005f36:	d0b6      	beq.n	8005ea6 <_malloc_r+0x22>
 8005f38:	1b9b      	subs	r3, r3, r6
 8005f3a:	50a3      	str	r3, [r4, r2]
 8005f3c:	e7b3      	b.n	8005ea6 <_malloc_r+0x22>
 8005f3e:	6862      	ldr	r2, [r4, #4]
 8005f40:	42a3      	cmp	r3, r4
 8005f42:	bf0c      	ite	eq
 8005f44:	6032      	streq	r2, [r6, #0]
 8005f46:	605a      	strne	r2, [r3, #4]
 8005f48:	e7ec      	b.n	8005f24 <_malloc_r+0xa0>
 8005f4a:	4623      	mov	r3, r4
 8005f4c:	6864      	ldr	r4, [r4, #4]
 8005f4e:	e7b2      	b.n	8005eb6 <_malloc_r+0x32>
 8005f50:	4634      	mov	r4, r6
 8005f52:	6876      	ldr	r6, [r6, #4]
 8005f54:	e7b9      	b.n	8005eca <_malloc_r+0x46>
 8005f56:	230c      	movs	r3, #12
 8005f58:	603b      	str	r3, [r7, #0]
 8005f5a:	4638      	mov	r0, r7
 8005f5c:	f000 f81c 	bl	8005f98 <__malloc_unlock>
 8005f60:	e7a1      	b.n	8005ea6 <_malloc_r+0x22>
 8005f62:	6025      	str	r5, [r4, #0]
 8005f64:	e7de      	b.n	8005f24 <_malloc_r+0xa0>
 8005f66:	bf00      	nop
 8005f68:	200002c8 	.word	0x200002c8

08005f6c <_sbrk_r>:
 8005f6c:	b538      	push	{r3, r4, r5, lr}
 8005f6e:	4d06      	ldr	r5, [pc, #24]	; (8005f88 <_sbrk_r+0x1c>)
 8005f70:	2300      	movs	r3, #0
 8005f72:	4604      	mov	r4, r0
 8005f74:	4608      	mov	r0, r1
 8005f76:	602b      	str	r3, [r5, #0]
 8005f78:	f7fc fc86 	bl	8002888 <_sbrk>
 8005f7c:	1c43      	adds	r3, r0, #1
 8005f7e:	d102      	bne.n	8005f86 <_sbrk_r+0x1a>
 8005f80:	682b      	ldr	r3, [r5, #0]
 8005f82:	b103      	cbz	r3, 8005f86 <_sbrk_r+0x1a>
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	bd38      	pop	{r3, r4, r5, pc}
 8005f88:	200002d0 	.word	0x200002d0

08005f8c <__malloc_lock>:
 8005f8c:	4801      	ldr	r0, [pc, #4]	; (8005f94 <__malloc_lock+0x8>)
 8005f8e:	f000 b809 	b.w	8005fa4 <__retarget_lock_acquire_recursive>
 8005f92:	bf00      	nop
 8005f94:	200002d4 	.word	0x200002d4

08005f98 <__malloc_unlock>:
 8005f98:	4801      	ldr	r0, [pc, #4]	; (8005fa0 <__malloc_unlock+0x8>)
 8005f9a:	f000 b804 	b.w	8005fa6 <__retarget_lock_release_recursive>
 8005f9e:	bf00      	nop
 8005fa0:	200002d4 	.word	0x200002d4

08005fa4 <__retarget_lock_acquire_recursive>:
 8005fa4:	4770      	bx	lr

08005fa6 <__retarget_lock_release_recursive>:
 8005fa6:	4770      	bx	lr

08005fa8 <floor>:
 8005fa8:	ec51 0b10 	vmov	r0, r1, d0
 8005fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005fb4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005fb8:	2e13      	cmp	r6, #19
 8005fba:	ee10 5a10 	vmov	r5, s0
 8005fbe:	ee10 8a10 	vmov	r8, s0
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	dc32      	bgt.n	800602c <floor+0x84>
 8005fc6:	2e00      	cmp	r6, #0
 8005fc8:	da14      	bge.n	8005ff4 <floor+0x4c>
 8005fca:	a333      	add	r3, pc, #204	; (adr r3, 8006098 <floor+0xf0>)
 8005fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd0:	f7fa f908 	bl	80001e4 <__adddf3>
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f7fa fd4a 	bl	8000a70 <__aeabi_dcmpgt>
 8005fdc:	b138      	cbz	r0, 8005fee <floor+0x46>
 8005fde:	2c00      	cmp	r4, #0
 8005fe0:	da57      	bge.n	8006092 <floor+0xea>
 8005fe2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005fe6:	431d      	orrs	r5, r3
 8005fe8:	d001      	beq.n	8005fee <floor+0x46>
 8005fea:	4c2d      	ldr	r4, [pc, #180]	; (80060a0 <floor+0xf8>)
 8005fec:	2500      	movs	r5, #0
 8005fee:	4621      	mov	r1, r4
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	e025      	b.n	8006040 <floor+0x98>
 8005ff4:	4f2b      	ldr	r7, [pc, #172]	; (80060a4 <floor+0xfc>)
 8005ff6:	4137      	asrs	r7, r6
 8005ff8:	ea01 0307 	and.w	r3, r1, r7
 8005ffc:	4303      	orrs	r3, r0
 8005ffe:	d01f      	beq.n	8006040 <floor+0x98>
 8006000:	a325      	add	r3, pc, #148	; (adr r3, 8006098 <floor+0xf0>)
 8006002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006006:	f7fa f8ed 	bl	80001e4 <__adddf3>
 800600a:	2200      	movs	r2, #0
 800600c:	2300      	movs	r3, #0
 800600e:	f7fa fd2f 	bl	8000a70 <__aeabi_dcmpgt>
 8006012:	2800      	cmp	r0, #0
 8006014:	d0eb      	beq.n	8005fee <floor+0x46>
 8006016:	2c00      	cmp	r4, #0
 8006018:	bfbe      	ittt	lt
 800601a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800601e:	fa43 f606 	asrlt.w	r6, r3, r6
 8006022:	19a4      	addlt	r4, r4, r6
 8006024:	ea24 0407 	bic.w	r4, r4, r7
 8006028:	2500      	movs	r5, #0
 800602a:	e7e0      	b.n	8005fee <floor+0x46>
 800602c:	2e33      	cmp	r6, #51	; 0x33
 800602e:	dd0b      	ble.n	8006048 <floor+0xa0>
 8006030:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006034:	d104      	bne.n	8006040 <floor+0x98>
 8006036:	ee10 2a10 	vmov	r2, s0
 800603a:	460b      	mov	r3, r1
 800603c:	f7fa f8d2 	bl	80001e4 <__adddf3>
 8006040:	ec41 0b10 	vmov	d0, r0, r1
 8006044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006048:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800604c:	f04f 33ff 	mov.w	r3, #4294967295
 8006050:	fa23 f707 	lsr.w	r7, r3, r7
 8006054:	4207      	tst	r7, r0
 8006056:	d0f3      	beq.n	8006040 <floor+0x98>
 8006058:	a30f      	add	r3, pc, #60	; (adr r3, 8006098 <floor+0xf0>)
 800605a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605e:	f7fa f8c1 	bl	80001e4 <__adddf3>
 8006062:	2200      	movs	r2, #0
 8006064:	2300      	movs	r3, #0
 8006066:	f7fa fd03 	bl	8000a70 <__aeabi_dcmpgt>
 800606a:	2800      	cmp	r0, #0
 800606c:	d0bf      	beq.n	8005fee <floor+0x46>
 800606e:	2c00      	cmp	r4, #0
 8006070:	da02      	bge.n	8006078 <floor+0xd0>
 8006072:	2e14      	cmp	r6, #20
 8006074:	d103      	bne.n	800607e <floor+0xd6>
 8006076:	3401      	adds	r4, #1
 8006078:	ea25 0507 	bic.w	r5, r5, r7
 800607c:	e7b7      	b.n	8005fee <floor+0x46>
 800607e:	2301      	movs	r3, #1
 8006080:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006084:	fa03 f606 	lsl.w	r6, r3, r6
 8006088:	4435      	add	r5, r6
 800608a:	4545      	cmp	r5, r8
 800608c:	bf38      	it	cc
 800608e:	18e4      	addcc	r4, r4, r3
 8006090:	e7f2      	b.n	8006078 <floor+0xd0>
 8006092:	2500      	movs	r5, #0
 8006094:	462c      	mov	r4, r5
 8006096:	e7aa      	b.n	8005fee <floor+0x46>
 8006098:	8800759c 	.word	0x8800759c
 800609c:	7e37e43c 	.word	0x7e37e43c
 80060a0:	bff00000 	.word	0xbff00000
 80060a4:	000fffff 	.word	0x000fffff

080060a8 <pow>:
 80060a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060aa:	ed2d 8b02 	vpush	{d8}
 80060ae:	eeb0 8a40 	vmov.f32	s16, s0
 80060b2:	eef0 8a60 	vmov.f32	s17, s1
 80060b6:	ec55 4b11 	vmov	r4, r5, d1
 80060ba:	f000 f891 	bl	80061e0 <__ieee754_pow>
 80060be:	4622      	mov	r2, r4
 80060c0:	462b      	mov	r3, r5
 80060c2:	4620      	mov	r0, r4
 80060c4:	4629      	mov	r1, r5
 80060c6:	ec57 6b10 	vmov	r6, r7, d0
 80060ca:	f7fa fcdb 	bl	8000a84 <__aeabi_dcmpun>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	d13b      	bne.n	800614a <pow+0xa2>
 80060d2:	ec51 0b18 	vmov	r0, r1, d8
 80060d6:	2200      	movs	r2, #0
 80060d8:	2300      	movs	r3, #0
 80060da:	f7fa fca1 	bl	8000a20 <__aeabi_dcmpeq>
 80060de:	b1b8      	cbz	r0, 8006110 <pow+0x68>
 80060e0:	2200      	movs	r2, #0
 80060e2:	2300      	movs	r3, #0
 80060e4:	4620      	mov	r0, r4
 80060e6:	4629      	mov	r1, r5
 80060e8:	f7fa fc9a 	bl	8000a20 <__aeabi_dcmpeq>
 80060ec:	2800      	cmp	r0, #0
 80060ee:	d146      	bne.n	800617e <pow+0xd6>
 80060f0:	ec45 4b10 	vmov	d0, r4, r5
 80060f4:	f000 fe8d 	bl	8006e12 <finite>
 80060f8:	b338      	cbz	r0, 800614a <pow+0xa2>
 80060fa:	2200      	movs	r2, #0
 80060fc:	2300      	movs	r3, #0
 80060fe:	4620      	mov	r0, r4
 8006100:	4629      	mov	r1, r5
 8006102:	f7fa fc97 	bl	8000a34 <__aeabi_dcmplt>
 8006106:	b300      	cbz	r0, 800614a <pow+0xa2>
 8006108:	f7ff fdea 	bl	8005ce0 <__errno>
 800610c:	2322      	movs	r3, #34	; 0x22
 800610e:	e01b      	b.n	8006148 <pow+0xa0>
 8006110:	ec47 6b10 	vmov	d0, r6, r7
 8006114:	f000 fe7d 	bl	8006e12 <finite>
 8006118:	b9e0      	cbnz	r0, 8006154 <pow+0xac>
 800611a:	eeb0 0a48 	vmov.f32	s0, s16
 800611e:	eef0 0a68 	vmov.f32	s1, s17
 8006122:	f000 fe76 	bl	8006e12 <finite>
 8006126:	b1a8      	cbz	r0, 8006154 <pow+0xac>
 8006128:	ec45 4b10 	vmov	d0, r4, r5
 800612c:	f000 fe71 	bl	8006e12 <finite>
 8006130:	b180      	cbz	r0, 8006154 <pow+0xac>
 8006132:	4632      	mov	r2, r6
 8006134:	463b      	mov	r3, r7
 8006136:	4630      	mov	r0, r6
 8006138:	4639      	mov	r1, r7
 800613a:	f7fa fca3 	bl	8000a84 <__aeabi_dcmpun>
 800613e:	2800      	cmp	r0, #0
 8006140:	d0e2      	beq.n	8006108 <pow+0x60>
 8006142:	f7ff fdcd 	bl	8005ce0 <__errno>
 8006146:	2321      	movs	r3, #33	; 0x21
 8006148:	6003      	str	r3, [r0, #0]
 800614a:	ecbd 8b02 	vpop	{d8}
 800614e:	ec47 6b10 	vmov	d0, r6, r7
 8006152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006154:	2200      	movs	r2, #0
 8006156:	2300      	movs	r3, #0
 8006158:	4630      	mov	r0, r6
 800615a:	4639      	mov	r1, r7
 800615c:	f7fa fc60 	bl	8000a20 <__aeabi_dcmpeq>
 8006160:	2800      	cmp	r0, #0
 8006162:	d0f2      	beq.n	800614a <pow+0xa2>
 8006164:	eeb0 0a48 	vmov.f32	s0, s16
 8006168:	eef0 0a68 	vmov.f32	s1, s17
 800616c:	f000 fe51 	bl	8006e12 <finite>
 8006170:	2800      	cmp	r0, #0
 8006172:	d0ea      	beq.n	800614a <pow+0xa2>
 8006174:	ec45 4b10 	vmov	d0, r4, r5
 8006178:	f000 fe4b 	bl	8006e12 <finite>
 800617c:	e7c3      	b.n	8006106 <pow+0x5e>
 800617e:	4f01      	ldr	r7, [pc, #4]	; (8006184 <pow+0xdc>)
 8006180:	2600      	movs	r6, #0
 8006182:	e7e2      	b.n	800614a <pow+0xa2>
 8006184:	3ff00000 	.word	0x3ff00000

08006188 <sqrt>:
 8006188:	b538      	push	{r3, r4, r5, lr}
 800618a:	ed2d 8b02 	vpush	{d8}
 800618e:	ec55 4b10 	vmov	r4, r5, d0
 8006192:	f000 fd53 	bl	8006c3c <__ieee754_sqrt>
 8006196:	4622      	mov	r2, r4
 8006198:	462b      	mov	r3, r5
 800619a:	4620      	mov	r0, r4
 800619c:	4629      	mov	r1, r5
 800619e:	eeb0 8a40 	vmov.f32	s16, s0
 80061a2:	eef0 8a60 	vmov.f32	s17, s1
 80061a6:	f7fa fc6d 	bl	8000a84 <__aeabi_dcmpun>
 80061aa:	b990      	cbnz	r0, 80061d2 <sqrt+0x4a>
 80061ac:	2200      	movs	r2, #0
 80061ae:	2300      	movs	r3, #0
 80061b0:	4620      	mov	r0, r4
 80061b2:	4629      	mov	r1, r5
 80061b4:	f7fa fc3e 	bl	8000a34 <__aeabi_dcmplt>
 80061b8:	b158      	cbz	r0, 80061d2 <sqrt+0x4a>
 80061ba:	f7ff fd91 	bl	8005ce0 <__errno>
 80061be:	2321      	movs	r3, #33	; 0x21
 80061c0:	6003      	str	r3, [r0, #0]
 80061c2:	2200      	movs	r2, #0
 80061c4:	2300      	movs	r3, #0
 80061c6:	4610      	mov	r0, r2
 80061c8:	4619      	mov	r1, r3
 80061ca:	f7fa faeb 	bl	80007a4 <__aeabi_ddiv>
 80061ce:	ec41 0b18 	vmov	d8, r0, r1
 80061d2:	eeb0 0a48 	vmov.f32	s0, s16
 80061d6:	eef0 0a68 	vmov.f32	s1, s17
 80061da:	ecbd 8b02 	vpop	{d8}
 80061de:	bd38      	pop	{r3, r4, r5, pc}

080061e0 <__ieee754_pow>:
 80061e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e4:	ed2d 8b06 	vpush	{d8-d10}
 80061e8:	b089      	sub	sp, #36	; 0x24
 80061ea:	ed8d 1b00 	vstr	d1, [sp]
 80061ee:	e9dd 2900 	ldrd	r2, r9, [sp]
 80061f2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80061f6:	ea58 0102 	orrs.w	r1, r8, r2
 80061fa:	ec57 6b10 	vmov	r6, r7, d0
 80061fe:	d115      	bne.n	800622c <__ieee754_pow+0x4c>
 8006200:	19b3      	adds	r3, r6, r6
 8006202:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8006206:	4152      	adcs	r2, r2
 8006208:	4299      	cmp	r1, r3
 800620a:	4b89      	ldr	r3, [pc, #548]	; (8006430 <__ieee754_pow+0x250>)
 800620c:	4193      	sbcs	r3, r2
 800620e:	f080 84d2 	bcs.w	8006bb6 <__ieee754_pow+0x9d6>
 8006212:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006216:	4630      	mov	r0, r6
 8006218:	4639      	mov	r1, r7
 800621a:	f7f9 ffe3 	bl	80001e4 <__adddf3>
 800621e:	ec41 0b10 	vmov	d0, r0, r1
 8006222:	b009      	add	sp, #36	; 0x24
 8006224:	ecbd 8b06 	vpop	{d8-d10}
 8006228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800622c:	4b81      	ldr	r3, [pc, #516]	; (8006434 <__ieee754_pow+0x254>)
 800622e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006232:	429c      	cmp	r4, r3
 8006234:	ee10 aa10 	vmov	sl, s0
 8006238:	463d      	mov	r5, r7
 800623a:	dc06      	bgt.n	800624a <__ieee754_pow+0x6a>
 800623c:	d101      	bne.n	8006242 <__ieee754_pow+0x62>
 800623e:	2e00      	cmp	r6, #0
 8006240:	d1e7      	bne.n	8006212 <__ieee754_pow+0x32>
 8006242:	4598      	cmp	r8, r3
 8006244:	dc01      	bgt.n	800624a <__ieee754_pow+0x6a>
 8006246:	d10f      	bne.n	8006268 <__ieee754_pow+0x88>
 8006248:	b172      	cbz	r2, 8006268 <__ieee754_pow+0x88>
 800624a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800624e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006252:	ea55 050a 	orrs.w	r5, r5, sl
 8006256:	d1dc      	bne.n	8006212 <__ieee754_pow+0x32>
 8006258:	e9dd 3200 	ldrd	r3, r2, [sp]
 800625c:	18db      	adds	r3, r3, r3
 800625e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006262:	4152      	adcs	r2, r2
 8006264:	429d      	cmp	r5, r3
 8006266:	e7d0      	b.n	800620a <__ieee754_pow+0x2a>
 8006268:	2d00      	cmp	r5, #0
 800626a:	da3b      	bge.n	80062e4 <__ieee754_pow+0x104>
 800626c:	4b72      	ldr	r3, [pc, #456]	; (8006438 <__ieee754_pow+0x258>)
 800626e:	4598      	cmp	r8, r3
 8006270:	dc51      	bgt.n	8006316 <__ieee754_pow+0x136>
 8006272:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006276:	4598      	cmp	r8, r3
 8006278:	f340 84ac 	ble.w	8006bd4 <__ieee754_pow+0x9f4>
 800627c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006280:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006284:	2b14      	cmp	r3, #20
 8006286:	dd0f      	ble.n	80062a8 <__ieee754_pow+0xc8>
 8006288:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800628c:	fa22 f103 	lsr.w	r1, r2, r3
 8006290:	fa01 f303 	lsl.w	r3, r1, r3
 8006294:	4293      	cmp	r3, r2
 8006296:	f040 849d 	bne.w	8006bd4 <__ieee754_pow+0x9f4>
 800629a:	f001 0101 	and.w	r1, r1, #1
 800629e:	f1c1 0302 	rsb	r3, r1, #2
 80062a2:	9304      	str	r3, [sp, #16]
 80062a4:	b182      	cbz	r2, 80062c8 <__ieee754_pow+0xe8>
 80062a6:	e05f      	b.n	8006368 <__ieee754_pow+0x188>
 80062a8:	2a00      	cmp	r2, #0
 80062aa:	d15b      	bne.n	8006364 <__ieee754_pow+0x184>
 80062ac:	f1c3 0314 	rsb	r3, r3, #20
 80062b0:	fa48 f103 	asr.w	r1, r8, r3
 80062b4:	fa01 f303 	lsl.w	r3, r1, r3
 80062b8:	4543      	cmp	r3, r8
 80062ba:	f040 8488 	bne.w	8006bce <__ieee754_pow+0x9ee>
 80062be:	f001 0101 	and.w	r1, r1, #1
 80062c2:	f1c1 0302 	rsb	r3, r1, #2
 80062c6:	9304      	str	r3, [sp, #16]
 80062c8:	4b5c      	ldr	r3, [pc, #368]	; (800643c <__ieee754_pow+0x25c>)
 80062ca:	4598      	cmp	r8, r3
 80062cc:	d132      	bne.n	8006334 <__ieee754_pow+0x154>
 80062ce:	f1b9 0f00 	cmp.w	r9, #0
 80062d2:	f280 8478 	bge.w	8006bc6 <__ieee754_pow+0x9e6>
 80062d6:	4959      	ldr	r1, [pc, #356]	; (800643c <__ieee754_pow+0x25c>)
 80062d8:	4632      	mov	r2, r6
 80062da:	463b      	mov	r3, r7
 80062dc:	2000      	movs	r0, #0
 80062de:	f7fa fa61 	bl	80007a4 <__aeabi_ddiv>
 80062e2:	e79c      	b.n	800621e <__ieee754_pow+0x3e>
 80062e4:	2300      	movs	r3, #0
 80062e6:	9304      	str	r3, [sp, #16]
 80062e8:	2a00      	cmp	r2, #0
 80062ea:	d13d      	bne.n	8006368 <__ieee754_pow+0x188>
 80062ec:	4b51      	ldr	r3, [pc, #324]	; (8006434 <__ieee754_pow+0x254>)
 80062ee:	4598      	cmp	r8, r3
 80062f0:	d1ea      	bne.n	80062c8 <__ieee754_pow+0xe8>
 80062f2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80062f6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80062fa:	ea53 030a 	orrs.w	r3, r3, sl
 80062fe:	f000 845a 	beq.w	8006bb6 <__ieee754_pow+0x9d6>
 8006302:	4b4f      	ldr	r3, [pc, #316]	; (8006440 <__ieee754_pow+0x260>)
 8006304:	429c      	cmp	r4, r3
 8006306:	dd08      	ble.n	800631a <__ieee754_pow+0x13a>
 8006308:	f1b9 0f00 	cmp.w	r9, #0
 800630c:	f2c0 8457 	blt.w	8006bbe <__ieee754_pow+0x9de>
 8006310:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006314:	e783      	b.n	800621e <__ieee754_pow+0x3e>
 8006316:	2302      	movs	r3, #2
 8006318:	e7e5      	b.n	80062e6 <__ieee754_pow+0x106>
 800631a:	f1b9 0f00 	cmp.w	r9, #0
 800631e:	f04f 0000 	mov.w	r0, #0
 8006322:	f04f 0100 	mov.w	r1, #0
 8006326:	f6bf af7a 	bge.w	800621e <__ieee754_pow+0x3e>
 800632a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800632e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006332:	e774      	b.n	800621e <__ieee754_pow+0x3e>
 8006334:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006338:	d106      	bne.n	8006348 <__ieee754_pow+0x168>
 800633a:	4632      	mov	r2, r6
 800633c:	463b      	mov	r3, r7
 800633e:	4630      	mov	r0, r6
 8006340:	4639      	mov	r1, r7
 8006342:	f7fa f905 	bl	8000550 <__aeabi_dmul>
 8006346:	e76a      	b.n	800621e <__ieee754_pow+0x3e>
 8006348:	4b3e      	ldr	r3, [pc, #248]	; (8006444 <__ieee754_pow+0x264>)
 800634a:	4599      	cmp	r9, r3
 800634c:	d10c      	bne.n	8006368 <__ieee754_pow+0x188>
 800634e:	2d00      	cmp	r5, #0
 8006350:	db0a      	blt.n	8006368 <__ieee754_pow+0x188>
 8006352:	ec47 6b10 	vmov	d0, r6, r7
 8006356:	b009      	add	sp, #36	; 0x24
 8006358:	ecbd 8b06 	vpop	{d8-d10}
 800635c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006360:	f000 bc6c 	b.w	8006c3c <__ieee754_sqrt>
 8006364:	2300      	movs	r3, #0
 8006366:	9304      	str	r3, [sp, #16]
 8006368:	ec47 6b10 	vmov	d0, r6, r7
 800636c:	f000 fd48 	bl	8006e00 <fabs>
 8006370:	ec51 0b10 	vmov	r0, r1, d0
 8006374:	f1ba 0f00 	cmp.w	sl, #0
 8006378:	d129      	bne.n	80063ce <__ieee754_pow+0x1ee>
 800637a:	b124      	cbz	r4, 8006386 <__ieee754_pow+0x1a6>
 800637c:	4b2f      	ldr	r3, [pc, #188]	; (800643c <__ieee754_pow+0x25c>)
 800637e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006382:	429a      	cmp	r2, r3
 8006384:	d123      	bne.n	80063ce <__ieee754_pow+0x1ee>
 8006386:	f1b9 0f00 	cmp.w	r9, #0
 800638a:	da05      	bge.n	8006398 <__ieee754_pow+0x1b8>
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	2000      	movs	r0, #0
 8006392:	492a      	ldr	r1, [pc, #168]	; (800643c <__ieee754_pow+0x25c>)
 8006394:	f7fa fa06 	bl	80007a4 <__aeabi_ddiv>
 8006398:	2d00      	cmp	r5, #0
 800639a:	f6bf af40 	bge.w	800621e <__ieee754_pow+0x3e>
 800639e:	9b04      	ldr	r3, [sp, #16]
 80063a0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80063a4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80063a8:	4323      	orrs	r3, r4
 80063aa:	d108      	bne.n	80063be <__ieee754_pow+0x1de>
 80063ac:	4602      	mov	r2, r0
 80063ae:	460b      	mov	r3, r1
 80063b0:	4610      	mov	r0, r2
 80063b2:	4619      	mov	r1, r3
 80063b4:	f7f9 ff14 	bl	80001e0 <__aeabi_dsub>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	e78f      	b.n	80062de <__ieee754_pow+0xfe>
 80063be:	9b04      	ldr	r3, [sp, #16]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	f47f af2c 	bne.w	800621e <__ieee754_pow+0x3e>
 80063c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063ca:	4619      	mov	r1, r3
 80063cc:	e727      	b.n	800621e <__ieee754_pow+0x3e>
 80063ce:	0feb      	lsrs	r3, r5, #31
 80063d0:	3b01      	subs	r3, #1
 80063d2:	9306      	str	r3, [sp, #24]
 80063d4:	9a06      	ldr	r2, [sp, #24]
 80063d6:	9b04      	ldr	r3, [sp, #16]
 80063d8:	4313      	orrs	r3, r2
 80063da:	d102      	bne.n	80063e2 <__ieee754_pow+0x202>
 80063dc:	4632      	mov	r2, r6
 80063de:	463b      	mov	r3, r7
 80063e0:	e7e6      	b.n	80063b0 <__ieee754_pow+0x1d0>
 80063e2:	4b19      	ldr	r3, [pc, #100]	; (8006448 <__ieee754_pow+0x268>)
 80063e4:	4598      	cmp	r8, r3
 80063e6:	f340 80fb 	ble.w	80065e0 <__ieee754_pow+0x400>
 80063ea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80063ee:	4598      	cmp	r8, r3
 80063f0:	4b13      	ldr	r3, [pc, #76]	; (8006440 <__ieee754_pow+0x260>)
 80063f2:	dd0c      	ble.n	800640e <__ieee754_pow+0x22e>
 80063f4:	429c      	cmp	r4, r3
 80063f6:	dc0f      	bgt.n	8006418 <__ieee754_pow+0x238>
 80063f8:	f1b9 0f00 	cmp.w	r9, #0
 80063fc:	da0f      	bge.n	800641e <__ieee754_pow+0x23e>
 80063fe:	2000      	movs	r0, #0
 8006400:	b009      	add	sp, #36	; 0x24
 8006402:	ecbd 8b06 	vpop	{d8-d10}
 8006406:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800640a:	f000 bcf0 	b.w	8006dee <__math_oflow>
 800640e:	429c      	cmp	r4, r3
 8006410:	dbf2      	blt.n	80063f8 <__ieee754_pow+0x218>
 8006412:	4b0a      	ldr	r3, [pc, #40]	; (800643c <__ieee754_pow+0x25c>)
 8006414:	429c      	cmp	r4, r3
 8006416:	dd19      	ble.n	800644c <__ieee754_pow+0x26c>
 8006418:	f1b9 0f00 	cmp.w	r9, #0
 800641c:	dcef      	bgt.n	80063fe <__ieee754_pow+0x21e>
 800641e:	2000      	movs	r0, #0
 8006420:	b009      	add	sp, #36	; 0x24
 8006422:	ecbd 8b06 	vpop	{d8-d10}
 8006426:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	f000 bcd7 	b.w	8006ddc <__math_uflow>
 800642e:	bf00      	nop
 8006430:	fff00000 	.word	0xfff00000
 8006434:	7ff00000 	.word	0x7ff00000
 8006438:	433fffff 	.word	0x433fffff
 800643c:	3ff00000 	.word	0x3ff00000
 8006440:	3fefffff 	.word	0x3fefffff
 8006444:	3fe00000 	.word	0x3fe00000
 8006448:	41e00000 	.word	0x41e00000
 800644c:	4b60      	ldr	r3, [pc, #384]	; (80065d0 <__ieee754_pow+0x3f0>)
 800644e:	2200      	movs	r2, #0
 8006450:	f7f9 fec6 	bl	80001e0 <__aeabi_dsub>
 8006454:	a354      	add	r3, pc, #336	; (adr r3, 80065a8 <__ieee754_pow+0x3c8>)
 8006456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645a:	4604      	mov	r4, r0
 800645c:	460d      	mov	r5, r1
 800645e:	f7fa f877 	bl	8000550 <__aeabi_dmul>
 8006462:	a353      	add	r3, pc, #332	; (adr r3, 80065b0 <__ieee754_pow+0x3d0>)
 8006464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006468:	4606      	mov	r6, r0
 800646a:	460f      	mov	r7, r1
 800646c:	4620      	mov	r0, r4
 800646e:	4629      	mov	r1, r5
 8006470:	f7fa f86e 	bl	8000550 <__aeabi_dmul>
 8006474:	4b57      	ldr	r3, [pc, #348]	; (80065d4 <__ieee754_pow+0x3f4>)
 8006476:	4682      	mov	sl, r0
 8006478:	468b      	mov	fp, r1
 800647a:	2200      	movs	r2, #0
 800647c:	4620      	mov	r0, r4
 800647e:	4629      	mov	r1, r5
 8006480:	f7fa f866 	bl	8000550 <__aeabi_dmul>
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	a14b      	add	r1, pc, #300	; (adr r1, 80065b8 <__ieee754_pow+0x3d8>)
 800648a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800648e:	f7f9 fea7 	bl	80001e0 <__aeabi_dsub>
 8006492:	4622      	mov	r2, r4
 8006494:	462b      	mov	r3, r5
 8006496:	f7fa f85b 	bl	8000550 <__aeabi_dmul>
 800649a:	4602      	mov	r2, r0
 800649c:	460b      	mov	r3, r1
 800649e:	2000      	movs	r0, #0
 80064a0:	494d      	ldr	r1, [pc, #308]	; (80065d8 <__ieee754_pow+0x3f8>)
 80064a2:	f7f9 fe9d 	bl	80001e0 <__aeabi_dsub>
 80064a6:	4622      	mov	r2, r4
 80064a8:	4680      	mov	r8, r0
 80064aa:	4689      	mov	r9, r1
 80064ac:	462b      	mov	r3, r5
 80064ae:	4620      	mov	r0, r4
 80064b0:	4629      	mov	r1, r5
 80064b2:	f7fa f84d 	bl	8000550 <__aeabi_dmul>
 80064b6:	4602      	mov	r2, r0
 80064b8:	460b      	mov	r3, r1
 80064ba:	4640      	mov	r0, r8
 80064bc:	4649      	mov	r1, r9
 80064be:	f7fa f847 	bl	8000550 <__aeabi_dmul>
 80064c2:	a33f      	add	r3, pc, #252	; (adr r3, 80065c0 <__ieee754_pow+0x3e0>)
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	f7fa f842 	bl	8000550 <__aeabi_dmul>
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	4650      	mov	r0, sl
 80064d2:	4659      	mov	r1, fp
 80064d4:	f7f9 fe84 	bl	80001e0 <__aeabi_dsub>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	4680      	mov	r8, r0
 80064de:	4689      	mov	r9, r1
 80064e0:	4630      	mov	r0, r6
 80064e2:	4639      	mov	r1, r7
 80064e4:	f7f9 fe7e 	bl	80001e4 <__adddf3>
 80064e8:	2000      	movs	r0, #0
 80064ea:	4632      	mov	r2, r6
 80064ec:	463b      	mov	r3, r7
 80064ee:	4604      	mov	r4, r0
 80064f0:	460d      	mov	r5, r1
 80064f2:	f7f9 fe75 	bl	80001e0 <__aeabi_dsub>
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4640      	mov	r0, r8
 80064fc:	4649      	mov	r1, r9
 80064fe:	f7f9 fe6f 	bl	80001e0 <__aeabi_dsub>
 8006502:	9b04      	ldr	r3, [sp, #16]
 8006504:	9a06      	ldr	r2, [sp, #24]
 8006506:	3b01      	subs	r3, #1
 8006508:	4313      	orrs	r3, r2
 800650a:	4682      	mov	sl, r0
 800650c:	468b      	mov	fp, r1
 800650e:	f040 81e7 	bne.w	80068e0 <__ieee754_pow+0x700>
 8006512:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80065c8 <__ieee754_pow+0x3e8>
 8006516:	eeb0 8a47 	vmov.f32	s16, s14
 800651a:	eef0 8a67 	vmov.f32	s17, s15
 800651e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006522:	2600      	movs	r6, #0
 8006524:	4632      	mov	r2, r6
 8006526:	463b      	mov	r3, r7
 8006528:	e9dd 0100 	ldrd	r0, r1, [sp]
 800652c:	f7f9 fe58 	bl	80001e0 <__aeabi_dsub>
 8006530:	4622      	mov	r2, r4
 8006532:	462b      	mov	r3, r5
 8006534:	f7fa f80c 	bl	8000550 <__aeabi_dmul>
 8006538:	e9dd 2300 	ldrd	r2, r3, [sp]
 800653c:	4680      	mov	r8, r0
 800653e:	4689      	mov	r9, r1
 8006540:	4650      	mov	r0, sl
 8006542:	4659      	mov	r1, fp
 8006544:	f7fa f804 	bl	8000550 <__aeabi_dmul>
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	4640      	mov	r0, r8
 800654e:	4649      	mov	r1, r9
 8006550:	f7f9 fe48 	bl	80001e4 <__adddf3>
 8006554:	4632      	mov	r2, r6
 8006556:	463b      	mov	r3, r7
 8006558:	4680      	mov	r8, r0
 800655a:	4689      	mov	r9, r1
 800655c:	4620      	mov	r0, r4
 800655e:	4629      	mov	r1, r5
 8006560:	f7f9 fff6 	bl	8000550 <__aeabi_dmul>
 8006564:	460b      	mov	r3, r1
 8006566:	4604      	mov	r4, r0
 8006568:	460d      	mov	r5, r1
 800656a:	4602      	mov	r2, r0
 800656c:	4649      	mov	r1, r9
 800656e:	4640      	mov	r0, r8
 8006570:	f7f9 fe38 	bl	80001e4 <__adddf3>
 8006574:	4b19      	ldr	r3, [pc, #100]	; (80065dc <__ieee754_pow+0x3fc>)
 8006576:	4299      	cmp	r1, r3
 8006578:	ec45 4b19 	vmov	d9, r4, r5
 800657c:	4606      	mov	r6, r0
 800657e:	460f      	mov	r7, r1
 8006580:	468b      	mov	fp, r1
 8006582:	f340 82f1 	ble.w	8006b68 <__ieee754_pow+0x988>
 8006586:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800658a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800658e:	4303      	orrs	r3, r0
 8006590:	f000 81e4 	beq.w	800695c <__ieee754_pow+0x77c>
 8006594:	ec51 0b18 	vmov	r0, r1, d8
 8006598:	2200      	movs	r2, #0
 800659a:	2300      	movs	r3, #0
 800659c:	f7fa fa4a 	bl	8000a34 <__aeabi_dcmplt>
 80065a0:	3800      	subs	r0, #0
 80065a2:	bf18      	it	ne
 80065a4:	2001      	movne	r0, #1
 80065a6:	e72b      	b.n	8006400 <__ieee754_pow+0x220>
 80065a8:	60000000 	.word	0x60000000
 80065ac:	3ff71547 	.word	0x3ff71547
 80065b0:	f85ddf44 	.word	0xf85ddf44
 80065b4:	3e54ae0b 	.word	0x3e54ae0b
 80065b8:	55555555 	.word	0x55555555
 80065bc:	3fd55555 	.word	0x3fd55555
 80065c0:	652b82fe 	.word	0x652b82fe
 80065c4:	3ff71547 	.word	0x3ff71547
 80065c8:	00000000 	.word	0x00000000
 80065cc:	bff00000 	.word	0xbff00000
 80065d0:	3ff00000 	.word	0x3ff00000
 80065d4:	3fd00000 	.word	0x3fd00000
 80065d8:	3fe00000 	.word	0x3fe00000
 80065dc:	408fffff 	.word	0x408fffff
 80065e0:	4bd5      	ldr	r3, [pc, #852]	; (8006938 <__ieee754_pow+0x758>)
 80065e2:	402b      	ands	r3, r5
 80065e4:	2200      	movs	r2, #0
 80065e6:	b92b      	cbnz	r3, 80065f4 <__ieee754_pow+0x414>
 80065e8:	4bd4      	ldr	r3, [pc, #848]	; (800693c <__ieee754_pow+0x75c>)
 80065ea:	f7f9 ffb1 	bl	8000550 <__aeabi_dmul>
 80065ee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80065f2:	460c      	mov	r4, r1
 80065f4:	1523      	asrs	r3, r4, #20
 80065f6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80065fa:	4413      	add	r3, r2
 80065fc:	9305      	str	r3, [sp, #20]
 80065fe:	4bd0      	ldr	r3, [pc, #832]	; (8006940 <__ieee754_pow+0x760>)
 8006600:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006604:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006608:	429c      	cmp	r4, r3
 800660a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800660e:	dd08      	ble.n	8006622 <__ieee754_pow+0x442>
 8006610:	4bcc      	ldr	r3, [pc, #816]	; (8006944 <__ieee754_pow+0x764>)
 8006612:	429c      	cmp	r4, r3
 8006614:	f340 8162 	ble.w	80068dc <__ieee754_pow+0x6fc>
 8006618:	9b05      	ldr	r3, [sp, #20]
 800661a:	3301      	adds	r3, #1
 800661c:	9305      	str	r3, [sp, #20]
 800661e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006622:	2400      	movs	r4, #0
 8006624:	00e3      	lsls	r3, r4, #3
 8006626:	9307      	str	r3, [sp, #28]
 8006628:	4bc7      	ldr	r3, [pc, #796]	; (8006948 <__ieee754_pow+0x768>)
 800662a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800662e:	ed93 7b00 	vldr	d7, [r3]
 8006632:	4629      	mov	r1, r5
 8006634:	ec53 2b17 	vmov	r2, r3, d7
 8006638:	eeb0 9a47 	vmov.f32	s18, s14
 800663c:	eef0 9a67 	vmov.f32	s19, s15
 8006640:	4682      	mov	sl, r0
 8006642:	f7f9 fdcd 	bl	80001e0 <__aeabi_dsub>
 8006646:	4652      	mov	r2, sl
 8006648:	4606      	mov	r6, r0
 800664a:	460f      	mov	r7, r1
 800664c:	462b      	mov	r3, r5
 800664e:	ec51 0b19 	vmov	r0, r1, d9
 8006652:	f7f9 fdc7 	bl	80001e4 <__adddf3>
 8006656:	4602      	mov	r2, r0
 8006658:	460b      	mov	r3, r1
 800665a:	2000      	movs	r0, #0
 800665c:	49bb      	ldr	r1, [pc, #748]	; (800694c <__ieee754_pow+0x76c>)
 800665e:	f7fa f8a1 	bl	80007a4 <__aeabi_ddiv>
 8006662:	ec41 0b1a 	vmov	d10, r0, r1
 8006666:	4602      	mov	r2, r0
 8006668:	460b      	mov	r3, r1
 800666a:	4630      	mov	r0, r6
 800666c:	4639      	mov	r1, r7
 800666e:	f7f9 ff6f 	bl	8000550 <__aeabi_dmul>
 8006672:	2300      	movs	r3, #0
 8006674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006678:	9302      	str	r3, [sp, #8]
 800667a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800667e:	46ab      	mov	fp, r5
 8006680:	106d      	asrs	r5, r5, #1
 8006682:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006686:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800668a:	ec41 0b18 	vmov	d8, r0, r1
 800668e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006692:	2200      	movs	r2, #0
 8006694:	4640      	mov	r0, r8
 8006696:	4649      	mov	r1, r9
 8006698:	4614      	mov	r4, r2
 800669a:	461d      	mov	r5, r3
 800669c:	f7f9 ff58 	bl	8000550 <__aeabi_dmul>
 80066a0:	4602      	mov	r2, r0
 80066a2:	460b      	mov	r3, r1
 80066a4:	4630      	mov	r0, r6
 80066a6:	4639      	mov	r1, r7
 80066a8:	f7f9 fd9a 	bl	80001e0 <__aeabi_dsub>
 80066ac:	ec53 2b19 	vmov	r2, r3, d9
 80066b0:	4606      	mov	r6, r0
 80066b2:	460f      	mov	r7, r1
 80066b4:	4620      	mov	r0, r4
 80066b6:	4629      	mov	r1, r5
 80066b8:	f7f9 fd92 	bl	80001e0 <__aeabi_dsub>
 80066bc:	4602      	mov	r2, r0
 80066be:	460b      	mov	r3, r1
 80066c0:	4650      	mov	r0, sl
 80066c2:	4659      	mov	r1, fp
 80066c4:	f7f9 fd8c 	bl	80001e0 <__aeabi_dsub>
 80066c8:	4642      	mov	r2, r8
 80066ca:	464b      	mov	r3, r9
 80066cc:	f7f9 ff40 	bl	8000550 <__aeabi_dmul>
 80066d0:	4602      	mov	r2, r0
 80066d2:	460b      	mov	r3, r1
 80066d4:	4630      	mov	r0, r6
 80066d6:	4639      	mov	r1, r7
 80066d8:	f7f9 fd82 	bl	80001e0 <__aeabi_dsub>
 80066dc:	ec53 2b1a 	vmov	r2, r3, d10
 80066e0:	f7f9 ff36 	bl	8000550 <__aeabi_dmul>
 80066e4:	ec53 2b18 	vmov	r2, r3, d8
 80066e8:	ec41 0b19 	vmov	d9, r0, r1
 80066ec:	ec51 0b18 	vmov	r0, r1, d8
 80066f0:	f7f9 ff2e 	bl	8000550 <__aeabi_dmul>
 80066f4:	a37c      	add	r3, pc, #496	; (adr r3, 80068e8 <__ieee754_pow+0x708>)
 80066f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fa:	4604      	mov	r4, r0
 80066fc:	460d      	mov	r5, r1
 80066fe:	f7f9 ff27 	bl	8000550 <__aeabi_dmul>
 8006702:	a37b      	add	r3, pc, #492	; (adr r3, 80068f0 <__ieee754_pow+0x710>)
 8006704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006708:	f7f9 fd6c 	bl	80001e4 <__adddf3>
 800670c:	4622      	mov	r2, r4
 800670e:	462b      	mov	r3, r5
 8006710:	f7f9 ff1e 	bl	8000550 <__aeabi_dmul>
 8006714:	a378      	add	r3, pc, #480	; (adr r3, 80068f8 <__ieee754_pow+0x718>)
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	f7f9 fd63 	bl	80001e4 <__adddf3>
 800671e:	4622      	mov	r2, r4
 8006720:	462b      	mov	r3, r5
 8006722:	f7f9 ff15 	bl	8000550 <__aeabi_dmul>
 8006726:	a376      	add	r3, pc, #472	; (adr r3, 8006900 <__ieee754_pow+0x720>)
 8006728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672c:	f7f9 fd5a 	bl	80001e4 <__adddf3>
 8006730:	4622      	mov	r2, r4
 8006732:	462b      	mov	r3, r5
 8006734:	f7f9 ff0c 	bl	8000550 <__aeabi_dmul>
 8006738:	a373      	add	r3, pc, #460	; (adr r3, 8006908 <__ieee754_pow+0x728>)
 800673a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673e:	f7f9 fd51 	bl	80001e4 <__adddf3>
 8006742:	4622      	mov	r2, r4
 8006744:	462b      	mov	r3, r5
 8006746:	f7f9 ff03 	bl	8000550 <__aeabi_dmul>
 800674a:	a371      	add	r3, pc, #452	; (adr r3, 8006910 <__ieee754_pow+0x730>)
 800674c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006750:	f7f9 fd48 	bl	80001e4 <__adddf3>
 8006754:	4622      	mov	r2, r4
 8006756:	4606      	mov	r6, r0
 8006758:	460f      	mov	r7, r1
 800675a:	462b      	mov	r3, r5
 800675c:	4620      	mov	r0, r4
 800675e:	4629      	mov	r1, r5
 8006760:	f7f9 fef6 	bl	8000550 <__aeabi_dmul>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	4630      	mov	r0, r6
 800676a:	4639      	mov	r1, r7
 800676c:	f7f9 fef0 	bl	8000550 <__aeabi_dmul>
 8006770:	4642      	mov	r2, r8
 8006772:	4604      	mov	r4, r0
 8006774:	460d      	mov	r5, r1
 8006776:	464b      	mov	r3, r9
 8006778:	ec51 0b18 	vmov	r0, r1, d8
 800677c:	f7f9 fd32 	bl	80001e4 <__adddf3>
 8006780:	ec53 2b19 	vmov	r2, r3, d9
 8006784:	f7f9 fee4 	bl	8000550 <__aeabi_dmul>
 8006788:	4622      	mov	r2, r4
 800678a:	462b      	mov	r3, r5
 800678c:	f7f9 fd2a 	bl	80001e4 <__adddf3>
 8006790:	4642      	mov	r2, r8
 8006792:	4682      	mov	sl, r0
 8006794:	468b      	mov	fp, r1
 8006796:	464b      	mov	r3, r9
 8006798:	4640      	mov	r0, r8
 800679a:	4649      	mov	r1, r9
 800679c:	f7f9 fed8 	bl	8000550 <__aeabi_dmul>
 80067a0:	4b6b      	ldr	r3, [pc, #428]	; (8006950 <__ieee754_pow+0x770>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	4606      	mov	r6, r0
 80067a6:	460f      	mov	r7, r1
 80067a8:	f7f9 fd1c 	bl	80001e4 <__adddf3>
 80067ac:	4652      	mov	r2, sl
 80067ae:	465b      	mov	r3, fp
 80067b0:	f7f9 fd18 	bl	80001e4 <__adddf3>
 80067b4:	2000      	movs	r0, #0
 80067b6:	4604      	mov	r4, r0
 80067b8:	460d      	mov	r5, r1
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	4640      	mov	r0, r8
 80067c0:	4649      	mov	r1, r9
 80067c2:	f7f9 fec5 	bl	8000550 <__aeabi_dmul>
 80067c6:	4b62      	ldr	r3, [pc, #392]	; (8006950 <__ieee754_pow+0x770>)
 80067c8:	4680      	mov	r8, r0
 80067ca:	4689      	mov	r9, r1
 80067cc:	2200      	movs	r2, #0
 80067ce:	4620      	mov	r0, r4
 80067d0:	4629      	mov	r1, r5
 80067d2:	f7f9 fd05 	bl	80001e0 <__aeabi_dsub>
 80067d6:	4632      	mov	r2, r6
 80067d8:	463b      	mov	r3, r7
 80067da:	f7f9 fd01 	bl	80001e0 <__aeabi_dsub>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	4650      	mov	r0, sl
 80067e4:	4659      	mov	r1, fp
 80067e6:	f7f9 fcfb 	bl	80001e0 <__aeabi_dsub>
 80067ea:	ec53 2b18 	vmov	r2, r3, d8
 80067ee:	f7f9 feaf 	bl	8000550 <__aeabi_dmul>
 80067f2:	4622      	mov	r2, r4
 80067f4:	4606      	mov	r6, r0
 80067f6:	460f      	mov	r7, r1
 80067f8:	462b      	mov	r3, r5
 80067fa:	ec51 0b19 	vmov	r0, r1, d9
 80067fe:	f7f9 fea7 	bl	8000550 <__aeabi_dmul>
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	4630      	mov	r0, r6
 8006808:	4639      	mov	r1, r7
 800680a:	f7f9 fceb 	bl	80001e4 <__adddf3>
 800680e:	4606      	mov	r6, r0
 8006810:	460f      	mov	r7, r1
 8006812:	4602      	mov	r2, r0
 8006814:	460b      	mov	r3, r1
 8006816:	4640      	mov	r0, r8
 8006818:	4649      	mov	r1, r9
 800681a:	f7f9 fce3 	bl	80001e4 <__adddf3>
 800681e:	a33e      	add	r3, pc, #248	; (adr r3, 8006918 <__ieee754_pow+0x738>)
 8006820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006824:	2000      	movs	r0, #0
 8006826:	4604      	mov	r4, r0
 8006828:	460d      	mov	r5, r1
 800682a:	f7f9 fe91 	bl	8000550 <__aeabi_dmul>
 800682e:	4642      	mov	r2, r8
 8006830:	ec41 0b18 	vmov	d8, r0, r1
 8006834:	464b      	mov	r3, r9
 8006836:	4620      	mov	r0, r4
 8006838:	4629      	mov	r1, r5
 800683a:	f7f9 fcd1 	bl	80001e0 <__aeabi_dsub>
 800683e:	4602      	mov	r2, r0
 8006840:	460b      	mov	r3, r1
 8006842:	4630      	mov	r0, r6
 8006844:	4639      	mov	r1, r7
 8006846:	f7f9 fccb 	bl	80001e0 <__aeabi_dsub>
 800684a:	a335      	add	r3, pc, #212	; (adr r3, 8006920 <__ieee754_pow+0x740>)
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	f7f9 fe7e 	bl	8000550 <__aeabi_dmul>
 8006854:	a334      	add	r3, pc, #208	; (adr r3, 8006928 <__ieee754_pow+0x748>)
 8006856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685a:	4606      	mov	r6, r0
 800685c:	460f      	mov	r7, r1
 800685e:	4620      	mov	r0, r4
 8006860:	4629      	mov	r1, r5
 8006862:	f7f9 fe75 	bl	8000550 <__aeabi_dmul>
 8006866:	4602      	mov	r2, r0
 8006868:	460b      	mov	r3, r1
 800686a:	4630      	mov	r0, r6
 800686c:	4639      	mov	r1, r7
 800686e:	f7f9 fcb9 	bl	80001e4 <__adddf3>
 8006872:	9a07      	ldr	r2, [sp, #28]
 8006874:	4b37      	ldr	r3, [pc, #220]	; (8006954 <__ieee754_pow+0x774>)
 8006876:	4413      	add	r3, r2
 8006878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687c:	f7f9 fcb2 	bl	80001e4 <__adddf3>
 8006880:	4682      	mov	sl, r0
 8006882:	9805      	ldr	r0, [sp, #20]
 8006884:	468b      	mov	fp, r1
 8006886:	f7f9 fdf9 	bl	800047c <__aeabi_i2d>
 800688a:	9a07      	ldr	r2, [sp, #28]
 800688c:	4b32      	ldr	r3, [pc, #200]	; (8006958 <__ieee754_pow+0x778>)
 800688e:	4413      	add	r3, r2
 8006890:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006894:	4606      	mov	r6, r0
 8006896:	460f      	mov	r7, r1
 8006898:	4652      	mov	r2, sl
 800689a:	465b      	mov	r3, fp
 800689c:	ec51 0b18 	vmov	r0, r1, d8
 80068a0:	f7f9 fca0 	bl	80001e4 <__adddf3>
 80068a4:	4642      	mov	r2, r8
 80068a6:	464b      	mov	r3, r9
 80068a8:	f7f9 fc9c 	bl	80001e4 <__adddf3>
 80068ac:	4632      	mov	r2, r6
 80068ae:	463b      	mov	r3, r7
 80068b0:	f7f9 fc98 	bl	80001e4 <__adddf3>
 80068b4:	2000      	movs	r0, #0
 80068b6:	4632      	mov	r2, r6
 80068b8:	463b      	mov	r3, r7
 80068ba:	4604      	mov	r4, r0
 80068bc:	460d      	mov	r5, r1
 80068be:	f7f9 fc8f 	bl	80001e0 <__aeabi_dsub>
 80068c2:	4642      	mov	r2, r8
 80068c4:	464b      	mov	r3, r9
 80068c6:	f7f9 fc8b 	bl	80001e0 <__aeabi_dsub>
 80068ca:	ec53 2b18 	vmov	r2, r3, d8
 80068ce:	f7f9 fc87 	bl	80001e0 <__aeabi_dsub>
 80068d2:	4602      	mov	r2, r0
 80068d4:	460b      	mov	r3, r1
 80068d6:	4650      	mov	r0, sl
 80068d8:	4659      	mov	r1, fp
 80068da:	e610      	b.n	80064fe <__ieee754_pow+0x31e>
 80068dc:	2401      	movs	r4, #1
 80068de:	e6a1      	b.n	8006624 <__ieee754_pow+0x444>
 80068e0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006930 <__ieee754_pow+0x750>
 80068e4:	e617      	b.n	8006516 <__ieee754_pow+0x336>
 80068e6:	bf00      	nop
 80068e8:	4a454eef 	.word	0x4a454eef
 80068ec:	3fca7e28 	.word	0x3fca7e28
 80068f0:	93c9db65 	.word	0x93c9db65
 80068f4:	3fcd864a 	.word	0x3fcd864a
 80068f8:	a91d4101 	.word	0xa91d4101
 80068fc:	3fd17460 	.word	0x3fd17460
 8006900:	518f264d 	.word	0x518f264d
 8006904:	3fd55555 	.word	0x3fd55555
 8006908:	db6fabff 	.word	0xdb6fabff
 800690c:	3fdb6db6 	.word	0x3fdb6db6
 8006910:	33333303 	.word	0x33333303
 8006914:	3fe33333 	.word	0x3fe33333
 8006918:	e0000000 	.word	0xe0000000
 800691c:	3feec709 	.word	0x3feec709
 8006920:	dc3a03fd 	.word	0xdc3a03fd
 8006924:	3feec709 	.word	0x3feec709
 8006928:	145b01f5 	.word	0x145b01f5
 800692c:	be3e2fe0 	.word	0xbe3e2fe0
 8006930:	00000000 	.word	0x00000000
 8006934:	3ff00000 	.word	0x3ff00000
 8006938:	7ff00000 	.word	0x7ff00000
 800693c:	43400000 	.word	0x43400000
 8006940:	0003988e 	.word	0x0003988e
 8006944:	000bb679 	.word	0x000bb679
 8006948:	08006f70 	.word	0x08006f70
 800694c:	3ff00000 	.word	0x3ff00000
 8006950:	40080000 	.word	0x40080000
 8006954:	08006f90 	.word	0x08006f90
 8006958:	08006f80 	.word	0x08006f80
 800695c:	a3b5      	add	r3, pc, #724	; (adr r3, 8006c34 <__ieee754_pow+0xa54>)
 800695e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006962:	4640      	mov	r0, r8
 8006964:	4649      	mov	r1, r9
 8006966:	f7f9 fc3d 	bl	80001e4 <__adddf3>
 800696a:	4622      	mov	r2, r4
 800696c:	ec41 0b1a 	vmov	d10, r0, r1
 8006970:	462b      	mov	r3, r5
 8006972:	4630      	mov	r0, r6
 8006974:	4639      	mov	r1, r7
 8006976:	f7f9 fc33 	bl	80001e0 <__aeabi_dsub>
 800697a:	4602      	mov	r2, r0
 800697c:	460b      	mov	r3, r1
 800697e:	ec51 0b1a 	vmov	r0, r1, d10
 8006982:	f7fa f875 	bl	8000a70 <__aeabi_dcmpgt>
 8006986:	2800      	cmp	r0, #0
 8006988:	f47f ae04 	bne.w	8006594 <__ieee754_pow+0x3b4>
 800698c:	4aa4      	ldr	r2, [pc, #656]	; (8006c20 <__ieee754_pow+0xa40>)
 800698e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006992:	4293      	cmp	r3, r2
 8006994:	f340 8108 	ble.w	8006ba8 <__ieee754_pow+0x9c8>
 8006998:	151b      	asrs	r3, r3, #20
 800699a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800699e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80069a2:	fa4a f303 	asr.w	r3, sl, r3
 80069a6:	445b      	add	r3, fp
 80069a8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80069ac:	4e9d      	ldr	r6, [pc, #628]	; (8006c24 <__ieee754_pow+0xa44>)
 80069ae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80069b2:	4116      	asrs	r6, r2
 80069b4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80069b8:	2000      	movs	r0, #0
 80069ba:	ea23 0106 	bic.w	r1, r3, r6
 80069be:	f1c2 0214 	rsb	r2, r2, #20
 80069c2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80069c6:	fa4a fa02 	asr.w	sl, sl, r2
 80069ca:	f1bb 0f00 	cmp.w	fp, #0
 80069ce:	4602      	mov	r2, r0
 80069d0:	460b      	mov	r3, r1
 80069d2:	4620      	mov	r0, r4
 80069d4:	4629      	mov	r1, r5
 80069d6:	bfb8      	it	lt
 80069d8:	f1ca 0a00 	rsblt	sl, sl, #0
 80069dc:	f7f9 fc00 	bl	80001e0 <__aeabi_dsub>
 80069e0:	ec41 0b19 	vmov	d9, r0, r1
 80069e4:	4642      	mov	r2, r8
 80069e6:	464b      	mov	r3, r9
 80069e8:	ec51 0b19 	vmov	r0, r1, d9
 80069ec:	f7f9 fbfa 	bl	80001e4 <__adddf3>
 80069f0:	a37b      	add	r3, pc, #492	; (adr r3, 8006be0 <__ieee754_pow+0xa00>)
 80069f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f6:	2000      	movs	r0, #0
 80069f8:	4604      	mov	r4, r0
 80069fa:	460d      	mov	r5, r1
 80069fc:	f7f9 fda8 	bl	8000550 <__aeabi_dmul>
 8006a00:	ec53 2b19 	vmov	r2, r3, d9
 8006a04:	4606      	mov	r6, r0
 8006a06:	460f      	mov	r7, r1
 8006a08:	4620      	mov	r0, r4
 8006a0a:	4629      	mov	r1, r5
 8006a0c:	f7f9 fbe8 	bl	80001e0 <__aeabi_dsub>
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	4640      	mov	r0, r8
 8006a16:	4649      	mov	r1, r9
 8006a18:	f7f9 fbe2 	bl	80001e0 <__aeabi_dsub>
 8006a1c:	a372      	add	r3, pc, #456	; (adr r3, 8006be8 <__ieee754_pow+0xa08>)
 8006a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a22:	f7f9 fd95 	bl	8000550 <__aeabi_dmul>
 8006a26:	a372      	add	r3, pc, #456	; (adr r3, 8006bf0 <__ieee754_pow+0xa10>)
 8006a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2c:	4680      	mov	r8, r0
 8006a2e:	4689      	mov	r9, r1
 8006a30:	4620      	mov	r0, r4
 8006a32:	4629      	mov	r1, r5
 8006a34:	f7f9 fd8c 	bl	8000550 <__aeabi_dmul>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4640      	mov	r0, r8
 8006a3e:	4649      	mov	r1, r9
 8006a40:	f7f9 fbd0 	bl	80001e4 <__adddf3>
 8006a44:	4604      	mov	r4, r0
 8006a46:	460d      	mov	r5, r1
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	4639      	mov	r1, r7
 8006a50:	f7f9 fbc8 	bl	80001e4 <__adddf3>
 8006a54:	4632      	mov	r2, r6
 8006a56:	463b      	mov	r3, r7
 8006a58:	4680      	mov	r8, r0
 8006a5a:	4689      	mov	r9, r1
 8006a5c:	f7f9 fbc0 	bl	80001e0 <__aeabi_dsub>
 8006a60:	4602      	mov	r2, r0
 8006a62:	460b      	mov	r3, r1
 8006a64:	4620      	mov	r0, r4
 8006a66:	4629      	mov	r1, r5
 8006a68:	f7f9 fbba 	bl	80001e0 <__aeabi_dsub>
 8006a6c:	4642      	mov	r2, r8
 8006a6e:	4606      	mov	r6, r0
 8006a70:	460f      	mov	r7, r1
 8006a72:	464b      	mov	r3, r9
 8006a74:	4640      	mov	r0, r8
 8006a76:	4649      	mov	r1, r9
 8006a78:	f7f9 fd6a 	bl	8000550 <__aeabi_dmul>
 8006a7c:	a35e      	add	r3, pc, #376	; (adr r3, 8006bf8 <__ieee754_pow+0xa18>)
 8006a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a82:	4604      	mov	r4, r0
 8006a84:	460d      	mov	r5, r1
 8006a86:	f7f9 fd63 	bl	8000550 <__aeabi_dmul>
 8006a8a:	a35d      	add	r3, pc, #372	; (adr r3, 8006c00 <__ieee754_pow+0xa20>)
 8006a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a90:	f7f9 fba6 	bl	80001e0 <__aeabi_dsub>
 8006a94:	4622      	mov	r2, r4
 8006a96:	462b      	mov	r3, r5
 8006a98:	f7f9 fd5a 	bl	8000550 <__aeabi_dmul>
 8006a9c:	a35a      	add	r3, pc, #360	; (adr r3, 8006c08 <__ieee754_pow+0xa28>)
 8006a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa2:	f7f9 fb9f 	bl	80001e4 <__adddf3>
 8006aa6:	4622      	mov	r2, r4
 8006aa8:	462b      	mov	r3, r5
 8006aaa:	f7f9 fd51 	bl	8000550 <__aeabi_dmul>
 8006aae:	a358      	add	r3, pc, #352	; (adr r3, 8006c10 <__ieee754_pow+0xa30>)
 8006ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab4:	f7f9 fb94 	bl	80001e0 <__aeabi_dsub>
 8006ab8:	4622      	mov	r2, r4
 8006aba:	462b      	mov	r3, r5
 8006abc:	f7f9 fd48 	bl	8000550 <__aeabi_dmul>
 8006ac0:	a355      	add	r3, pc, #340	; (adr r3, 8006c18 <__ieee754_pow+0xa38>)
 8006ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac6:	f7f9 fb8d 	bl	80001e4 <__adddf3>
 8006aca:	4622      	mov	r2, r4
 8006acc:	462b      	mov	r3, r5
 8006ace:	f7f9 fd3f 	bl	8000550 <__aeabi_dmul>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	4640      	mov	r0, r8
 8006ad8:	4649      	mov	r1, r9
 8006ada:	f7f9 fb81 	bl	80001e0 <__aeabi_dsub>
 8006ade:	4604      	mov	r4, r0
 8006ae0:	460d      	mov	r5, r1
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	4640      	mov	r0, r8
 8006ae8:	4649      	mov	r1, r9
 8006aea:	f7f9 fd31 	bl	8000550 <__aeabi_dmul>
 8006aee:	2200      	movs	r2, #0
 8006af0:	ec41 0b19 	vmov	d9, r0, r1
 8006af4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006af8:	4620      	mov	r0, r4
 8006afa:	4629      	mov	r1, r5
 8006afc:	f7f9 fb70 	bl	80001e0 <__aeabi_dsub>
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	ec51 0b19 	vmov	r0, r1, d9
 8006b08:	f7f9 fe4c 	bl	80007a4 <__aeabi_ddiv>
 8006b0c:	4632      	mov	r2, r6
 8006b0e:	4604      	mov	r4, r0
 8006b10:	460d      	mov	r5, r1
 8006b12:	463b      	mov	r3, r7
 8006b14:	4640      	mov	r0, r8
 8006b16:	4649      	mov	r1, r9
 8006b18:	f7f9 fd1a 	bl	8000550 <__aeabi_dmul>
 8006b1c:	4632      	mov	r2, r6
 8006b1e:	463b      	mov	r3, r7
 8006b20:	f7f9 fb60 	bl	80001e4 <__adddf3>
 8006b24:	4602      	mov	r2, r0
 8006b26:	460b      	mov	r3, r1
 8006b28:	4620      	mov	r0, r4
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	f7f9 fb58 	bl	80001e0 <__aeabi_dsub>
 8006b30:	4642      	mov	r2, r8
 8006b32:	464b      	mov	r3, r9
 8006b34:	f7f9 fb54 	bl	80001e0 <__aeabi_dsub>
 8006b38:	460b      	mov	r3, r1
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	493a      	ldr	r1, [pc, #232]	; (8006c28 <__ieee754_pow+0xa48>)
 8006b3e:	2000      	movs	r0, #0
 8006b40:	f7f9 fb4e 	bl	80001e0 <__aeabi_dsub>
 8006b44:	ec41 0b10 	vmov	d0, r0, r1
 8006b48:	ee10 3a90 	vmov	r3, s1
 8006b4c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006b50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b54:	da2b      	bge.n	8006bae <__ieee754_pow+0x9ce>
 8006b56:	4650      	mov	r0, sl
 8006b58:	f000 f966 	bl	8006e28 <scalbn>
 8006b5c:	ec51 0b10 	vmov	r0, r1, d0
 8006b60:	ec53 2b18 	vmov	r2, r3, d8
 8006b64:	f7ff bbed 	b.w	8006342 <__ieee754_pow+0x162>
 8006b68:	4b30      	ldr	r3, [pc, #192]	; (8006c2c <__ieee754_pow+0xa4c>)
 8006b6a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006b6e:	429e      	cmp	r6, r3
 8006b70:	f77f af0c 	ble.w	800698c <__ieee754_pow+0x7ac>
 8006b74:	4b2e      	ldr	r3, [pc, #184]	; (8006c30 <__ieee754_pow+0xa50>)
 8006b76:	440b      	add	r3, r1
 8006b78:	4303      	orrs	r3, r0
 8006b7a:	d009      	beq.n	8006b90 <__ieee754_pow+0x9b0>
 8006b7c:	ec51 0b18 	vmov	r0, r1, d8
 8006b80:	2200      	movs	r2, #0
 8006b82:	2300      	movs	r3, #0
 8006b84:	f7f9 ff56 	bl	8000a34 <__aeabi_dcmplt>
 8006b88:	3800      	subs	r0, #0
 8006b8a:	bf18      	it	ne
 8006b8c:	2001      	movne	r0, #1
 8006b8e:	e447      	b.n	8006420 <__ieee754_pow+0x240>
 8006b90:	4622      	mov	r2, r4
 8006b92:	462b      	mov	r3, r5
 8006b94:	f7f9 fb24 	bl	80001e0 <__aeabi_dsub>
 8006b98:	4642      	mov	r2, r8
 8006b9a:	464b      	mov	r3, r9
 8006b9c:	f7f9 ff5e 	bl	8000a5c <__aeabi_dcmpge>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	f43f aef3 	beq.w	800698c <__ieee754_pow+0x7ac>
 8006ba6:	e7e9      	b.n	8006b7c <__ieee754_pow+0x99c>
 8006ba8:	f04f 0a00 	mov.w	sl, #0
 8006bac:	e71a      	b.n	80069e4 <__ieee754_pow+0x804>
 8006bae:	ec51 0b10 	vmov	r0, r1, d0
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	e7d4      	b.n	8006b60 <__ieee754_pow+0x980>
 8006bb6:	491c      	ldr	r1, [pc, #112]	; (8006c28 <__ieee754_pow+0xa48>)
 8006bb8:	2000      	movs	r0, #0
 8006bba:	f7ff bb30 	b.w	800621e <__ieee754_pow+0x3e>
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	f7ff bb2c 	b.w	800621e <__ieee754_pow+0x3e>
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	4639      	mov	r1, r7
 8006bca:	f7ff bb28 	b.w	800621e <__ieee754_pow+0x3e>
 8006bce:	9204      	str	r2, [sp, #16]
 8006bd0:	f7ff bb7a 	b.w	80062c8 <__ieee754_pow+0xe8>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	f7ff bb64 	b.w	80062a2 <__ieee754_pow+0xc2>
 8006bda:	bf00      	nop
 8006bdc:	f3af 8000 	nop.w
 8006be0:	00000000 	.word	0x00000000
 8006be4:	3fe62e43 	.word	0x3fe62e43
 8006be8:	fefa39ef 	.word	0xfefa39ef
 8006bec:	3fe62e42 	.word	0x3fe62e42
 8006bf0:	0ca86c39 	.word	0x0ca86c39
 8006bf4:	be205c61 	.word	0xbe205c61
 8006bf8:	72bea4d0 	.word	0x72bea4d0
 8006bfc:	3e663769 	.word	0x3e663769
 8006c00:	c5d26bf1 	.word	0xc5d26bf1
 8006c04:	3ebbbd41 	.word	0x3ebbbd41
 8006c08:	af25de2c 	.word	0xaf25de2c
 8006c0c:	3f11566a 	.word	0x3f11566a
 8006c10:	16bebd93 	.word	0x16bebd93
 8006c14:	3f66c16c 	.word	0x3f66c16c
 8006c18:	5555553e 	.word	0x5555553e
 8006c1c:	3fc55555 	.word	0x3fc55555
 8006c20:	3fe00000 	.word	0x3fe00000
 8006c24:	000fffff 	.word	0x000fffff
 8006c28:	3ff00000 	.word	0x3ff00000
 8006c2c:	4090cbff 	.word	0x4090cbff
 8006c30:	3f6f3400 	.word	0x3f6f3400
 8006c34:	652b82fe 	.word	0x652b82fe
 8006c38:	3c971547 	.word	0x3c971547

08006c3c <__ieee754_sqrt>:
 8006c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c40:	ec55 4b10 	vmov	r4, r5, d0
 8006c44:	4e55      	ldr	r6, [pc, #340]	; (8006d9c <__ieee754_sqrt+0x160>)
 8006c46:	43ae      	bics	r6, r5
 8006c48:	ee10 0a10 	vmov	r0, s0
 8006c4c:	ee10 3a10 	vmov	r3, s0
 8006c50:	462a      	mov	r2, r5
 8006c52:	4629      	mov	r1, r5
 8006c54:	d110      	bne.n	8006c78 <__ieee754_sqrt+0x3c>
 8006c56:	ee10 2a10 	vmov	r2, s0
 8006c5a:	462b      	mov	r3, r5
 8006c5c:	f7f9 fc78 	bl	8000550 <__aeabi_dmul>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	4620      	mov	r0, r4
 8006c66:	4629      	mov	r1, r5
 8006c68:	f7f9 fabc 	bl	80001e4 <__adddf3>
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	460d      	mov	r5, r1
 8006c70:	ec45 4b10 	vmov	d0, r4, r5
 8006c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c78:	2d00      	cmp	r5, #0
 8006c7a:	dc10      	bgt.n	8006c9e <__ieee754_sqrt+0x62>
 8006c7c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006c80:	4330      	orrs	r0, r6
 8006c82:	d0f5      	beq.n	8006c70 <__ieee754_sqrt+0x34>
 8006c84:	b15d      	cbz	r5, 8006c9e <__ieee754_sqrt+0x62>
 8006c86:	ee10 2a10 	vmov	r2, s0
 8006c8a:	462b      	mov	r3, r5
 8006c8c:	ee10 0a10 	vmov	r0, s0
 8006c90:	f7f9 faa6 	bl	80001e0 <__aeabi_dsub>
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	f7f9 fd84 	bl	80007a4 <__aeabi_ddiv>
 8006c9c:	e7e6      	b.n	8006c6c <__ieee754_sqrt+0x30>
 8006c9e:	1512      	asrs	r2, r2, #20
 8006ca0:	d074      	beq.n	8006d8c <__ieee754_sqrt+0x150>
 8006ca2:	07d4      	lsls	r4, r2, #31
 8006ca4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006ca8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006cac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006cb0:	bf5e      	ittt	pl
 8006cb2:	0fda      	lsrpl	r2, r3, #31
 8006cb4:	005b      	lslpl	r3, r3, #1
 8006cb6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8006cba:	2400      	movs	r4, #0
 8006cbc:	0fda      	lsrs	r2, r3, #31
 8006cbe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006cc2:	107f      	asrs	r7, r7, #1
 8006cc4:	005b      	lsls	r3, r3, #1
 8006cc6:	2516      	movs	r5, #22
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006cce:	1886      	adds	r6, r0, r2
 8006cd0:	428e      	cmp	r6, r1
 8006cd2:	bfde      	ittt	le
 8006cd4:	1b89      	suble	r1, r1, r6
 8006cd6:	18b0      	addle	r0, r6, r2
 8006cd8:	18a4      	addle	r4, r4, r2
 8006cda:	0049      	lsls	r1, r1, #1
 8006cdc:	3d01      	subs	r5, #1
 8006cde:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8006ce2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006ce6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006cea:	d1f0      	bne.n	8006cce <__ieee754_sqrt+0x92>
 8006cec:	462a      	mov	r2, r5
 8006cee:	f04f 0e20 	mov.w	lr, #32
 8006cf2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006cf6:	4281      	cmp	r1, r0
 8006cf8:	eb06 0c05 	add.w	ip, r6, r5
 8006cfc:	dc02      	bgt.n	8006d04 <__ieee754_sqrt+0xc8>
 8006cfe:	d113      	bne.n	8006d28 <__ieee754_sqrt+0xec>
 8006d00:	459c      	cmp	ip, r3
 8006d02:	d811      	bhi.n	8006d28 <__ieee754_sqrt+0xec>
 8006d04:	f1bc 0f00 	cmp.w	ip, #0
 8006d08:	eb0c 0506 	add.w	r5, ip, r6
 8006d0c:	da43      	bge.n	8006d96 <__ieee754_sqrt+0x15a>
 8006d0e:	2d00      	cmp	r5, #0
 8006d10:	db41      	blt.n	8006d96 <__ieee754_sqrt+0x15a>
 8006d12:	f100 0801 	add.w	r8, r0, #1
 8006d16:	1a09      	subs	r1, r1, r0
 8006d18:	459c      	cmp	ip, r3
 8006d1a:	bf88      	it	hi
 8006d1c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006d20:	eba3 030c 	sub.w	r3, r3, ip
 8006d24:	4432      	add	r2, r6
 8006d26:	4640      	mov	r0, r8
 8006d28:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006d2c:	f1be 0e01 	subs.w	lr, lr, #1
 8006d30:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006d34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006d38:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006d3c:	d1db      	bne.n	8006cf6 <__ieee754_sqrt+0xba>
 8006d3e:	430b      	orrs	r3, r1
 8006d40:	d006      	beq.n	8006d50 <__ieee754_sqrt+0x114>
 8006d42:	1c50      	adds	r0, r2, #1
 8006d44:	bf13      	iteet	ne
 8006d46:	3201      	addne	r2, #1
 8006d48:	3401      	addeq	r4, #1
 8006d4a:	4672      	moveq	r2, lr
 8006d4c:	f022 0201 	bicne.w	r2, r2, #1
 8006d50:	1063      	asrs	r3, r4, #1
 8006d52:	0852      	lsrs	r2, r2, #1
 8006d54:	07e1      	lsls	r1, r4, #31
 8006d56:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006d5a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006d5e:	bf48      	it	mi
 8006d60:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006d64:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006d68:	4614      	mov	r4, r2
 8006d6a:	e781      	b.n	8006c70 <__ieee754_sqrt+0x34>
 8006d6c:	0ad9      	lsrs	r1, r3, #11
 8006d6e:	3815      	subs	r0, #21
 8006d70:	055b      	lsls	r3, r3, #21
 8006d72:	2900      	cmp	r1, #0
 8006d74:	d0fa      	beq.n	8006d6c <__ieee754_sqrt+0x130>
 8006d76:	02cd      	lsls	r5, r1, #11
 8006d78:	d50a      	bpl.n	8006d90 <__ieee754_sqrt+0x154>
 8006d7a:	f1c2 0420 	rsb	r4, r2, #32
 8006d7e:	fa23 f404 	lsr.w	r4, r3, r4
 8006d82:	1e55      	subs	r5, r2, #1
 8006d84:	4093      	lsls	r3, r2
 8006d86:	4321      	orrs	r1, r4
 8006d88:	1b42      	subs	r2, r0, r5
 8006d8a:	e78a      	b.n	8006ca2 <__ieee754_sqrt+0x66>
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	e7f0      	b.n	8006d72 <__ieee754_sqrt+0x136>
 8006d90:	0049      	lsls	r1, r1, #1
 8006d92:	3201      	adds	r2, #1
 8006d94:	e7ef      	b.n	8006d76 <__ieee754_sqrt+0x13a>
 8006d96:	4680      	mov	r8, r0
 8006d98:	e7bd      	b.n	8006d16 <__ieee754_sqrt+0xda>
 8006d9a:	bf00      	nop
 8006d9c:	7ff00000 	.word	0x7ff00000

08006da0 <with_errno>:
 8006da0:	b570      	push	{r4, r5, r6, lr}
 8006da2:	4604      	mov	r4, r0
 8006da4:	460d      	mov	r5, r1
 8006da6:	4616      	mov	r6, r2
 8006da8:	f7fe ff9a 	bl	8005ce0 <__errno>
 8006dac:	4629      	mov	r1, r5
 8006dae:	6006      	str	r6, [r0, #0]
 8006db0:	4620      	mov	r0, r4
 8006db2:	bd70      	pop	{r4, r5, r6, pc}

08006db4 <xflow>:
 8006db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006db6:	4614      	mov	r4, r2
 8006db8:	461d      	mov	r5, r3
 8006dba:	b108      	cbz	r0, 8006dc0 <xflow+0xc>
 8006dbc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006dc0:	e9cd 2300 	strd	r2, r3, [sp]
 8006dc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dc8:	4620      	mov	r0, r4
 8006dca:	4629      	mov	r1, r5
 8006dcc:	f7f9 fbc0 	bl	8000550 <__aeabi_dmul>
 8006dd0:	2222      	movs	r2, #34	; 0x22
 8006dd2:	b003      	add	sp, #12
 8006dd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006dd8:	f7ff bfe2 	b.w	8006da0 <with_errno>

08006ddc <__math_uflow>:
 8006ddc:	b508      	push	{r3, lr}
 8006dde:	2200      	movs	r2, #0
 8006de0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006de4:	f7ff ffe6 	bl	8006db4 <xflow>
 8006de8:	ec41 0b10 	vmov	d0, r0, r1
 8006dec:	bd08      	pop	{r3, pc}

08006dee <__math_oflow>:
 8006dee:	b508      	push	{r3, lr}
 8006df0:	2200      	movs	r2, #0
 8006df2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006df6:	f7ff ffdd 	bl	8006db4 <xflow>
 8006dfa:	ec41 0b10 	vmov	d0, r0, r1
 8006dfe:	bd08      	pop	{r3, pc}

08006e00 <fabs>:
 8006e00:	ec51 0b10 	vmov	r0, r1, d0
 8006e04:	ee10 2a10 	vmov	r2, s0
 8006e08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006e0c:	ec43 2b10 	vmov	d0, r2, r3
 8006e10:	4770      	bx	lr

08006e12 <finite>:
 8006e12:	b082      	sub	sp, #8
 8006e14:	ed8d 0b00 	vstr	d0, [sp]
 8006e18:	9801      	ldr	r0, [sp, #4]
 8006e1a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006e1e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006e22:	0fc0      	lsrs	r0, r0, #31
 8006e24:	b002      	add	sp, #8
 8006e26:	4770      	bx	lr

08006e28 <scalbn>:
 8006e28:	b570      	push	{r4, r5, r6, lr}
 8006e2a:	ec55 4b10 	vmov	r4, r5, d0
 8006e2e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006e32:	4606      	mov	r6, r0
 8006e34:	462b      	mov	r3, r5
 8006e36:	b99a      	cbnz	r2, 8006e60 <scalbn+0x38>
 8006e38:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006e3c:	4323      	orrs	r3, r4
 8006e3e:	d036      	beq.n	8006eae <scalbn+0x86>
 8006e40:	4b39      	ldr	r3, [pc, #228]	; (8006f28 <scalbn+0x100>)
 8006e42:	4629      	mov	r1, r5
 8006e44:	ee10 0a10 	vmov	r0, s0
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f7f9 fb81 	bl	8000550 <__aeabi_dmul>
 8006e4e:	4b37      	ldr	r3, [pc, #220]	; (8006f2c <scalbn+0x104>)
 8006e50:	429e      	cmp	r6, r3
 8006e52:	4604      	mov	r4, r0
 8006e54:	460d      	mov	r5, r1
 8006e56:	da10      	bge.n	8006e7a <scalbn+0x52>
 8006e58:	a32b      	add	r3, pc, #172	; (adr r3, 8006f08 <scalbn+0xe0>)
 8006e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5e:	e03a      	b.n	8006ed6 <scalbn+0xae>
 8006e60:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006e64:	428a      	cmp	r2, r1
 8006e66:	d10c      	bne.n	8006e82 <scalbn+0x5a>
 8006e68:	ee10 2a10 	vmov	r2, s0
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	4629      	mov	r1, r5
 8006e70:	f7f9 f9b8 	bl	80001e4 <__adddf3>
 8006e74:	4604      	mov	r4, r0
 8006e76:	460d      	mov	r5, r1
 8006e78:	e019      	b.n	8006eae <scalbn+0x86>
 8006e7a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006e7e:	460b      	mov	r3, r1
 8006e80:	3a36      	subs	r2, #54	; 0x36
 8006e82:	4432      	add	r2, r6
 8006e84:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006e88:	428a      	cmp	r2, r1
 8006e8a:	dd08      	ble.n	8006e9e <scalbn+0x76>
 8006e8c:	2d00      	cmp	r5, #0
 8006e8e:	a120      	add	r1, pc, #128	; (adr r1, 8006f10 <scalbn+0xe8>)
 8006e90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e94:	da1c      	bge.n	8006ed0 <scalbn+0xa8>
 8006e96:	a120      	add	r1, pc, #128	; (adr r1, 8006f18 <scalbn+0xf0>)
 8006e98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e9c:	e018      	b.n	8006ed0 <scalbn+0xa8>
 8006e9e:	2a00      	cmp	r2, #0
 8006ea0:	dd08      	ble.n	8006eb4 <scalbn+0x8c>
 8006ea2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006ea6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006eaa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006eae:	ec45 4b10 	vmov	d0, r4, r5
 8006eb2:	bd70      	pop	{r4, r5, r6, pc}
 8006eb4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006eb8:	da19      	bge.n	8006eee <scalbn+0xc6>
 8006eba:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006ebe:	429e      	cmp	r6, r3
 8006ec0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006ec4:	dd0a      	ble.n	8006edc <scalbn+0xb4>
 8006ec6:	a112      	add	r1, pc, #72	; (adr r1, 8006f10 <scalbn+0xe8>)
 8006ec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e2      	bne.n	8006e96 <scalbn+0x6e>
 8006ed0:	a30f      	add	r3, pc, #60	; (adr r3, 8006f10 <scalbn+0xe8>)
 8006ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed6:	f7f9 fb3b 	bl	8000550 <__aeabi_dmul>
 8006eda:	e7cb      	b.n	8006e74 <scalbn+0x4c>
 8006edc:	a10a      	add	r1, pc, #40	; (adr r1, 8006f08 <scalbn+0xe0>)
 8006ede:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0b8      	beq.n	8006e58 <scalbn+0x30>
 8006ee6:	a10e      	add	r1, pc, #56	; (adr r1, 8006f20 <scalbn+0xf8>)
 8006ee8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006eec:	e7b4      	b.n	8006e58 <scalbn+0x30>
 8006eee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006ef2:	3236      	adds	r2, #54	; 0x36
 8006ef4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ef8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006efc:	4620      	mov	r0, r4
 8006efe:	4b0c      	ldr	r3, [pc, #48]	; (8006f30 <scalbn+0x108>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	e7e8      	b.n	8006ed6 <scalbn+0xae>
 8006f04:	f3af 8000 	nop.w
 8006f08:	c2f8f359 	.word	0xc2f8f359
 8006f0c:	01a56e1f 	.word	0x01a56e1f
 8006f10:	8800759c 	.word	0x8800759c
 8006f14:	7e37e43c 	.word	0x7e37e43c
 8006f18:	8800759c 	.word	0x8800759c
 8006f1c:	fe37e43c 	.word	0xfe37e43c
 8006f20:	c2f8f359 	.word	0xc2f8f359
 8006f24:	81a56e1f 	.word	0x81a56e1f
 8006f28:	43500000 	.word	0x43500000
 8006f2c:	ffff3cb0 	.word	0xffff3cb0
 8006f30:	3c900000 	.word	0x3c900000

08006f34 <_init>:
 8006f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f36:	bf00      	nop
 8006f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f3a:	bc08      	pop	{r3}
 8006f3c:	469e      	mov	lr, r3
 8006f3e:	4770      	bx	lr

08006f40 <_fini>:
 8006f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f42:	bf00      	nop
 8006f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f46:	bc08      	pop	{r3}
 8006f48:	469e      	mov	lr, r3
 8006f4a:	4770      	bx	lr
