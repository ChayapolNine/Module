
LAB_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c70c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  0800c8a8  0800c8a8  0001c8a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cad8  0800cad8  000203c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cad8  0800cad8  0001cad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cae0  0800cae0  000203c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cae0  0800cae0  0001cae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cae4  0800cae4  0001cae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c8  20000000  0800cae8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f88  200003c8  0800ceb0  000203c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001350  0800ceb0  00021350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c78  00000000  00000000  000203f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a4c  00000000  00000000  00036070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  00038ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  00039d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018caf  00000000  00000000  0003ae40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e87  00000000  00000000  00053aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e8cd  00000000  00000000  0006a976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00109243  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005820  00000000  00000000  00109294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200003c8 	.word	0x200003c8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c88c 	.word	0x0800c88c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200003cc 	.word	0x200003cc
 80001d4:	0800c88c 	.word	0x0800c88c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b992 	b.w	8000edc <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f824 	bl	8000c0c <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__aeabi_d2ulz>:
 8000bd0:	b5d0      	push	{r4, r6, r7, lr}
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <__aeabi_d2ulz+0x34>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4606      	mov	r6, r0
 8000bd8:	460f      	mov	r7, r1
 8000bda:	f7ff fcb9 	bl	8000550 <__aeabi_dmul>
 8000bde:	f000 f97f 	bl	8000ee0 <__aeabi_d2uiz>
 8000be2:	4604      	mov	r4, r0
 8000be4:	f7ff fc3a 	bl	800045c <__aeabi_ui2d>
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <__aeabi_d2ulz+0x38>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	f7ff fcb0 	bl	8000550 <__aeabi_dmul>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	4630      	mov	r0, r6
 8000bf6:	4639      	mov	r1, r7
 8000bf8:	f7ff faf2 	bl	80001e0 <__aeabi_dsub>
 8000bfc:	f000 f970 	bl	8000ee0 <__aeabi_d2uiz>
 8000c00:	4621      	mov	r1, r4
 8000c02:	bdd0      	pop	{r4, r6, r7, pc}
 8000c04:	3df00000 	.word	0x3df00000
 8000c08:	41f00000 	.word	0x41f00000

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9d08      	ldr	r5, [sp, #32]
 8000c12:	4604      	mov	r4, r0
 8000c14:	468e      	mov	lr, r1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d14d      	bne.n	8000cb6 <__udivmoddi4+0xaa>
 8000c1a:	428a      	cmp	r2, r1
 8000c1c:	4694      	mov	ip, r2
 8000c1e:	d969      	bls.n	8000cf4 <__udivmoddi4+0xe8>
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	b152      	cbz	r2, 8000c3c <__udivmoddi4+0x30>
 8000c26:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2a:	f1c2 0120 	rsb	r1, r2, #32
 8000c2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c32:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c36:	ea41 0e03 	orr.w	lr, r1, r3
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c40:	0c21      	lsrs	r1, r4, #16
 8000c42:	fbbe f6f8 	udiv	r6, lr, r8
 8000c46:	fa1f f78c 	uxth.w	r7, ip
 8000c4a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c52:	fb06 f107 	mul.w	r1, r6, r7
 8000c56:	4299      	cmp	r1, r3
 8000c58:	d90a      	bls.n	8000c70 <__udivmoddi4+0x64>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c62:	f080 811f 	bcs.w	8000ea4 <__udivmoddi4+0x298>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 811c 	bls.w	8000ea4 <__udivmoddi4+0x298>
 8000c6c:	3e02      	subs	r6, #2
 8000c6e:	4463      	add	r3, ip
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c78:	fb08 3310 	mls	r3, r8, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 f707 	mul.w	r7, r0, r7
 8000c84:	42a7      	cmp	r7, r4
 8000c86:	d90a      	bls.n	8000c9e <__udivmoddi4+0x92>
 8000c88:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c90:	f080 810a 	bcs.w	8000ea8 <__udivmoddi4+0x29c>
 8000c94:	42a7      	cmp	r7, r4
 8000c96:	f240 8107 	bls.w	8000ea8 <__udivmoddi4+0x29c>
 8000c9a:	4464      	add	r4, ip
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca2:	1be4      	subs	r4, r4, r7
 8000ca4:	2600      	movs	r6, #0
 8000ca6:	b11d      	cbz	r5, 8000cb0 <__udivmoddi4+0xa4>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xc2>
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	f000 80ef 	beq.w	8000e9e <__udivmoddi4+0x292>
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc6:	4630      	mov	r0, r6
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f683 	clz	r6, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d14a      	bne.n	8000d6c <__udivmoddi4+0x160>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd4>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80f9 	bhi.w	8000ed2 <__udivmoddi4+0x2c6>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	469e      	mov	lr, r3
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa4>
 8000cee:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa4>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xec>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 8092 	bne.w	8000e26 <__udivmoddi4+0x21a>
 8000d02:	eba1 010c 	sub.w	r1, r1, ip
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f fe8c 	uxth.w	lr, ip
 8000d0e:	2601      	movs	r6, #1
 8000d10:	0c20      	lsrs	r0, r4, #16
 8000d12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d16:	fb07 1113 	mls	r1, r7, r3, r1
 8000d1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1e:	fb0e f003 	mul.w	r0, lr, r3
 8000d22:	4288      	cmp	r0, r1
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x12c>
 8000d26:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x12a>
 8000d30:	4288      	cmp	r0, r1
 8000d32:	f200 80cb 	bhi.w	8000ecc <__udivmoddi4+0x2c0>
 8000d36:	4643      	mov	r3, r8
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d40:	fb07 1110 	mls	r1, r7, r0, r1
 8000d44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d48:	fb0e fe00 	mul.w	lr, lr, r0
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x156>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d58:	d202      	bcs.n	8000d60 <__udivmoddi4+0x154>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f200 80bb 	bhi.w	8000ed6 <__udivmoddi4+0x2ca>
 8000d60:	4608      	mov	r0, r1
 8000d62:	eba4 040e 	sub.w	r4, r4, lr
 8000d66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d6a:	e79c      	b.n	8000ca6 <__udivmoddi4+0x9a>
 8000d6c:	f1c6 0720 	rsb	r7, r6, #32
 8000d70:	40b3      	lsls	r3, r6
 8000d72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d82:	431c      	orrs	r4, r3
 8000d84:	40f9      	lsrs	r1, r7
 8000d86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d92:	0c20      	lsrs	r0, r4, #16
 8000d94:	fa1f fe8c 	uxth.w	lr, ip
 8000d98:	fb09 1118 	mls	r1, r9, r8, r1
 8000d9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000da0:	fb08 f00e 	mul.w	r0, r8, lr
 8000da4:	4288      	cmp	r0, r1
 8000da6:	fa02 f206 	lsl.w	r2, r2, r6
 8000daa:	d90b      	bls.n	8000dc4 <__udivmoddi4+0x1b8>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db4:	f080 8088 	bcs.w	8000ec8 <__udivmoddi4+0x2bc>
 8000db8:	4288      	cmp	r0, r1
 8000dba:	f240 8085 	bls.w	8000ec8 <__udivmoddi4+0x2bc>
 8000dbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc2:	4461      	add	r1, ip
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dcc:	fb09 1110 	mls	r1, r9, r0, r1
 8000dd0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	458e      	cmp	lr, r1
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x1e2>
 8000ddc:	eb1c 0101 	adds.w	r1, ip, r1
 8000de0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de4:	d26c      	bcs.n	8000ec0 <__udivmoddi4+0x2b4>
 8000de6:	458e      	cmp	lr, r1
 8000de8:	d96a      	bls.n	8000ec0 <__udivmoddi4+0x2b4>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4461      	add	r1, ip
 8000dee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000df2:	fba0 9402 	umull	r9, r4, r0, r2
 8000df6:	eba1 010e 	sub.w	r1, r1, lr
 8000dfa:	42a1      	cmp	r1, r4
 8000dfc:	46c8      	mov	r8, r9
 8000dfe:	46a6      	mov	lr, r4
 8000e00:	d356      	bcc.n	8000eb0 <__udivmoddi4+0x2a4>
 8000e02:	d053      	beq.n	8000eac <__udivmoddi4+0x2a0>
 8000e04:	b15d      	cbz	r5, 8000e1e <__udivmoddi4+0x212>
 8000e06:	ebb3 0208 	subs.w	r2, r3, r8
 8000e0a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e12:	fa22 f306 	lsr.w	r3, r2, r6
 8000e16:	40f1      	lsrs	r1, r6
 8000e18:	431f      	orrs	r7, r3
 8000e1a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1e:	2600      	movs	r6, #0
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	f1c2 0320 	rsb	r3, r2, #32
 8000e2a:	40d8      	lsrs	r0, r3
 8000e2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e30:	fa21 f303 	lsr.w	r3, r1, r3
 8000e34:	4091      	lsls	r1, r2
 8000e36:	4301      	orrs	r1, r0
 8000e38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3c:	fa1f fe8c 	uxth.w	lr, ip
 8000e40:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e44:	fb07 3610 	mls	r6, r7, r0, r3
 8000e48:	0c0b      	lsrs	r3, r1, #16
 8000e4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e52:	429e      	cmp	r6, r3
 8000e54:	fa04 f402 	lsl.w	r4, r4, r2
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x260>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e62:	d22f      	bcs.n	8000ec4 <__udivmoddi4+0x2b8>
 8000e64:	429e      	cmp	r6, r3
 8000e66:	d92d      	bls.n	8000ec4 <__udivmoddi4+0x2b8>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4463      	add	r3, ip
 8000e6c:	1b9b      	subs	r3, r3, r6
 8000e6e:	b289      	uxth	r1, r1
 8000e70:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e74:	fb07 3316 	mls	r3, r7, r6, r3
 8000e78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e80:	428b      	cmp	r3, r1
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x28a>
 8000e84:	eb1c 0101 	adds.w	r1, ip, r1
 8000e88:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e8c:	d216      	bcs.n	8000ebc <__udivmoddi4+0x2b0>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d914      	bls.n	8000ebc <__udivmoddi4+0x2b0>
 8000e92:	3e02      	subs	r6, #2
 8000e94:	4461      	add	r1, ip
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e9c:	e738      	b.n	8000d10 <__udivmoddi4+0x104>
 8000e9e:	462e      	mov	r6, r5
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	e705      	b.n	8000cb0 <__udivmoddi4+0xa4>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	e6e3      	b.n	8000c70 <__udivmoddi4+0x64>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6f8      	b.n	8000c9e <__udivmoddi4+0x92>
 8000eac:	454b      	cmp	r3, r9
 8000eae:	d2a9      	bcs.n	8000e04 <__udivmoddi4+0x1f8>
 8000eb0:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb8:	3801      	subs	r0, #1
 8000eba:	e7a3      	b.n	8000e04 <__udivmoddi4+0x1f8>
 8000ebc:	4646      	mov	r6, r8
 8000ebe:	e7ea      	b.n	8000e96 <__udivmoddi4+0x28a>
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	e794      	b.n	8000dee <__udivmoddi4+0x1e2>
 8000ec4:	4640      	mov	r0, r8
 8000ec6:	e7d1      	b.n	8000e6c <__udivmoddi4+0x260>
 8000ec8:	46d0      	mov	r8, sl
 8000eca:	e77b      	b.n	8000dc4 <__udivmoddi4+0x1b8>
 8000ecc:	3b02      	subs	r3, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	e732      	b.n	8000d38 <__udivmoddi4+0x12c>
 8000ed2:	4630      	mov	r0, r6
 8000ed4:	e709      	b.n	8000cea <__udivmoddi4+0xde>
 8000ed6:	4464      	add	r4, ip
 8000ed8:	3802      	subs	r0, #2
 8000eda:	e742      	b.n	8000d62 <__udivmoddi4+0x156>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <__aeabi_d2uiz>:
 8000ee0:	004a      	lsls	r2, r1, #1
 8000ee2:	d211      	bcs.n	8000f08 <__aeabi_d2uiz+0x28>
 8000ee4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ee8:	d211      	bcs.n	8000f0e <__aeabi_d2uiz+0x2e>
 8000eea:	d50d      	bpl.n	8000f08 <__aeabi_d2uiz+0x28>
 8000eec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ef0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ef4:	d40e      	bmi.n	8000f14 <__aeabi_d2uiz+0x34>
 8000ef6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000efa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000efe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f02:	fa23 f002 	lsr.w	r0, r3, r2
 8000f06:	4770      	bx	lr
 8000f08:	f04f 0000 	mov.w	r0, #0
 8000f0c:	4770      	bx	lr
 8000f0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f12:	d102      	bne.n	8000f1a <__aeabi_d2uiz+0x3a>
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	4770      	bx	lr
 8000f1a:	f04f 0000 	mov.w	r0, #0
 8000f1e:	4770      	bx	lr

08000f20 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <modbus_1t5_Timeout+0x1c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	751a      	strb	r2, [r3, #20]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	200003e4 	.word	0x200003e4

08000f40 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <modbus_3t5_Timeout+0x1c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	755a      	strb	r2, [r3, #21]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	200003e4 	.word	0x200003e4

08000f60 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000f72:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8000f7a:	1c59      	adds	r1, r3, #1
 8000f7c:	b289      	uxth	r1, r1
 8000f7e:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8000f82:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f86:	d210      	bcs.n	8000faa <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68d8      	ldr	r0, [r3, #12]
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000f9a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000f9e:	4413      	add	r3, r2
 8000fa0:	3302      	adds	r3, #2
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f007 ff75 	bl	8008e94 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200003e4 	.word	0x200003e4

08000fc4 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000fce:	4a24      	ldr	r2, [pc, #144]	; (8001060 <Modbus_init+0x9c>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <Modbus_init+0x9c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000fdc:	4b20      	ldr	r3, [pc, #128]	; (8001060 <Modbus_init+0x9c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	691b      	ldr	r3, [r3, #16]
 8000fe2:	4a20      	ldr	r2, [pc, #128]	; (8001064 <Modbus_init+0xa0>)
 8000fe4:	2114      	movs	r1, #20
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f007 f958 	bl	800829c <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000fec:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <Modbus_init+0x9c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	4a1d      	ldr	r2, [pc, #116]	; (8001068 <Modbus_init+0xa4>)
 8000ff4:	210e      	movs	r1, #14
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f007 f950 	bl	800829c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <Modbus_init+0x9c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	4a1a      	ldr	r2, [pc, #104]	; (800106c <Modbus_init+0xa8>)
 8001004:	2103      	movs	r1, #3
 8001006:	4618      	mov	r0, r3
 8001008:	f007 fe9c 	bl	8008d44 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <Modbus_init+0x9c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	68d8      	ldr	r0, [r3, #12]
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <Modbus_init+0x9c>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <Modbus_init+0x9c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800101e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001022:	4413      	add	r3, r2
 8001024:	3302      	adds	r3, #2
 8001026:	2201      	movs	r2, #1
 8001028:	4619      	mov	r1, r3
 800102a:	f007 ff33 	bl	8008e94 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <Modbus_init+0x9c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b01      	cmp	r3, #1
 800103c:	d10c      	bne.n	8001058 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <Modbus_init+0x9c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	691b      	ldr	r3, [r3, #16]
 8001044:	4618      	mov	r0, r3
 8001046:	f006 f9d3 	bl	80073f0 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <Modbus_init+0x9c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f006 fc12 	bl	800787c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200003e4 	.word	0x200003e4
 8001064:	08000f21 	.word	0x08000f21
 8001068:	08000f41 	.word	0x08000f41
 800106c:	08000f61 	.word	0x08000f61

08001070 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 800107c:	23ff      	movs	r3, #255	; 0xff
 800107e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001080:	23ff      	movs	r3, #255	; 0xff
 8001082:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001084:	e013      	b.n	80010ae <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	607a      	str	r2, [r7, #4]
 800108c:	781a      	ldrb	r2, [r3, #0]
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	4053      	eors	r3, r2
 8001092:	b2db      	uxtb	r3, r3
 8001094:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <CRC16+0x64>)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4413      	add	r3, r2
 800109c:	781a      	ldrb	r2, [r3, #0]
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	4053      	eors	r3, r2
 80010a2:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80010a4:	4a0c      	ldr	r2, [pc, #48]	; (80010d8 <CRC16+0x68>)
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	4413      	add	r3, r2
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80010ae:	883b      	ldrh	r3, [r7, #0]
 80010b0:	1e5a      	subs	r2, r3, #1
 80010b2:	803a      	strh	r2, [r7, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1e6      	bne.n	8001086 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21a      	sxth	r2, r3
 80010be:	7bbb      	ldrb	r3, [r7, #14]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	b29b      	uxth	r3, r3
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	20000100 	.word	0x20000100
 80010d8:	20000000 	.word	0x20000000

080010dc <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80010e2:	4b81      	ldr	r3, [pc, #516]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	7e1b      	ldrb	r3, [r3, #24]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	2b03      	cmp	r3, #3
 80010ec:	d80a      	bhi.n	8001104 <Modbus_Protocal_Worker+0x28>
 80010ee:	a201      	add	r2, pc, #4	; (adr r2, 80010f4 <Modbus_Protocal_Worker+0x18>)
 80010f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f4:	0800110f 	.word	0x0800110f
 80010f8:	080012af 	.word	0x080012af
 80010fc:	0800119b 	.word	0x0800119b
 8001100:	080011c1 	.word	0x080011c1
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001104:	4b78      	ldr	r3, [pc, #480]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2201      	movs	r2, #1
 800110a:	761a      	strb	r2, [r3, #24]
		break;
 800110c:	e0e8      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800110e:	4b76      	ldr	r3, [pc, #472]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 800111a:	f000 f9dd 	bl	80014d8 <Modbus_Emission>
 800111e:	e01c      	b.n	800115a <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001120:	4b71      	ldr	r3, [pc, #452]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	7d9b      	ldrb	r3, [r3, #22]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d017      	beq.n	800115a <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800112a:	4b6f      	ldr	r3, [pc, #444]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001132:	4b6d      	ldr	r3, [pc, #436]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2200      	movs	r2, #0
 8001138:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 800113a:	4b6b      	ldr	r3, [pc, #428]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b68      	ldr	r3, [pc, #416]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f042 0201 	orr.w	r2, r2, #1
 8001150:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001152:	4b65      	ldr	r3, [pc, #404]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2203      	movs	r2, #3
 8001158:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800115a:	4b63      	ldr	r3, [pc, #396]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b20      	cmp	r3, #32
 8001168:	f040 80b3 	bne.w	80012d2 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800116c:	4b5e      	ldr	r3, [pc, #376]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2200      	movs	r2, #0
 8001172:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001176:	4b5c      	ldr	r3, [pc, #368]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68d8      	ldr	r0, [r3, #12]
 800117c:	4b5a      	ldr	r3, [pc, #360]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b59      	ldr	r3, [pc, #356]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001188:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800118c:	4413      	add	r3, r2
 800118e:	3302      	adds	r3, #2
 8001190:	2201      	movs	r2, #1
 8001192:	4619      	mov	r1, r3
 8001194:	f007 fe7e 	bl	8008e94 <HAL_UART_Receive_IT>
		}
		break;
 8001198:	e09b      	b.n	80012d2 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800119a:	4b53      	ldr	r3, [pc, #332]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	7d1b      	ldrb	r3, [r3, #20]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 8098 	beq.w	80012d6 <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 80011a6:	4b50      	ldr	r3, [pc, #320]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2200      	movs	r2, #0
 80011ac:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80011ae:	4b4e      	ldr	r3, [pc, #312]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	22fe      	movs	r2, #254	; 0xfe
 80011b4:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80011b6:	4b4c      	ldr	r3, [pc, #304]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2204      	movs	r2, #4
 80011bc:	761a      	strb	r2, [r3, #24]
		}
		break;
 80011be:	e08a      	b.n	80012d6 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80011c0:	4b49      	ldr	r3, [pc, #292]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	7d9b      	ldrb	r3, [r3, #22]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d009      	beq.n	80011de <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 80011ca:	4b47      	ldr	r3, [pc, #284]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d103      	bne.n	80011de <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80011d6:	4b44      	ldr	r3, [pc, #272]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	22ff      	movs	r2, #255	; 0xff
 80011dc:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80011de:	4b42      	ldr	r3, [pc, #264]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80011e6:	f113 0f02 	cmn.w	r3, #2
 80011ea:	d150      	bne.n	800128e <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80011ec:	4b3e      	ldr	r3, [pc, #248]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2200      	movs	r2, #0
 80011f2:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80011f4:	4b3c      	ldr	r3, [pc, #240]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f203 2272 	addw	r2, r3, #626	; 0x272
 80011fc:	4b3a      	ldr	r3, [pc, #232]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001204:	3b02      	subs	r3, #2
 8001206:	4619      	mov	r1, r3
 8001208:	4610      	mov	r0, r2
 800120a:	f7ff ff31 	bl	8001070 <CRC16>
 800120e:	4603      	mov	r3, r0
 8001210:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001212:	793a      	ldrb	r2, [r7, #4]
 8001214:	4b34      	ldr	r3, [pc, #208]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001216:	6819      	ldr	r1, [r3, #0]
 8001218:	4b33      	ldr	r3, [pc, #204]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001220:	3b02      	subs	r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001228:	429a      	cmp	r2, r3
 800122a:	d10c      	bne.n	8001246 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 800122c:	797a      	ldrb	r2, [r7, #5]
 800122e:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001230:	6819      	ldr	r1, [r3, #0]
 8001232:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800123a:	3b01      	subs	r3, #1
 800123c:	440b      	add	r3, r1
 800123e:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001242:	429a      	cmp	r2, r3
 8001244:	d004      	beq.n	8001250 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001246:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	22ff      	movs	r2, #255	; 0xff
 800124c:	75da      	strb	r2, [r3, #23]
				break;
 800124e:	e047      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001250:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001258:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	d113      	bne.n	800128a <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001262:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800126a:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 8001272:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800127c:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800127e:	461a      	mov	r2, r3
 8001280:	f008 ffe2 	bl	800a248 <memcpy>

			//execute command
			Modbus_frame_response();
 8001284:	f000 f910 	bl	80014a8 <Modbus_frame_response>
 8001288:	e001      	b.n	800128e <Modbus_Protocal_Worker+0x1b2>
				break;
 800128a:	bf00      	nop
					}
		break;


	}
}
 800128c:	e028      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	7d5b      	ldrb	r3, [r3, #21]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d020      	beq.n	80012da <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2201      	movs	r2, #1
 800129e:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f007 fea2 	bl	8008ff0 <HAL_UART_AbortReceive>
		break;
 80012ac:	e015      	b.n	80012da <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b20      	cmp	r3, #32
 80012bc:	d10f      	bne.n	80012de <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2201      	movs	r2, #1
 80012ce:	761a      	strb	r2, [r3, #24]
		break;
 80012d0:	e005      	b.n	80012de <Modbus_Protocal_Worker+0x202>
		break;
 80012d2:	bf00      	nop
 80012d4:	e004      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
		break;
 80012d6:	bf00      	nop
 80012d8:	e002      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
		break;
 80012da:	bf00      	nop
 80012dc:	e000      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
		break;
 80012de:	bf00      	nop
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200003e4 	.word	0x200003e4

080012ec <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <modbusWrite1Register+0x80>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	7e9b      	ldrb	r3, [r3, #26]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	4b1b      	ldr	r3, [pc, #108]	; (800136c <modbusWrite1Register+0x80>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	7edb      	ldrb	r3, [r3, #27]
 8001304:	b29b      	uxth	r3, r3
 8001306:	4413      	add	r3, r2
 8001308:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800130a:	88fa      	ldrh	r2, [r7, #6]
 800130c:	4b17      	ldr	r3, [pc, #92]	; (800136c <modbusWrite1Register+0x80>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	429a      	cmp	r2, r3
 8001314:	d903      	bls.n	800131e <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001316:	2002      	movs	r0, #2
 8001318:	f000 f8a4 	bl	8001464 <ModbusErrorReply>
			 return;
 800131c:	e023      	b.n	8001366 <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <modbusWrite1Register+0x80>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <modbusWrite1Register+0x80>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6859      	ldr	r1, [r3, #4]
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	440b      	add	r3, r1
 800132e:	7f12      	ldrb	r2, [r2, #28]
 8001330:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <modbusWrite1Register+0x80>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <modbusWrite1Register+0x80>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6859      	ldr	r1, [r3, #4]
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	440b      	add	r3, r1
 8001342:	7f52      	ldrb	r2, [r2, #29]
 8001344:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <modbusWrite1Register+0x80>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <modbusWrite1Register+0x80>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8001354:	2208      	movs	r2, #8
 8001356:	4619      	mov	r1, r3
 8001358:	f008 ff76 	bl	800a248 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <modbusWrite1Register+0x80>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2205      	movs	r2, #5
 8001362:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200003e4 	.word	0x200003e4

08001370 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001376:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <modbusRead1Register+0xf0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	7f1b      	ldrb	r3, [r3, #28]
 800137c:	b29b      	uxth	r3, r3
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	b29a      	uxth	r2, r3
 8001382:	4b37      	ldr	r3, [pc, #220]	; (8001460 <modbusRead1Register+0xf0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	7f5b      	ldrb	r3, [r3, #29]
 8001388:	b29b      	uxth	r3, r3
 800138a:	4413      	add	r3, r2
 800138c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800138e:	4b34      	ldr	r3, [pc, #208]	; (8001460 <modbusRead1Register+0xf0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	7e9b      	ldrb	r3, [r3, #26]
 8001394:	b29b      	uxth	r3, r3
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	b29a      	uxth	r2, r3
 800139a:	4b31      	ldr	r3, [pc, #196]	; (8001460 <modbusRead1Register+0xf0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	7edb      	ldrb	r3, [r3, #27]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	4413      	add	r3, r2
 80013a4:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d002      	beq.n	80013b2 <modbusRead1Register+0x42>
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	2b7d      	cmp	r3, #125	; 0x7d
 80013b0:	d903      	bls.n	80013ba <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80013b2:	2003      	movs	r0, #3
 80013b4:	f000 f856 	bl	8001464 <ModbusErrorReply>
		 return;
 80013b8:	e04e      	b.n	8001458 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80013ba:	88ba      	ldrh	r2, [r7, #4]
 80013bc:	4b28      	ldr	r3, [pc, #160]	; (8001460 <modbusRead1Register+0xf0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d808      	bhi.n	80013d8 <modbusRead1Register+0x68>
 80013c6:	88ba      	ldrh	r2, [r7, #4]
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	4413      	add	r3, r2
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b24      	ldr	r3, [pc, #144]	; (8001460 <modbusRead1Register+0xf0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d903      	bls.n	80013e0 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80013d8:	2002      	movs	r0, #2
 80013da:	f000 f843 	bl	8001464 <ModbusErrorReply>
		 return;
 80013de:	e03b      	b.n	8001458 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80013e0:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <modbusRead1Register+0xf0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2203      	movs	r2, #3
 80013e6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <modbusRead1Register+0xf0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	0052      	lsls	r2, r2, #1
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80013fa:	2400      	movs	r4, #0
 80013fc:	e020      	b.n	8001440 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <modbusRead1Register+0xf0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	88bb      	ldrh	r3, [r7, #4]
 8001406:	4423      	add	r3, r4
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	18d1      	adds	r1, r2, r3
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <modbusRead1Register+0xf0>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	1c63      	adds	r3, r4, #1
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	7849      	ldrb	r1, [r1, #1]
 8001416:	4413      	add	r3, r2
 8001418:	460a      	mov	r2, r1
 800141a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <modbusRead1Register+0xf0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	88bb      	ldrh	r3, [r7, #4]
 8001426:	4423      	add	r3, r4
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	18d1      	adds	r1, r2, r3
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <modbusRead1Register+0xf0>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	0063      	lsls	r3, r4, #1
 8001432:	3303      	adds	r3, #3
 8001434:	7809      	ldrb	r1, [r1, #0]
 8001436:	4413      	add	r3, r2
 8001438:	460a      	mov	r2, r1
 800143a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 800143e:	3401      	adds	r4, #1
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	429c      	cmp	r4, r3
 8001444:	dbdb      	blt.n	80013fe <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	3301      	adds	r3, #1
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <modbusRead1Register+0xf0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	0052      	lsls	r2, r2, #1
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	bd90      	pop	{r4, r7, pc}
 800145e:	bf00      	nop
 8001460:	200003e4 	.word	0x200003e4

08001464 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <ModbusErrorReply+0x40>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	7e5a      	ldrb	r2, [r3, #25]
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <ModbusErrorReply+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <ModbusErrorReply+0x40>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	79fa      	ldrb	r2, [r7, #7]
 8001488:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <ModbusErrorReply+0x40>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2202      	movs	r2, #2
 8001492:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	200003e4 	.word	0x200003e4

080014a8 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <Modbus_frame_response+0x2c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	7e5b      	ldrb	r3, [r3, #25]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d004      	beq.n	80014c0 <Modbus_frame_response+0x18>
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d105      	bne.n	80014c6 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80014ba:	f7ff ff17 	bl	80012ec <modbusWrite1Register>
		break;
 80014be:	e006      	b.n	80014ce <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80014c0:	f7ff ff56 	bl	8001370 <modbusRead1Register>
		break;
 80014c4:	e003      	b.n	80014ce <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80014c6:	2001      	movs	r0, #1
 80014c8:	f7ff ffcc 	bl	8001464 <ModbusErrorReply>
		break;
 80014cc:	bf00      	nop

	}
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200003e4 	.word	0x200003e4

080014d8 <Modbus_Emission>:

void Modbus_Emission()
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80014de:	4b3d      	ldr	r3, [pc, #244]	; (80015d4 <Modbus_Emission+0xfc>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b20      	cmp	r3, #32
 80014ec:	d15e      	bne.n	80015ac <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80014ee:	4b39      	ldr	r3, [pc, #228]	; (80015d4 <Modbus_Emission+0xfc>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <Modbus_Emission+0xfc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	7812      	ldrb	r2, [r2, #0]
 80014f8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80014fc:	4b35      	ldr	r3, [pc, #212]	; (80015d4 <Modbus_Emission+0xfc>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8001504:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001506:	4b33      	ldr	r3, [pc, #204]	; (80015d4 <Modbus_Emission+0xfc>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 800150e:	4b31      	ldr	r3, [pc, #196]	; (80015d4 <Modbus_Emission+0xfc>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 8001516:	461a      	mov	r2, r3
 8001518:	f008 fe96 	bl	800a248 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 800151c:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <Modbus_Emission+0xfc>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001524:	b29a      	uxth	r2, r3
 8001526:	4b2b      	ldr	r3, [pc, #172]	; (80015d4 <Modbus_Emission+0xfc>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	3203      	adds	r2, #3
 800152c:	b292      	uxth	r2, r2
 800152e:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001532:	4b28      	ldr	r3, [pc, #160]	; (80015d4 <Modbus_Emission+0xfc>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <Modbus_Emission+0xfc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001542:	3b02      	subs	r3, #2
 8001544:	4619      	mov	r1, r3
 8001546:	4610      	mov	r0, r2
 8001548:	f7ff fd92 	bl	8001070 <CRC16>
 800154c:	4603      	mov	r3, r0
 800154e:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001550:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <Modbus_Emission+0xfc>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <Modbus_Emission+0xfc>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800155c:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 800155e:	7939      	ldrb	r1, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	460a      	mov	r2, r1
 8001564:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001568:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <Modbus_Emission+0xfc>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <Modbus_Emission+0xfc>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001574:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001576:	7979      	ldrb	r1, [r7, #5]
 8001578:	4413      	add	r3, r2
 800157a:	460a      	mov	r2, r1
 800157c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <Modbus_Emission+0xfc>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b20      	cmp	r3, #32
 800158e:	d10d      	bne.n	80015ac <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <Modbus_Emission+0xfc>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <Modbus_Emission+0xfc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <Modbus_Emission+0xfc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80015a2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80015a6:	461a      	mov	r2, r3
 80015a8:	f007 fca4 	bl	8008ef4 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <Modbus_Emission+0xfc>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2200      	movs	r2, #0
 80015b2:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <Modbus_Emission+0xfc>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2200      	movs	r2, #0
 80015ba:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <Modbus_Emission+0xfc>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2200      	movs	r2, #0
 80015c2:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <Modbus_Emission+0xfc>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2202      	movs	r2, #2
 80015ca:	761a      	strb	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200003e4 	.word	0x200003e4

080015d8 <rt_powd_snf>:
 * Arguments    : double u0
 *                double u1
 * Return Type  : double
 */
static double rt_powd_snf(double u0, double u1)
{
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b08c      	sub	sp, #48	; 0x30
 80015dc:	af00      	add	r7, sp, #0
 80015de:	ed87 0b04 	vstr	d0, [r7, #16]
 80015e2:	ed87 1b02 	vstr	d1, [r7, #8]
  double y;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 80015e6:	ed97 0b04 	vldr	d0, [r7, #16]
 80015ea:	f003 f98b 	bl	8004904 <rtIsNaN>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d106      	bne.n	8001602 <rt_powd_snf+0x2a>
 80015f4:	ed97 0b02 	vldr	d0, [r7, #8]
 80015f8:	f003 f984 	bl	8004904 <rtIsNaN>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d005      	beq.n	800160e <rt_powd_snf+0x36>
    y = rtNaN;
 8001602:	4b80      	ldr	r3, [pc, #512]	; (8001804 <rt_powd_snf+0x22c>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800160c:	e0ef      	b.n	80017ee <rt_powd_snf+0x216>
  } else {
    double d;
    double d1;
    d = fabs(u0);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	ed97 7b00 	vldr	d7, [r7]
 800161e:	ed87 7b08 	vstr	d7, [r7, #32]
    d1 = fabs(u1);
 8001622:	68bc      	ldr	r4, [r7, #8]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800162a:	e9c7 4506 	strd	r4, r5, [r7, #24]
    if (rtIsInf(u1)) {
 800162e:	ed97 0b02 	vldr	d0, [r7, #8]
 8001632:	f003 f939 	bl	80048a8 <rtIsInf>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d049      	beq.n	80016d0 <rt_powd_snf+0xf8>
      if (d == 1.0) {
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	4b71      	ldr	r3, [pc, #452]	; (8001808 <rt_powd_snf+0x230>)
 8001642:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001646:	f7ff f9eb 	bl	8000a20 <__aeabi_dcmpeq>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <rt_powd_snf+0x84>
        y = 1.0;
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b6c      	ldr	r3, [pc, #432]	; (8001808 <rt_powd_snf+0x230>)
 8001656:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800165a:	e0c8      	b.n	80017ee <rt_powd_snf+0x216>
      } else if (d > 1.0) {
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	4b69      	ldr	r3, [pc, #420]	; (8001808 <rt_powd_snf+0x230>)
 8001662:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001666:	f7ff fa03 	bl	8000a70 <__aeabi_dcmpgt>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d017      	beq.n	80016a0 <rt_powd_snf+0xc8>
        if (u1 > 0.0) {
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800167c:	f7ff f9f8 	bl	8000a70 <__aeabi_dcmpgt>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d005      	beq.n	8001692 <rt_powd_snf+0xba>
          y = rtInf;
 8001686:	4b61      	ldr	r3, [pc, #388]	; (800180c <rt_powd_snf+0x234>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001690:	e0ad      	b.n	80017ee <rt_powd_snf+0x216>
        } else {
          y = 0.0;
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800169e:	e0a6      	b.n	80017ee <rt_powd_snf+0x216>
        }
      } else if (u1 > 0.0) {
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016ac:	f7ff f9e0 	bl	8000a70 <__aeabi_dcmpgt>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d006      	beq.n	80016c4 <rt_powd_snf+0xec>
        y = 0.0;
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	f04f 0300 	mov.w	r3, #0
 80016be:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80016c2:	e094      	b.n	80017ee <rt_powd_snf+0x216>
      } else {
        y = rtInf;
 80016c4:	4b51      	ldr	r3, [pc, #324]	; (800180c <rt_powd_snf+0x234>)
 80016c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80016ce:	e08e      	b.n	80017ee <rt_powd_snf+0x216>
      }
    } else if (d1 == 0.0) {
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016dc:	f7ff f9a0 	bl	8000a20 <__aeabi_dcmpeq>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <rt_powd_snf+0x11a>
      y = 1.0;
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	4b47      	ldr	r3, [pc, #284]	; (8001808 <rt_powd_snf+0x230>)
 80016ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80016f0:	e07d      	b.n	80017ee <rt_powd_snf+0x216>
    } else if (d1 == 1.0) {
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	4b44      	ldr	r3, [pc, #272]	; (8001808 <rt_powd_snf+0x230>)
 80016f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016fc:	f7ff f990 	bl	8000a20 <__aeabi_dcmpeq>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d01b      	beq.n	800173e <rt_powd_snf+0x166>
      if (u1 > 0.0) {
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001712:	f7ff f9ad 	bl	8000a70 <__aeabi_dcmpgt>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d004      	beq.n	8001726 <rt_powd_snf+0x14e>
        y = u0;
 800171c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001720:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001724:	e063      	b.n	80017ee <rt_powd_snf+0x216>
      } else {
        y = 1.0 / u0;
 8001726:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800172a:	f04f 0000 	mov.w	r0, #0
 800172e:	4936      	ldr	r1, [pc, #216]	; (8001808 <rt_powd_snf+0x230>)
 8001730:	f7ff f838 	bl	80007a4 <__aeabi_ddiv>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800173c:	e057      	b.n	80017ee <rt_powd_snf+0x216>
      }
    } else if (u1 == 2.0) {
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001746:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800174a:	f7ff f969 	bl	8000a20 <__aeabi_dcmpeq>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00a      	beq.n	800176a <rt_powd_snf+0x192>
      y = u0 * u0;
 8001754:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001758:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800175c:	f7fe fef8 	bl	8000550 <__aeabi_dmul>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001768:	e041      	b.n	80017ee <rt_powd_snf+0x216>
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	4b28      	ldr	r3, [pc, #160]	; (8001810 <rt_powd_snf+0x238>)
 8001770:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001774:	f7ff f954 	bl	8000a20 <__aeabi_dcmpeq>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d011      	beq.n	80017a2 <rt_powd_snf+0x1ca>
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800178a:	f7ff f967 	bl	8000a5c <__aeabi_dcmpge>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d006      	beq.n	80017a2 <rt_powd_snf+0x1ca>
      y = sqrt(u0);
 8001794:	ed97 0b04 	vldr	d0, [r7, #16]
 8001798:	f009 f852 	bl	800a840 <sqrt>
 800179c:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80017a0:	e025      	b.n	80017ee <rt_powd_snf+0x216>
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017ae:	f7ff f941 	bl	8000a34 <__aeabi_dcmplt>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d012      	beq.n	80017de <rt_powd_snf+0x206>
 80017b8:	ed97 0b02 	vldr	d0, [r7, #8]
 80017bc:	f008 fec4 	bl	800a548 <floor>
 80017c0:	ec53 2b10 	vmov	r2, r3, d0
 80017c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017c8:	f7ff f952 	bl	8000a70 <__aeabi_dcmpgt>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d005      	beq.n	80017de <rt_powd_snf+0x206>
      y = rtNaN;
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <rt_powd_snf+0x22c>)
 80017d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80017dc:	e007      	b.n	80017ee <rt_powd_snf+0x216>
    } else {
      y = pow(u0, u1);
 80017de:	ed97 1b02 	vldr	d1, [r7, #8]
 80017e2:	ed97 0b04 	vldr	d0, [r7, #16]
 80017e6:	f008 ffbb 	bl	800a760 <pow>
 80017ea:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
    }
  }
  return y;
 80017ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80017f6:	eeb0 0a47 	vmov.f32	s0, s14
 80017fa:	eef0 0a67 	vmov.f32	s1, s15
 80017fe:	3730      	adds	r7, #48	; 0x30
 8001800:	46bd      	mov	sp, r7
 8001802:	bdb0      	pop	{r4, r5, r7, pc}
 8001804:	20000348 	.word	0x20000348
 8001808:	3ff00000 	.word	0x3ff00000
 800180c:	20000350 	.word	0x20000350
 8001810:	3fe00000 	.word	0x3fe00000
 8001814:	00000000 	.word	0x00000000

08001818 <Qubic>:
 * Return Type  : void
 */
void Qubic(double q_k1, double q_k2, double qdot_k1, double qdot_k2, double tf,
           emxArray_real_T *q_position, emxArray_real_T *q_velocity,
           emxArray_real_T *q_acc)
{
 8001818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800181c:	b0a1      	sub	sp, #132	; 0x84
 800181e:	af00      	add	r7, sp, #0
 8001820:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 8001824:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 8001828:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 800182c:	ed87 3b08 	vstr	d3, [r7, #32]
 8001830:	ed87 4b06 	vstr	d4, [r7, #24]
 8001834:	6178      	str	r0, [r7, #20]
 8001836:	6139      	str	r1, [r7, #16]
 8001838:	60fa      	str	r2, [r7, #12]
  double *q_position_data;
  double *q_velocity_data;
  int i;
  int k;
  int q_acc_tmp_tmp;
  q_acc_data = q_acc->data;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	67fb      	str	r3, [r7, #124]	; 0x7c
  delta1 = tf * 2000.0;
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	4bac      	ldr	r3, [pc, #688]	; (8001af8 <Qubic+0x2e0>)
 8001846:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800184a:	f7fe fe81 	bl	8000550 <__aeabi_dmul>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  if (!(delta1 >= 0.0)) {
 8001856:	2301      	movs	r3, #1
 8001858:	461e      	mov	r6, r3
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001866:	f7ff f8f9 	bl	8000a5c <__aeabi_dcmpge>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <Qubic+0x5c>
 8001870:	2300      	movs	r3, #0
 8001872:	461e      	mov	r6, r3
 8001874:	b2f3      	uxtb	r3, r6
 8001876:	f083 0301 	eor.w	r3, r3, #1
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	d009      	beq.n	8001894 <Qubic+0x7c>
    q_acc->size[0] = 1;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	601a      	str	r2, [r3, #0]
    q_acc->size[1] = 0;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	3304      	adds	r3, #4
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	e158      	b.n	8001b46 <Qubic+0x32e>
  } else {
    d = floor(delta1);
 8001894:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8001898:	f008 fe56 	bl	800a548 <floor>
 800189c:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
    i = q_acc->size[0] * q_acc->size[1];
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	6852      	ldr	r2, [r2, #4]
 80018aa:	3204      	adds	r2, #4
 80018ac:	6812      	ldr	r2, [r2, #0]
 80018ae:	fb02 f303 	mul.w	r3, r2, r3
 80018b2:	67bb      	str	r3, [r7, #120]	; 0x78
    q_acc->size[0] = 1;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	601a      	str	r2, [r3, #0]
    q_acc->size[1] = (int)d;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	1d1e      	adds	r6, r3, #4
 80018c2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80018c6:	f7ff f8f3 	bl	8000ab0 <__aeabi_d2iz>
 80018ca:	4603      	mov	r3, r0
 80018cc:	6033      	str	r3, [r6, #0]
    emxEnsureCapacity_real_T(q_acc, i);
 80018ce:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 fb3e 	bl	8001f52 <emxEnsureCapacity_real_T>
    q_acc_data = q_acc->data;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	67fb      	str	r3, [r7, #124]	; 0x7c
    if ((int)d >= 1) {
 80018dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80018e0:	f7ff f8e6 	bl	8000ab0 <__aeabi_d2iz>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f340 812d 	ble.w	8001b46 <Qubic+0x32e>
      q_acc_tmp_tmp = (int)d - 1;
 80018ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80018f0:	f7ff f8de 	bl	8000ab0 <__aeabi_d2iz>
 80018f4:	4603      	mov	r3, r0
 80018f6:	3b01      	subs	r3, #1
 80018f8:	65fb      	str	r3, [r7, #92]	; 0x5c
      q_acc_data[(int)floor(delta1) - 1] = tf;
 80018fa:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 80018fe:	f008 fe23 	bl	800a548 <floor>
 8001902:	ec53 2b10 	vmov	r2, r3, d0
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	f7ff f8d1 	bl	8000ab0 <__aeabi_d2iz>
 800190e:	4603      	mov	r3, r0
 8001910:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001914:	3b01      	subs	r3, #1
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800191a:	18d1      	adds	r1, r2, r3
 800191c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001920:	e9c1 2300 	strd	r2, r3, [r1]
      if (q_acc->size[1] >= 2) {
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	3304      	adds	r3, #4
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b01      	cmp	r3, #1
 800192e:	f340 810a 	ble.w	8001b46 <Qubic+0x32e>
        q_acc_data[0] = 0.0;
 8001932:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	e9c1 2300 	strd	r2, r3, [r1]
        if (q_acc->size[1] >= 3) {
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	3304      	adds	r3, #4
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b02      	cmp	r3, #2
 800194a:	f340 80fc 	ble.w	8001b46 <Qubic+0x32e>
          if (-tf == 0.0) {
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800195a:	f7ff f861 	bl	8000a20 <__aeabi_dcmpeq>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d051      	beq.n	8001a08 <Qubic+0x1f0>
            delta1 = tf / ((double)q_acc->size[1] - 1.0);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	3304      	adds	r3, #4
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fd85 	bl	800047c <__aeabi_i2d>
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	4b61      	ldr	r3, [pc, #388]	; (8001afc <Qubic+0x2e4>)
 8001978:	f7fe fc32 	bl	80001e0 <__aeabi_dsub>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001984:	f7fe ff0e 	bl	80007a4 <__aeabi_ddiv>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            for (k = 2; k <= q_acc_tmp_tmp; k++) {
 8001990:	2302      	movs	r3, #2
 8001992:	677b      	str	r3, [r7, #116]	; 0x74
 8001994:	e01c      	b.n	80019d0 <Qubic+0x1b8>
              q_acc_data[k - 1] =
                  (double)(((k << 1) - q_acc->size[1]) - 1) * delta1;
 8001996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001998:	005a      	lsls	r2, r3, #1
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	3304      	adds	r3, #4
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	3b01      	subs	r3, #1
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fd68 	bl	800047c <__aeabi_i2d>
              q_acc_data[k - 1] =
 80019ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019ae:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80019b2:	3b01      	subs	r3, #1
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80019b8:	18d6      	adds	r6, r2, r3
                  (double)(((k << 1) - q_acc->size[1]) - 1) * delta1;
 80019ba:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80019be:	f7fe fdc7 	bl	8000550 <__aeabi_dmul>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
              q_acc_data[k - 1] =
 80019c6:	e9c6 2300 	strd	r2, r3, [r6]
            for (k = 2; k <= q_acc_tmp_tmp; k++) {
 80019ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019cc:	3301      	adds	r3, #1
 80019ce:	677b      	str	r3, [r7, #116]	; 0x74
 80019d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80019d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019d4:	429a      	cmp	r2, r3
 80019d6:	ddde      	ble.n	8001996 <Qubic+0x17e>
            }
            if ((q_acc->size[1] & 1) == 1) {
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	3304      	adds	r3, #4
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80ae 	beq.w	8001b46 <Qubic+0x32e>
              q_acc_data[q_acc->size[1] >> 1] = 0.0;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	3304      	adds	r3, #4
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	105b      	asrs	r3, r3, #1
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80019f8:	18d1      	adds	r1, r2, r3
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	e9c1 2300 	strd	r2, r3, [r1]
 8001a06:	e09e      	b.n	8001b46 <Qubic+0x32e>
            }
          } else if ((tf < 0.0) && (fabs(tf) > 8.9884656743115785E+307)) {
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a14:	f7ff f80e 	bl	8000a34 <__aeabi_dcmplt>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d04e      	beq.n	8001abc <Qubic+0x2a4>
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2e:	4b34      	ldr	r3, [pc, #208]	; (8001b00 <Qubic+0x2e8>)
 8001a30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a34:	f7ff f81c 	bl	8000a70 <__aeabi_dcmpgt>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d03e      	beq.n	8001abc <Qubic+0x2a4>
            delta1 = tf / ((double)q_acc->size[1] - 1.0);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	3304      	adds	r3, #4
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fd18 	bl	800047c <__aeabi_i2d>
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <Qubic+0x2e4>)
 8001a52:	f7fe fbc5 	bl	80001e0 <__aeabi_dsub>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a5e:	f7fe fea1 	bl	80007a4 <__aeabi_ddiv>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            i = q_acc->size[1];
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	67bb      	str	r3, [r7, #120]	; 0x78
            for (k = 0; k <= i - 3; k++) {
 8001a72:	2300      	movs	r3, #0
 8001a74:	677b      	str	r3, [r7, #116]	; 0x74
 8001a76:	e01b      	b.n	8001ab0 <Qubic+0x298>
              q_acc_data[k + 1] = delta1 * ((double)k + 1.0);
 8001a78:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001a7a:	f7fe fcff 	bl	800047c <__aeabi_i2d>
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <Qubic+0x2e4>)
 8001a84:	f7fe fbae 	bl	80001e4 <__adddf3>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a92:	3301      	adds	r3, #1
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a98:	18d6      	adds	r6, r2, r3
 8001a9a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001a9e:	f7fe fd57 	bl	8000550 <__aeabi_dmul>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	e9c6 2300 	strd	r2, r3, [r6]
            for (k = 0; k <= i - 3; k++) {
 8001aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001aac:	3301      	adds	r3, #1
 8001aae:	677b      	str	r3, [r7, #116]	; 0x74
 8001ab0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ab2:	3b02      	subs	r3, #2
 8001ab4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	dbde      	blt.n	8001a78 <Qubic+0x260>
          } else if ((tf < 0.0) && (fabs(tf) > 8.9884656743115785E+307)) {
 8001aba:	e044      	b.n	8001b46 <Qubic+0x32e>
            }
          } else {
            delta1 = tf / ((double)q_acc->size[1] - 1.0);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fcd9 	bl	800047c <__aeabi_i2d>
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <Qubic+0x2e4>)
 8001ad0:	f7fe fb86 	bl	80001e0 <__aeabi_dsub>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001adc:	f7fe fe62 	bl	80007a4 <__aeabi_ddiv>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            i = q_acc->size[1];
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	67bb      	str	r3, [r7, #120]	; 0x78
            for (k = 0; k <= i - 3; k++) {
 8001af0:	2300      	movs	r3, #0
 8001af2:	677b      	str	r3, [r7, #116]	; 0x74
 8001af4:	e022      	b.n	8001b3c <Qubic+0x324>
 8001af6:	bf00      	nop
 8001af8:	409f4000 	.word	0x409f4000
 8001afc:	3ff00000 	.word	0x3ff00000
 8001b00:	7fdfffff 	.word	0x7fdfffff
              q_acc_data[k + 1] = ((double)k + 1.0) * delta1;
 8001b04:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001b06:	f7fe fcb9 	bl	800047c <__aeabi_i2d>
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	4b6e      	ldr	r3, [pc, #440]	; (8001cc8 <Qubic+0x4b0>)
 8001b10:	f7fe fb68 	bl	80001e4 <__adddf3>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b1e:	3301      	adds	r3, #1
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001b24:	18d6      	adds	r6, r2, r3
 8001b26:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001b2a:	f7fe fd11 	bl	8000550 <__aeabi_dmul>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	e9c6 2300 	strd	r2, r3, [r6]
            for (k = 0; k <= i - 3; k++) {
 8001b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b38:	3301      	adds	r3, #1
 8001b3a:	677b      	str	r3, [r7, #116]	; 0x74
 8001b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b3e:	3b02      	subs	r3, #2
 8001b40:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001b42:	429a      	cmp	r2, r3
 8001b44:	dbde      	blt.n	8001b04 <Qubic+0x2ec>
          }
        }
      }
    }
  }
  delta1 = q_k2 - q_k1;
 8001b46:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001b4a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001b4e:	f7fe fb47 	bl	80001e0 <__aeabi_dsub>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  C2_tmp = tf * tf;
 8001b5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b62:	f7fe fcf5 	bl	8000550 <__aeabi_dmul>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  C2 = 3.0 * (delta1 / C2_tmp) + (-qdot_k2 - 2.0 * qdot_k1) / tf;
 8001b6e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001b72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001b76:	f7fe fe15 	bl	80007a4 <__aeabi_ddiv>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	4b51      	ldr	r3, [pc, #324]	; (8001ccc <Qubic+0x4b4>)
 8001b88:	f7fe fce2 	bl	8000550 <__aeabi_dmul>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4690      	mov	r8, r2
 8001b92:	4699      	mov	r9, r3
 8001b94:	6a3c      	ldr	r4, [r7, #32]
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b9c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	f7fe fb1e 	bl	80001e4 <__adddf3>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4620      	mov	r0, r4
 8001bae:	4629      	mov	r1, r5
 8001bb0:	f7fe fb16 	bl	80001e0 <__aeabi_dsub>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bc0:	f7fe fdf0 	bl	80007a4 <__aeabi_ddiv>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4640      	mov	r0, r8
 8001bca:	4649      	mov	r1, r9
 8001bcc:	f7fe fb0a 	bl	80001e4 <__adddf3>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  delta1 =
      -2.0 * (delta1 / rt_powd_snf(tf, 3.0)) + (qdot_k2 + qdot_k1) / C2_tmp;
 8001bd8:	ed9f 1b39 	vldr	d1, [pc, #228]	; 8001cc0 <Qubic+0x4a8>
 8001bdc:	ed97 0b06 	vldr	d0, [r7, #24]
 8001be0:	f7ff fcfa 	bl	80015d8 <rt_powd_snf>
 8001be4:	ec53 2b10 	vmov	r2, r3, d0
 8001be8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001bec:	f7fe fdda 	bl	80007a4 <__aeabi_ddiv>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001c00:	f7fe fca6 	bl	8000550 <__aeabi_dmul>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4614      	mov	r4, r2
 8001c0a:	461d      	mov	r5, r3
 8001c0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c10:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c14:	f7fe fae6 	bl	80001e4 <__adddf3>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c24:	f7fe fdbe 	bl	80007a4 <__aeabi_ddiv>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
  delta1 =
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	4629      	mov	r1, r5
 8001c30:	f7fe fad8 	bl	80001e4 <__adddf3>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  i = q_velocity->size[0] * q_velocity->size[1];
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	6852      	ldr	r2, [r2, #4]
 8001c46:	3204      	adds	r2, #4
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	fb02 f303 	mul.w	r3, r2, r3
 8001c4e:	67bb      	str	r3, [r7, #120]	; 0x78
  q_velocity->size[0] = 1;
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
  q_velocity->size[1] = q_acc->size[1];
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	3304      	adds	r3, #4
 8001c62:	6852      	ldr	r2, [r2, #4]
 8001c64:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_velocity, i);
 8001c66:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001c68:	6938      	ldr	r0, [r7, #16]
 8001c6a:	f000 f972 	bl	8001f52 <emxEnsureCapacity_real_T>
  q_velocity_data = q_velocity->data;
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	647b      	str	r3, [r7, #68]	; 0x44
  q_acc_tmp_tmp = q_acc->size[1];
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  i = q_position->size[0] * q_position->size[1];
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	6852      	ldr	r2, [r2, #4]
 8001c86:	3204      	adds	r2, #4
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	fb02 f303 	mul.w	r3, r2, r3
 8001c8e:	67bb      	str	r3, [r7, #120]	; 0x78
  q_position->size[0] = 1;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
  q_position->size[1] = q_acc->size[1];
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	6852      	ldr	r2, [r2, #4]
 8001ca4:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_position, i);
 8001ca6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001ca8:	6978      	ldr	r0, [r7, #20]
 8001caa:	f000 f952 	bl	8001f52 <emxEnsureCapacity_real_T>
  q_position_data = q_position->data;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	643b      	str	r3, [r7, #64]	; 0x40
  for (i = 0; i < q_acc_tmp_tmp; i++) {
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	67bb      	str	r3, [r7, #120]	; 0x78
 8001cb8:	e067      	b.n	8001d8a <Qubic+0x572>
 8001cba:	bf00      	nop
 8001cbc:	f3af 8000 	nop.w
 8001cc0:	00000000 	.word	0x00000000
 8001cc4:	40080000 	.word	0x40080000
 8001cc8:	3ff00000 	.word	0x3ff00000
 8001ccc:	40080000 	.word	0x40080000
    d = q_acc_data[i];
 8001cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001cd6:	4413      	add	r3, r2
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    C2_tmp = d * d;
 8001ce0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ce4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001ce8:	f7fe fc32 	bl	8000550 <__aeabi_dmul>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    q_velocity_data[i] = C2_tmp;
 8001cf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001cfa:	18d1      	adds	r1, r2, r3
 8001cfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d00:	e9c1 2300 	strd	r2, r3, [r1]
    q_position_data[i] =
        ((q_k1 + qdot_k1 * d) + C2 * C2_tmp) + delta1 * rt_powd_snf(d, 3.0);
 8001d04:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001d08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d0c:	f7fe fc20 	bl	8000550 <__aeabi_dmul>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d1c:	f7fe fa62 	bl	80001e4 <__adddf3>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4614      	mov	r4, r2
 8001d26:	461d      	mov	r5, r3
 8001d28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d2c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001d30:	f7fe fc0e 	bl	8000550 <__aeabi_dmul>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4620      	mov	r0, r4
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	f7fe fa52 	bl	80001e4 <__adddf3>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4690      	mov	r8, r2
 8001d46:	4699      	mov	r9, r3
 8001d48:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8001f10 <Qubic+0x6f8>
 8001d4c:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001d50:	f7ff fc42 	bl	80015d8 <rt_powd_snf>
 8001d54:	ec51 0b10 	vmov	r0, r1, d0
 8001d58:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d5c:	f7fe fbf8 	bl	8000550 <__aeabi_dmul>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
    q_position_data[i] =
 8001d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d6e:	18d4      	adds	r4, r2, r3
        ((q_k1 + qdot_k1 * d) + C2 * C2_tmp) + delta1 * rt_powd_snf(d, 3.0);
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4640      	mov	r0, r8
 8001d76:	4649      	mov	r1, r9
 8001d78:	f7fe fa34 	bl	80001e4 <__adddf3>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
    q_position_data[i] =
 8001d80:	e9c4 2300 	strd	r2, r3, [r4]
  for (i = 0; i < q_acc_tmp_tmp; i++) {
 8001d84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d86:	3301      	adds	r3, #1
 8001d88:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d8a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001d8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	db9e      	blt.n	8001cd0 <Qubic+0x4b8>
  }
  i = q_velocity->size[0] * q_velocity->size[1];
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	6852      	ldr	r2, [r2, #4]
 8001d9c:	3204      	adds	r2, #4
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	fb02 f303 	mul.w	r3, r2, r3
 8001da4:	67bb      	str	r3, [r7, #120]	; 0x78
  q_velocity->size[0] = 1;
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	601a      	str	r2, [r3, #0]
  q_velocity->size[1] = q_acc->size[1];
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	3304      	adds	r3, #4
 8001db8:	6852      	ldr	r2, [r2, #4]
 8001dba:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_velocity, i);
 8001dbc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001dbe:	6938      	ldr	r0, [r7, #16]
 8001dc0:	f000 f8c7 	bl	8001f52 <emxEnsureCapacity_real_T>
  q_velocity_data = q_velocity->data;
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	647b      	str	r3, [r7, #68]	; 0x44
  d = 2.0 * C2;
 8001dca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	f7fe fa07 	bl	80001e4 <__adddf3>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  C2_tmp = 3.0 * delta1;
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	4b4d      	ldr	r3, [pc, #308]	; (8001f18 <Qubic+0x700>)
 8001de4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001de8:	f7fe fbb2 	bl	8000550 <__aeabi_dmul>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  q_acc_tmp_tmp = q_acc->size[1] - 1;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001e00:	2300      	movs	r3, #0
 8001e02:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e04:	e034      	b.n	8001e70 <Qubic+0x658>
    q_velocity_data[i] =
        (qdot_k1 + d * q_acc_data[i]) + C2_tmp * q_velocity_data[i];
 8001e06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001e0c:	4413      	add	r3, r2
 8001e0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e12:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001e16:	f7fe fb9b 	bl	8000550 <__aeabi_dmul>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4610      	mov	r0, r2
 8001e20:	4619      	mov	r1, r3
 8001e22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e26:	f7fe f9dd 	bl	80001e4 <__adddf3>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4690      	mov	r8, r2
 8001e30:	4699      	mov	r9, r3
 8001e32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e38:	4413      	add	r3, r2
 8001e3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e3e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e42:	f7fe fb85 	bl	8000550 <__aeabi_dmul>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	4619      	mov	r1, r3
    q_velocity_data[i] =
 8001e4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e54:	18d4      	adds	r4, r2, r3
        (qdot_k1 + d * q_acc_data[i]) + C2_tmp * q_velocity_data[i];
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4640      	mov	r0, r8
 8001e5c:	4649      	mov	r1, r9
 8001e5e:	f7fe f9c1 	bl	80001e4 <__adddf3>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
    q_velocity_data[i] =
 8001e66:	e9c4 2300 	strd	r2, r3, [r4]
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001e6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e74:	429a      	cmp	r2, r3
 8001e76:	ddc6      	ble.n	8001e06 <Qubic+0x5ee>
  }
  i = q_acc->size[0] * q_acc->size[1];
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	6852      	ldr	r2, [r2, #4]
 8001e82:	3204      	adds	r2, #4
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	fb02 f303 	mul.w	r3, r2, r3
 8001e8a:	67bb      	str	r3, [r7, #120]	; 0x78
  q_acc->size[0] = 1;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_acc, i);
 8001e94:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 f85b 	bl	8001f52 <emxEnsureCapacity_real_T>
  q_acc_data = q_acc->data;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	67fb      	str	r3, [r7, #124]	; 0x7c
  C2_tmp = 6.0 * delta1;
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <Qubic+0x704>)
 8001ea8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001eac:	f7fe fb50 	bl	8000550 <__aeabi_dmul>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001eb8:	2300      	movs	r3, #0
 8001eba:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ebc:	e01c      	b.n	8001ef8 <Qubic+0x6e0>
    q_acc_data[i] = d + C2_tmp * q_acc_data[i];
 8001ebe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ec4:	4413      	add	r3, r2
 8001ec6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ece:	f7fe fb3f 	bl	8000550 <__aeabi_dmul>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	4619      	mov	r1, r3
 8001eda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ee0:	18d4      	adds	r4, r2, r3
 8001ee2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ee6:	f7fe f97d 	bl	80001e4 <__adddf3>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	e9c4 2300 	strd	r2, r3, [r4]
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ef8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001efc:	429a      	cmp	r2, r3
 8001efe:	ddde      	ble.n	8001ebe <Qubic+0x6a6>
  }
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	3784      	adds	r7, #132	; 0x84
 8001f06:	46bd      	mov	sp, r7
 8001f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f0c:	f3af 8000 	nop.w
 8001f10:	00000000 	.word	0x00000000
 8001f14:	40080000 	.word	0x40080000
 8001f18:	40080000 	.word	0x40080000
 8001f1c:	40180000 	.word	0x40180000

08001f20 <emxDestroyArray_real_T>:
/*
 * Arguments    : emxArray_real_T *emxArray
 * Return Type  : void
 */
void emxDestroyArray_real_T(emxArray_real_T *emxArray)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  emxFree_real_T(&emxArray);
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 f878 	bl	8002020 <emxFree_real_T>
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <emxInitArray_real_T>:
 * Arguments    : emxArray_real_T **pEmxArray
 *                int numDimensions
 * Return Type  : void
 */
void emxInitArray_real_T(emxArray_real_T **pEmxArray, int numDimensions)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  emxInit_real_T(pEmxArray, numDimensions);
 8001f42:	6839      	ldr	r1, [r7, #0]
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f895 	bl	8002074 <emxInit_real_T>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <emxEnsureCapacity_real_T>:
 * Arguments    : emxArray_real_T *emxArray
 *                int oldNumel
 * Return Type  : void
 */
void emxEnsureCapacity_real_T(emxArray_real_T *emxArray, int oldNumel)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
  int i;
  int newNumel;
  void *newData;
  if (oldNumel < 0) {
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	da01      	bge.n	8001f66 <emxEnsureCapacity_real_T+0x14>
    oldNumel = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	603b      	str	r3, [r7, #0]
  }
  newNumel = 1;
 8001f66:	2301      	movs	r3, #1
 8001f68:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	e00c      	b.n	8001f8a <emxEnsureCapacity_real_T+0x38>
    newNumel *= emxArray->size[i];
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	fb02 f303 	mul.w	r3, r2, r3
 8001f82:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	3301      	adds	r3, #1
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	dbed      	blt.n	8001f70 <emxEnsureCapacity_real_T+0x1e>
  }
  if (newNumel > emxArray->allocatedSize) {
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	dd3c      	ble.n	8002018 <emxEnsureCapacity_real_T+0xc6>
    i = emxArray->allocatedSize;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	617b      	str	r3, [r7, #20]
    if (i < 16) {
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2b0f      	cmp	r3, #15
 8001fa8:	dc0d      	bgt.n	8001fc6 <emxEnsureCapacity_real_T+0x74>
      i = 16;
 8001faa:	2310      	movs	r3, #16
 8001fac:	617b      	str	r3, [r7, #20]
    }
    while (i < newNumel) {
 8001fae:	e00a      	b.n	8001fc6 <emxEnsureCapacity_real_T+0x74>
      if (i > 1073741823) {
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb6:	db03      	blt.n	8001fc0 <emxEnsureCapacity_real_T+0x6e>
        i = MAX_int32_T;
 8001fb8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	e002      	b.n	8001fc6 <emxEnsureCapacity_real_T+0x74>
      } else {
        i *= 2;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	617b      	str	r3, [r7, #20]
    while (i < newNumel) {
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	dbf0      	blt.n	8001fb0 <emxEnsureCapacity_real_T+0x5e>
      }
    }
    newData = calloc((unsigned int)i, sizeof(double));
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2108      	movs	r1, #8
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f008 f8f6 	bl	800a1c4 <calloc>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	60fb      	str	r3, [r7, #12]
    if (emxArray->data != NULL) {
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d010      	beq.n	8002006 <emxEnsureCapacity_real_T+0xb4>
      memcpy(newData, emxArray->data, sizeof(double) * (unsigned int)oldNumel);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6819      	ldr	r1, [r3, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	461a      	mov	r2, r3
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f008 f92a 	bl	800a248 <memcpy>
      if (emxArray->canFreeData) {
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	7c1b      	ldrb	r3, [r3, #16]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d004      	beq.n	8002006 <emxEnsureCapacity_real_T+0xb4>
        free(emxArray->data);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f008 f919 	bl	800a238 <free>
      }
    }
    emxArray->data = (double *)newData;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	601a      	str	r2, [r3, #0]
    emxArray->allocatedSize = i;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	609a      	str	r2, [r3, #8]
    emxArray->canFreeData = true;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	741a      	strb	r2, [r3, #16]
  }
}
 8002018:	bf00      	nop
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <emxFree_real_T>:
/*
 * Arguments    : emxArray_real_T **pEmxArray
 * Return Type  : void
 */
void emxFree_real_T(emxArray_real_T **pEmxArray)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  if (*pEmxArray != (emxArray_real_T *)NULL) {
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d01d      	beq.n	800206c <emxFree_real_T+0x4c>
    if (((*pEmxArray)->data != (double *)NULL) && (*pEmxArray)->canFreeData) {
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <emxFree_real_T+0x30>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	7c1b      	ldrb	r3, [r3, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <emxFree_real_T+0x30>
      free((*pEmxArray)->data);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f008 f8f4 	bl	800a238 <free>
    }
    free((*pEmxArray)->size);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	4618      	mov	r0, r3
 8002058:	f008 f8ee 	bl	800a238 <free>
    free(*pEmxArray);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f008 f8e9 	bl	800a238 <free>
    *pEmxArray = (emxArray_real_T *)NULL;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
  }
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <emxInit_real_T>:
 * Arguments    : emxArray_real_T **pEmxArray
 *                int numDimensions
 * Return Type  : void
 */
void emxInit_real_T(emxArray_real_T **pEmxArray, int numDimensions)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  emxArray_real_T *emxArray;
  int i;
  *pEmxArray = (emxArray_real_T *)malloc(sizeof(emxArray_real_T));
 800207e:	2014      	movs	r0, #20
 8002080:	f008 f8d2 	bl	800a228 <malloc>
 8002084:	4603      	mov	r3, r0
 8002086:	461a      	mov	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	601a      	str	r2, [r3, #0]
  emxArray = *pEmxArray;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	60bb      	str	r3, [r7, #8]
  emxArray->data = (double *)NULL;
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
  emxArray->numDimensions = numDimensions;
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	60da      	str	r2, [r3, #12]
  emxArray->size = (int *)malloc(sizeof(int) * (unsigned int)numDimensions);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f008 f8c0 	bl	800a228 <malloc>
 80020a8:	4603      	mov	r3, r0
 80020aa:	461a      	mov	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	605a      	str	r2, [r3, #4]
  emxArray->allocatedSize = 0;
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  emxArray->canFreeData = true;
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2201      	movs	r2, #1
 80020ba:	741a      	strb	r2, [r3, #16]
  for (i = 0; i < numDimensions; i++) {
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	e009      	b.n	80020d6 <emxInit_real_T+0x62>
    emxArray->size[i] = 0;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
  for (i = 0; i < numDimensions; i++) {
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	3301      	adds	r3, #1
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	dbf1      	blt.n	80020c2 <emxInit_real_T+0x4e>
  }
}
 80020de:	bf00      	nop
 80020e0:	bf00      	nop
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80020ec:	f3bf 8f4f 	dsb	sy
}
 80020f0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <__NVIC_SystemReset+0x24>)
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80020fa:	4904      	ldr	r1, [pc, #16]	; (800210c <__NVIC_SystemReset+0x24>)
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <__NVIC_SystemReset+0x28>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002102:	f3bf 8f4f 	dsb	sy
}
 8002106:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002108:	bf00      	nop
 800210a:	e7fd      	b.n	8002108 <__NVIC_SystemReset+0x20>
 800210c:	e000ed00 	.word	0xe000ed00
 8002110:	05fa0004 	.word	0x05fa0004

08002114 <argInit_real_T>:
/*
 * Arguments    : void
 * Return Type  : double
 */
static double argInit_real_T(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return 0.0;
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	f04f 0300 	mov.w	r3, #0
 8002120:	ec43 2b17 	vmov	d7, r2, r3
}
 8002124:	eeb0 0a47 	vmov.f32	s0, s14
 8002128:	eef0 0a67 	vmov.f32	s1, s15
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	0000      	movs	r0, r0
	...

08002138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002140:	f002 ff56 	bl	8004ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002144:	f000 fb3e 	bl	80027c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002148:	f000 fe4e 	bl	8002de8 <MX_GPIO_Init>
  MX_DMA_Init();
 800214c:	f000 fe16 	bl	8002d7c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002150:	f000 fde8 	bl	8002d24 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002154:	f000 fc2c 	bl	80029b0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002158:	f000 fd42 	bl	8002be0 <MX_TIM5_Init>
  MX_ADC1_Init();
 800215c:	f000 fb9a 	bl	8002894 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002160:	f000 fbf8 	bl	8002954 <MX_I2C1_Init>
  MX_TIM11_Init();
 8002164:	f000 fd8a 	bl	8002c7c <MX_TIM11_Init>
  MX_TIM4_Init();
 8002168:	f000 fcc4 	bl	8002af4 <MX_TIM4_Init>
  MX_TIM3_Init();
 800216c:	f000 fc74 	bl	8002a58 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  start_p = 0;
 8002170:	4b24      	ldr	r3, [pc, #144]	; (8002204 <main+0xcc>)
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
  stop_p = 15;
 8002178:	4b23      	ldr	r3, [pc, #140]	; (8002208 <main+0xd0>)
 800217a:	4a24      	ldr	r2, [pc, #144]	; (800220c <main+0xd4>)
 800217c:	601a      	str	r2, [r3, #0]
  start_v = 0;
 800217e:	4b24      	ldr	r3, [pc, #144]	; (8002210 <main+0xd8>)
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
  stop_v = 0;
 8002186:	4b23      	ldr	r3, [pc, #140]	; (8002214 <main+0xdc>)
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
  timecycle = 2;
 800218e:	4b22      	ldr	r3, [pc, #136]	; (8002218 <main+0xe0>)
 8002190:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002194:	601a      	str	r2, [r3, #0]
  main_Qubic();
 8002196:	f002 fb03 	bl	80047a0 <main_Qubic>
  transformRectangleAndPointsPlace();
 800219a:	f001 f935 	bl	8003408 <transformRectangleAndPointsPlace>
    HAL_ADC_Start_DMA(&hadc1, Joystick_position, 2);
 800219e:	2202      	movs	r2, #2
 80021a0:	491e      	ldr	r1, [pc, #120]	; (800221c <main+0xe4>)
 80021a2:	481f      	ldr	r0, [pc, #124]	; (8002220 <main+0xe8>)
 80021a4:	f002 ffda 	bl	800515c <HAL_ADC_Start_DMA>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);
 80021a8:	2104      	movs	r1, #4
 80021aa:	481e      	ldr	r0, [pc, #120]	; (8002224 <main+0xec>)
 80021ac:	f005 fc80 	bl	8007ab0 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80021b0:	2100      	movs	r1, #0
 80021b2:	481d      	ldr	r0, [pc, #116]	; (8002228 <main+0xf0>)
 80021b4:	f005 fa4a 	bl	800764c <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim5);
 80021b8:	481c      	ldr	r0, [pc, #112]	; (800222c <main+0xf4>)
 80021ba:	f005 f8bf 	bl	800733c <HAL_TIM_Base_Start>
	 hmodbus.huart = &huart2;
 80021be:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <main+0xf8>)
 80021c0:	4a1c      	ldr	r2, [pc, #112]	; (8002234 <main+0xfc>)
 80021c2:	60da      	str	r2, [r3, #12]
	 hmodbus.htim = &htim11;
 80021c4:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <main+0xf8>)
 80021c6:	4a1c      	ldr	r2, [pc, #112]	; (8002238 <main+0x100>)
 80021c8:	611a      	str	r2, [r3, #16]
	 hmodbus.slaveAddress = 0x15;
 80021ca:	4b19      	ldr	r3, [pc, #100]	; (8002230 <main+0xf8>)
 80021cc:	2215      	movs	r2, #21
 80021ce:	701a      	strb	r2, [r3, #0]
	 hmodbus.RegisterSize =70;
 80021d0:	4b17      	ldr	r3, [pc, #92]	; (8002230 <main+0xf8>)
 80021d2:	2246      	movs	r2, #70	; 0x46
 80021d4:	609a      	str	r2, [r3, #8]
	 Modbus_init(&hmodbus, registerFrame);
 80021d6:	4919      	ldr	r1, [pc, #100]	; (800223c <main+0x104>)
 80021d8:	4815      	ldr	r0, [pc, #84]	; (8002230 <main+0xf8>)
 80021da:	f7fe fef3 	bl	8000fc4 <Modbus_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  limitsensor();
	  if(starttray == 1){
 80021de:	4b18      	ldr	r3, [pc, #96]	; (8002240 <main+0x108>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d104      	bne.n	80021f0 <main+0xb8>
		  starttray = 0;
 80021e6:	4b16      	ldr	r3, [pc, #88]	; (8002240 <main+0x108>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
		  transformRectangleAndPointsPlace();
 80021ec:	f001 f90c 	bl	8003408 <transformRectangleAndPointsPlace>

	  }
	  	  Modbus_Protocal_Worker();
 80021f0:	f7fe ff74 	bl	80010dc <Modbus_Protocal_Worker>
	  	  flowmodbus();
 80021f4:	f001 fb88 	bl	8003908 <flowmodbus>
	  	  static uint64_t timeI2C = 0;
	      static uint64_t timestamp = 0;
	      static uint64_t timemodbus = 0;
	      static uint64_t timestampTrajact = 0;
	      if(SoftReset == 1){
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <main+0x10c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d123      	bne.n	8002248 <main+0x110>
	    	  NVIC_SystemReset();
 8002200:	f7ff ff72 	bl	80020e8 <__NVIC_SystemReset>
 8002204:	20000954 	.word	0x20000954
 8002208:	20000958 	.word	0x20000958
 800220c:	41700000 	.word	0x41700000
 8002210:	2000095c 	.word	0x2000095c
 8002214:	20000960 	.word	0x20000960
 8002218:	20000964 	.word	0x20000964
 800221c:	2000128c 	.word	0x2000128c
 8002220:	200003e8 	.word	0x200003e8
 8002224:	200004e4 	.word	0x200004e4
 8002228:	2000064c 	.word	0x2000064c
 800222c:	20000700 	.word	0x20000700
 8002230:	20000d0c 	.word	0x20000d0c
 8002234:	20000868 	.word	0x20000868
 8002238:	200007b4 	.word	0x200007b4
 800223c:	200011e4 	.word	0x200011e4
 8002240:	20000950 	.word	0x20000950
 8002244:	20001270 	.word	0x20001270
//	      if(HAL_GetTick() >= timeI2C){
//	    	  timeI2C = HAL_GetTick() + 10;
//	    	  I2C_read_status(data_read);
//	    	  I2C_all();
//	      }
	      int pos = (int)registerFrame[17].U16;
 8002248:	4bbf      	ldr	r3, [pc, #764]	; (8002548 <main+0x410>)
 800224a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800224c:	60fb      	str	r3, [r7, #12]
	  	  if(HAL_GetTick() >= timemodbus){ // heartbeat
 800224e:	f002 ff35 	bl	80050bc <HAL_GetTick>
 8002252:	4603      	mov	r3, r0
 8002254:	2200      	movs	r2, #0
 8002256:	461c      	mov	r4, r3
 8002258:	4615      	mov	r5, r2
 800225a:	4bbc      	ldr	r3, [pc, #752]	; (800254c <main+0x414>)
 800225c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002260:	4294      	cmp	r4, r2
 8002262:	eb75 0303 	sbcs.w	r3, r5, r3
 8002266:	d343      	bcc.n	80022f0 <main+0x1b8>
	  		  	  timemodbus = HAL_GetTick() + 0.5;
 8002268:	f002 ff28 	bl	80050bc <HAL_GetTick>
 800226c:	4603      	mov	r3, r0
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe f8f4 	bl	800045c <__aeabi_ui2d>
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	4bb5      	ldr	r3, [pc, #724]	; (8002550 <main+0x418>)
 800227a:	f7fd ffb3 	bl	80001e4 <__adddf3>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4610      	mov	r0, r2
 8002284:	4619      	mov	r1, r3
 8002286:	f7fe fca3 	bl	8000bd0 <__aeabi_d2ulz>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	49af      	ldr	r1, [pc, #700]	; (800254c <main+0x414>)
 8002290:	e9c1 2300 	strd	r2, r3, [r1]
	  			  registerFrame[0].U16 = 22881;
 8002294:	4bac      	ldr	r3, [pc, #688]	; (8002548 <main+0x410>)
 8002296:	f645 1261 	movw	r2, #22881	; 0x5961
 800229a:	801a      	strh	r2, [r3, #0]
	  			  registerFrame[17].U16 = (int)(ReadDegree-350)*10;
 800229c:	4bad      	ldr	r3, [pc, #692]	; (8002554 <main+0x41c>)
 800229e:	edd3 7a00 	vldr	s15, [r3]
 80022a2:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8002558 <main+0x420>
 80022a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022ae:	ee17 3a90 	vmov	r3, s15
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	0092      	lsls	r2, r2, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	b29a      	uxth	r2, r3
 80022be:	4ba2      	ldr	r3, [pc, #648]	; (8002548 <main+0x410>)
 80022c0:	845a      	strh	r2, [r3, #34]	; 0x22
	  			  registerFrame[18].U16 = abs(speed);
 80022c2:	4ba6      	ldr	r3, [pc, #664]	; (800255c <main+0x424>)
 80022c4:	edd3 7a00 	vldr	s15, [r3]
 80022c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022cc:	ee17 3a90 	vmov	r3, s15
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bfb8      	it	lt
 80022d4:	425b      	neglt	r3, r3
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	4b9b      	ldr	r3, [pc, #620]	; (8002548 <main+0x410>)
 80022da:	849a      	strh	r2, [r3, #36]	; 0x24
	  			  registerFrame[19].U16 = acceleration;
 80022dc:	4ba0      	ldr	r3, [pc, #640]	; (8002560 <main+0x428>)
 80022de:	edd3 7a00 	vldr	s15, [r3]
 80022e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022e6:	ee17 3a90 	vmov	r3, s15
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	4b96      	ldr	r3, [pc, #600]	; (8002548 <main+0x410>)
 80022ee:	84da      	strh	r2, [r3, #38]	; 0x26
	  		}
		  if(HAL_GetTick() >= timestampTrajact){
 80022f0:	f002 fee4 	bl	80050bc <HAL_GetTick>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2200      	movs	r2, #0
 80022f8:	4698      	mov	r8, r3
 80022fa:	4691      	mov	r9, r2
 80022fc:	4b99      	ldr	r3, [pc, #612]	; (8002564 <main+0x42c>)
 80022fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002302:	4590      	cmp	r8, r2
 8002304:	eb79 0303 	sbcs.w	r3, r9, r3
 8002308:	d35c      	bcc.n	80023c4 <main+0x28c>
			  timestampTrajact = HAL_GetTick() + 0.5;
 800230a:	f002 fed7 	bl	80050bc <HAL_GetTick>
 800230e:	4603      	mov	r3, r0
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe f8a3 	bl	800045c <__aeabi_ui2d>
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	4b8d      	ldr	r3, [pc, #564]	; (8002550 <main+0x418>)
 800231c:	f7fd ff62 	bl	80001e4 <__adddf3>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	f7fe fc52 	bl	8000bd0 <__aeabi_d2ulz>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	498c      	ldr	r1, [pc, #560]	; (8002564 <main+0x42c>)
 8002332:	e9c1 2300 	strd	r2, r3, [r1]
			  if(indexposition < (timecycle*2000)-1 && path == 1){
 8002336:	4b8c      	ldr	r3, [pc, #560]	; (8002568 <main+0x430>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	ee07 3a90 	vmov	s15, r3
 800233e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002342:	4b8a      	ldr	r3, [pc, #552]	; (800256c <main+0x434>)
 8002344:	edd3 7a00 	vldr	s15, [r3]
 8002348:	eddf 6a89 	vldr	s13, [pc, #548]	; 8002570 <main+0x438>
 800234c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002350:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002354:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002358:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800235c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002360:	d530      	bpl.n	80023c4 <main+0x28c>
 8002362:	4b84      	ldr	r3, [pc, #528]	; (8002574 <main+0x43c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d12c      	bne.n	80023c4 <main+0x28c>
			  positionTraject = q_positionN->data[indexposition];
 800236a:	4b83      	ldr	r3, [pc, #524]	; (8002578 <main+0x440>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4b7d      	ldr	r3, [pc, #500]	; (8002568 <main+0x430>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	4413      	add	r3, r2
 8002378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237c:	4610      	mov	r0, r2
 800237e:	4619      	mov	r1, r3
 8002380:	f7fe fbbe 	bl	8000b00 <__aeabi_d2f>
 8002384:	4603      	mov	r3, r0
 8002386:	4a7d      	ldr	r2, [pc, #500]	; (800257c <main+0x444>)
 8002388:	6013      	str	r3, [r2, #0]
			  velocityTraject = q_velocityN->data[indexposition];
 800238a:	4b7d      	ldr	r3, [pc, #500]	; (8002580 <main+0x448>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b75      	ldr	r3, [pc, #468]	; (8002568 <main+0x430>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239c:	4610      	mov	r0, r2
 800239e:	4619      	mov	r1, r3
 80023a0:	f7fe fbae 	bl	8000b00 <__aeabi_d2f>
 80023a4:	4603      	mov	r3, r0
 80023a6:	4a77      	ldr	r2, [pc, #476]	; (8002584 <main+0x44c>)
 80023a8:	6013      	str	r3, [r2, #0]
			  SetDegree = positionTraject;
 80023aa:	4b74      	ldr	r3, [pc, #464]	; (800257c <main+0x444>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a76      	ldr	r2, [pc, #472]	; (8002588 <main+0x450>)
 80023b0:	6013      	str	r3, [r2, #0]
			  SetVelocity = velocityTraject;
 80023b2:	4b74      	ldr	r3, [pc, #464]	; (8002584 <main+0x44c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a75      	ldr	r2, [pc, #468]	; (800258c <main+0x454>)
 80023b8:	6013      	str	r3, [r2, #0]
			  indexposition += 1;
 80023ba:	4b6b      	ldr	r3, [pc, #428]	; (8002568 <main+0x430>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	3301      	adds	r3, #1
 80023c0:	4a69      	ldr	r2, [pc, #420]	; (8002568 <main+0x430>)
 80023c2:	6013      	str	r3, [r2, #0]

			  }
		  }
	      if (HAL_GetTick() >= timestamp) {
 80023c4:	f002 fe7a 	bl	80050bc <HAL_GetTick>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2200      	movs	r2, #0
 80023cc:	469a      	mov	sl, r3
 80023ce:	4693      	mov	fp, r2
 80023d0:	4b6f      	ldr	r3, [pc, #444]	; (8002590 <main+0x458>)
 80023d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d6:	4592      	cmp	sl, r2
 80023d8:	eb7b 0303 	sbcs.w	r3, fp, r3
 80023dc:	f4ff aeff 	bcc.w	80021de <main+0xa6>
	    	  abc++;
 80023e0:	4b6c      	ldr	r3, [pc, #432]	; (8002594 <main+0x45c>)
 80023e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e6:	1c51      	adds	r1, r2, #1
 80023e8:	6039      	str	r1, [r7, #0]
 80023ea:	f143 0300 	adc.w	r3, r3, #0
 80023ee:	607b      	str	r3, [r7, #4]
 80023f0:	4b68      	ldr	r3, [pc, #416]	; (8002594 <main+0x45c>)
 80023f2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80023f6:	e9c3 1200 	strd	r1, r2, [r3]
			  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2); // Read QEI
 80023fa:	4b67      	ldr	r3, [pc, #412]	; (8002598 <main+0x460>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	4a66      	ldr	r2, [pc, #408]	; (800259c <main+0x464>)
 8002402:	6013      	str	r3, [r2, #0]
			  ReadDegree = (QEIReadRaw / 8192.0 * 360)*160/360; // pulse to degree
 8002404:	4b65      	ldr	r3, [pc, #404]	; (800259c <main+0x464>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe f827 	bl	800045c <__aeabi_ui2d>
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	4b63      	ldr	r3, [pc, #396]	; (80025a0 <main+0x468>)
 8002414:	f7fe f9c6 	bl	80007a4 <__aeabi_ddiv>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4610      	mov	r0, r2
 800241e:	4619      	mov	r1, r3
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	4b5f      	ldr	r3, [pc, #380]	; (80025a4 <main+0x46c>)
 8002426:	f7fe f893 	bl	8000550 <__aeabi_dmul>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4610      	mov	r0, r2
 8002430:	4619      	mov	r1, r3
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	4b5c      	ldr	r3, [pc, #368]	; (80025a8 <main+0x470>)
 8002438:	f7fe f88a 	bl	8000550 <__aeabi_dmul>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	4b56      	ldr	r3, [pc, #344]	; (80025a4 <main+0x46c>)
 800244a:	f7fe f9ab 	bl	80007a4 <__aeabi_ddiv>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4610      	mov	r0, r2
 8002454:	4619      	mov	r1, r3
 8002456:	f7fe fb53 	bl	8000b00 <__aeabi_d2f>
 800245a:	4603      	mov	r3, r0
 800245c:	4a3d      	ldr	r2, [pc, #244]	; (8002554 <main+0x41c>)
 800245e:	6013      	str	r3, [r2, #0]
			  error = SetDegree - ReadDegree;
 8002460:	4b49      	ldr	r3, [pc, #292]	; (8002588 <main+0x450>)
 8002462:	ed93 7a00 	vldr	s14, [r3]
 8002466:	4b3b      	ldr	r3, [pc, #236]	; (8002554 <main+0x41c>)
 8002468:	edd3 7a00 	vldr	s15, [r3]
 800246c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002470:	4b4e      	ldr	r3, [pc, #312]	; (80025ac <main+0x474>)
 8002472:	edc3 7a00 	vstr	s15, [r3]
			  velocity();
 8002476:	f002 f8ad 	bl	80045d4 <velocity>
			  accelerate();
 800247a:	f002 f913 	bl	80046a4 <accelerate>
			  speed = ((QEIData.QEIVelocity / 8192.0)*360.0)*160/360;
 800247e:	4b4c      	ldr	r3, [pc, #304]	; (80025b0 <main+0x478>)
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe f80c 	bl	80004a0 <__aeabi_f2d>
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	4b44      	ldr	r3, [pc, #272]	; (80025a0 <main+0x468>)
 800248e:	f7fe f989 	bl	80007a4 <__aeabi_ddiv>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4610      	mov	r0, r2
 8002498:	4619      	mov	r1, r3
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	4b41      	ldr	r3, [pc, #260]	; (80025a4 <main+0x46c>)
 80024a0:	f7fe f856 	bl	8000550 <__aeabi_dmul>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4610      	mov	r0, r2
 80024aa:	4619      	mov	r1, r3
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	4b3d      	ldr	r3, [pc, #244]	; (80025a8 <main+0x470>)
 80024b2:	f7fe f84d 	bl	8000550 <__aeabi_dmul>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	4610      	mov	r0, r2
 80024bc:	4619      	mov	r1, r3
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	4b38      	ldr	r3, [pc, #224]	; (80025a4 <main+0x46c>)
 80024c4:	f7fe f96e 	bl	80007a4 <__aeabi_ddiv>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4610      	mov	r0, r2
 80024ce:	4619      	mov	r1, r3
 80024d0:	f7fe fb16 	bl	8000b00 <__aeabi_d2f>
 80024d4:	4603      	mov	r3, r0
 80024d6:	4a21      	ldr	r2, [pc, #132]	; (800255c <main+0x424>)
 80024d8:	6013      	str	r3, [r2, #0]
			  acceleration = QEIAcc.QEIVelocity;
 80024da:	4b36      	ldr	r3, [pc, #216]	; (80025b4 <main+0x47c>)
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	4a20      	ldr	r2, [pc, #128]	; (8002560 <main+0x428>)
 80024e0:	6013      	str	r3, [r2, #0]
			  DegreeFeedback = control_interrupt(); // PID function
 80024e2:	f001 ffa3 	bl	800442c <control_interrupt>
 80024e6:	eef0 7a40 	vmov.f32	s15, s0
 80024ea:	4b33      	ldr	r3, [pc, #204]	; (80025b8 <main+0x480>)
 80024ec:	edc3 7a00 	vstr	s15, [r3]
	          timestamp = HAL_GetTick() + 0.5;
 80024f0:	f002 fde4 	bl	80050bc <HAL_GetTick>
 80024f4:	4603      	mov	r3, r0
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fd ffb0 	bl	800045c <__aeabi_ui2d>
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	4b13      	ldr	r3, [pc, #76]	; (8002550 <main+0x418>)
 8002502:	f7fd fe6f 	bl	80001e4 <__adddf3>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	f7fe fb5f 	bl	8000bd0 <__aeabi_d2ulz>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	491e      	ldr	r1, [pc, #120]	; (8002590 <main+0x458>)
 8002518:	e9c1 2300 	strd	r2, r3, [r1]
		      if(velocityTraject == 0){
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <main+0x44c>)
 800251e:	edd3 7a00 	vldr	s15, [r3]
 8002522:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252a:	d103      	bne.n	8002534 <main+0x3fc>
		    	  s2 = 0;
 800252c:	4b23      	ldr	r3, [pc, #140]	; (80025bc <main+0x484>)
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
		      }
	          if (Joystick_Control == 1) {
 8002534:	4b22      	ldr	r3, [pc, #136]	; (80025c0 <main+0x488>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d17d      	bne.n	8002638 <main+0x500>
	        	  DegreeFeedback = 0;
 800253c:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <main+0x480>)
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	e03e      	b.n	80025c4 <main+0x48c>
 8002546:	bf00      	nop
 8002548:	200011e4 	.word	0x200011e4
 800254c:	20001318 	.word	0x20001318
 8002550:	3fe00000 	.word	0x3fe00000
 8002554:	20001308 	.word	0x20001308
 8002558:	43af0000 	.word	0x43af0000
 800255c:	20001274 	.word	0x20001274
 8002560:	20001278 	.word	0x20001278
 8002564:	20001320 	.word	0x20001320
 8002568:	200012dc 	.word	0x200012dc
 800256c:	20000964 	.word	0x20000964
 8002570:	44fa0000 	.word	0x44fa0000
 8002574:	2000127c 	.word	0x2000127c
 8002578:	200012d4 	.word	0x200012d4
 800257c:	20001284 	.word	0x20001284
 8002580:	200012d0 	.word	0x200012d0
 8002584:	20001288 	.word	0x20001288
 8002588:	2000130c 	.word	0x2000130c
 800258c:	20000344 	.word	0x20000344
 8002590:	20001328 	.word	0x20001328
 8002594:	20000940 	.word	0x20000940
 8002598:	200004e4 	.word	0x200004e4
 800259c:	20001280 	.word	0x20001280
 80025a0:	40c00000 	.word	0x40c00000
 80025a4:	40768000 	.word	0x40768000
 80025a8:	40640000 	.word	0x40640000
 80025ac:	20001314 	.word	0x20001314
 80025b0:	20001298 	.word	0x20001298
 80025b4:	200012b0 	.word	0x200012b0
 80025b8:	20001310 	.word	0x20001310
 80025bc:	200012f4 	.word	0x200012f4
 80025c0:	20000330 	.word	0x20000330
	        	  s = 0;
 80025c4:	4b72      	ldr	r3, [pc, #456]	; (8002790 <main+0x658>)
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
	        	  s2 = 0;
 80025cc:	4b71      	ldr	r3, [pc, #452]	; (8002794 <main+0x65c>)
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
	        	  error = 0;
 80025d4:	4b70      	ldr	r3, [pc, #448]	; (8002798 <main+0x660>)
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
	        	  error2 = 0;
 80025dc:	4b6f      	ldr	r3, [pc, #444]	; (800279c <main+0x664>)
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
	              if (Joystick_position[0] >= 3150) {
 80025e4:	4b6e      	ldr	r3, [pc, #440]	; (80027a0 <main+0x668>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f640 424d 	movw	r2, #3149	; 0xc4d
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d90a      	bls.n	8002606 <main+0x4ce>
	                  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 16383); // 20 %
 80025f0:	4b6c      	ldr	r3, [pc, #432]	; (80027a4 <main+0x66c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80025f8:	635a      	str	r2, [r3, #52]	; 0x34
	                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80025fa:	2201      	movs	r2, #1
 80025fc:	2180      	movs	r1, #128	; 0x80
 80025fe:	486a      	ldr	r0, [pc, #424]	; (80027a8 <main+0x670>)
 8002600:	f004 f826 	bl	8006650 <HAL_GPIO_WritePin>
 8002604:	e5eb      	b.n	80021de <main+0xa6>
	              }
	              else if (Joystick_position[0] <= 100) {
 8002606:	4b66      	ldr	r3, [pc, #408]	; (80027a0 <main+0x668>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b64      	cmp	r3, #100	; 0x64
 800260c:	d80a      	bhi.n	8002624 <main+0x4ec>
	                  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 16383); // 20 %
 800260e:	4b65      	ldr	r3, [pc, #404]	; (80027a4 <main+0x66c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8002616:	635a      	str	r2, [r3, #52]	; 0x34
	                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8002618:	2200      	movs	r2, #0
 800261a:	2180      	movs	r1, #128	; 0x80
 800261c:	4862      	ldr	r0, [pc, #392]	; (80027a8 <main+0x670>)
 800261e:	f004 f817 	bl	8006650 <HAL_GPIO_WritePin>
 8002622:	e5dc      	b.n	80021de <main+0xa6>
	              }
	              else{
	            	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8002624:	4b5f      	ldr	r3, [pc, #380]	; (80027a4 <main+0x66c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2200      	movs	r2, #0
 800262a:	635a      	str	r2, [r3, #52]	; 0x34
	            	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800262c:	2200      	movs	r2, #0
 800262e:	2180      	movs	r1, #128	; 0x80
 8002630:	485d      	ldr	r0, [pc, #372]	; (80027a8 <main+0x670>)
 8002632:	f004 f80d 	bl	8006650 <HAL_GPIO_WritePin>
 8002636:	e5d2      	b.n	80021de <main+0xa6>
	              }
	          }
	          else if (Joystick_Control == 0) {
 8002638:	4b5c      	ldr	r3, [pc, #368]	; (80027ac <main+0x674>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	f47f adce 	bne.w	80021de <main+0xa6>
	              if (SetDegree < 0) {
 8002642:	4b5b      	ldr	r3, [pc, #364]	; (80027b0 <main+0x678>)
 8002644:	edd3 7a00 	vldr	s15, [r3]
 8002648:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800264c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002650:	d503      	bpl.n	800265a <main+0x522>
	                  SetDegree = 0; // minimum value
 8002652:	4b57      	ldr	r3, [pc, #348]	; (80027b0 <main+0x678>)
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
	              }
	              if (SetDegree > 700) {
 800265a:	4b55      	ldr	r3, [pc, #340]	; (80027b0 <main+0x678>)
 800265c:	edd3 7a00 	vldr	s15, [r3]
 8002660:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80027b4 <main+0x67c>
 8002664:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266c:	dd02      	ble.n	8002674 <main+0x53c>
	                  SetDegree = 700; // maximum value
 800266e:	4b50      	ldr	r3, [pc, #320]	; (80027b0 <main+0x678>)
 8002670:	4a51      	ldr	r2, [pc, #324]	; (80027b8 <main+0x680>)
 8002672:	601a      	str	r2, [r3, #0]
	              }

	              if (error > 0) { // setpoint > read_encoder
 8002674:	4b48      	ldr	r3, [pc, #288]	; (8002798 <main+0x660>)
 8002676:	edd3 7a00 	vldr	s15, [r3]
 800267a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800267e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002682:	dd38      	ble.n	80026f6 <main+0x5be>
	            	  SetVelocity = abs(SetVelocity);
 8002684:	4b4d      	ldr	r3, [pc, #308]	; (80027bc <main+0x684>)
 8002686:	edd3 7a00 	vldr	s15, [r3]
 800268a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800268e:	ee17 3a90 	vmov	r3, s15
 8002692:	2b00      	cmp	r3, #0
 8002694:	bfb8      	it	lt
 8002696:	425b      	neglt	r3, r3
 8002698:	ee07 3a90 	vmov	s15, r3
 800269c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026a0:	4b46      	ldr	r3, [pc, #280]	; (80027bc <main+0x684>)
 80026a2:	edc3 7a00 	vstr	s15, [r3]
	                  if (error < 0.2) {
 80026a6:	4b3c      	ldr	r3, [pc, #240]	; (8002798 <main+0x660>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fd fef8 	bl	80004a0 <__aeabi_f2d>
 80026b0:	a335      	add	r3, pc, #212	; (adr r3, 8002788 <main+0x650>)
 80026b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b6:	f7fe f9bd 	bl	8000a34 <__aeabi_dcmplt>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00b      	beq.n	80026d8 <main+0x5a0>
	                      DegreeFeedback = 0; // Limit Position
 80026c0:	4b3f      	ldr	r3, [pc, #252]	; (80027c0 <main+0x688>)
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
	                      s = 0;
 80026c8:	4b31      	ldr	r3, [pc, #196]	; (8002790 <main+0x658>)
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
	                      s2 = 0;
 80026d0:	4b30      	ldr	r3, [pc, #192]	; (8002794 <main+0x65c>)
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
	                  }
	                  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, DegreeFeedback);
 80026d8:	4b39      	ldr	r3, [pc, #228]	; (80027c0 <main+0x688>)
 80026da:	edd3 7a00 	vldr	s15, [r3]
 80026de:	4b31      	ldr	r3, [pc, #196]	; (80027a4 <main+0x66c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026e6:	ee17 2a90 	vmov	r2, s15
 80026ea:	635a      	str	r2, [r3, #52]	; 0x34
	                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80026ec:	2200      	movs	r2, #0
 80026ee:	2180      	movs	r1, #128	; 0x80
 80026f0:	482d      	ldr	r0, [pc, #180]	; (80027a8 <main+0x670>)
 80026f2:	f003 ffad 	bl	8006650 <HAL_GPIO_WritePin>
	              }
	              if (error < 0 ) { // setpoint < read_encoder
 80026f6:	4b28      	ldr	r3, [pc, #160]	; (8002798 <main+0x660>)
 80026f8:	edd3 7a00 	vldr	s15, [r3]
 80026fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002704:	d53e      	bpl.n	8002784 <main+0x64c>
	            	  if(SetVelocity > 0)SetVelocity = -SetVelocity;
 8002706:	4b2d      	ldr	r3, [pc, #180]	; (80027bc <main+0x684>)
 8002708:	edd3 7a00 	vldr	s15, [r3]
 800270c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002714:	dd07      	ble.n	8002726 <main+0x5ee>
 8002716:	4b29      	ldr	r3, [pc, #164]	; (80027bc <main+0x684>)
 8002718:	edd3 7a00 	vldr	s15, [r3]
 800271c:	eef1 7a67 	vneg.f32	s15, s15
 8002720:	4b26      	ldr	r3, [pc, #152]	; (80027bc <main+0x684>)
 8002722:	edc3 7a00 	vstr	s15, [r3]
	                  if (error * -1 < 0.2) {
 8002726:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <main+0x660>)
 8002728:	edd3 7a00 	vldr	s15, [r3]
 800272c:	eef1 7a67 	vneg.f32	s15, s15
 8002730:	ee17 3a90 	vmov	r3, s15
 8002734:	4618      	mov	r0, r3
 8002736:	f7fd feb3 	bl	80004a0 <__aeabi_f2d>
 800273a:	a313      	add	r3, pc, #76	; (adr r3, 8002788 <main+0x650>)
 800273c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002740:	f7fe f978 	bl	8000a34 <__aeabi_dcmplt>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00b      	beq.n	8002762 <main+0x62a>
	                      DegreeFeedback = 0; // Limit Position
 800274a:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <main+0x688>)
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
	                      s = 0;
 8002752:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <main+0x658>)
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
	                      s2 = 0;
 800275a:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <main+0x65c>)
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
	                  }
	                  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, DegreeFeedback * -1);
 8002762:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <main+0x688>)
 8002764:	edd3 7a00 	vldr	s15, [r3]
 8002768:	eef1 7a67 	vneg.f32	s15, s15
 800276c:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <main+0x66c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002774:	ee17 2a90 	vmov	r2, s15
 8002778:	635a      	str	r2, [r3, #52]	; 0x34
	                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800277a:	2201      	movs	r2, #1
 800277c:	2180      	movs	r1, #128	; 0x80
 800277e:	480a      	ldr	r0, [pc, #40]	; (80027a8 <main+0x670>)
 8002780:	f003 ff66 	bl	8006650 <HAL_GPIO_WritePin>
  {
 8002784:	e52b      	b.n	80021de <main+0xa6>
 8002786:	bf00      	nop
 8002788:	9999999a 	.word	0x9999999a
 800278c:	3fc99999 	.word	0x3fc99999
 8002790:	200012e8 	.word	0x200012e8
 8002794:	200012f4 	.word	0x200012f4
 8002798:	20001314 	.word	0x20001314
 800279c:	200012f8 	.word	0x200012f8
 80027a0:	2000128c 	.word	0x2000128c
 80027a4:	2000064c 	.word	0x2000064c
 80027a8:	40020000 	.word	0x40020000
 80027ac:	20000330 	.word	0x20000330
 80027b0:	2000130c 	.word	0x2000130c
 80027b4:	442f0000 	.word	0x442f0000
 80027b8:	442f0000 	.word	0x442f0000
 80027bc:	20000344 	.word	0x20000344
 80027c0:	20001310 	.word	0x20001310

080027c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b094      	sub	sp, #80	; 0x50
 80027c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027ca:	f107 0320 	add.w	r3, r7, #32
 80027ce:	2230      	movs	r2, #48	; 0x30
 80027d0:	2100      	movs	r1, #0
 80027d2:	4618      	mov	r0, r3
 80027d4:	f007 fd46 	bl	800a264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027d8:	f107 030c 	add.w	r3, r7, #12
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027e8:	2300      	movs	r3, #0
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	4b27      	ldr	r3, [pc, #156]	; (800288c <SystemClock_Config+0xc8>)
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	4a26      	ldr	r2, [pc, #152]	; (800288c <SystemClock_Config+0xc8>)
 80027f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f6:	6413      	str	r3, [r2, #64]	; 0x40
 80027f8:	4b24      	ldr	r3, [pc, #144]	; (800288c <SystemClock_Config+0xc8>)
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002804:	2300      	movs	r3, #0
 8002806:	607b      	str	r3, [r7, #4]
 8002808:	4b21      	ldr	r3, [pc, #132]	; (8002890 <SystemClock_Config+0xcc>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a20      	ldr	r2, [pc, #128]	; (8002890 <SystemClock_Config+0xcc>)
 800280e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	4b1e      	ldr	r3, [pc, #120]	; (8002890 <SystemClock_Config+0xcc>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800281c:	607b      	str	r3, [r7, #4]
 800281e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002820:	2302      	movs	r3, #2
 8002822:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002824:	2301      	movs	r3, #1
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002828:	2310      	movs	r3, #16
 800282a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800282c:	2302      	movs	r3, #2
 800282e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002830:	2300      	movs	r3, #0
 8002832:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002834:	2308      	movs	r3, #8
 8002836:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002838:	2364      	movs	r3, #100	; 0x64
 800283a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800283c:	2302      	movs	r3, #2
 800283e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002840:	2304      	movs	r3, #4
 8002842:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002844:	f107 0320 	add.w	r3, r7, #32
 8002848:	4618      	mov	r0, r3
 800284a:	f004 f883 	bl	8006954 <HAL_RCC_OscConfig>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002854:	f002 f822 	bl	800489c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002858:	230f      	movs	r3, #15
 800285a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800285c:	2302      	movs	r3, #2
 800285e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002868:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800286e:	f107 030c 	add.w	r3, r7, #12
 8002872:	2103      	movs	r1, #3
 8002874:	4618      	mov	r0, r3
 8002876:	f004 fae5 	bl	8006e44 <HAL_RCC_ClockConfig>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002880:	f002 f80c 	bl	800489c <Error_Handler>
  }
}
 8002884:	bf00      	nop
 8002886:	3750      	adds	r7, #80	; 0x50
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40023800 	.word	0x40023800
 8002890:	40007000 	.word	0x40007000

08002894 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800289a:	463b      	mov	r3, r7
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80028a6:	4b28      	ldr	r3, [pc, #160]	; (8002948 <MX_ADC1_Init+0xb4>)
 80028a8:	4a28      	ldr	r2, [pc, #160]	; (800294c <MX_ADC1_Init+0xb8>)
 80028aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80028ac:	4b26      	ldr	r3, [pc, #152]	; (8002948 <MX_ADC1_Init+0xb4>)
 80028ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80028b4:	4b24      	ldr	r3, [pc, #144]	; (8002948 <MX_ADC1_Init+0xb4>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80028ba:	4b23      	ldr	r3, [pc, #140]	; (8002948 <MX_ADC1_Init+0xb4>)
 80028bc:	2201      	movs	r2, #1
 80028be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80028c0:	4b21      	ldr	r3, [pc, #132]	; (8002948 <MX_ADC1_Init+0xb4>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80028c6:	4b20      	ldr	r3, [pc, #128]	; (8002948 <MX_ADC1_Init+0xb4>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028ce:	4b1e      	ldr	r3, [pc, #120]	; (8002948 <MX_ADC1_Init+0xb4>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028d4:	4b1c      	ldr	r3, [pc, #112]	; (8002948 <MX_ADC1_Init+0xb4>)
 80028d6:	4a1e      	ldr	r2, [pc, #120]	; (8002950 <MX_ADC1_Init+0xbc>)
 80028d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028da:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <MX_ADC1_Init+0xb4>)
 80028dc:	2200      	movs	r2, #0
 80028de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80028e0:	4b19      	ldr	r3, [pc, #100]	; (8002948 <MX_ADC1_Init+0xb4>)
 80028e2:	2202      	movs	r2, #2
 80028e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80028e6:	4b18      	ldr	r3, [pc, #96]	; (8002948 <MX_ADC1_Init+0xb4>)
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80028ee:	4b16      	ldr	r3, [pc, #88]	; (8002948 <MX_ADC1_Init+0xb4>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80028f4:	4814      	ldr	r0, [pc, #80]	; (8002948 <MX_ADC1_Init+0xb4>)
 80028f6:	f002 fbed 	bl	80050d4 <HAL_ADC_Init>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002900:	f001 ffcc 	bl	800489c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002904:	2308      	movs	r3, #8
 8002906:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002908:	2301      	movs	r3, #1
 800290a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800290c:	2303      	movs	r3, #3
 800290e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002910:	463b      	mov	r3, r7
 8002912:	4619      	mov	r1, r3
 8002914:	480c      	ldr	r0, [pc, #48]	; (8002948 <MX_ADC1_Init+0xb4>)
 8002916:	f002 fd2f 	bl	8005378 <HAL_ADC_ConfigChannel>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002920:	f001 ffbc 	bl	800489c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002924:	2304      	movs	r3, #4
 8002926:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002928:	2302      	movs	r3, #2
 800292a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800292c:	463b      	mov	r3, r7
 800292e:	4619      	mov	r1, r3
 8002930:	4805      	ldr	r0, [pc, #20]	; (8002948 <MX_ADC1_Init+0xb4>)
 8002932:	f002 fd21 	bl	8005378 <HAL_ADC_ConfigChannel>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800293c:	f001 ffae 	bl	800489c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002940:	bf00      	nop
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	200003e8 	.word	0x200003e8
 800294c:	40012000 	.word	0x40012000
 8002950:	0f000001 	.word	0x0f000001

08002954 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002958:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <MX_I2C1_Init+0x50>)
 800295a:	4a13      	ldr	r2, [pc, #76]	; (80029a8 <MX_I2C1_Init+0x54>)
 800295c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800295e:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <MX_I2C1_Init+0x50>)
 8002960:	4a12      	ldr	r2, [pc, #72]	; (80029ac <MX_I2C1_Init+0x58>)
 8002962:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002964:	4b0f      	ldr	r3, [pc, #60]	; (80029a4 <MX_I2C1_Init+0x50>)
 8002966:	2200      	movs	r2, #0
 8002968:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800296a:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <MX_I2C1_Init+0x50>)
 800296c:	2200      	movs	r2, #0
 800296e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <MX_I2C1_Init+0x50>)
 8002972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002976:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002978:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <MX_I2C1_Init+0x50>)
 800297a:	2200      	movs	r2, #0
 800297c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800297e:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <MX_I2C1_Init+0x50>)
 8002980:	2200      	movs	r2, #0
 8002982:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002984:	4b07      	ldr	r3, [pc, #28]	; (80029a4 <MX_I2C1_Init+0x50>)
 8002986:	2200      	movs	r2, #0
 8002988:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <MX_I2C1_Init+0x50>)
 800298c:	2200      	movs	r2, #0
 800298e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002990:	4804      	ldr	r0, [pc, #16]	; (80029a4 <MX_I2C1_Init+0x50>)
 8002992:	f003 fe9b 	bl	80066cc <HAL_I2C_Init>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800299c:	f001 ff7e 	bl	800489c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029a0:	bf00      	nop
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	20000490 	.word	0x20000490
 80029a8:	40005400 	.word	0x40005400
 80029ac:	000186a0 	.word	0x000186a0

080029b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08c      	sub	sp, #48	; 0x30
 80029b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029b6:	f107 030c 	add.w	r3, r7, #12
 80029ba:	2224      	movs	r2, #36	; 0x24
 80029bc:	2100      	movs	r1, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	f007 fc50 	bl	800a264 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029cc:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <MX_TIM2_Init+0xa4>)
 80029ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80029d4:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <MX_TIM2_Init+0xa4>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029da:	4b1e      	ldr	r3, [pc, #120]	; (8002a54 <MX_TIM2_Init+0xa4>)
 80029dc:	2200      	movs	r2, #0
 80029de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = QEI_PERIOD-1;
 80029e0:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <MX_TIM2_Init+0xa4>)
 80029e2:	f649 72ff 	movw	r2, #40959	; 0x9fff
 80029e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029e8:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <MX_TIM2_Init+0xa4>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ee:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <MX_TIM2_Init+0xa4>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029f4:	2303      	movs	r3, #3
 80029f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029f8:	2300      	movs	r3, #0
 80029fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029fc:	2301      	movs	r3, #1
 80029fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a10:	2300      	movs	r3, #0
 8002a12:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002a18:	f107 030c 	add.w	r3, r7, #12
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	480d      	ldr	r0, [pc, #52]	; (8002a54 <MX_TIM2_Init+0xa4>)
 8002a20:	f004 ff92 	bl	8007948 <HAL_TIM_Encoder_Init>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002a2a:	f001 ff37 	bl	800489c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a32:	2300      	movs	r3, #0
 8002a34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a36:	1d3b      	adds	r3, r7, #4
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4806      	ldr	r0, [pc, #24]	; (8002a54 <MX_TIM2_Init+0xa4>)
 8002a3c:	f006 f89c 	bl	8008b78 <HAL_TIMEx_MasterConfigSynchronization>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002a46:	f001 ff29 	bl	800489c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a4a:	bf00      	nop
 8002a4c:	3730      	adds	r7, #48	; 0x30
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	200004e4 	.word	0x200004e4

08002a58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a5e:	f107 0308 	add.w	r3, r7, #8
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	605a      	str	r2, [r3, #4]
 8002a68:	609a      	str	r2, [r3, #8]
 8002a6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a6c:	463b      	mov	r3, r7
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a74:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <MX_TIM3_Init+0x94>)
 8002a76:	4a1e      	ldr	r2, [pc, #120]	; (8002af0 <MX_TIM3_Init+0x98>)
 8002a78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a7a:	4b1c      	ldr	r3, [pc, #112]	; (8002aec <MX_TIM3_Init+0x94>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a80:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <MX_TIM3_Init+0x94>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a86:	4b19      	ldr	r3, [pc, #100]	; (8002aec <MX_TIM3_Init+0x94>)
 8002a88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a8e:	4b17      	ldr	r3, [pc, #92]	; (8002aec <MX_TIM3_Init+0x94>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a94:	4b15      	ldr	r3, [pc, #84]	; (8002aec <MX_TIM3_Init+0x94>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a9a:	4814      	ldr	r0, [pc, #80]	; (8002aec <MX_TIM3_Init+0x94>)
 8002a9c:	f004 fbf2 	bl	8007284 <HAL_TIM_Base_Init>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002aa6:	f001 fef9 	bl	800489c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ab0:	f107 0308 	add.w	r3, r7, #8
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	480d      	ldr	r0, [pc, #52]	; (8002aec <MX_TIM3_Init+0x94>)
 8002ab8:	f005 face 	bl	8008058 <HAL_TIM_ConfigClockSource>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002ac2:	f001 feeb 	bl	800489c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ace:	463b      	mov	r3, r7
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4806      	ldr	r0, [pc, #24]	; (8002aec <MX_TIM3_Init+0x94>)
 8002ad4:	f006 f850 	bl	8008b78 <HAL_TIMEx_MasterConfigSynchronization>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002ade:	f001 fedd 	bl	800489c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ae2:	bf00      	nop
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000598 	.word	0x20000598
 8002af0:	40000400 	.word	0x40000400

08002af4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08e      	sub	sp, #56	; 0x38
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002afa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	609a      	str	r2, [r3, #8]
 8002b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b08:	f107 0320 	add.w	r3, r7, #32
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b12:	1d3b      	adds	r3, r7, #4
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	60da      	str	r2, [r3, #12]
 8002b1e:	611a      	str	r2, [r3, #16]
 8002b20:	615a      	str	r2, [r3, #20]
 8002b22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b24:	4b2c      	ldr	r3, [pc, #176]	; (8002bd8 <MX_TIM4_Init+0xe4>)
 8002b26:	4a2d      	ldr	r2, [pc, #180]	; (8002bdc <MX_TIM4_Init+0xe8>)
 8002b28:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002b2a:	4b2b      	ldr	r3, [pc, #172]	; (8002bd8 <MX_TIM4_Init+0xe4>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b30:	4b29      	ldr	r3, [pc, #164]	; (8002bd8 <MX_TIM4_Init+0xe4>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002b36:	4b28      	ldr	r3, [pc, #160]	; (8002bd8 <MX_TIM4_Init+0xe4>)
 8002b38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b3c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b3e:	4b26      	ldr	r3, [pc, #152]	; (8002bd8 <MX_TIM4_Init+0xe4>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b44:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <MX_TIM4_Init+0xe4>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b4a:	4823      	ldr	r0, [pc, #140]	; (8002bd8 <MX_TIM4_Init+0xe4>)
 8002b4c:	f004 fb9a 	bl	8007284 <HAL_TIM_Base_Init>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002b56:	f001 fea1 	bl	800489c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b64:	4619      	mov	r1, r3
 8002b66:	481c      	ldr	r0, [pc, #112]	; (8002bd8 <MX_TIM4_Init+0xe4>)
 8002b68:	f005 fa76 	bl	8008058 <HAL_TIM_ConfigClockSource>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002b72:	f001 fe93 	bl	800489c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002b76:	4818      	ldr	r0, [pc, #96]	; (8002bd8 <MX_TIM4_Init+0xe4>)
 8002b78:	f004 fd02 	bl	8007580 <HAL_TIM_PWM_Init>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002b82:	f001 fe8b 	bl	800489c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b86:	2300      	movs	r3, #0
 8002b88:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b8e:	f107 0320 	add.w	r3, r7, #32
 8002b92:	4619      	mov	r1, r3
 8002b94:	4810      	ldr	r0, [pc, #64]	; (8002bd8 <MX_TIM4_Init+0xe4>)
 8002b96:	f005 ffef 	bl	8008b78 <HAL_TIMEx_MasterConfigSynchronization>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002ba0:	f001 fe7c 	bl	800489c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ba4:	2360      	movs	r3, #96	; 0x60
 8002ba6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bb4:	1d3b      	adds	r3, r7, #4
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4807      	ldr	r0, [pc, #28]	; (8002bd8 <MX_TIM4_Init+0xe4>)
 8002bbc:	f005 f98a 	bl	8007ed4 <HAL_TIM_PWM_ConfigChannel>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002bc6:	f001 fe69 	bl	800489c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002bca:	4803      	ldr	r0, [pc, #12]	; (8002bd8 <MX_TIM4_Init+0xe4>)
 8002bcc:	f002 f874 	bl	8004cb8 <HAL_TIM_MspPostInit>

}
 8002bd0:	bf00      	nop
 8002bd2:	3738      	adds	r7, #56	; 0x38
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	2000064c 	.word	0x2000064c
 8002bdc:	40000800 	.word	0x40000800

08002be0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002be6:	f107 0308 	add.w	r3, r7, #8
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	605a      	str	r2, [r3, #4]
 8002bf0:	609a      	str	r2, [r3, #8]
 8002bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bf4:	463b      	mov	r3, r7
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <MX_TIM5_Init+0x94>)
 8002bfe:	4a1e      	ldr	r2, [pc, #120]	; (8002c78 <MX_TIM5_Init+0x98>)
 8002c00:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8002c02:	4b1c      	ldr	r3, [pc, #112]	; (8002c74 <MX_TIM5_Init+0x94>)
 8002c04:	2253      	movs	r2, #83	; 0x53
 8002c06:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c08:	4b1a      	ldr	r3, [pc, #104]	; (8002c74 <MX_TIM5_Init+0x94>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002c0e:	4b19      	ldr	r3, [pc, #100]	; (8002c74 <MX_TIM5_Init+0x94>)
 8002c10:	f04f 32ff 	mov.w	r2, #4294967295
 8002c14:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c16:	4b17      	ldr	r3, [pc, #92]	; (8002c74 <MX_TIM5_Init+0x94>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c1c:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <MX_TIM5_Init+0x94>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002c22:	4814      	ldr	r0, [pc, #80]	; (8002c74 <MX_TIM5_Init+0x94>)
 8002c24:	f004 fb2e 	bl	8007284 <HAL_TIM_Base_Init>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002c2e:	f001 fe35 	bl	800489c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002c38:	f107 0308 	add.w	r3, r7, #8
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	480d      	ldr	r0, [pc, #52]	; (8002c74 <MX_TIM5_Init+0x94>)
 8002c40:	f005 fa0a 	bl	8008058 <HAL_TIM_ConfigClockSource>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002c4a:	f001 fe27 	bl	800489c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c56:	463b      	mov	r3, r7
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4806      	ldr	r0, [pc, #24]	; (8002c74 <MX_TIM5_Init+0x94>)
 8002c5c:	f005 ff8c 	bl	8008b78 <HAL_TIMEx_MasterConfigSynchronization>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002c66:	f001 fe19 	bl	800489c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002c6a:	bf00      	nop
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000700 	.word	0x20000700
 8002c78:	40000c00 	.word	0x40000c00

08002c7c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c82:	1d3b      	adds	r3, r7, #4
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
 8002c90:	615a      	str	r2, [r3, #20]
 8002c92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002c94:	4b21      	ldr	r3, [pc, #132]	; (8002d1c <MX_TIM11_Init+0xa0>)
 8002c96:	4a22      	ldr	r2, [pc, #136]	; (8002d20 <MX_TIM11_Init+0xa4>)
 8002c98:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8002c9a:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <MX_TIM11_Init+0xa0>)
 8002c9c:	2263      	movs	r2, #99	; 0x63
 8002c9e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ca0:	4b1e      	ldr	r3, [pc, #120]	; (8002d1c <MX_TIM11_Init+0xa0>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8002ca6:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <MX_TIM11_Init+0xa0>)
 8002ca8:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8002cac:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cae:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <MX_TIM11_Init+0xa0>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cb4:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <MX_TIM11_Init+0xa0>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002cba:	4818      	ldr	r0, [pc, #96]	; (8002d1c <MX_TIM11_Init+0xa0>)
 8002cbc:	f004 fae2 	bl	8007284 <HAL_TIM_Base_Init>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002cc6:	f001 fde9 	bl	800489c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8002cca:	4814      	ldr	r0, [pc, #80]	; (8002d1c <MX_TIM11_Init+0xa0>)
 8002ccc:	f004 fbf2 	bl	80074b4 <HAL_TIM_OC_Init>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002cd6:	f001 fde1 	bl	800489c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 8002cda:	2108      	movs	r1, #8
 8002cdc:	480f      	ldr	r0, [pc, #60]	; (8002d1c <MX_TIM11_Init+0xa0>)
 8002cde:	f004 fd65 	bl	80077ac <HAL_TIM_OnePulse_Init>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8002ce8:	f001 fdd8 	bl	800489c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002cec:	2310      	movs	r3, #16
 8002cee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8002cf0:	f240 5399 	movw	r3, #1433	; 0x599
 8002cf4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cfe:	1d3b      	adds	r3, r7, #4
 8002d00:	2200      	movs	r2, #0
 8002d02:	4619      	mov	r1, r3
 8002d04:	4805      	ldr	r0, [pc, #20]	; (8002d1c <MX_TIM11_Init+0xa0>)
 8002d06:	f005 f889 	bl	8007e1c <HAL_TIM_OC_ConfigChannel>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8002d10:	f001 fdc4 	bl	800489c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002d14:	bf00      	nop
 8002d16:	3720      	adds	r7, #32
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	200007b4 	.word	0x200007b4
 8002d20:	40014800 	.word	0x40014800

08002d24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d28:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <MX_USART2_UART_Init+0x50>)
 8002d2a:	4a13      	ldr	r2, [pc, #76]	; (8002d78 <MX_USART2_UART_Init+0x54>)
 8002d2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002d2e:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <MX_USART2_UART_Init+0x50>)
 8002d30:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002d34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002d36:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <MX_USART2_UART_Init+0x50>)
 8002d38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d3c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d3e:	4b0d      	ldr	r3, [pc, #52]	; (8002d74 <MX_USART2_UART_Init+0x50>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002d44:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <MX_USART2_UART_Init+0x50>)
 8002d46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d4c:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <MX_USART2_UART_Init+0x50>)
 8002d4e:	220c      	movs	r2, #12
 8002d50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d52:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <MX_USART2_UART_Init+0x50>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d58:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <MX_USART2_UART_Init+0x50>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d5e:	4805      	ldr	r0, [pc, #20]	; (8002d74 <MX_USART2_UART_Init+0x50>)
 8002d60:	f005 ff96 	bl	8008c90 <HAL_UART_Init>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8002d6a:	f001 fd97 	bl	800489c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000868 	.word	0x20000868
 8002d78:	40004400 	.word	0x40004400

08002d7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	607b      	str	r3, [r7, #4]
 8002d86:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <MX_DMA_Init+0x68>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	4a16      	ldr	r2, [pc, #88]	; (8002de4 <MX_DMA_Init+0x68>)
 8002d8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d90:	6313      	str	r3, [r2, #48]	; 0x30
 8002d92:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <MX_DMA_Init+0x68>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9a:	607b      	str	r3, [r7, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	603b      	str	r3, [r7, #0]
 8002da2:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <MX_DMA_Init+0x68>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a0f      	ldr	r2, [pc, #60]	; (8002de4 <MX_DMA_Init+0x68>)
 8002da8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <MX_DMA_Init+0x68>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	2011      	movs	r0, #17
 8002dc0:	f002 fe65 	bl	8005a8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002dc4:	2011      	movs	r0, #17
 8002dc6:	f002 fe7e 	bl	8005ac6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2100      	movs	r1, #0
 8002dce:	2038      	movs	r0, #56	; 0x38
 8002dd0:	f002 fe5d 	bl	8005a8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002dd4:	2038      	movs	r0, #56	; 0x38
 8002dd6:	f002 fe76 	bl	8005ac6 <HAL_NVIC_EnableIRQ>

}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40023800 	.word	0x40023800

08002de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08a      	sub	sp, #40	; 0x28
 8002dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dee:	f107 0314 	add.w	r3, r7, #20
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	605a      	str	r2, [r3, #4]
 8002df8:	609a      	str	r2, [r3, #8]
 8002dfa:	60da      	str	r2, [r3, #12]
 8002dfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	4b3d      	ldr	r3, [pc, #244]	; (8002ef8 <MX_GPIO_Init+0x110>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	4a3c      	ldr	r2, [pc, #240]	; (8002ef8 <MX_GPIO_Init+0x110>)
 8002e08:	f043 0304 	orr.w	r3, r3, #4
 8002e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0e:	4b3a      	ldr	r3, [pc, #232]	; (8002ef8 <MX_GPIO_Init+0x110>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	4b36      	ldr	r3, [pc, #216]	; (8002ef8 <MX_GPIO_Init+0x110>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	4a35      	ldr	r2, [pc, #212]	; (8002ef8 <MX_GPIO_Init+0x110>)
 8002e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e28:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2a:	4b33      	ldr	r3, [pc, #204]	; (8002ef8 <MX_GPIO_Init+0x110>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	4b2f      	ldr	r3, [pc, #188]	; (8002ef8 <MX_GPIO_Init+0x110>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	4a2e      	ldr	r2, [pc, #184]	; (8002ef8 <MX_GPIO_Init+0x110>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6313      	str	r3, [r2, #48]	; 0x30
 8002e46:	4b2c      	ldr	r3, [pc, #176]	; (8002ef8 <MX_GPIO_Init+0x110>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	607b      	str	r3, [r7, #4]
 8002e56:	4b28      	ldr	r3, [pc, #160]	; (8002ef8 <MX_GPIO_Init+0x110>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	4a27      	ldr	r2, [pc, #156]	; (8002ef8 <MX_GPIO_Init+0x110>)
 8002e5c:	f043 0302 	orr.w	r3, r3, #2
 8002e60:	6313      	str	r3, [r2, #48]	; 0x30
 8002e62:	4b25      	ldr	r3, [pc, #148]	; (8002ef8 <MX_GPIO_Init+0x110>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	607b      	str	r3, [r7, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIR_Pin, GPIO_PIN_RESET);
 8002e6e:	2200      	movs	r2, #0
 8002e70:	21a0      	movs	r1, #160	; 0xa0
 8002e72:	4822      	ldr	r0, [pc, #136]	; (8002efc <MX_GPIO_Init+0x114>)
 8002e74:	f003 fbec 	bl	8006650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e7e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e88:	f107 0314 	add.w	r3, r7, #20
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	481c      	ldr	r0, [pc, #112]	; (8002f00 <MX_GPIO_Init+0x118>)
 8002e90:	f003 fa42 	bl	8006318 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor_Home_Pin Sensor_1_Pin Set_Tray_Pin Clear_Tray_Pin */
  GPIO_InitStruct.Pin = Sensor_Home_Pin|Sensor_1_Pin|Set_Tray_Pin|Clear_Tray_Pin;
 8002e94:	2333      	movs	r3, #51	; 0x33
 8002e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ea0:	f107 0314 	add.w	r3, r7, #20
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4816      	ldr	r0, [pc, #88]	; (8002f00 <MX_GPIO_Init+0x118>)
 8002ea8:	f003 fa36 	bl	8006318 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DIR_Pin;
 8002eac:	23a0      	movs	r3, #160	; 0xa0
 8002eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ebc:	f107 0314 	add.w	r3, r7, #20
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	480e      	ldr	r0, [pc, #56]	; (8002efc <MX_GPIO_Init+0x114>)
 8002ec4:	f003 fa28 	bl	8006318 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor_2_Pin */
  GPIO_InitStruct.Pin = Sensor_2_Pin;
 8002ec8:	2310      	movs	r3, #16
 8002eca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sensor_2_GPIO_Port, &GPIO_InitStruct);
 8002ed4:	f107 0314 	add.w	r3, r7, #20
 8002ed8:	4619      	mov	r1, r3
 8002eda:	480a      	ldr	r0, [pc, #40]	; (8002f04 <MX_GPIO_Init+0x11c>)
 8002edc:	f003 fa1c 	bl	8006318 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	2028      	movs	r0, #40	; 0x28
 8002ee6:	f002 fdd2 	bl	8005a8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002eea:	2028      	movs	r0, #40	; 0x28
 8002eec:	f002 fdeb 	bl	8005ac6 <HAL_NVIC_EnableIRQ>

}
 8002ef0:	bf00      	nop
 8002ef2:	3728      	adds	r7, #40	; 0x28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40020000 	.word	0x40020000
 8002f00:	40020800 	.word	0x40020800
 8002f04:	40020400 	.word	0x40020400

08002f08 <transformRectangleAndPointsPick>:
		TIM2->CNT = QEI_PERIOD;
		SetDegree = 0;
	}

}
void transformRectangleAndPointsPick() {
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08a      	sub	sp, #40	; 0x28
 8002f0c:	af00      	add	r7, sp, #0

	translation[0] = bottom_left_jog[0];
 8002f0e:	4bac      	ldr	r3, [pc, #688]	; (80031c0 <transformRectangleAndPointsPick+0x2b8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4aac      	ldr	r2, [pc, #688]	; (80031c4 <transformRectangleAndPointsPick+0x2bc>)
 8002f14:	6013      	str	r3, [r2, #0]
	translation[1] = bottom_left_jog[1];
 8002f16:	4baa      	ldr	r3, [pc, #680]	; (80031c0 <transformRectangleAndPointsPick+0x2b8>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4aaa      	ldr	r2, [pc, #680]	; (80031c4 <transformRectangleAndPointsPick+0x2bc>)
 8002f1c:	6053      	str	r3, [r2, #4]

	bottom_right_jog[0] = bottom_right_jog[0]-translation[0];
 8002f1e:	4baa      	ldr	r3, [pc, #680]	; (80031c8 <transformRectangleAndPointsPick+0x2c0>)
 8002f20:	ed93 7a00 	vldr	s14, [r3]
 8002f24:	4ba7      	ldr	r3, [pc, #668]	; (80031c4 <transformRectangleAndPointsPick+0x2bc>)
 8002f26:	edd3 7a00 	vldr	s15, [r3]
 8002f2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f2e:	4ba6      	ldr	r3, [pc, #664]	; (80031c8 <transformRectangleAndPointsPick+0x2c0>)
 8002f30:	edc3 7a00 	vstr	s15, [r3]
	bottom_right_jog[1] = bottom_right_jog[1]-translation[1];
 8002f34:	4ba4      	ldr	r3, [pc, #656]	; (80031c8 <transformRectangleAndPointsPick+0x2c0>)
 8002f36:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f3a:	4ba2      	ldr	r3, [pc, #648]	; (80031c4 <transformRectangleAndPointsPick+0x2bc>)
 8002f3c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f44:	4ba0      	ldr	r3, [pc, #640]	; (80031c8 <transformRectangleAndPointsPick+0x2c0>)
 8002f46:	edc3 7a01 	vstr	s15, [r3, #4]

	dot_product = 60*bottom_right_jog[0]+bottom_right_jog[1]*0;
 8002f4a:	4b9f      	ldr	r3, [pc, #636]	; (80031c8 <transformRectangleAndPointsPick+0x2c0>)
 8002f4c:	edd3 7a00 	vldr	s15, [r3]
 8002f50:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80031cc <transformRectangleAndPointsPick+0x2c4>
 8002f54:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f58:	4b9b      	ldr	r3, [pc, #620]	; (80031c8 <transformRectangleAndPointsPick+0x2c0>)
 8002f5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f5e:	eddf 6a9c 	vldr	s13, [pc, #624]	; 80031d0 <transformRectangleAndPointsPick+0x2c8>
 8002f62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f6a:	4b9a      	ldr	r3, [pc, #616]	; (80031d4 <transformRectangleAndPointsPick+0x2cc>)
 8002f6c:	edc3 7a00 	vstr	s15, [r3]
	in_theta = dot_product/vectorsize;
 8002f70:	4b98      	ldr	r3, [pc, #608]	; (80031d4 <transformRectangleAndPointsPick+0x2cc>)
 8002f72:	edd3 6a00 	vldr	s13, [r3]
 8002f76:	4b98      	ldr	r3, [pc, #608]	; (80031d8 <transformRectangleAndPointsPick+0x2d0>)
 8002f78:	ed93 7a00 	vldr	s14, [r3]
 8002f7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f80:	4b96      	ldr	r3, [pc, #600]	; (80031dc <transformRectangleAndPointsPick+0x2d4>)
 8002f82:	edc3 7a00 	vstr	s15, [r3]
	theta = - acos(in_theta);
 8002f86:	4b95      	ldr	r3, [pc, #596]	; (80031dc <transformRectangleAndPointsPick+0x2d4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fd fa88 	bl	80004a0 <__aeabi_f2d>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	ec43 2b10 	vmov	d0, r2, r3
 8002f98:	f007 fbae 	bl	800a6f8 <acos>
 8002f9c:	ec53 2b10 	vmov	r2, r3, d0
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	f7fd fdac 	bl	8000b00 <__aeabi_d2f>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	ee07 3a90 	vmov	s15, r3
 8002fae:	eef1 7a67 	vneg.f32	s15, s15
 8002fb2:	4b8b      	ldr	r3, [pc, #556]	; (80031e0 <transformRectangleAndPointsPick+0x2d8>)
 8002fb4:	edc3 7a00 	vstr	s15, [r3]

    T_rotation[0][0] = cos(theta);
 8002fb8:	4b89      	ldr	r3, [pc, #548]	; (80031e0 <transformRectangleAndPointsPick+0x2d8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fd fa6f 	bl	80004a0 <__aeabi_f2d>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	ec43 2b10 	vmov	d0, r2, r3
 8002fca:	f007 fa69 	bl	800a4a0 <cos>
 8002fce:	ec53 2b10 	vmov	r2, r3, d0
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	f7fd fd93 	bl	8000b00 <__aeabi_d2f>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	4a81      	ldr	r2, [pc, #516]	; (80031e4 <transformRectangleAndPointsPick+0x2dc>)
 8002fde:	6013      	str	r3, [r2, #0]
    T_rotation[0][1] = -sin(theta);
 8002fe0:	4b7f      	ldr	r3, [pc, #508]	; (80031e0 <transformRectangleAndPointsPick+0x2d8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fd fa5b 	bl	80004a0 <__aeabi_f2d>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	ec43 2b10 	vmov	d0, r2, r3
 8002ff2:	f007 fb29 	bl	800a648 <sin>
 8002ff6:	ec53 2b10 	vmov	r2, r3, d0
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	f7fd fd7f 	bl	8000b00 <__aeabi_d2f>
 8003002:	4603      	mov	r3, r0
 8003004:	ee07 3a90 	vmov	s15, r3
 8003008:	eef1 7a67 	vneg.f32	s15, s15
 800300c:	4b75      	ldr	r3, [pc, #468]	; (80031e4 <transformRectangleAndPointsPick+0x2dc>)
 800300e:	edc3 7a01 	vstr	s15, [r3, #4]
    T_rotation[1][0] = sin(theta);
 8003012:	4b73      	ldr	r3, [pc, #460]	; (80031e0 <transformRectangleAndPointsPick+0x2d8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7fd fa42 	bl	80004a0 <__aeabi_f2d>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	ec43 2b10 	vmov	d0, r2, r3
 8003024:	f007 fb10 	bl	800a648 <sin>
 8003028:	ec53 2b10 	vmov	r2, r3, d0
 800302c:	4610      	mov	r0, r2
 800302e:	4619      	mov	r1, r3
 8003030:	f7fd fd66 	bl	8000b00 <__aeabi_d2f>
 8003034:	4603      	mov	r3, r0
 8003036:	4a6b      	ldr	r2, [pc, #428]	; (80031e4 <transformRectangleAndPointsPick+0x2dc>)
 8003038:	6093      	str	r3, [r2, #8]
    T_rotation[1][1] = cos(theta);
 800303a:	4b69      	ldr	r3, [pc, #420]	; (80031e0 <transformRectangleAndPointsPick+0x2d8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd fa2e 	bl	80004a0 <__aeabi_f2d>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	ec43 2b10 	vmov	d0, r2, r3
 800304c:	f007 fa28 	bl	800a4a0 <cos>
 8003050:	ec53 2b10 	vmov	r2, r3, d0
 8003054:	4610      	mov	r0, r2
 8003056:	4619      	mov	r1, r3
 8003058:	f7fd fd52 	bl	8000b00 <__aeabi_d2f>
 800305c:	4603      	mov	r3, r0
 800305e:	4a61      	ldr	r2, [pc, #388]	; (80031e4 <transformRectangleAndPointsPick+0x2dc>)
 8003060:	60d3      	str	r3, [r2, #12]

    T[0][0] = T_rotation[0][0];
 8003062:	4b60      	ldr	r3, [pc, #384]	; (80031e4 <transformRectangleAndPointsPick+0x2dc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a60      	ldr	r2, [pc, #384]	; (80031e8 <transformRectangleAndPointsPick+0x2e0>)
 8003068:	6013      	str	r3, [r2, #0]
    T[0][1] = T_rotation[0][1];
 800306a:	4b5e      	ldr	r3, [pc, #376]	; (80031e4 <transformRectangleAndPointsPick+0x2dc>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	4a5e      	ldr	r2, [pc, #376]	; (80031e8 <transformRectangleAndPointsPick+0x2e0>)
 8003070:	6053      	str	r3, [r2, #4]
    T[0][2] = translation[0];
 8003072:	4b54      	ldr	r3, [pc, #336]	; (80031c4 <transformRectangleAndPointsPick+0x2bc>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a5c      	ldr	r2, [pc, #368]	; (80031e8 <transformRectangleAndPointsPick+0x2e0>)
 8003078:	6093      	str	r3, [r2, #8]
    T[1][0] = T_rotation[1][0];
 800307a:	4b5a      	ldr	r3, [pc, #360]	; (80031e4 <transformRectangleAndPointsPick+0x2dc>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	4a5a      	ldr	r2, [pc, #360]	; (80031e8 <transformRectangleAndPointsPick+0x2e0>)
 8003080:	60d3      	str	r3, [r2, #12]
    T[1][1] = T_rotation[1][1];
 8003082:	4b58      	ldr	r3, [pc, #352]	; (80031e4 <transformRectangleAndPointsPick+0x2dc>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	4a58      	ldr	r2, [pc, #352]	; (80031e8 <transformRectangleAndPointsPick+0x2e0>)
 8003088:	6113      	str	r3, [r2, #16]
    T[1][2] = translation[1];
 800308a:	4b4e      	ldr	r3, [pc, #312]	; (80031c4 <transformRectangleAndPointsPick+0x2bc>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	4a56      	ldr	r2, [pc, #344]	; (80031e8 <transformRectangleAndPointsPick+0x2e0>)
 8003090:	6153      	str	r3, [r2, #20]
    T[2][0] = 0;
 8003092:	4b55      	ldr	r3, [pc, #340]	; (80031e8 <transformRectangleAndPointsPick+0x2e0>)
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	619a      	str	r2, [r3, #24]
    T[2][1] = 0;
 800309a:	4b53      	ldr	r3, [pc, #332]	; (80031e8 <transformRectangleAndPointsPick+0x2e0>)
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	61da      	str	r2, [r3, #28]
    T[2][2] = 1;
 80030a2:	4b51      	ldr	r3, [pc, #324]	; (80031e8 <transformRectangleAndPointsPick+0x2e0>)
 80030a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80030a8:	621a      	str	r2, [r3, #32]

    // Transform the rectangle
    for (int i = 0; i < 5; i++) {
 80030aa:	2300      	movs	r3, #0
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
 80030ae:	e029      	b.n	8003104 <transformRectangleAndPointsPick+0x1fc>
        homogeneousRectangle[i][0] = rectangle[i][0];
 80030b0:	4a4e      	ldr	r2, [pc, #312]	; (80031ec <transformRectangleAndPointsPick+0x2e4>)
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	4413      	add	r3, r2
 80030b8:	6819      	ldr	r1, [r3, #0]
 80030ba:	484d      	ldr	r0, [pc, #308]	; (80031f0 <transformRectangleAndPointsPick+0x2e8>)
 80030bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030be:	4613      	mov	r3, r2
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4403      	add	r3, r0
 80030c8:	6019      	str	r1, [r3, #0]
        homogeneousRectangle[i][1] = rectangle[i][1];
 80030ca:	4a48      	ldr	r2, [pc, #288]	; (80031ec <transformRectangleAndPointsPick+0x2e4>)
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	4413      	add	r3, r2
 80030d2:	3304      	adds	r3, #4
 80030d4:	6819      	ldr	r1, [r3, #0]
 80030d6:	4846      	ldr	r0, [pc, #280]	; (80031f0 <transformRectangleAndPointsPick+0x2e8>)
 80030d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4403      	add	r3, r0
 80030e4:	3304      	adds	r3, #4
 80030e6:	6019      	str	r1, [r3, #0]
        homogeneousRectangle[i][2] = 1;
 80030e8:	4941      	ldr	r1, [pc, #260]	; (80031f0 <transformRectangleAndPointsPick+0x2e8>)
 80030ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	3308      	adds	r3, #8
 80030f8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80030fc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 5; i++) {
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	3301      	adds	r3, #1
 8003102:	627b      	str	r3, [r7, #36]	; 0x24
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	2b04      	cmp	r3, #4
 8003108:	ddd2      	ble.n	80030b0 <transformRectangleAndPointsPick+0x1a8>
    }

    for (int i = 0; i < 5; i++) {
 800310a:	2300      	movs	r3, #0
 800310c:	623b      	str	r3, [r7, #32]
 800310e:	e050      	b.n	80031b2 <transformRectangleAndPointsPick+0x2aa>
        for (int j = 0; j < 3; j++) {
 8003110:	2300      	movs	r3, #0
 8003112:	61fb      	str	r3, [r7, #28]
 8003114:	e047      	b.n	80031a6 <transformRectangleAndPointsPick+0x29e>
            transformedRectangle[i][j] = 0;
 8003116:	4937      	ldr	r1, [pc, #220]	; (80031f4 <transformRectangleAndPointsPick+0x2ec>)
 8003118:	6a3a      	ldr	r2, [r7, #32]
 800311a:	4613      	mov	r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4413      	add	r3, r2
 8003120:	69fa      	ldr	r2, [r7, #28]
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	e032      	b.n	800319a <transformRectangleAndPointsPick+0x292>
                transformedRectangle[i][j] += homogeneousRectangle[i][k] * T[k][j];
 8003134:	492f      	ldr	r1, [pc, #188]	; (80031f4 <transformRectangleAndPointsPick+0x2ec>)
 8003136:	6a3a      	ldr	r2, [r7, #32]
 8003138:	4613      	mov	r3, r2
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	4413      	add	r3, r2
 800313e:	69fa      	ldr	r2, [r7, #28]
 8003140:	4413      	add	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	ed93 7a00 	vldr	s14, [r3]
 800314a:	4929      	ldr	r1, [pc, #164]	; (80031f0 <transformRectangleAndPointsPick+0x2e8>)
 800314c:	6a3a      	ldr	r2, [r7, #32]
 800314e:	4613      	mov	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	edd3 6a00 	vldr	s13, [r3]
 8003160:	4921      	ldr	r1, [pc, #132]	; (80031e8 <transformRectangleAndPointsPick+0x2e0>)
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4613      	mov	r3, r2
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	4413      	add	r3, r2
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	edd3 7a00 	vldr	s15, [r3]
 8003176:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800317a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800317e:	491d      	ldr	r1, [pc, #116]	; (80031f4 <transformRectangleAndPointsPick+0x2ec>)
 8003180:	6a3a      	ldr	r2, [r7, #32]
 8003182:	4613      	mov	r3, r2
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	4413      	add	r3, r2
 8003188:	69fa      	ldr	r2, [r7, #28]
 800318a:	4413      	add	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	3301      	adds	r3, #1
 8003198:	61bb      	str	r3, [r7, #24]
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	2b02      	cmp	r3, #2
 800319e:	ddc9      	ble.n	8003134 <transformRectangleAndPointsPick+0x22c>
        for (int j = 0; j < 3; j++) {
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	3301      	adds	r3, #1
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	ddb4      	ble.n	8003116 <transformRectangleAndPointsPick+0x20e>
    for (int i = 0; i < 5; i++) {
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	3301      	adds	r3, #1
 80031b0:	623b      	str	r3, [r7, #32]
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	ddab      	ble.n	8003110 <transformRectangleAndPointsPick+0x208>
            }
        }
    }

    // Transform the points
    for (int i = 0; i < 9; i++) {
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	e046      	b.n	800324c <transformRectangleAndPointsPick+0x344>
 80031be:	bf00      	nop
 80031c0:	20000b50 	.word	0x20000b50
 80031c4:	200009c8 	.word	0x200009c8
 80031c8:	20000b58 	.word	0x20000b58
 80031cc:	42700000 	.word	0x42700000
 80031d0:	00000000 	.word	0x00000000
 80031d4:	20000b44 	.word	0x20000b44
 80031d8:	200002b8 	.word	0x200002b8
 80031dc:	20000b4c 	.word	0x20000b4c
 80031e0:	20000b48 	.word	0x20000b48
 80031e4:	200009b8 	.word	0x200009b8
 80031e8:	200009d0 	.word	0x200009d0
 80031ec:	20000248 	.word	0x20000248
 80031f0:	200009f4 	.word	0x200009f4
 80031f4:	20000a30 	.word	0x20000a30
        homogeneousPoints[i][0] = points[i][0];
 80031f8:	4a7d      	ldr	r2, [pc, #500]	; (80033f0 <transformRectangleAndPointsPick+0x4e8>)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4413      	add	r3, r2
 8003200:	6819      	ldr	r1, [r3, #0]
 8003202:	487c      	ldr	r0, [pc, #496]	; (80033f4 <transformRectangleAndPointsPick+0x4ec>)
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	4613      	mov	r3, r2
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4403      	add	r3, r0
 8003210:	6019      	str	r1, [r3, #0]
        homogeneousPoints[i][1] = points[i][1];
 8003212:	4a77      	ldr	r2, [pc, #476]	; (80033f0 <transformRectangleAndPointsPick+0x4e8>)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4413      	add	r3, r2
 800321a:	3304      	adds	r3, #4
 800321c:	6819      	ldr	r1, [r3, #0]
 800321e:	4875      	ldr	r0, [pc, #468]	; (80033f4 <transformRectangleAndPointsPick+0x4ec>)
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	4613      	mov	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4403      	add	r3, r0
 800322c:	3304      	adds	r3, #4
 800322e:	6019      	str	r1, [r3, #0]
        homogeneousPoints[i][2] = 1;
 8003230:	4970      	ldr	r1, [pc, #448]	; (80033f4 <transformRectangleAndPointsPick+0x4ec>)
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	4613      	mov	r3, r2
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	3308      	adds	r3, #8
 8003240:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003244:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 9; i++) {
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	3301      	adds	r3, #1
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2b08      	cmp	r3, #8
 8003250:	ddd2      	ble.n	80031f8 <transformRectangleAndPointsPick+0x2f0>
    }

    for (int i = 0; i < 9; i++) {
 8003252:	2300      	movs	r3, #0
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	e050      	b.n	80032fa <transformRectangleAndPointsPick+0x3f2>
        for (int j = 0; j < 3; j++) {
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	e047      	b.n	80032ee <transformRectangleAndPointsPick+0x3e6>
            transformedPoints[i][j] = 0;
 800325e:	4966      	ldr	r1, [pc, #408]	; (80033f8 <transformRectangleAndPointsPick+0x4f0>)
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4613      	mov	r3, r2
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	4413      	add	r3, r2
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	e032      	b.n	80032e2 <transformRectangleAndPointsPick+0x3da>


                transformedPoints[i][j] += homogeneousPoints[i][k] * T[k][j];
 800327c:	495e      	ldr	r1, [pc, #376]	; (80033f8 <transformRectangleAndPointsPick+0x4f0>)
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4613      	mov	r3, r2
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	4413      	add	r3, r2
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	ed93 7a00 	vldr	s14, [r3]
 8003292:	4958      	ldr	r1, [pc, #352]	; (80033f4 <transformRectangleAndPointsPick+0x4ec>)
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4613      	mov	r3, r2
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	4413      	add	r3, r2
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	edd3 6a00 	vldr	s13, [r3]
 80032a8:	4954      	ldr	r1, [pc, #336]	; (80033fc <transformRectangleAndPointsPick+0x4f4>)
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	4613      	mov	r3, r2
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	4413      	add	r3, r2
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	edd3 7a00 	vldr	s15, [r3]
 80032be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c6:	494c      	ldr	r1, [pc, #304]	; (80033f8 <transformRectangleAndPointsPick+0x4f0>)
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4613      	mov	r3, r2
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	4413      	add	r3, r2
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	440b      	add	r3, r1
 80032d8:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	3301      	adds	r3, #1
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	ddc9      	ble.n	800327c <transformRectangleAndPointsPick+0x374>
        for (int j = 0; j < 3; j++) {
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	3301      	adds	r3, #1
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	ddb4      	ble.n	800325e <transformRectangleAndPointsPick+0x356>
    for (int i = 0; i < 9; i++) {
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	3301      	adds	r3, #1
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	ddab      	ble.n	8003258 <transformRectangleAndPointsPick+0x350>
            }
        }
    }

    // Translation points
    for (int i = 0; i < 9; i++) {
 8003300:	2300      	movs	r3, #0
 8003302:	607b      	str	r3, [r7, #4]
 8003304:	e032      	b.n	800336c <transformRectangleAndPointsPick+0x464>
    	transformedPoints[i][0] = transformedPoints[i][0] + translation[0];
 8003306:	493c      	ldr	r1, [pc, #240]	; (80033f8 <transformRectangleAndPointsPick+0x4f0>)
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	ed93 7a00 	vldr	s14, [r3]
 8003318:	4b39      	ldr	r3, [pc, #228]	; (8003400 <transformRectangleAndPointsPick+0x4f8>)
 800331a:	edd3 7a00 	vldr	s15, [r3]
 800331e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003322:	4935      	ldr	r1, [pc, #212]	; (80033f8 <transformRectangleAndPointsPick+0x4f0>)
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	edc3 7a00 	vstr	s15, [r3]
    	transformedPoints[i][1] =  transformedPoints[i][1] + translation[1] ;
 8003334:	4930      	ldr	r1, [pc, #192]	; (80033f8 <transformRectangleAndPointsPick+0x4f0>)
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	3304      	adds	r3, #4
 8003344:	ed93 7a00 	vldr	s14, [r3]
 8003348:	4b2d      	ldr	r3, [pc, #180]	; (8003400 <transformRectangleAndPointsPick+0x4f8>)
 800334a:	edd3 7a01 	vldr	s15, [r3, #4]
 800334e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003352:	4929      	ldr	r1, [pc, #164]	; (80033f8 <transformRectangleAndPointsPick+0x4f0>)
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	4413      	add	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	3304      	adds	r3, #4
 8003362:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 9; i++) {
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3301      	adds	r3, #1
 800336a:	607b      	str	r3, [r7, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b08      	cmp	r3, #8
 8003370:	ddc9      	ble.n	8003306 <transformRectangleAndPointsPick+0x3fe>
    	//transformedPoints[i][0] = transformedPoints[i][0] *(-1);

    }

    // Translation rectangle
    for (int i = 0; i < 5; i++) {
 8003372:	2300      	movs	r3, #0
 8003374:	603b      	str	r3, [r7, #0]
 8003376:	e032      	b.n	80033de <transformRectangleAndPointsPick+0x4d6>
    	transformedRectangle[i][0] = transformedRectangle[i][0] + + translation[0];
 8003378:	4922      	ldr	r1, [pc, #136]	; (8003404 <transformRectangleAndPointsPick+0x4fc>)
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	4613      	mov	r3, r2
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	ed93 7a00 	vldr	s14, [r3]
 800338a:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <transformRectangleAndPointsPick+0x4f8>)
 800338c:	edd3 7a00 	vldr	s15, [r3]
 8003390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003394:	491b      	ldr	r1, [pc, #108]	; (8003404 <transformRectangleAndPointsPick+0x4fc>)
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	4613      	mov	r3, r2
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	edc3 7a00 	vstr	s15, [r3]
    	transformedRectangle[i][1] =  transformedRectangle[i][1] + translation[1] ;
 80033a6:	4917      	ldr	r1, [pc, #92]	; (8003404 <transformRectangleAndPointsPick+0x4fc>)
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	4613      	mov	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	3304      	adds	r3, #4
 80033b6:	ed93 7a00 	vldr	s14, [r3]
 80033ba:	4b11      	ldr	r3, [pc, #68]	; (8003400 <transformRectangleAndPointsPick+0x4f8>)
 80033bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80033c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033c4:	490f      	ldr	r1, [pc, #60]	; (8003404 <transformRectangleAndPointsPick+0x4fc>)
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	4613      	mov	r3, r2
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	3304      	adds	r3, #4
 80033d4:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 5; i++) {
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	3301      	adds	r3, #1
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	ddc9      	ble.n	8003378 <transformRectangleAndPointsPick+0x470>
    }


}
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop
 80033e8:	3728      	adds	r7, #40	; 0x28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20000270 	.word	0x20000270
 80033f4:	20000a6c 	.word	0x20000a6c
 80033f8:	20000ad8 	.word	0x20000ad8
 80033fc:	200009d0 	.word	0x200009d0
 8003400:	200009c8 	.word	0x200009c8
 8003404:	20000a30 	.word	0x20000a30

08003408 <transformRectangleAndPointsPlace>:
void transformRectangleAndPointsPlace() {
 8003408:	b580      	push	{r7, lr}
 800340a:	b08a      	sub	sp, #40	; 0x28
 800340c:	af00      	add	r7, sp, #0

	translation2[0] = bottom_left_jog2[0];
 800340e:	4bac      	ldr	r3, [pc, #688]	; (80036c0 <transformRectangleAndPointsPlace+0x2b8>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4aac      	ldr	r2, [pc, #688]	; (80036c4 <transformRectangleAndPointsPlace+0x2bc>)
 8003414:	6013      	str	r3, [r2, #0]
	translation2[1] = bottom_left_jog2[1];
 8003416:	4baa      	ldr	r3, [pc, #680]	; (80036c0 <transformRectangleAndPointsPlace+0x2b8>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	4aaa      	ldr	r2, [pc, #680]	; (80036c4 <transformRectangleAndPointsPlace+0x2bc>)
 800341c:	6053      	str	r3, [r2, #4]

	bottom_right_jog2[0] = bottom_right_jog2[0]-translation2[0];
 800341e:	4baa      	ldr	r3, [pc, #680]	; (80036c8 <transformRectangleAndPointsPlace+0x2c0>)
 8003420:	ed93 7a00 	vldr	s14, [r3]
 8003424:	4ba7      	ldr	r3, [pc, #668]	; (80036c4 <transformRectangleAndPointsPlace+0x2bc>)
 8003426:	edd3 7a00 	vldr	s15, [r3]
 800342a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800342e:	4ba6      	ldr	r3, [pc, #664]	; (80036c8 <transformRectangleAndPointsPlace+0x2c0>)
 8003430:	edc3 7a00 	vstr	s15, [r3]
	bottom_right_jog2[1] = bottom_right_jog2[1]-translation2[1];
 8003434:	4ba4      	ldr	r3, [pc, #656]	; (80036c8 <transformRectangleAndPointsPlace+0x2c0>)
 8003436:	ed93 7a01 	vldr	s14, [r3, #4]
 800343a:	4ba2      	ldr	r3, [pc, #648]	; (80036c4 <transformRectangleAndPointsPlace+0x2bc>)
 800343c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003444:	4ba0      	ldr	r3, [pc, #640]	; (80036c8 <transformRectangleAndPointsPlace+0x2c0>)
 8003446:	edc3 7a01 	vstr	s15, [r3, #4]

	dot_product2 = 60*bottom_right_jog2[0]+bottom_right_jog2[1]*0;
 800344a:	4b9f      	ldr	r3, [pc, #636]	; (80036c8 <transformRectangleAndPointsPlace+0x2c0>)
 800344c:	edd3 7a00 	vldr	s15, [r3]
 8003450:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80036cc <transformRectangleAndPointsPlace+0x2c4>
 8003454:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003458:	4b9b      	ldr	r3, [pc, #620]	; (80036c8 <transformRectangleAndPointsPlace+0x2c0>)
 800345a:	edd3 7a01 	vldr	s15, [r3, #4]
 800345e:	eddf 6a9c 	vldr	s13, [pc, #624]	; 80036d0 <transformRectangleAndPointsPlace+0x2c8>
 8003462:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003466:	ee77 7a27 	vadd.f32	s15, s14, s15
 800346a:	4b9a      	ldr	r3, [pc, #616]	; (80036d4 <transformRectangleAndPointsPlace+0x2cc>)
 800346c:	edc3 7a00 	vstr	s15, [r3]
	in_theta2 = dot_product2/vectorsize2;
 8003470:	4b98      	ldr	r3, [pc, #608]	; (80036d4 <transformRectangleAndPointsPlace+0x2cc>)
 8003472:	edd3 6a00 	vldr	s13, [r3]
 8003476:	4b98      	ldr	r3, [pc, #608]	; (80036d8 <transformRectangleAndPointsPlace+0x2d0>)
 8003478:	ed93 7a00 	vldr	s14, [r3]
 800347c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003480:	4b96      	ldr	r3, [pc, #600]	; (80036dc <transformRectangleAndPointsPlace+0x2d4>)
 8003482:	edc3 7a00 	vstr	s15, [r3]
	theta2 = - acos(in_theta2);
 8003486:	4b95      	ldr	r3, [pc, #596]	; (80036dc <transformRectangleAndPointsPlace+0x2d4>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fd f808 	bl	80004a0 <__aeabi_f2d>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	ec43 2b10 	vmov	d0, r2, r3
 8003498:	f007 f92e 	bl	800a6f8 <acos>
 800349c:	ec53 2b10 	vmov	r2, r3, d0
 80034a0:	4610      	mov	r0, r2
 80034a2:	4619      	mov	r1, r3
 80034a4:	f7fd fb2c 	bl	8000b00 <__aeabi_d2f>
 80034a8:	4603      	mov	r3, r0
 80034aa:	ee07 3a90 	vmov	s15, r3
 80034ae:	eef1 7a67 	vneg.f32	s15, s15
 80034b2:	4b8b      	ldr	r3, [pc, #556]	; (80036e0 <transformRectangleAndPointsPlace+0x2d8>)
 80034b4:	edc3 7a00 	vstr	s15, [r3]

    T_rotation2[0][0] = cos(theta2);
 80034b8:	4b89      	ldr	r3, [pc, #548]	; (80036e0 <transformRectangleAndPointsPlace+0x2d8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fc ffef 	bl	80004a0 <__aeabi_f2d>
 80034c2:	4602      	mov	r2, r0
 80034c4:	460b      	mov	r3, r1
 80034c6:	ec43 2b10 	vmov	d0, r2, r3
 80034ca:	f006 ffe9 	bl	800a4a0 <cos>
 80034ce:	ec53 2b10 	vmov	r2, r3, d0
 80034d2:	4610      	mov	r0, r2
 80034d4:	4619      	mov	r1, r3
 80034d6:	f7fd fb13 	bl	8000b00 <__aeabi_d2f>
 80034da:	4603      	mov	r3, r0
 80034dc:	4a81      	ldr	r2, [pc, #516]	; (80036e4 <transformRectangleAndPointsPlace+0x2dc>)
 80034de:	6013      	str	r3, [r2, #0]
    T_rotation2[0][1] = -sin(theta2);
 80034e0:	4b7f      	ldr	r3, [pc, #508]	; (80036e0 <transformRectangleAndPointsPlace+0x2d8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fc ffdb 	bl	80004a0 <__aeabi_f2d>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	ec43 2b10 	vmov	d0, r2, r3
 80034f2:	f007 f8a9 	bl	800a648 <sin>
 80034f6:	ec53 2b10 	vmov	r2, r3, d0
 80034fa:	4610      	mov	r0, r2
 80034fc:	4619      	mov	r1, r3
 80034fe:	f7fd faff 	bl	8000b00 <__aeabi_d2f>
 8003502:	4603      	mov	r3, r0
 8003504:	ee07 3a90 	vmov	s15, r3
 8003508:	eef1 7a67 	vneg.f32	s15, s15
 800350c:	4b75      	ldr	r3, [pc, #468]	; (80036e4 <transformRectangleAndPointsPlace+0x2dc>)
 800350e:	edc3 7a01 	vstr	s15, [r3, #4]
    T_rotation2[1][0] = sin(theta2);
 8003512:	4b73      	ldr	r3, [pc, #460]	; (80036e0 <transformRectangleAndPointsPlace+0x2d8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f7fc ffc2 	bl	80004a0 <__aeabi_f2d>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	ec43 2b10 	vmov	d0, r2, r3
 8003524:	f007 f890 	bl	800a648 <sin>
 8003528:	ec53 2b10 	vmov	r2, r3, d0
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	f7fd fae6 	bl	8000b00 <__aeabi_d2f>
 8003534:	4603      	mov	r3, r0
 8003536:	4a6b      	ldr	r2, [pc, #428]	; (80036e4 <transformRectangleAndPointsPlace+0x2dc>)
 8003538:	6093      	str	r3, [r2, #8]
    T_rotation2[1][1] = cos(theta2);
 800353a:	4b69      	ldr	r3, [pc, #420]	; (80036e0 <transformRectangleAndPointsPlace+0x2d8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7fc ffae 	bl	80004a0 <__aeabi_f2d>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	ec43 2b10 	vmov	d0, r2, r3
 800354c:	f006 ffa8 	bl	800a4a0 <cos>
 8003550:	ec53 2b10 	vmov	r2, r3, d0
 8003554:	4610      	mov	r0, r2
 8003556:	4619      	mov	r1, r3
 8003558:	f7fd fad2 	bl	8000b00 <__aeabi_d2f>
 800355c:	4603      	mov	r3, r0
 800355e:	4a61      	ldr	r2, [pc, #388]	; (80036e4 <transformRectangleAndPointsPlace+0x2dc>)
 8003560:	60d3      	str	r3, [r2, #12]

    T2[0][0] = T_rotation2[0][0];
 8003562:	4b60      	ldr	r3, [pc, #384]	; (80036e4 <transformRectangleAndPointsPlace+0x2dc>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a60      	ldr	r2, [pc, #384]	; (80036e8 <transformRectangleAndPointsPlace+0x2e0>)
 8003568:	6013      	str	r3, [r2, #0]
    T2[0][1] = T_rotation2[0][1];
 800356a:	4b5e      	ldr	r3, [pc, #376]	; (80036e4 <transformRectangleAndPointsPlace+0x2dc>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	4a5e      	ldr	r2, [pc, #376]	; (80036e8 <transformRectangleAndPointsPlace+0x2e0>)
 8003570:	6053      	str	r3, [r2, #4]
    T2[0][2] = translation2[0];
 8003572:	4b54      	ldr	r3, [pc, #336]	; (80036c4 <transformRectangleAndPointsPlace+0x2bc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a5c      	ldr	r2, [pc, #368]	; (80036e8 <transformRectangleAndPointsPlace+0x2e0>)
 8003578:	6093      	str	r3, [r2, #8]
    T2[1][0] = T_rotation2[1][0];
 800357a:	4b5a      	ldr	r3, [pc, #360]	; (80036e4 <transformRectangleAndPointsPlace+0x2dc>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	4a5a      	ldr	r2, [pc, #360]	; (80036e8 <transformRectangleAndPointsPlace+0x2e0>)
 8003580:	60d3      	str	r3, [r2, #12]
    T2[1][1] = T_rotation2[1][1];
 8003582:	4b58      	ldr	r3, [pc, #352]	; (80036e4 <transformRectangleAndPointsPlace+0x2dc>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	4a58      	ldr	r2, [pc, #352]	; (80036e8 <transformRectangleAndPointsPlace+0x2e0>)
 8003588:	6113      	str	r3, [r2, #16]
    T2[1][2] = translation2[1];
 800358a:	4b4e      	ldr	r3, [pc, #312]	; (80036c4 <transformRectangleAndPointsPlace+0x2bc>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	4a56      	ldr	r2, [pc, #344]	; (80036e8 <transformRectangleAndPointsPlace+0x2e0>)
 8003590:	6153      	str	r3, [r2, #20]
    T2[2][0] = 0;
 8003592:	4b55      	ldr	r3, [pc, #340]	; (80036e8 <transformRectangleAndPointsPlace+0x2e0>)
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	619a      	str	r2, [r3, #24]
    T2[2][1] = 0;
 800359a:	4b53      	ldr	r3, [pc, #332]	; (80036e8 <transformRectangleAndPointsPlace+0x2e0>)
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	61da      	str	r2, [r3, #28]
    T2[2][2] = 1;
 80035a2:	4b51      	ldr	r3, [pc, #324]	; (80036e8 <transformRectangleAndPointsPlace+0x2e0>)
 80035a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80035a8:	621a      	str	r2, [r3, #32]

    // Transform the rectangle
    for (int i = 0; i < 5; i++) {
 80035aa:	2300      	movs	r3, #0
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
 80035ae:	e029      	b.n	8003604 <transformRectangleAndPointsPlace+0x1fc>
        homogeneousRectangle2[i][0] = rectangle2[i][0];
 80035b0:	4a4e      	ldr	r2, [pc, #312]	; (80036ec <transformRectangleAndPointsPlace+0x2e4>)
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4413      	add	r3, r2
 80035b8:	6819      	ldr	r1, [r3, #0]
 80035ba:	484d      	ldr	r0, [pc, #308]	; (80036f0 <transformRectangleAndPointsPlace+0x2e8>)
 80035bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035be:	4613      	mov	r3, r2
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4403      	add	r3, r0
 80035c8:	6019      	str	r1, [r3, #0]
        homogeneousRectangle2[i][1] = rectangle2[i][1];
 80035ca:	4a48      	ldr	r2, [pc, #288]	; (80036ec <transformRectangleAndPointsPlace+0x2e4>)
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4413      	add	r3, r2
 80035d2:	3304      	adds	r3, #4
 80035d4:	6819      	ldr	r1, [r3, #0]
 80035d6:	4846      	ldr	r0, [pc, #280]	; (80036f0 <transformRectangleAndPointsPlace+0x2e8>)
 80035d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035da:	4613      	mov	r3, r2
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	4413      	add	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4403      	add	r3, r0
 80035e4:	3304      	adds	r3, #4
 80035e6:	6019      	str	r1, [r3, #0]
        homogeneousRectangle2[i][2] = 1;
 80035e8:	4941      	ldr	r1, [pc, #260]	; (80036f0 <transformRectangleAndPointsPlace+0x2e8>)
 80035ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ec:	4613      	mov	r3, r2
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	3308      	adds	r3, #8
 80035f8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80035fc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 5; i++) {
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	3301      	adds	r3, #1
 8003602:	627b      	str	r3, [r7, #36]	; 0x24
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	2b04      	cmp	r3, #4
 8003608:	ddd2      	ble.n	80035b0 <transformRectangleAndPointsPlace+0x1a8>
    }

    for (int i = 0; i < 5; i++) {
 800360a:	2300      	movs	r3, #0
 800360c:	623b      	str	r3, [r7, #32]
 800360e:	e050      	b.n	80036b2 <transformRectangleAndPointsPlace+0x2aa>
        for (int j = 0; j < 3; j++) {
 8003610:	2300      	movs	r3, #0
 8003612:	61fb      	str	r3, [r7, #28]
 8003614:	e047      	b.n	80036a6 <transformRectangleAndPointsPlace+0x29e>
            transformedRectangle2[i][j] = 0;
 8003616:	4937      	ldr	r1, [pc, #220]	; (80036f4 <transformRectangleAndPointsPlace+0x2ec>)
 8003618:	6a3a      	ldr	r2, [r7, #32]
 800361a:	4613      	mov	r3, r2
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	4413      	add	r3, r2
 8003620:	69fa      	ldr	r2, [r7, #28]
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 800362e:	2300      	movs	r3, #0
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	e032      	b.n	800369a <transformRectangleAndPointsPlace+0x292>
                transformedRectangle2[i][j] += homogeneousRectangle2[i][k] * T2[k][j];
 8003634:	492f      	ldr	r1, [pc, #188]	; (80036f4 <transformRectangleAndPointsPlace+0x2ec>)
 8003636:	6a3a      	ldr	r2, [r7, #32]
 8003638:	4613      	mov	r3, r2
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4413      	add	r3, r2
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	ed93 7a00 	vldr	s14, [r3]
 800364a:	4929      	ldr	r1, [pc, #164]	; (80036f0 <transformRectangleAndPointsPlace+0x2e8>)
 800364c:	6a3a      	ldr	r2, [r7, #32]
 800364e:	4613      	mov	r3, r2
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	4413      	add	r3, r2
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	edd3 6a00 	vldr	s13, [r3]
 8003660:	4921      	ldr	r1, [pc, #132]	; (80036e8 <transformRectangleAndPointsPlace+0x2e0>)
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4613      	mov	r3, r2
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	4413      	add	r3, r2
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	edd3 7a00 	vldr	s15, [r3]
 8003676:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800367a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800367e:	491d      	ldr	r1, [pc, #116]	; (80036f4 <transformRectangleAndPointsPlace+0x2ec>)
 8003680:	6a3a      	ldr	r2, [r7, #32]
 8003682:	4613      	mov	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	4413      	add	r3, r2
 8003688:	69fa      	ldr	r2, [r7, #28]
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	440b      	add	r3, r1
 8003690:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	3301      	adds	r3, #1
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	2b02      	cmp	r3, #2
 800369e:	ddc9      	ble.n	8003634 <transformRectangleAndPointsPlace+0x22c>
        for (int j = 0; j < 3; j++) {
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	3301      	adds	r3, #1
 80036a4:	61fb      	str	r3, [r7, #28]
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	ddb4      	ble.n	8003616 <transformRectangleAndPointsPlace+0x20e>
    for (int i = 0; i < 5; i++) {
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	3301      	adds	r3, #1
 80036b0:	623b      	str	r3, [r7, #32]
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	ddab      	ble.n	8003610 <transformRectangleAndPointsPlace+0x208>
            }
        }
    }

    // Transform the points
    for (int i = 0; i < 9; i++) {
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	e046      	b.n	800374c <transformRectangleAndPointsPlace+0x344>
 80036be:	bf00      	nop
 80036c0:	20000cf8 	.word	0x20000cf8
 80036c4:	20000b70 	.word	0x20000b70
 80036c8:	20000d00 	.word	0x20000d00
 80036cc:	42700000 	.word	0x42700000
 80036d0:	00000000 	.word	0x00000000
 80036d4:	20000cec 	.word	0x20000cec
 80036d8:	2000032c 	.word	0x2000032c
 80036dc:	20000cf4 	.word	0x20000cf4
 80036e0:	20000cf0 	.word	0x20000cf0
 80036e4:	20000b60 	.word	0x20000b60
 80036e8:	20000b78 	.word	0x20000b78
 80036ec:	200002bc 	.word	0x200002bc
 80036f0:	20000b9c 	.word	0x20000b9c
 80036f4:	20000bd8 	.word	0x20000bd8
        homogeneousPoints2[i][0] = points2[i][0];
 80036f8:	4a7d      	ldr	r2, [pc, #500]	; (80038f0 <transformRectangleAndPointsPlace+0x4e8>)
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4413      	add	r3, r2
 8003700:	6819      	ldr	r1, [r3, #0]
 8003702:	487c      	ldr	r0, [pc, #496]	; (80038f4 <transformRectangleAndPointsPlace+0x4ec>)
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	4613      	mov	r3, r2
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	4413      	add	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4403      	add	r3, r0
 8003710:	6019      	str	r1, [r3, #0]
        homogeneousPoints2[i][1] = points2[i][1];
 8003712:	4a77      	ldr	r2, [pc, #476]	; (80038f0 <transformRectangleAndPointsPlace+0x4e8>)
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	4413      	add	r3, r2
 800371a:	3304      	adds	r3, #4
 800371c:	6819      	ldr	r1, [r3, #0]
 800371e:	4875      	ldr	r0, [pc, #468]	; (80038f4 <transformRectangleAndPointsPlace+0x4ec>)
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	4613      	mov	r3, r2
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	4413      	add	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4403      	add	r3, r0
 800372c:	3304      	adds	r3, #4
 800372e:	6019      	str	r1, [r3, #0]
        homogeneousPoints2[i][2] = 1;
 8003730:	4970      	ldr	r1, [pc, #448]	; (80038f4 <transformRectangleAndPointsPlace+0x4ec>)
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4613      	mov	r3, r2
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	4413      	add	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	3308      	adds	r3, #8
 8003740:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003744:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 9; i++) {
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	3301      	adds	r3, #1
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	2b08      	cmp	r3, #8
 8003750:	ddd2      	ble.n	80036f8 <transformRectangleAndPointsPlace+0x2f0>
    }

    for (int i = 0; i < 9; i++) {
 8003752:	2300      	movs	r3, #0
 8003754:	613b      	str	r3, [r7, #16]
 8003756:	e050      	b.n	80037fa <transformRectangleAndPointsPlace+0x3f2>
        for (int j = 0; j < 3; j++) {
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	e047      	b.n	80037ee <transformRectangleAndPointsPlace+0x3e6>
            transformedPoints2[i][j] = 0;
 800375e:	4966      	ldr	r1, [pc, #408]	; (80038f8 <transformRectangleAndPointsPlace+0x4f0>)
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4613      	mov	r3, r2
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	4413      	add	r3, r2
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 8003776:	2300      	movs	r3, #0
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	e032      	b.n	80037e2 <transformRectangleAndPointsPlace+0x3da>


                transformedPoints2[i][j] += homogeneousPoints2[i][k] * T2[k][j];
 800377c:	495e      	ldr	r1, [pc, #376]	; (80038f8 <transformRectangleAndPointsPlace+0x4f0>)
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4613      	mov	r3, r2
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4413      	add	r3, r2
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	ed93 7a00 	vldr	s14, [r3]
 8003792:	4958      	ldr	r1, [pc, #352]	; (80038f4 <transformRectangleAndPointsPlace+0x4ec>)
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4613      	mov	r3, r2
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	4413      	add	r3, r2
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	4413      	add	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	edd3 6a00 	vldr	s13, [r3]
 80037a8:	4954      	ldr	r1, [pc, #336]	; (80038fc <transformRectangleAndPointsPlace+0x4f4>)
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	4613      	mov	r3, r2
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	4413      	add	r3, r2
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	edd3 7a00 	vldr	s15, [r3]
 80037be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037c6:	494c      	ldr	r1, [pc, #304]	; (80038f8 <transformRectangleAndPointsPlace+0x4f0>)
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4613      	mov	r3, r2
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	4413      	add	r3, r2
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4413      	add	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	3301      	adds	r3, #1
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	ddc9      	ble.n	800377c <transformRectangleAndPointsPlace+0x374>
        for (int j = 0; j < 3; j++) {
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	3301      	adds	r3, #1
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	ddb4      	ble.n	800375e <transformRectangleAndPointsPlace+0x356>
    for (int i = 0; i < 9; i++) {
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	3301      	adds	r3, #1
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	ddab      	ble.n	8003758 <transformRectangleAndPointsPlace+0x350>
            }
        }
    }

    // Translation points
    for (int i = 0; i < 9; i++) {
 8003800:	2300      	movs	r3, #0
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	e032      	b.n	800386c <transformRectangleAndPointsPlace+0x464>
    	transformedPoints2[i][0] = transformedPoints2[i][0] + translation2[0];
 8003806:	493c      	ldr	r1, [pc, #240]	; (80038f8 <transformRectangleAndPointsPlace+0x4f0>)
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	4413      	add	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	ed93 7a00 	vldr	s14, [r3]
 8003818:	4b39      	ldr	r3, [pc, #228]	; (8003900 <transformRectangleAndPointsPlace+0x4f8>)
 800381a:	edd3 7a00 	vldr	s15, [r3]
 800381e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003822:	4935      	ldr	r1, [pc, #212]	; (80038f8 <transformRectangleAndPointsPlace+0x4f0>)
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	edc3 7a00 	vstr	s15, [r3]
    	transformedPoints2[i][1] =  transformedPoints2[i][1] + translation2[1] ;
 8003834:	4930      	ldr	r1, [pc, #192]	; (80038f8 <transformRectangleAndPointsPlace+0x4f0>)
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	3304      	adds	r3, #4
 8003844:	ed93 7a00 	vldr	s14, [r3]
 8003848:	4b2d      	ldr	r3, [pc, #180]	; (8003900 <transformRectangleAndPointsPlace+0x4f8>)
 800384a:	edd3 7a01 	vldr	s15, [r3, #4]
 800384e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003852:	4929      	ldr	r1, [pc, #164]	; (80038f8 <transformRectangleAndPointsPlace+0x4f0>)
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	3304      	adds	r3, #4
 8003862:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 9; i++) {
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3301      	adds	r3, #1
 800386a:	607b      	str	r3, [r7, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b08      	cmp	r3, #8
 8003870:	ddc9      	ble.n	8003806 <transformRectangleAndPointsPlace+0x3fe>
    	//transformedPoints2[i][0] = transformedPoints2[i][0] *(-1);

    }

    // Translation rectangle
    for (int i = 0; i < 5; i++) {
 8003872:	2300      	movs	r3, #0
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	e032      	b.n	80038de <transformRectangleAndPointsPlace+0x4d6>
    	transformedRectangle2[i][0] = transformedRectangle2[i][0] + + translation2[0];
 8003878:	4922      	ldr	r1, [pc, #136]	; (8003904 <transformRectangleAndPointsPlace+0x4fc>)
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	4613      	mov	r3, r2
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	ed93 7a00 	vldr	s14, [r3]
 800388a:	4b1d      	ldr	r3, [pc, #116]	; (8003900 <transformRectangleAndPointsPlace+0x4f8>)
 800388c:	edd3 7a00 	vldr	s15, [r3]
 8003890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003894:	491b      	ldr	r1, [pc, #108]	; (8003904 <transformRectangleAndPointsPlace+0x4fc>)
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	4613      	mov	r3, r2
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	4413      	add	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	edc3 7a00 	vstr	s15, [r3]
    	transformedRectangle2[i][1] =  transformedRectangle2[i][1] + translation2[1] ;
 80038a6:	4917      	ldr	r1, [pc, #92]	; (8003904 <transformRectangleAndPointsPlace+0x4fc>)
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	4613      	mov	r3, r2
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	440b      	add	r3, r1
 80038b4:	3304      	adds	r3, #4
 80038b6:	ed93 7a00 	vldr	s14, [r3]
 80038ba:	4b11      	ldr	r3, [pc, #68]	; (8003900 <transformRectangleAndPointsPlace+0x4f8>)
 80038bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80038c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038c4:	490f      	ldr	r1, [pc, #60]	; (8003904 <transformRectangleAndPointsPlace+0x4fc>)
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	4613      	mov	r3, r2
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	3304      	adds	r3, #4
 80038d4:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 5; i++) {
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	3301      	adds	r3, #1
 80038dc:	603b      	str	r3, [r7, #0]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	ddc9      	ble.n	8003878 <transformRectangleAndPointsPlace+0x470>
    }


}
 80038e4:	bf00      	nop
 80038e6:	bf00      	nop
 80038e8:	3728      	adds	r7, #40	; 0x28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	200002e4 	.word	0x200002e4
 80038f4:	20000c14 	.word	0x20000c14
 80038f8:	20000c80 	.word	0x20000c80
 80038fc:	20000b78 	.word	0x20000b78
 8003900:	20000b70 	.word	0x20000b70
 8003904:	20000bd8 	.word	0x20000bd8

08003908 <flowmodbus>:
            if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 1){
                TIM2->CNT = 17920 ;
            }
        }
}
void flowmodbus(){
 8003908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800390c:	ed2d 8b02 	vpush	{d8}
 8003910:	b084      	sub	sp, #16
 8003912:	af00      	add	r7, sp, #0
switch (Mobus){
 8003914:	4b97      	ldr	r3, [pc, #604]	; (8003b74 <flowmodbus+0x26c>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b05      	cmp	r3, #5
 800391a:	f200 8580 	bhi.w	800441e <flowmodbus+0xb16>
 800391e:	a201      	add	r2, pc, #4	; (adr r2, 8003924 <flowmodbus+0x1c>)
 8003920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003924:	0800393d 	.word	0x0800393d
 8003928:	08003a95 	.word	0x08003a95
 800392c:	08003d59 	.word	0x08003d59
 8003930:	0800400b 	.word	0x0800400b
 8003934:	0800401b 	.word	0x0800401b
 8003938:	08004219 	.word	0x08004219
	case Initial:
		//choice = 1;
		if(registerFrame[1].U16 == 0b00010){ // Set Place
 800393c:	4b8e      	ldr	r3, [pc, #568]	; (8003b78 <flowmodbus+0x270>)
 800393e:	885b      	ldrh	r3, [r3, #2]
 8003940:	2b02      	cmp	r3, #2
 8003942:	d110      	bne.n	8003966 <flowmodbus+0x5e>
			registerFrame[1].U16 = 0; // 0x01 base system reset place tray
 8003944:	4b8c      	ldr	r3, [pc, #560]	; (8003b78 <flowmodbus+0x270>)
 8003946:	2200      	movs	r2, #0
 8003948:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 2; // 0x10 y-axis Set Place
 800394a:	4b8b      	ldr	r3, [pc, #556]	; (8003b78 <flowmodbus+0x270>)
 800394c:	2202      	movs	r2, #2
 800394e:	841a      	strh	r2, [r3, #32]
			Joystick_Control = 1;
 8003950:	4b8a      	ldr	r3, [pc, #552]	; (8003b7c <flowmodbus+0x274>)
 8003952:	2201      	movs	r2, #1
 8003954:	601a      	str	r2, [r3, #0]
			choice = 1;
 8003956:	4b8a      	ldr	r3, [pc, #552]	; (8003b80 <flowmodbus+0x278>)
 8003958:	2201      	movs	r2, #1
 800395a:	601a      	str	r2, [r3, #0]
			//I2C_all();
			Mobus = Jogging_Place;
 800395c:	4b85      	ldr	r3, [pc, #532]	; (8003b74 <flowmodbus+0x26c>)
 800395e:	2201      	movs	r2, #1
 8003960:	701a      	strb	r2, [r3, #0]
			    	point_x[b++] = transformedPoints2[j][0];
			    	point_x[b++] = transformedPoints[j][0];
			     }
			Mobus = Run_TrayMode;
		}
		break;
 8003962:	f000 bd21 	b.w	80043a8 <flowmodbus+0xaa0>
		else if(registerFrame[1].U16 == 0b00001){ //Set Pick
 8003966:	4b84      	ldr	r3, [pc, #528]	; (8003b78 <flowmodbus+0x270>)
 8003968:	885b      	ldrh	r3, [r3, #2]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d110      	bne.n	8003990 <flowmodbus+0x88>
			registerFrame[1].U16 = 0; // 0x01 base system reset place tray
 800396e:	4b82      	ldr	r3, [pc, #520]	; (8003b78 <flowmodbus+0x270>)
 8003970:	2200      	movs	r2, #0
 8003972:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 1; // 0x10 y-axis Set Pick
 8003974:	4b80      	ldr	r3, [pc, #512]	; (8003b78 <flowmodbus+0x270>)
 8003976:	2201      	movs	r2, #1
 8003978:	841a      	strh	r2, [r3, #32]
			Joystick_Control = 1;
 800397a:	4b80      	ldr	r3, [pc, #512]	; (8003b7c <flowmodbus+0x274>)
 800397c:	2201      	movs	r2, #1
 800397e:	601a      	str	r2, [r3, #0]
			choice = 1;
 8003980:	4b7f      	ldr	r3, [pc, #508]	; (8003b80 <flowmodbus+0x278>)
 8003982:	2201      	movs	r2, #1
 8003984:	601a      	str	r2, [r3, #0]
			Mobus = Jogging_Pick;
 8003986:	4b7b      	ldr	r3, [pc, #492]	; (8003b74 <flowmodbus+0x26c>)
 8003988:	2202      	movs	r2, #2
 800398a:	701a      	strb	r2, [r3, #0]
		break;
 800398c:	f000 bd0c 	b.w	80043a8 <flowmodbus+0xaa0>
		else if(registerFrame[1].U16 == 0b10000){ // Run point Mode
 8003990:	4b79      	ldr	r3, [pc, #484]	; (8003b78 <flowmodbus+0x270>)
 8003992:	885b      	ldrh	r3, [r3, #2]
 8003994:	2b10      	cmp	r3, #16
 8003996:	d10d      	bne.n	80039b4 <flowmodbus+0xac>
			registerFrame[1].U16 = 0; // base system run point mode reset
 8003998:	4b77      	ldr	r3, [pc, #476]	; (8003b78 <flowmodbus+0x270>)
 800399a:	2200      	movs	r2, #0
 800399c:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 16; // y-axis moving status go point x
 800399e:	4b76      	ldr	r3, [pc, #472]	; (8003b78 <flowmodbus+0x270>)
 80039a0:	2210      	movs	r2, #16
 80039a2:	841a      	strh	r2, [r3, #32]
			Joystick_Control = 0;
 80039a4:	4b75      	ldr	r3, [pc, #468]	; (8003b7c <flowmodbus+0x274>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
			Mobus = Run_PointMode;
 80039aa:	4b72      	ldr	r3, [pc, #456]	; (8003b74 <flowmodbus+0x26c>)
 80039ac:	2204      	movs	r2, #4
 80039ae:	701a      	strb	r2, [r3, #0]
		break;
 80039b0:	f000 bcfa 	b.w	80043a8 <flowmodbus+0xaa0>
		else if(registerFrame[1].U16 == 0b00100){ // Set Home
 80039b4:	4b70      	ldr	r3, [pc, #448]	; (8003b78 <flowmodbus+0x270>)
 80039b6:	885b      	ldrh	r3, [r3, #2]
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d107      	bne.n	80039cc <flowmodbus+0xc4>
			registerFrame[1].U16 = 0;
 80039bc:	4b6e      	ldr	r3, [pc, #440]	; (8003b78 <flowmodbus+0x270>)
 80039be:	2200      	movs	r2, #0
 80039c0:	805a      	strh	r2, [r3, #2]
			Mobus = Home;
 80039c2:	4b6c      	ldr	r3, [pc, #432]	; (8003b74 <flowmodbus+0x26c>)
 80039c4:	2203      	movs	r2, #3
 80039c6:	701a      	strb	r2, [r3, #0]
		break;
 80039c8:	f000 bcee 	b.w	80043a8 <flowmodbus+0xaa0>
		else if(registerFrame[1].U16 == 0b01000){
 80039cc:	4b6a      	ldr	r3, [pc, #424]	; (8003b78 <flowmodbus+0x270>)
 80039ce:	885b      	ldrh	r3, [r3, #2]
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	f040 84e9 	bne.w	80043a8 <flowmodbus+0xaa0>
			registerFrame[1].U16 = 0;
 80039d6:	4b68      	ldr	r3, [pc, #416]	; (8003b78 <flowmodbus+0x270>)
 80039d8:	2200      	movs	r2, #0
 80039da:	805a      	strh	r2, [r3, #2]
			choice = 2;
 80039dc:	4b68      	ldr	r3, [pc, #416]	; (8003b80 <flowmodbus+0x278>)
 80039de:	2202      	movs	r2, #2
 80039e0:	601a      	str	r2, [r3, #0]
			    k = 0;
 80039e2:	2300      	movs	r3, #0
 80039e4:	607b      	str	r3, [r7, #4]
			    b = 0;
 80039e6:	2300      	movs	r3, #0
 80039e8:	603b      	str	r3, [r7, #0]
			    for (i = 0; i < 9; i++) {
 80039ea:	2300      	movs	r3, #0
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	e022      	b.n	8003a36 <flowmodbus+0x12e>
			        point_y[k++] = transformedPoints2[i][1];
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	1c53      	adds	r3, r2, #1
 80039f4:	607b      	str	r3, [r7, #4]
 80039f6:	4863      	ldr	r0, [pc, #396]	; (8003b84 <flowmodbus+0x27c>)
 80039f8:	68f9      	ldr	r1, [r7, #12]
 80039fa:	460b      	mov	r3, r1
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	440b      	add	r3, r1
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4403      	add	r3, r0
 8003a04:	3304      	adds	r3, #4
 8003a06:	6819      	ldr	r1, [r3, #0]
 8003a08:	485f      	ldr	r0, [pc, #380]	; (8003b88 <flowmodbus+0x280>)
 8003a0a:	0093      	lsls	r3, r2, #2
 8003a0c:	4403      	add	r3, r0
 8003a0e:	6019      	str	r1, [r3, #0]
			        point_y[k++] = transformedPoints[i][1];
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	1c53      	adds	r3, r2, #1
 8003a14:	607b      	str	r3, [r7, #4]
 8003a16:	485d      	ldr	r0, [pc, #372]	; (8003b8c <flowmodbus+0x284>)
 8003a18:	68f9      	ldr	r1, [r7, #12]
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	440b      	add	r3, r1
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4403      	add	r3, r0
 8003a24:	3304      	adds	r3, #4
 8003a26:	6819      	ldr	r1, [r3, #0]
 8003a28:	4857      	ldr	r0, [pc, #348]	; (8003b88 <flowmodbus+0x280>)
 8003a2a:	0093      	lsls	r3, r2, #2
 8003a2c:	4403      	add	r3, r0
 8003a2e:	6019      	str	r1, [r3, #0]
			    for (i = 0; i < 9; i++) {
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	3301      	adds	r3, #1
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	ddd9      	ble.n	80039f0 <flowmodbus+0xe8>
			    for (j = 0; j < 9; j++) {
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	e020      	b.n	8003a84 <flowmodbus+0x17c>
			    	point_x[b++] = transformedPoints2[j][0];
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	1c53      	adds	r3, r2, #1
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	484e      	ldr	r0, [pc, #312]	; (8003b84 <flowmodbus+0x27c>)
 8003a4a:	68b9      	ldr	r1, [r7, #8]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	440b      	add	r3, r1
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4403      	add	r3, r0
 8003a56:	6819      	ldr	r1, [r3, #0]
 8003a58:	484d      	ldr	r0, [pc, #308]	; (8003b90 <flowmodbus+0x288>)
 8003a5a:	0093      	lsls	r3, r2, #2
 8003a5c:	4403      	add	r3, r0
 8003a5e:	6019      	str	r1, [r3, #0]
			    	point_x[b++] = transformedPoints[j][0];
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	1c53      	adds	r3, r2, #1
 8003a64:	603b      	str	r3, [r7, #0]
 8003a66:	4849      	ldr	r0, [pc, #292]	; (8003b8c <flowmodbus+0x284>)
 8003a68:	68b9      	ldr	r1, [r7, #8]
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	440b      	add	r3, r1
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4403      	add	r3, r0
 8003a74:	6819      	ldr	r1, [r3, #0]
 8003a76:	4846      	ldr	r0, [pc, #280]	; (8003b90 <flowmodbus+0x288>)
 8003a78:	0093      	lsls	r3, r2, #2
 8003a7a:	4403      	add	r3, r0
 8003a7c:	6019      	str	r1, [r3, #0]
			    for (j = 0; j < 9; j++) {
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	3301      	adds	r3, #1
 8003a82:	60bb      	str	r3, [r7, #8]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	dddb      	ble.n	8003a42 <flowmodbus+0x13a>
			Mobus = Run_TrayMode;
 8003a8a:	4b3a      	ldr	r3, [pc, #232]	; (8003b74 <flowmodbus+0x26c>)
 8003a8c:	2205      	movs	r2, #5
 8003a8e:	701a      	strb	r2, [r3, #0]
		break;
 8003a90:	f000 bc8a 	b.w	80043a8 <flowmodbus+0xaa0>
	case Jogging_Place:
		//y-axis jogging
			if (Joystick_position[1] >= 3150) {
 8003a94:	4b3f      	ldr	r3, [pc, #252]	; (8003b94 <flowmodbus+0x28c>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f640 424d 	movw	r2, #3149	; 0xc4d
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d90a      	bls.n	8003ab6 <flowmodbus+0x1ae>
				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, JoystickSpeed);
 8003aa0:	4b3d      	ldr	r3, [pc, #244]	; (8003b98 <flowmodbus+0x290>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	4b3d      	ldr	r3, [pc, #244]	; (8003b9c <flowmodbus+0x294>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	635a      	str	r2, [r3, #52]	; 0x34
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2180      	movs	r1, #128	; 0x80
 8003aae:	483c      	ldr	r0, [pc, #240]	; (8003ba0 <flowmodbus+0x298>)
 8003ab0:	f002 fdce 	bl	8006650 <HAL_GPIO_WritePin>
 8003ab4:	e017      	b.n	8003ae6 <flowmodbus+0x1de>
			  }
			  else if (Joystick_position[1] <= 100) {
 8003ab6:	4b37      	ldr	r3, [pc, #220]	; (8003b94 <flowmodbus+0x28c>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b64      	cmp	r3, #100	; 0x64
 8003abc:	d80a      	bhi.n	8003ad4 <flowmodbus+0x1cc>
				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, JoystickSpeed);
 8003abe:	4b36      	ldr	r3, [pc, #216]	; (8003b98 <flowmodbus+0x290>)
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	4b36      	ldr	r3, [pc, #216]	; (8003b9c <flowmodbus+0x294>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	635a      	str	r2, [r3, #52]	; 0x34
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8003ac8:	2201      	movs	r2, #1
 8003aca:	2180      	movs	r1, #128	; 0x80
 8003acc:	4834      	ldr	r0, [pc, #208]	; (8003ba0 <flowmodbus+0x298>)
 8003ace:	f002 fdbf 	bl	8006650 <HAL_GPIO_WritePin>
 8003ad2:	e008      	b.n	8003ae6 <flowmodbus+0x1de>
			  }
			  else{
				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8003ad4:	4b31      	ldr	r3, [pc, #196]	; (8003b9c <flowmodbus+0x294>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	635a      	str	r2, [r3, #52]	; 0x34
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003adc:	2200      	movs	r2, #0
 8003ade:	2180      	movs	r1, #128	; 0x80
 8003ae0:	482f      	ldr	r0, [pc, #188]	; (8003ba0 <flowmodbus+0x298>)
 8003ae2:	f002 fdb5 	bl	8006650 <HAL_GPIO_WritePin>
			  }
				//x-axis jogging
			  if (Joystick_position[0] >= 3150)
 8003ae6:	4b2b      	ldr	r3, [pc, #172]	; (8003b94 <flowmodbus+0x28c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f640 424d 	movw	r2, #3149	; 0xc4d
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d904      	bls.n	8003afc <flowmodbus+0x1f4>
			  {
				  registerFrame[64].U16 = 8;
 8003af2:	4b21      	ldr	r3, [pc, #132]	; (8003b78 <flowmodbus+0x270>)
 8003af4:	2208      	movs	r2, #8
 8003af6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8003afa:	e00c      	b.n	8003b16 <flowmodbus+0x20e>
			  }
			  else if (Joystick_position[0] <= 100){
 8003afc:	4b25      	ldr	r3, [pc, #148]	; (8003b94 <flowmodbus+0x28c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b64      	cmp	r3, #100	; 0x64
 8003b02:	d804      	bhi.n	8003b0e <flowmodbus+0x206>
				  registerFrame[64].U16 = 4;
 8003b04:	4b1c      	ldr	r3, [pc, #112]	; (8003b78 <flowmodbus+0x270>)
 8003b06:	2204      	movs	r2, #4
 8003b08:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8003b0c:	e003      	b.n	8003b16 <flowmodbus+0x20e>
			  }
			  else{
				  registerFrame[64].U16 = 0;
 8003b0e:	4b1a      	ldr	r3, [pc, #104]	; (8003b78 <flowmodbus+0x270>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			  }

			  // Set position
			  	  buttonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8003b16:	2120      	movs	r1, #32
 8003b18:	4822      	ldr	r0, [pc, #136]	; (8003ba4 <flowmodbus+0x29c>)
 8003b1a:	f002 fd81 	bl	8006620 <HAL_GPIO_ReadPin>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	461a      	mov	r2, r3
 8003b22:	4b21      	ldr	r3, [pc, #132]	; (8003ba8 <flowmodbus+0x2a0>)
 8003b24:	701a      	strb	r2, [r3, #0]
			        if (buttonState != lastButtonState) {
 8003b26:	4b20      	ldr	r3, [pc, #128]	; (8003ba8 <flowmodbus+0x2a0>)
 8003b28:	781a      	ldrb	r2, [r3, #0]
 8003b2a:	4b20      	ldr	r3, [pc, #128]	; (8003bac <flowmodbus+0x2a4>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	f000 810d 	beq.w	8003d4e <flowmodbus+0x446>
			            // Button press is valid, perform desired action
						  if(CheckTray == 0){
 8003b34:	4b1e      	ldr	r3, [pc, #120]	; (8003bb0 <flowmodbus+0x2a8>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d17d      	bne.n	8003c38 <flowmodbus+0x330>
							  if(registerFrame[68].U16 > 60000){
 8003b3c:	4b0e      	ldr	r3, [pc, #56]	; (8003b78 <flowmodbus+0x270>)
 8003b3e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003b42:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d938      	bls.n	8003bbc <flowmodbus+0x2b4>
								posx = registerFrame[68].U16 - UINT16_MAX-1;
 8003b4a:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <flowmodbus+0x270>)
 8003b4c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003b50:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003b54:	4a17      	ldr	r2, [pc, #92]	; (8003bb4 <flowmodbus+0x2ac>)
 8003b56:	6013      	str	r3, [r2, #0]
								bottom_left_jog2[0] = (float)(posx)/10;
 8003b58:	4b16      	ldr	r3, [pc, #88]	; (8003bb4 <flowmodbus+0x2ac>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	ee07 3a90 	vmov	s15, r3
 8003b60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b64:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003b68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b6c:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <flowmodbus+0x2b0>)
 8003b6e:	edc3 7a00 	vstr	s15, [r3]
 8003b72:	e036      	b.n	8003be2 <flowmodbus+0x2da>
 8003b74:	20000d08 	.word	0x20000d08
 8003b78:	200011e4 	.word	0x200011e4
 8003b7c:	20000330 	.word	0x20000330
 8003b80:	2000094c 	.word	0x2000094c
 8003b84:	20000c80 	.word	0x20000c80
 8003b88:	20000200 	.word	0x20000200
 8003b8c:	20000ad8 	.word	0x20000ad8
 8003b90:	20000970 	.word	0x20000970
 8003b94:	2000128c 	.word	0x2000128c
 8003b98:	20000334 	.word	0x20000334
 8003b9c:	2000064c 	.word	0x2000064c
 8003ba0:	40020000 	.word	0x40020000
 8003ba4:	40020800 	.word	0x40020800
 8003ba8:	20000952 	.word	0x20000952
 8003bac:	20000951 	.word	0x20000951
 8003bb0:	20001294 	.word	0x20001294
 8003bb4:	20000968 	.word	0x20000968
 8003bb8:	20000cf8 	.word	0x20000cf8
							}
							else{
								posx = registerFrame[68].U16;
 8003bbc:	4ba2      	ldr	r3, [pc, #648]	; (8003e48 <flowmodbus+0x540>)
 8003bbe:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	4ba1      	ldr	r3, [pc, #644]	; (8003e4c <flowmodbus+0x544>)
 8003bc6:	601a      	str	r2, [r3, #0]
								bottom_left_jog2[0] = (float)(posx)/10;
 8003bc8:	4ba0      	ldr	r3, [pc, #640]	; (8003e4c <flowmodbus+0x544>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	ee07 3a90 	vmov	s15, r3
 8003bd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bd4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003bd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bdc:	4b9c      	ldr	r3, [pc, #624]	; (8003e50 <flowmodbus+0x548>)
 8003bde:	edc3 7a00 	vstr	s15, [r3]
							} // Calculate Point x-axis
							  bottom_left_jog2[1] = (float)(ReadDegree-350); // Calulate Point y-axis
 8003be2:	4b9c      	ldr	r3, [pc, #624]	; (8003e54 <flowmodbus+0x54c>)
 8003be4:	edd3 7a00 	vldr	s15, [r3]
 8003be8:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8003e58 <flowmodbus+0x550>
 8003bec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003bf0:	4b97      	ldr	r3, [pc, #604]	; (8003e50 <flowmodbus+0x548>)
 8003bf2:	edc3 7a01 	vstr	s15, [r3, #4]
							  registerFrame[35].U16 = (int)posx; // Place Tray Origin x
 8003bf6:	4b95      	ldr	r3, [pc, #596]	; (8003e4c <flowmodbus+0x544>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	4b92      	ldr	r3, [pc, #584]	; (8003e48 <flowmodbus+0x540>)
 8003bfe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
							  registerFrame[36].U16 = (int)(ReadDegree-350)*10; // Place Tray Origin y
 8003c02:	4b94      	ldr	r3, [pc, #592]	; (8003e54 <flowmodbus+0x54c>)
 8003c04:	edd3 7a00 	vldr	s15, [r3]
 8003c08:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8003e58 <flowmodbus+0x550>
 8003c0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c14:	ee17 3a90 	vmov	r3, s15
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	0092      	lsls	r2, r2, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	4b88      	ldr	r3, [pc, #544]	; (8003e48 <flowmodbus+0x540>)
 8003c26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
							  CheckTray++;
 8003c2a:	4b8c      	ldr	r3, [pc, #560]	; (8003e5c <flowmodbus+0x554>)
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	4b8a      	ldr	r3, [pc, #552]	; (8003e5c <flowmodbus+0x554>)
 8003c34:	701a      	strb	r2, [r3, #0]
 8003c36:	e08a      	b.n	8003d4e <flowmodbus+0x446>
						  }
						  else if(CheckTray == 1){
 8003c38:	4b88      	ldr	r3, [pc, #544]	; (8003e5c <flowmodbus+0x554>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d152      	bne.n	8003ce6 <flowmodbus+0x3de>
							  if(registerFrame[68].U16 > 60000){
 8003c40:	4b81      	ldr	r3, [pc, #516]	; (8003e48 <flowmodbus+0x540>)
 8003c42:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003c46:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d914      	bls.n	8003c78 <flowmodbus+0x370>
									posx = registerFrame[68].U16 - UINT16_MAX-1;
 8003c4e:	4b7e      	ldr	r3, [pc, #504]	; (8003e48 <flowmodbus+0x540>)
 8003c50:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003c54:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003c58:	4a7c      	ldr	r2, [pc, #496]	; (8003e4c <flowmodbus+0x544>)
 8003c5a:	6013      	str	r3, [r2, #0]
									bottom_right_jog2[0] = (float)(posx)/10;
 8003c5c:	4b7b      	ldr	r3, [pc, #492]	; (8003e4c <flowmodbus+0x544>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	ee07 3a90 	vmov	s15, r3
 8003c64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c68:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003c6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c70:	4b7b      	ldr	r3, [pc, #492]	; (8003e60 <flowmodbus+0x558>)
 8003c72:	edc3 7a00 	vstr	s15, [r3]
 8003c76:	e012      	b.n	8003c9e <flowmodbus+0x396>
								}
								else{
									posx = registerFrame[68].U16;
 8003c78:	4b73      	ldr	r3, [pc, #460]	; (8003e48 <flowmodbus+0x540>)
 8003c7a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003c7e:	461a      	mov	r2, r3
 8003c80:	4b72      	ldr	r3, [pc, #456]	; (8003e4c <flowmodbus+0x544>)
 8003c82:	601a      	str	r2, [r3, #0]
									bottom_right_jog2[0] = (float)(posx)/10;
 8003c84:	4b71      	ldr	r3, [pc, #452]	; (8003e4c <flowmodbus+0x544>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	ee07 3a90 	vmov	s15, r3
 8003c8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c90:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003c94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c98:	4b71      	ldr	r3, [pc, #452]	; (8003e60 <flowmodbus+0x558>)
 8003c9a:	edc3 7a00 	vstr	s15, [r3]
								}
							  posx = registerFrame[68].U16;
 8003c9e:	4b6a      	ldr	r3, [pc, #424]	; (8003e48 <flowmodbus+0x540>)
 8003ca0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b69      	ldr	r3, [pc, #420]	; (8003e4c <flowmodbus+0x544>)
 8003ca8:	601a      	str	r2, [r3, #0]
							  bottom_right_jog2[0] = (float)(posx)/10;
 8003caa:	4b68      	ldr	r3, [pc, #416]	; (8003e4c <flowmodbus+0x544>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cb6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003cba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cbe:	4b68      	ldr	r3, [pc, #416]	; (8003e60 <flowmodbus+0x558>)
 8003cc0:	edc3 7a00 	vstr	s15, [r3]
							  bottom_right_jog2[1] = (float)(ReadDegree-350); // Calculate Point y-axis
 8003cc4:	4b63      	ldr	r3, [pc, #396]	; (8003e54 <flowmodbus+0x54c>)
 8003cc6:	edd3 7a00 	vldr	s15, [r3]
 8003cca:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8003e58 <flowmodbus+0x550>
 8003cce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003cd2:	4b63      	ldr	r3, [pc, #396]	; (8003e60 <flowmodbus+0x558>)
 8003cd4:	edc3 7a01 	vstr	s15, [r3, #4]
							  CheckTray++;
 8003cd8:	4b60      	ldr	r3, [pc, #384]	; (8003e5c <flowmodbus+0x554>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	4b5e      	ldr	r3, [pc, #376]	; (8003e5c <flowmodbus+0x554>)
 8003ce2:	701a      	strb	r2, [r3, #0]
 8003ce4:	e033      	b.n	8003d4e <flowmodbus+0x446>
						  }
						  else if(CheckTray == 2){
 8003ce6:	4b5d      	ldr	r3, [pc, #372]	; (8003e5c <flowmodbus+0x554>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d12f      	bne.n	8003d4e <flowmodbus+0x446>
							  transformRectangleAndPointsPlace();
 8003cee:	f7ff fb8b 	bl	8003408 <transformRectangleAndPointsPlace>
							  orenationtray = abs((theta2)*57.2958*100);
 8003cf2:	4b5c      	ldr	r3, [pc, #368]	; (8003e64 <flowmodbus+0x55c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fc fbd2 	bl	80004a0 <__aeabi_f2d>
 8003cfc:	a350      	add	r3, pc, #320	; (adr r3, 8003e40 <flowmodbus+0x538>)
 8003cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d02:	f7fc fc25 	bl	8000550 <__aeabi_dmul>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	4b55      	ldr	r3, [pc, #340]	; (8003e68 <flowmodbus+0x560>)
 8003d14:	f7fc fc1c 	bl	8000550 <__aeabi_dmul>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	4619      	mov	r1, r3
 8003d20:	f7fc fec6 	bl	8000ab0 <__aeabi_d2iz>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	bfb8      	it	lt
 8003d2a:	425b      	neglt	r3, r3
 8003d2c:	4a4f      	ldr	r2, [pc, #316]	; (8003e6c <flowmodbus+0x564>)
 8003d2e:	6013      	str	r3, [r2, #0]
							  registerFrame[37].U16 = orenationtray;
 8003d30:	4b4e      	ldr	r3, [pc, #312]	; (8003e6c <flowmodbus+0x564>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	4b44      	ldr	r3, [pc, #272]	; (8003e48 <flowmodbus+0x540>)
 8003d38:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
							  registerFrame[16].U16 = 0; //0x10 y-status jogging fisnish reset to 0
 8003d3c:	4b42      	ldr	r3, [pc, #264]	; (8003e48 <flowmodbus+0x540>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	841a      	strh	r2, [r3, #32]
							  CheckTray = 0;
 8003d42:	4b46      	ldr	r3, [pc, #280]	; (8003e5c <flowmodbus+0x554>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	701a      	strb	r2, [r3, #0]
							  Mobus = Initial;
 8003d48:	4b49      	ldr	r3, [pc, #292]	; (8003e70 <flowmodbus+0x568>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	701a      	strb	r2, [r3, #0]
						  }
			        }

			    // Update the previous state
			    lastButtonState = buttonState;
 8003d4e:	4b49      	ldr	r3, [pc, #292]	; (8003e74 <flowmodbus+0x56c>)
 8003d50:	781a      	ldrb	r2, [r3, #0]
 8003d52:	4b49      	ldr	r3, [pc, #292]	; (8003e78 <flowmodbus+0x570>)
 8003d54:	701a      	strb	r2, [r3, #0]
		break;
 8003d56:	e362      	b.n	800441e <flowmodbus+0xb16>
	case Jogging_Pick:
		//y-axis jogging
					if (Joystick_position[1] >= 3150) {
 8003d58:	4b48      	ldr	r3, [pc, #288]	; (8003e7c <flowmodbus+0x574>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f640 424d 	movw	r2, #3149	; 0xc4d
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d90a      	bls.n	8003d7a <flowmodbus+0x472>
						  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, JoystickSpeed);
 8003d64:	4b46      	ldr	r3, [pc, #280]	; (8003e80 <flowmodbus+0x578>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	4b46      	ldr	r3, [pc, #280]	; (8003e84 <flowmodbus+0x57c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	635a      	str	r2, [r3, #52]	; 0x34
						  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003d6e:	2200      	movs	r2, #0
 8003d70:	2180      	movs	r1, #128	; 0x80
 8003d72:	4845      	ldr	r0, [pc, #276]	; (8003e88 <flowmodbus+0x580>)
 8003d74:	f002 fc6c 	bl	8006650 <HAL_GPIO_WritePin>
 8003d78:	e017      	b.n	8003daa <flowmodbus+0x4a2>
					  }
					  else if (Joystick_position[1] <= 100) {
 8003d7a:	4b40      	ldr	r3, [pc, #256]	; (8003e7c <flowmodbus+0x574>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b64      	cmp	r3, #100	; 0x64
 8003d80:	d80a      	bhi.n	8003d98 <flowmodbus+0x490>
						  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, JoystickSpeed);
 8003d82:	4b3f      	ldr	r3, [pc, #252]	; (8003e80 <flowmodbus+0x578>)
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	4b3f      	ldr	r3, [pc, #252]	; (8003e84 <flowmodbus+0x57c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	635a      	str	r2, [r3, #52]	; 0x34
						  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	2180      	movs	r1, #128	; 0x80
 8003d90:	483d      	ldr	r0, [pc, #244]	; (8003e88 <flowmodbus+0x580>)
 8003d92:	f002 fc5d 	bl	8006650 <HAL_GPIO_WritePin>
 8003d96:	e008      	b.n	8003daa <flowmodbus+0x4a2>
					  }
					  else{
						  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8003d98:	4b3a      	ldr	r3, [pc, #232]	; (8003e84 <flowmodbus+0x57c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	635a      	str	r2, [r3, #52]	; 0x34
						  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003da0:	2200      	movs	r2, #0
 8003da2:	2180      	movs	r1, #128	; 0x80
 8003da4:	4838      	ldr	r0, [pc, #224]	; (8003e88 <flowmodbus+0x580>)
 8003da6:	f002 fc53 	bl	8006650 <HAL_GPIO_WritePin>
					  }
						//x-axis jogging
					  if (Joystick_position[0] >= 3150)
 8003daa:	4b34      	ldr	r3, [pc, #208]	; (8003e7c <flowmodbus+0x574>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f640 424d 	movw	r2, #3149	; 0xc4d
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d904      	bls.n	8003dc0 <flowmodbus+0x4b8>
					  {
						  registerFrame[64].U16 = 8;
 8003db6:	4b24      	ldr	r3, [pc, #144]	; (8003e48 <flowmodbus+0x540>)
 8003db8:	2208      	movs	r2, #8
 8003dba:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8003dbe:	e00c      	b.n	8003dda <flowmodbus+0x4d2>
					  }
					  else if (Joystick_position[0] <= 100){
 8003dc0:	4b2e      	ldr	r3, [pc, #184]	; (8003e7c <flowmodbus+0x574>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b64      	cmp	r3, #100	; 0x64
 8003dc6:	d804      	bhi.n	8003dd2 <flowmodbus+0x4ca>
						  registerFrame[64].U16 = 4;
 8003dc8:	4b1f      	ldr	r3, [pc, #124]	; (8003e48 <flowmodbus+0x540>)
 8003dca:	2204      	movs	r2, #4
 8003dcc:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8003dd0:	e003      	b.n	8003dda <flowmodbus+0x4d2>
					  }
					  else{
						  registerFrame[64].U16 = 0;
 8003dd2:	4b1d      	ldr	r3, [pc, #116]	; (8003e48 <flowmodbus+0x540>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
					  }

			  // Set position
						buttonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8003dda:	2120      	movs	r1, #32
 8003ddc:	482b      	ldr	r0, [pc, #172]	; (8003e8c <flowmodbus+0x584>)
 8003dde:	f002 fc1f 	bl	8006620 <HAL_GPIO_ReadPin>
 8003de2:	4603      	mov	r3, r0
 8003de4:	461a      	mov	r2, r3
 8003de6:	4b23      	ldr	r3, [pc, #140]	; (8003e74 <flowmodbus+0x56c>)
 8003de8:	701a      	strb	r2, [r3, #0]
						if (buttonState != lastButtonState) {
 8003dea:	4b22      	ldr	r3, [pc, #136]	; (8003e74 <flowmodbus+0x56c>)
 8003dec:	781a      	ldrb	r2, [r3, #0]
 8003dee:	4b22      	ldr	r3, [pc, #136]	; (8003e78 <flowmodbus+0x570>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	f000 8104 	beq.w	8004000 <flowmodbus+0x6f8>
							// Button press is valid, perform desired action
							if (CheckTray == 0) {
 8003df8:	4b18      	ldr	r3, [pc, #96]	; (8003e5c <flowmodbus+0x554>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f040 8087 	bne.w	8003f10 <flowmodbus+0x608>
								if(registerFrame[68].U16 > 60000){
 8003e02:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <flowmodbus+0x540>)
 8003e04:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003e08:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d941      	bls.n	8003e94 <flowmodbus+0x58c>
									posx = registerFrame[68].U16 - UINT16_MAX-1;
 8003e10:	4b0d      	ldr	r3, [pc, #52]	; (8003e48 <flowmodbus+0x540>)
 8003e12:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003e16:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003e1a:	4a0c      	ldr	r2, [pc, #48]	; (8003e4c <flowmodbus+0x544>)
 8003e1c:	6013      	str	r3, [r2, #0]
									bottom_left_jog[0] = (float)(posx)/10;
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <flowmodbus+0x544>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	ee07 3a90 	vmov	s15, r3
 8003e26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e2a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003e2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e32:	4b17      	ldr	r3, [pc, #92]	; (8003e90 <flowmodbus+0x588>)
 8003e34:	edc3 7a00 	vstr	s15, [r3]
 8003e38:	e03f      	b.n	8003eba <flowmodbus+0x5b2>
 8003e3a:	bf00      	nop
 8003e3c:	f3af 8000 	nop.w
 8003e40:	c63f1412 	.word	0xc63f1412
 8003e44:	404ca5dc 	.word	0x404ca5dc
 8003e48:	200011e4 	.word	0x200011e4
 8003e4c:	20000968 	.word	0x20000968
 8003e50:	20000cf8 	.word	0x20000cf8
 8003e54:	20001308 	.word	0x20001308
 8003e58:	43af0000 	.word	0x43af0000
 8003e5c:	20001294 	.word	0x20001294
 8003e60:	20000d00 	.word	0x20000d00
 8003e64:	20000cf0 	.word	0x20000cf0
 8003e68:	40590000 	.word	0x40590000
 8003e6c:	2000096c 	.word	0x2000096c
 8003e70:	20000d08 	.word	0x20000d08
 8003e74:	20000952 	.word	0x20000952
 8003e78:	20000951 	.word	0x20000951
 8003e7c:	2000128c 	.word	0x2000128c
 8003e80:	20000334 	.word	0x20000334
 8003e84:	2000064c 	.word	0x2000064c
 8003e88:	40020000 	.word	0x40020000
 8003e8c:	40020800 	.word	0x40020800
 8003e90:	20000b50 	.word	0x20000b50
								}
								else{
									posx = registerFrame[68].U16;
 8003e94:	4b7c      	ldr	r3, [pc, #496]	; (8004088 <flowmodbus+0x780>)
 8003e96:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	4b7b      	ldr	r3, [pc, #492]	; (800408c <flowmodbus+0x784>)
 8003e9e:	601a      	str	r2, [r3, #0]
									bottom_left_jog[0] = (float)(posx)/10;
 8003ea0:	4b7a      	ldr	r3, [pc, #488]	; (800408c <flowmodbus+0x784>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	ee07 3a90 	vmov	s15, r3
 8003ea8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003eac:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003eb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003eb4:	4b76      	ldr	r3, [pc, #472]	; (8004090 <flowmodbus+0x788>)
 8003eb6:	edc3 7a00 	vstr	s15, [r3]
								}
								bottom_left_jog[1] = ((float)ReadDegree-350); // Calulate Point y-axis
 8003eba:	4b76      	ldr	r3, [pc, #472]	; (8004094 <flowmodbus+0x78c>)
 8003ebc:	edd3 7a00 	vldr	s15, [r3]
 8003ec0:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8004098 <flowmodbus+0x790>
 8003ec4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ec8:	4b71      	ldr	r3, [pc, #452]	; (8004090 <flowmodbus+0x788>)
 8003eca:	edc3 7a01 	vstr	s15, [r3, #4]
								registerFrame[32].U16 = (int)posx; // Place Tray Origin x
 8003ece:	4b6f      	ldr	r3, [pc, #444]	; (800408c <flowmodbus+0x784>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	4b6c      	ldr	r3, [pc, #432]	; (8004088 <flowmodbus+0x780>)
 8003ed6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
								registerFrame[33].U16 = (int)(ReadDegree-350)*10; // Place Tray Origin y
 8003eda:	4b6e      	ldr	r3, [pc, #440]	; (8004094 <flowmodbus+0x78c>)
 8003edc:	edd3 7a00 	vldr	s15, [r3]
 8003ee0:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8004098 <flowmodbus+0x790>
 8003ee4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003eec:	ee17 3a90 	vmov	r3, s15
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	0092      	lsls	r2, r2, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	4b62      	ldr	r3, [pc, #392]	; (8004088 <flowmodbus+0x780>)
 8003efe:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
								CheckTray++;
 8003f02:	4b66      	ldr	r3, [pc, #408]	; (800409c <flowmodbus+0x794>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	3301      	adds	r3, #1
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	4b64      	ldr	r3, [pc, #400]	; (800409c <flowmodbus+0x794>)
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	e077      	b.n	8004000 <flowmodbus+0x6f8>
							}
							else if (CheckTray == 1) {
 8003f10:	4b62      	ldr	r3, [pc, #392]	; (800409c <flowmodbus+0x794>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d13f      	bne.n	8003f98 <flowmodbus+0x690>
								if(registerFrame[68].U16 > 60000){
 8003f18:	4b5b      	ldr	r3, [pc, #364]	; (8004088 <flowmodbus+0x780>)
 8003f1a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003f1e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d914      	bls.n	8003f50 <flowmodbus+0x648>
									posx = registerFrame[68].U16 - UINT16_MAX-1;
 8003f26:	4b58      	ldr	r3, [pc, #352]	; (8004088 <flowmodbus+0x780>)
 8003f28:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003f2c:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003f30:	4a56      	ldr	r2, [pc, #344]	; (800408c <flowmodbus+0x784>)
 8003f32:	6013      	str	r3, [r2, #0]
									bottom_right_jog[0] = (float)(posx)/10;
 8003f34:	4b55      	ldr	r3, [pc, #340]	; (800408c <flowmodbus+0x784>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	ee07 3a90 	vmov	s15, r3
 8003f3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f40:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003f44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f48:	4b55      	ldr	r3, [pc, #340]	; (80040a0 <flowmodbus+0x798>)
 8003f4a:	edc3 7a00 	vstr	s15, [r3]
 8003f4e:	e012      	b.n	8003f76 <flowmodbus+0x66e>
								}
								else{
									posx = registerFrame[68].U16;
 8003f50:	4b4d      	ldr	r3, [pc, #308]	; (8004088 <flowmodbus+0x780>)
 8003f52:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003f56:	461a      	mov	r2, r3
 8003f58:	4b4c      	ldr	r3, [pc, #304]	; (800408c <flowmodbus+0x784>)
 8003f5a:	601a      	str	r2, [r3, #0]
									bottom_right_jog[0] = (float)(posx)/10;
 8003f5c:	4b4b      	ldr	r3, [pc, #300]	; (800408c <flowmodbus+0x784>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	ee07 3a90 	vmov	s15, r3
 8003f64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f68:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003f6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f70:	4b4b      	ldr	r3, [pc, #300]	; (80040a0 <flowmodbus+0x798>)
 8003f72:	edc3 7a00 	vstr	s15, [r3]
								}
								bottom_right_jog[1] = (float)(ReadDegree-(float)350); // Calculate Point y-axis
 8003f76:	4b47      	ldr	r3, [pc, #284]	; (8004094 <flowmodbus+0x78c>)
 8003f78:	edd3 7a00 	vldr	s15, [r3]
 8003f7c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8004098 <flowmodbus+0x790>
 8003f80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f84:	4b46      	ldr	r3, [pc, #280]	; (80040a0 <flowmodbus+0x798>)
 8003f86:	edc3 7a01 	vstr	s15, [r3, #4]
								CheckTray++;
 8003f8a:	4b44      	ldr	r3, [pc, #272]	; (800409c <flowmodbus+0x794>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	4b42      	ldr	r3, [pc, #264]	; (800409c <flowmodbus+0x794>)
 8003f94:	701a      	strb	r2, [r3, #0]
 8003f96:	e033      	b.n	8004000 <flowmodbus+0x6f8>
							}
							else if (CheckTray == 2) {
 8003f98:	4b40      	ldr	r3, [pc, #256]	; (800409c <flowmodbus+0x794>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d12f      	bne.n	8004000 <flowmodbus+0x6f8>
								transformRectangleAndPointsPick();
 8003fa0:	f7fe ffb2 	bl	8002f08 <transformRectangleAndPointsPick>
								orenationtray = abs((theta)*57.2958*100);
 8003fa4:	4b3f      	ldr	r3, [pc, #252]	; (80040a4 <flowmodbus+0x79c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fc fa79 	bl	80004a0 <__aeabi_f2d>
 8003fae:	a334      	add	r3, pc, #208	; (adr r3, 8004080 <flowmodbus+0x778>)
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f7fc facc 	bl	8000550 <__aeabi_dmul>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	4b38      	ldr	r3, [pc, #224]	; (80040a8 <flowmodbus+0x7a0>)
 8003fc6:	f7fc fac3 	bl	8000550 <__aeabi_dmul>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4610      	mov	r0, r2
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f7fc fd6d 	bl	8000ab0 <__aeabi_d2iz>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	bfb8      	it	lt
 8003fdc:	425b      	neglt	r3, r3
 8003fde:	4a33      	ldr	r2, [pc, #204]	; (80040ac <flowmodbus+0x7a4>)
 8003fe0:	6013      	str	r3, [r2, #0]
								registerFrame[34].U16 = orenationtray;
 8003fe2:	4b32      	ldr	r3, [pc, #200]	; (80040ac <flowmodbus+0x7a4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	4b27      	ldr	r3, [pc, #156]	; (8004088 <flowmodbus+0x780>)
 8003fea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
								registerFrame[16].U16 = 0; // 0x10 y-status jogging finish reset to 0
 8003fee:	4b26      	ldr	r3, [pc, #152]	; (8004088 <flowmodbus+0x780>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	841a      	strh	r2, [r3, #32]
								CheckTray = 0;
 8003ff4:	4b29      	ldr	r3, [pc, #164]	; (800409c <flowmodbus+0x794>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	701a      	strb	r2, [r3, #0]
								Mobus = Initial;
 8003ffa:	4b2d      	ldr	r3, [pc, #180]	; (80040b0 <flowmodbus+0x7a8>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	701a      	strb	r2, [r3, #0]
							}
						}
				// Update the previous state
				lastButtonState = buttonState;
 8004000:	4b2c      	ldr	r3, [pc, #176]	; (80040b4 <flowmodbus+0x7ac>)
 8004002:	781a      	ldrb	r2, [r3, #0]
 8004004:	4b2c      	ldr	r3, [pc, #176]	; (80040b8 <flowmodbus+0x7b0>)
 8004006:	701a      	strb	r2, [r3, #0]
		break;
 8004008:	e209      	b.n	800441e <flowmodbus+0xb16>
	case Home:
		// x axis
			registerFrame[64].U16 = 1; // 0x40 Moving Status x-axis - Home
 800400a:	4b1f      	ldr	r3, [pc, #124]	; (8004088 <flowmodbus+0x780>)
 800400c:	2201      	movs	r2, #1
 800400e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			Mobus = Initial;
 8004012:	4b27      	ldr	r3, [pc, #156]	; (80040b0 <flowmodbus+0x7a8>)
 8004014:	2200      	movs	r2, #0
 8004016:	701a      	strb	r2, [r3, #0]
		// y axis
		break;
 8004018:	e201      	b.n	800441e <flowmodbus+0xb16>
	case Run_PointMode:
		// x axis
			registerFrame[65].U16 = registerFrame[48].U16; // position Tray pick/place
 800401a:	4b1b      	ldr	r3, [pc, #108]	; (8004088 <flowmodbus+0x780>)
 800401c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8004020:	4b19      	ldr	r3, [pc, #100]	; (8004088 <flowmodbus+0x780>)
 8004022:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
			registerFrame[66].U16 = 3000; // speed x-axis 300mm
 8004026:	4b18      	ldr	r3, [pc, #96]	; (8004088 <flowmodbus+0x780>)
 8004028:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800402c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
			registerFrame[67].U16 = 1; // Acc time 1mms
 8004030:	4b15      	ldr	r3, [pc, #84]	; (8004088 <flowmodbus+0x780>)
 8004032:	2201      	movs	r2, #1
 8004034:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
			registerFrame[64].U16 = 2; //0x40 Moving Status x-axis - run mode
 8004038:	4b13      	ldr	r3, [pc, #76]	; (8004088 <flowmodbus+0x780>)
 800403a:	2202      	movs	r2, #2
 800403c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		// y axis
			if(registerFrame[49].U16 > 60000)SetDegree = ((350-(UINT16_MAX - registerFrame[49].U16)/10));
 8004040:	4b11      	ldr	r3, [pc, #68]	; (8004088 <flowmodbus+0x780>)
 8004042:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004046:	f64e 2260 	movw	r2, #60000	; 0xea60
 800404a:	4293      	cmp	r3, r2
 800404c:	d93a      	bls.n	80040c4 <flowmodbus+0x7bc>
 800404e:	4b0e      	ldr	r3, [pc, #56]	; (8004088 <flowmodbus+0x780>)
 8004050:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004054:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004058:	33ff      	adds	r3, #255	; 0xff
 800405a:	4a18      	ldr	r2, [pc, #96]	; (80040bc <flowmodbus+0x7b4>)
 800405c:	fb82 1203 	smull	r1, r2, r2, r3
 8004060:	1092      	asrs	r2, r2, #2
 8004062:	17db      	asrs	r3, r3, #31
 8004064:	1a9b      	subs	r3, r3, r2
 8004066:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 800406a:	ee07 3a90 	vmov	s15, r3
 800406e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004072:	4b13      	ldr	r3, [pc, #76]	; (80040c0 <flowmodbus+0x7b8>)
 8004074:	edc3 7a00 	vstr	s15, [r3]
 8004078:	e03c      	b.n	80040f4 <flowmodbus+0x7ec>
 800407a:	bf00      	nop
 800407c:	f3af 8000 	nop.w
 8004080:	c63f1412 	.word	0xc63f1412
 8004084:	404ca5dc 	.word	0x404ca5dc
 8004088:	200011e4 	.word	0x200011e4
 800408c:	20000968 	.word	0x20000968
 8004090:	20000b50 	.word	0x20000b50
 8004094:	20001308 	.word	0x20001308
 8004098:	43af0000 	.word	0x43af0000
 800409c:	20001294 	.word	0x20001294
 80040a0:	20000b58 	.word	0x20000b58
 80040a4:	20000b48 	.word	0x20000b48
 80040a8:	40590000 	.word	0x40590000
 80040ac:	2000096c 	.word	0x2000096c
 80040b0:	20000d08 	.word	0x20000d08
 80040b4:	20000952 	.word	0x20000952
 80040b8:	20000951 	.word	0x20000951
 80040bc:	66666667 	.word	0x66666667
 80040c0:	2000130c 	.word	0x2000130c
			else if (registerFrame[49].U16 <= 3500){
 80040c4:	4bbc      	ldr	r3, [pc, #752]	; (80043b8 <flowmodbus+0xab0>)
 80040c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80040ca:	f640 52ac 	movw	r2, #3500	; 0xdac
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d810      	bhi.n	80040f4 <flowmodbus+0x7ec>
			SetDegree = (registerFrame[49].U16 / 10)+350;
 80040d2:	4bb9      	ldr	r3, [pc, #740]	; (80043b8 <flowmodbus+0xab0>)
 80040d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80040d8:	4ab8      	ldr	r2, [pc, #736]	; (80043bc <flowmodbus+0xab4>)
 80040da:	fba2 2303 	umull	r2, r3, r2, r3
 80040de:	08db      	lsrs	r3, r3, #3
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040ee:	4bb4      	ldr	r3, [pc, #720]	; (80043c0 <flowmodbus+0xab8>)
 80040f0:	edc3 7a00 	vstr	s15, [r3]
			}
			SetVelocity = 400;
 80040f4:	4bb3      	ldr	r3, [pc, #716]	; (80043c4 <flowmodbus+0xabc>)
 80040f6:	4ab4      	ldr	r2, [pc, #720]	; (80043c8 <flowmodbus+0xac0>)
 80040f8:	601a      	str	r2, [r3, #0]
			if (error > 0) { // setpoint > read_encoder
 80040fa:	4bb4      	ldr	r3, [pc, #720]	; (80043cc <flowmodbus+0xac4>)
 80040fc:	edd3 7a00 	vldr	s15, [r3]
 8004100:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004108:	dd38      	ble.n	800417c <flowmodbus+0x874>
			  SetVelocity = abs(SetVelocity);
 800410a:	4bae      	ldr	r3, [pc, #696]	; (80043c4 <flowmodbus+0xabc>)
 800410c:	edd3 7a00 	vldr	s15, [r3]
 8004110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004114:	ee17 3a90 	vmov	r3, s15
 8004118:	2b00      	cmp	r3, #0
 800411a:	bfb8      	it	lt
 800411c:	425b      	neglt	r3, r3
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004126:	4ba7      	ldr	r3, [pc, #668]	; (80043c4 <flowmodbus+0xabc>)
 8004128:	edc3 7a00 	vstr	s15, [r3]
			 if (error < 0.2) {
 800412c:	4ba7      	ldr	r3, [pc, #668]	; (80043cc <flowmodbus+0xac4>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f7fc f9b5 	bl	80004a0 <__aeabi_f2d>
 8004136:	a39e      	add	r3, pc, #632	; (adr r3, 80043b0 <flowmodbus+0xaa8>)
 8004138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413c:	f7fc fc7a 	bl	8000a34 <__aeabi_dcmplt>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00b      	beq.n	800415e <flowmodbus+0x856>
				  DegreeFeedback = 0; // Limit Position
 8004146:	4ba2      	ldr	r3, [pc, #648]	; (80043d0 <flowmodbus+0xac8>)
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	601a      	str	r2, [r3, #0]
				  s = 0;
 800414e:	4ba1      	ldr	r3, [pc, #644]	; (80043d4 <flowmodbus+0xacc>)
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	601a      	str	r2, [r3, #0]
				  s2 = 0;
 8004156:	4ba0      	ldr	r3, [pc, #640]	; (80043d8 <flowmodbus+0xad0>)
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	601a      	str	r2, [r3, #0]
			  }
			  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, DegreeFeedback);
 800415e:	4b9c      	ldr	r3, [pc, #624]	; (80043d0 <flowmodbus+0xac8>)
 8004160:	edd3 7a00 	vldr	s15, [r3]
 8004164:	4b9d      	ldr	r3, [pc, #628]	; (80043dc <flowmodbus+0xad4>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800416c:	ee17 2a90 	vmov	r2, s15
 8004170:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8004172:	2200      	movs	r2, #0
 8004174:	2180      	movs	r1, #128	; 0x80
 8004176:	489a      	ldr	r0, [pc, #616]	; (80043e0 <flowmodbus+0xad8>)
 8004178:	f002 fa6a 	bl	8006650 <HAL_GPIO_WritePin>
		  }
			if (error < 0 ) { // setpoint < read_encoder
 800417c:	4b93      	ldr	r3, [pc, #588]	; (80043cc <flowmodbus+0xac4>)
 800417e:	edd3 7a00 	vldr	s15, [r3]
 8004182:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800418a:	d53e      	bpl.n	800420a <flowmodbus+0x902>
			  if(SetVelocity > 0)SetVelocity = -SetVelocity;
 800418c:	4b8d      	ldr	r3, [pc, #564]	; (80043c4 <flowmodbus+0xabc>)
 800418e:	edd3 7a00 	vldr	s15, [r3]
 8004192:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800419a:	dd07      	ble.n	80041ac <flowmodbus+0x8a4>
 800419c:	4b89      	ldr	r3, [pc, #548]	; (80043c4 <flowmodbus+0xabc>)
 800419e:	edd3 7a00 	vldr	s15, [r3]
 80041a2:	eef1 7a67 	vneg.f32	s15, s15
 80041a6:	4b87      	ldr	r3, [pc, #540]	; (80043c4 <flowmodbus+0xabc>)
 80041a8:	edc3 7a00 	vstr	s15, [r3]
			  if (error * -1 < 0.2) {
 80041ac:	4b87      	ldr	r3, [pc, #540]	; (80043cc <flowmodbus+0xac4>)
 80041ae:	edd3 7a00 	vldr	s15, [r3]
 80041b2:	eef1 7a67 	vneg.f32	s15, s15
 80041b6:	ee17 3a90 	vmov	r3, s15
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fc f970 	bl	80004a0 <__aeabi_f2d>
 80041c0:	a37b      	add	r3, pc, #492	; (adr r3, 80043b0 <flowmodbus+0xaa8>)
 80041c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c6:	f7fc fc35 	bl	8000a34 <__aeabi_dcmplt>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00b      	beq.n	80041e8 <flowmodbus+0x8e0>
				  DegreeFeedback = 0; // Limit Position
 80041d0:	4b7f      	ldr	r3, [pc, #508]	; (80043d0 <flowmodbus+0xac8>)
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
				  s = 0;
 80041d8:	4b7e      	ldr	r3, [pc, #504]	; (80043d4 <flowmodbus+0xacc>)
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	601a      	str	r2, [r3, #0]
				  s2 = 0;
 80041e0:	4b7d      	ldr	r3, [pc, #500]	; (80043d8 <flowmodbus+0xad0>)
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]
			  }
			  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, DegreeFeedback * -1);
 80041e8:	4b79      	ldr	r3, [pc, #484]	; (80043d0 <flowmodbus+0xac8>)
 80041ea:	edd3 7a00 	vldr	s15, [r3]
 80041ee:	eef1 7a67 	vneg.f32	s15, s15
 80041f2:	4b7a      	ldr	r3, [pc, #488]	; (80043dc <flowmodbus+0xad4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041fa:	ee17 2a90 	vmov	r2, s15
 80041fe:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8004200:	2201      	movs	r2, #1
 8004202:	2180      	movs	r1, #128	; 0x80
 8004204:	4876      	ldr	r0, [pc, #472]	; (80043e0 <flowmodbus+0xad8>)
 8004206:	f002 fa23 	bl	8006650 <HAL_GPIO_WritePin>
		  }
			registerFrame[16].U16 = 0;
 800420a:	4b6b      	ldr	r3, [pc, #428]	; (80043b8 <flowmodbus+0xab0>)
 800420c:	2200      	movs	r2, #0
 800420e:	841a      	strh	r2, [r3, #32]
			Mobus = Initial;
 8004210:	4b74      	ldr	r3, [pc, #464]	; (80043e4 <flowmodbus+0xadc>)
 8004212:	2200      	movs	r2, #0
 8004214:	701a      	strb	r2, [r3, #0]
		break;
 8004216:	e102      	b.n	800441e <flowmodbus+0xb16>
	case Run_TrayMode:
		registerFrame[1].U16 = 4 ;// Basesystem reset position
 8004218:	4b67      	ldr	r3, [pc, #412]	; (80043b8 <flowmodbus+0xab0>)
 800421a:	2204      	movs	r2, #4
 800421c:	805a      	strh	r2, [r3, #2]
		static uint64_t timestamptray;
			  if(HAL_GetTick() >= timestamptray){ // heartbeat
 800421e:	f000 ff4d 	bl	80050bc <HAL_GetTick>
 8004222:	4603      	mov	r3, r0
 8004224:	2200      	movs	r2, #0
 8004226:	461c      	mov	r4, r3
 8004228:	4615      	mov	r5, r2
 800422a:	4b6f      	ldr	r3, [pc, #444]	; (80043e8 <flowmodbus+0xae0>)
 800422c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004230:	4294      	cmp	r4, r2
 8004232:	eb75 0303 	sbcs.w	r3, r5, r3
 8004236:	f0c0 80f1 	bcc.w	800441c <flowmodbus+0xb14>
				  path = 1;
 800423a:	4b6c      	ldr	r3, [pc, #432]	; (80043ec <flowmodbus+0xae4>)
 800423c:	2201      	movs	r2, #1
 800423e:	601a      	str	r2, [r3, #0]
				  indexposition = 0;
 8004240:	4b6b      	ldr	r3, [pc, #428]	; (80043f0 <flowmodbus+0xae8>)
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
				  timestamptray = HAL_GetTick() + 3000;
 8004246:	f000 ff39 	bl	80050bc <HAL_GetTick>
 800424a:	4603      	mov	r3, r0
 800424c:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8004250:	2200      	movs	r2, #0
 8004252:	4698      	mov	r8, r3
 8004254:	4691      	mov	r9, r2
 8004256:	4b64      	ldr	r3, [pc, #400]	; (80043e8 <flowmodbus+0xae0>)
 8004258:	e9c3 8900 	strd	r8, r9, [r3]
				  // y axis
				  start_p = point_y[plustray]+350;
 800425c:	4b65      	ldr	r3, [pc, #404]	; (80043f4 <flowmodbus+0xaec>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a65      	ldr	r2, [pc, #404]	; (80043f8 <flowmodbus+0xaf0>)
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	edd3 7a00 	vldr	s15, [r3]
 800426a:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80043fc <flowmodbus+0xaf4>
 800426e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004272:	4b63      	ldr	r3, [pc, #396]	; (8004400 <flowmodbus+0xaf8>)
 8004274:	edc3 7a00 	vstr	s15, [r3]
				  stop_p = point_y[plustray+1]+350;
 8004278:	4b5e      	ldr	r3, [pc, #376]	; (80043f4 <flowmodbus+0xaec>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3301      	adds	r3, #1
 800427e:	4a5e      	ldr	r2, [pc, #376]	; (80043f8 <flowmodbus+0xaf0>)
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	edd3 7a00 	vldr	s15, [r3]
 8004288:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80043fc <flowmodbus+0xaf4>
 800428c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004290:	4b5c      	ldr	r3, [pc, #368]	; (8004404 <flowmodbus+0xafc>)
 8004292:	edc3 7a00 	vstr	s15, [r3]
				  start_v = 0; // qk
 8004296:	4b5c      	ldr	r3, [pc, #368]	; (8004408 <flowmodbus+0xb00>)
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	601a      	str	r2, [r3, #0]
				  stop_v = 0; // q_dotk+1
 800429e:	4b5b      	ldr	r3, [pc, #364]	; (800440c <flowmodbus+0xb04>)
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
				  timecycle = 2;
 80042a6:	4b5a      	ldr	r3, [pc, #360]	; (8004410 <flowmodbus+0xb08>)
 80042a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042ac:	601a      	str	r2, [r3, #0]
				  Qubic(start_p, stop_p, start_v, stop_v, timecycle, 0,
 80042ae:	4b54      	ldr	r3, [pc, #336]	; (8004400 <flowmodbus+0xaf8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fc f8f4 	bl	80004a0 <__aeabi_f2d>
 80042b8:	4604      	mov	r4, r0
 80042ba:	460d      	mov	r5, r1
 80042bc:	4b51      	ldr	r3, [pc, #324]	; (8004404 <flowmodbus+0xafc>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fc f8ed 	bl	80004a0 <__aeabi_f2d>
 80042c6:	4680      	mov	r8, r0
 80042c8:	4689      	mov	r9, r1
 80042ca:	4b4f      	ldr	r3, [pc, #316]	; (8004408 <flowmodbus+0xb00>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fc f8e6 	bl	80004a0 <__aeabi_f2d>
 80042d4:	4682      	mov	sl, r0
 80042d6:	468b      	mov	fp, r1
 80042d8:	4b4c      	ldr	r3, [pc, #304]	; (800440c <flowmodbus+0xb04>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7fc f8df 	bl	80004a0 <__aeabi_f2d>
 80042e2:	ec41 0b18 	vmov	d8, r0, r1
 80042e6:	4b4a      	ldr	r3, [pc, #296]	; (8004410 <flowmodbus+0xb08>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fc f8d8 	bl	80004a0 <__aeabi_f2d>
 80042f0:	ec41 0b17 	vmov	d7, r0, r1
 80042f4:	2200      	movs	r2, #0
 80042f6:	2100      	movs	r1, #0
 80042f8:	2000      	movs	r0, #0
 80042fa:	eeb0 4a47 	vmov.f32	s8, s14
 80042fe:	eef0 4a67 	vmov.f32	s9, s15
 8004302:	eeb0 3a48 	vmov.f32	s6, s16
 8004306:	eef0 3a68 	vmov.f32	s7, s17
 800430a:	ec4b ab12 	vmov	d2, sl, fp
 800430e:	ec49 8b11 	vmov	d1, r8, r9
 8004312:	ec45 4b10 	vmov	d0, r4, r5
 8004316:	f7fd fa7f 	bl	8001818 <Qubic>
				          0, 0);
				  // x axis
				registerFrame[65].U16 = point_x[plustray];// position Tray pick/place
 800431a:	4b36      	ldr	r3, [pc, #216]	; (80043f4 <flowmodbus+0xaec>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a3d      	ldr	r2, [pc, #244]	; (8004414 <flowmodbus+0xb0c>)
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	edd3 7a00 	vldr	s15, [r3]
 8004328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800432c:	ee17 3a90 	vmov	r3, s15
 8004330:	b29a      	uxth	r2, r3
 8004332:	4b21      	ldr	r3, [pc, #132]	; (80043b8 <flowmodbus+0xab0>)
 8004334:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				registerFrame[66].U16 = 3000; // speed x-axis 300mm
 8004338:	4b1f      	ldr	r3, [pc, #124]	; (80043b8 <flowmodbus+0xab0>)
 800433a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800433e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				registerFrame[67].U16 = 1; // Acc time 1mms
 8004342:	4b1d      	ldr	r3, [pc, #116]	; (80043b8 <flowmodbus+0xab0>)
 8004344:	2201      	movs	r2, #1
 8004346:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
				registerFrame[64].U16 = 2; //0x40 Moving Status x-axis - run mode
 800434a:	4b1b      	ldr	r3, [pc, #108]	; (80043b8 <flowmodbus+0xab0>)
 800434c:	2202      	movs	r2, #2
 800434e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
				if(indexposition == (timecycle*2000)-1){
 8004352:	4b27      	ldr	r3, [pc, #156]	; (80043f0 <flowmodbus+0xae8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	ee07 3a90 	vmov	s15, r3
 800435a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800435e:	4b2c      	ldr	r3, [pc, #176]	; (8004410 <flowmodbus+0xb08>)
 8004360:	edd3 7a00 	vldr	s15, [r3]
 8004364:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8004418 <flowmodbus+0xb10>
 8004368:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800436c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004370:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004374:	eeb4 7a67 	vcmp.f32	s14, s15
 8004378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800437c:	d102      	bne.n	8004384 <flowmodbus+0xa7c>
					indexposition = 0;
 800437e:	4b1c      	ldr	r3, [pc, #112]	; (80043f0 <flowmodbus+0xae8>)
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
				}
				if(plustray < 18){
 8004384:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <flowmodbus+0xaec>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b11      	cmp	r3, #17
 800438a:	dc05      	bgt.n	8004398 <flowmodbus+0xa90>
					plustray++;
 800438c:	4b19      	ldr	r3, [pc, #100]	; (80043f4 <flowmodbus+0xaec>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3301      	adds	r3, #1
 8004392:	4a18      	ldr	r2, [pc, #96]	; (80043f4 <flowmodbus+0xaec>)
 8004394:	6013      	str	r3, [r2, #0]
				}
				else if(plustray == 18){
						Mobus = Initial;
				}
			  }
		break;
 8004396:	e041      	b.n	800441c <flowmodbus+0xb14>
				else if(plustray == 18){
 8004398:	4b16      	ldr	r3, [pc, #88]	; (80043f4 <flowmodbus+0xaec>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b12      	cmp	r3, #18
 800439e:	d13d      	bne.n	800441c <flowmodbus+0xb14>
						Mobus = Initial;
 80043a0:	4b10      	ldr	r3, [pc, #64]	; (80043e4 <flowmodbus+0xadc>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	701a      	strb	r2, [r3, #0]
		break;
 80043a6:	e039      	b.n	800441c <flowmodbus+0xb14>
		break;
 80043a8:	bf00      	nop
 80043aa:	e038      	b.n	800441e <flowmodbus+0xb16>
 80043ac:	f3af 8000 	nop.w
 80043b0:	9999999a 	.word	0x9999999a
 80043b4:	3fc99999 	.word	0x3fc99999
 80043b8:	200011e4 	.word	0x200011e4
 80043bc:	cccccccd 	.word	0xcccccccd
 80043c0:	2000130c 	.word	0x2000130c
 80043c4:	20000344 	.word	0x20000344
 80043c8:	43c80000 	.word	0x43c80000
 80043cc:	20001314 	.word	0x20001314
 80043d0:	20001310 	.word	0x20001310
 80043d4:	200012e8 	.word	0x200012e8
 80043d8:	200012f4 	.word	0x200012f4
 80043dc:	2000064c 	.word	0x2000064c
 80043e0:	40020000 	.word	0x40020000
 80043e4:	20000d08 	.word	0x20000d08
 80043e8:	20001330 	.word	0x20001330
 80043ec:	2000127c 	.word	0x2000127c
 80043f0:	200012dc 	.word	0x200012dc
 80043f4:	20000948 	.word	0x20000948
 80043f8:	20000200 	.word	0x20000200
 80043fc:	43af0000 	.word	0x43af0000
 8004400:	20000954 	.word	0x20000954
 8004404:	20000958 	.word	0x20000958
 8004408:	2000095c 	.word	0x2000095c
 800440c:	20000960 	.word	0x20000960
 8004410:	20000964 	.word	0x20000964
 8004414:	20000970 	.word	0x20000970
 8004418:	44fa0000 	.word	0x44fa0000
		break;
 800441c:	bf00      	nop
		}
	}
 800441e:	bf00      	nop
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	ecbd 8b02 	vpop	{d8}
 8004428:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800442c <control_interrupt>:
float control_interrupt(){
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
    //loop 1
	error = SetDegree - ReadDegree;
 8004430:	4b52      	ldr	r3, [pc, #328]	; (800457c <control_interrupt+0x150>)
 8004432:	ed93 7a00 	vldr	s14, [r3]
 8004436:	4b52      	ldr	r3, [pc, #328]	; (8004580 <control_interrupt+0x154>)
 8004438:	edd3 7a00 	vldr	s15, [r3]
 800443c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004440:	4b50      	ldr	r3, [pc, #320]	; (8004584 <control_interrupt+0x158>)
 8004442:	edc3 7a00 	vstr	s15, [r3]
	s = s + error;
 8004446:	4b50      	ldr	r3, [pc, #320]	; (8004588 <control_interrupt+0x15c>)
 8004448:	ed93 7a00 	vldr	s14, [r3]
 800444c:	4b4d      	ldr	r3, [pc, #308]	; (8004584 <control_interrupt+0x158>)
 800444e:	edd3 7a00 	vldr	s15, [r3]
 8004452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004456:	4b4c      	ldr	r3, [pc, #304]	; (8004588 <control_interrupt+0x15c>)
 8004458:	edc3 7a00 	vstr	s15, [r3]
	u = K_P*error+K_I*s+K_D*(error-p);
 800445c:	4b4b      	ldr	r3, [pc, #300]	; (800458c <control_interrupt+0x160>)
 800445e:	ed93 7a00 	vldr	s14, [r3]
 8004462:	4b48      	ldr	r3, [pc, #288]	; (8004584 <control_interrupt+0x158>)
 8004464:	edd3 7a00 	vldr	s15, [r3]
 8004468:	ee27 7a27 	vmul.f32	s14, s14, s15
 800446c:	4b48      	ldr	r3, [pc, #288]	; (8004590 <control_interrupt+0x164>)
 800446e:	edd3 6a00 	vldr	s13, [r3]
 8004472:	4b45      	ldr	r3, [pc, #276]	; (8004588 <control_interrupt+0x15c>)
 8004474:	edd3 7a00 	vldr	s15, [r3]
 8004478:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800447c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004480:	4b40      	ldr	r3, [pc, #256]	; (8004584 <control_interrupt+0x158>)
 8004482:	edd3 6a00 	vldr	s13, [r3]
 8004486:	4b43      	ldr	r3, [pc, #268]	; (8004594 <control_interrupt+0x168>)
 8004488:	edd3 7a00 	vldr	s15, [r3]
 800448c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004490:	4b41      	ldr	r3, [pc, #260]	; (8004598 <control_interrupt+0x16c>)
 8004492:	edd3 7a00 	vldr	s15, [r3]
 8004496:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800449a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800449e:	4b3f      	ldr	r3, [pc, #252]	; (800459c <control_interrupt+0x170>)
 80044a0:	edc3 7a00 	vstr	s15, [r3]
	p = error;
 80044a4:	4b37      	ldr	r3, [pc, #220]	; (8004584 <control_interrupt+0x158>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a3a      	ldr	r2, [pc, #232]	; (8004594 <control_interrupt+0x168>)
 80044aa:	6013      	str	r3, [r2, #0]
	// loop 2
	error2 = (u + SetVelocity) - speed;
 80044ac:	4b3b      	ldr	r3, [pc, #236]	; (800459c <control_interrupt+0x170>)
 80044ae:	ed93 7a00 	vldr	s14, [r3]
 80044b2:	4b3b      	ldr	r3, [pc, #236]	; (80045a0 <control_interrupt+0x174>)
 80044b4:	edd3 7a00 	vldr	s15, [r3]
 80044b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044bc:	4b39      	ldr	r3, [pc, #228]	; (80045a4 <control_interrupt+0x178>)
 80044be:	edd3 7a00 	vldr	s15, [r3]
 80044c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044c6:	4b38      	ldr	r3, [pc, #224]	; (80045a8 <control_interrupt+0x17c>)
 80044c8:	edc3 7a00 	vstr	s15, [r3]
	s2 = s2 + error2;
 80044cc:	4b37      	ldr	r3, [pc, #220]	; (80045ac <control_interrupt+0x180>)
 80044ce:	ed93 7a00 	vldr	s14, [r3]
 80044d2:	4b35      	ldr	r3, [pc, #212]	; (80045a8 <control_interrupt+0x17c>)
 80044d4:	edd3 7a00 	vldr	s15, [r3]
 80044d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044dc:	4b33      	ldr	r3, [pc, #204]	; (80045ac <control_interrupt+0x180>)
 80044de:	edc3 7a00 	vstr	s15, [r3]
	u2 = K_Pvelo*error2+K_Ivelo*s2+K_Dvelo*(error2-p2);
 80044e2:	4b33      	ldr	r3, [pc, #204]	; (80045b0 <control_interrupt+0x184>)
 80044e4:	ed93 7a00 	vldr	s14, [r3]
 80044e8:	4b2f      	ldr	r3, [pc, #188]	; (80045a8 <control_interrupt+0x17c>)
 80044ea:	edd3 7a00 	vldr	s15, [r3]
 80044ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044f2:	4b30      	ldr	r3, [pc, #192]	; (80045b4 <control_interrupt+0x188>)
 80044f4:	edd3 6a00 	vldr	s13, [r3]
 80044f8:	4b2c      	ldr	r3, [pc, #176]	; (80045ac <control_interrupt+0x180>)
 80044fa:	edd3 7a00 	vldr	s15, [r3]
 80044fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004502:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004506:	4b28      	ldr	r3, [pc, #160]	; (80045a8 <control_interrupt+0x17c>)
 8004508:	edd3 6a00 	vldr	s13, [r3]
 800450c:	4b2a      	ldr	r3, [pc, #168]	; (80045b8 <control_interrupt+0x18c>)
 800450e:	edd3 7a00 	vldr	s15, [r3]
 8004512:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004516:	4b29      	ldr	r3, [pc, #164]	; (80045bc <control_interrupt+0x190>)
 8004518:	edd3 7a00 	vldr	s15, [r3]
 800451c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004524:	4b26      	ldr	r3, [pc, #152]	; (80045c0 <control_interrupt+0x194>)
 8004526:	edc3 7a00 	vstr	s15, [r3]
	if(u2>65534)u2=65535;
 800452a:	4b25      	ldr	r3, [pc, #148]	; (80045c0 <control_interrupt+0x194>)
 800452c:	edd3 7a00 	vldr	s15, [r3]
 8004530:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80045c4 <control_interrupt+0x198>
 8004534:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800453c:	dd02      	ble.n	8004544 <control_interrupt+0x118>
 800453e:	4b20      	ldr	r3, [pc, #128]	; (80045c0 <control_interrupt+0x194>)
 8004540:	4a21      	ldr	r2, [pc, #132]	; (80045c8 <control_interrupt+0x19c>)
 8004542:	601a      	str	r2, [r3, #0]
	if(u2<-65534)u2=-65535;
 8004544:	4b1e      	ldr	r3, [pc, #120]	; (80045c0 <control_interrupt+0x194>)
 8004546:	edd3 7a00 	vldr	s15, [r3]
 800454a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80045cc <control_interrupt+0x1a0>
 800454e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004556:	d502      	bpl.n	800455e <control_interrupt+0x132>
 8004558:	4b19      	ldr	r3, [pc, #100]	; (80045c0 <control_interrupt+0x194>)
 800455a:	4a1d      	ldr	r2, [pc, #116]	; (80045d0 <control_interrupt+0x1a4>)
 800455c:	601a      	str	r2, [r3, #0]
	p2 = error2;
 800455e:	4b12      	ldr	r3, [pc, #72]	; (80045a8 <control_interrupt+0x17c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a15      	ldr	r2, [pc, #84]	; (80045b8 <control_interrupt+0x18c>)
 8004564:	6013      	str	r3, [r2, #0]
return u2;
 8004566:	4b16      	ldr	r3, [pc, #88]	; (80045c0 <control_interrupt+0x194>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	ee07 3a90 	vmov	s15, r3
}
 800456e:	eeb0 0a67 	vmov.f32	s0, s15
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	2000130c 	.word	0x2000130c
 8004580:	20001308 	.word	0x20001308
 8004584:	20001314 	.word	0x20001314
 8004588:	200012e8 	.word	0x200012e8
 800458c:	200012fc 	.word	0x200012fc
 8004590:	20000338 	.word	0x20000338
 8004594:	200012e4 	.word	0x200012e4
 8004598:	20001300 	.word	0x20001300
 800459c:	200012e0 	.word	0x200012e0
 80045a0:	20000344 	.word	0x20000344
 80045a4:	20001274 	.word	0x20001274
 80045a8:	200012f8 	.word	0x200012f8
 80045ac:	200012f4 	.word	0x200012f4
 80045b0:	2000033c 	.word	0x2000033c
 80045b4:	20000340 	.word	0x20000340
 80045b8:	200012f0 	.word	0x200012f0
 80045bc:	20001304 	.word	0x20001304
 80045c0:	200012ec 	.word	0x200012ec
 80045c4:	477ffe00 	.word	0x477ffe00
 80045c8:	477fff00 	.word	0x477fff00
 80045cc:	c77ffe00 	.word	0xc77ffe00
 80045d0:	c77fff00 	.word	0xc77fff00

080045d4 <velocity>:
	if(u2>65535)u2=65535;
	if(u2<-65535)u2=-65535;
	p2 = error2;
return u2;
}
void velocity(){
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
	QEIData.data[0] = __HAL_TIM_GET_COUNTER(&htim2);
 80045da:	4b2c      	ldr	r3, [pc, #176]	; (800468c <velocity+0xb8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	4a2b      	ldr	r2, [pc, #172]	; (8004690 <velocity+0xbc>)
 80045e2:	6013      	str	r3, [r2, #0]
	QEIData.timestamp[0] = micros();
 80045e4:	f000 f8c2 	bl	800476c <micros>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4b28      	ldr	r3, [pc, #160]	; (8004690 <velocity+0xbc>)
 80045ee:	609a      	str	r2, [r3, #8]

	int32_t diffposition = QEIData.data[0] - QEIData.data[1];
 80045f0:	4b27      	ldr	r3, [pc, #156]	; (8004690 <velocity+0xbc>)
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	4b26      	ldr	r3, [pc, #152]	; (8004690 <velocity+0xbc>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	607b      	str	r3, [r7, #4]
	float difftime = QEIData.timestamp[0] - QEIData.timestamp[1];
 80045fc:	4b24      	ldr	r3, [pc, #144]	; (8004690 <velocity+0xbc>)
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	4b23      	ldr	r3, [pc, #140]	; (8004690 <velocity+0xbc>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	ee07 3a90 	vmov	s15, r3
 800460a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460e:	edc7 7a00 	vstr	s15, [r7]

	if(ReadDegree > 750){
 8004612:	4b20      	ldr	r3, [pc, #128]	; (8004694 <velocity+0xc0>)
 8004614:	edd3 7a00 	vldr	s15, [r3]
 8004618:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004698 <velocity+0xc4>
 800461c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004624:	dd03      	ble.n	800462e <velocity+0x5a>
		SetDegree = 0;
 8004626:	4b1d      	ldr	r3, [pc, #116]	; (800469c <velocity+0xc8>)
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	601a      	str	r2, [r3, #0]
	}
	if(diffposition < -(QEI_PERIOD >> 1)){
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f513 4fa0 	cmn.w	r3, #20480	; 0x5000
 8004634:	da03      	bge.n	800463e <velocity+0x6a>
		diffposition += QEI_PERIOD;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 800463c:	607b      	str	r3, [r7, #4]
	}

	QEIData.QEIPosition = __HAL_TIM_GET_COUNTER(&htim2) % 8192;
 800463e:	4b13      	ldr	r3, [pc, #76]	; (800468c <velocity+0xb8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004648:	ee07 3a90 	vmov	s15, r3
 800464c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004650:	4b0f      	ldr	r3, [pc, #60]	; (8004690 <velocity+0xbc>)
 8004652:	edc3 7a04 	vstr	s15, [r3, #16]
	QEIData.QEIVelocity = (diffposition*1000000)/difftime;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a11      	ldr	r2, [pc, #68]	; (80046a0 <velocity+0xcc>)
 800465a:	fb02 f303 	mul.w	r3, r2, r3
 800465e:	ee07 3a90 	vmov	s15, r3
 8004662:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004666:	ed97 7a00 	vldr	s14, [r7]
 800466a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800466e:	4b08      	ldr	r3, [pc, #32]	; (8004690 <velocity+0xbc>)
 8004670:	edc3 7a05 	vstr	s15, [r3, #20]

	QEIData.data[1] = QEIData.data[0];
 8004674:	4b06      	ldr	r3, [pc, #24]	; (8004690 <velocity+0xbc>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a05      	ldr	r2, [pc, #20]	; (8004690 <velocity+0xbc>)
 800467a:	6053      	str	r3, [r2, #4]
	QEIData.timestamp[1] = QEIData.timestamp[0];
 800467c:	4b04      	ldr	r3, [pc, #16]	; (8004690 <velocity+0xbc>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	4a03      	ldr	r2, [pc, #12]	; (8004690 <velocity+0xbc>)
 8004682:	60d3      	str	r3, [r2, #12]

}
 8004684:	bf00      	nop
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	200004e4 	.word	0x200004e4
 8004690:	20001298 	.word	0x20001298
 8004694:	20001308 	.word	0x20001308
 8004698:	443b8000 	.word	0x443b8000
 800469c:	2000130c 	.word	0x2000130c
 80046a0:	000f4240 	.word	0x000f4240

080046a4 <accelerate>:
void accelerate(){
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
	QEIAcc.data[0] = speed;
 80046aa:	4b20      	ldr	r3, [pc, #128]	; (800472c <accelerate+0x88>)
 80046ac:	edd3 7a00 	vldr	s15, [r3]
 80046b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046b4:	ee17 2a90 	vmov	r2, s15
 80046b8:	4b1d      	ldr	r3, [pc, #116]	; (8004730 <accelerate+0x8c>)
 80046ba:	601a      	str	r2, [r3, #0]
	QEIAcc.timestamp[0] = micros();
 80046bc:	f000 f856 	bl	800476c <micros>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	4b1a      	ldr	r3, [pc, #104]	; (8004730 <accelerate+0x8c>)
 80046c6:	609a      	str	r2, [r3, #8]

	int32_t diffposition = QEIAcc.data[0] - QEIAcc.data[1];
 80046c8:	4b19      	ldr	r3, [pc, #100]	; (8004730 <accelerate+0x8c>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	4b18      	ldr	r3, [pc, #96]	; (8004730 <accelerate+0x8c>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	607b      	str	r3, [r7, #4]
	float difftime = QEIAcc.timestamp[0] - QEIAcc.timestamp[1];
 80046d4:	4b16      	ldr	r3, [pc, #88]	; (8004730 <accelerate+0x8c>)
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	4b15      	ldr	r3, [pc, #84]	; (8004730 <accelerate+0x8c>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	ee07 3a90 	vmov	s15, r3
 80046e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e6:	edc7 7a00 	vstr	s15, [r7]
	difftime = difftime/1000000;
 80046ea:	ed97 7a00 	vldr	s14, [r7]
 80046ee:	eddf 6a11 	vldr	s13, [pc, #68]	; 8004734 <accelerate+0x90>
 80046f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046f6:	edc7 7a00 	vstr	s15, [r7]

	QEIAcc.QEIVelocity = (diffposition/difftime);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	ee07 3a90 	vmov	s15, r3
 8004700:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004704:	ed97 7a00 	vldr	s14, [r7]
 8004708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800470c:	4b08      	ldr	r3, [pc, #32]	; (8004730 <accelerate+0x8c>)
 800470e:	edc3 7a05 	vstr	s15, [r3, #20]

	QEIAcc.data[1] = QEIAcc.data[0];
 8004712:	4b07      	ldr	r3, [pc, #28]	; (8004730 <accelerate+0x8c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a06      	ldr	r2, [pc, #24]	; (8004730 <accelerate+0x8c>)
 8004718:	6053      	str	r3, [r2, #4]
	QEIAcc.timestamp[1] = QEIAcc.timestamp[0];
 800471a:	4b05      	ldr	r3, [pc, #20]	; (8004730 <accelerate+0x8c>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	4a04      	ldr	r2, [pc, #16]	; (8004730 <accelerate+0x8c>)
 8004720:	60d3      	str	r3, [r2, #12]
}
 8004722:	bf00      	nop
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	20001274 	.word	0x20001274
 8004730:	200012b0 	.word	0x200012b0
 8004734:	49742400 	.word	0x49742400

08004738 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004738:	b4b0      	push	{r4, r5, r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
	if(htim == &htim5){
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a08      	ldr	r2, [pc, #32]	; (8004764 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d108      	bne.n	800475a <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8004748:	4b07      	ldr	r3, [pc, #28]	; (8004768 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800474a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474e:	1e54      	subs	r4, r2, #1
 8004750:	f143 0500 	adc.w	r5, r3, #0
 8004754:	4b04      	ldr	r3, [pc, #16]	; (8004768 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004756:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	bcb0      	pop	{r4, r5, r7}
 8004762:	4770      	bx	lr
 8004764:	20000700 	.word	0x20000700
 8004768:	200012c8 	.word	0x200012c8

0800476c <micros>:
uint64_t micros(){
 800476c:	b4b0      	push	{r4, r5, r7}
 800476e:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8004770:	4b09      	ldr	r3, [pc, #36]	; (8004798 <micros+0x2c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	2200      	movs	r2, #0
 8004778:	4618      	mov	r0, r3
 800477a:	4611      	mov	r1, r2
 800477c:	4b07      	ldr	r3, [pc, #28]	; (800479c <micros+0x30>)
 800477e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004782:	1884      	adds	r4, r0, r2
 8004784:	eb41 0503 	adc.w	r5, r1, r3
 8004788:	4622      	mov	r2, r4
 800478a:	462b      	mov	r3, r5
}
 800478c:	4610      	mov	r0, r2
 800478e:	4619      	mov	r1, r3
 8004790:	46bd      	mov	sp, r7
 8004792:	bcb0      	pop	{r4, r5, r7}
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	20000700 	.word	0x20000700
 800479c:	200012c8 	.word	0x200012c8

080047a0 <main_Qubic>:
void main_Qubic()
{
 80047a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047a4:	ed2d 8b02 	vpush	{d8}
 80047a8:	b086      	sub	sp, #24
 80047aa:	af00      	add	r7, sp, #0
  emxArray_real_T *q_acc;
  emxArray_real_T *q_position;
  emxArray_real_T *q_velocity;
  double q_k1_tmp;
  /* Initialize function 'Qubic' input arguments. */
  q_k1_tmp = argInit_real_T();
 80047ac:	f7fd fcb2 	bl	8002114 <argInit_real_T>
 80047b0:	ed87 0b04 	vstr	d0, [r7, #16]
  /* Call the entry-point 'Qubic'. */
  emxInitArray_real_T(&q_position, 2);
 80047b4:	f107 0308 	add.w	r3, r7, #8
 80047b8:	2102      	movs	r1, #2
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fd fbbc 	bl	8001f38 <emxInitArray_real_T>
  emxInitArray_real_T(&q_velocity, 2);
 80047c0:	1d3b      	adds	r3, r7, #4
 80047c2:	2102      	movs	r1, #2
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fd fbb7 	bl	8001f38 <emxInitArray_real_T>
  emxInitArray_real_T(&q_acc, 2);
 80047ca:	f107 030c 	add.w	r3, r7, #12
 80047ce:	2102      	movs	r1, #2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7fd fbb1 	bl	8001f38 <emxInitArray_real_T>
  Qubic(start_p, stop_p, start_v, stop_v, timecycle, q_position,
 80047d6:	4b29      	ldr	r3, [pc, #164]	; (800487c <main_Qubic+0xdc>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fb fe60 	bl	80004a0 <__aeabi_f2d>
 80047e0:	4604      	mov	r4, r0
 80047e2:	460d      	mov	r5, r1
 80047e4:	4b26      	ldr	r3, [pc, #152]	; (8004880 <main_Qubic+0xe0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fb fe59 	bl	80004a0 <__aeabi_f2d>
 80047ee:	4680      	mov	r8, r0
 80047f0:	4689      	mov	r9, r1
 80047f2:	4b24      	ldr	r3, [pc, #144]	; (8004884 <main_Qubic+0xe4>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fb fe52 	bl	80004a0 <__aeabi_f2d>
 80047fc:	4682      	mov	sl, r0
 80047fe:	468b      	mov	fp, r1
 8004800:	4b21      	ldr	r3, [pc, #132]	; (8004888 <main_Qubic+0xe8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4618      	mov	r0, r3
 8004806:	f7fb fe4b 	bl	80004a0 <__aeabi_f2d>
 800480a:	ec41 0b18 	vmov	d8, r0, r1
 800480e:	4b1f      	ldr	r3, [pc, #124]	; (800488c <main_Qubic+0xec>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f7fb fe44 	bl	80004a0 <__aeabi_f2d>
 8004818:	ec41 0b17 	vmov	d7, r0, r1
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	4618      	mov	r0, r3
 8004824:	eeb0 4a47 	vmov.f32	s8, s14
 8004828:	eef0 4a67 	vmov.f32	s9, s15
 800482c:	eeb0 3a48 	vmov.f32	s6, s16
 8004830:	eef0 3a68 	vmov.f32	s7, s17
 8004834:	ec4b ab12 	vmov	d2, sl, fp
 8004838:	ec49 8b11 	vmov	d1, r8, r9
 800483c:	ec45 4b10 	vmov	d0, r4, r5
 8004840:	f7fc ffea 	bl	8001818 <Qubic>
        q_velocity, q_acc);
  q_positionN = q_position;
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4a12      	ldr	r2, [pc, #72]	; (8004890 <main_Qubic+0xf0>)
 8004848:	6013      	str	r3, [r2, #0]
  q_velocityN = q_velocity;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a11      	ldr	r2, [pc, #68]	; (8004894 <main_Qubic+0xf4>)
 800484e:	6013      	str	r3, [r2, #0]
  q_accN = q_acc;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a11      	ldr	r2, [pc, #68]	; (8004898 <main_Qubic+0xf8>)
 8004854:	6013      	str	r3, [r2, #0]
  emxDestroyArray_real_T(q_position);
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	4618      	mov	r0, r3
 800485a:	f7fd fb61 	bl	8001f20 <emxDestroyArray_real_T>
  emxDestroyArray_real_T(q_velocity);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4618      	mov	r0, r3
 8004862:	f7fd fb5d 	bl	8001f20 <emxDestroyArray_real_T>
  emxDestroyArray_real_T(q_acc);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4618      	mov	r0, r3
 800486a:	f7fd fb59 	bl	8001f20 <emxDestroyArray_real_T>
}
 800486e:	bf00      	nop
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	ecbd 8b02 	vpop	{d8}
 8004878:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800487c:	20000954 	.word	0x20000954
 8004880:	20000958 	.word	0x20000958
 8004884:	2000095c 	.word	0x2000095c
 8004888:	20000960 	.word	0x20000960
 800488c:	20000964 	.word	0x20000964
 8004890:	200012d4 	.word	0x200012d4
 8004894:	200012d0 	.word	0x200012d0
 8004898:	200012d8 	.word	0x200012d8

0800489c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80048a0:	b672      	cpsid	i
}
 80048a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80048a4:	e7fe      	b.n	80048a4 <Error_Handler+0x8>
	...

080048a8 <rtIsInf>:
 * Function: rtIsInf ==================================================
 *  Abstract:
 *  Test if value is infinite
 */
boolean_T rtIsInf(real_T value)
{
 80048a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	ed87 0b00 	vstr	d0, [r7]
  return (isinf(value) != 0U);
 80048b2:	683c      	ldr	r4, [r7, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80048ba:	2301      	movs	r3, #1
 80048bc:	461e      	mov	r6, r3
 80048be:	f04f 32ff 	mov.w	r2, #4294967295
 80048c2:	4b0f      	ldr	r3, [pc, #60]	; (8004900 <rtIsInf+0x58>)
 80048c4:	4620      	mov	r0, r4
 80048c6:	4629      	mov	r1, r5
 80048c8:	f7fc f8dc 	bl	8000a84 <__aeabi_dcmpun>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10b      	bne.n	80048ea <rtIsInf+0x42>
 80048d2:	f04f 32ff 	mov.w	r2, #4294967295
 80048d6:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <rtIsInf+0x58>)
 80048d8:	4620      	mov	r0, r4
 80048da:	4629      	mov	r1, r5
 80048dc:	f7fc f8b4 	bl	8000a48 <__aeabi_dcmple>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <rtIsInf+0x42>
 80048e6:	2300      	movs	r3, #0
 80048e8:	461e      	mov	r6, r3
 80048ea:	b2f3      	uxtb	r3, r6
 80048ec:	f083 0301 	eor.w	r3, r3, #1
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	b2db      	uxtb	r3, r3
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004900:	7fefffff 	.word	0x7fefffff

08004904 <rtIsNaN>:
 * Function: rtIsNaN ==================================================
 *  Abstract:
 *  Test if value is not a number
 */
boolean_T rtIsNaN(real_T value)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	ed87 0b00 	vstr	d0, [r7]
  return (isnan(value) != 0U);
 800490e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004912:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004916:	f7fc f8b5 	bl	8000a84 <__aeabi_dcmpun>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <rtIsNaN+0x20>
 8004920:	2301      	movs	r3, #1
 8004922:	e000      	b.n	8004926 <rtIsNaN+0x22>
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
	...

08004930 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004936:	2300      	movs	r3, #0
 8004938:	607b      	str	r3, [r7, #4]
 800493a:	4b10      	ldr	r3, [pc, #64]	; (800497c <HAL_MspInit+0x4c>)
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493e:	4a0f      	ldr	r2, [pc, #60]	; (800497c <HAL_MspInit+0x4c>)
 8004940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004944:	6453      	str	r3, [r2, #68]	; 0x44
 8004946:	4b0d      	ldr	r3, [pc, #52]	; (800497c <HAL_MspInit+0x4c>)
 8004948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800494e:	607b      	str	r3, [r7, #4]
 8004950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004952:	2300      	movs	r3, #0
 8004954:	603b      	str	r3, [r7, #0]
 8004956:	4b09      	ldr	r3, [pc, #36]	; (800497c <HAL_MspInit+0x4c>)
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	4a08      	ldr	r2, [pc, #32]	; (800497c <HAL_MspInit+0x4c>)
 800495c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004960:	6413      	str	r3, [r2, #64]	; 0x40
 8004962:	4b06      	ldr	r3, [pc, #24]	; (800497c <HAL_MspInit+0x4c>)
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496a:	603b      	str	r3, [r7, #0]
 800496c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800496e:	2007      	movs	r0, #7
 8004970:	f001 f882 	bl	8005a78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004974:	bf00      	nop
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40023800 	.word	0x40023800

08004980 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b08a      	sub	sp, #40	; 0x28
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004988:	f107 0314 	add.w	r3, r7, #20
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	605a      	str	r2, [r3, #4]
 8004992:	609a      	str	r2, [r3, #8]
 8004994:	60da      	str	r2, [r3, #12]
 8004996:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a3c      	ldr	r2, [pc, #240]	; (8004a90 <HAL_ADC_MspInit+0x110>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d171      	bne.n	8004a86 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80049a2:	2300      	movs	r3, #0
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	4b3b      	ldr	r3, [pc, #236]	; (8004a94 <HAL_ADC_MspInit+0x114>)
 80049a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049aa:	4a3a      	ldr	r2, [pc, #232]	; (8004a94 <HAL_ADC_MspInit+0x114>)
 80049ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b0:	6453      	str	r3, [r2, #68]	; 0x44
 80049b2:	4b38      	ldr	r3, [pc, #224]	; (8004a94 <HAL_ADC_MspInit+0x114>)
 80049b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ba:	613b      	str	r3, [r7, #16]
 80049bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049be:	2300      	movs	r3, #0
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	4b34      	ldr	r3, [pc, #208]	; (8004a94 <HAL_ADC_MspInit+0x114>)
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	4a33      	ldr	r2, [pc, #204]	; (8004a94 <HAL_ADC_MspInit+0x114>)
 80049c8:	f043 0301 	orr.w	r3, r3, #1
 80049cc:	6313      	str	r3, [r2, #48]	; 0x30
 80049ce:	4b31      	ldr	r3, [pc, #196]	; (8004a94 <HAL_ADC_MspInit+0x114>)
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049da:	2300      	movs	r3, #0
 80049dc:	60bb      	str	r3, [r7, #8]
 80049de:	4b2d      	ldr	r3, [pc, #180]	; (8004a94 <HAL_ADC_MspInit+0x114>)
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	4a2c      	ldr	r2, [pc, #176]	; (8004a94 <HAL_ADC_MspInit+0x114>)
 80049e4:	f043 0302 	orr.w	r3, r3, #2
 80049e8:	6313      	str	r3, [r2, #48]	; 0x30
 80049ea:	4b2a      	ldr	r3, [pc, #168]	; (8004a94 <HAL_ADC_MspInit+0x114>)
 80049ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	60bb      	str	r3, [r7, #8]
 80049f4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Joystick_Y_Pin;
 80049f6:	2310      	movs	r3, #16
 80049f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049fa:	2303      	movs	r3, #3
 80049fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Joystick_Y_GPIO_Port, &GPIO_InitStruct);
 8004a02:	f107 0314 	add.w	r3, r7, #20
 8004a06:	4619      	mov	r1, r3
 8004a08:	4823      	ldr	r0, [pc, #140]	; (8004a98 <HAL_ADC_MspInit+0x118>)
 8004a0a:	f001 fc85 	bl	8006318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Joystick_X_Pin;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a12:	2303      	movs	r3, #3
 8004a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Joystick_X_GPIO_Port, &GPIO_InitStruct);
 8004a1a:	f107 0314 	add.w	r3, r7, #20
 8004a1e:	4619      	mov	r1, r3
 8004a20:	481e      	ldr	r0, [pc, #120]	; (8004a9c <HAL_ADC_MspInit+0x11c>)
 8004a22:	f001 fc79 	bl	8006318 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004a26:	4b1e      	ldr	r3, [pc, #120]	; (8004aa0 <HAL_ADC_MspInit+0x120>)
 8004a28:	4a1e      	ldr	r2, [pc, #120]	; (8004aa4 <HAL_ADC_MspInit+0x124>)
 8004a2a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004a2c:	4b1c      	ldr	r3, [pc, #112]	; (8004aa0 <HAL_ADC_MspInit+0x120>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a32:	4b1b      	ldr	r3, [pc, #108]	; (8004aa0 <HAL_ADC_MspInit+0x120>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a38:	4b19      	ldr	r3, [pc, #100]	; (8004aa0 <HAL_ADC_MspInit+0x120>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004a3e:	4b18      	ldr	r3, [pc, #96]	; (8004aa0 <HAL_ADC_MspInit+0x120>)
 8004a40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a44:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004a46:	4b16      	ldr	r3, [pc, #88]	; (8004aa0 <HAL_ADC_MspInit+0x120>)
 8004a48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a4c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004a4e:	4b14      	ldr	r3, [pc, #80]	; (8004aa0 <HAL_ADC_MspInit+0x120>)
 8004a50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004a56:	4b12      	ldr	r3, [pc, #72]	; (8004aa0 <HAL_ADC_MspInit+0x120>)
 8004a58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a5c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004a5e:	4b10      	ldr	r3, [pc, #64]	; (8004aa0 <HAL_ADC_MspInit+0x120>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a64:	4b0e      	ldr	r3, [pc, #56]	; (8004aa0 <HAL_ADC_MspInit+0x120>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004a6a:	480d      	ldr	r0, [pc, #52]	; (8004aa0 <HAL_ADC_MspInit+0x120>)
 8004a6c:	f001 f846 	bl	8005afc <HAL_DMA_Init>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8004a76:	f7ff ff11 	bl	800489c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a08      	ldr	r2, [pc, #32]	; (8004aa0 <HAL_ADC_MspInit+0x120>)
 8004a7e:	639a      	str	r2, [r3, #56]	; 0x38
 8004a80:	4a07      	ldr	r2, [pc, #28]	; (8004aa0 <HAL_ADC_MspInit+0x120>)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004a86:	bf00      	nop
 8004a88:	3728      	adds	r7, #40	; 0x28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40012000 	.word	0x40012000
 8004a94:	40023800 	.word	0x40023800
 8004a98:	40020000 	.word	0x40020000
 8004a9c:	40020400 	.word	0x40020400
 8004aa0:	20000430 	.word	0x20000430
 8004aa4:	40026410 	.word	0x40026410

08004aa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08a      	sub	sp, #40	; 0x28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab0:	f107 0314 	add.w	r3, r7, #20
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	605a      	str	r2, [r3, #4]
 8004aba:	609a      	str	r2, [r3, #8]
 8004abc:	60da      	str	r2, [r3, #12]
 8004abe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a19      	ldr	r2, [pc, #100]	; (8004b2c <HAL_I2C_MspInit+0x84>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d12c      	bne.n	8004b24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004aca:	2300      	movs	r3, #0
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	4b18      	ldr	r3, [pc, #96]	; (8004b30 <HAL_I2C_MspInit+0x88>)
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad2:	4a17      	ldr	r2, [pc, #92]	; (8004b30 <HAL_I2C_MspInit+0x88>)
 8004ad4:	f043 0302 	orr.w	r3, r3, #2
 8004ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8004ada:	4b15      	ldr	r3, [pc, #84]	; (8004b30 <HAL_I2C_MspInit+0x88>)
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004ae6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004aec:	2312      	movs	r3, #18
 8004aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af0:	2300      	movs	r3, #0
 8004af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004af4:	2303      	movs	r3, #3
 8004af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004af8:	2304      	movs	r3, #4
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004afc:	f107 0314 	add.w	r3, r7, #20
 8004b00:	4619      	mov	r1, r3
 8004b02:	480c      	ldr	r0, [pc, #48]	; (8004b34 <HAL_I2C_MspInit+0x8c>)
 8004b04:	f001 fc08 	bl	8006318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	4b08      	ldr	r3, [pc, #32]	; (8004b30 <HAL_I2C_MspInit+0x88>)
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b10:	4a07      	ldr	r2, [pc, #28]	; (8004b30 <HAL_I2C_MspInit+0x88>)
 8004b12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b16:	6413      	str	r3, [r2, #64]	; 0x40
 8004b18:	4b05      	ldr	r3, [pc, #20]	; (8004b30 <HAL_I2C_MspInit+0x88>)
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004b24:	bf00      	nop
 8004b26:	3728      	adds	r7, #40	; 0x28
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40005400 	.word	0x40005400
 8004b30:	40023800 	.word	0x40023800
 8004b34:	40020400 	.word	0x40020400

08004b38 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08a      	sub	sp, #40	; 0x28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b40:	f107 0314 	add.w	r3, r7, #20
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	605a      	str	r2, [r3, #4]
 8004b4a:	609a      	str	r2, [r3, #8]
 8004b4c:	60da      	str	r2, [r3, #12]
 8004b4e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b58:	d12b      	bne.n	8004bb2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	4b17      	ldr	r3, [pc, #92]	; (8004bbc <HAL_TIM_Encoder_MspInit+0x84>)
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	4a16      	ldr	r2, [pc, #88]	; (8004bbc <HAL_TIM_Encoder_MspInit+0x84>)
 8004b64:	f043 0301 	orr.w	r3, r3, #1
 8004b68:	6413      	str	r3, [r2, #64]	; 0x40
 8004b6a:	4b14      	ldr	r3, [pc, #80]	; (8004bbc <HAL_TIM_Encoder_MspInit+0x84>)
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	613b      	str	r3, [r7, #16]
 8004b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b76:	2300      	movs	r3, #0
 8004b78:	60fb      	str	r3, [r7, #12]
 8004b7a:	4b10      	ldr	r3, [pc, #64]	; (8004bbc <HAL_TIM_Encoder_MspInit+0x84>)
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	4a0f      	ldr	r2, [pc, #60]	; (8004bbc <HAL_TIM_Encoder_MspInit+0x84>)
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	6313      	str	r3, [r2, #48]	; 0x30
 8004b86:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <HAL_TIM_Encoder_MspInit+0x84>)
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Encoder_B_Pin|Encoder_A_Pin;
 8004b92:	2303      	movs	r3, #3
 8004b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b96:	2302      	movs	r3, #2
 8004b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ba6:	f107 0314 	add.w	r3, r7, #20
 8004baa:	4619      	mov	r1, r3
 8004bac:	4804      	ldr	r0, [pc, #16]	; (8004bc0 <HAL_TIM_Encoder_MspInit+0x88>)
 8004bae:	f001 fbb3 	bl	8006318 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004bb2:	bf00      	nop
 8004bb4:	3728      	adds	r7, #40	; 0x28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	40020000 	.word	0x40020000

08004bc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a34      	ldr	r2, [pc, #208]	; (8004ca4 <HAL_TIM_Base_MspInit+0xe0>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d116      	bne.n	8004c04 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	617b      	str	r3, [r7, #20]
 8004bda:	4b33      	ldr	r3, [pc, #204]	; (8004ca8 <HAL_TIM_Base_MspInit+0xe4>)
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	4a32      	ldr	r2, [pc, #200]	; (8004ca8 <HAL_TIM_Base_MspInit+0xe4>)
 8004be0:	f043 0302 	orr.w	r3, r3, #2
 8004be4:	6413      	str	r3, [r2, #64]	; 0x40
 8004be6:	4b30      	ldr	r3, [pc, #192]	; (8004ca8 <HAL_TIM_Base_MspInit+0xe4>)
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	201d      	movs	r0, #29
 8004bf8:	f000 ff49 	bl	8005a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004bfc:	201d      	movs	r0, #29
 8004bfe:	f000 ff62 	bl	8005ac6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004c02:	e04a      	b.n	8004c9a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a28      	ldr	r2, [pc, #160]	; (8004cac <HAL_TIM_Base_MspInit+0xe8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d116      	bne.n	8004c3c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004c0e:	2300      	movs	r3, #0
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	4b25      	ldr	r3, [pc, #148]	; (8004ca8 <HAL_TIM_Base_MspInit+0xe4>)
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	4a24      	ldr	r2, [pc, #144]	; (8004ca8 <HAL_TIM_Base_MspInit+0xe4>)
 8004c18:	f043 0304 	orr.w	r3, r3, #4
 8004c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c1e:	4b22      	ldr	r3, [pc, #136]	; (8004ca8 <HAL_TIM_Base_MspInit+0xe4>)
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	613b      	str	r3, [r7, #16]
 8004c28:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	201e      	movs	r0, #30
 8004c30:	f000 ff2d 	bl	8005a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004c34:	201e      	movs	r0, #30
 8004c36:	f000 ff46 	bl	8005ac6 <HAL_NVIC_EnableIRQ>
}
 8004c3a:	e02e      	b.n	8004c9a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a1b      	ldr	r2, [pc, #108]	; (8004cb0 <HAL_TIM_Base_MspInit+0xec>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d10e      	bne.n	8004c64 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	4b17      	ldr	r3, [pc, #92]	; (8004ca8 <HAL_TIM_Base_MspInit+0xe4>)
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	4a16      	ldr	r2, [pc, #88]	; (8004ca8 <HAL_TIM_Base_MspInit+0xe4>)
 8004c50:	f043 0308 	orr.w	r3, r3, #8
 8004c54:	6413      	str	r3, [r2, #64]	; 0x40
 8004c56:	4b14      	ldr	r3, [pc, #80]	; (8004ca8 <HAL_TIM_Base_MspInit+0xe4>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	68fb      	ldr	r3, [r7, #12]
}
 8004c62:	e01a      	b.n	8004c9a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM11)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a12      	ldr	r2, [pc, #72]	; (8004cb4 <HAL_TIM_Base_MspInit+0xf0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d115      	bne.n	8004c9a <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60bb      	str	r3, [r7, #8]
 8004c72:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <HAL_TIM_Base_MspInit+0xe4>)
 8004c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c76:	4a0c      	ldr	r2, [pc, #48]	; (8004ca8 <HAL_TIM_Base_MspInit+0xe4>)
 8004c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c7e:	4b0a      	ldr	r3, [pc, #40]	; (8004ca8 <HAL_TIM_Base_MspInit+0xe4>)
 8004c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c86:	60bb      	str	r3, [r7, #8]
 8004c88:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	201a      	movs	r0, #26
 8004c90:	f000 fefd 	bl	8005a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004c94:	201a      	movs	r0, #26
 8004c96:	f000 ff16 	bl	8005ac6 <HAL_NVIC_EnableIRQ>
}
 8004c9a:	bf00      	nop
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40000400 	.word	0x40000400
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	40000800 	.word	0x40000800
 8004cb0:	40000c00 	.word	0x40000c00
 8004cb4:	40014800 	.word	0x40014800

08004cb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b088      	sub	sp, #32
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cc0:	f107 030c 	add.w	r3, r7, #12
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	605a      	str	r2, [r3, #4]
 8004cca:	609a      	str	r2, [r3, #8]
 8004ccc:	60da      	str	r2, [r3, #12]
 8004cce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a12      	ldr	r2, [pc, #72]	; (8004d20 <HAL_TIM_MspPostInit+0x68>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d11d      	bne.n	8004d16 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60bb      	str	r3, [r7, #8]
 8004cde:	4b11      	ldr	r3, [pc, #68]	; (8004d24 <HAL_TIM_MspPostInit+0x6c>)
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce2:	4a10      	ldr	r2, [pc, #64]	; (8004d24 <HAL_TIM_MspPostInit+0x6c>)
 8004ce4:	f043 0302 	orr.w	r3, r3, #2
 8004ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8004cea:	4b0e      	ldr	r3, [pc, #56]	; (8004d24 <HAL_TIM_MspPostInit+0x6c>)
 8004cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	60bb      	str	r3, [r7, #8]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004cf6:	2340      	movs	r3, #64	; 0x40
 8004cf8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004d06:	2302      	movs	r3, #2
 8004d08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d0a:	f107 030c 	add.w	r3, r7, #12
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4805      	ldr	r0, [pc, #20]	; (8004d28 <HAL_TIM_MspPostInit+0x70>)
 8004d12:	f001 fb01 	bl	8006318 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004d16:	bf00      	nop
 8004d18:	3720      	adds	r7, #32
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	40000800 	.word	0x40000800
 8004d24:	40023800 	.word	0x40023800
 8004d28:	40020400 	.word	0x40020400

08004d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08a      	sub	sp, #40	; 0x28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d34:	f107 0314 	add.w	r3, r7, #20
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	605a      	str	r2, [r3, #4]
 8004d3e:	609a      	str	r2, [r3, #8]
 8004d40:	60da      	str	r2, [r3, #12]
 8004d42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a34      	ldr	r2, [pc, #208]	; (8004e1c <HAL_UART_MspInit+0xf0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d161      	bne.n	8004e12 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d4e:	2300      	movs	r3, #0
 8004d50:	613b      	str	r3, [r7, #16]
 8004d52:	4b33      	ldr	r3, [pc, #204]	; (8004e20 <HAL_UART_MspInit+0xf4>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	4a32      	ldr	r2, [pc, #200]	; (8004e20 <HAL_UART_MspInit+0xf4>)
 8004d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d5e:	4b30      	ldr	r3, [pc, #192]	; (8004e20 <HAL_UART_MspInit+0xf4>)
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d66:	613b      	str	r3, [r7, #16]
 8004d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	4b2c      	ldr	r3, [pc, #176]	; (8004e20 <HAL_UART_MspInit+0xf4>)
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	4a2b      	ldr	r2, [pc, #172]	; (8004e20 <HAL_UART_MspInit+0xf4>)
 8004d74:	f043 0301 	orr.w	r3, r3, #1
 8004d78:	6313      	str	r3, [r2, #48]	; 0x30
 8004d7a:	4b29      	ldr	r3, [pc, #164]	; (8004e20 <HAL_UART_MspInit+0xf4>)
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004d86:	230c      	movs	r3, #12
 8004d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d92:	2303      	movs	r3, #3
 8004d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004d96:	2307      	movs	r3, #7
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d9a:	f107 0314 	add.w	r3, r7, #20
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4820      	ldr	r0, [pc, #128]	; (8004e24 <HAL_UART_MspInit+0xf8>)
 8004da2:	f001 fab9 	bl	8006318 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004da6:	4b20      	ldr	r3, [pc, #128]	; (8004e28 <HAL_UART_MspInit+0xfc>)
 8004da8:	4a20      	ldr	r2, [pc, #128]	; (8004e2c <HAL_UART_MspInit+0x100>)
 8004daa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004dac:	4b1e      	ldr	r3, [pc, #120]	; (8004e28 <HAL_UART_MspInit+0xfc>)
 8004dae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004db2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004db4:	4b1c      	ldr	r3, [pc, #112]	; (8004e28 <HAL_UART_MspInit+0xfc>)
 8004db6:	2240      	movs	r2, #64	; 0x40
 8004db8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dba:	4b1b      	ldr	r3, [pc, #108]	; (8004e28 <HAL_UART_MspInit+0xfc>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004dc0:	4b19      	ldr	r3, [pc, #100]	; (8004e28 <HAL_UART_MspInit+0xfc>)
 8004dc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004dc6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004dc8:	4b17      	ldr	r3, [pc, #92]	; (8004e28 <HAL_UART_MspInit+0xfc>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004dce:	4b16      	ldr	r3, [pc, #88]	; (8004e28 <HAL_UART_MspInit+0xfc>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004dd4:	4b14      	ldr	r3, [pc, #80]	; (8004e28 <HAL_UART_MspInit+0xfc>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004dda:	4b13      	ldr	r3, [pc, #76]	; (8004e28 <HAL_UART_MspInit+0xfc>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004de0:	4b11      	ldr	r3, [pc, #68]	; (8004e28 <HAL_UART_MspInit+0xfc>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004de6:	4810      	ldr	r0, [pc, #64]	; (8004e28 <HAL_UART_MspInit+0xfc>)
 8004de8:	f000 fe88 	bl	8005afc <HAL_DMA_Init>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004df2:	f7ff fd53 	bl	800489c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a0b      	ldr	r2, [pc, #44]	; (8004e28 <HAL_UART_MspInit+0xfc>)
 8004dfa:	635a      	str	r2, [r3, #52]	; 0x34
 8004dfc:	4a0a      	ldr	r2, [pc, #40]	; (8004e28 <HAL_UART_MspInit+0xfc>)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004e02:	2200      	movs	r2, #0
 8004e04:	2100      	movs	r1, #0
 8004e06:	2026      	movs	r0, #38	; 0x26
 8004e08:	f000 fe41 	bl	8005a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004e0c:	2026      	movs	r0, #38	; 0x26
 8004e0e:	f000 fe5a 	bl	8005ac6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004e12:	bf00      	nop
 8004e14:	3728      	adds	r7, #40	; 0x28
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40004400 	.word	0x40004400
 8004e20:	40023800 	.word	0x40023800
 8004e24:	40020000 	.word	0x40020000
 8004e28:	200008dc 	.word	0x200008dc
 8004e2c:	400260a0 	.word	0x400260a0

08004e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e34:	e7fe      	b.n	8004e34 <NMI_Handler+0x4>

08004e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e36:	b480      	push	{r7}
 8004e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e3a:	e7fe      	b.n	8004e3a <HardFault_Handler+0x4>

08004e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e40:	e7fe      	b.n	8004e40 <MemManage_Handler+0x4>

08004e42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e42:	b480      	push	{r7}
 8004e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e46:	e7fe      	b.n	8004e46 <BusFault_Handler+0x4>

08004e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e4c:	e7fe      	b.n	8004e4c <UsageFault_Handler+0x4>

08004e4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e52:	bf00      	nop
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e60:	bf00      	nop
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e6e:	bf00      	nop
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e7c:	f000 f90a 	bl	8005094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e80:	bf00      	nop
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004e88:	4802      	ldr	r0, [pc, #8]	; (8004e94 <DMA1_Stream6_IRQHandler+0x10>)
 8004e8a:	f000 ffcf 	bl	8005e2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004e8e:	bf00      	nop
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	200008dc 	.word	0x200008dc

08004e98 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8004e9c:	4802      	ldr	r0, [pc, #8]	; (8004ea8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004e9e:	f002 fe95 	bl	8007bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004ea2:	bf00      	nop
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	200007b4 	.word	0x200007b4

08004eac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004eb0:	4802      	ldr	r0, [pc, #8]	; (8004ebc <TIM3_IRQHandler+0x10>)
 8004eb2:	f002 fe8b 	bl	8007bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004eb6:	bf00      	nop
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	20000598 	.word	0x20000598

08004ec0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004ec4:	4802      	ldr	r0, [pc, #8]	; (8004ed0 <TIM4_IRQHandler+0x10>)
 8004ec6:	f002 fe81 	bl	8007bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004eca:	bf00      	nop
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	2000064c 	.word	0x2000064c

08004ed4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004ed8:	4802      	ldr	r0, [pc, #8]	; (8004ee4 <USART2_IRQHandler+0x10>)
 8004eda:	f004 f92d 	bl	8009138 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004ede:	bf00      	nop
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	20000868 	.word	0x20000868

08004ee8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004eec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004ef0:	f001 fbc8 	bl	8006684 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004ef4:	bf00      	nop
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004efc:	4802      	ldr	r0, [pc, #8]	; (8004f08 <DMA2_Stream0_IRQHandler+0x10>)
 8004efe:	f000 ff95 	bl	8005e2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004f02:	bf00      	nop
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20000430 	.word	0x20000430

08004f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f14:	4a14      	ldr	r2, [pc, #80]	; (8004f68 <_sbrk+0x5c>)
 8004f16:	4b15      	ldr	r3, [pc, #84]	; (8004f6c <_sbrk+0x60>)
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f20:	4b13      	ldr	r3, [pc, #76]	; (8004f70 <_sbrk+0x64>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d102      	bne.n	8004f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f28:	4b11      	ldr	r3, [pc, #68]	; (8004f70 <_sbrk+0x64>)
 8004f2a:	4a12      	ldr	r2, [pc, #72]	; (8004f74 <_sbrk+0x68>)
 8004f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f2e:	4b10      	ldr	r3, [pc, #64]	; (8004f70 <_sbrk+0x64>)
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4413      	add	r3, r2
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d207      	bcs.n	8004f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f3c:	f005 f94a 	bl	800a1d4 <__errno>
 8004f40:	4603      	mov	r3, r0
 8004f42:	220c      	movs	r2, #12
 8004f44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f46:	f04f 33ff 	mov.w	r3, #4294967295
 8004f4a:	e009      	b.n	8004f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f4c:	4b08      	ldr	r3, [pc, #32]	; (8004f70 <_sbrk+0x64>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f52:	4b07      	ldr	r3, [pc, #28]	; (8004f70 <_sbrk+0x64>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4413      	add	r3, r2
 8004f5a:	4a05      	ldr	r2, [pc, #20]	; (8004f70 <_sbrk+0x64>)
 8004f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	20020000 	.word	0x20020000
 8004f6c:	00000400 	.word	0x00000400
 8004f70:	20001338 	.word	0x20001338
 8004f74:	20001350 	.word	0x20001350

08004f78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f7c:	4b06      	ldr	r3, [pc, #24]	; (8004f98 <SystemInit+0x20>)
 8004f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f82:	4a05      	ldr	r2, [pc, #20]	; (8004f98 <SystemInit+0x20>)
 8004f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f8c:	bf00      	nop
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	e000ed00 	.word	0xe000ed00

08004f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004fd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004fa0:	480d      	ldr	r0, [pc, #52]	; (8004fd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004fa2:	490e      	ldr	r1, [pc, #56]	; (8004fdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004fa4:	4a0e      	ldr	r2, [pc, #56]	; (8004fe0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004fa8:	e002      	b.n	8004fb0 <LoopCopyDataInit>

08004faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004fae:	3304      	adds	r3, #4

08004fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004fb4:	d3f9      	bcc.n	8004faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004fb6:	4a0b      	ldr	r2, [pc, #44]	; (8004fe4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004fb8:	4c0b      	ldr	r4, [pc, #44]	; (8004fe8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004fbc:	e001      	b.n	8004fc2 <LoopFillZerobss>

08004fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004fc0:	3204      	adds	r2, #4

08004fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004fc4:	d3fb      	bcc.n	8004fbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004fc6:	f7ff ffd7 	bl	8004f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004fca:	f005 f909 	bl	800a1e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004fce:	f7fd f8b3 	bl	8002138 <main>
  bx  lr    
 8004fd2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004fd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004fdc:	200003c8 	.word	0x200003c8
  ldr r2, =_sidata
 8004fe0:	0800cae8 	.word	0x0800cae8
  ldr r2, =_sbss
 8004fe4:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 8004fe8:	20001350 	.word	0x20001350

08004fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004fec:	e7fe      	b.n	8004fec <ADC_IRQHandler>
	...

08004ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ff4:	4b0e      	ldr	r3, [pc, #56]	; (8005030 <HAL_Init+0x40>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a0d      	ldr	r2, [pc, #52]	; (8005030 <HAL_Init+0x40>)
 8004ffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ffe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005000:	4b0b      	ldr	r3, [pc, #44]	; (8005030 <HAL_Init+0x40>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a0a      	ldr	r2, [pc, #40]	; (8005030 <HAL_Init+0x40>)
 8005006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800500a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800500c:	4b08      	ldr	r3, [pc, #32]	; (8005030 <HAL_Init+0x40>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a07      	ldr	r2, [pc, #28]	; (8005030 <HAL_Init+0x40>)
 8005012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005018:	2003      	movs	r0, #3
 800501a:	f000 fd2d 	bl	8005a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800501e:	2000      	movs	r0, #0
 8005020:	f000 f808 	bl	8005034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005024:	f7ff fc84 	bl	8004930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	40023c00 	.word	0x40023c00

08005034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800503c:	4b12      	ldr	r3, [pc, #72]	; (8005088 <HAL_InitTick+0x54>)
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	4b12      	ldr	r3, [pc, #72]	; (800508c <HAL_InitTick+0x58>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	4619      	mov	r1, r3
 8005046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800504a:	fbb3 f3f1 	udiv	r3, r3, r1
 800504e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005052:	4618      	mov	r0, r3
 8005054:	f000 fd45 	bl	8005ae2 <HAL_SYSTICK_Config>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e00e      	b.n	8005080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b0f      	cmp	r3, #15
 8005066:	d80a      	bhi.n	800507e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005068:	2200      	movs	r2, #0
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	f04f 30ff 	mov.w	r0, #4294967295
 8005070:	f000 fd0d 	bl	8005a8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005074:	4a06      	ldr	r2, [pc, #24]	; (8005090 <HAL_InitTick+0x5c>)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
 800507c:	e000      	b.n	8005080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
}
 8005080:	4618      	mov	r0, r3
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	20000358 	.word	0x20000358
 800508c:	20000360 	.word	0x20000360
 8005090:	2000035c 	.word	0x2000035c

08005094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005098:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <HAL_IncTick+0x20>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <HAL_IncTick+0x24>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4413      	add	r3, r2
 80050a4:	4a04      	ldr	r2, [pc, #16]	; (80050b8 <HAL_IncTick+0x24>)
 80050a6:	6013      	str	r3, [r2, #0]
}
 80050a8:	bf00      	nop
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	20000360 	.word	0x20000360
 80050b8:	2000133c 	.word	0x2000133c

080050bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  return uwTick;
 80050c0:	4b03      	ldr	r3, [pc, #12]	; (80050d0 <HAL_GetTick+0x14>)
 80050c2:	681b      	ldr	r3, [r3, #0]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	2000133c 	.word	0x2000133c

080050d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050dc:	2300      	movs	r3, #0
 80050de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e033      	b.n	8005152 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d109      	bne.n	8005106 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7ff fc44 	bl	8004980 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	f003 0310 	and.w	r3, r3, #16
 800510e:	2b00      	cmp	r3, #0
 8005110:	d118      	bne.n	8005144 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800511a:	f023 0302 	bic.w	r3, r3, #2
 800511e:	f043 0202 	orr.w	r2, r3, #2
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fa58 	bl	80055dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	f023 0303 	bic.w	r3, r3, #3
 800513a:	f043 0201 	orr.w	r2, r3, #1
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	641a      	str	r2, [r3, #64]	; 0x40
 8005142:	e001      	b.n	8005148 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005150:	7bfb      	ldrb	r3, [r7, #15]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_ADC_Start_DMA+0x1e>
 8005176:	2302      	movs	r3, #2
 8005178:	e0ce      	b.n	8005318 <HAL_ADC_Start_DMA+0x1bc>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b01      	cmp	r3, #1
 800518e:	d018      	beq.n	80051c2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689a      	ldr	r2, [r3, #8]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0201 	orr.w	r2, r2, #1
 800519e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80051a0:	4b5f      	ldr	r3, [pc, #380]	; (8005320 <HAL_ADC_Start_DMA+0x1c4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a5f      	ldr	r2, [pc, #380]	; (8005324 <HAL_ADC_Start_DMA+0x1c8>)
 80051a6:	fba2 2303 	umull	r2, r3, r2, r3
 80051aa:	0c9a      	lsrs	r2, r3, #18
 80051ac:	4613      	mov	r3, r2
 80051ae:	005b      	lsls	r3, r3, #1
 80051b0:	4413      	add	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80051b4:	e002      	b.n	80051bc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	3b01      	subs	r3, #1
 80051ba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1f9      	bne.n	80051b6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d0:	d107      	bne.n	80051e2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	f040 8086 	bne.w	80052fe <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80051fa:	f023 0301 	bic.w	r3, r3, #1
 80051fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005210:	2b00      	cmp	r3, #0
 8005212:	d007      	beq.n	8005224 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005218:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800521c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800522c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005230:	d106      	bne.n	8005240 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005236:	f023 0206 	bic.w	r2, r3, #6
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	645a      	str	r2, [r3, #68]	; 0x44
 800523e:	e002      	b.n	8005246 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800524e:	4b36      	ldr	r3, [pc, #216]	; (8005328 <HAL_ADC_Start_DMA+0x1cc>)
 8005250:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005256:	4a35      	ldr	r2, [pc, #212]	; (800532c <HAL_ADC_Start_DMA+0x1d0>)
 8005258:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525e:	4a34      	ldr	r2, [pc, #208]	; (8005330 <HAL_ADC_Start_DMA+0x1d4>)
 8005260:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005266:	4a33      	ldr	r2, [pc, #204]	; (8005334 <HAL_ADC_Start_DMA+0x1d8>)
 8005268:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005272:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005282:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005292:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	334c      	adds	r3, #76	; 0x4c
 800529e:	4619      	mov	r1, r3
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f000 fcd8 	bl	8005c58 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f003 031f 	and.w	r3, r3, #31
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10f      	bne.n	80052d4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d129      	bne.n	8005316 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80052d0:	609a      	str	r2, [r3, #8]
 80052d2:	e020      	b.n	8005316 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a17      	ldr	r2, [pc, #92]	; (8005338 <HAL_ADC_Start_DMA+0x1dc>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d11b      	bne.n	8005316 <HAL_ADC_Start_DMA+0x1ba>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d114      	bne.n	8005316 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689a      	ldr	r2, [r3, #8]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80052fa:	609a      	str	r2, [r3, #8]
 80052fc:	e00b      	b.n	8005316 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	f043 0210 	orr.w	r2, r3, #16
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530e:	f043 0201 	orr.w	r2, r3, #1
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3718      	adds	r7, #24
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	20000358 	.word	0x20000358
 8005324:	431bde83 	.word	0x431bde83
 8005328:	40012300 	.word	0x40012300
 800532c:	080057d5 	.word	0x080057d5
 8005330:	0800588f 	.word	0x0800588f
 8005334:	080058ab 	.word	0x080058ab
 8005338:	40012000 	.word	0x40012000

0800533c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_ADC_ConfigChannel+0x1c>
 8005390:	2302      	movs	r3, #2
 8005392:	e113      	b.n	80055bc <HAL_ADC_ConfigChannel+0x244>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b09      	cmp	r3, #9
 80053a2:	d925      	bls.n	80053f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68d9      	ldr	r1, [r3, #12]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	461a      	mov	r2, r3
 80053b2:	4613      	mov	r3, r2
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	4413      	add	r3, r2
 80053b8:	3b1e      	subs	r3, #30
 80053ba:	2207      	movs	r2, #7
 80053bc:	fa02 f303 	lsl.w	r3, r2, r3
 80053c0:	43da      	mvns	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	400a      	ands	r2, r1
 80053c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68d9      	ldr	r1, [r3, #12]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	b29b      	uxth	r3, r3
 80053da:	4618      	mov	r0, r3
 80053dc:	4603      	mov	r3, r0
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	4403      	add	r3, r0
 80053e2:	3b1e      	subs	r3, #30
 80053e4:	409a      	lsls	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	60da      	str	r2, [r3, #12]
 80053ee:	e022      	b.n	8005436 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6919      	ldr	r1, [r3, #16]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	461a      	mov	r2, r3
 80053fe:	4613      	mov	r3, r2
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	4413      	add	r3, r2
 8005404:	2207      	movs	r2, #7
 8005406:	fa02 f303 	lsl.w	r3, r2, r3
 800540a:	43da      	mvns	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	400a      	ands	r2, r1
 8005412:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6919      	ldr	r1, [r3, #16]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	b29b      	uxth	r3, r3
 8005424:	4618      	mov	r0, r3
 8005426:	4603      	mov	r3, r0
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	4403      	add	r3, r0
 800542c:	409a      	lsls	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2b06      	cmp	r3, #6
 800543c:	d824      	bhi.n	8005488 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	3b05      	subs	r3, #5
 8005450:	221f      	movs	r2, #31
 8005452:	fa02 f303 	lsl.w	r3, r2, r3
 8005456:	43da      	mvns	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	400a      	ands	r2, r1
 800545e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	b29b      	uxth	r3, r3
 800546c:	4618      	mov	r0, r3
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	4613      	mov	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	3b05      	subs	r3, #5
 800547a:	fa00 f203 	lsl.w	r2, r0, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	635a      	str	r2, [r3, #52]	; 0x34
 8005486:	e04c      	b.n	8005522 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	2b0c      	cmp	r3, #12
 800548e:	d824      	bhi.n	80054da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	4613      	mov	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	3b23      	subs	r3, #35	; 0x23
 80054a2:	221f      	movs	r2, #31
 80054a4:	fa02 f303 	lsl.w	r3, r2, r3
 80054a8:	43da      	mvns	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	400a      	ands	r2, r1
 80054b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	4618      	mov	r0, r3
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	4613      	mov	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	3b23      	subs	r3, #35	; 0x23
 80054cc:	fa00 f203 	lsl.w	r2, r0, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	631a      	str	r2, [r3, #48]	; 0x30
 80054d8:	e023      	b.n	8005522 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	4613      	mov	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	3b41      	subs	r3, #65	; 0x41
 80054ec:	221f      	movs	r2, #31
 80054ee:	fa02 f303 	lsl.w	r3, r2, r3
 80054f2:	43da      	mvns	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	400a      	ands	r2, r1
 80054fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	b29b      	uxth	r3, r3
 8005508:	4618      	mov	r0, r3
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	4613      	mov	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	3b41      	subs	r3, #65	; 0x41
 8005516:	fa00 f203 	lsl.w	r2, r0, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005522:	4b29      	ldr	r3, [pc, #164]	; (80055c8 <HAL_ADC_ConfigChannel+0x250>)
 8005524:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a28      	ldr	r2, [pc, #160]	; (80055cc <HAL_ADC_ConfigChannel+0x254>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d10f      	bne.n	8005550 <HAL_ADC_ConfigChannel+0x1d8>
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b12      	cmp	r3, #18
 8005536:	d10b      	bne.n	8005550 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a1d      	ldr	r2, [pc, #116]	; (80055cc <HAL_ADC_ConfigChannel+0x254>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d12b      	bne.n	80055b2 <HAL_ADC_ConfigChannel+0x23a>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a1c      	ldr	r2, [pc, #112]	; (80055d0 <HAL_ADC_ConfigChannel+0x258>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d003      	beq.n	800556c <HAL_ADC_ConfigChannel+0x1f4>
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b11      	cmp	r3, #17
 800556a:	d122      	bne.n	80055b2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a11      	ldr	r2, [pc, #68]	; (80055d0 <HAL_ADC_ConfigChannel+0x258>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d111      	bne.n	80055b2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800558e:	4b11      	ldr	r3, [pc, #68]	; (80055d4 <HAL_ADC_ConfigChannel+0x25c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a11      	ldr	r2, [pc, #68]	; (80055d8 <HAL_ADC_ConfigChannel+0x260>)
 8005594:	fba2 2303 	umull	r2, r3, r2, r3
 8005598:	0c9a      	lsrs	r2, r3, #18
 800559a:	4613      	mov	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80055a4:	e002      	b.n	80055ac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	3b01      	subs	r3, #1
 80055aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1f9      	bne.n	80055a6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	40012300 	.word	0x40012300
 80055cc:	40012000 	.word	0x40012000
 80055d0:	10000012 	.word	0x10000012
 80055d4:	20000358 	.word	0x20000358
 80055d8:	431bde83 	.word	0x431bde83

080055dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055e4:	4b79      	ldr	r3, [pc, #484]	; (80057cc <ADC_Init+0x1f0>)
 80055e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	431a      	orrs	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005610:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6859      	ldr	r1, [r3, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	021a      	lsls	r2, r3, #8
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005634:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6859      	ldr	r1, [r3, #4]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005656:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6899      	ldr	r1, [r3, #8]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566e:	4a58      	ldr	r2, [pc, #352]	; (80057d0 <ADC_Init+0x1f4>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d022      	beq.n	80056ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005682:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6899      	ldr	r1, [r3, #8]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80056a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6899      	ldr	r1, [r3, #8]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	609a      	str	r2, [r3, #8]
 80056b8:	e00f      	b.n	80056da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80056c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80056d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 0202 	bic.w	r2, r2, #2
 80056e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6899      	ldr	r1, [r3, #8]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	7e1b      	ldrb	r3, [r3, #24]
 80056f4:	005a      	lsls	r2, r3, #1
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d01b      	beq.n	8005740 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005716:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005726:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6859      	ldr	r1, [r3, #4]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	3b01      	subs	r3, #1
 8005734:	035a      	lsls	r2, r3, #13
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	605a      	str	r2, [r3, #4]
 800573e:	e007      	b.n	8005750 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800574e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800575e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	3b01      	subs	r3, #1
 800576c:	051a      	lsls	r2, r3, #20
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6899      	ldr	r1, [r3, #8]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005792:	025a      	lsls	r2, r3, #9
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689a      	ldr	r2, [r3, #8]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6899      	ldr	r1, [r3, #8]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	029a      	lsls	r2, r3, #10
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	609a      	str	r2, [r3, #8]
}
 80057c0:	bf00      	nop
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	40012300 	.word	0x40012300
 80057d0:	0f000001 	.word	0x0f000001

080057d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d13c      	bne.n	8005868 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d12b      	bne.n	8005860 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800580c:	2b00      	cmp	r3, #0
 800580e:	d127      	bne.n	8005860 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005816:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800581a:	2b00      	cmp	r3, #0
 800581c:	d006      	beq.n	800582c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005828:	2b00      	cmp	r3, #0
 800582a:	d119      	bne.n	8005860 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0220 	bic.w	r2, r2, #32
 800583a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005840:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d105      	bne.n	8005860 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005858:	f043 0201 	orr.w	r2, r3, #1
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f7ff fd6b 	bl	800533c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005866:	e00e      	b.n	8005886 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586c:	f003 0310 	and.w	r3, r3, #16
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f7ff fd75 	bl	8005364 <HAL_ADC_ErrorCallback>
}
 800587a:	e004      	b.n	8005886 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	4798      	blx	r3
}
 8005886:	bf00      	nop
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b084      	sub	sp, #16
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f7ff fd57 	bl	8005350 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80058a2:	bf00      	nop
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b084      	sub	sp, #16
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2240      	movs	r2, #64	; 0x40
 80058bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c2:	f043 0204 	orr.w	r2, r3, #4
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f7ff fd4a 	bl	8005364 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80058d0:	bf00      	nop
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <__NVIC_SetPriorityGrouping>:
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f003 0307 	and.w	r3, r3, #7
 80058e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058e8:	4b0c      	ldr	r3, [pc, #48]	; (800591c <__NVIC_SetPriorityGrouping+0x44>)
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80058f4:	4013      	ands	r3, r2
 80058f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005900:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800590a:	4a04      	ldr	r2, [pc, #16]	; (800591c <__NVIC_SetPriorityGrouping+0x44>)
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	60d3      	str	r3, [r2, #12]
}
 8005910:	bf00      	nop
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	e000ed00 	.word	0xe000ed00

08005920 <__NVIC_GetPriorityGrouping>:
{
 8005920:	b480      	push	{r7}
 8005922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005924:	4b04      	ldr	r3, [pc, #16]	; (8005938 <__NVIC_GetPriorityGrouping+0x18>)
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	0a1b      	lsrs	r3, r3, #8
 800592a:	f003 0307 	and.w	r3, r3, #7
}
 800592e:	4618      	mov	r0, r3
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	e000ed00 	.word	0xe000ed00

0800593c <__NVIC_EnableIRQ>:
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	4603      	mov	r3, r0
 8005944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800594a:	2b00      	cmp	r3, #0
 800594c:	db0b      	blt.n	8005966 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800594e:	79fb      	ldrb	r3, [r7, #7]
 8005950:	f003 021f 	and.w	r2, r3, #31
 8005954:	4907      	ldr	r1, [pc, #28]	; (8005974 <__NVIC_EnableIRQ+0x38>)
 8005956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800595a:	095b      	lsrs	r3, r3, #5
 800595c:	2001      	movs	r0, #1
 800595e:	fa00 f202 	lsl.w	r2, r0, r2
 8005962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	e000e100 	.word	0xe000e100

08005978 <__NVIC_SetPriority>:
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	4603      	mov	r3, r0
 8005980:	6039      	str	r1, [r7, #0]
 8005982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005988:	2b00      	cmp	r3, #0
 800598a:	db0a      	blt.n	80059a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	b2da      	uxtb	r2, r3
 8005990:	490c      	ldr	r1, [pc, #48]	; (80059c4 <__NVIC_SetPriority+0x4c>)
 8005992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005996:	0112      	lsls	r2, r2, #4
 8005998:	b2d2      	uxtb	r2, r2
 800599a:	440b      	add	r3, r1
 800599c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80059a0:	e00a      	b.n	80059b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	4908      	ldr	r1, [pc, #32]	; (80059c8 <__NVIC_SetPriority+0x50>)
 80059a8:	79fb      	ldrb	r3, [r7, #7]
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	3b04      	subs	r3, #4
 80059b0:	0112      	lsls	r2, r2, #4
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	440b      	add	r3, r1
 80059b6:	761a      	strb	r2, [r3, #24]
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	e000e100 	.word	0xe000e100
 80059c8:	e000ed00 	.word	0xe000ed00

080059cc <NVIC_EncodePriority>:
{
 80059cc:	b480      	push	{r7}
 80059ce:	b089      	sub	sp, #36	; 0x24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f003 0307 	and.w	r3, r3, #7
 80059de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	f1c3 0307 	rsb	r3, r3, #7
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	bf28      	it	cs
 80059ea:	2304      	movcs	r3, #4
 80059ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	3304      	adds	r3, #4
 80059f2:	2b06      	cmp	r3, #6
 80059f4:	d902      	bls.n	80059fc <NVIC_EncodePriority+0x30>
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	3b03      	subs	r3, #3
 80059fa:	e000      	b.n	80059fe <NVIC_EncodePriority+0x32>
 80059fc:	2300      	movs	r3, #0
 80059fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a00:	f04f 32ff 	mov.w	r2, #4294967295
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0a:	43da      	mvns	r2, r3
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	401a      	ands	r2, r3
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a14:	f04f 31ff 	mov.w	r1, #4294967295
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a1e:	43d9      	mvns	r1, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a24:	4313      	orrs	r3, r2
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3724      	adds	r7, #36	; 0x24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
	...

08005a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a44:	d301      	bcc.n	8005a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a46:	2301      	movs	r3, #1
 8005a48:	e00f      	b.n	8005a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a4a:	4a0a      	ldr	r2, [pc, #40]	; (8005a74 <SysTick_Config+0x40>)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a52:	210f      	movs	r1, #15
 8005a54:	f04f 30ff 	mov.w	r0, #4294967295
 8005a58:	f7ff ff8e 	bl	8005978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a5c:	4b05      	ldr	r3, [pc, #20]	; (8005a74 <SysTick_Config+0x40>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a62:	4b04      	ldr	r3, [pc, #16]	; (8005a74 <SysTick_Config+0x40>)
 8005a64:	2207      	movs	r2, #7
 8005a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	e000e010 	.word	0xe000e010

08005a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7ff ff29 	bl	80058d8 <__NVIC_SetPriorityGrouping>
}
 8005a86:	bf00      	nop
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b086      	sub	sp, #24
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	4603      	mov	r3, r0
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	607a      	str	r2, [r7, #4]
 8005a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005aa0:	f7ff ff3e 	bl	8005920 <__NVIC_GetPriorityGrouping>
 8005aa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	68b9      	ldr	r1, [r7, #8]
 8005aaa:	6978      	ldr	r0, [r7, #20]
 8005aac:	f7ff ff8e 	bl	80059cc <NVIC_EncodePriority>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7ff ff5d 	bl	8005978 <__NVIC_SetPriority>
}
 8005abe:	bf00      	nop
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b082      	sub	sp, #8
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	4603      	mov	r3, r0
 8005ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7ff ff31 	bl	800593c <__NVIC_EnableIRQ>
}
 8005ada:	bf00      	nop
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b082      	sub	sp, #8
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7ff ffa2 	bl	8005a34 <SysTick_Config>
 8005af0:	4603      	mov	r3, r0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005b04:	2300      	movs	r3, #0
 8005b06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005b08:	f7ff fad8 	bl	80050bc <HAL_GetTick>
 8005b0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e099      	b.n	8005c4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0201 	bic.w	r2, r2, #1
 8005b36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b38:	e00f      	b.n	8005b5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b3a:	f7ff fabf 	bl	80050bc <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	2b05      	cmp	r3, #5
 8005b46:	d908      	bls.n	8005b5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2203      	movs	r2, #3
 8005b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e078      	b.n	8005c4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1e8      	bne.n	8005b3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	4b38      	ldr	r3, [pc, #224]	; (8005c54 <HAL_DMA_Init+0x158>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	2b04      	cmp	r3, #4
 8005bb2:	d107      	bne.n	8005bc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f023 0307 	bic.w	r3, r3, #7
 8005bda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d117      	bne.n	8005c1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00e      	beq.n	8005c1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fb0d 	bl	8006220 <DMA_CheckFifoParam>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d008      	beq.n	8005c1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2240      	movs	r2, #64	; 0x40
 8005c10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e016      	b.n	8005c4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 fac4 	bl	80061b4 <DMA_CalcBaseAndBitshift>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c34:	223f      	movs	r2, #63	; 0x3f
 8005c36:	409a      	lsls	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3718      	adds	r7, #24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	f010803f 	.word	0xf010803f

08005c58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d101      	bne.n	8005c7e <HAL_DMA_Start_IT+0x26>
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	e040      	b.n	8005d00 <HAL_DMA_Start_IT+0xa8>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d12f      	bne.n	8005cf2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2202      	movs	r2, #2
 8005c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	68b9      	ldr	r1, [r7, #8]
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f000 fa56 	bl	8006158 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb0:	223f      	movs	r2, #63	; 0x3f
 8005cb2:	409a      	lsls	r2, r3
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f042 0216 	orr.w	r2, r2, #22
 8005cc6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d007      	beq.n	8005ce0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0208 	orr.w	r2, r2, #8
 8005cde:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0201 	orr.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]
 8005cf0:	e005      	b.n	8005cfe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005d16:	f7ff f9d1 	bl	80050bc <HAL_GetTick>
 8005d1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d008      	beq.n	8005d3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2280      	movs	r2, #128	; 0x80
 8005d2c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e052      	b.n	8005de0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 0216 	bic.w	r2, r2, #22
 8005d48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	695a      	ldr	r2, [r3, #20]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d103      	bne.n	8005d6a <HAL_DMA_Abort+0x62>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d007      	beq.n	8005d7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 0208 	bic.w	r2, r2, #8
 8005d78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0201 	bic.w	r2, r2, #1
 8005d88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d8a:	e013      	b.n	8005db4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d8c:	f7ff f996 	bl	80050bc <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	2b05      	cmp	r3, #5
 8005d98:	d90c      	bls.n	8005db4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2203      	movs	r2, #3
 8005da4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e015      	b.n	8005de0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1e4      	bne.n	8005d8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc6:	223f      	movs	r2, #63	; 0x3f
 8005dc8:	409a      	lsls	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d004      	beq.n	8005e06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2280      	movs	r2, #128	; 0x80
 8005e00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e00c      	b.n	8005e20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2205      	movs	r2, #5
 8005e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0201 	bic.w	r2, r2, #1
 8005e1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e38:	4b8e      	ldr	r3, [pc, #568]	; (8006074 <HAL_DMA_IRQHandler+0x248>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a8e      	ldr	r2, [pc, #568]	; (8006078 <HAL_DMA_IRQHandler+0x24c>)
 8005e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e42:	0a9b      	lsrs	r3, r3, #10
 8005e44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e56:	2208      	movs	r2, #8
 8005e58:	409a      	lsls	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d01a      	beq.n	8005e98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0304 	and.w	r3, r3, #4
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d013      	beq.n	8005e98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 0204 	bic.w	r2, r2, #4
 8005e7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e84:	2208      	movs	r2, #8
 8005e86:	409a      	lsls	r2, r3
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e90:	f043 0201 	orr.w	r2, r3, #1
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	409a      	lsls	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d012      	beq.n	8005ece <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00b      	beq.n	8005ece <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eba:	2201      	movs	r2, #1
 8005ebc:	409a      	lsls	r2, r3
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec6:	f043 0202 	orr.w	r2, r3, #2
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed2:	2204      	movs	r2, #4
 8005ed4:	409a      	lsls	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d012      	beq.n	8005f04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00b      	beq.n	8005f04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef0:	2204      	movs	r2, #4
 8005ef2:	409a      	lsls	r2, r3
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efc:	f043 0204 	orr.w	r2, r3, #4
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f08:	2210      	movs	r2, #16
 8005f0a:	409a      	lsls	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4013      	ands	r3, r2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d043      	beq.n	8005f9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0308 	and.w	r3, r3, #8
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d03c      	beq.n	8005f9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f26:	2210      	movs	r2, #16
 8005f28:	409a      	lsls	r2, r3
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d018      	beq.n	8005f6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d108      	bne.n	8005f5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d024      	beq.n	8005f9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	4798      	blx	r3
 8005f5a:	e01f      	b.n	8005f9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d01b      	beq.n	8005f9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	4798      	blx	r3
 8005f6c:	e016      	b.n	8005f9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d107      	bne.n	8005f8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0208 	bic.w	r2, r2, #8
 8005f8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa0:	2220      	movs	r2, #32
 8005fa2:	409a      	lsls	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 808f 	beq.w	80060cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0310 	and.w	r3, r3, #16
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 8087 	beq.w	80060cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	409a      	lsls	r2, r3
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b05      	cmp	r3, #5
 8005fd4:	d136      	bne.n	8006044 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f022 0216 	bic.w	r2, r2, #22
 8005fe4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	695a      	ldr	r2, [r3, #20]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ff4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d103      	bne.n	8006006 <HAL_DMA_IRQHandler+0x1da>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006002:	2b00      	cmp	r3, #0
 8006004:	d007      	beq.n	8006016 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 0208 	bic.w	r2, r2, #8
 8006014:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800601a:	223f      	movs	r2, #63	; 0x3f
 800601c:	409a      	lsls	r2, r3
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006036:	2b00      	cmp	r3, #0
 8006038:	d07e      	beq.n	8006138 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	4798      	blx	r3
        }
        return;
 8006042:	e079      	b.n	8006138 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d01d      	beq.n	800608e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10d      	bne.n	800607c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006064:	2b00      	cmp	r3, #0
 8006066:	d031      	beq.n	80060cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	4798      	blx	r3
 8006070:	e02c      	b.n	80060cc <HAL_DMA_IRQHandler+0x2a0>
 8006072:	bf00      	nop
 8006074:	20000358 	.word	0x20000358
 8006078:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006080:	2b00      	cmp	r3, #0
 8006082:	d023      	beq.n	80060cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	4798      	blx	r3
 800608c:	e01e      	b.n	80060cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10f      	bne.n	80060bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 0210 	bic.w	r2, r2, #16
 80060aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d032      	beq.n	800613a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d022      	beq.n	8006126 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2205      	movs	r2, #5
 80060e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0201 	bic.w	r2, r2, #1
 80060f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	3301      	adds	r3, #1
 80060fc:	60bb      	str	r3, [r7, #8]
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	429a      	cmp	r2, r3
 8006102:	d307      	bcc.n	8006114 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1f2      	bne.n	80060f8 <HAL_DMA_IRQHandler+0x2cc>
 8006112:	e000      	b.n	8006116 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006114:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800612a:	2b00      	cmp	r3, #0
 800612c:	d005      	beq.n	800613a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	4798      	blx	r3
 8006136:	e000      	b.n	800613a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006138:	bf00      	nop
    }
  }
}
 800613a:	3718      	adds	r7, #24
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800614c:	4618      	mov	r0, r3
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
 8006164:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006174:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	2b40      	cmp	r3, #64	; 0x40
 8006184:	d108      	bne.n	8006198 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006196:	e007      	b.n	80061a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	60da      	str	r2, [r3, #12]
}
 80061a8:	bf00      	nop
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	3b10      	subs	r3, #16
 80061c4:	4a14      	ldr	r2, [pc, #80]	; (8006218 <DMA_CalcBaseAndBitshift+0x64>)
 80061c6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ca:	091b      	lsrs	r3, r3, #4
 80061cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80061ce:	4a13      	ldr	r2, [pc, #76]	; (800621c <DMA_CalcBaseAndBitshift+0x68>)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4413      	add	r3, r2
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	461a      	mov	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b03      	cmp	r3, #3
 80061e0:	d909      	bls.n	80061f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80061ea:	f023 0303 	bic.w	r3, r3, #3
 80061ee:	1d1a      	adds	r2, r3, #4
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	659a      	str	r2, [r3, #88]	; 0x58
 80061f4:	e007      	b.n	8006206 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80061fe:	f023 0303 	bic.w	r3, r3, #3
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800620a:	4618      	mov	r0, r3
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	aaaaaaab 	.word	0xaaaaaaab
 800621c:	0800c8c0 	.word	0x0800c8c0

08006220 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006230:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d11f      	bne.n	800627a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2b03      	cmp	r3, #3
 800623e:	d856      	bhi.n	80062ee <DMA_CheckFifoParam+0xce>
 8006240:	a201      	add	r2, pc, #4	; (adr r2, 8006248 <DMA_CheckFifoParam+0x28>)
 8006242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006246:	bf00      	nop
 8006248:	08006259 	.word	0x08006259
 800624c:	0800626b 	.word	0x0800626b
 8006250:	08006259 	.word	0x08006259
 8006254:	080062ef 	.word	0x080062ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d046      	beq.n	80062f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006268:	e043      	b.n	80062f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006272:	d140      	bne.n	80062f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006278:	e03d      	b.n	80062f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006282:	d121      	bne.n	80062c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b03      	cmp	r3, #3
 8006288:	d837      	bhi.n	80062fa <DMA_CheckFifoParam+0xda>
 800628a:	a201      	add	r2, pc, #4	; (adr r2, 8006290 <DMA_CheckFifoParam+0x70>)
 800628c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006290:	080062a1 	.word	0x080062a1
 8006294:	080062a7 	.word	0x080062a7
 8006298:	080062a1 	.word	0x080062a1
 800629c:	080062b9 	.word	0x080062b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	73fb      	strb	r3, [r7, #15]
      break;
 80062a4:	e030      	b.n	8006308 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d025      	beq.n	80062fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062b6:	e022      	b.n	80062fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80062c0:	d11f      	bne.n	8006302 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80062c6:	e01c      	b.n	8006302 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d903      	bls.n	80062d6 <DMA_CheckFifoParam+0xb6>
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	d003      	beq.n	80062dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80062d4:	e018      	b.n	8006308 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	73fb      	strb	r3, [r7, #15]
      break;
 80062da:	e015      	b.n	8006308 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00e      	beq.n	8006306 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	73fb      	strb	r3, [r7, #15]
      break;
 80062ec:	e00b      	b.n	8006306 <DMA_CheckFifoParam+0xe6>
      break;
 80062ee:	bf00      	nop
 80062f0:	e00a      	b.n	8006308 <DMA_CheckFifoParam+0xe8>
      break;
 80062f2:	bf00      	nop
 80062f4:	e008      	b.n	8006308 <DMA_CheckFifoParam+0xe8>
      break;
 80062f6:	bf00      	nop
 80062f8:	e006      	b.n	8006308 <DMA_CheckFifoParam+0xe8>
      break;
 80062fa:	bf00      	nop
 80062fc:	e004      	b.n	8006308 <DMA_CheckFifoParam+0xe8>
      break;
 80062fe:	bf00      	nop
 8006300:	e002      	b.n	8006308 <DMA_CheckFifoParam+0xe8>
      break;   
 8006302:	bf00      	nop
 8006304:	e000      	b.n	8006308 <DMA_CheckFifoParam+0xe8>
      break;
 8006306:	bf00      	nop
    }
  } 
  
  return status; 
 8006308:	7bfb      	ldrb	r3, [r7, #15]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop

08006318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006318:	b480      	push	{r7}
 800631a:	b089      	sub	sp, #36	; 0x24
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006322:	2300      	movs	r3, #0
 8006324:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006326:	2300      	movs	r3, #0
 8006328:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800632a:	2300      	movs	r3, #0
 800632c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800632e:	2300      	movs	r3, #0
 8006330:	61fb      	str	r3, [r7, #28]
 8006332:	e159      	b.n	80065e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006334:	2201      	movs	r2, #1
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	fa02 f303 	lsl.w	r3, r2, r3
 800633c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	4013      	ands	r3, r2
 8006346:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	429a      	cmp	r2, r3
 800634e:	f040 8148 	bne.w	80065e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f003 0303 	and.w	r3, r3, #3
 800635a:	2b01      	cmp	r3, #1
 800635c:	d005      	beq.n	800636a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006366:	2b02      	cmp	r3, #2
 8006368:	d130      	bne.n	80063cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	005b      	lsls	r3, r3, #1
 8006374:	2203      	movs	r2, #3
 8006376:	fa02 f303 	lsl.w	r3, r2, r3
 800637a:	43db      	mvns	r3, r3
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	4013      	ands	r3, r2
 8006380:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	68da      	ldr	r2, [r3, #12]
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	fa02 f303 	lsl.w	r3, r2, r3
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	4313      	orrs	r3, r2
 8006392:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063a0:	2201      	movs	r2, #1
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	fa02 f303 	lsl.w	r3, r2, r3
 80063a8:	43db      	mvns	r3, r3
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	4013      	ands	r3, r2
 80063ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	091b      	lsrs	r3, r3, #4
 80063b6:	f003 0201 	and.w	r2, r3, #1
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	fa02 f303 	lsl.w	r3, r2, r3
 80063c0:	69ba      	ldr	r2, [r7, #24]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f003 0303 	and.w	r3, r3, #3
 80063d4:	2b03      	cmp	r3, #3
 80063d6:	d017      	beq.n	8006408 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	2203      	movs	r2, #3
 80063e4:	fa02 f303 	lsl.w	r3, r2, r3
 80063e8:	43db      	mvns	r3, r3
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	4013      	ands	r3, r2
 80063ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	fa02 f303 	lsl.w	r3, r2, r3
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	4313      	orrs	r3, r2
 8006400:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f003 0303 	and.w	r3, r3, #3
 8006410:	2b02      	cmp	r3, #2
 8006412:	d123      	bne.n	800645c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	08da      	lsrs	r2, r3, #3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	3208      	adds	r2, #8
 800641c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006420:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	f003 0307 	and.w	r3, r3, #7
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	220f      	movs	r2, #15
 800642c:	fa02 f303 	lsl.w	r3, r2, r3
 8006430:	43db      	mvns	r3, r3
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	4013      	ands	r3, r2
 8006436:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	691a      	ldr	r2, [r3, #16]
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	f003 0307 	and.w	r3, r3, #7
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	fa02 f303 	lsl.w	r3, r2, r3
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	4313      	orrs	r3, r2
 800644c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	08da      	lsrs	r2, r3, #3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	3208      	adds	r2, #8
 8006456:	69b9      	ldr	r1, [r7, #24]
 8006458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	2203      	movs	r2, #3
 8006468:	fa02 f303 	lsl.w	r3, r2, r3
 800646c:	43db      	mvns	r3, r3
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	4013      	ands	r3, r2
 8006472:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f003 0203 	and.w	r2, r3, #3
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	fa02 f303 	lsl.w	r3, r2, r3
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	4313      	orrs	r3, r2
 8006488:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 80a2 	beq.w	80065e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800649e:	2300      	movs	r3, #0
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	4b57      	ldr	r3, [pc, #348]	; (8006600 <HAL_GPIO_Init+0x2e8>)
 80064a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a6:	4a56      	ldr	r2, [pc, #344]	; (8006600 <HAL_GPIO_Init+0x2e8>)
 80064a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064ac:	6453      	str	r3, [r2, #68]	; 0x44
 80064ae:	4b54      	ldr	r3, [pc, #336]	; (8006600 <HAL_GPIO_Init+0x2e8>)
 80064b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064ba:	4a52      	ldr	r2, [pc, #328]	; (8006604 <HAL_GPIO_Init+0x2ec>)
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	089b      	lsrs	r3, r3, #2
 80064c0:	3302      	adds	r3, #2
 80064c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	f003 0303 	and.w	r3, r3, #3
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	220f      	movs	r2, #15
 80064d2:	fa02 f303 	lsl.w	r3, r2, r3
 80064d6:	43db      	mvns	r3, r3
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	4013      	ands	r3, r2
 80064dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a49      	ldr	r2, [pc, #292]	; (8006608 <HAL_GPIO_Init+0x2f0>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d019      	beq.n	800651a <HAL_GPIO_Init+0x202>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a48      	ldr	r2, [pc, #288]	; (800660c <HAL_GPIO_Init+0x2f4>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d013      	beq.n	8006516 <HAL_GPIO_Init+0x1fe>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a47      	ldr	r2, [pc, #284]	; (8006610 <HAL_GPIO_Init+0x2f8>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d00d      	beq.n	8006512 <HAL_GPIO_Init+0x1fa>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a46      	ldr	r2, [pc, #280]	; (8006614 <HAL_GPIO_Init+0x2fc>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d007      	beq.n	800650e <HAL_GPIO_Init+0x1f6>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a45      	ldr	r2, [pc, #276]	; (8006618 <HAL_GPIO_Init+0x300>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d101      	bne.n	800650a <HAL_GPIO_Init+0x1f2>
 8006506:	2304      	movs	r3, #4
 8006508:	e008      	b.n	800651c <HAL_GPIO_Init+0x204>
 800650a:	2307      	movs	r3, #7
 800650c:	e006      	b.n	800651c <HAL_GPIO_Init+0x204>
 800650e:	2303      	movs	r3, #3
 8006510:	e004      	b.n	800651c <HAL_GPIO_Init+0x204>
 8006512:	2302      	movs	r3, #2
 8006514:	e002      	b.n	800651c <HAL_GPIO_Init+0x204>
 8006516:	2301      	movs	r3, #1
 8006518:	e000      	b.n	800651c <HAL_GPIO_Init+0x204>
 800651a:	2300      	movs	r3, #0
 800651c:	69fa      	ldr	r2, [r7, #28]
 800651e:	f002 0203 	and.w	r2, r2, #3
 8006522:	0092      	lsls	r2, r2, #2
 8006524:	4093      	lsls	r3, r2
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	4313      	orrs	r3, r2
 800652a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800652c:	4935      	ldr	r1, [pc, #212]	; (8006604 <HAL_GPIO_Init+0x2ec>)
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	089b      	lsrs	r3, r3, #2
 8006532:	3302      	adds	r3, #2
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800653a:	4b38      	ldr	r3, [pc, #224]	; (800661c <HAL_GPIO_Init+0x304>)
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	43db      	mvns	r3, r3
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	4013      	ands	r3, r2
 8006548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	4313      	orrs	r3, r2
 800655c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800655e:	4a2f      	ldr	r2, [pc, #188]	; (800661c <HAL_GPIO_Init+0x304>)
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006564:	4b2d      	ldr	r3, [pc, #180]	; (800661c <HAL_GPIO_Init+0x304>)
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	43db      	mvns	r3, r3
 800656e:	69ba      	ldr	r2, [r7, #24]
 8006570:	4013      	ands	r3, r2
 8006572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d003      	beq.n	8006588 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	4313      	orrs	r3, r2
 8006586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006588:	4a24      	ldr	r2, [pc, #144]	; (800661c <HAL_GPIO_Init+0x304>)
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800658e:	4b23      	ldr	r3, [pc, #140]	; (800661c <HAL_GPIO_Init+0x304>)
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	43db      	mvns	r3, r3
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	4013      	ands	r3, r2
 800659c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80065b2:	4a1a      	ldr	r2, [pc, #104]	; (800661c <HAL_GPIO_Init+0x304>)
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065b8:	4b18      	ldr	r3, [pc, #96]	; (800661c <HAL_GPIO_Init+0x304>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	43db      	mvns	r3, r3
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	4013      	ands	r3, r2
 80065c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d003      	beq.n	80065dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	4313      	orrs	r3, r2
 80065da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80065dc:	4a0f      	ldr	r2, [pc, #60]	; (800661c <HAL_GPIO_Init+0x304>)
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	3301      	adds	r3, #1
 80065e6:	61fb      	str	r3, [r7, #28]
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	2b0f      	cmp	r3, #15
 80065ec:	f67f aea2 	bls.w	8006334 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80065f0:	bf00      	nop
 80065f2:	bf00      	nop
 80065f4:	3724      	adds	r7, #36	; 0x24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	40023800 	.word	0x40023800
 8006604:	40013800 	.word	0x40013800
 8006608:	40020000 	.word	0x40020000
 800660c:	40020400 	.word	0x40020400
 8006610:	40020800 	.word	0x40020800
 8006614:	40020c00 	.word	0x40020c00
 8006618:	40021000 	.word	0x40021000
 800661c:	40013c00 	.word	0x40013c00

08006620 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	460b      	mov	r3, r1
 800662a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	691a      	ldr	r2, [r3, #16]
 8006630:	887b      	ldrh	r3, [r7, #2]
 8006632:	4013      	ands	r3, r2
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006638:	2301      	movs	r3, #1
 800663a:	73fb      	strb	r3, [r7, #15]
 800663c:	e001      	b.n	8006642 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800663e:	2300      	movs	r3, #0
 8006640:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006642:	7bfb      	ldrb	r3, [r7, #15]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	460b      	mov	r3, r1
 800665a:	807b      	strh	r3, [r7, #2]
 800665c:	4613      	mov	r3, r2
 800665e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006660:	787b      	ldrb	r3, [r7, #1]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006666:	887a      	ldrh	r2, [r7, #2]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800666c:	e003      	b.n	8006676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800666e:	887b      	ldrh	r3, [r7, #2]
 8006670:	041a      	lsls	r2, r3, #16
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	619a      	str	r2, [r3, #24]
}
 8006676:	bf00      	nop
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
	...

08006684 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	4603      	mov	r3, r0
 800668c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800668e:	4b08      	ldr	r3, [pc, #32]	; (80066b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006690:	695a      	ldr	r2, [r3, #20]
 8006692:	88fb      	ldrh	r3, [r7, #6]
 8006694:	4013      	ands	r3, r2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d006      	beq.n	80066a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800669a:	4a05      	ldr	r2, [pc, #20]	; (80066b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800669c:	88fb      	ldrh	r3, [r7, #6]
 800669e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80066a0:	88fb      	ldrh	r3, [r7, #6]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f000 f806 	bl	80066b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80066a8:	bf00      	nop
 80066aa:	3708      	adds	r7, #8
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	40013c00 	.word	0x40013c00

080066b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	4603      	mov	r3, r0
 80066bc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
	...

080066cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e12b      	b.n	8006936 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d106      	bne.n	80066f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7fe f9d8 	bl	8004aa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2224      	movs	r2, #36	; 0x24
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f022 0201 	bic.w	r2, r2, #1
 800670e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800671e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800672e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006730:	f000 fd80 	bl	8007234 <HAL_RCC_GetPCLK1Freq>
 8006734:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	4a81      	ldr	r2, [pc, #516]	; (8006940 <HAL_I2C_Init+0x274>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d807      	bhi.n	8006750 <HAL_I2C_Init+0x84>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4a80      	ldr	r2, [pc, #512]	; (8006944 <HAL_I2C_Init+0x278>)
 8006744:	4293      	cmp	r3, r2
 8006746:	bf94      	ite	ls
 8006748:	2301      	movls	r3, #1
 800674a:	2300      	movhi	r3, #0
 800674c:	b2db      	uxtb	r3, r3
 800674e:	e006      	b.n	800675e <HAL_I2C_Init+0x92>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	4a7d      	ldr	r2, [pc, #500]	; (8006948 <HAL_I2C_Init+0x27c>)
 8006754:	4293      	cmp	r3, r2
 8006756:	bf94      	ite	ls
 8006758:	2301      	movls	r3, #1
 800675a:	2300      	movhi	r3, #0
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e0e7      	b.n	8006936 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4a78      	ldr	r2, [pc, #480]	; (800694c <HAL_I2C_Init+0x280>)
 800676a:	fba2 2303 	umull	r2, r3, r2, r3
 800676e:	0c9b      	lsrs	r3, r3, #18
 8006770:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	430a      	orrs	r2, r1
 8006784:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	4a6a      	ldr	r2, [pc, #424]	; (8006940 <HAL_I2C_Init+0x274>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d802      	bhi.n	80067a0 <HAL_I2C_Init+0xd4>
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	3301      	adds	r3, #1
 800679e:	e009      	b.n	80067b4 <HAL_I2C_Init+0xe8>
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80067a6:	fb02 f303 	mul.w	r3, r2, r3
 80067aa:	4a69      	ldr	r2, [pc, #420]	; (8006950 <HAL_I2C_Init+0x284>)
 80067ac:	fba2 2303 	umull	r2, r3, r2, r3
 80067b0:	099b      	lsrs	r3, r3, #6
 80067b2:	3301      	adds	r3, #1
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	6812      	ldr	r2, [r2, #0]
 80067b8:	430b      	orrs	r3, r1
 80067ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80067c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	495c      	ldr	r1, [pc, #368]	; (8006940 <HAL_I2C_Init+0x274>)
 80067d0:	428b      	cmp	r3, r1
 80067d2:	d819      	bhi.n	8006808 <HAL_I2C_Init+0x13c>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	1e59      	subs	r1, r3, #1
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	005b      	lsls	r3, r3, #1
 80067de:	fbb1 f3f3 	udiv	r3, r1, r3
 80067e2:	1c59      	adds	r1, r3, #1
 80067e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80067e8:	400b      	ands	r3, r1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00a      	beq.n	8006804 <HAL_I2C_Init+0x138>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	1e59      	subs	r1, r3, #1
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	005b      	lsls	r3, r3, #1
 80067f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80067fc:	3301      	adds	r3, #1
 80067fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006802:	e051      	b.n	80068a8 <HAL_I2C_Init+0x1dc>
 8006804:	2304      	movs	r3, #4
 8006806:	e04f      	b.n	80068a8 <HAL_I2C_Init+0x1dc>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d111      	bne.n	8006834 <HAL_I2C_Init+0x168>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	1e58      	subs	r0, r3, #1
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6859      	ldr	r1, [r3, #4]
 8006818:	460b      	mov	r3, r1
 800681a:	005b      	lsls	r3, r3, #1
 800681c:	440b      	add	r3, r1
 800681e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006822:	3301      	adds	r3, #1
 8006824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006828:	2b00      	cmp	r3, #0
 800682a:	bf0c      	ite	eq
 800682c:	2301      	moveq	r3, #1
 800682e:	2300      	movne	r3, #0
 8006830:	b2db      	uxtb	r3, r3
 8006832:	e012      	b.n	800685a <HAL_I2C_Init+0x18e>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	1e58      	subs	r0, r3, #1
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6859      	ldr	r1, [r3, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	440b      	add	r3, r1
 8006842:	0099      	lsls	r1, r3, #2
 8006844:	440b      	add	r3, r1
 8006846:	fbb0 f3f3 	udiv	r3, r0, r3
 800684a:	3301      	adds	r3, #1
 800684c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006850:	2b00      	cmp	r3, #0
 8006852:	bf0c      	ite	eq
 8006854:	2301      	moveq	r3, #1
 8006856:	2300      	movne	r3, #0
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d001      	beq.n	8006862 <HAL_I2C_Init+0x196>
 800685e:	2301      	movs	r3, #1
 8006860:	e022      	b.n	80068a8 <HAL_I2C_Init+0x1dc>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10e      	bne.n	8006888 <HAL_I2C_Init+0x1bc>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	1e58      	subs	r0, r3, #1
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6859      	ldr	r1, [r3, #4]
 8006872:	460b      	mov	r3, r1
 8006874:	005b      	lsls	r3, r3, #1
 8006876:	440b      	add	r3, r1
 8006878:	fbb0 f3f3 	udiv	r3, r0, r3
 800687c:	3301      	adds	r3, #1
 800687e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006886:	e00f      	b.n	80068a8 <HAL_I2C_Init+0x1dc>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	1e58      	subs	r0, r3, #1
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6859      	ldr	r1, [r3, #4]
 8006890:	460b      	mov	r3, r1
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	440b      	add	r3, r1
 8006896:	0099      	lsls	r1, r3, #2
 8006898:	440b      	add	r3, r1
 800689a:	fbb0 f3f3 	udiv	r3, r0, r3
 800689e:	3301      	adds	r3, #1
 80068a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068a8:	6879      	ldr	r1, [r7, #4]
 80068aa:	6809      	ldr	r1, [r1, #0]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	69da      	ldr	r2, [r3, #28]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	431a      	orrs	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	430a      	orrs	r2, r1
 80068ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80068d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	6911      	ldr	r1, [r2, #16]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	68d2      	ldr	r2, [r2, #12]
 80068e2:	4311      	orrs	r1, r2
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	6812      	ldr	r2, [r2, #0]
 80068e8:	430b      	orrs	r3, r1
 80068ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	695a      	ldr	r2, [r3, #20]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	431a      	orrs	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	430a      	orrs	r2, r1
 8006906:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0201 	orr.w	r2, r2, #1
 8006916:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2220      	movs	r2, #32
 8006922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	000186a0 	.word	0x000186a0
 8006944:	001e847f 	.word	0x001e847f
 8006948:	003d08ff 	.word	0x003d08ff
 800694c:	431bde83 	.word	0x431bde83
 8006950:	10624dd3 	.word	0x10624dd3

08006954 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e267      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d075      	beq.n	8006a5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006972:	4b88      	ldr	r3, [pc, #544]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f003 030c 	and.w	r3, r3, #12
 800697a:	2b04      	cmp	r3, #4
 800697c:	d00c      	beq.n	8006998 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800697e:	4b85      	ldr	r3, [pc, #532]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006986:	2b08      	cmp	r3, #8
 8006988:	d112      	bne.n	80069b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800698a:	4b82      	ldr	r3, [pc, #520]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006996:	d10b      	bne.n	80069b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006998:	4b7e      	ldr	r3, [pc, #504]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d05b      	beq.n	8006a5c <HAL_RCC_OscConfig+0x108>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d157      	bne.n	8006a5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e242      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b8:	d106      	bne.n	80069c8 <HAL_RCC_OscConfig+0x74>
 80069ba:	4b76      	ldr	r3, [pc, #472]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a75      	ldr	r2, [pc, #468]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 80069c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069c4:	6013      	str	r3, [r2, #0]
 80069c6:	e01d      	b.n	8006a04 <HAL_RCC_OscConfig+0xb0>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069d0:	d10c      	bne.n	80069ec <HAL_RCC_OscConfig+0x98>
 80069d2:	4b70      	ldr	r3, [pc, #448]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a6f      	ldr	r2, [pc, #444]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 80069d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	4b6d      	ldr	r3, [pc, #436]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a6c      	ldr	r2, [pc, #432]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 80069e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069e8:	6013      	str	r3, [r2, #0]
 80069ea:	e00b      	b.n	8006a04 <HAL_RCC_OscConfig+0xb0>
 80069ec:	4b69      	ldr	r3, [pc, #420]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a68      	ldr	r2, [pc, #416]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 80069f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069f6:	6013      	str	r3, [r2, #0]
 80069f8:	4b66      	ldr	r3, [pc, #408]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a65      	ldr	r2, [pc, #404]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 80069fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d013      	beq.n	8006a34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a0c:	f7fe fb56 	bl	80050bc <HAL_GetTick>
 8006a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a12:	e008      	b.n	8006a26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a14:	f7fe fb52 	bl	80050bc <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	2b64      	cmp	r3, #100	; 0x64
 8006a20:	d901      	bls.n	8006a26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e207      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a26:	4b5b      	ldr	r3, [pc, #364]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d0f0      	beq.n	8006a14 <HAL_RCC_OscConfig+0xc0>
 8006a32:	e014      	b.n	8006a5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a34:	f7fe fb42 	bl	80050bc <HAL_GetTick>
 8006a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a3a:	e008      	b.n	8006a4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a3c:	f7fe fb3e 	bl	80050bc <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	2b64      	cmp	r3, #100	; 0x64
 8006a48:	d901      	bls.n	8006a4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e1f3      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a4e:	4b51      	ldr	r3, [pc, #324]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1f0      	bne.n	8006a3c <HAL_RCC_OscConfig+0xe8>
 8006a5a:	e000      	b.n	8006a5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0302 	and.w	r3, r3, #2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d063      	beq.n	8006b32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a6a:	4b4a      	ldr	r3, [pc, #296]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f003 030c 	and.w	r3, r3, #12
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00b      	beq.n	8006a8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a76:	4b47      	ldr	r3, [pc, #284]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a7e:	2b08      	cmp	r3, #8
 8006a80:	d11c      	bne.n	8006abc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a82:	4b44      	ldr	r3, [pc, #272]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d116      	bne.n	8006abc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a8e:	4b41      	ldr	r3, [pc, #260]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d005      	beq.n	8006aa6 <HAL_RCC_OscConfig+0x152>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d001      	beq.n	8006aa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e1c7      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aa6:	4b3b      	ldr	r3, [pc, #236]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	4937      	ldr	r1, [pc, #220]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aba:	e03a      	b.n	8006b32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d020      	beq.n	8006b06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ac4:	4b34      	ldr	r3, [pc, #208]	; (8006b98 <HAL_RCC_OscConfig+0x244>)
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aca:	f7fe faf7 	bl	80050bc <HAL_GetTick>
 8006ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ad0:	e008      	b.n	8006ae4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ad2:	f7fe faf3 	bl	80050bc <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d901      	bls.n	8006ae4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e1a8      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ae4:	4b2b      	ldr	r3, [pc, #172]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0302 	and.w	r3, r3, #2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d0f0      	beq.n	8006ad2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006af0:	4b28      	ldr	r3, [pc, #160]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	00db      	lsls	r3, r3, #3
 8006afe:	4925      	ldr	r1, [pc, #148]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006b00:	4313      	orrs	r3, r2
 8006b02:	600b      	str	r3, [r1, #0]
 8006b04:	e015      	b.n	8006b32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b06:	4b24      	ldr	r3, [pc, #144]	; (8006b98 <HAL_RCC_OscConfig+0x244>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0c:	f7fe fad6 	bl	80050bc <HAL_GetTick>
 8006b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b12:	e008      	b.n	8006b26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b14:	f7fe fad2 	bl	80050bc <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e187      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b26:	4b1b      	ldr	r3, [pc, #108]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1f0      	bne.n	8006b14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0308 	and.w	r3, r3, #8
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d036      	beq.n	8006bac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d016      	beq.n	8006b74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b46:	4b15      	ldr	r3, [pc, #84]	; (8006b9c <HAL_RCC_OscConfig+0x248>)
 8006b48:	2201      	movs	r2, #1
 8006b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b4c:	f7fe fab6 	bl	80050bc <HAL_GetTick>
 8006b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b52:	e008      	b.n	8006b66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b54:	f7fe fab2 	bl	80050bc <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d901      	bls.n	8006b66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e167      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b66:	4b0b      	ldr	r3, [pc, #44]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0f0      	beq.n	8006b54 <HAL_RCC_OscConfig+0x200>
 8006b72:	e01b      	b.n	8006bac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b74:	4b09      	ldr	r3, [pc, #36]	; (8006b9c <HAL_RCC_OscConfig+0x248>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b7a:	f7fe fa9f 	bl	80050bc <HAL_GetTick>
 8006b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b80:	e00e      	b.n	8006ba0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b82:	f7fe fa9b 	bl	80050bc <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d907      	bls.n	8006ba0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e150      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
 8006b94:	40023800 	.word	0x40023800
 8006b98:	42470000 	.word	0x42470000
 8006b9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ba0:	4b88      	ldr	r3, [pc, #544]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ba4:	f003 0302 	and.w	r3, r3, #2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1ea      	bne.n	8006b82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 8097 	beq.w	8006ce8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bbe:	4b81      	ldr	r3, [pc, #516]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10f      	bne.n	8006bea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bca:	2300      	movs	r3, #0
 8006bcc:	60bb      	str	r3, [r7, #8]
 8006bce:	4b7d      	ldr	r3, [pc, #500]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	4a7c      	ldr	r2, [pc, #496]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8006bda:	4b7a      	ldr	r3, [pc, #488]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006be2:	60bb      	str	r3, [r7, #8]
 8006be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006be6:	2301      	movs	r3, #1
 8006be8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bea:	4b77      	ldr	r3, [pc, #476]	; (8006dc8 <HAL_RCC_OscConfig+0x474>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d118      	bne.n	8006c28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bf6:	4b74      	ldr	r3, [pc, #464]	; (8006dc8 <HAL_RCC_OscConfig+0x474>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a73      	ldr	r2, [pc, #460]	; (8006dc8 <HAL_RCC_OscConfig+0x474>)
 8006bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c02:	f7fe fa5b 	bl	80050bc <HAL_GetTick>
 8006c06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c08:	e008      	b.n	8006c1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c0a:	f7fe fa57 	bl	80050bc <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d901      	bls.n	8006c1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e10c      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c1c:	4b6a      	ldr	r3, [pc, #424]	; (8006dc8 <HAL_RCC_OscConfig+0x474>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d0f0      	beq.n	8006c0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d106      	bne.n	8006c3e <HAL_RCC_OscConfig+0x2ea>
 8006c30:	4b64      	ldr	r3, [pc, #400]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c34:	4a63      	ldr	r2, [pc, #396]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006c36:	f043 0301 	orr.w	r3, r3, #1
 8006c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c3c:	e01c      	b.n	8006c78 <HAL_RCC_OscConfig+0x324>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	2b05      	cmp	r3, #5
 8006c44:	d10c      	bne.n	8006c60 <HAL_RCC_OscConfig+0x30c>
 8006c46:	4b5f      	ldr	r3, [pc, #380]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c4a:	4a5e      	ldr	r2, [pc, #376]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006c4c:	f043 0304 	orr.w	r3, r3, #4
 8006c50:	6713      	str	r3, [r2, #112]	; 0x70
 8006c52:	4b5c      	ldr	r3, [pc, #368]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c56:	4a5b      	ldr	r2, [pc, #364]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006c58:	f043 0301 	orr.w	r3, r3, #1
 8006c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c5e:	e00b      	b.n	8006c78 <HAL_RCC_OscConfig+0x324>
 8006c60:	4b58      	ldr	r3, [pc, #352]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c64:	4a57      	ldr	r2, [pc, #348]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006c66:	f023 0301 	bic.w	r3, r3, #1
 8006c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c6c:	4b55      	ldr	r3, [pc, #340]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c70:	4a54      	ldr	r2, [pc, #336]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006c72:	f023 0304 	bic.w	r3, r3, #4
 8006c76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d015      	beq.n	8006cac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c80:	f7fe fa1c 	bl	80050bc <HAL_GetTick>
 8006c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c86:	e00a      	b.n	8006c9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c88:	f7fe fa18 	bl	80050bc <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e0cb      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c9e:	4b49      	ldr	r3, [pc, #292]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0ee      	beq.n	8006c88 <HAL_RCC_OscConfig+0x334>
 8006caa:	e014      	b.n	8006cd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cac:	f7fe fa06 	bl	80050bc <HAL_GetTick>
 8006cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cb2:	e00a      	b.n	8006cca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cb4:	f7fe fa02 	bl	80050bc <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d901      	bls.n	8006cca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e0b5      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cca:	4b3e      	ldr	r3, [pc, #248]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1ee      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006cd6:	7dfb      	ldrb	r3, [r7, #23]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d105      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cdc:	4b39      	ldr	r3, [pc, #228]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce0:	4a38      	ldr	r2, [pc, #224]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ce6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f000 80a1 	beq.w	8006e34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006cf2:	4b34      	ldr	r3, [pc, #208]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f003 030c 	and.w	r3, r3, #12
 8006cfa:	2b08      	cmp	r3, #8
 8006cfc:	d05c      	beq.n	8006db8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d141      	bne.n	8006d8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d06:	4b31      	ldr	r3, [pc, #196]	; (8006dcc <HAL_RCC_OscConfig+0x478>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d0c:	f7fe f9d6 	bl	80050bc <HAL_GetTick>
 8006d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d12:	e008      	b.n	8006d26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d14:	f7fe f9d2 	bl	80050bc <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d901      	bls.n	8006d26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e087      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d26:	4b27      	ldr	r3, [pc, #156]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1f0      	bne.n	8006d14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	69da      	ldr	r2, [r3, #28]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	431a      	orrs	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	019b      	lsls	r3, r3, #6
 8006d42:	431a      	orrs	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d48:	085b      	lsrs	r3, r3, #1
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	041b      	lsls	r3, r3, #16
 8006d4e:	431a      	orrs	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d54:	061b      	lsls	r3, r3, #24
 8006d56:	491b      	ldr	r1, [pc, #108]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d5c:	4b1b      	ldr	r3, [pc, #108]	; (8006dcc <HAL_RCC_OscConfig+0x478>)
 8006d5e:	2201      	movs	r2, #1
 8006d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d62:	f7fe f9ab 	bl	80050bc <HAL_GetTick>
 8006d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d68:	e008      	b.n	8006d7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d6a:	f7fe f9a7 	bl	80050bc <HAL_GetTick>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d901      	bls.n	8006d7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e05c      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d7c:	4b11      	ldr	r3, [pc, #68]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d0f0      	beq.n	8006d6a <HAL_RCC_OscConfig+0x416>
 8006d88:	e054      	b.n	8006e34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d8a:	4b10      	ldr	r3, [pc, #64]	; (8006dcc <HAL_RCC_OscConfig+0x478>)
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d90:	f7fe f994 	bl	80050bc <HAL_GetTick>
 8006d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d96:	e008      	b.n	8006daa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d98:	f7fe f990 	bl	80050bc <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e045      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006daa:	4b06      	ldr	r3, [pc, #24]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1f0      	bne.n	8006d98 <HAL_RCC_OscConfig+0x444>
 8006db6:	e03d      	b.n	8006e34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d107      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e038      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
 8006dc4:	40023800 	.word	0x40023800
 8006dc8:	40007000 	.word	0x40007000
 8006dcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006dd0:	4b1b      	ldr	r3, [pc, #108]	; (8006e40 <HAL_RCC_OscConfig+0x4ec>)
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d028      	beq.n	8006e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d121      	bne.n	8006e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d11a      	bne.n	8006e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e00:	4013      	ands	r3, r2
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d111      	bne.n	8006e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e16:	085b      	lsrs	r3, r3, #1
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d107      	bne.n	8006e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d001      	beq.n	8006e34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e000      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	40023800 	.word	0x40023800

08006e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e0cc      	b.n	8006ff2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e58:	4b68      	ldr	r3, [pc, #416]	; (8006ffc <HAL_RCC_ClockConfig+0x1b8>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0307 	and.w	r3, r3, #7
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d90c      	bls.n	8006e80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e66:	4b65      	ldr	r3, [pc, #404]	; (8006ffc <HAL_RCC_ClockConfig+0x1b8>)
 8006e68:	683a      	ldr	r2, [r7, #0]
 8006e6a:	b2d2      	uxtb	r2, r2
 8006e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e6e:	4b63      	ldr	r3, [pc, #396]	; (8006ffc <HAL_RCC_ClockConfig+0x1b8>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0307 	and.w	r3, r3, #7
 8006e76:	683a      	ldr	r2, [r7, #0]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d001      	beq.n	8006e80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e0b8      	b.n	8006ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d020      	beq.n	8006ece <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d005      	beq.n	8006ea4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e98:	4b59      	ldr	r3, [pc, #356]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	4a58      	ldr	r2, [pc, #352]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006e9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ea2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0308 	and.w	r3, r3, #8
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d005      	beq.n	8006ebc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006eb0:	4b53      	ldr	r3, [pc, #332]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	4a52      	ldr	r2, [pc, #328]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006eb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006eba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ebc:	4b50      	ldr	r3, [pc, #320]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	494d      	ldr	r1, [pc, #308]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d044      	beq.n	8006f64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d107      	bne.n	8006ef2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ee2:	4b47      	ldr	r3, [pc, #284]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d119      	bne.n	8006f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e07f      	b.n	8006ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d003      	beq.n	8006f02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006efe:	2b03      	cmp	r3, #3
 8006f00:	d107      	bne.n	8006f12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f02:	4b3f      	ldr	r3, [pc, #252]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d109      	bne.n	8006f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e06f      	b.n	8006ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f12:	4b3b      	ldr	r3, [pc, #236]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0302 	and.w	r3, r3, #2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e067      	b.n	8006ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f22:	4b37      	ldr	r3, [pc, #220]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f023 0203 	bic.w	r2, r3, #3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	4934      	ldr	r1, [pc, #208]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006f30:	4313      	orrs	r3, r2
 8006f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f34:	f7fe f8c2 	bl	80050bc <HAL_GetTick>
 8006f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f3a:	e00a      	b.n	8006f52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f3c:	f7fe f8be 	bl	80050bc <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d901      	bls.n	8006f52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e04f      	b.n	8006ff2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f52:	4b2b      	ldr	r3, [pc, #172]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f003 020c 	and.w	r2, r3, #12
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d1eb      	bne.n	8006f3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f64:	4b25      	ldr	r3, [pc, #148]	; (8006ffc <HAL_RCC_ClockConfig+0x1b8>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0307 	and.w	r3, r3, #7
 8006f6c:	683a      	ldr	r2, [r7, #0]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d20c      	bcs.n	8006f8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f72:	4b22      	ldr	r3, [pc, #136]	; (8006ffc <HAL_RCC_ClockConfig+0x1b8>)
 8006f74:	683a      	ldr	r2, [r7, #0]
 8006f76:	b2d2      	uxtb	r2, r2
 8006f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f7a:	4b20      	ldr	r3, [pc, #128]	; (8006ffc <HAL_RCC_ClockConfig+0x1b8>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0307 	and.w	r3, r3, #7
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d001      	beq.n	8006f8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e032      	b.n	8006ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0304 	and.w	r3, r3, #4
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d008      	beq.n	8006faa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f98:	4b19      	ldr	r3, [pc, #100]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	4916      	ldr	r1, [pc, #88]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0308 	and.w	r3, r3, #8
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d009      	beq.n	8006fca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fb6:	4b12      	ldr	r3, [pc, #72]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	00db      	lsls	r3, r3, #3
 8006fc4:	490e      	ldr	r1, [pc, #56]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006fca:	f000 f821 	bl	8007010 <HAL_RCC_GetSysClockFreq>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	4b0b      	ldr	r3, [pc, #44]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	091b      	lsrs	r3, r3, #4
 8006fd6:	f003 030f 	and.w	r3, r3, #15
 8006fda:	490a      	ldr	r1, [pc, #40]	; (8007004 <HAL_RCC_ClockConfig+0x1c0>)
 8006fdc:	5ccb      	ldrb	r3, [r1, r3]
 8006fde:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe2:	4a09      	ldr	r2, [pc, #36]	; (8007008 <HAL_RCC_ClockConfig+0x1c4>)
 8006fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006fe6:	4b09      	ldr	r3, [pc, #36]	; (800700c <HAL_RCC_ClockConfig+0x1c8>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fe f822 	bl	8005034 <HAL_InitTick>

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	40023c00 	.word	0x40023c00
 8007000:	40023800 	.word	0x40023800
 8007004:	0800c8a8 	.word	0x0800c8a8
 8007008:	20000358 	.word	0x20000358
 800700c:	2000035c 	.word	0x2000035c

08007010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007014:	b094      	sub	sp, #80	; 0x50
 8007016:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007018:	2300      	movs	r3, #0
 800701a:	647b      	str	r3, [r7, #68]	; 0x44
 800701c:	2300      	movs	r3, #0
 800701e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007020:	2300      	movs	r3, #0
 8007022:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007024:	2300      	movs	r3, #0
 8007026:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007028:	4b79      	ldr	r3, [pc, #484]	; (8007210 <HAL_RCC_GetSysClockFreq+0x200>)
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f003 030c 	and.w	r3, r3, #12
 8007030:	2b08      	cmp	r3, #8
 8007032:	d00d      	beq.n	8007050 <HAL_RCC_GetSysClockFreq+0x40>
 8007034:	2b08      	cmp	r3, #8
 8007036:	f200 80e1 	bhi.w	80071fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800703a:	2b00      	cmp	r3, #0
 800703c:	d002      	beq.n	8007044 <HAL_RCC_GetSysClockFreq+0x34>
 800703e:	2b04      	cmp	r3, #4
 8007040:	d003      	beq.n	800704a <HAL_RCC_GetSysClockFreq+0x3a>
 8007042:	e0db      	b.n	80071fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007044:	4b73      	ldr	r3, [pc, #460]	; (8007214 <HAL_RCC_GetSysClockFreq+0x204>)
 8007046:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007048:	e0db      	b.n	8007202 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800704a:	4b73      	ldr	r3, [pc, #460]	; (8007218 <HAL_RCC_GetSysClockFreq+0x208>)
 800704c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800704e:	e0d8      	b.n	8007202 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007050:	4b6f      	ldr	r3, [pc, #444]	; (8007210 <HAL_RCC_GetSysClockFreq+0x200>)
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007058:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800705a:	4b6d      	ldr	r3, [pc, #436]	; (8007210 <HAL_RCC_GetSysClockFreq+0x200>)
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d063      	beq.n	800712e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007066:	4b6a      	ldr	r3, [pc, #424]	; (8007210 <HAL_RCC_GetSysClockFreq+0x200>)
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	099b      	lsrs	r3, r3, #6
 800706c:	2200      	movs	r2, #0
 800706e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007070:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007078:	633b      	str	r3, [r7, #48]	; 0x30
 800707a:	2300      	movs	r3, #0
 800707c:	637b      	str	r3, [r7, #52]	; 0x34
 800707e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007082:	4622      	mov	r2, r4
 8007084:	462b      	mov	r3, r5
 8007086:	f04f 0000 	mov.w	r0, #0
 800708a:	f04f 0100 	mov.w	r1, #0
 800708e:	0159      	lsls	r1, r3, #5
 8007090:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007094:	0150      	lsls	r0, r2, #5
 8007096:	4602      	mov	r2, r0
 8007098:	460b      	mov	r3, r1
 800709a:	4621      	mov	r1, r4
 800709c:	1a51      	subs	r1, r2, r1
 800709e:	6139      	str	r1, [r7, #16]
 80070a0:	4629      	mov	r1, r5
 80070a2:	eb63 0301 	sbc.w	r3, r3, r1
 80070a6:	617b      	str	r3, [r7, #20]
 80070a8:	f04f 0200 	mov.w	r2, #0
 80070ac:	f04f 0300 	mov.w	r3, #0
 80070b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070b4:	4659      	mov	r1, fp
 80070b6:	018b      	lsls	r3, r1, #6
 80070b8:	4651      	mov	r1, sl
 80070ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80070be:	4651      	mov	r1, sl
 80070c0:	018a      	lsls	r2, r1, #6
 80070c2:	4651      	mov	r1, sl
 80070c4:	ebb2 0801 	subs.w	r8, r2, r1
 80070c8:	4659      	mov	r1, fp
 80070ca:	eb63 0901 	sbc.w	r9, r3, r1
 80070ce:	f04f 0200 	mov.w	r2, #0
 80070d2:	f04f 0300 	mov.w	r3, #0
 80070d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070e2:	4690      	mov	r8, r2
 80070e4:	4699      	mov	r9, r3
 80070e6:	4623      	mov	r3, r4
 80070e8:	eb18 0303 	adds.w	r3, r8, r3
 80070ec:	60bb      	str	r3, [r7, #8]
 80070ee:	462b      	mov	r3, r5
 80070f0:	eb49 0303 	adc.w	r3, r9, r3
 80070f4:	60fb      	str	r3, [r7, #12]
 80070f6:	f04f 0200 	mov.w	r2, #0
 80070fa:	f04f 0300 	mov.w	r3, #0
 80070fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007102:	4629      	mov	r1, r5
 8007104:	024b      	lsls	r3, r1, #9
 8007106:	4621      	mov	r1, r4
 8007108:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800710c:	4621      	mov	r1, r4
 800710e:	024a      	lsls	r2, r1, #9
 8007110:	4610      	mov	r0, r2
 8007112:	4619      	mov	r1, r3
 8007114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007116:	2200      	movs	r2, #0
 8007118:	62bb      	str	r3, [r7, #40]	; 0x28
 800711a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800711c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007120:	f7f9 fd3e 	bl	8000ba0 <__aeabi_uldivmod>
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	4613      	mov	r3, r2
 800712a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800712c:	e058      	b.n	80071e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800712e:	4b38      	ldr	r3, [pc, #224]	; (8007210 <HAL_RCC_GetSysClockFreq+0x200>)
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	099b      	lsrs	r3, r3, #6
 8007134:	2200      	movs	r2, #0
 8007136:	4618      	mov	r0, r3
 8007138:	4611      	mov	r1, r2
 800713a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800713e:	623b      	str	r3, [r7, #32]
 8007140:	2300      	movs	r3, #0
 8007142:	627b      	str	r3, [r7, #36]	; 0x24
 8007144:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007148:	4642      	mov	r2, r8
 800714a:	464b      	mov	r3, r9
 800714c:	f04f 0000 	mov.w	r0, #0
 8007150:	f04f 0100 	mov.w	r1, #0
 8007154:	0159      	lsls	r1, r3, #5
 8007156:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800715a:	0150      	lsls	r0, r2, #5
 800715c:	4602      	mov	r2, r0
 800715e:	460b      	mov	r3, r1
 8007160:	4641      	mov	r1, r8
 8007162:	ebb2 0a01 	subs.w	sl, r2, r1
 8007166:	4649      	mov	r1, r9
 8007168:	eb63 0b01 	sbc.w	fp, r3, r1
 800716c:	f04f 0200 	mov.w	r2, #0
 8007170:	f04f 0300 	mov.w	r3, #0
 8007174:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007178:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800717c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007180:	ebb2 040a 	subs.w	r4, r2, sl
 8007184:	eb63 050b 	sbc.w	r5, r3, fp
 8007188:	f04f 0200 	mov.w	r2, #0
 800718c:	f04f 0300 	mov.w	r3, #0
 8007190:	00eb      	lsls	r3, r5, #3
 8007192:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007196:	00e2      	lsls	r2, r4, #3
 8007198:	4614      	mov	r4, r2
 800719a:	461d      	mov	r5, r3
 800719c:	4643      	mov	r3, r8
 800719e:	18e3      	adds	r3, r4, r3
 80071a0:	603b      	str	r3, [r7, #0]
 80071a2:	464b      	mov	r3, r9
 80071a4:	eb45 0303 	adc.w	r3, r5, r3
 80071a8:	607b      	str	r3, [r7, #4]
 80071aa:	f04f 0200 	mov.w	r2, #0
 80071ae:	f04f 0300 	mov.w	r3, #0
 80071b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80071b6:	4629      	mov	r1, r5
 80071b8:	028b      	lsls	r3, r1, #10
 80071ba:	4621      	mov	r1, r4
 80071bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80071c0:	4621      	mov	r1, r4
 80071c2:	028a      	lsls	r2, r1, #10
 80071c4:	4610      	mov	r0, r2
 80071c6:	4619      	mov	r1, r3
 80071c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071ca:	2200      	movs	r2, #0
 80071cc:	61bb      	str	r3, [r7, #24]
 80071ce:	61fa      	str	r2, [r7, #28]
 80071d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071d4:	f7f9 fce4 	bl	8000ba0 <__aeabi_uldivmod>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4613      	mov	r3, r2
 80071de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80071e0:	4b0b      	ldr	r3, [pc, #44]	; (8007210 <HAL_RCC_GetSysClockFreq+0x200>)
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	0c1b      	lsrs	r3, r3, #16
 80071e6:	f003 0303 	and.w	r3, r3, #3
 80071ea:	3301      	adds	r3, #1
 80071ec:	005b      	lsls	r3, r3, #1
 80071ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80071f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80071fa:	e002      	b.n	8007202 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80071fc:	4b05      	ldr	r3, [pc, #20]	; (8007214 <HAL_RCC_GetSysClockFreq+0x204>)
 80071fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007204:	4618      	mov	r0, r3
 8007206:	3750      	adds	r7, #80	; 0x50
 8007208:	46bd      	mov	sp, r7
 800720a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800720e:	bf00      	nop
 8007210:	40023800 	.word	0x40023800
 8007214:	00f42400 	.word	0x00f42400
 8007218:	007a1200 	.word	0x007a1200

0800721c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800721c:	b480      	push	{r7}
 800721e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007220:	4b03      	ldr	r3, [pc, #12]	; (8007230 <HAL_RCC_GetHCLKFreq+0x14>)
 8007222:	681b      	ldr	r3, [r3, #0]
}
 8007224:	4618      	mov	r0, r3
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	20000358 	.word	0x20000358

08007234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007238:	f7ff fff0 	bl	800721c <HAL_RCC_GetHCLKFreq>
 800723c:	4602      	mov	r2, r0
 800723e:	4b05      	ldr	r3, [pc, #20]	; (8007254 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	0a9b      	lsrs	r3, r3, #10
 8007244:	f003 0307 	and.w	r3, r3, #7
 8007248:	4903      	ldr	r1, [pc, #12]	; (8007258 <HAL_RCC_GetPCLK1Freq+0x24>)
 800724a:	5ccb      	ldrb	r3, [r1, r3]
 800724c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007250:	4618      	mov	r0, r3
 8007252:	bd80      	pop	{r7, pc}
 8007254:	40023800 	.word	0x40023800
 8007258:	0800c8b8 	.word	0x0800c8b8

0800725c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007260:	f7ff ffdc 	bl	800721c <HAL_RCC_GetHCLKFreq>
 8007264:	4602      	mov	r2, r0
 8007266:	4b05      	ldr	r3, [pc, #20]	; (800727c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	0b5b      	lsrs	r3, r3, #13
 800726c:	f003 0307 	and.w	r3, r3, #7
 8007270:	4903      	ldr	r1, [pc, #12]	; (8007280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007272:	5ccb      	ldrb	r3, [r1, r3]
 8007274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007278:	4618      	mov	r0, r3
 800727a:	bd80      	pop	{r7, pc}
 800727c:	40023800 	.word	0x40023800
 8007280:	0800c8b8 	.word	0x0800c8b8

08007284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e04c      	b.n	8007330 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d111      	bne.n	80072c6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f001 fc0c 	bl	8008ac8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d102      	bne.n	80072be <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a1f      	ldr	r2, [pc, #124]	; (8007338 <HAL_TIM_Base_Init+0xb4>)
 80072bc:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2202      	movs	r2, #2
 80072ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	3304      	adds	r3, #4
 80072d6:	4619      	mov	r1, r3
 80072d8:	4610      	mov	r0, r2
 80072da:	f001 f929 	bl	8008530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	08004bc5 	.word	0x08004bc5

0800733c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b01      	cmp	r3, #1
 800734e:	d001      	beq.n	8007354 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e03c      	b.n	80073ce <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2202      	movs	r2, #2
 8007358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a1e      	ldr	r2, [pc, #120]	; (80073dc <HAL_TIM_Base_Start+0xa0>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d018      	beq.n	8007398 <HAL_TIM_Base_Start+0x5c>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800736e:	d013      	beq.n	8007398 <HAL_TIM_Base_Start+0x5c>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a1a      	ldr	r2, [pc, #104]	; (80073e0 <HAL_TIM_Base_Start+0xa4>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d00e      	beq.n	8007398 <HAL_TIM_Base_Start+0x5c>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a19      	ldr	r2, [pc, #100]	; (80073e4 <HAL_TIM_Base_Start+0xa8>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d009      	beq.n	8007398 <HAL_TIM_Base_Start+0x5c>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a17      	ldr	r2, [pc, #92]	; (80073e8 <HAL_TIM_Base_Start+0xac>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d004      	beq.n	8007398 <HAL_TIM_Base_Start+0x5c>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a16      	ldr	r2, [pc, #88]	; (80073ec <HAL_TIM_Base_Start+0xb0>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d111      	bne.n	80073bc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f003 0307 	and.w	r3, r3, #7
 80073a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2b06      	cmp	r3, #6
 80073a8:	d010      	beq.n	80073cc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f042 0201 	orr.w	r2, r2, #1
 80073b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ba:	e007      	b.n	80073cc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f042 0201 	orr.w	r2, r2, #1
 80073ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	40010000 	.word	0x40010000
 80073e0:	40000400 	.word	0x40000400
 80073e4:	40000800 	.word	0x40000800
 80073e8:	40000c00 	.word	0x40000c00
 80073ec:	40014000 	.word	0x40014000

080073f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b01      	cmp	r3, #1
 8007402:	d001      	beq.n	8007408 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e044      	b.n	8007492 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2202      	movs	r2, #2
 800740c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68da      	ldr	r2, [r3, #12]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f042 0201 	orr.w	r2, r2, #1
 800741e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a1e      	ldr	r2, [pc, #120]	; (80074a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d018      	beq.n	800745c <HAL_TIM_Base_Start_IT+0x6c>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007432:	d013      	beq.n	800745c <HAL_TIM_Base_Start_IT+0x6c>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a1a      	ldr	r2, [pc, #104]	; (80074a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d00e      	beq.n	800745c <HAL_TIM_Base_Start_IT+0x6c>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a19      	ldr	r2, [pc, #100]	; (80074a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d009      	beq.n	800745c <HAL_TIM_Base_Start_IT+0x6c>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a17      	ldr	r2, [pc, #92]	; (80074ac <HAL_TIM_Base_Start_IT+0xbc>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d004      	beq.n	800745c <HAL_TIM_Base_Start_IT+0x6c>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a16      	ldr	r2, [pc, #88]	; (80074b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d111      	bne.n	8007480 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f003 0307 	and.w	r3, r3, #7
 8007466:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b06      	cmp	r3, #6
 800746c:	d010      	beq.n	8007490 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f042 0201 	orr.w	r2, r2, #1
 800747c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800747e:	e007      	b.n	8007490 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f042 0201 	orr.w	r2, r2, #1
 800748e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3714      	adds	r7, #20
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	40010000 	.word	0x40010000
 80074a4:	40000400 	.word	0x40000400
 80074a8:	40000800 	.word	0x40000800
 80074ac:	40000c00 	.word	0x40000c00
 80074b0:	40014000 	.word	0x40014000

080074b4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e04c      	b.n	8007560 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d111      	bne.n	80074f6 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f001 faf4 	bl	8008ac8 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d102      	bne.n	80074ee <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a1f      	ldr	r2, [pc, #124]	; (8007568 <HAL_TIM_OC_Init+0xb4>)
 80074ec:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2202      	movs	r2, #2
 80074fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	3304      	adds	r3, #4
 8007506:	4619      	mov	r1, r3
 8007508:	4610      	mov	r0, r2
 800750a:	f001 f811 	bl	8008530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	0800756d 	.word	0x0800756d

0800756c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e04c      	b.n	800762c <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d111      	bne.n	80075c2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f001 fa8e 	bl	8008ac8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d102      	bne.n	80075ba <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a1f      	ldr	r2, [pc, #124]	; (8007634 <HAL_TIM_PWM_Init+0xb4>)
 80075b8:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2202      	movs	r2, #2
 80075c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	3304      	adds	r3, #4
 80075d2:	4619      	mov	r1, r3
 80075d4:	4610      	mov	r0, r2
 80075d6:	f000 ffab 	bl	8008530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2201      	movs	r2, #1
 80075e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2201      	movs	r2, #1
 80075ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2201      	movs	r2, #1
 80075f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3708      	adds	r7, #8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	08007639 	.word	0x08007639

08007638 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d109      	bne.n	8007670 <HAL_TIM_PWM_Start+0x24>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b01      	cmp	r3, #1
 8007666:	bf14      	ite	ne
 8007668:	2301      	movne	r3, #1
 800766a:	2300      	moveq	r3, #0
 800766c:	b2db      	uxtb	r3, r3
 800766e:	e022      	b.n	80076b6 <HAL_TIM_PWM_Start+0x6a>
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	2b04      	cmp	r3, #4
 8007674:	d109      	bne.n	800768a <HAL_TIM_PWM_Start+0x3e>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b01      	cmp	r3, #1
 8007680:	bf14      	ite	ne
 8007682:	2301      	movne	r3, #1
 8007684:	2300      	moveq	r3, #0
 8007686:	b2db      	uxtb	r3, r3
 8007688:	e015      	b.n	80076b6 <HAL_TIM_PWM_Start+0x6a>
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	2b08      	cmp	r3, #8
 800768e:	d109      	bne.n	80076a4 <HAL_TIM_PWM_Start+0x58>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007696:	b2db      	uxtb	r3, r3
 8007698:	2b01      	cmp	r3, #1
 800769a:	bf14      	ite	ne
 800769c:	2301      	movne	r3, #1
 800769e:	2300      	moveq	r3, #0
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	e008      	b.n	80076b6 <HAL_TIM_PWM_Start+0x6a>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	bf14      	ite	ne
 80076b0:	2301      	movne	r3, #1
 80076b2:	2300      	moveq	r3, #0
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d001      	beq.n	80076be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e068      	b.n	8007790 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d104      	bne.n	80076ce <HAL_TIM_PWM_Start+0x82>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2202      	movs	r2, #2
 80076c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076cc:	e013      	b.n	80076f6 <HAL_TIM_PWM_Start+0xaa>
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2b04      	cmp	r3, #4
 80076d2:	d104      	bne.n	80076de <HAL_TIM_PWM_Start+0x92>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2202      	movs	r2, #2
 80076d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076dc:	e00b      	b.n	80076f6 <HAL_TIM_PWM_Start+0xaa>
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	2b08      	cmp	r3, #8
 80076e2:	d104      	bne.n	80076ee <HAL_TIM_PWM_Start+0xa2>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2202      	movs	r2, #2
 80076e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076ec:	e003      	b.n	80076f6 <HAL_TIM_PWM_Start+0xaa>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2202      	movs	r2, #2
 80076f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2201      	movs	r2, #1
 80076fc:	6839      	ldr	r1, [r7, #0]
 80076fe:	4618      	mov	r0, r3
 8007700:	f001 f9bc 	bl	8008a7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a23      	ldr	r2, [pc, #140]	; (8007798 <HAL_TIM_PWM_Start+0x14c>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d107      	bne.n	800771e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800771c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a1d      	ldr	r2, [pc, #116]	; (8007798 <HAL_TIM_PWM_Start+0x14c>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d018      	beq.n	800775a <HAL_TIM_PWM_Start+0x10e>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007730:	d013      	beq.n	800775a <HAL_TIM_PWM_Start+0x10e>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a19      	ldr	r2, [pc, #100]	; (800779c <HAL_TIM_PWM_Start+0x150>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d00e      	beq.n	800775a <HAL_TIM_PWM_Start+0x10e>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a17      	ldr	r2, [pc, #92]	; (80077a0 <HAL_TIM_PWM_Start+0x154>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d009      	beq.n	800775a <HAL_TIM_PWM_Start+0x10e>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a16      	ldr	r2, [pc, #88]	; (80077a4 <HAL_TIM_PWM_Start+0x158>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d004      	beq.n	800775a <HAL_TIM_PWM_Start+0x10e>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a14      	ldr	r2, [pc, #80]	; (80077a8 <HAL_TIM_PWM_Start+0x15c>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d111      	bne.n	800777e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f003 0307 	and.w	r3, r3, #7
 8007764:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2b06      	cmp	r3, #6
 800776a:	d010      	beq.n	800778e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f042 0201 	orr.w	r2, r2, #1
 800777a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800777c:	e007      	b.n	800778e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f042 0201 	orr.w	r2, r2, #1
 800778c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	40010000 	.word	0x40010000
 800779c:	40000400 	.word	0x40000400
 80077a0:	40000800 	.word	0x40000800
 80077a4:	40000c00 	.word	0x40000c00
 80077a8:	40014000 	.word	0x40014000

080077ac <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d101      	bne.n	80077c0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e04c      	b.n	800785a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d111      	bne.n	80077f0 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f001 f977 	bl	8008ac8 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d102      	bne.n	80077e8 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a1f      	ldr	r2, [pc, #124]	; (8007864 <HAL_TIM_OnePulse_Init+0xb8>)
 80077e6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2202      	movs	r2, #2
 80077f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	3304      	adds	r3, #4
 8007800:	4619      	mov	r1, r3
 8007802:	4610      	mov	r0, r2
 8007804:	f000 fe94 	bl	8008530 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f022 0208 	bic.w	r2, r2, #8
 8007816:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6819      	ldr	r1, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	430a      	orrs	r2, r1
 8007826:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	08007869 	.word	0x08007869

08007868 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800788c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007894:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800789c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80078a4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d108      	bne.n	80078be <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80078ac:	7bbb      	ldrb	r3, [r7, #14]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d105      	bne.n	80078be <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80078b2:	7b7b      	ldrb	r3, [r7, #13]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d102      	bne.n	80078be <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80078b8:	7b3b      	ldrb	r3, [r7, #12]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d001      	beq.n	80078c2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e03b      	b.n	800793a <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2202      	movs	r2, #2
 80078c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2202      	movs	r2, #2
 80078ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2202      	movs	r2, #2
 80078d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2202      	movs	r2, #2
 80078de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68da      	ldr	r2, [r3, #12]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f042 0202 	orr.w	r2, r2, #2
 80078f0:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68da      	ldr	r2, [r3, #12]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f042 0204 	orr.w	r2, r2, #4
 8007900:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2201      	movs	r2, #1
 8007908:	2100      	movs	r1, #0
 800790a:	4618      	mov	r0, r3
 800790c:	f001 f8b6 	bl	8008a7c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2201      	movs	r2, #1
 8007916:	2104      	movs	r1, #4
 8007918:	4618      	mov	r0, r3
 800791a:	f001 f8af 	bl	8008a7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a08      	ldr	r2, [pc, #32]	; (8007944 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d107      	bne.n	8007938 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007936:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	40010000 	.word	0x40010000

08007948 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d101      	bne.n	800795c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e0a2      	b.n	8007aa2 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b00      	cmp	r3, #0
 8007966:	d111      	bne.n	800798c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f001 f8a9 	bl	8008ac8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800797a:	2b00      	cmp	r3, #0
 800797c:	d102      	bne.n	8007984 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a4a      	ldr	r2, [pc, #296]	; (8007aac <HAL_TIM_Encoder_Init+0x164>)
 8007982:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	6812      	ldr	r2, [r2, #0]
 800799e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079a2:	f023 0307 	bic.w	r3, r3, #7
 80079a6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	3304      	adds	r3, #4
 80079b0:	4619      	mov	r1, r3
 80079b2:	4610      	mov	r0, r2
 80079b4:	f000 fdbc 	bl	8008530 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
 80079ce:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079e0:	f023 0303 	bic.w	r3, r3, #3
 80079e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	689a      	ldr	r2, [r3, #8]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	021b      	lsls	r3, r3, #8
 80079f0:	4313      	orrs	r3, r2
 80079f2:	693a      	ldr	r2, [r7, #16]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80079fe:	f023 030c 	bic.w	r3, r3, #12
 8007a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	68da      	ldr	r2, [r3, #12]
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	69db      	ldr	r3, [r3, #28]
 8007a18:	021b      	lsls	r3, r3, #8
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	011a      	lsls	r2, r3, #4
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	6a1b      	ldr	r3, [r3, #32]
 8007a2c:	031b      	lsls	r3, r3, #12
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007a3c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007a44:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	685a      	ldr	r2, [r3, #4]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	011b      	lsls	r3, r3, #4
 8007a50:	4313      	orrs	r3, r2
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3718      	adds	r7, #24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	08004b39 	.word	0x08004b39

08007ab0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ac0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ac8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ad0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007ad8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d110      	bne.n	8007b02 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d102      	bne.n	8007aec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ae6:	7b7b      	ldrb	r3, [r7, #13]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d001      	beq.n	8007af0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e069      	b.n	8007bc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2202      	movs	r2, #2
 8007af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2202      	movs	r2, #2
 8007afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b00:	e031      	b.n	8007b66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b04      	cmp	r3, #4
 8007b06:	d110      	bne.n	8007b2a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b08:	7bbb      	ldrb	r3, [r7, #14]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d102      	bne.n	8007b14 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b0e:	7b3b      	ldrb	r3, [r7, #12]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d001      	beq.n	8007b18 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e055      	b.n	8007bc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2202      	movs	r2, #2
 8007b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b28:	e01d      	b.n	8007b66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d108      	bne.n	8007b42 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b30:	7bbb      	ldrb	r3, [r7, #14]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d105      	bne.n	8007b42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b36:	7b7b      	ldrb	r3, [r7, #13]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d102      	bne.n	8007b42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b3c:	7b3b      	ldrb	r3, [r7, #12]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d001      	beq.n	8007b46 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e03e      	b.n	8007bc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2202      	movs	r2, #2
 8007b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2202      	movs	r2, #2
 8007b52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2202      	movs	r2, #2
 8007b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2202      	movs	r2, #2
 8007b62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d003      	beq.n	8007b74 <HAL_TIM_Encoder_Start+0xc4>
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	2b04      	cmp	r3, #4
 8007b70:	d008      	beq.n	8007b84 <HAL_TIM_Encoder_Start+0xd4>
 8007b72:	e00f      	b.n	8007b94 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 ff7d 	bl	8008a7c <TIM_CCxChannelCmd>
      break;
 8007b82:	e016      	b.n	8007bb2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	2104      	movs	r1, #4
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f000 ff75 	bl	8008a7c <TIM_CCxChannelCmd>
      break;
 8007b92:	e00e      	b.n	8007bb2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f000 ff6d 	bl	8008a7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	2104      	movs	r1, #4
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 ff66 	bl	8008a7c <TIM_CCxChannelCmd>
      break;
 8007bb0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f042 0201 	orr.w	r2, r2, #1
 8007bc0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d128      	bne.n	8007c34 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	f003 0302 	and.w	r3, r3, #2
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d121      	bne.n	8007c34 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f06f 0202 	mvn.w	r2, #2
 8007bf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	f003 0303 	and.w	r3, r3, #3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d005      	beq.n	8007c1a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	4798      	blx	r3
 8007c18:	e009      	b.n	8007c2e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	f003 0304 	and.w	r3, r3, #4
 8007c3e:	2b04      	cmp	r3, #4
 8007c40:	d128      	bne.n	8007c94 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	f003 0304 	and.w	r3, r3, #4
 8007c4c:	2b04      	cmp	r3, #4
 8007c4e:	d121      	bne.n	8007c94 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f06f 0204 	mvn.w	r2, #4
 8007c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d005      	beq.n	8007c7a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	4798      	blx	r3
 8007c78:	e009      	b.n	8007c8e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	f003 0308 	and.w	r3, r3, #8
 8007c9e:	2b08      	cmp	r3, #8
 8007ca0:	d128      	bne.n	8007cf4 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	f003 0308 	and.w	r3, r3, #8
 8007cac:	2b08      	cmp	r3, #8
 8007cae:	d121      	bne.n	8007cf4 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f06f 0208 	mvn.w	r2, #8
 8007cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2204      	movs	r2, #4
 8007cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	f003 0303 	and.w	r3, r3, #3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d005      	beq.n	8007cda <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	4798      	blx	r3
 8007cd8:	e009      	b.n	8007cee <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	f003 0310 	and.w	r3, r3, #16
 8007cfe:	2b10      	cmp	r3, #16
 8007d00:	d128      	bne.n	8007d54 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	f003 0310 	and.w	r3, r3, #16
 8007d0c:	2b10      	cmp	r3, #16
 8007d0e:	d121      	bne.n	8007d54 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f06f 0210 	mvn.w	r2, #16
 8007d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2208      	movs	r2, #8
 8007d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	69db      	ldr	r3, [r3, #28]
 8007d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d005      	beq.n	8007d3a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	4798      	blx	r3
 8007d38:	e009      	b.n	8007d4e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d110      	bne.n	8007d84 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d109      	bne.n	8007d84 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f06f 0201 	mvn.w	r2, #1
 8007d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d8e:	2b80      	cmp	r3, #128	; 0x80
 8007d90:	d110      	bne.n	8007db4 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d9c:	2b80      	cmp	r3, #128	; 0x80
 8007d9e:	d109      	bne.n	8007db4 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dbe:	2b40      	cmp	r3, #64	; 0x40
 8007dc0:	d110      	bne.n	8007de4 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dcc:	2b40      	cmp	r3, #64	; 0x40
 8007dce:	d109      	bne.n	8007de4 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	f003 0320 	and.w	r3, r3, #32
 8007dee:	2b20      	cmp	r3, #32
 8007df0:	d110      	bne.n	8007e14 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	f003 0320 	and.w	r3, r3, #32
 8007dfc:	2b20      	cmp	r3, #32
 8007dfe:	d109      	bne.n	8007e14 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f06f 0220 	mvn.w	r2, #32
 8007e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e14:	bf00      	nop
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d101      	bne.n	8007e3a <HAL_TIM_OC_ConfigChannel+0x1e>
 8007e36:	2302      	movs	r3, #2
 8007e38:	e048      	b.n	8007ecc <HAL_TIM_OC_ConfigChannel+0xb0>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b0c      	cmp	r3, #12
 8007e46:	d839      	bhi.n	8007ebc <HAL_TIM_OC_ConfigChannel+0xa0>
 8007e48:	a201      	add	r2, pc, #4	; (adr r2, 8007e50 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4e:	bf00      	nop
 8007e50:	08007e85 	.word	0x08007e85
 8007e54:	08007ebd 	.word	0x08007ebd
 8007e58:	08007ebd 	.word	0x08007ebd
 8007e5c:	08007ebd 	.word	0x08007ebd
 8007e60:	08007e93 	.word	0x08007e93
 8007e64:	08007ebd 	.word	0x08007ebd
 8007e68:	08007ebd 	.word	0x08007ebd
 8007e6c:	08007ebd 	.word	0x08007ebd
 8007e70:	08007ea1 	.word	0x08007ea1
 8007e74:	08007ebd 	.word	0x08007ebd
 8007e78:	08007ebd 	.word	0x08007ebd
 8007e7c:	08007ebd 	.word	0x08007ebd
 8007e80:	08007eaf 	.word	0x08007eaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68b9      	ldr	r1, [r7, #8]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f000 fbd0 	bl	8008630 <TIM_OC1_SetConfig>
      break;
 8007e90:	e017      	b.n	8007ec2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68b9      	ldr	r1, [r7, #8]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f000 fc2f 	bl	80086fc <TIM_OC2_SetConfig>
      break;
 8007e9e:	e010      	b.n	8007ec2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68b9      	ldr	r1, [r7, #8]
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 fc94 	bl	80087d4 <TIM_OC3_SetConfig>
      break;
 8007eac:	e009      	b.n	8007ec2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68b9      	ldr	r1, [r7, #8]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f000 fcf7 	bl	80088a8 <TIM_OC4_SetConfig>
      break;
 8007eba:	e002      	b.n	8007ec2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8007ec0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3718      	adds	r7, #24
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d101      	bne.n	8007ef2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007eee:	2302      	movs	r3, #2
 8007ef0:	e0ae      	b.n	8008050 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2b0c      	cmp	r3, #12
 8007efe:	f200 809f 	bhi.w	8008040 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007f02:	a201      	add	r2, pc, #4	; (adr r2, 8007f08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f08:	08007f3d 	.word	0x08007f3d
 8007f0c:	08008041 	.word	0x08008041
 8007f10:	08008041 	.word	0x08008041
 8007f14:	08008041 	.word	0x08008041
 8007f18:	08007f7d 	.word	0x08007f7d
 8007f1c:	08008041 	.word	0x08008041
 8007f20:	08008041 	.word	0x08008041
 8007f24:	08008041 	.word	0x08008041
 8007f28:	08007fbf 	.word	0x08007fbf
 8007f2c:	08008041 	.word	0x08008041
 8007f30:	08008041 	.word	0x08008041
 8007f34:	08008041 	.word	0x08008041
 8007f38:	08007fff 	.word	0x08007fff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68b9      	ldr	r1, [r7, #8]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f000 fb74 	bl	8008630 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	699a      	ldr	r2, [r3, #24]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f042 0208 	orr.w	r2, r2, #8
 8007f56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	699a      	ldr	r2, [r3, #24]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f022 0204 	bic.w	r2, r2, #4
 8007f66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	6999      	ldr	r1, [r3, #24]
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	691a      	ldr	r2, [r3, #16]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	430a      	orrs	r2, r1
 8007f78:	619a      	str	r2, [r3, #24]
      break;
 8007f7a:	e064      	b.n	8008046 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68b9      	ldr	r1, [r7, #8]
 8007f82:	4618      	mov	r0, r3
 8007f84:	f000 fbba 	bl	80086fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	699a      	ldr	r2, [r3, #24]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	699a      	ldr	r2, [r3, #24]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6999      	ldr	r1, [r3, #24]
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	021a      	lsls	r2, r3, #8
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	430a      	orrs	r2, r1
 8007fba:	619a      	str	r2, [r3, #24]
      break;
 8007fbc:	e043      	b.n	8008046 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68b9      	ldr	r1, [r7, #8]
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 fc05 	bl	80087d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	69da      	ldr	r2, [r3, #28]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f042 0208 	orr.w	r2, r2, #8
 8007fd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	69da      	ldr	r2, [r3, #28]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 0204 	bic.w	r2, r2, #4
 8007fe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	69d9      	ldr	r1, [r3, #28]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	691a      	ldr	r2, [r3, #16]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	430a      	orrs	r2, r1
 8007ffa:	61da      	str	r2, [r3, #28]
      break;
 8007ffc:	e023      	b.n	8008046 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68b9      	ldr	r1, [r7, #8]
 8008004:	4618      	mov	r0, r3
 8008006:	f000 fc4f 	bl	80088a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	69da      	ldr	r2, [r3, #28]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	69da      	ldr	r2, [r3, #28]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	69d9      	ldr	r1, [r3, #28]
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	021a      	lsls	r2, r3, #8
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	430a      	orrs	r2, r1
 800803c:	61da      	str	r2, [r3, #28]
      break;
 800803e:	e002      	b.n	8008046 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	75fb      	strb	r3, [r7, #23]
      break;
 8008044:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800804e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3718      	adds	r7, #24
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800806c:	2b01      	cmp	r3, #1
 800806e:	d101      	bne.n	8008074 <HAL_TIM_ConfigClockSource+0x1c>
 8008070:	2302      	movs	r3, #2
 8008072:	e0b4      	b.n	80081de <HAL_TIM_ConfigClockSource+0x186>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2202      	movs	r2, #2
 8008080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008092:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800809a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080ac:	d03e      	beq.n	800812c <HAL_TIM_ConfigClockSource+0xd4>
 80080ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080b2:	f200 8087 	bhi.w	80081c4 <HAL_TIM_ConfigClockSource+0x16c>
 80080b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ba:	f000 8086 	beq.w	80081ca <HAL_TIM_ConfigClockSource+0x172>
 80080be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080c2:	d87f      	bhi.n	80081c4 <HAL_TIM_ConfigClockSource+0x16c>
 80080c4:	2b70      	cmp	r3, #112	; 0x70
 80080c6:	d01a      	beq.n	80080fe <HAL_TIM_ConfigClockSource+0xa6>
 80080c8:	2b70      	cmp	r3, #112	; 0x70
 80080ca:	d87b      	bhi.n	80081c4 <HAL_TIM_ConfigClockSource+0x16c>
 80080cc:	2b60      	cmp	r3, #96	; 0x60
 80080ce:	d050      	beq.n	8008172 <HAL_TIM_ConfigClockSource+0x11a>
 80080d0:	2b60      	cmp	r3, #96	; 0x60
 80080d2:	d877      	bhi.n	80081c4 <HAL_TIM_ConfigClockSource+0x16c>
 80080d4:	2b50      	cmp	r3, #80	; 0x50
 80080d6:	d03c      	beq.n	8008152 <HAL_TIM_ConfigClockSource+0xfa>
 80080d8:	2b50      	cmp	r3, #80	; 0x50
 80080da:	d873      	bhi.n	80081c4 <HAL_TIM_ConfigClockSource+0x16c>
 80080dc:	2b40      	cmp	r3, #64	; 0x40
 80080de:	d058      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0x13a>
 80080e0:	2b40      	cmp	r3, #64	; 0x40
 80080e2:	d86f      	bhi.n	80081c4 <HAL_TIM_ConfigClockSource+0x16c>
 80080e4:	2b30      	cmp	r3, #48	; 0x30
 80080e6:	d064      	beq.n	80081b2 <HAL_TIM_ConfigClockSource+0x15a>
 80080e8:	2b30      	cmp	r3, #48	; 0x30
 80080ea:	d86b      	bhi.n	80081c4 <HAL_TIM_ConfigClockSource+0x16c>
 80080ec:	2b20      	cmp	r3, #32
 80080ee:	d060      	beq.n	80081b2 <HAL_TIM_ConfigClockSource+0x15a>
 80080f0:	2b20      	cmp	r3, #32
 80080f2:	d867      	bhi.n	80081c4 <HAL_TIM_ConfigClockSource+0x16c>
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d05c      	beq.n	80081b2 <HAL_TIM_ConfigClockSource+0x15a>
 80080f8:	2b10      	cmp	r3, #16
 80080fa:	d05a      	beq.n	80081b2 <HAL_TIM_ConfigClockSource+0x15a>
 80080fc:	e062      	b.n	80081c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6818      	ldr	r0, [r3, #0]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	6899      	ldr	r1, [r3, #8]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	685a      	ldr	r2, [r3, #4]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	f000 fc95 	bl	8008a3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008120:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68ba      	ldr	r2, [r7, #8]
 8008128:	609a      	str	r2, [r3, #8]
      break;
 800812a:	e04f      	b.n	80081cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6818      	ldr	r0, [r3, #0]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	6899      	ldr	r1, [r3, #8]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	685a      	ldr	r2, [r3, #4]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	f000 fc7e 	bl	8008a3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	689a      	ldr	r2, [r3, #8]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800814e:	609a      	str	r2, [r3, #8]
      break;
 8008150:	e03c      	b.n	80081cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6818      	ldr	r0, [r3, #0]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	6859      	ldr	r1, [r3, #4]
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	461a      	mov	r2, r3
 8008160:	f000 fbf2 	bl	8008948 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2150      	movs	r1, #80	; 0x50
 800816a:	4618      	mov	r0, r3
 800816c:	f000 fc4b 	bl	8008a06 <TIM_ITRx_SetConfig>
      break;
 8008170:	e02c      	b.n	80081cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6818      	ldr	r0, [r3, #0]
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	6859      	ldr	r1, [r3, #4]
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	461a      	mov	r2, r3
 8008180:	f000 fc11 	bl	80089a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2160      	movs	r1, #96	; 0x60
 800818a:	4618      	mov	r0, r3
 800818c:	f000 fc3b 	bl	8008a06 <TIM_ITRx_SetConfig>
      break;
 8008190:	e01c      	b.n	80081cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6818      	ldr	r0, [r3, #0]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	6859      	ldr	r1, [r3, #4]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	461a      	mov	r2, r3
 80081a0:	f000 fbd2 	bl	8008948 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2140      	movs	r1, #64	; 0x40
 80081aa:	4618      	mov	r0, r3
 80081ac:	f000 fc2b 	bl	8008a06 <TIM_ITRx_SetConfig>
      break;
 80081b0:	e00c      	b.n	80081cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4619      	mov	r1, r3
 80081bc:	4610      	mov	r0, r2
 80081be:	f000 fc22 	bl	8008a06 <TIM_ITRx_SetConfig>
      break;
 80081c2:	e003      	b.n	80081cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	73fb      	strb	r3, [r7, #15]
      break;
 80081c8:	e000      	b.n	80081cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80081ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b083      	sub	sp, #12
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80081ee:	bf00      	nop
 80081f0:	370c      	adds	r7, #12
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081fa:	b480      	push	{r7}
 80081fc:	b083      	sub	sp, #12
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008202:	bf00      	nop
 8008204:	370c      	adds	r7, #12
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800820e:	b480      	push	{r7}
 8008210:	b083      	sub	sp, #12
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008216:	bf00      	nop
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008222:	b480      	push	{r7}
 8008224:	b083      	sub	sp, #12
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800822a:	bf00      	nop
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008236:	b480      	push	{r7}
 8008238:	b083      	sub	sp, #12
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800823e:	bf00      	nop
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800824a:	b480      	push	{r7}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008252:	bf00      	nop
 8008254:	370c      	adds	r7, #12
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr

0800825e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800825e:	b480      	push	{r7}
 8008260:	b083      	sub	sp, #12
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008266:	bf00      	nop
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008272:	b480      	push	{r7}
 8008274:	b083      	sub	sp, #12
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800827a:	bf00      	nop
 800827c:	370c      	adds	r7, #12
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr

08008286 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008286:	b480      	push	{r7}
 8008288:	b083      	sub	sp, #12
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800828e:	bf00      	nop
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
	...

0800829c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800829c:	b480      	push	{r7}
 800829e:	b087      	sub	sp, #28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	460b      	mov	r3, r1
 80082a6:	607a      	str	r2, [r7, #4]
 80082a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e135      	b.n	8008524 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d101      	bne.n	80082c6 <HAL_TIM_RegisterCallback+0x2a>
 80082c2:	2302      	movs	r3, #2
 80082c4:	e12e      	b.n	8008524 <HAL_TIM_RegisterCallback+0x288>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	f040 80ba 	bne.w	8008450 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 80082dc:	7afb      	ldrb	r3, [r7, #11]
 80082de:	2b1a      	cmp	r3, #26
 80082e0:	f200 80b3 	bhi.w	800844a <HAL_TIM_RegisterCallback+0x1ae>
 80082e4:	a201      	add	r2, pc, #4	; (adr r2, 80082ec <HAL_TIM_RegisterCallback+0x50>)
 80082e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ea:	bf00      	nop
 80082ec:	08008359 	.word	0x08008359
 80082f0:	08008361 	.word	0x08008361
 80082f4:	08008369 	.word	0x08008369
 80082f8:	08008371 	.word	0x08008371
 80082fc:	08008379 	.word	0x08008379
 8008300:	08008381 	.word	0x08008381
 8008304:	08008389 	.word	0x08008389
 8008308:	08008391 	.word	0x08008391
 800830c:	08008399 	.word	0x08008399
 8008310:	080083a1 	.word	0x080083a1
 8008314:	080083a9 	.word	0x080083a9
 8008318:	080083b1 	.word	0x080083b1
 800831c:	080083b9 	.word	0x080083b9
 8008320:	080083c1 	.word	0x080083c1
 8008324:	080083c9 	.word	0x080083c9
 8008328:	080083d3 	.word	0x080083d3
 800832c:	080083dd 	.word	0x080083dd
 8008330:	080083e7 	.word	0x080083e7
 8008334:	080083f1 	.word	0x080083f1
 8008338:	080083fb 	.word	0x080083fb
 800833c:	08008405 	.word	0x08008405
 8008340:	0800840f 	.word	0x0800840f
 8008344:	08008419 	.word	0x08008419
 8008348:	08008423 	.word	0x08008423
 800834c:	0800842d 	.word	0x0800842d
 8008350:	08008437 	.word	0x08008437
 8008354:	08008441 	.word	0x08008441
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800835e:	e0dc      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8008366:	e0d8      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800836e:	e0d4      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8008376:	e0d0      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800837e:	e0cc      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8008386:	e0c8      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800838e:	e0c4      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8008396:	e0c0      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800839e:	e0bc      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80083a6:	e0b8      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80083ae:	e0b4      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80083b6:	e0b0      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80083be:	e0ac      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80083c6:	e0a8      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 80083d0:	e0a3      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 80083da:	e09e      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 80083e4:	e099      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 80083ee:	e094      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 80083f8:	e08f      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8008402:	e08a      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800840c:	e085      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8008416:	e080      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8008420:	e07b      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800842a:	e076      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8008434:	e071      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800843e:	e06c      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8008448:	e067      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	75fb      	strb	r3, [r7, #23]
        break;
 800844e:	e064      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008456:	b2db      	uxtb	r3, r3
 8008458:	2b00      	cmp	r3, #0
 800845a:	d15c      	bne.n	8008516 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 800845c:	7afb      	ldrb	r3, [r7, #11]
 800845e:	2b0d      	cmp	r3, #13
 8008460:	d856      	bhi.n	8008510 <HAL_TIM_RegisterCallback+0x274>
 8008462:	a201      	add	r2, pc, #4	; (adr r2, 8008468 <HAL_TIM_RegisterCallback+0x1cc>)
 8008464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008468:	080084a1 	.word	0x080084a1
 800846c:	080084a9 	.word	0x080084a9
 8008470:	080084b1 	.word	0x080084b1
 8008474:	080084b9 	.word	0x080084b9
 8008478:	080084c1 	.word	0x080084c1
 800847c:	080084c9 	.word	0x080084c9
 8008480:	080084d1 	.word	0x080084d1
 8008484:	080084d9 	.word	0x080084d9
 8008488:	080084e1 	.word	0x080084e1
 800848c:	080084e9 	.word	0x080084e9
 8008490:	080084f1 	.word	0x080084f1
 8008494:	080084f9 	.word	0x080084f9
 8008498:	08008501 	.word	0x08008501
 800849c:	08008509 	.word	0x08008509
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80084a6:	e038      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80084ae:	e034      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80084b6:	e030      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80084be:	e02c      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80084c6:	e028      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80084ce:	e024      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80084d6:	e020      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80084de:	e01c      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80084e6:	e018      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80084ee:	e014      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80084f6:	e010      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80084fe:	e00c      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8008506:	e008      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800850e:	e004      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	75fb      	strb	r3, [r7, #23]
        break;
 8008514:	e001      	b.n	800851a <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008522:	7dfb      	ldrb	r3, [r7, #23]
}
 8008524:	4618      	mov	r0, r3
 8008526:	371c      	adds	r7, #28
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a34      	ldr	r2, [pc, #208]	; (8008614 <TIM_Base_SetConfig+0xe4>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d00f      	beq.n	8008568 <TIM_Base_SetConfig+0x38>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800854e:	d00b      	beq.n	8008568 <TIM_Base_SetConfig+0x38>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a31      	ldr	r2, [pc, #196]	; (8008618 <TIM_Base_SetConfig+0xe8>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d007      	beq.n	8008568 <TIM_Base_SetConfig+0x38>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a30      	ldr	r2, [pc, #192]	; (800861c <TIM_Base_SetConfig+0xec>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d003      	beq.n	8008568 <TIM_Base_SetConfig+0x38>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a2f      	ldr	r2, [pc, #188]	; (8008620 <TIM_Base_SetConfig+0xf0>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d108      	bne.n	800857a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800856e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	4313      	orrs	r3, r2
 8008578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a25      	ldr	r2, [pc, #148]	; (8008614 <TIM_Base_SetConfig+0xe4>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d01b      	beq.n	80085ba <TIM_Base_SetConfig+0x8a>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008588:	d017      	beq.n	80085ba <TIM_Base_SetConfig+0x8a>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a22      	ldr	r2, [pc, #136]	; (8008618 <TIM_Base_SetConfig+0xe8>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d013      	beq.n	80085ba <TIM_Base_SetConfig+0x8a>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a21      	ldr	r2, [pc, #132]	; (800861c <TIM_Base_SetConfig+0xec>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d00f      	beq.n	80085ba <TIM_Base_SetConfig+0x8a>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a20      	ldr	r2, [pc, #128]	; (8008620 <TIM_Base_SetConfig+0xf0>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d00b      	beq.n	80085ba <TIM_Base_SetConfig+0x8a>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a1f      	ldr	r2, [pc, #124]	; (8008624 <TIM_Base_SetConfig+0xf4>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d007      	beq.n	80085ba <TIM_Base_SetConfig+0x8a>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a1e      	ldr	r2, [pc, #120]	; (8008628 <TIM_Base_SetConfig+0xf8>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d003      	beq.n	80085ba <TIM_Base_SetConfig+0x8a>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a1d      	ldr	r2, [pc, #116]	; (800862c <TIM_Base_SetConfig+0xfc>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d108      	bne.n	80085cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	689a      	ldr	r2, [r3, #8]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a08      	ldr	r2, [pc, #32]	; (8008614 <TIM_Base_SetConfig+0xe4>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d103      	bne.n	8008600 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	691a      	ldr	r2, [r3, #16]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	615a      	str	r2, [r3, #20]
}
 8008606:	bf00      	nop
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	40010000 	.word	0x40010000
 8008618:	40000400 	.word	0x40000400
 800861c:	40000800 	.word	0x40000800
 8008620:	40000c00 	.word	0x40000c00
 8008624:	40014000 	.word	0x40014000
 8008628:	40014400 	.word	0x40014400
 800862c:	40014800 	.word	0x40014800

08008630 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008630:	b480      	push	{r7}
 8008632:	b087      	sub	sp, #28
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a1b      	ldr	r3, [r3, #32]
 800863e:	f023 0201 	bic.w	r2, r3, #1
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a1b      	ldr	r3, [r3, #32]
 800864a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800865e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f023 0303 	bic.w	r3, r3, #3
 8008666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	4313      	orrs	r3, r2
 8008670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	f023 0302 	bic.w	r3, r3, #2
 8008678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	4313      	orrs	r3, r2
 8008682:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a1c      	ldr	r2, [pc, #112]	; (80086f8 <TIM_OC1_SetConfig+0xc8>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d10c      	bne.n	80086a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	f023 0308 	bic.w	r3, r3, #8
 8008692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	697a      	ldr	r2, [r7, #20]
 800869a:	4313      	orrs	r3, r2
 800869c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	f023 0304 	bic.w	r3, r3, #4
 80086a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a13      	ldr	r2, [pc, #76]	; (80086f8 <TIM_OC1_SetConfig+0xc8>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d111      	bne.n	80086d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	695b      	ldr	r3, [r3, #20]
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	693a      	ldr	r2, [r7, #16]
 80086d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	685a      	ldr	r2, [r3, #4]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	621a      	str	r2, [r3, #32]
}
 80086ec:	bf00      	nop
 80086ee:	371c      	adds	r7, #28
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr
 80086f8:	40010000 	.word	0x40010000

080086fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b087      	sub	sp, #28
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a1b      	ldr	r3, [r3, #32]
 800870a:	f023 0210 	bic.w	r2, r3, #16
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a1b      	ldr	r3, [r3, #32]
 8008716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800872a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	021b      	lsls	r3, r3, #8
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	4313      	orrs	r3, r2
 800873e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	f023 0320 	bic.w	r3, r3, #32
 8008746:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	011b      	lsls	r3, r3, #4
 800874e:	697a      	ldr	r2, [r7, #20]
 8008750:	4313      	orrs	r3, r2
 8008752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a1e      	ldr	r2, [pc, #120]	; (80087d0 <TIM_OC2_SetConfig+0xd4>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d10d      	bne.n	8008778 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	011b      	lsls	r3, r3, #4
 800876a:	697a      	ldr	r2, [r7, #20]
 800876c:	4313      	orrs	r3, r2
 800876e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008776:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a15      	ldr	r2, [pc, #84]	; (80087d0 <TIM_OC2_SetConfig+0xd4>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d113      	bne.n	80087a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008786:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800878e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	695b      	ldr	r3, [r3, #20]
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	693a      	ldr	r2, [r7, #16]
 8008798:	4313      	orrs	r3, r2
 800879a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	693a      	ldr	r2, [r7, #16]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	685a      	ldr	r2, [r3, #4]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	621a      	str	r2, [r3, #32]
}
 80087c2:	bf00      	nop
 80087c4:	371c      	adds	r7, #28
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	40010000 	.word	0x40010000

080087d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b087      	sub	sp, #28
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	69db      	ldr	r3, [r3, #28]
 80087fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f023 0303 	bic.w	r3, r3, #3
 800880a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	4313      	orrs	r3, r2
 8008814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800881c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	021b      	lsls	r3, r3, #8
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	4313      	orrs	r3, r2
 8008828:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a1d      	ldr	r2, [pc, #116]	; (80088a4 <TIM_OC3_SetConfig+0xd0>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d10d      	bne.n	800884e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008838:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	021b      	lsls	r3, r3, #8
 8008840:	697a      	ldr	r2, [r7, #20]
 8008842:	4313      	orrs	r3, r2
 8008844:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800884c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a14      	ldr	r2, [pc, #80]	; (80088a4 <TIM_OC3_SetConfig+0xd0>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d113      	bne.n	800887e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800885c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008864:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	695b      	ldr	r3, [r3, #20]
 800886a:	011b      	lsls	r3, r3, #4
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	4313      	orrs	r3, r2
 8008870:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	699b      	ldr	r3, [r3, #24]
 8008876:	011b      	lsls	r3, r3, #4
 8008878:	693a      	ldr	r2, [r7, #16]
 800887a:	4313      	orrs	r3, r2
 800887c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	693a      	ldr	r2, [r7, #16]
 8008882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	68fa      	ldr	r2, [r7, #12]
 8008888:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	685a      	ldr	r2, [r3, #4]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	697a      	ldr	r2, [r7, #20]
 8008896:	621a      	str	r2, [r3, #32]
}
 8008898:	bf00      	nop
 800889a:	371c      	adds	r7, #28
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr
 80088a4:	40010000 	.word	0x40010000

080088a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b087      	sub	sp, #28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a1b      	ldr	r3, [r3, #32]
 80088b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	69db      	ldr	r3, [r3, #28]
 80088ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	021b      	lsls	r3, r3, #8
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	031b      	lsls	r3, r3, #12
 80088fa:	693a      	ldr	r2, [r7, #16]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a10      	ldr	r2, [pc, #64]	; (8008944 <TIM_OC4_SetConfig+0x9c>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d109      	bne.n	800891c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800890e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	695b      	ldr	r3, [r3, #20]
 8008914:	019b      	lsls	r3, r3, #6
 8008916:	697a      	ldr	r2, [r7, #20]
 8008918:	4313      	orrs	r3, r2
 800891a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	697a      	ldr	r2, [r7, #20]
 8008920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	685a      	ldr	r2, [r3, #4]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	621a      	str	r2, [r3, #32]
}
 8008936:	bf00      	nop
 8008938:	371c      	adds	r7, #28
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	40010000 	.word	0x40010000

08008948 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008948:	b480      	push	{r7}
 800894a:	b087      	sub	sp, #28
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6a1b      	ldr	r3, [r3, #32]
 8008958:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	f023 0201 	bic.w	r2, r3, #1
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	011b      	lsls	r3, r3, #4
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	4313      	orrs	r3, r2
 800897c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	f023 030a 	bic.w	r3, r3, #10
 8008984:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	4313      	orrs	r3, r2
 800898c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	693a      	ldr	r2, [r7, #16]
 8008992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	697a      	ldr	r2, [r7, #20]
 8008998:	621a      	str	r2, [r3, #32]
}
 800899a:	bf00      	nop
 800899c:	371c      	adds	r7, #28
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089a6:	b480      	push	{r7}
 80089a8:	b087      	sub	sp, #28
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	60f8      	str	r0, [r7, #12]
 80089ae:	60b9      	str	r1, [r7, #8]
 80089b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	f023 0210 	bic.w	r2, r3, #16
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6a1b      	ldr	r3, [r3, #32]
 80089c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	031b      	lsls	r3, r3, #12
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	4313      	orrs	r3, r2
 80089da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80089e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	011b      	lsls	r3, r3, #4
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	693a      	ldr	r2, [r7, #16]
 80089f8:	621a      	str	r2, [r3, #32]
}
 80089fa:	bf00      	nop
 80089fc:	371c      	adds	r7, #28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a06:	b480      	push	{r7}
 8008a08:	b085      	sub	sp, #20
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
 8008a0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	f043 0307 	orr.w	r3, r3, #7
 8008a28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	609a      	str	r2, [r3, #8]
}
 8008a30:	bf00      	nop
 8008a32:	3714      	adds	r7, #20
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b087      	sub	sp, #28
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	607a      	str	r2, [r7, #4]
 8008a48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	021a      	lsls	r2, r3, #8
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	431a      	orrs	r2, r3
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	609a      	str	r2, [r3, #8]
}
 8008a70:	bf00      	nop
 8008a72:	371c      	adds	r7, #28
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b087      	sub	sp, #28
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	f003 031f 	and.w	r3, r3, #31
 8008a8e:	2201      	movs	r2, #1
 8008a90:	fa02 f303 	lsl.w	r3, r2, r3
 8008a94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6a1a      	ldr	r2, [r3, #32]
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	43db      	mvns	r3, r3
 8008a9e:	401a      	ands	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6a1a      	ldr	r2, [r3, #32]
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	f003 031f 	and.w	r3, r3, #31
 8008aae:	6879      	ldr	r1, [r7, #4]
 8008ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ab4:	431a      	orrs	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	621a      	str	r2, [r3, #32]
}
 8008aba:	bf00      	nop
 8008abc:	371c      	adds	r7, #28
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr
	...

08008ac8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a1c      	ldr	r2, [pc, #112]	; (8008b44 <TIM_ResetCallback+0x7c>)
 8008ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a1b      	ldr	r2, [pc, #108]	; (8008b48 <TIM_ResetCallback+0x80>)
 8008adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4a1a      	ldr	r2, [pc, #104]	; (8008b4c <TIM_ResetCallback+0x84>)
 8008ae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	4a19      	ldr	r2, [pc, #100]	; (8008b50 <TIM_ResetCallback+0x88>)
 8008aec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a18      	ldr	r2, [pc, #96]	; (8008b54 <TIM_ResetCallback+0x8c>)
 8008af4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a17      	ldr	r2, [pc, #92]	; (8008b58 <TIM_ResetCallback+0x90>)
 8008afc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a16      	ldr	r2, [pc, #88]	; (8008b5c <TIM_ResetCallback+0x94>)
 8008b04:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a15      	ldr	r2, [pc, #84]	; (8008b60 <TIM_ResetCallback+0x98>)
 8008b0c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a14      	ldr	r2, [pc, #80]	; (8008b64 <TIM_ResetCallback+0x9c>)
 8008b14:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a13      	ldr	r2, [pc, #76]	; (8008b68 <TIM_ResetCallback+0xa0>)
 8008b1c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a12      	ldr	r2, [pc, #72]	; (8008b6c <TIM_ResetCallback+0xa4>)
 8008b24:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a11      	ldr	r2, [pc, #68]	; (8008b70 <TIM_ResetCallback+0xa8>)
 8008b2c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a10      	ldr	r2, [pc, #64]	; (8008b74 <TIM_ResetCallback+0xac>)
 8008b34:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8008b38:	bf00      	nop
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr
 8008b44:	08004739 	.word	0x08004739
 8008b48:	080081e7 	.word	0x080081e7
 8008b4c:	0800825f 	.word	0x0800825f
 8008b50:	08008273 	.word	0x08008273
 8008b54:	0800820f 	.word	0x0800820f
 8008b58:	08008223 	.word	0x08008223
 8008b5c:	080081fb 	.word	0x080081fb
 8008b60:	08008237 	.word	0x08008237
 8008b64:	0800824b 	.word	0x0800824b
 8008b68:	08008287 	.word	0x08008287
 8008b6c:	08008c55 	.word	0x08008c55
 8008b70:	08008c69 	.word	0x08008c69
 8008b74:	08008c7d 	.word	0x08008c7d

08008b78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d101      	bne.n	8008b90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	e050      	b.n	8008c32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2202      	movs	r2, #2
 8008b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a1c      	ldr	r2, [pc, #112]	; (8008c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d018      	beq.n	8008c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bdc:	d013      	beq.n	8008c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a18      	ldr	r2, [pc, #96]	; (8008c44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d00e      	beq.n	8008c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a16      	ldr	r2, [pc, #88]	; (8008c48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d009      	beq.n	8008c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a15      	ldr	r2, [pc, #84]	; (8008c4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d004      	beq.n	8008c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a13      	ldr	r2, [pc, #76]	; (8008c50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d10c      	bne.n	8008c20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3714      	adds	r7, #20
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	40010000 	.word	0x40010000
 8008c44:	40000400 	.word	0x40000400
 8008c48:	40000800 	.word	0x40000800
 8008c4c:	40000c00 	.word	0x40000c00
 8008c50:	40014000 	.word	0x40014000

08008c54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c5c:	bf00      	nop
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d101      	bne.n	8008ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e04a      	b.n	8008d38 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d111      	bne.n	8008cd2 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fd2c 	bl	8009714 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d102      	bne.n	8008cca <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a1e      	ldr	r2, [pc, #120]	; (8008d40 <HAL_UART_Init+0xb0>)
 8008cc8:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2224      	movs	r2, #36	; 0x24
 8008cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68da      	ldr	r2, [r3, #12]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ce8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fff6 	bl	8009cdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	691a      	ldr	r2, [r3, #16]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008cfe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	695a      	ldr	r2, [r3, #20]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d0e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68da      	ldr	r2, [r3, #12]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d1e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2220      	movs	r2, #32
 8008d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2220      	movs	r2, #32
 8008d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	08004d2d 	.word	0x08004d2d

08008d44 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	607a      	str	r2, [r7, #4]
 8008d50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d107      	bne.n	8008d6c <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d60:	f043 0220 	orr.w	r2, r3, #32
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e08c      	b.n	8008e86 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d101      	bne.n	8008d7a <HAL_UART_RegisterCallback+0x36>
 8008d76:	2302      	movs	r3, #2
 8008d78:	e085      	b.n	8008e86 <HAL_UART_RegisterCallback+0x142>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	2b20      	cmp	r3, #32
 8008d8c:	d151      	bne.n	8008e32 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8008d8e:	7afb      	ldrb	r3, [r7, #11]
 8008d90:	2b0c      	cmp	r3, #12
 8008d92:	d845      	bhi.n	8008e20 <HAL_UART_RegisterCallback+0xdc>
 8008d94:	a201      	add	r2, pc, #4	; (adr r2, 8008d9c <HAL_UART_RegisterCallback+0x58>)
 8008d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d9a:	bf00      	nop
 8008d9c:	08008dd1 	.word	0x08008dd1
 8008da0:	08008dd9 	.word	0x08008dd9
 8008da4:	08008de1 	.word	0x08008de1
 8008da8:	08008de9 	.word	0x08008de9
 8008dac:	08008df1 	.word	0x08008df1
 8008db0:	08008df9 	.word	0x08008df9
 8008db4:	08008e01 	.word	0x08008e01
 8008db8:	08008e09 	.word	0x08008e09
 8008dbc:	08008e21 	.word	0x08008e21
 8008dc0:	08008e21 	.word	0x08008e21
 8008dc4:	08008e21 	.word	0x08008e21
 8008dc8:	08008e11 	.word	0x08008e11
 8008dcc:	08008e19 	.word	0x08008e19
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8008dd6:	e051      	b.n	8008e7c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8008dde:	e04d      	b.n	8008e7c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8008de6:	e049      	b.n	8008e7c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8008dee:	e045      	b.n	8008e7c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8008df6:	e041      	b.n	8008e7c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8008dfe:	e03d      	b.n	8008e7c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8008e06:	e039      	b.n	8008e7c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8008e0e:	e035      	b.n	8008e7c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008e16:	e031      	b.n	8008e7c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008e1e:	e02d      	b.n	8008e7c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e24:	f043 0220 	orr.w	r2, r3, #32
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	75fb      	strb	r3, [r7, #23]
        break;
 8008e30:	e024      	b.n	8008e7c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d116      	bne.n	8008e6c <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8008e3e:	7afb      	ldrb	r3, [r7, #11]
 8008e40:	2b0b      	cmp	r3, #11
 8008e42:	d002      	beq.n	8008e4a <HAL_UART_RegisterCallback+0x106>
 8008e44:	2b0c      	cmp	r3, #12
 8008e46:	d004      	beq.n	8008e52 <HAL_UART_RegisterCallback+0x10e>
 8008e48:	e007      	b.n	8008e5a <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008e50:	e014      	b.n	8008e7c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008e58:	e010      	b.n	8008e7c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5e:	f043 0220 	orr.w	r2, r3, #32
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	75fb      	strb	r3, [r7, #23]
        break;
 8008e6a:	e007      	b.n	8008e7c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e70:	f043 0220 	orr.w	r2, r3, #32
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	371c      	adds	r7, #28
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop

08008e94 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	2b20      	cmp	r3, #32
 8008eac:	d11d      	bne.n	8008eea <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d002      	beq.n	8008eba <HAL_UART_Receive_IT+0x26>
 8008eb4:	88fb      	ldrh	r3, [r7, #6]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d101      	bne.n	8008ebe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e016      	b.n	8008eec <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d101      	bne.n	8008ecc <HAL_UART_Receive_IT+0x38>
 8008ec8:	2302      	movs	r3, #2
 8008eca:	e00f      	b.n	8008eec <HAL_UART_Receive_IT+0x58>
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008eda:	88fb      	ldrh	r3, [r7, #6]
 8008edc:	461a      	mov	r2, r3
 8008ede:	68b9      	ldr	r1, [r7, #8]
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f000 fcf7 	bl	80098d4 <UART_Start_Receive_IT>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	e000      	b.n	8008eec <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008eea:	2302      	movs	r3, #2
  }
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b08c      	sub	sp, #48	; 0x30
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	4613      	mov	r3, r2
 8008f00:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	2b20      	cmp	r3, #32
 8008f0c:	d165      	bne.n	8008fda <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d002      	beq.n	8008f1a <HAL_UART_Transmit_DMA+0x26>
 8008f14:	88fb      	ldrh	r3, [r7, #6]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d101      	bne.n	8008f1e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e05e      	b.n	8008fdc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d101      	bne.n	8008f2c <HAL_UART_Transmit_DMA+0x38>
 8008f28:	2302      	movs	r3, #2
 8008f2a:	e057      	b.n	8008fdc <HAL_UART_Transmit_DMA+0xe8>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008f34:	68ba      	ldr	r2, [r7, #8]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	88fa      	ldrh	r2, [r7, #6]
 8008f3e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	88fa      	ldrh	r2, [r7, #6]
 8008f44:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2221      	movs	r2, #33	; 0x21
 8008f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f58:	4a22      	ldr	r2, [pc, #136]	; (8008fe4 <HAL_UART_Transmit_DMA+0xf0>)
 8008f5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f60:	4a21      	ldr	r2, [pc, #132]	; (8008fe8 <HAL_UART_Transmit_DMA+0xf4>)
 8008f62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f68:	4a20      	ldr	r2, [pc, #128]	; (8008fec <HAL_UART_Transmit_DMA+0xf8>)
 8008f6a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f70:	2200      	movs	r2, #0
 8008f72:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008f74:	f107 0308 	add.w	r3, r7, #8
 8008f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f80:	6819      	ldr	r1, [r3, #0]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	3304      	adds	r3, #4
 8008f88:	461a      	mov	r2, r3
 8008f8a:	88fb      	ldrh	r3, [r7, #6]
 8008f8c:	f7fc fe64 	bl	8005c58 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f98:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	3314      	adds	r3, #20
 8008fa8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	e853 3f00 	ldrex	r3, [r3]
 8008fb0:	617b      	str	r3, [r7, #20]
   return(result);
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	3314      	adds	r3, #20
 8008fc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fc2:	627a      	str	r2, [r7, #36]	; 0x24
 8008fc4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc6:	6a39      	ldr	r1, [r7, #32]
 8008fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fca:	e841 2300 	strex	r3, r2, [r1]
 8008fce:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1e5      	bne.n	8008fa2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	e000      	b.n	8008fdc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008fda:	2302      	movs	r3, #2
  }
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3730      	adds	r7, #48	; 0x30
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	08009785 	.word	0x08009785
 8008fe8:	08009821 	.word	0x08009821
 8008fec:	0800983f 	.word	0x0800983f

08008ff0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b09a      	sub	sp, #104	; 0x68
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	330c      	adds	r3, #12
 8008ffe:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009002:	e853 3f00 	ldrex	r3, [r3]
 8009006:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800900a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800900e:	667b      	str	r3, [r7, #100]	; 0x64
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	330c      	adds	r3, #12
 8009016:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009018:	657a      	str	r2, [r7, #84]	; 0x54
 800901a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800901e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009020:	e841 2300 	strex	r3, r2, [r1]
 8009024:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1e5      	bne.n	8008ff8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3314      	adds	r3, #20
 8009032:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009036:	e853 3f00 	ldrex	r3, [r3]
 800903a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800903c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903e:	f023 0301 	bic.w	r3, r3, #1
 8009042:	663b      	str	r3, [r7, #96]	; 0x60
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	3314      	adds	r3, #20
 800904a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800904c:	643a      	str	r2, [r7, #64]	; 0x40
 800904e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009050:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009052:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009054:	e841 2300 	strex	r3, r2, [r1]
 8009058:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800905a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905c:	2b00      	cmp	r3, #0
 800905e:	d1e5      	bne.n	800902c <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009064:	2b01      	cmp	r3, #1
 8009066:	d119      	bne.n	800909c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	330c      	adds	r3, #12
 800906e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009070:	6a3b      	ldr	r3, [r7, #32]
 8009072:	e853 3f00 	ldrex	r3, [r3]
 8009076:	61fb      	str	r3, [r7, #28]
   return(result);
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	f023 0310 	bic.w	r3, r3, #16
 800907e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	330c      	adds	r3, #12
 8009086:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009088:	62fa      	str	r2, [r7, #44]	; 0x2c
 800908a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800908e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009090:	e841 2300 	strex	r3, r2, [r1]
 8009094:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1e5      	bne.n	8009068 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a6:	2b40      	cmp	r3, #64	; 0x40
 80090a8:	d136      	bne.n	8009118 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	3314      	adds	r3, #20
 80090b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	e853 3f00 	ldrex	r3, [r3]
 80090b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	3314      	adds	r3, #20
 80090c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090ca:	61ba      	str	r2, [r7, #24]
 80090cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ce:	6979      	ldr	r1, [r7, #20]
 80090d0:	69ba      	ldr	r2, [r7, #24]
 80090d2:	e841 2300 	strex	r3, r2, [r1]
 80090d6:	613b      	str	r3, [r7, #16]
   return(result);
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1e5      	bne.n	80090aa <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d018      	beq.n	8009118 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ea:	2200      	movs	r2, #0
 80090ec:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fc fe08 	bl	8005d08 <HAL_DMA_Abort>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00c      	beq.n	8009118 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009102:	4618      	mov	r0, r3
 8009104:	f7fd f81c 	bl	8006140 <HAL_DMA_GetError>
 8009108:	4603      	mov	r3, r0
 800910a:	2b20      	cmp	r3, #32
 800910c:	d104      	bne.n	8009118 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2210      	movs	r2, #16
 8009112:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	e00a      	b.n	800912e <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2220      	movs	r2, #32
 8009122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3768      	adds	r7, #104	; 0x68
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
	...

08009138 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b0ba      	sub	sp, #232	; 0xe8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800915e:	2300      	movs	r3, #0
 8009160:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009164:	2300      	movs	r3, #0
 8009166:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800916a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800916e:	f003 030f 	and.w	r3, r3, #15
 8009172:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009176:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10f      	bne.n	800919e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800917e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009182:	f003 0320 	and.w	r3, r3, #32
 8009186:	2b00      	cmp	r3, #0
 8009188:	d009      	beq.n	800919e <HAL_UART_IRQHandler+0x66>
 800918a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800918e:	f003 0320 	and.w	r3, r3, #32
 8009192:	2b00      	cmp	r3, #0
 8009194:	d003      	beq.n	800919e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fce3 	bl	8009b62 <UART_Receive_IT>
      return;
 800919c:	e25b      	b.n	8009656 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800919e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f000 80e1 	beq.w	800936a <HAL_UART_IRQHandler+0x232>
 80091a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091ac:	f003 0301 	and.w	r3, r3, #1
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d106      	bne.n	80091c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80091b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80091bc:	2b00      	cmp	r3, #0
 80091be:	f000 80d4 	beq.w	800936a <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80091c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091c6:	f003 0301 	and.w	r3, r3, #1
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00b      	beq.n	80091e6 <HAL_UART_IRQHandler+0xae>
 80091ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d005      	beq.n	80091e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091de:	f043 0201 	orr.w	r2, r3, #1
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80091e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091ea:	f003 0304 	and.w	r3, r3, #4
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00b      	beq.n	800920a <HAL_UART_IRQHandler+0xd2>
 80091f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091f6:	f003 0301 	and.w	r3, r3, #1
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d005      	beq.n	800920a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009202:	f043 0202 	orr.w	r2, r3, #2
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800920a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800920e:	f003 0302 	and.w	r3, r3, #2
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00b      	beq.n	800922e <HAL_UART_IRQHandler+0xf6>
 8009216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	2b00      	cmp	r3, #0
 8009220:	d005      	beq.n	800922e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009226:	f043 0204 	orr.w	r2, r3, #4
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800922e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009232:	f003 0308 	and.w	r3, r3, #8
 8009236:	2b00      	cmp	r3, #0
 8009238:	d011      	beq.n	800925e <HAL_UART_IRQHandler+0x126>
 800923a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800923e:	f003 0320 	and.w	r3, r3, #32
 8009242:	2b00      	cmp	r3, #0
 8009244:	d105      	bne.n	8009252 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800924a:	f003 0301 	and.w	r3, r3, #1
 800924e:	2b00      	cmp	r3, #0
 8009250:	d005      	beq.n	800925e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009256:	f043 0208 	orr.w	r2, r3, #8
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009262:	2b00      	cmp	r3, #0
 8009264:	f000 81f2 	beq.w	800964c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800926c:	f003 0320 	and.w	r3, r3, #32
 8009270:	2b00      	cmp	r3, #0
 8009272:	d008      	beq.n	8009286 <HAL_UART_IRQHandler+0x14e>
 8009274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009278:	f003 0320 	and.w	r3, r3, #32
 800927c:	2b00      	cmp	r3, #0
 800927e:	d002      	beq.n	8009286 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 fc6e 	bl	8009b62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	695b      	ldr	r3, [r3, #20]
 800928c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009290:	2b40      	cmp	r3, #64	; 0x40
 8009292:	bf0c      	ite	eq
 8009294:	2301      	moveq	r3, #1
 8009296:	2300      	movne	r3, #0
 8009298:	b2db      	uxtb	r3, r3
 800929a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a2:	f003 0308 	and.w	r3, r3, #8
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d103      	bne.n	80092b2 <HAL_UART_IRQHandler+0x17a>
 80092aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d051      	beq.n	8009356 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 fb74 	bl	80099a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	695b      	ldr	r3, [r3, #20]
 80092be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092c2:	2b40      	cmp	r3, #64	; 0x40
 80092c4:	d142      	bne.n	800934c <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	3314      	adds	r3, #20
 80092cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092d4:	e853 3f00 	ldrex	r3, [r3]
 80092d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80092dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	3314      	adds	r3, #20
 80092ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80092f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80092f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80092fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009302:	e841 2300 	strex	r3, r2, [r1]
 8009306:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800930a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1d9      	bne.n	80092c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009316:	2b00      	cmp	r3, #0
 8009318:	d013      	beq.n	8009342 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931e:	4a7f      	ldr	r2, [pc, #508]	; (800951c <HAL_UART_IRQHandler+0x3e4>)
 8009320:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009326:	4618      	mov	r0, r3
 8009328:	f7fc fd5e 	bl	8005de8 <HAL_DMA_Abort_IT>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d019      	beq.n	8009366 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800933c:	4610      	mov	r0, r2
 800933e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009340:	e011      	b.n	8009366 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800934a:	e00c      	b.n	8009366 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009354:	e007      	b.n	8009366 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009364:	e172      	b.n	800964c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009366:	bf00      	nop
    return;
 8009368:	e170      	b.n	800964c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936e:	2b01      	cmp	r3, #1
 8009370:	f040 814c 	bne.w	800960c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009378:	f003 0310 	and.w	r3, r3, #16
 800937c:	2b00      	cmp	r3, #0
 800937e:	f000 8145 	beq.w	800960c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009386:	f003 0310 	and.w	r3, r3, #16
 800938a:	2b00      	cmp	r3, #0
 800938c:	f000 813e 	beq.w	800960c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009390:	2300      	movs	r3, #0
 8009392:	60bb      	str	r3, [r7, #8]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	60bb      	str	r3, [r7, #8]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	60bb      	str	r3, [r7, #8]
 80093a4:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	695b      	ldr	r3, [r3, #20]
 80093ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093b0:	2b40      	cmp	r3, #64	; 0x40
 80093b2:	f040 80b5 	bne.w	8009520 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80093c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f000 8142 	beq.w	8009650 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80093d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80093d4:	429a      	cmp	r2, r3
 80093d6:	f080 813b 	bcs.w	8009650 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80093e0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e6:	69db      	ldr	r3, [r3, #28]
 80093e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093ec:	f000 8088 	beq.w	8009500 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	330c      	adds	r3, #12
 80093f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093fe:	e853 3f00 	ldrex	r3, [r3]
 8009402:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009406:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800940a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800940e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	330c      	adds	r3, #12
 8009418:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800941c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009420:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009424:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009428:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800942c:	e841 2300 	strex	r3, r2, [r1]
 8009430:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009434:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009438:	2b00      	cmp	r3, #0
 800943a:	d1d9      	bne.n	80093f0 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	3314      	adds	r3, #20
 8009442:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009446:	e853 3f00 	ldrex	r3, [r3]
 800944a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800944c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800944e:	f023 0301 	bic.w	r3, r3, #1
 8009452:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	3314      	adds	r3, #20
 800945c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009460:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009464:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009466:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009468:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800946c:	e841 2300 	strex	r3, r2, [r1]
 8009470:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009472:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1e1      	bne.n	800943c <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	3314      	adds	r3, #20
 800947e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009480:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009482:	e853 3f00 	ldrex	r3, [r3]
 8009486:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800948a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800948e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	3314      	adds	r3, #20
 8009498:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800949c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800949e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80094a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80094a4:	e841 2300 	strex	r3, r2, [r1]
 80094a8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80094aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1e3      	bne.n	8009478 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2220      	movs	r2, #32
 80094b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	330c      	adds	r3, #12
 80094c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094c8:	e853 3f00 	ldrex	r3, [r3]
 80094cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80094ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094d0:	f023 0310 	bic.w	r3, r3, #16
 80094d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	330c      	adds	r3, #12
 80094de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80094e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80094e4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80094e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094ea:	e841 2300 	strex	r3, r2, [r1]
 80094ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80094f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1e3      	bne.n	80094be <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7fc fc04 	bl	8005d08 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800950c:	b292      	uxth	r2, r2
 800950e:	1a8a      	subs	r2, r1, r2
 8009510:	b292      	uxth	r2, r2
 8009512:	4611      	mov	r1, r2
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009518:	e09a      	b.n	8009650 <HAL_UART_IRQHandler+0x518>
 800951a:	bf00      	nop
 800951c:	08009a67 	.word	0x08009a67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009528:	b29b      	uxth	r3, r3
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009534:	b29b      	uxth	r3, r3
 8009536:	2b00      	cmp	r3, #0
 8009538:	f000 808c 	beq.w	8009654 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800953c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009540:	2b00      	cmp	r3, #0
 8009542:	f000 8087 	beq.w	8009654 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	330c      	adds	r3, #12
 800954c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009550:	e853 3f00 	ldrex	r3, [r3]
 8009554:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009558:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800955c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	330c      	adds	r3, #12
 8009566:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800956a:	647a      	str	r2, [r7, #68]	; 0x44
 800956c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009570:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009572:	e841 2300 	strex	r3, r2, [r1]
 8009576:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800957a:	2b00      	cmp	r3, #0
 800957c:	d1e3      	bne.n	8009546 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	3314      	adds	r3, #20
 8009584:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009588:	e853 3f00 	ldrex	r3, [r3]
 800958c:	623b      	str	r3, [r7, #32]
   return(result);
 800958e:	6a3b      	ldr	r3, [r7, #32]
 8009590:	f023 0301 	bic.w	r3, r3, #1
 8009594:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	3314      	adds	r3, #20
 800959e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80095a2:	633a      	str	r2, [r7, #48]	; 0x30
 80095a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095aa:	e841 2300 	strex	r3, r2, [r1]
 80095ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1e3      	bne.n	800957e <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2220      	movs	r2, #32
 80095ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	330c      	adds	r3, #12
 80095ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	e853 3f00 	ldrex	r3, [r3]
 80095d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f023 0310 	bic.w	r3, r3, #16
 80095da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	330c      	adds	r3, #12
 80095e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80095e8:	61fa      	str	r2, [r7, #28]
 80095ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ec:	69b9      	ldr	r1, [r7, #24]
 80095ee:	69fa      	ldr	r2, [r7, #28]
 80095f0:	e841 2300 	strex	r3, r2, [r1]
 80095f4:	617b      	str	r3, [r7, #20]
   return(result);
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1e3      	bne.n	80095c4 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009600:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8009604:	4611      	mov	r1, r2
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800960a:	e023      	b.n	8009654 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800960c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009614:	2b00      	cmp	r3, #0
 8009616:	d009      	beq.n	800962c <HAL_UART_IRQHandler+0x4f4>
 8009618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800961c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009620:	2b00      	cmp	r3, #0
 8009622:	d003      	beq.n	800962c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 fa33 	bl	8009a90 <UART_Transmit_IT>
    return;
 800962a:	e014      	b.n	8009656 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800962c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00e      	beq.n	8009656 <HAL_UART_IRQHandler+0x51e>
 8009638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800963c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009640:	2b00      	cmp	r3, #0
 8009642:	d008      	beq.n	8009656 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fa73 	bl	8009b30 <UART_EndTransmit_IT>
    return;
 800964a:	e004      	b.n	8009656 <HAL_UART_IRQHandler+0x51e>
    return;
 800964c:	bf00      	nop
 800964e:	e002      	b.n	8009656 <HAL_UART_IRQHandler+0x51e>
      return;
 8009650:	bf00      	nop
 8009652:	e000      	b.n	8009656 <HAL_UART_IRQHandler+0x51e>
      return;
 8009654:	bf00      	nop
  }
}
 8009656:	37e8      	adds	r7, #232	; 0xe8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009664:	bf00      	nop
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800968c:	bf00      	nop
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80096a0:	bf00      	nop
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80096b4:	bf00      	nop
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80096c8:	bf00      	nop
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80096dc:	bf00      	nop
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80096f0:	bf00      	nop
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	460b      	mov	r3, r1
 8009706:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009708:	bf00      	nop
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4a10      	ldr	r2, [pc, #64]	; (8009760 <UART_InitCallbacksToDefault+0x4c>)
 8009720:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a0f      	ldr	r2, [pc, #60]	; (8009764 <UART_InitCallbacksToDefault+0x50>)
 8009726:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4a0f      	ldr	r2, [pc, #60]	; (8009768 <UART_InitCallbacksToDefault+0x54>)
 800972c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a0e      	ldr	r2, [pc, #56]	; (800976c <UART_InitCallbacksToDefault+0x58>)
 8009732:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a0e      	ldr	r2, [pc, #56]	; (8009770 <UART_InitCallbacksToDefault+0x5c>)
 8009738:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a0d      	ldr	r2, [pc, #52]	; (8009774 <UART_InitCallbacksToDefault+0x60>)
 800973e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a0d      	ldr	r2, [pc, #52]	; (8009778 <UART_InitCallbacksToDefault+0x64>)
 8009744:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a0c      	ldr	r2, [pc, #48]	; (800977c <UART_InitCallbacksToDefault+0x68>)
 800974a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a0c      	ldr	r2, [pc, #48]	; (8009780 <UART_InitCallbacksToDefault+0x6c>)
 8009750:	669a      	str	r2, [r3, #104]	; 0x68

}
 8009752:	bf00      	nop
 8009754:	370c      	adds	r7, #12
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	08009671 	.word	0x08009671
 8009764:	0800965d 	.word	0x0800965d
 8009768:	08009699 	.word	0x08009699
 800976c:	08009685 	.word	0x08009685
 8009770:	080096ad 	.word	0x080096ad
 8009774:	080096c1 	.word	0x080096c1
 8009778:	080096d5 	.word	0x080096d5
 800977c:	080096e9 	.word	0x080096e9
 8009780:	080096fd 	.word	0x080096fd

08009784 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b090      	sub	sp, #64	; 0x40
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009790:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800979c:	2b00      	cmp	r3, #0
 800979e:	d137      	bne.n	8009810 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80097a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097a2:	2200      	movs	r2, #0
 80097a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80097a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	3314      	adds	r3, #20
 80097ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b0:	e853 3f00 	ldrex	r3, [r3]
 80097b4:	623b      	str	r3, [r7, #32]
   return(result);
 80097b6:	6a3b      	ldr	r3, [r7, #32]
 80097b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80097be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	3314      	adds	r3, #20
 80097c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097c6:	633a      	str	r2, [r7, #48]	; 0x30
 80097c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097ce:	e841 2300 	strex	r3, r2, [r1]
 80097d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d1e5      	bne.n	80097a6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	330c      	adds	r3, #12
 80097e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	e853 3f00 	ldrex	r3, [r3]
 80097e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097f0:	637b      	str	r3, [r7, #52]	; 0x34
 80097f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	330c      	adds	r3, #12
 80097f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097fa:	61fa      	str	r2, [r7, #28]
 80097fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fe:	69b9      	ldr	r1, [r7, #24]
 8009800:	69fa      	ldr	r2, [r7, #28]
 8009802:	e841 2300 	strex	r3, r2, [r1]
 8009806:	617b      	str	r3, [r7, #20]
   return(result);
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d1e5      	bne.n	80097da <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800980e:	e003      	b.n	8009818 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8009810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009814:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009816:	4798      	blx	r3
}
 8009818:	bf00      	nop
 800981a:	3740      	adds	r7, #64	; 0x40
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800982c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009836:	bf00      	nop
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b084      	sub	sp, #16
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009846:	2300      	movs	r3, #0
 8009848:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	695b      	ldr	r3, [r3, #20]
 8009856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800985a:	2b80      	cmp	r3, #128	; 0x80
 800985c:	bf0c      	ite	eq
 800985e:	2301      	moveq	r3, #1
 8009860:	2300      	movne	r3, #0
 8009862:	b2db      	uxtb	r3, r3
 8009864:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800986c:	b2db      	uxtb	r3, r3
 800986e:	2b21      	cmp	r3, #33	; 0x21
 8009870:	d108      	bne.n	8009884 <UART_DMAError+0x46>
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d005      	beq.n	8009884 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	2200      	movs	r2, #0
 800987c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800987e:	68b8      	ldr	r0, [r7, #8]
 8009880:	f000 f866 	bl	8009950 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	695b      	ldr	r3, [r3, #20]
 800988a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800988e:	2b40      	cmp	r3, #64	; 0x40
 8009890:	bf0c      	ite	eq
 8009892:	2301      	moveq	r3, #1
 8009894:	2300      	movne	r3, #0
 8009896:	b2db      	uxtb	r3, r3
 8009898:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	2b22      	cmp	r3, #34	; 0x22
 80098a4:	d108      	bne.n	80098b8 <UART_DMAError+0x7a>
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d005      	beq.n	80098b8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	2200      	movs	r2, #0
 80098b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80098b2:	68b8      	ldr	r0, [r7, #8]
 80098b4:	f000 f874 	bl	80099a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098bc:	f043 0210 	orr.w	r2, r3, #16
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098c8:	68b8      	ldr	r0, [r7, #8]
 80098ca:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098cc:	bf00      	nop
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	4613      	mov	r3, r2
 80098e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	88fa      	ldrh	r2, [r7, #6]
 80098ec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	88fa      	ldrh	r2, [r7, #6]
 80098f2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2200      	movs	r2, #0
 80098f8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2222      	movs	r2, #34	; 0x22
 80098fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d007      	beq.n	8009922 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68da      	ldr	r2, [r3, #12]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009920:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	695a      	ldr	r2, [r3, #20]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f042 0201 	orr.w	r2, r2, #1
 8009930:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	68da      	ldr	r2, [r3, #12]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f042 0220 	orr.w	r2, r2, #32
 8009940:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009942:	2300      	movs	r3, #0
}
 8009944:	4618      	mov	r0, r3
 8009946:	3714      	adds	r7, #20
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009950:	b480      	push	{r7}
 8009952:	b089      	sub	sp, #36	; 0x24
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	330c      	adds	r3, #12
 800995e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	e853 3f00 	ldrex	r3, [r3]
 8009966:	60bb      	str	r3, [r7, #8]
   return(result);
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800996e:	61fb      	str	r3, [r7, #28]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	330c      	adds	r3, #12
 8009976:	69fa      	ldr	r2, [r7, #28]
 8009978:	61ba      	str	r2, [r7, #24]
 800997a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997c:	6979      	ldr	r1, [r7, #20]
 800997e:	69ba      	ldr	r2, [r7, #24]
 8009980:	e841 2300 	strex	r3, r2, [r1]
 8009984:	613b      	str	r3, [r7, #16]
   return(result);
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d1e5      	bne.n	8009958 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2220      	movs	r2, #32
 8009990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009994:	bf00      	nop
 8009996:	3724      	adds	r7, #36	; 0x24
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b095      	sub	sp, #84	; 0x54
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	330c      	adds	r3, #12
 80099ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b2:	e853 3f00 	ldrex	r3, [r3]
 80099b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80099b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	330c      	adds	r3, #12
 80099c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80099c8:	643a      	str	r2, [r7, #64]	; 0x40
 80099ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80099ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099d0:	e841 2300 	strex	r3, r2, [r1]
 80099d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80099d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1e5      	bne.n	80099a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	3314      	adds	r3, #20
 80099e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e4:	6a3b      	ldr	r3, [r7, #32]
 80099e6:	e853 3f00 	ldrex	r3, [r3]
 80099ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	f023 0301 	bic.w	r3, r3, #1
 80099f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	3314      	adds	r3, #20
 80099fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a04:	e841 2300 	strex	r3, r2, [r1]
 8009a08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1e5      	bne.n	80099dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d119      	bne.n	8009a4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	330c      	adds	r3, #12
 8009a1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	e853 3f00 	ldrex	r3, [r3]
 8009a26:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	f023 0310 	bic.w	r3, r3, #16
 8009a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	330c      	adds	r3, #12
 8009a36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a38:	61ba      	str	r2, [r7, #24]
 8009a3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3c:	6979      	ldr	r1, [r7, #20]
 8009a3e:	69ba      	ldr	r2, [r7, #24]
 8009a40:	e841 2300 	strex	r3, r2, [r1]
 8009a44:	613b      	str	r3, [r7, #16]
   return(result);
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d1e5      	bne.n	8009a18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2220      	movs	r2, #32
 8009a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009a5a:	bf00      	nop
 8009a5c:	3754      	adds	r7, #84	; 0x54
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr

08009a66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b084      	sub	sp, #16
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2200      	movs	r2, #0
 8009a78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a88:	bf00      	nop
 8009a8a:	3710      	adds	r7, #16
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	2b21      	cmp	r3, #33	; 0x21
 8009aa2:	d13e      	bne.n	8009b22 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aac:	d114      	bne.n	8009ad8 <UART_Transmit_IT+0x48>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d110      	bne.n	8009ad8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a1b      	ldr	r3, [r3, #32]
 8009aba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	881b      	ldrh	r3, [r3, #0]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009aca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6a1b      	ldr	r3, [r3, #32]
 8009ad0:	1c9a      	adds	r2, r3, #2
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	621a      	str	r2, [r3, #32]
 8009ad6:	e008      	b.n	8009aea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6a1b      	ldr	r3, [r3, #32]
 8009adc:	1c59      	adds	r1, r3, #1
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	6211      	str	r1, [r2, #32]
 8009ae2:	781a      	ldrb	r2, [r3, #0]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	3b01      	subs	r3, #1
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	4619      	mov	r1, r3
 8009af8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d10f      	bne.n	8009b1e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68da      	ldr	r2, [r3, #12]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b0c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	68da      	ldr	r2, [r3, #12]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b1c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	e000      	b.n	8009b24 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009b22:	2302      	movs	r3, #2
  }
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3714      	adds	r7, #20
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68da      	ldr	r2, [r3, #12]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b46:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2220      	movs	r2, #32
 8009b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3708      	adds	r7, #8
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b08c      	sub	sp, #48	; 0x30
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	2b22      	cmp	r3, #34	; 0x22
 8009b74:	f040 80ad 	bne.w	8009cd2 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b80:	d117      	bne.n	8009bb2 <UART_Receive_IT+0x50>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d113      	bne.n	8009bb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b92:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009baa:	1c9a      	adds	r2, r3, #2
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	629a      	str	r2, [r3, #40]	; 0x28
 8009bb0:	e026      	b.n	8009c00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bc4:	d007      	beq.n	8009bd6 <UART_Receive_IT+0x74>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d10a      	bne.n	8009be4 <UART_Receive_IT+0x82>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d106      	bne.n	8009be4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	b2da      	uxtb	r2, r3
 8009bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be0:	701a      	strb	r2, [r3, #0]
 8009be2:	e008      	b.n	8009bf6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bf0:	b2da      	uxtb	r2, r3
 8009bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bfa:	1c5a      	adds	r2, r3, #1
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	3b01      	subs	r3, #1
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d15c      	bne.n	8009cce <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	68da      	ldr	r2, [r3, #12]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f022 0220 	bic.w	r2, r2, #32
 8009c22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	68da      	ldr	r2, [r3, #12]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	695a      	ldr	r2, [r3, #20]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f022 0201 	bic.w	r2, r2, #1
 8009c42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2220      	movs	r2, #32
 8009c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d136      	bne.n	8009cc2 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	330c      	adds	r3, #12
 8009c60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	e853 3f00 	ldrex	r3, [r3]
 8009c68:	613b      	str	r3, [r7, #16]
   return(result);
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	f023 0310 	bic.w	r3, r3, #16
 8009c70:	627b      	str	r3, [r7, #36]	; 0x24
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	330c      	adds	r3, #12
 8009c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c7a:	623a      	str	r2, [r7, #32]
 8009c7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7e:	69f9      	ldr	r1, [r7, #28]
 8009c80:	6a3a      	ldr	r2, [r7, #32]
 8009c82:	e841 2300 	strex	r3, r2, [r1]
 8009c86:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d1e5      	bne.n	8009c5a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f003 0310 	and.w	r3, r3, #16
 8009c98:	2b10      	cmp	r3, #16
 8009c9a:	d10a      	bne.n	8009cb2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	60fb      	str	r3, [r7, #12]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	60fb      	str	r3, [r7, #12]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	60fb      	str	r3, [r7, #12]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8009cba:	4611      	mov	r1, r2
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	4798      	blx	r3
 8009cc0:	e003      	b.n	8009cca <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	e002      	b.n	8009cd4 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	e000      	b.n	8009cd4 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8009cd2:	2302      	movs	r3, #2
  }
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3730      	adds	r7, #48	; 0x30
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ce0:	b0c0      	sub	sp, #256	; 0x100
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	691b      	ldr	r3, [r3, #16]
 8009cf0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cf8:	68d9      	ldr	r1, [r3, #12]
 8009cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	ea40 0301 	orr.w	r3, r0, r1
 8009d04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d0a:	689a      	ldr	r2, [r3, #8]
 8009d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d10:	691b      	ldr	r3, [r3, #16]
 8009d12:	431a      	orrs	r2, r3
 8009d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d18:	695b      	ldr	r3, [r3, #20]
 8009d1a:	431a      	orrs	r2, r3
 8009d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d20:	69db      	ldr	r3, [r3, #28]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009d34:	f021 010c 	bic.w	r1, r1, #12
 8009d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009d42:	430b      	orrs	r3, r1
 8009d44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	695b      	ldr	r3, [r3, #20]
 8009d4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d56:	6999      	ldr	r1, [r3, #24]
 8009d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	ea40 0301 	orr.w	r3, r0, r1
 8009d62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	4b8f      	ldr	r3, [pc, #572]	; (8009fa8 <UART_SetConfig+0x2cc>)
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d005      	beq.n	8009d7c <UART_SetConfig+0xa0>
 8009d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	4b8d      	ldr	r3, [pc, #564]	; (8009fac <UART_SetConfig+0x2d0>)
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d104      	bne.n	8009d86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009d7c:	f7fd fa6e 	bl	800725c <HAL_RCC_GetPCLK2Freq>
 8009d80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009d84:	e003      	b.n	8009d8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009d86:	f7fd fa55 	bl	8007234 <HAL_RCC_GetPCLK1Freq>
 8009d8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d92:	69db      	ldr	r3, [r3, #28]
 8009d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d98:	f040 810c 	bne.w	8009fb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009d9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009da0:	2200      	movs	r2, #0
 8009da2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009da6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009daa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009dae:	4622      	mov	r2, r4
 8009db0:	462b      	mov	r3, r5
 8009db2:	1891      	adds	r1, r2, r2
 8009db4:	65b9      	str	r1, [r7, #88]	; 0x58
 8009db6:	415b      	adcs	r3, r3
 8009db8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009dba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009dbe:	4621      	mov	r1, r4
 8009dc0:	eb12 0801 	adds.w	r8, r2, r1
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	eb43 0901 	adc.w	r9, r3, r1
 8009dca:	f04f 0200 	mov.w	r2, #0
 8009dce:	f04f 0300 	mov.w	r3, #0
 8009dd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009dd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009dda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009dde:	4690      	mov	r8, r2
 8009de0:	4699      	mov	r9, r3
 8009de2:	4623      	mov	r3, r4
 8009de4:	eb18 0303 	adds.w	r3, r8, r3
 8009de8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009dec:	462b      	mov	r3, r5
 8009dee:	eb49 0303 	adc.w	r3, r9, r3
 8009df2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009e06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	18db      	adds	r3, r3, r3
 8009e0e:	653b      	str	r3, [r7, #80]	; 0x50
 8009e10:	4613      	mov	r3, r2
 8009e12:	eb42 0303 	adc.w	r3, r2, r3
 8009e16:	657b      	str	r3, [r7, #84]	; 0x54
 8009e18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009e1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009e20:	f7f6 febe 	bl	8000ba0 <__aeabi_uldivmod>
 8009e24:	4602      	mov	r2, r0
 8009e26:	460b      	mov	r3, r1
 8009e28:	4b61      	ldr	r3, [pc, #388]	; (8009fb0 <UART_SetConfig+0x2d4>)
 8009e2a:	fba3 2302 	umull	r2, r3, r3, r2
 8009e2e:	095b      	lsrs	r3, r3, #5
 8009e30:	011c      	lsls	r4, r3, #4
 8009e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e36:	2200      	movs	r2, #0
 8009e38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009e40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009e44:	4642      	mov	r2, r8
 8009e46:	464b      	mov	r3, r9
 8009e48:	1891      	adds	r1, r2, r2
 8009e4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8009e4c:	415b      	adcs	r3, r3
 8009e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009e54:	4641      	mov	r1, r8
 8009e56:	eb12 0a01 	adds.w	sl, r2, r1
 8009e5a:	4649      	mov	r1, r9
 8009e5c:	eb43 0b01 	adc.w	fp, r3, r1
 8009e60:	f04f 0200 	mov.w	r2, #0
 8009e64:	f04f 0300 	mov.w	r3, #0
 8009e68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009e6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009e70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e74:	4692      	mov	sl, r2
 8009e76:	469b      	mov	fp, r3
 8009e78:	4643      	mov	r3, r8
 8009e7a:	eb1a 0303 	adds.w	r3, sl, r3
 8009e7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e82:	464b      	mov	r3, r9
 8009e84:	eb4b 0303 	adc.w	r3, fp, r3
 8009e88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009e9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	18db      	adds	r3, r3, r3
 8009ea4:	643b      	str	r3, [r7, #64]	; 0x40
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	eb42 0303 	adc.w	r3, r2, r3
 8009eac:	647b      	str	r3, [r7, #68]	; 0x44
 8009eae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009eb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009eb6:	f7f6 fe73 	bl	8000ba0 <__aeabi_uldivmod>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	4611      	mov	r1, r2
 8009ec0:	4b3b      	ldr	r3, [pc, #236]	; (8009fb0 <UART_SetConfig+0x2d4>)
 8009ec2:	fba3 2301 	umull	r2, r3, r3, r1
 8009ec6:	095b      	lsrs	r3, r3, #5
 8009ec8:	2264      	movs	r2, #100	; 0x64
 8009eca:	fb02 f303 	mul.w	r3, r2, r3
 8009ece:	1acb      	subs	r3, r1, r3
 8009ed0:	00db      	lsls	r3, r3, #3
 8009ed2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009ed6:	4b36      	ldr	r3, [pc, #216]	; (8009fb0 <UART_SetConfig+0x2d4>)
 8009ed8:	fba3 2302 	umull	r2, r3, r3, r2
 8009edc:	095b      	lsrs	r3, r3, #5
 8009ede:	005b      	lsls	r3, r3, #1
 8009ee0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009ee4:	441c      	add	r4, r3
 8009ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009eea:	2200      	movs	r2, #0
 8009eec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ef0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009ef4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009ef8:	4642      	mov	r2, r8
 8009efa:	464b      	mov	r3, r9
 8009efc:	1891      	adds	r1, r2, r2
 8009efe:	63b9      	str	r1, [r7, #56]	; 0x38
 8009f00:	415b      	adcs	r3, r3
 8009f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009f08:	4641      	mov	r1, r8
 8009f0a:	1851      	adds	r1, r2, r1
 8009f0c:	6339      	str	r1, [r7, #48]	; 0x30
 8009f0e:	4649      	mov	r1, r9
 8009f10:	414b      	adcs	r3, r1
 8009f12:	637b      	str	r3, [r7, #52]	; 0x34
 8009f14:	f04f 0200 	mov.w	r2, #0
 8009f18:	f04f 0300 	mov.w	r3, #0
 8009f1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009f20:	4659      	mov	r1, fp
 8009f22:	00cb      	lsls	r3, r1, #3
 8009f24:	4651      	mov	r1, sl
 8009f26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f2a:	4651      	mov	r1, sl
 8009f2c:	00ca      	lsls	r2, r1, #3
 8009f2e:	4610      	mov	r0, r2
 8009f30:	4619      	mov	r1, r3
 8009f32:	4603      	mov	r3, r0
 8009f34:	4642      	mov	r2, r8
 8009f36:	189b      	adds	r3, r3, r2
 8009f38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009f3c:	464b      	mov	r3, r9
 8009f3e:	460a      	mov	r2, r1
 8009f40:	eb42 0303 	adc.w	r3, r2, r3
 8009f44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009f54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009f58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	18db      	adds	r3, r3, r3
 8009f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f62:	4613      	mov	r3, r2
 8009f64:	eb42 0303 	adc.w	r3, r2, r3
 8009f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009f72:	f7f6 fe15 	bl	8000ba0 <__aeabi_uldivmod>
 8009f76:	4602      	mov	r2, r0
 8009f78:	460b      	mov	r3, r1
 8009f7a:	4b0d      	ldr	r3, [pc, #52]	; (8009fb0 <UART_SetConfig+0x2d4>)
 8009f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8009f80:	095b      	lsrs	r3, r3, #5
 8009f82:	2164      	movs	r1, #100	; 0x64
 8009f84:	fb01 f303 	mul.w	r3, r1, r3
 8009f88:	1ad3      	subs	r3, r2, r3
 8009f8a:	00db      	lsls	r3, r3, #3
 8009f8c:	3332      	adds	r3, #50	; 0x32
 8009f8e:	4a08      	ldr	r2, [pc, #32]	; (8009fb0 <UART_SetConfig+0x2d4>)
 8009f90:	fba2 2303 	umull	r2, r3, r2, r3
 8009f94:	095b      	lsrs	r3, r3, #5
 8009f96:	f003 0207 	and.w	r2, r3, #7
 8009f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4422      	add	r2, r4
 8009fa2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009fa4:	e105      	b.n	800a1b2 <UART_SetConfig+0x4d6>
 8009fa6:	bf00      	nop
 8009fa8:	40011000 	.word	0x40011000
 8009fac:	40011400 	.word	0x40011400
 8009fb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009fb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009fbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009fc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009fc6:	4642      	mov	r2, r8
 8009fc8:	464b      	mov	r3, r9
 8009fca:	1891      	adds	r1, r2, r2
 8009fcc:	6239      	str	r1, [r7, #32]
 8009fce:	415b      	adcs	r3, r3
 8009fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8009fd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009fd6:	4641      	mov	r1, r8
 8009fd8:	1854      	adds	r4, r2, r1
 8009fda:	4649      	mov	r1, r9
 8009fdc:	eb43 0501 	adc.w	r5, r3, r1
 8009fe0:	f04f 0200 	mov.w	r2, #0
 8009fe4:	f04f 0300 	mov.w	r3, #0
 8009fe8:	00eb      	lsls	r3, r5, #3
 8009fea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009fee:	00e2      	lsls	r2, r4, #3
 8009ff0:	4614      	mov	r4, r2
 8009ff2:	461d      	mov	r5, r3
 8009ff4:	4643      	mov	r3, r8
 8009ff6:	18e3      	adds	r3, r4, r3
 8009ff8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009ffc:	464b      	mov	r3, r9
 8009ffe:	eb45 0303 	adc.w	r3, r5, r3
 800a002:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a012:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a016:	f04f 0200 	mov.w	r2, #0
 800a01a:	f04f 0300 	mov.w	r3, #0
 800a01e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a022:	4629      	mov	r1, r5
 800a024:	008b      	lsls	r3, r1, #2
 800a026:	4621      	mov	r1, r4
 800a028:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a02c:	4621      	mov	r1, r4
 800a02e:	008a      	lsls	r2, r1, #2
 800a030:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a034:	f7f6 fdb4 	bl	8000ba0 <__aeabi_uldivmod>
 800a038:	4602      	mov	r2, r0
 800a03a:	460b      	mov	r3, r1
 800a03c:	4b60      	ldr	r3, [pc, #384]	; (800a1c0 <UART_SetConfig+0x4e4>)
 800a03e:	fba3 2302 	umull	r2, r3, r3, r2
 800a042:	095b      	lsrs	r3, r3, #5
 800a044:	011c      	lsls	r4, r3, #4
 800a046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a04a:	2200      	movs	r2, #0
 800a04c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a050:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a054:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a058:	4642      	mov	r2, r8
 800a05a:	464b      	mov	r3, r9
 800a05c:	1891      	adds	r1, r2, r2
 800a05e:	61b9      	str	r1, [r7, #24]
 800a060:	415b      	adcs	r3, r3
 800a062:	61fb      	str	r3, [r7, #28]
 800a064:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a068:	4641      	mov	r1, r8
 800a06a:	1851      	adds	r1, r2, r1
 800a06c:	6139      	str	r1, [r7, #16]
 800a06e:	4649      	mov	r1, r9
 800a070:	414b      	adcs	r3, r1
 800a072:	617b      	str	r3, [r7, #20]
 800a074:	f04f 0200 	mov.w	r2, #0
 800a078:	f04f 0300 	mov.w	r3, #0
 800a07c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a080:	4659      	mov	r1, fp
 800a082:	00cb      	lsls	r3, r1, #3
 800a084:	4651      	mov	r1, sl
 800a086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a08a:	4651      	mov	r1, sl
 800a08c:	00ca      	lsls	r2, r1, #3
 800a08e:	4610      	mov	r0, r2
 800a090:	4619      	mov	r1, r3
 800a092:	4603      	mov	r3, r0
 800a094:	4642      	mov	r2, r8
 800a096:	189b      	adds	r3, r3, r2
 800a098:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a09c:	464b      	mov	r3, r9
 800a09e:	460a      	mov	r2, r1
 800a0a0:	eb42 0303 	adc.w	r3, r2, r3
 800a0a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a0a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	67bb      	str	r3, [r7, #120]	; 0x78
 800a0b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a0b4:	f04f 0200 	mov.w	r2, #0
 800a0b8:	f04f 0300 	mov.w	r3, #0
 800a0bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a0c0:	4649      	mov	r1, r9
 800a0c2:	008b      	lsls	r3, r1, #2
 800a0c4:	4641      	mov	r1, r8
 800a0c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0ca:	4641      	mov	r1, r8
 800a0cc:	008a      	lsls	r2, r1, #2
 800a0ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a0d2:	f7f6 fd65 	bl	8000ba0 <__aeabi_uldivmod>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	460b      	mov	r3, r1
 800a0da:	4b39      	ldr	r3, [pc, #228]	; (800a1c0 <UART_SetConfig+0x4e4>)
 800a0dc:	fba3 1302 	umull	r1, r3, r3, r2
 800a0e0:	095b      	lsrs	r3, r3, #5
 800a0e2:	2164      	movs	r1, #100	; 0x64
 800a0e4:	fb01 f303 	mul.w	r3, r1, r3
 800a0e8:	1ad3      	subs	r3, r2, r3
 800a0ea:	011b      	lsls	r3, r3, #4
 800a0ec:	3332      	adds	r3, #50	; 0x32
 800a0ee:	4a34      	ldr	r2, [pc, #208]	; (800a1c0 <UART_SetConfig+0x4e4>)
 800a0f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a0f4:	095b      	lsrs	r3, r3, #5
 800a0f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0fa:	441c      	add	r4, r3
 800a0fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a100:	2200      	movs	r2, #0
 800a102:	673b      	str	r3, [r7, #112]	; 0x70
 800a104:	677a      	str	r2, [r7, #116]	; 0x74
 800a106:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a10a:	4642      	mov	r2, r8
 800a10c:	464b      	mov	r3, r9
 800a10e:	1891      	adds	r1, r2, r2
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	415b      	adcs	r3, r3
 800a114:	60fb      	str	r3, [r7, #12]
 800a116:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a11a:	4641      	mov	r1, r8
 800a11c:	1851      	adds	r1, r2, r1
 800a11e:	6039      	str	r1, [r7, #0]
 800a120:	4649      	mov	r1, r9
 800a122:	414b      	adcs	r3, r1
 800a124:	607b      	str	r3, [r7, #4]
 800a126:	f04f 0200 	mov.w	r2, #0
 800a12a:	f04f 0300 	mov.w	r3, #0
 800a12e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a132:	4659      	mov	r1, fp
 800a134:	00cb      	lsls	r3, r1, #3
 800a136:	4651      	mov	r1, sl
 800a138:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a13c:	4651      	mov	r1, sl
 800a13e:	00ca      	lsls	r2, r1, #3
 800a140:	4610      	mov	r0, r2
 800a142:	4619      	mov	r1, r3
 800a144:	4603      	mov	r3, r0
 800a146:	4642      	mov	r2, r8
 800a148:	189b      	adds	r3, r3, r2
 800a14a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a14c:	464b      	mov	r3, r9
 800a14e:	460a      	mov	r2, r1
 800a150:	eb42 0303 	adc.w	r3, r2, r3
 800a154:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	663b      	str	r3, [r7, #96]	; 0x60
 800a160:	667a      	str	r2, [r7, #100]	; 0x64
 800a162:	f04f 0200 	mov.w	r2, #0
 800a166:	f04f 0300 	mov.w	r3, #0
 800a16a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a16e:	4649      	mov	r1, r9
 800a170:	008b      	lsls	r3, r1, #2
 800a172:	4641      	mov	r1, r8
 800a174:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a178:	4641      	mov	r1, r8
 800a17a:	008a      	lsls	r2, r1, #2
 800a17c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a180:	f7f6 fd0e 	bl	8000ba0 <__aeabi_uldivmod>
 800a184:	4602      	mov	r2, r0
 800a186:	460b      	mov	r3, r1
 800a188:	4b0d      	ldr	r3, [pc, #52]	; (800a1c0 <UART_SetConfig+0x4e4>)
 800a18a:	fba3 1302 	umull	r1, r3, r3, r2
 800a18e:	095b      	lsrs	r3, r3, #5
 800a190:	2164      	movs	r1, #100	; 0x64
 800a192:	fb01 f303 	mul.w	r3, r1, r3
 800a196:	1ad3      	subs	r3, r2, r3
 800a198:	011b      	lsls	r3, r3, #4
 800a19a:	3332      	adds	r3, #50	; 0x32
 800a19c:	4a08      	ldr	r2, [pc, #32]	; (800a1c0 <UART_SetConfig+0x4e4>)
 800a19e:	fba2 2303 	umull	r2, r3, r2, r3
 800a1a2:	095b      	lsrs	r3, r3, #5
 800a1a4:	f003 020f 	and.w	r2, r3, #15
 800a1a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4422      	add	r2, r4
 800a1b0:	609a      	str	r2, [r3, #8]
}
 800a1b2:	bf00      	nop
 800a1b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1be:	bf00      	nop
 800a1c0:	51eb851f 	.word	0x51eb851f

0800a1c4 <calloc>:
 800a1c4:	4b02      	ldr	r3, [pc, #8]	; (800a1d0 <calloc+0xc>)
 800a1c6:	460a      	mov	r2, r1
 800a1c8:	4601      	mov	r1, r0
 800a1ca:	6818      	ldr	r0, [r3, #0]
 800a1cc:	f000 b852 	b.w	800a274 <_calloc_r>
 800a1d0:	20000364 	.word	0x20000364

0800a1d4 <__errno>:
 800a1d4:	4b01      	ldr	r3, [pc, #4]	; (800a1dc <__errno+0x8>)
 800a1d6:	6818      	ldr	r0, [r3, #0]
 800a1d8:	4770      	bx	lr
 800a1da:	bf00      	nop
 800a1dc:	20000364 	.word	0x20000364

0800a1e0 <__libc_init_array>:
 800a1e0:	b570      	push	{r4, r5, r6, lr}
 800a1e2:	4d0d      	ldr	r5, [pc, #52]	; (800a218 <__libc_init_array+0x38>)
 800a1e4:	4c0d      	ldr	r4, [pc, #52]	; (800a21c <__libc_init_array+0x3c>)
 800a1e6:	1b64      	subs	r4, r4, r5
 800a1e8:	10a4      	asrs	r4, r4, #2
 800a1ea:	2600      	movs	r6, #0
 800a1ec:	42a6      	cmp	r6, r4
 800a1ee:	d109      	bne.n	800a204 <__libc_init_array+0x24>
 800a1f0:	4d0b      	ldr	r5, [pc, #44]	; (800a220 <__libc_init_array+0x40>)
 800a1f2:	4c0c      	ldr	r4, [pc, #48]	; (800a224 <__libc_init_array+0x44>)
 800a1f4:	f002 fb4a 	bl	800c88c <_init>
 800a1f8:	1b64      	subs	r4, r4, r5
 800a1fa:	10a4      	asrs	r4, r4, #2
 800a1fc:	2600      	movs	r6, #0
 800a1fe:	42a6      	cmp	r6, r4
 800a200:	d105      	bne.n	800a20e <__libc_init_array+0x2e>
 800a202:	bd70      	pop	{r4, r5, r6, pc}
 800a204:	f855 3b04 	ldr.w	r3, [r5], #4
 800a208:	4798      	blx	r3
 800a20a:	3601      	adds	r6, #1
 800a20c:	e7ee      	b.n	800a1ec <__libc_init_array+0xc>
 800a20e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a212:	4798      	blx	r3
 800a214:	3601      	adds	r6, #1
 800a216:	e7f2      	b.n	800a1fe <__libc_init_array+0x1e>
 800a218:	0800cae0 	.word	0x0800cae0
 800a21c:	0800cae0 	.word	0x0800cae0
 800a220:	0800cae0 	.word	0x0800cae0
 800a224:	0800cae4 	.word	0x0800cae4

0800a228 <malloc>:
 800a228:	4b02      	ldr	r3, [pc, #8]	; (800a234 <malloc+0xc>)
 800a22a:	4601      	mov	r1, r0
 800a22c:	6818      	ldr	r0, [r3, #0]
 800a22e:	f000 b8a3 	b.w	800a378 <_malloc_r>
 800a232:	bf00      	nop
 800a234:	20000364 	.word	0x20000364

0800a238 <free>:
 800a238:	4b02      	ldr	r3, [pc, #8]	; (800a244 <free+0xc>)
 800a23a:	4601      	mov	r1, r0
 800a23c:	6818      	ldr	r0, [r3, #0]
 800a23e:	f000 b82f 	b.w	800a2a0 <_free_r>
 800a242:	bf00      	nop
 800a244:	20000364 	.word	0x20000364

0800a248 <memcpy>:
 800a248:	440a      	add	r2, r1
 800a24a:	4291      	cmp	r1, r2
 800a24c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a250:	d100      	bne.n	800a254 <memcpy+0xc>
 800a252:	4770      	bx	lr
 800a254:	b510      	push	{r4, lr}
 800a256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a25a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a25e:	4291      	cmp	r1, r2
 800a260:	d1f9      	bne.n	800a256 <memcpy+0xe>
 800a262:	bd10      	pop	{r4, pc}

0800a264 <memset>:
 800a264:	4402      	add	r2, r0
 800a266:	4603      	mov	r3, r0
 800a268:	4293      	cmp	r3, r2
 800a26a:	d100      	bne.n	800a26e <memset+0xa>
 800a26c:	4770      	bx	lr
 800a26e:	f803 1b01 	strb.w	r1, [r3], #1
 800a272:	e7f9      	b.n	800a268 <memset+0x4>

0800a274 <_calloc_r>:
 800a274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a276:	fba1 2402 	umull	r2, r4, r1, r2
 800a27a:	b94c      	cbnz	r4, 800a290 <_calloc_r+0x1c>
 800a27c:	4611      	mov	r1, r2
 800a27e:	9201      	str	r2, [sp, #4]
 800a280:	f000 f87a 	bl	800a378 <_malloc_r>
 800a284:	9a01      	ldr	r2, [sp, #4]
 800a286:	4605      	mov	r5, r0
 800a288:	b930      	cbnz	r0, 800a298 <_calloc_r+0x24>
 800a28a:	4628      	mov	r0, r5
 800a28c:	b003      	add	sp, #12
 800a28e:	bd30      	pop	{r4, r5, pc}
 800a290:	220c      	movs	r2, #12
 800a292:	6002      	str	r2, [r0, #0]
 800a294:	2500      	movs	r5, #0
 800a296:	e7f8      	b.n	800a28a <_calloc_r+0x16>
 800a298:	4621      	mov	r1, r4
 800a29a:	f7ff ffe3 	bl	800a264 <memset>
 800a29e:	e7f4      	b.n	800a28a <_calloc_r+0x16>

0800a2a0 <_free_r>:
 800a2a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2a2:	2900      	cmp	r1, #0
 800a2a4:	d044      	beq.n	800a330 <_free_r+0x90>
 800a2a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2aa:	9001      	str	r0, [sp, #4]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	f1a1 0404 	sub.w	r4, r1, #4
 800a2b2:	bfb8      	it	lt
 800a2b4:	18e4      	addlt	r4, r4, r3
 800a2b6:	f000 f8e3 	bl	800a480 <__malloc_lock>
 800a2ba:	4a1e      	ldr	r2, [pc, #120]	; (800a334 <_free_r+0x94>)
 800a2bc:	9801      	ldr	r0, [sp, #4]
 800a2be:	6813      	ldr	r3, [r2, #0]
 800a2c0:	b933      	cbnz	r3, 800a2d0 <_free_r+0x30>
 800a2c2:	6063      	str	r3, [r4, #4]
 800a2c4:	6014      	str	r4, [r2, #0]
 800a2c6:	b003      	add	sp, #12
 800a2c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2cc:	f000 b8de 	b.w	800a48c <__malloc_unlock>
 800a2d0:	42a3      	cmp	r3, r4
 800a2d2:	d908      	bls.n	800a2e6 <_free_r+0x46>
 800a2d4:	6825      	ldr	r5, [r4, #0]
 800a2d6:	1961      	adds	r1, r4, r5
 800a2d8:	428b      	cmp	r3, r1
 800a2da:	bf01      	itttt	eq
 800a2dc:	6819      	ldreq	r1, [r3, #0]
 800a2de:	685b      	ldreq	r3, [r3, #4]
 800a2e0:	1949      	addeq	r1, r1, r5
 800a2e2:	6021      	streq	r1, [r4, #0]
 800a2e4:	e7ed      	b.n	800a2c2 <_free_r+0x22>
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	b10b      	cbz	r3, 800a2f0 <_free_r+0x50>
 800a2ec:	42a3      	cmp	r3, r4
 800a2ee:	d9fa      	bls.n	800a2e6 <_free_r+0x46>
 800a2f0:	6811      	ldr	r1, [r2, #0]
 800a2f2:	1855      	adds	r5, r2, r1
 800a2f4:	42a5      	cmp	r5, r4
 800a2f6:	d10b      	bne.n	800a310 <_free_r+0x70>
 800a2f8:	6824      	ldr	r4, [r4, #0]
 800a2fa:	4421      	add	r1, r4
 800a2fc:	1854      	adds	r4, r2, r1
 800a2fe:	42a3      	cmp	r3, r4
 800a300:	6011      	str	r1, [r2, #0]
 800a302:	d1e0      	bne.n	800a2c6 <_free_r+0x26>
 800a304:	681c      	ldr	r4, [r3, #0]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	6053      	str	r3, [r2, #4]
 800a30a:	4421      	add	r1, r4
 800a30c:	6011      	str	r1, [r2, #0]
 800a30e:	e7da      	b.n	800a2c6 <_free_r+0x26>
 800a310:	d902      	bls.n	800a318 <_free_r+0x78>
 800a312:	230c      	movs	r3, #12
 800a314:	6003      	str	r3, [r0, #0]
 800a316:	e7d6      	b.n	800a2c6 <_free_r+0x26>
 800a318:	6825      	ldr	r5, [r4, #0]
 800a31a:	1961      	adds	r1, r4, r5
 800a31c:	428b      	cmp	r3, r1
 800a31e:	bf04      	itt	eq
 800a320:	6819      	ldreq	r1, [r3, #0]
 800a322:	685b      	ldreq	r3, [r3, #4]
 800a324:	6063      	str	r3, [r4, #4]
 800a326:	bf04      	itt	eq
 800a328:	1949      	addeq	r1, r1, r5
 800a32a:	6021      	streq	r1, [r4, #0]
 800a32c:	6054      	str	r4, [r2, #4]
 800a32e:	e7ca      	b.n	800a2c6 <_free_r+0x26>
 800a330:	b003      	add	sp, #12
 800a332:	bd30      	pop	{r4, r5, pc}
 800a334:	20001340 	.word	0x20001340

0800a338 <sbrk_aligned>:
 800a338:	b570      	push	{r4, r5, r6, lr}
 800a33a:	4e0e      	ldr	r6, [pc, #56]	; (800a374 <sbrk_aligned+0x3c>)
 800a33c:	460c      	mov	r4, r1
 800a33e:	6831      	ldr	r1, [r6, #0]
 800a340:	4605      	mov	r5, r0
 800a342:	b911      	cbnz	r1, 800a34a <sbrk_aligned+0x12>
 800a344:	f000 f88c 	bl	800a460 <_sbrk_r>
 800a348:	6030      	str	r0, [r6, #0]
 800a34a:	4621      	mov	r1, r4
 800a34c:	4628      	mov	r0, r5
 800a34e:	f000 f887 	bl	800a460 <_sbrk_r>
 800a352:	1c43      	adds	r3, r0, #1
 800a354:	d00a      	beq.n	800a36c <sbrk_aligned+0x34>
 800a356:	1cc4      	adds	r4, r0, #3
 800a358:	f024 0403 	bic.w	r4, r4, #3
 800a35c:	42a0      	cmp	r0, r4
 800a35e:	d007      	beq.n	800a370 <sbrk_aligned+0x38>
 800a360:	1a21      	subs	r1, r4, r0
 800a362:	4628      	mov	r0, r5
 800a364:	f000 f87c 	bl	800a460 <_sbrk_r>
 800a368:	3001      	adds	r0, #1
 800a36a:	d101      	bne.n	800a370 <sbrk_aligned+0x38>
 800a36c:	f04f 34ff 	mov.w	r4, #4294967295
 800a370:	4620      	mov	r0, r4
 800a372:	bd70      	pop	{r4, r5, r6, pc}
 800a374:	20001344 	.word	0x20001344

0800a378 <_malloc_r>:
 800a378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a37c:	1ccd      	adds	r5, r1, #3
 800a37e:	f025 0503 	bic.w	r5, r5, #3
 800a382:	3508      	adds	r5, #8
 800a384:	2d0c      	cmp	r5, #12
 800a386:	bf38      	it	cc
 800a388:	250c      	movcc	r5, #12
 800a38a:	2d00      	cmp	r5, #0
 800a38c:	4607      	mov	r7, r0
 800a38e:	db01      	blt.n	800a394 <_malloc_r+0x1c>
 800a390:	42a9      	cmp	r1, r5
 800a392:	d905      	bls.n	800a3a0 <_malloc_r+0x28>
 800a394:	230c      	movs	r3, #12
 800a396:	603b      	str	r3, [r7, #0]
 800a398:	2600      	movs	r6, #0
 800a39a:	4630      	mov	r0, r6
 800a39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3a0:	4e2e      	ldr	r6, [pc, #184]	; (800a45c <_malloc_r+0xe4>)
 800a3a2:	f000 f86d 	bl	800a480 <__malloc_lock>
 800a3a6:	6833      	ldr	r3, [r6, #0]
 800a3a8:	461c      	mov	r4, r3
 800a3aa:	bb34      	cbnz	r4, 800a3fa <_malloc_r+0x82>
 800a3ac:	4629      	mov	r1, r5
 800a3ae:	4638      	mov	r0, r7
 800a3b0:	f7ff ffc2 	bl	800a338 <sbrk_aligned>
 800a3b4:	1c43      	adds	r3, r0, #1
 800a3b6:	4604      	mov	r4, r0
 800a3b8:	d14d      	bne.n	800a456 <_malloc_r+0xde>
 800a3ba:	6834      	ldr	r4, [r6, #0]
 800a3bc:	4626      	mov	r6, r4
 800a3be:	2e00      	cmp	r6, #0
 800a3c0:	d140      	bne.n	800a444 <_malloc_r+0xcc>
 800a3c2:	6823      	ldr	r3, [r4, #0]
 800a3c4:	4631      	mov	r1, r6
 800a3c6:	4638      	mov	r0, r7
 800a3c8:	eb04 0803 	add.w	r8, r4, r3
 800a3cc:	f000 f848 	bl	800a460 <_sbrk_r>
 800a3d0:	4580      	cmp	r8, r0
 800a3d2:	d13a      	bne.n	800a44a <_malloc_r+0xd2>
 800a3d4:	6821      	ldr	r1, [r4, #0]
 800a3d6:	3503      	adds	r5, #3
 800a3d8:	1a6d      	subs	r5, r5, r1
 800a3da:	f025 0503 	bic.w	r5, r5, #3
 800a3de:	3508      	adds	r5, #8
 800a3e0:	2d0c      	cmp	r5, #12
 800a3e2:	bf38      	it	cc
 800a3e4:	250c      	movcc	r5, #12
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	4638      	mov	r0, r7
 800a3ea:	f7ff ffa5 	bl	800a338 <sbrk_aligned>
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	d02b      	beq.n	800a44a <_malloc_r+0xd2>
 800a3f2:	6823      	ldr	r3, [r4, #0]
 800a3f4:	442b      	add	r3, r5
 800a3f6:	6023      	str	r3, [r4, #0]
 800a3f8:	e00e      	b.n	800a418 <_malloc_r+0xa0>
 800a3fa:	6822      	ldr	r2, [r4, #0]
 800a3fc:	1b52      	subs	r2, r2, r5
 800a3fe:	d41e      	bmi.n	800a43e <_malloc_r+0xc6>
 800a400:	2a0b      	cmp	r2, #11
 800a402:	d916      	bls.n	800a432 <_malloc_r+0xba>
 800a404:	1961      	adds	r1, r4, r5
 800a406:	42a3      	cmp	r3, r4
 800a408:	6025      	str	r5, [r4, #0]
 800a40a:	bf18      	it	ne
 800a40c:	6059      	strne	r1, [r3, #4]
 800a40e:	6863      	ldr	r3, [r4, #4]
 800a410:	bf08      	it	eq
 800a412:	6031      	streq	r1, [r6, #0]
 800a414:	5162      	str	r2, [r4, r5]
 800a416:	604b      	str	r3, [r1, #4]
 800a418:	4638      	mov	r0, r7
 800a41a:	f104 060b 	add.w	r6, r4, #11
 800a41e:	f000 f835 	bl	800a48c <__malloc_unlock>
 800a422:	f026 0607 	bic.w	r6, r6, #7
 800a426:	1d23      	adds	r3, r4, #4
 800a428:	1af2      	subs	r2, r6, r3
 800a42a:	d0b6      	beq.n	800a39a <_malloc_r+0x22>
 800a42c:	1b9b      	subs	r3, r3, r6
 800a42e:	50a3      	str	r3, [r4, r2]
 800a430:	e7b3      	b.n	800a39a <_malloc_r+0x22>
 800a432:	6862      	ldr	r2, [r4, #4]
 800a434:	42a3      	cmp	r3, r4
 800a436:	bf0c      	ite	eq
 800a438:	6032      	streq	r2, [r6, #0]
 800a43a:	605a      	strne	r2, [r3, #4]
 800a43c:	e7ec      	b.n	800a418 <_malloc_r+0xa0>
 800a43e:	4623      	mov	r3, r4
 800a440:	6864      	ldr	r4, [r4, #4]
 800a442:	e7b2      	b.n	800a3aa <_malloc_r+0x32>
 800a444:	4634      	mov	r4, r6
 800a446:	6876      	ldr	r6, [r6, #4]
 800a448:	e7b9      	b.n	800a3be <_malloc_r+0x46>
 800a44a:	230c      	movs	r3, #12
 800a44c:	603b      	str	r3, [r7, #0]
 800a44e:	4638      	mov	r0, r7
 800a450:	f000 f81c 	bl	800a48c <__malloc_unlock>
 800a454:	e7a1      	b.n	800a39a <_malloc_r+0x22>
 800a456:	6025      	str	r5, [r4, #0]
 800a458:	e7de      	b.n	800a418 <_malloc_r+0xa0>
 800a45a:	bf00      	nop
 800a45c:	20001340 	.word	0x20001340

0800a460 <_sbrk_r>:
 800a460:	b538      	push	{r3, r4, r5, lr}
 800a462:	4d06      	ldr	r5, [pc, #24]	; (800a47c <_sbrk_r+0x1c>)
 800a464:	2300      	movs	r3, #0
 800a466:	4604      	mov	r4, r0
 800a468:	4608      	mov	r0, r1
 800a46a:	602b      	str	r3, [r5, #0]
 800a46c:	f7fa fd4e 	bl	8004f0c <_sbrk>
 800a470:	1c43      	adds	r3, r0, #1
 800a472:	d102      	bne.n	800a47a <_sbrk_r+0x1a>
 800a474:	682b      	ldr	r3, [r5, #0]
 800a476:	b103      	cbz	r3, 800a47a <_sbrk_r+0x1a>
 800a478:	6023      	str	r3, [r4, #0]
 800a47a:	bd38      	pop	{r3, r4, r5, pc}
 800a47c:	20001348 	.word	0x20001348

0800a480 <__malloc_lock>:
 800a480:	4801      	ldr	r0, [pc, #4]	; (800a488 <__malloc_lock+0x8>)
 800a482:	f000 b809 	b.w	800a498 <__retarget_lock_acquire_recursive>
 800a486:	bf00      	nop
 800a488:	2000134c 	.word	0x2000134c

0800a48c <__malloc_unlock>:
 800a48c:	4801      	ldr	r0, [pc, #4]	; (800a494 <__malloc_unlock+0x8>)
 800a48e:	f000 b804 	b.w	800a49a <__retarget_lock_release_recursive>
 800a492:	bf00      	nop
 800a494:	2000134c 	.word	0x2000134c

0800a498 <__retarget_lock_acquire_recursive>:
 800a498:	4770      	bx	lr

0800a49a <__retarget_lock_release_recursive>:
 800a49a:	4770      	bx	lr
 800a49c:	0000      	movs	r0, r0
	...

0800a4a0 <cos>:
 800a4a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4a2:	ec53 2b10 	vmov	r2, r3, d0
 800a4a6:	4826      	ldr	r0, [pc, #152]	; (800a540 <cos+0xa0>)
 800a4a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a4ac:	4281      	cmp	r1, r0
 800a4ae:	dc06      	bgt.n	800a4be <cos+0x1e>
 800a4b0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a538 <cos+0x98>
 800a4b4:	b005      	add	sp, #20
 800a4b6:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4ba:	f001 bc3d 	b.w	800bd38 <__kernel_cos>
 800a4be:	4821      	ldr	r0, [pc, #132]	; (800a544 <cos+0xa4>)
 800a4c0:	4281      	cmp	r1, r0
 800a4c2:	dd09      	ble.n	800a4d8 <cos+0x38>
 800a4c4:	ee10 0a10 	vmov	r0, s0
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	f7f5 fe89 	bl	80001e0 <__aeabi_dsub>
 800a4ce:	ec41 0b10 	vmov	d0, r0, r1
 800a4d2:	b005      	add	sp, #20
 800a4d4:	f85d fb04 	ldr.w	pc, [sp], #4
 800a4d8:	4668      	mov	r0, sp
 800a4da:	f001 f96d 	bl	800b7b8 <__ieee754_rem_pio2>
 800a4de:	f000 0003 	and.w	r0, r0, #3
 800a4e2:	2801      	cmp	r0, #1
 800a4e4:	d00b      	beq.n	800a4fe <cos+0x5e>
 800a4e6:	2802      	cmp	r0, #2
 800a4e8:	d016      	beq.n	800a518 <cos+0x78>
 800a4ea:	b9e0      	cbnz	r0, 800a526 <cos+0x86>
 800a4ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a4f0:	ed9d 0b00 	vldr	d0, [sp]
 800a4f4:	f001 fc20 	bl	800bd38 <__kernel_cos>
 800a4f8:	ec51 0b10 	vmov	r0, r1, d0
 800a4fc:	e7e7      	b.n	800a4ce <cos+0x2e>
 800a4fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a502:	ed9d 0b00 	vldr	d0, [sp]
 800a506:	f002 f82f 	bl	800c568 <__kernel_sin>
 800a50a:	ec53 2b10 	vmov	r2, r3, d0
 800a50e:	ee10 0a10 	vmov	r0, s0
 800a512:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a516:	e7da      	b.n	800a4ce <cos+0x2e>
 800a518:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a51c:	ed9d 0b00 	vldr	d0, [sp]
 800a520:	f001 fc0a 	bl	800bd38 <__kernel_cos>
 800a524:	e7f1      	b.n	800a50a <cos+0x6a>
 800a526:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a52a:	ed9d 0b00 	vldr	d0, [sp]
 800a52e:	2001      	movs	r0, #1
 800a530:	f002 f81a 	bl	800c568 <__kernel_sin>
 800a534:	e7e0      	b.n	800a4f8 <cos+0x58>
 800a536:	bf00      	nop
	...
 800a540:	3fe921fb 	.word	0x3fe921fb
 800a544:	7fefffff 	.word	0x7fefffff

0800a548 <floor>:
 800a548:	ec51 0b10 	vmov	r0, r1, d0
 800a54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a550:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a554:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a558:	2e13      	cmp	r6, #19
 800a55a:	ee10 5a10 	vmov	r5, s0
 800a55e:	ee10 8a10 	vmov	r8, s0
 800a562:	460c      	mov	r4, r1
 800a564:	dc32      	bgt.n	800a5cc <floor+0x84>
 800a566:	2e00      	cmp	r6, #0
 800a568:	da14      	bge.n	800a594 <floor+0x4c>
 800a56a:	a333      	add	r3, pc, #204	; (adr r3, 800a638 <floor+0xf0>)
 800a56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a570:	f7f5 fe38 	bl	80001e4 <__adddf3>
 800a574:	2200      	movs	r2, #0
 800a576:	2300      	movs	r3, #0
 800a578:	f7f6 fa7a 	bl	8000a70 <__aeabi_dcmpgt>
 800a57c:	b138      	cbz	r0, 800a58e <floor+0x46>
 800a57e:	2c00      	cmp	r4, #0
 800a580:	da57      	bge.n	800a632 <floor+0xea>
 800a582:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a586:	431d      	orrs	r5, r3
 800a588:	d001      	beq.n	800a58e <floor+0x46>
 800a58a:	4c2d      	ldr	r4, [pc, #180]	; (800a640 <floor+0xf8>)
 800a58c:	2500      	movs	r5, #0
 800a58e:	4621      	mov	r1, r4
 800a590:	4628      	mov	r0, r5
 800a592:	e025      	b.n	800a5e0 <floor+0x98>
 800a594:	4f2b      	ldr	r7, [pc, #172]	; (800a644 <floor+0xfc>)
 800a596:	4137      	asrs	r7, r6
 800a598:	ea01 0307 	and.w	r3, r1, r7
 800a59c:	4303      	orrs	r3, r0
 800a59e:	d01f      	beq.n	800a5e0 <floor+0x98>
 800a5a0:	a325      	add	r3, pc, #148	; (adr r3, 800a638 <floor+0xf0>)
 800a5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a6:	f7f5 fe1d 	bl	80001e4 <__adddf3>
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	f7f6 fa5f 	bl	8000a70 <__aeabi_dcmpgt>
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	d0eb      	beq.n	800a58e <floor+0x46>
 800a5b6:	2c00      	cmp	r4, #0
 800a5b8:	bfbe      	ittt	lt
 800a5ba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a5be:	fa43 f606 	asrlt.w	r6, r3, r6
 800a5c2:	19a4      	addlt	r4, r4, r6
 800a5c4:	ea24 0407 	bic.w	r4, r4, r7
 800a5c8:	2500      	movs	r5, #0
 800a5ca:	e7e0      	b.n	800a58e <floor+0x46>
 800a5cc:	2e33      	cmp	r6, #51	; 0x33
 800a5ce:	dd0b      	ble.n	800a5e8 <floor+0xa0>
 800a5d0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a5d4:	d104      	bne.n	800a5e0 <floor+0x98>
 800a5d6:	ee10 2a10 	vmov	r2, s0
 800a5da:	460b      	mov	r3, r1
 800a5dc:	f7f5 fe02 	bl	80001e4 <__adddf3>
 800a5e0:	ec41 0b10 	vmov	d0, r0, r1
 800a5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5e8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a5ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a5f0:	fa23 f707 	lsr.w	r7, r3, r7
 800a5f4:	4207      	tst	r7, r0
 800a5f6:	d0f3      	beq.n	800a5e0 <floor+0x98>
 800a5f8:	a30f      	add	r3, pc, #60	; (adr r3, 800a638 <floor+0xf0>)
 800a5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fe:	f7f5 fdf1 	bl	80001e4 <__adddf3>
 800a602:	2200      	movs	r2, #0
 800a604:	2300      	movs	r3, #0
 800a606:	f7f6 fa33 	bl	8000a70 <__aeabi_dcmpgt>
 800a60a:	2800      	cmp	r0, #0
 800a60c:	d0bf      	beq.n	800a58e <floor+0x46>
 800a60e:	2c00      	cmp	r4, #0
 800a610:	da02      	bge.n	800a618 <floor+0xd0>
 800a612:	2e14      	cmp	r6, #20
 800a614:	d103      	bne.n	800a61e <floor+0xd6>
 800a616:	3401      	adds	r4, #1
 800a618:	ea25 0507 	bic.w	r5, r5, r7
 800a61c:	e7b7      	b.n	800a58e <floor+0x46>
 800a61e:	2301      	movs	r3, #1
 800a620:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a624:	fa03 f606 	lsl.w	r6, r3, r6
 800a628:	4435      	add	r5, r6
 800a62a:	4545      	cmp	r5, r8
 800a62c:	bf38      	it	cc
 800a62e:	18e4      	addcc	r4, r4, r3
 800a630:	e7f2      	b.n	800a618 <floor+0xd0>
 800a632:	2500      	movs	r5, #0
 800a634:	462c      	mov	r4, r5
 800a636:	e7aa      	b.n	800a58e <floor+0x46>
 800a638:	8800759c 	.word	0x8800759c
 800a63c:	7e37e43c 	.word	0x7e37e43c
 800a640:	bff00000 	.word	0xbff00000
 800a644:	000fffff 	.word	0x000fffff

0800a648 <sin>:
 800a648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a64a:	ec53 2b10 	vmov	r2, r3, d0
 800a64e:	4828      	ldr	r0, [pc, #160]	; (800a6f0 <sin+0xa8>)
 800a650:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a654:	4281      	cmp	r1, r0
 800a656:	dc07      	bgt.n	800a668 <sin+0x20>
 800a658:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a6e8 <sin+0xa0>
 800a65c:	2000      	movs	r0, #0
 800a65e:	b005      	add	sp, #20
 800a660:	f85d eb04 	ldr.w	lr, [sp], #4
 800a664:	f001 bf80 	b.w	800c568 <__kernel_sin>
 800a668:	4822      	ldr	r0, [pc, #136]	; (800a6f4 <sin+0xac>)
 800a66a:	4281      	cmp	r1, r0
 800a66c:	dd09      	ble.n	800a682 <sin+0x3a>
 800a66e:	ee10 0a10 	vmov	r0, s0
 800a672:	4619      	mov	r1, r3
 800a674:	f7f5 fdb4 	bl	80001e0 <__aeabi_dsub>
 800a678:	ec41 0b10 	vmov	d0, r0, r1
 800a67c:	b005      	add	sp, #20
 800a67e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a682:	4668      	mov	r0, sp
 800a684:	f001 f898 	bl	800b7b8 <__ieee754_rem_pio2>
 800a688:	f000 0003 	and.w	r0, r0, #3
 800a68c:	2801      	cmp	r0, #1
 800a68e:	d00c      	beq.n	800a6aa <sin+0x62>
 800a690:	2802      	cmp	r0, #2
 800a692:	d011      	beq.n	800a6b8 <sin+0x70>
 800a694:	b9f0      	cbnz	r0, 800a6d4 <sin+0x8c>
 800a696:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a69a:	ed9d 0b00 	vldr	d0, [sp]
 800a69e:	2001      	movs	r0, #1
 800a6a0:	f001 ff62 	bl	800c568 <__kernel_sin>
 800a6a4:	ec51 0b10 	vmov	r0, r1, d0
 800a6a8:	e7e6      	b.n	800a678 <sin+0x30>
 800a6aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6ae:	ed9d 0b00 	vldr	d0, [sp]
 800a6b2:	f001 fb41 	bl	800bd38 <__kernel_cos>
 800a6b6:	e7f5      	b.n	800a6a4 <sin+0x5c>
 800a6b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6bc:	ed9d 0b00 	vldr	d0, [sp]
 800a6c0:	2001      	movs	r0, #1
 800a6c2:	f001 ff51 	bl	800c568 <__kernel_sin>
 800a6c6:	ec53 2b10 	vmov	r2, r3, d0
 800a6ca:	ee10 0a10 	vmov	r0, s0
 800a6ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a6d2:	e7d1      	b.n	800a678 <sin+0x30>
 800a6d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6d8:	ed9d 0b00 	vldr	d0, [sp]
 800a6dc:	f001 fb2c 	bl	800bd38 <__kernel_cos>
 800a6e0:	e7f1      	b.n	800a6c6 <sin+0x7e>
 800a6e2:	bf00      	nop
 800a6e4:	f3af 8000 	nop.w
	...
 800a6f0:	3fe921fb 	.word	0x3fe921fb
 800a6f4:	7fefffff 	.word	0x7fefffff

0800a6f8 <acos>:
 800a6f8:	b538      	push	{r3, r4, r5, lr}
 800a6fa:	ed2d 8b02 	vpush	{d8}
 800a6fe:	ec55 4b10 	vmov	r4, r5, d0
 800a702:	f000 f8c9 	bl	800a898 <__ieee754_acos>
 800a706:	4622      	mov	r2, r4
 800a708:	462b      	mov	r3, r5
 800a70a:	4620      	mov	r0, r4
 800a70c:	4629      	mov	r1, r5
 800a70e:	eeb0 8a40 	vmov.f32	s16, s0
 800a712:	eef0 8a60 	vmov.f32	s17, s1
 800a716:	f7f6 f9b5 	bl	8000a84 <__aeabi_dcmpun>
 800a71a:	b9a8      	cbnz	r0, 800a748 <acos+0x50>
 800a71c:	ec45 4b10 	vmov	d0, r4, r5
 800a720:	f002 f810 	bl	800c744 <fabs>
 800a724:	4b0c      	ldr	r3, [pc, #48]	; (800a758 <acos+0x60>)
 800a726:	ec51 0b10 	vmov	r0, r1, d0
 800a72a:	2200      	movs	r2, #0
 800a72c:	f7f6 f9a0 	bl	8000a70 <__aeabi_dcmpgt>
 800a730:	b150      	cbz	r0, 800a748 <acos+0x50>
 800a732:	f7ff fd4f 	bl	800a1d4 <__errno>
 800a736:	ecbd 8b02 	vpop	{d8}
 800a73a:	2321      	movs	r3, #33	; 0x21
 800a73c:	6003      	str	r3, [r0, #0]
 800a73e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a742:	4806      	ldr	r0, [pc, #24]	; (800a75c <acos+0x64>)
 800a744:	f002 b814 	b.w	800c770 <nan>
 800a748:	eeb0 0a48 	vmov.f32	s0, s16
 800a74c:	eef0 0a68 	vmov.f32	s1, s17
 800a750:	ecbd 8b02 	vpop	{d8}
 800a754:	bd38      	pop	{r3, r4, r5, pc}
 800a756:	bf00      	nop
 800a758:	3ff00000 	.word	0x3ff00000
 800a75c:	0800c8c8 	.word	0x0800c8c8

0800a760 <pow>:
 800a760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a762:	ed2d 8b02 	vpush	{d8}
 800a766:	eeb0 8a40 	vmov.f32	s16, s0
 800a76a:	eef0 8a60 	vmov.f32	s17, s1
 800a76e:	ec55 4b11 	vmov	r4, r5, d1
 800a772:	f000 faf1 	bl	800ad58 <__ieee754_pow>
 800a776:	4622      	mov	r2, r4
 800a778:	462b      	mov	r3, r5
 800a77a:	4620      	mov	r0, r4
 800a77c:	4629      	mov	r1, r5
 800a77e:	ec57 6b10 	vmov	r6, r7, d0
 800a782:	f7f6 f97f 	bl	8000a84 <__aeabi_dcmpun>
 800a786:	2800      	cmp	r0, #0
 800a788:	d13b      	bne.n	800a802 <pow+0xa2>
 800a78a:	ec51 0b18 	vmov	r0, r1, d8
 800a78e:	2200      	movs	r2, #0
 800a790:	2300      	movs	r3, #0
 800a792:	f7f6 f945 	bl	8000a20 <__aeabi_dcmpeq>
 800a796:	b1b8      	cbz	r0, 800a7c8 <pow+0x68>
 800a798:	2200      	movs	r2, #0
 800a79a:	2300      	movs	r3, #0
 800a79c:	4620      	mov	r0, r4
 800a79e:	4629      	mov	r1, r5
 800a7a0:	f7f6 f93e 	bl	8000a20 <__aeabi_dcmpeq>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	d146      	bne.n	800a836 <pow+0xd6>
 800a7a8:	ec45 4b10 	vmov	d0, r4, r5
 800a7ac:	f001 ffd3 	bl	800c756 <finite>
 800a7b0:	b338      	cbz	r0, 800a802 <pow+0xa2>
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	4629      	mov	r1, r5
 800a7ba:	f7f6 f93b 	bl	8000a34 <__aeabi_dcmplt>
 800a7be:	b300      	cbz	r0, 800a802 <pow+0xa2>
 800a7c0:	f7ff fd08 	bl	800a1d4 <__errno>
 800a7c4:	2322      	movs	r3, #34	; 0x22
 800a7c6:	e01b      	b.n	800a800 <pow+0xa0>
 800a7c8:	ec47 6b10 	vmov	d0, r6, r7
 800a7cc:	f001 ffc3 	bl	800c756 <finite>
 800a7d0:	b9e0      	cbnz	r0, 800a80c <pow+0xac>
 800a7d2:	eeb0 0a48 	vmov.f32	s0, s16
 800a7d6:	eef0 0a68 	vmov.f32	s1, s17
 800a7da:	f001 ffbc 	bl	800c756 <finite>
 800a7de:	b1a8      	cbz	r0, 800a80c <pow+0xac>
 800a7e0:	ec45 4b10 	vmov	d0, r4, r5
 800a7e4:	f001 ffb7 	bl	800c756 <finite>
 800a7e8:	b180      	cbz	r0, 800a80c <pow+0xac>
 800a7ea:	4632      	mov	r2, r6
 800a7ec:	463b      	mov	r3, r7
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	4639      	mov	r1, r7
 800a7f2:	f7f6 f947 	bl	8000a84 <__aeabi_dcmpun>
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	d0e2      	beq.n	800a7c0 <pow+0x60>
 800a7fa:	f7ff fceb 	bl	800a1d4 <__errno>
 800a7fe:	2321      	movs	r3, #33	; 0x21
 800a800:	6003      	str	r3, [r0, #0]
 800a802:	ecbd 8b02 	vpop	{d8}
 800a806:	ec47 6b10 	vmov	d0, r6, r7
 800a80a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a80c:	2200      	movs	r2, #0
 800a80e:	2300      	movs	r3, #0
 800a810:	4630      	mov	r0, r6
 800a812:	4639      	mov	r1, r7
 800a814:	f7f6 f904 	bl	8000a20 <__aeabi_dcmpeq>
 800a818:	2800      	cmp	r0, #0
 800a81a:	d0f2      	beq.n	800a802 <pow+0xa2>
 800a81c:	eeb0 0a48 	vmov.f32	s0, s16
 800a820:	eef0 0a68 	vmov.f32	s1, s17
 800a824:	f001 ff97 	bl	800c756 <finite>
 800a828:	2800      	cmp	r0, #0
 800a82a:	d0ea      	beq.n	800a802 <pow+0xa2>
 800a82c:	ec45 4b10 	vmov	d0, r4, r5
 800a830:	f001 ff91 	bl	800c756 <finite>
 800a834:	e7c3      	b.n	800a7be <pow+0x5e>
 800a836:	4f01      	ldr	r7, [pc, #4]	; (800a83c <pow+0xdc>)
 800a838:	2600      	movs	r6, #0
 800a83a:	e7e2      	b.n	800a802 <pow+0xa2>
 800a83c:	3ff00000 	.word	0x3ff00000

0800a840 <sqrt>:
 800a840:	b538      	push	{r3, r4, r5, lr}
 800a842:	ed2d 8b02 	vpush	{d8}
 800a846:	ec55 4b10 	vmov	r4, r5, d0
 800a84a:	f001 f9c1 	bl	800bbd0 <__ieee754_sqrt>
 800a84e:	4622      	mov	r2, r4
 800a850:	462b      	mov	r3, r5
 800a852:	4620      	mov	r0, r4
 800a854:	4629      	mov	r1, r5
 800a856:	eeb0 8a40 	vmov.f32	s16, s0
 800a85a:	eef0 8a60 	vmov.f32	s17, s1
 800a85e:	f7f6 f911 	bl	8000a84 <__aeabi_dcmpun>
 800a862:	b990      	cbnz	r0, 800a88a <sqrt+0x4a>
 800a864:	2200      	movs	r2, #0
 800a866:	2300      	movs	r3, #0
 800a868:	4620      	mov	r0, r4
 800a86a:	4629      	mov	r1, r5
 800a86c:	f7f6 f8e2 	bl	8000a34 <__aeabi_dcmplt>
 800a870:	b158      	cbz	r0, 800a88a <sqrt+0x4a>
 800a872:	f7ff fcaf 	bl	800a1d4 <__errno>
 800a876:	2321      	movs	r3, #33	; 0x21
 800a878:	6003      	str	r3, [r0, #0]
 800a87a:	2200      	movs	r2, #0
 800a87c:	2300      	movs	r3, #0
 800a87e:	4610      	mov	r0, r2
 800a880:	4619      	mov	r1, r3
 800a882:	f7f5 ff8f 	bl	80007a4 <__aeabi_ddiv>
 800a886:	ec41 0b18 	vmov	d8, r0, r1
 800a88a:	eeb0 0a48 	vmov.f32	s0, s16
 800a88e:	eef0 0a68 	vmov.f32	s1, s17
 800a892:	ecbd 8b02 	vpop	{d8}
 800a896:	bd38      	pop	{r3, r4, r5, pc}

0800a898 <__ieee754_acos>:
 800a898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a89c:	ec55 4b10 	vmov	r4, r5, d0
 800a8a0:	49b7      	ldr	r1, [pc, #732]	; (800ab80 <__ieee754_acos+0x2e8>)
 800a8a2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a8a6:	428b      	cmp	r3, r1
 800a8a8:	dd1b      	ble.n	800a8e2 <__ieee754_acos+0x4a>
 800a8aa:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800a8ae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a8b2:	4323      	orrs	r3, r4
 800a8b4:	d106      	bne.n	800a8c4 <__ieee754_acos+0x2c>
 800a8b6:	2d00      	cmp	r5, #0
 800a8b8:	f300 8211 	bgt.w	800acde <__ieee754_acos+0x446>
 800a8bc:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800ab18 <__ieee754_acos+0x280>
 800a8c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c4:	ee10 2a10 	vmov	r2, s0
 800a8c8:	462b      	mov	r3, r5
 800a8ca:	ee10 0a10 	vmov	r0, s0
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	f7f5 fc86 	bl	80001e0 <__aeabi_dsub>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	f7f5 ff64 	bl	80007a4 <__aeabi_ddiv>
 800a8dc:	ec41 0b10 	vmov	d0, r0, r1
 800a8e0:	e7ee      	b.n	800a8c0 <__ieee754_acos+0x28>
 800a8e2:	49a8      	ldr	r1, [pc, #672]	; (800ab84 <__ieee754_acos+0x2ec>)
 800a8e4:	428b      	cmp	r3, r1
 800a8e6:	f300 8087 	bgt.w	800a9f8 <__ieee754_acos+0x160>
 800a8ea:	4aa7      	ldr	r2, [pc, #668]	; (800ab88 <__ieee754_acos+0x2f0>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	f340 81f9 	ble.w	800ace4 <__ieee754_acos+0x44c>
 800a8f2:	ee10 2a10 	vmov	r2, s0
 800a8f6:	ee10 0a10 	vmov	r0, s0
 800a8fa:	462b      	mov	r3, r5
 800a8fc:	4629      	mov	r1, r5
 800a8fe:	f7f5 fe27 	bl	8000550 <__aeabi_dmul>
 800a902:	a387      	add	r3, pc, #540	; (adr r3, 800ab20 <__ieee754_acos+0x288>)
 800a904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a908:	4606      	mov	r6, r0
 800a90a:	460f      	mov	r7, r1
 800a90c:	f7f5 fe20 	bl	8000550 <__aeabi_dmul>
 800a910:	a385      	add	r3, pc, #532	; (adr r3, 800ab28 <__ieee754_acos+0x290>)
 800a912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a916:	f7f5 fc65 	bl	80001e4 <__adddf3>
 800a91a:	4632      	mov	r2, r6
 800a91c:	463b      	mov	r3, r7
 800a91e:	f7f5 fe17 	bl	8000550 <__aeabi_dmul>
 800a922:	a383      	add	r3, pc, #524	; (adr r3, 800ab30 <__ieee754_acos+0x298>)
 800a924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a928:	f7f5 fc5a 	bl	80001e0 <__aeabi_dsub>
 800a92c:	4632      	mov	r2, r6
 800a92e:	463b      	mov	r3, r7
 800a930:	f7f5 fe0e 	bl	8000550 <__aeabi_dmul>
 800a934:	a380      	add	r3, pc, #512	; (adr r3, 800ab38 <__ieee754_acos+0x2a0>)
 800a936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93a:	f7f5 fc53 	bl	80001e4 <__adddf3>
 800a93e:	4632      	mov	r2, r6
 800a940:	463b      	mov	r3, r7
 800a942:	f7f5 fe05 	bl	8000550 <__aeabi_dmul>
 800a946:	a37e      	add	r3, pc, #504	; (adr r3, 800ab40 <__ieee754_acos+0x2a8>)
 800a948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94c:	f7f5 fc48 	bl	80001e0 <__aeabi_dsub>
 800a950:	4632      	mov	r2, r6
 800a952:	463b      	mov	r3, r7
 800a954:	f7f5 fdfc 	bl	8000550 <__aeabi_dmul>
 800a958:	a37b      	add	r3, pc, #492	; (adr r3, 800ab48 <__ieee754_acos+0x2b0>)
 800a95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95e:	f7f5 fc41 	bl	80001e4 <__adddf3>
 800a962:	4632      	mov	r2, r6
 800a964:	463b      	mov	r3, r7
 800a966:	f7f5 fdf3 	bl	8000550 <__aeabi_dmul>
 800a96a:	a379      	add	r3, pc, #484	; (adr r3, 800ab50 <__ieee754_acos+0x2b8>)
 800a96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a970:	4680      	mov	r8, r0
 800a972:	4689      	mov	r9, r1
 800a974:	4630      	mov	r0, r6
 800a976:	4639      	mov	r1, r7
 800a978:	f7f5 fdea 	bl	8000550 <__aeabi_dmul>
 800a97c:	a376      	add	r3, pc, #472	; (adr r3, 800ab58 <__ieee754_acos+0x2c0>)
 800a97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a982:	f7f5 fc2d 	bl	80001e0 <__aeabi_dsub>
 800a986:	4632      	mov	r2, r6
 800a988:	463b      	mov	r3, r7
 800a98a:	f7f5 fde1 	bl	8000550 <__aeabi_dmul>
 800a98e:	a374      	add	r3, pc, #464	; (adr r3, 800ab60 <__ieee754_acos+0x2c8>)
 800a990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a994:	f7f5 fc26 	bl	80001e4 <__adddf3>
 800a998:	4632      	mov	r2, r6
 800a99a:	463b      	mov	r3, r7
 800a99c:	f7f5 fdd8 	bl	8000550 <__aeabi_dmul>
 800a9a0:	a371      	add	r3, pc, #452	; (adr r3, 800ab68 <__ieee754_acos+0x2d0>)
 800a9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a6:	f7f5 fc1b 	bl	80001e0 <__aeabi_dsub>
 800a9aa:	4632      	mov	r2, r6
 800a9ac:	463b      	mov	r3, r7
 800a9ae:	f7f5 fdcf 	bl	8000550 <__aeabi_dmul>
 800a9b2:	4b76      	ldr	r3, [pc, #472]	; (800ab8c <__ieee754_acos+0x2f4>)
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f7f5 fc15 	bl	80001e4 <__adddf3>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	460b      	mov	r3, r1
 800a9be:	4640      	mov	r0, r8
 800a9c0:	4649      	mov	r1, r9
 800a9c2:	f7f5 feef 	bl	80007a4 <__aeabi_ddiv>
 800a9c6:	4622      	mov	r2, r4
 800a9c8:	462b      	mov	r3, r5
 800a9ca:	f7f5 fdc1 	bl	8000550 <__aeabi_dmul>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	a167      	add	r1, pc, #412	; (adr r1, 800ab70 <__ieee754_acos+0x2d8>)
 800a9d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9d8:	f7f5 fc02 	bl	80001e0 <__aeabi_dsub>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	460b      	mov	r3, r1
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	4629      	mov	r1, r5
 800a9e4:	f7f5 fbfc 	bl	80001e0 <__aeabi_dsub>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	a162      	add	r1, pc, #392	; (adr r1, 800ab78 <__ieee754_acos+0x2e0>)
 800a9ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9f2:	f7f5 fbf5 	bl	80001e0 <__aeabi_dsub>
 800a9f6:	e771      	b.n	800a8dc <__ieee754_acos+0x44>
 800a9f8:	2d00      	cmp	r5, #0
 800a9fa:	f280 80cb 	bge.w	800ab94 <__ieee754_acos+0x2fc>
 800a9fe:	ee10 0a10 	vmov	r0, s0
 800aa02:	4b62      	ldr	r3, [pc, #392]	; (800ab8c <__ieee754_acos+0x2f4>)
 800aa04:	2200      	movs	r2, #0
 800aa06:	4629      	mov	r1, r5
 800aa08:	f7f5 fbec 	bl	80001e4 <__adddf3>
 800aa0c:	4b60      	ldr	r3, [pc, #384]	; (800ab90 <__ieee754_acos+0x2f8>)
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f7f5 fd9e 	bl	8000550 <__aeabi_dmul>
 800aa14:	a342      	add	r3, pc, #264	; (adr r3, 800ab20 <__ieee754_acos+0x288>)
 800aa16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1a:	4604      	mov	r4, r0
 800aa1c:	460d      	mov	r5, r1
 800aa1e:	f7f5 fd97 	bl	8000550 <__aeabi_dmul>
 800aa22:	a341      	add	r3, pc, #260	; (adr r3, 800ab28 <__ieee754_acos+0x290>)
 800aa24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa28:	f7f5 fbdc 	bl	80001e4 <__adddf3>
 800aa2c:	4622      	mov	r2, r4
 800aa2e:	462b      	mov	r3, r5
 800aa30:	f7f5 fd8e 	bl	8000550 <__aeabi_dmul>
 800aa34:	a33e      	add	r3, pc, #248	; (adr r3, 800ab30 <__ieee754_acos+0x298>)
 800aa36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3a:	f7f5 fbd1 	bl	80001e0 <__aeabi_dsub>
 800aa3e:	4622      	mov	r2, r4
 800aa40:	462b      	mov	r3, r5
 800aa42:	f7f5 fd85 	bl	8000550 <__aeabi_dmul>
 800aa46:	a33c      	add	r3, pc, #240	; (adr r3, 800ab38 <__ieee754_acos+0x2a0>)
 800aa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4c:	f7f5 fbca 	bl	80001e4 <__adddf3>
 800aa50:	4622      	mov	r2, r4
 800aa52:	462b      	mov	r3, r5
 800aa54:	f7f5 fd7c 	bl	8000550 <__aeabi_dmul>
 800aa58:	a339      	add	r3, pc, #228	; (adr r3, 800ab40 <__ieee754_acos+0x2a8>)
 800aa5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5e:	f7f5 fbbf 	bl	80001e0 <__aeabi_dsub>
 800aa62:	4622      	mov	r2, r4
 800aa64:	462b      	mov	r3, r5
 800aa66:	f7f5 fd73 	bl	8000550 <__aeabi_dmul>
 800aa6a:	a337      	add	r3, pc, #220	; (adr r3, 800ab48 <__ieee754_acos+0x2b0>)
 800aa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa70:	f7f5 fbb8 	bl	80001e4 <__adddf3>
 800aa74:	4622      	mov	r2, r4
 800aa76:	462b      	mov	r3, r5
 800aa78:	f7f5 fd6a 	bl	8000550 <__aeabi_dmul>
 800aa7c:	ec45 4b10 	vmov	d0, r4, r5
 800aa80:	4680      	mov	r8, r0
 800aa82:	4689      	mov	r9, r1
 800aa84:	f001 f8a4 	bl	800bbd0 <__ieee754_sqrt>
 800aa88:	a331      	add	r3, pc, #196	; (adr r3, 800ab50 <__ieee754_acos+0x2b8>)
 800aa8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8e:	4620      	mov	r0, r4
 800aa90:	4629      	mov	r1, r5
 800aa92:	ec57 6b10 	vmov	r6, r7, d0
 800aa96:	f7f5 fd5b 	bl	8000550 <__aeabi_dmul>
 800aa9a:	a32f      	add	r3, pc, #188	; (adr r3, 800ab58 <__ieee754_acos+0x2c0>)
 800aa9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa0:	f7f5 fb9e 	bl	80001e0 <__aeabi_dsub>
 800aaa4:	4622      	mov	r2, r4
 800aaa6:	462b      	mov	r3, r5
 800aaa8:	f7f5 fd52 	bl	8000550 <__aeabi_dmul>
 800aaac:	a32c      	add	r3, pc, #176	; (adr r3, 800ab60 <__ieee754_acos+0x2c8>)
 800aaae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab2:	f7f5 fb97 	bl	80001e4 <__adddf3>
 800aab6:	4622      	mov	r2, r4
 800aab8:	462b      	mov	r3, r5
 800aaba:	f7f5 fd49 	bl	8000550 <__aeabi_dmul>
 800aabe:	a32a      	add	r3, pc, #168	; (adr r3, 800ab68 <__ieee754_acos+0x2d0>)
 800aac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac4:	f7f5 fb8c 	bl	80001e0 <__aeabi_dsub>
 800aac8:	4622      	mov	r2, r4
 800aaca:	462b      	mov	r3, r5
 800aacc:	f7f5 fd40 	bl	8000550 <__aeabi_dmul>
 800aad0:	4b2e      	ldr	r3, [pc, #184]	; (800ab8c <__ieee754_acos+0x2f4>)
 800aad2:	2200      	movs	r2, #0
 800aad4:	f7f5 fb86 	bl	80001e4 <__adddf3>
 800aad8:	4602      	mov	r2, r0
 800aada:	460b      	mov	r3, r1
 800aadc:	4640      	mov	r0, r8
 800aade:	4649      	mov	r1, r9
 800aae0:	f7f5 fe60 	bl	80007a4 <__aeabi_ddiv>
 800aae4:	4632      	mov	r2, r6
 800aae6:	463b      	mov	r3, r7
 800aae8:	f7f5 fd32 	bl	8000550 <__aeabi_dmul>
 800aaec:	a320      	add	r3, pc, #128	; (adr r3, 800ab70 <__ieee754_acos+0x2d8>)
 800aaee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf2:	f7f5 fb75 	bl	80001e0 <__aeabi_dsub>
 800aaf6:	4632      	mov	r2, r6
 800aaf8:	463b      	mov	r3, r7
 800aafa:	f7f5 fb73 	bl	80001e4 <__adddf3>
 800aafe:	4602      	mov	r2, r0
 800ab00:	460b      	mov	r3, r1
 800ab02:	f7f5 fb6f 	bl	80001e4 <__adddf3>
 800ab06:	4602      	mov	r2, r0
 800ab08:	460b      	mov	r3, r1
 800ab0a:	a103      	add	r1, pc, #12	; (adr r1, 800ab18 <__ieee754_acos+0x280>)
 800ab0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab10:	e76f      	b.n	800a9f2 <__ieee754_acos+0x15a>
 800ab12:	bf00      	nop
 800ab14:	f3af 8000 	nop.w
 800ab18:	54442d18 	.word	0x54442d18
 800ab1c:	400921fb 	.word	0x400921fb
 800ab20:	0dfdf709 	.word	0x0dfdf709
 800ab24:	3f023de1 	.word	0x3f023de1
 800ab28:	7501b288 	.word	0x7501b288
 800ab2c:	3f49efe0 	.word	0x3f49efe0
 800ab30:	b5688f3b 	.word	0xb5688f3b
 800ab34:	3fa48228 	.word	0x3fa48228
 800ab38:	0e884455 	.word	0x0e884455
 800ab3c:	3fc9c155 	.word	0x3fc9c155
 800ab40:	03eb6f7d 	.word	0x03eb6f7d
 800ab44:	3fd4d612 	.word	0x3fd4d612
 800ab48:	55555555 	.word	0x55555555
 800ab4c:	3fc55555 	.word	0x3fc55555
 800ab50:	b12e9282 	.word	0xb12e9282
 800ab54:	3fb3b8c5 	.word	0x3fb3b8c5
 800ab58:	1b8d0159 	.word	0x1b8d0159
 800ab5c:	3fe6066c 	.word	0x3fe6066c
 800ab60:	9c598ac8 	.word	0x9c598ac8
 800ab64:	40002ae5 	.word	0x40002ae5
 800ab68:	1c8a2d4b 	.word	0x1c8a2d4b
 800ab6c:	40033a27 	.word	0x40033a27
 800ab70:	33145c07 	.word	0x33145c07
 800ab74:	3c91a626 	.word	0x3c91a626
 800ab78:	54442d18 	.word	0x54442d18
 800ab7c:	3ff921fb 	.word	0x3ff921fb
 800ab80:	3fefffff 	.word	0x3fefffff
 800ab84:	3fdfffff 	.word	0x3fdfffff
 800ab88:	3c600000 	.word	0x3c600000
 800ab8c:	3ff00000 	.word	0x3ff00000
 800ab90:	3fe00000 	.word	0x3fe00000
 800ab94:	ee10 2a10 	vmov	r2, s0
 800ab98:	462b      	mov	r3, r5
 800ab9a:	496d      	ldr	r1, [pc, #436]	; (800ad50 <__ieee754_acos+0x4b8>)
 800ab9c:	2000      	movs	r0, #0
 800ab9e:	f7f5 fb1f 	bl	80001e0 <__aeabi_dsub>
 800aba2:	4b6c      	ldr	r3, [pc, #432]	; (800ad54 <__ieee754_acos+0x4bc>)
 800aba4:	2200      	movs	r2, #0
 800aba6:	f7f5 fcd3 	bl	8000550 <__aeabi_dmul>
 800abaa:	4604      	mov	r4, r0
 800abac:	460d      	mov	r5, r1
 800abae:	ec45 4b10 	vmov	d0, r4, r5
 800abb2:	f001 f80d 	bl	800bbd0 <__ieee754_sqrt>
 800abb6:	a34e      	add	r3, pc, #312	; (adr r3, 800acf0 <__ieee754_acos+0x458>)
 800abb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbc:	4620      	mov	r0, r4
 800abbe:	4629      	mov	r1, r5
 800abc0:	ec59 8b10 	vmov	r8, r9, d0
 800abc4:	f7f5 fcc4 	bl	8000550 <__aeabi_dmul>
 800abc8:	a34b      	add	r3, pc, #300	; (adr r3, 800acf8 <__ieee754_acos+0x460>)
 800abca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abce:	f7f5 fb09 	bl	80001e4 <__adddf3>
 800abd2:	4622      	mov	r2, r4
 800abd4:	462b      	mov	r3, r5
 800abd6:	f7f5 fcbb 	bl	8000550 <__aeabi_dmul>
 800abda:	a349      	add	r3, pc, #292	; (adr r3, 800ad00 <__ieee754_acos+0x468>)
 800abdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe0:	f7f5 fafe 	bl	80001e0 <__aeabi_dsub>
 800abe4:	4622      	mov	r2, r4
 800abe6:	462b      	mov	r3, r5
 800abe8:	f7f5 fcb2 	bl	8000550 <__aeabi_dmul>
 800abec:	a346      	add	r3, pc, #280	; (adr r3, 800ad08 <__ieee754_acos+0x470>)
 800abee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf2:	f7f5 faf7 	bl	80001e4 <__adddf3>
 800abf6:	4622      	mov	r2, r4
 800abf8:	462b      	mov	r3, r5
 800abfa:	f7f5 fca9 	bl	8000550 <__aeabi_dmul>
 800abfe:	a344      	add	r3, pc, #272	; (adr r3, 800ad10 <__ieee754_acos+0x478>)
 800ac00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac04:	f7f5 faec 	bl	80001e0 <__aeabi_dsub>
 800ac08:	4622      	mov	r2, r4
 800ac0a:	462b      	mov	r3, r5
 800ac0c:	f7f5 fca0 	bl	8000550 <__aeabi_dmul>
 800ac10:	a341      	add	r3, pc, #260	; (adr r3, 800ad18 <__ieee754_acos+0x480>)
 800ac12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac16:	f7f5 fae5 	bl	80001e4 <__adddf3>
 800ac1a:	4622      	mov	r2, r4
 800ac1c:	462b      	mov	r3, r5
 800ac1e:	f7f5 fc97 	bl	8000550 <__aeabi_dmul>
 800ac22:	a33f      	add	r3, pc, #252	; (adr r3, 800ad20 <__ieee754_acos+0x488>)
 800ac24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac28:	4682      	mov	sl, r0
 800ac2a:	468b      	mov	fp, r1
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	4629      	mov	r1, r5
 800ac30:	f7f5 fc8e 	bl	8000550 <__aeabi_dmul>
 800ac34:	a33c      	add	r3, pc, #240	; (adr r3, 800ad28 <__ieee754_acos+0x490>)
 800ac36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3a:	f7f5 fad1 	bl	80001e0 <__aeabi_dsub>
 800ac3e:	4622      	mov	r2, r4
 800ac40:	462b      	mov	r3, r5
 800ac42:	f7f5 fc85 	bl	8000550 <__aeabi_dmul>
 800ac46:	a33a      	add	r3, pc, #232	; (adr r3, 800ad30 <__ieee754_acos+0x498>)
 800ac48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4c:	f7f5 faca 	bl	80001e4 <__adddf3>
 800ac50:	4622      	mov	r2, r4
 800ac52:	462b      	mov	r3, r5
 800ac54:	f7f5 fc7c 	bl	8000550 <__aeabi_dmul>
 800ac58:	a337      	add	r3, pc, #220	; (adr r3, 800ad38 <__ieee754_acos+0x4a0>)
 800ac5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5e:	f7f5 fabf 	bl	80001e0 <__aeabi_dsub>
 800ac62:	4622      	mov	r2, r4
 800ac64:	462b      	mov	r3, r5
 800ac66:	f7f5 fc73 	bl	8000550 <__aeabi_dmul>
 800ac6a:	4b39      	ldr	r3, [pc, #228]	; (800ad50 <__ieee754_acos+0x4b8>)
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f7f5 fab9 	bl	80001e4 <__adddf3>
 800ac72:	4602      	mov	r2, r0
 800ac74:	460b      	mov	r3, r1
 800ac76:	4650      	mov	r0, sl
 800ac78:	4659      	mov	r1, fp
 800ac7a:	f7f5 fd93 	bl	80007a4 <__aeabi_ddiv>
 800ac7e:	4642      	mov	r2, r8
 800ac80:	464b      	mov	r3, r9
 800ac82:	f7f5 fc65 	bl	8000550 <__aeabi_dmul>
 800ac86:	2600      	movs	r6, #0
 800ac88:	4682      	mov	sl, r0
 800ac8a:	468b      	mov	fp, r1
 800ac8c:	4632      	mov	r2, r6
 800ac8e:	464b      	mov	r3, r9
 800ac90:	4630      	mov	r0, r6
 800ac92:	4649      	mov	r1, r9
 800ac94:	f7f5 fc5c 	bl	8000550 <__aeabi_dmul>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	4629      	mov	r1, r5
 800aca0:	f7f5 fa9e 	bl	80001e0 <__aeabi_dsub>
 800aca4:	4632      	mov	r2, r6
 800aca6:	4604      	mov	r4, r0
 800aca8:	460d      	mov	r5, r1
 800acaa:	464b      	mov	r3, r9
 800acac:	4640      	mov	r0, r8
 800acae:	4649      	mov	r1, r9
 800acb0:	f7f5 fa98 	bl	80001e4 <__adddf3>
 800acb4:	4602      	mov	r2, r0
 800acb6:	460b      	mov	r3, r1
 800acb8:	4620      	mov	r0, r4
 800acba:	4629      	mov	r1, r5
 800acbc:	f7f5 fd72 	bl	80007a4 <__aeabi_ddiv>
 800acc0:	4602      	mov	r2, r0
 800acc2:	460b      	mov	r3, r1
 800acc4:	4650      	mov	r0, sl
 800acc6:	4659      	mov	r1, fp
 800acc8:	f7f5 fa8c 	bl	80001e4 <__adddf3>
 800accc:	4632      	mov	r2, r6
 800acce:	464b      	mov	r3, r9
 800acd0:	f7f5 fa88 	bl	80001e4 <__adddf3>
 800acd4:	4602      	mov	r2, r0
 800acd6:	460b      	mov	r3, r1
 800acd8:	f7f5 fa84 	bl	80001e4 <__adddf3>
 800acdc:	e5fe      	b.n	800a8dc <__ieee754_acos+0x44>
 800acde:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800ad40 <__ieee754_acos+0x4a8>
 800ace2:	e5ed      	b.n	800a8c0 <__ieee754_acos+0x28>
 800ace4:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800ad48 <__ieee754_acos+0x4b0>
 800ace8:	e5ea      	b.n	800a8c0 <__ieee754_acos+0x28>
 800acea:	bf00      	nop
 800acec:	f3af 8000 	nop.w
 800acf0:	0dfdf709 	.word	0x0dfdf709
 800acf4:	3f023de1 	.word	0x3f023de1
 800acf8:	7501b288 	.word	0x7501b288
 800acfc:	3f49efe0 	.word	0x3f49efe0
 800ad00:	b5688f3b 	.word	0xb5688f3b
 800ad04:	3fa48228 	.word	0x3fa48228
 800ad08:	0e884455 	.word	0x0e884455
 800ad0c:	3fc9c155 	.word	0x3fc9c155
 800ad10:	03eb6f7d 	.word	0x03eb6f7d
 800ad14:	3fd4d612 	.word	0x3fd4d612
 800ad18:	55555555 	.word	0x55555555
 800ad1c:	3fc55555 	.word	0x3fc55555
 800ad20:	b12e9282 	.word	0xb12e9282
 800ad24:	3fb3b8c5 	.word	0x3fb3b8c5
 800ad28:	1b8d0159 	.word	0x1b8d0159
 800ad2c:	3fe6066c 	.word	0x3fe6066c
 800ad30:	9c598ac8 	.word	0x9c598ac8
 800ad34:	40002ae5 	.word	0x40002ae5
 800ad38:	1c8a2d4b 	.word	0x1c8a2d4b
 800ad3c:	40033a27 	.word	0x40033a27
	...
 800ad48:	54442d18 	.word	0x54442d18
 800ad4c:	3ff921fb 	.word	0x3ff921fb
 800ad50:	3ff00000 	.word	0x3ff00000
 800ad54:	3fe00000 	.word	0x3fe00000

0800ad58 <__ieee754_pow>:
 800ad58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5c:	ed2d 8b06 	vpush	{d8-d10}
 800ad60:	b089      	sub	sp, #36	; 0x24
 800ad62:	ed8d 1b00 	vstr	d1, [sp]
 800ad66:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ad6a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ad6e:	ea58 0102 	orrs.w	r1, r8, r2
 800ad72:	ec57 6b10 	vmov	r6, r7, d0
 800ad76:	d115      	bne.n	800ada4 <__ieee754_pow+0x4c>
 800ad78:	19b3      	adds	r3, r6, r6
 800ad7a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ad7e:	4152      	adcs	r2, r2
 800ad80:	4299      	cmp	r1, r3
 800ad82:	4b89      	ldr	r3, [pc, #548]	; (800afa8 <__ieee754_pow+0x250>)
 800ad84:	4193      	sbcs	r3, r2
 800ad86:	f080 84d2 	bcs.w	800b72e <__ieee754_pow+0x9d6>
 800ad8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad8e:	4630      	mov	r0, r6
 800ad90:	4639      	mov	r1, r7
 800ad92:	f7f5 fa27 	bl	80001e4 <__adddf3>
 800ad96:	ec41 0b10 	vmov	d0, r0, r1
 800ad9a:	b009      	add	sp, #36	; 0x24
 800ad9c:	ecbd 8b06 	vpop	{d8-d10}
 800ada0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada4:	4b81      	ldr	r3, [pc, #516]	; (800afac <__ieee754_pow+0x254>)
 800ada6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800adaa:	429c      	cmp	r4, r3
 800adac:	ee10 aa10 	vmov	sl, s0
 800adb0:	463d      	mov	r5, r7
 800adb2:	dc06      	bgt.n	800adc2 <__ieee754_pow+0x6a>
 800adb4:	d101      	bne.n	800adba <__ieee754_pow+0x62>
 800adb6:	2e00      	cmp	r6, #0
 800adb8:	d1e7      	bne.n	800ad8a <__ieee754_pow+0x32>
 800adba:	4598      	cmp	r8, r3
 800adbc:	dc01      	bgt.n	800adc2 <__ieee754_pow+0x6a>
 800adbe:	d10f      	bne.n	800ade0 <__ieee754_pow+0x88>
 800adc0:	b172      	cbz	r2, 800ade0 <__ieee754_pow+0x88>
 800adc2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800adc6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800adca:	ea55 050a 	orrs.w	r5, r5, sl
 800adce:	d1dc      	bne.n	800ad8a <__ieee754_pow+0x32>
 800add0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800add4:	18db      	adds	r3, r3, r3
 800add6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800adda:	4152      	adcs	r2, r2
 800addc:	429d      	cmp	r5, r3
 800adde:	e7d0      	b.n	800ad82 <__ieee754_pow+0x2a>
 800ade0:	2d00      	cmp	r5, #0
 800ade2:	da3b      	bge.n	800ae5c <__ieee754_pow+0x104>
 800ade4:	4b72      	ldr	r3, [pc, #456]	; (800afb0 <__ieee754_pow+0x258>)
 800ade6:	4598      	cmp	r8, r3
 800ade8:	dc51      	bgt.n	800ae8e <__ieee754_pow+0x136>
 800adea:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800adee:	4598      	cmp	r8, r3
 800adf0:	f340 84ac 	ble.w	800b74c <__ieee754_pow+0x9f4>
 800adf4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800adf8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800adfc:	2b14      	cmp	r3, #20
 800adfe:	dd0f      	ble.n	800ae20 <__ieee754_pow+0xc8>
 800ae00:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ae04:	fa22 f103 	lsr.w	r1, r2, r3
 800ae08:	fa01 f303 	lsl.w	r3, r1, r3
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	f040 849d 	bne.w	800b74c <__ieee754_pow+0x9f4>
 800ae12:	f001 0101 	and.w	r1, r1, #1
 800ae16:	f1c1 0302 	rsb	r3, r1, #2
 800ae1a:	9304      	str	r3, [sp, #16]
 800ae1c:	b182      	cbz	r2, 800ae40 <__ieee754_pow+0xe8>
 800ae1e:	e05f      	b.n	800aee0 <__ieee754_pow+0x188>
 800ae20:	2a00      	cmp	r2, #0
 800ae22:	d15b      	bne.n	800aedc <__ieee754_pow+0x184>
 800ae24:	f1c3 0314 	rsb	r3, r3, #20
 800ae28:	fa48 f103 	asr.w	r1, r8, r3
 800ae2c:	fa01 f303 	lsl.w	r3, r1, r3
 800ae30:	4543      	cmp	r3, r8
 800ae32:	f040 8488 	bne.w	800b746 <__ieee754_pow+0x9ee>
 800ae36:	f001 0101 	and.w	r1, r1, #1
 800ae3a:	f1c1 0302 	rsb	r3, r1, #2
 800ae3e:	9304      	str	r3, [sp, #16]
 800ae40:	4b5c      	ldr	r3, [pc, #368]	; (800afb4 <__ieee754_pow+0x25c>)
 800ae42:	4598      	cmp	r8, r3
 800ae44:	d132      	bne.n	800aeac <__ieee754_pow+0x154>
 800ae46:	f1b9 0f00 	cmp.w	r9, #0
 800ae4a:	f280 8478 	bge.w	800b73e <__ieee754_pow+0x9e6>
 800ae4e:	4959      	ldr	r1, [pc, #356]	; (800afb4 <__ieee754_pow+0x25c>)
 800ae50:	4632      	mov	r2, r6
 800ae52:	463b      	mov	r3, r7
 800ae54:	2000      	movs	r0, #0
 800ae56:	f7f5 fca5 	bl	80007a4 <__aeabi_ddiv>
 800ae5a:	e79c      	b.n	800ad96 <__ieee754_pow+0x3e>
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	9304      	str	r3, [sp, #16]
 800ae60:	2a00      	cmp	r2, #0
 800ae62:	d13d      	bne.n	800aee0 <__ieee754_pow+0x188>
 800ae64:	4b51      	ldr	r3, [pc, #324]	; (800afac <__ieee754_pow+0x254>)
 800ae66:	4598      	cmp	r8, r3
 800ae68:	d1ea      	bne.n	800ae40 <__ieee754_pow+0xe8>
 800ae6a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ae6e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ae72:	ea53 030a 	orrs.w	r3, r3, sl
 800ae76:	f000 845a 	beq.w	800b72e <__ieee754_pow+0x9d6>
 800ae7a:	4b4f      	ldr	r3, [pc, #316]	; (800afb8 <__ieee754_pow+0x260>)
 800ae7c:	429c      	cmp	r4, r3
 800ae7e:	dd08      	ble.n	800ae92 <__ieee754_pow+0x13a>
 800ae80:	f1b9 0f00 	cmp.w	r9, #0
 800ae84:	f2c0 8457 	blt.w	800b736 <__ieee754_pow+0x9de>
 800ae88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae8c:	e783      	b.n	800ad96 <__ieee754_pow+0x3e>
 800ae8e:	2302      	movs	r3, #2
 800ae90:	e7e5      	b.n	800ae5e <__ieee754_pow+0x106>
 800ae92:	f1b9 0f00 	cmp.w	r9, #0
 800ae96:	f04f 0000 	mov.w	r0, #0
 800ae9a:	f04f 0100 	mov.w	r1, #0
 800ae9e:	f6bf af7a 	bge.w	800ad96 <__ieee754_pow+0x3e>
 800aea2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800aea6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800aeaa:	e774      	b.n	800ad96 <__ieee754_pow+0x3e>
 800aeac:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800aeb0:	d106      	bne.n	800aec0 <__ieee754_pow+0x168>
 800aeb2:	4632      	mov	r2, r6
 800aeb4:	463b      	mov	r3, r7
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	4639      	mov	r1, r7
 800aeba:	f7f5 fb49 	bl	8000550 <__aeabi_dmul>
 800aebe:	e76a      	b.n	800ad96 <__ieee754_pow+0x3e>
 800aec0:	4b3e      	ldr	r3, [pc, #248]	; (800afbc <__ieee754_pow+0x264>)
 800aec2:	4599      	cmp	r9, r3
 800aec4:	d10c      	bne.n	800aee0 <__ieee754_pow+0x188>
 800aec6:	2d00      	cmp	r5, #0
 800aec8:	db0a      	blt.n	800aee0 <__ieee754_pow+0x188>
 800aeca:	ec47 6b10 	vmov	d0, r6, r7
 800aece:	b009      	add	sp, #36	; 0x24
 800aed0:	ecbd 8b06 	vpop	{d8-d10}
 800aed4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed8:	f000 be7a 	b.w	800bbd0 <__ieee754_sqrt>
 800aedc:	2300      	movs	r3, #0
 800aede:	9304      	str	r3, [sp, #16]
 800aee0:	ec47 6b10 	vmov	d0, r6, r7
 800aee4:	f001 fc2e 	bl	800c744 <fabs>
 800aee8:	ec51 0b10 	vmov	r0, r1, d0
 800aeec:	f1ba 0f00 	cmp.w	sl, #0
 800aef0:	d129      	bne.n	800af46 <__ieee754_pow+0x1ee>
 800aef2:	b124      	cbz	r4, 800aefe <__ieee754_pow+0x1a6>
 800aef4:	4b2f      	ldr	r3, [pc, #188]	; (800afb4 <__ieee754_pow+0x25c>)
 800aef6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d123      	bne.n	800af46 <__ieee754_pow+0x1ee>
 800aefe:	f1b9 0f00 	cmp.w	r9, #0
 800af02:	da05      	bge.n	800af10 <__ieee754_pow+0x1b8>
 800af04:	4602      	mov	r2, r0
 800af06:	460b      	mov	r3, r1
 800af08:	2000      	movs	r0, #0
 800af0a:	492a      	ldr	r1, [pc, #168]	; (800afb4 <__ieee754_pow+0x25c>)
 800af0c:	f7f5 fc4a 	bl	80007a4 <__aeabi_ddiv>
 800af10:	2d00      	cmp	r5, #0
 800af12:	f6bf af40 	bge.w	800ad96 <__ieee754_pow+0x3e>
 800af16:	9b04      	ldr	r3, [sp, #16]
 800af18:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800af1c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800af20:	4323      	orrs	r3, r4
 800af22:	d108      	bne.n	800af36 <__ieee754_pow+0x1de>
 800af24:	4602      	mov	r2, r0
 800af26:	460b      	mov	r3, r1
 800af28:	4610      	mov	r0, r2
 800af2a:	4619      	mov	r1, r3
 800af2c:	f7f5 f958 	bl	80001e0 <__aeabi_dsub>
 800af30:	4602      	mov	r2, r0
 800af32:	460b      	mov	r3, r1
 800af34:	e78f      	b.n	800ae56 <__ieee754_pow+0xfe>
 800af36:	9b04      	ldr	r3, [sp, #16]
 800af38:	2b01      	cmp	r3, #1
 800af3a:	f47f af2c 	bne.w	800ad96 <__ieee754_pow+0x3e>
 800af3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af42:	4619      	mov	r1, r3
 800af44:	e727      	b.n	800ad96 <__ieee754_pow+0x3e>
 800af46:	0feb      	lsrs	r3, r5, #31
 800af48:	3b01      	subs	r3, #1
 800af4a:	9306      	str	r3, [sp, #24]
 800af4c:	9a06      	ldr	r2, [sp, #24]
 800af4e:	9b04      	ldr	r3, [sp, #16]
 800af50:	4313      	orrs	r3, r2
 800af52:	d102      	bne.n	800af5a <__ieee754_pow+0x202>
 800af54:	4632      	mov	r2, r6
 800af56:	463b      	mov	r3, r7
 800af58:	e7e6      	b.n	800af28 <__ieee754_pow+0x1d0>
 800af5a:	4b19      	ldr	r3, [pc, #100]	; (800afc0 <__ieee754_pow+0x268>)
 800af5c:	4598      	cmp	r8, r3
 800af5e:	f340 80fb 	ble.w	800b158 <__ieee754_pow+0x400>
 800af62:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800af66:	4598      	cmp	r8, r3
 800af68:	4b13      	ldr	r3, [pc, #76]	; (800afb8 <__ieee754_pow+0x260>)
 800af6a:	dd0c      	ble.n	800af86 <__ieee754_pow+0x22e>
 800af6c:	429c      	cmp	r4, r3
 800af6e:	dc0f      	bgt.n	800af90 <__ieee754_pow+0x238>
 800af70:	f1b9 0f00 	cmp.w	r9, #0
 800af74:	da0f      	bge.n	800af96 <__ieee754_pow+0x23e>
 800af76:	2000      	movs	r0, #0
 800af78:	b009      	add	sp, #36	; 0x24
 800af7a:	ecbd 8b06 	vpop	{d8-d10}
 800af7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af82:	f001 bbd6 	b.w	800c732 <__math_oflow>
 800af86:	429c      	cmp	r4, r3
 800af88:	dbf2      	blt.n	800af70 <__ieee754_pow+0x218>
 800af8a:	4b0a      	ldr	r3, [pc, #40]	; (800afb4 <__ieee754_pow+0x25c>)
 800af8c:	429c      	cmp	r4, r3
 800af8e:	dd19      	ble.n	800afc4 <__ieee754_pow+0x26c>
 800af90:	f1b9 0f00 	cmp.w	r9, #0
 800af94:	dcef      	bgt.n	800af76 <__ieee754_pow+0x21e>
 800af96:	2000      	movs	r0, #0
 800af98:	b009      	add	sp, #36	; 0x24
 800af9a:	ecbd 8b06 	vpop	{d8-d10}
 800af9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa2:	f001 bbbd 	b.w	800c720 <__math_uflow>
 800afa6:	bf00      	nop
 800afa8:	fff00000 	.word	0xfff00000
 800afac:	7ff00000 	.word	0x7ff00000
 800afb0:	433fffff 	.word	0x433fffff
 800afb4:	3ff00000 	.word	0x3ff00000
 800afb8:	3fefffff 	.word	0x3fefffff
 800afbc:	3fe00000 	.word	0x3fe00000
 800afc0:	41e00000 	.word	0x41e00000
 800afc4:	4b60      	ldr	r3, [pc, #384]	; (800b148 <__ieee754_pow+0x3f0>)
 800afc6:	2200      	movs	r2, #0
 800afc8:	f7f5 f90a 	bl	80001e0 <__aeabi_dsub>
 800afcc:	a354      	add	r3, pc, #336	; (adr r3, 800b120 <__ieee754_pow+0x3c8>)
 800afce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd2:	4604      	mov	r4, r0
 800afd4:	460d      	mov	r5, r1
 800afd6:	f7f5 fabb 	bl	8000550 <__aeabi_dmul>
 800afda:	a353      	add	r3, pc, #332	; (adr r3, 800b128 <__ieee754_pow+0x3d0>)
 800afdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe0:	4606      	mov	r6, r0
 800afe2:	460f      	mov	r7, r1
 800afe4:	4620      	mov	r0, r4
 800afe6:	4629      	mov	r1, r5
 800afe8:	f7f5 fab2 	bl	8000550 <__aeabi_dmul>
 800afec:	4b57      	ldr	r3, [pc, #348]	; (800b14c <__ieee754_pow+0x3f4>)
 800afee:	4682      	mov	sl, r0
 800aff0:	468b      	mov	fp, r1
 800aff2:	2200      	movs	r2, #0
 800aff4:	4620      	mov	r0, r4
 800aff6:	4629      	mov	r1, r5
 800aff8:	f7f5 faaa 	bl	8000550 <__aeabi_dmul>
 800affc:	4602      	mov	r2, r0
 800affe:	460b      	mov	r3, r1
 800b000:	a14b      	add	r1, pc, #300	; (adr r1, 800b130 <__ieee754_pow+0x3d8>)
 800b002:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b006:	f7f5 f8eb 	bl	80001e0 <__aeabi_dsub>
 800b00a:	4622      	mov	r2, r4
 800b00c:	462b      	mov	r3, r5
 800b00e:	f7f5 fa9f 	bl	8000550 <__aeabi_dmul>
 800b012:	4602      	mov	r2, r0
 800b014:	460b      	mov	r3, r1
 800b016:	2000      	movs	r0, #0
 800b018:	494d      	ldr	r1, [pc, #308]	; (800b150 <__ieee754_pow+0x3f8>)
 800b01a:	f7f5 f8e1 	bl	80001e0 <__aeabi_dsub>
 800b01e:	4622      	mov	r2, r4
 800b020:	4680      	mov	r8, r0
 800b022:	4689      	mov	r9, r1
 800b024:	462b      	mov	r3, r5
 800b026:	4620      	mov	r0, r4
 800b028:	4629      	mov	r1, r5
 800b02a:	f7f5 fa91 	bl	8000550 <__aeabi_dmul>
 800b02e:	4602      	mov	r2, r0
 800b030:	460b      	mov	r3, r1
 800b032:	4640      	mov	r0, r8
 800b034:	4649      	mov	r1, r9
 800b036:	f7f5 fa8b 	bl	8000550 <__aeabi_dmul>
 800b03a:	a33f      	add	r3, pc, #252	; (adr r3, 800b138 <__ieee754_pow+0x3e0>)
 800b03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b040:	f7f5 fa86 	bl	8000550 <__aeabi_dmul>
 800b044:	4602      	mov	r2, r0
 800b046:	460b      	mov	r3, r1
 800b048:	4650      	mov	r0, sl
 800b04a:	4659      	mov	r1, fp
 800b04c:	f7f5 f8c8 	bl	80001e0 <__aeabi_dsub>
 800b050:	4602      	mov	r2, r0
 800b052:	460b      	mov	r3, r1
 800b054:	4680      	mov	r8, r0
 800b056:	4689      	mov	r9, r1
 800b058:	4630      	mov	r0, r6
 800b05a:	4639      	mov	r1, r7
 800b05c:	f7f5 f8c2 	bl	80001e4 <__adddf3>
 800b060:	2000      	movs	r0, #0
 800b062:	4632      	mov	r2, r6
 800b064:	463b      	mov	r3, r7
 800b066:	4604      	mov	r4, r0
 800b068:	460d      	mov	r5, r1
 800b06a:	f7f5 f8b9 	bl	80001e0 <__aeabi_dsub>
 800b06e:	4602      	mov	r2, r0
 800b070:	460b      	mov	r3, r1
 800b072:	4640      	mov	r0, r8
 800b074:	4649      	mov	r1, r9
 800b076:	f7f5 f8b3 	bl	80001e0 <__aeabi_dsub>
 800b07a:	9b04      	ldr	r3, [sp, #16]
 800b07c:	9a06      	ldr	r2, [sp, #24]
 800b07e:	3b01      	subs	r3, #1
 800b080:	4313      	orrs	r3, r2
 800b082:	4682      	mov	sl, r0
 800b084:	468b      	mov	fp, r1
 800b086:	f040 81e7 	bne.w	800b458 <__ieee754_pow+0x700>
 800b08a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b140 <__ieee754_pow+0x3e8>
 800b08e:	eeb0 8a47 	vmov.f32	s16, s14
 800b092:	eef0 8a67 	vmov.f32	s17, s15
 800b096:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b09a:	2600      	movs	r6, #0
 800b09c:	4632      	mov	r2, r6
 800b09e:	463b      	mov	r3, r7
 800b0a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b0a4:	f7f5 f89c 	bl	80001e0 <__aeabi_dsub>
 800b0a8:	4622      	mov	r2, r4
 800b0aa:	462b      	mov	r3, r5
 800b0ac:	f7f5 fa50 	bl	8000550 <__aeabi_dmul>
 800b0b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0b4:	4680      	mov	r8, r0
 800b0b6:	4689      	mov	r9, r1
 800b0b8:	4650      	mov	r0, sl
 800b0ba:	4659      	mov	r1, fp
 800b0bc:	f7f5 fa48 	bl	8000550 <__aeabi_dmul>
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	460b      	mov	r3, r1
 800b0c4:	4640      	mov	r0, r8
 800b0c6:	4649      	mov	r1, r9
 800b0c8:	f7f5 f88c 	bl	80001e4 <__adddf3>
 800b0cc:	4632      	mov	r2, r6
 800b0ce:	463b      	mov	r3, r7
 800b0d0:	4680      	mov	r8, r0
 800b0d2:	4689      	mov	r9, r1
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	4629      	mov	r1, r5
 800b0d8:	f7f5 fa3a 	bl	8000550 <__aeabi_dmul>
 800b0dc:	460b      	mov	r3, r1
 800b0de:	4604      	mov	r4, r0
 800b0e0:	460d      	mov	r5, r1
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	4649      	mov	r1, r9
 800b0e6:	4640      	mov	r0, r8
 800b0e8:	f7f5 f87c 	bl	80001e4 <__adddf3>
 800b0ec:	4b19      	ldr	r3, [pc, #100]	; (800b154 <__ieee754_pow+0x3fc>)
 800b0ee:	4299      	cmp	r1, r3
 800b0f0:	ec45 4b19 	vmov	d9, r4, r5
 800b0f4:	4606      	mov	r6, r0
 800b0f6:	460f      	mov	r7, r1
 800b0f8:	468b      	mov	fp, r1
 800b0fa:	f340 82f1 	ble.w	800b6e0 <__ieee754_pow+0x988>
 800b0fe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b102:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b106:	4303      	orrs	r3, r0
 800b108:	f000 81e4 	beq.w	800b4d4 <__ieee754_pow+0x77c>
 800b10c:	ec51 0b18 	vmov	r0, r1, d8
 800b110:	2200      	movs	r2, #0
 800b112:	2300      	movs	r3, #0
 800b114:	f7f5 fc8e 	bl	8000a34 <__aeabi_dcmplt>
 800b118:	3800      	subs	r0, #0
 800b11a:	bf18      	it	ne
 800b11c:	2001      	movne	r0, #1
 800b11e:	e72b      	b.n	800af78 <__ieee754_pow+0x220>
 800b120:	60000000 	.word	0x60000000
 800b124:	3ff71547 	.word	0x3ff71547
 800b128:	f85ddf44 	.word	0xf85ddf44
 800b12c:	3e54ae0b 	.word	0x3e54ae0b
 800b130:	55555555 	.word	0x55555555
 800b134:	3fd55555 	.word	0x3fd55555
 800b138:	652b82fe 	.word	0x652b82fe
 800b13c:	3ff71547 	.word	0x3ff71547
 800b140:	00000000 	.word	0x00000000
 800b144:	bff00000 	.word	0xbff00000
 800b148:	3ff00000 	.word	0x3ff00000
 800b14c:	3fd00000 	.word	0x3fd00000
 800b150:	3fe00000 	.word	0x3fe00000
 800b154:	408fffff 	.word	0x408fffff
 800b158:	4bd5      	ldr	r3, [pc, #852]	; (800b4b0 <__ieee754_pow+0x758>)
 800b15a:	402b      	ands	r3, r5
 800b15c:	2200      	movs	r2, #0
 800b15e:	b92b      	cbnz	r3, 800b16c <__ieee754_pow+0x414>
 800b160:	4bd4      	ldr	r3, [pc, #848]	; (800b4b4 <__ieee754_pow+0x75c>)
 800b162:	f7f5 f9f5 	bl	8000550 <__aeabi_dmul>
 800b166:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b16a:	460c      	mov	r4, r1
 800b16c:	1523      	asrs	r3, r4, #20
 800b16e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b172:	4413      	add	r3, r2
 800b174:	9305      	str	r3, [sp, #20]
 800b176:	4bd0      	ldr	r3, [pc, #832]	; (800b4b8 <__ieee754_pow+0x760>)
 800b178:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b17c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b180:	429c      	cmp	r4, r3
 800b182:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b186:	dd08      	ble.n	800b19a <__ieee754_pow+0x442>
 800b188:	4bcc      	ldr	r3, [pc, #816]	; (800b4bc <__ieee754_pow+0x764>)
 800b18a:	429c      	cmp	r4, r3
 800b18c:	f340 8162 	ble.w	800b454 <__ieee754_pow+0x6fc>
 800b190:	9b05      	ldr	r3, [sp, #20]
 800b192:	3301      	adds	r3, #1
 800b194:	9305      	str	r3, [sp, #20]
 800b196:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b19a:	2400      	movs	r4, #0
 800b19c:	00e3      	lsls	r3, r4, #3
 800b19e:	9307      	str	r3, [sp, #28]
 800b1a0:	4bc7      	ldr	r3, [pc, #796]	; (800b4c0 <__ieee754_pow+0x768>)
 800b1a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b1a6:	ed93 7b00 	vldr	d7, [r3]
 800b1aa:	4629      	mov	r1, r5
 800b1ac:	ec53 2b17 	vmov	r2, r3, d7
 800b1b0:	eeb0 9a47 	vmov.f32	s18, s14
 800b1b4:	eef0 9a67 	vmov.f32	s19, s15
 800b1b8:	4682      	mov	sl, r0
 800b1ba:	f7f5 f811 	bl	80001e0 <__aeabi_dsub>
 800b1be:	4652      	mov	r2, sl
 800b1c0:	4606      	mov	r6, r0
 800b1c2:	460f      	mov	r7, r1
 800b1c4:	462b      	mov	r3, r5
 800b1c6:	ec51 0b19 	vmov	r0, r1, d9
 800b1ca:	f7f5 f80b 	bl	80001e4 <__adddf3>
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	2000      	movs	r0, #0
 800b1d4:	49bb      	ldr	r1, [pc, #748]	; (800b4c4 <__ieee754_pow+0x76c>)
 800b1d6:	f7f5 fae5 	bl	80007a4 <__aeabi_ddiv>
 800b1da:	ec41 0b1a 	vmov	d10, r0, r1
 800b1de:	4602      	mov	r2, r0
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	4630      	mov	r0, r6
 800b1e4:	4639      	mov	r1, r7
 800b1e6:	f7f5 f9b3 	bl	8000550 <__aeabi_dmul>
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1f0:	9302      	str	r3, [sp, #8]
 800b1f2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b1f6:	46ab      	mov	fp, r5
 800b1f8:	106d      	asrs	r5, r5, #1
 800b1fa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b1fe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b202:	ec41 0b18 	vmov	d8, r0, r1
 800b206:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b20a:	2200      	movs	r2, #0
 800b20c:	4640      	mov	r0, r8
 800b20e:	4649      	mov	r1, r9
 800b210:	4614      	mov	r4, r2
 800b212:	461d      	mov	r5, r3
 800b214:	f7f5 f99c 	bl	8000550 <__aeabi_dmul>
 800b218:	4602      	mov	r2, r0
 800b21a:	460b      	mov	r3, r1
 800b21c:	4630      	mov	r0, r6
 800b21e:	4639      	mov	r1, r7
 800b220:	f7f4 ffde 	bl	80001e0 <__aeabi_dsub>
 800b224:	ec53 2b19 	vmov	r2, r3, d9
 800b228:	4606      	mov	r6, r0
 800b22a:	460f      	mov	r7, r1
 800b22c:	4620      	mov	r0, r4
 800b22e:	4629      	mov	r1, r5
 800b230:	f7f4 ffd6 	bl	80001e0 <__aeabi_dsub>
 800b234:	4602      	mov	r2, r0
 800b236:	460b      	mov	r3, r1
 800b238:	4650      	mov	r0, sl
 800b23a:	4659      	mov	r1, fp
 800b23c:	f7f4 ffd0 	bl	80001e0 <__aeabi_dsub>
 800b240:	4642      	mov	r2, r8
 800b242:	464b      	mov	r3, r9
 800b244:	f7f5 f984 	bl	8000550 <__aeabi_dmul>
 800b248:	4602      	mov	r2, r0
 800b24a:	460b      	mov	r3, r1
 800b24c:	4630      	mov	r0, r6
 800b24e:	4639      	mov	r1, r7
 800b250:	f7f4 ffc6 	bl	80001e0 <__aeabi_dsub>
 800b254:	ec53 2b1a 	vmov	r2, r3, d10
 800b258:	f7f5 f97a 	bl	8000550 <__aeabi_dmul>
 800b25c:	ec53 2b18 	vmov	r2, r3, d8
 800b260:	ec41 0b19 	vmov	d9, r0, r1
 800b264:	ec51 0b18 	vmov	r0, r1, d8
 800b268:	f7f5 f972 	bl	8000550 <__aeabi_dmul>
 800b26c:	a37c      	add	r3, pc, #496	; (adr r3, 800b460 <__ieee754_pow+0x708>)
 800b26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b272:	4604      	mov	r4, r0
 800b274:	460d      	mov	r5, r1
 800b276:	f7f5 f96b 	bl	8000550 <__aeabi_dmul>
 800b27a:	a37b      	add	r3, pc, #492	; (adr r3, 800b468 <__ieee754_pow+0x710>)
 800b27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b280:	f7f4 ffb0 	bl	80001e4 <__adddf3>
 800b284:	4622      	mov	r2, r4
 800b286:	462b      	mov	r3, r5
 800b288:	f7f5 f962 	bl	8000550 <__aeabi_dmul>
 800b28c:	a378      	add	r3, pc, #480	; (adr r3, 800b470 <__ieee754_pow+0x718>)
 800b28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b292:	f7f4 ffa7 	bl	80001e4 <__adddf3>
 800b296:	4622      	mov	r2, r4
 800b298:	462b      	mov	r3, r5
 800b29a:	f7f5 f959 	bl	8000550 <__aeabi_dmul>
 800b29e:	a376      	add	r3, pc, #472	; (adr r3, 800b478 <__ieee754_pow+0x720>)
 800b2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a4:	f7f4 ff9e 	bl	80001e4 <__adddf3>
 800b2a8:	4622      	mov	r2, r4
 800b2aa:	462b      	mov	r3, r5
 800b2ac:	f7f5 f950 	bl	8000550 <__aeabi_dmul>
 800b2b0:	a373      	add	r3, pc, #460	; (adr r3, 800b480 <__ieee754_pow+0x728>)
 800b2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b6:	f7f4 ff95 	bl	80001e4 <__adddf3>
 800b2ba:	4622      	mov	r2, r4
 800b2bc:	462b      	mov	r3, r5
 800b2be:	f7f5 f947 	bl	8000550 <__aeabi_dmul>
 800b2c2:	a371      	add	r3, pc, #452	; (adr r3, 800b488 <__ieee754_pow+0x730>)
 800b2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c8:	f7f4 ff8c 	bl	80001e4 <__adddf3>
 800b2cc:	4622      	mov	r2, r4
 800b2ce:	4606      	mov	r6, r0
 800b2d0:	460f      	mov	r7, r1
 800b2d2:	462b      	mov	r3, r5
 800b2d4:	4620      	mov	r0, r4
 800b2d6:	4629      	mov	r1, r5
 800b2d8:	f7f5 f93a 	bl	8000550 <__aeabi_dmul>
 800b2dc:	4602      	mov	r2, r0
 800b2de:	460b      	mov	r3, r1
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	4639      	mov	r1, r7
 800b2e4:	f7f5 f934 	bl	8000550 <__aeabi_dmul>
 800b2e8:	4642      	mov	r2, r8
 800b2ea:	4604      	mov	r4, r0
 800b2ec:	460d      	mov	r5, r1
 800b2ee:	464b      	mov	r3, r9
 800b2f0:	ec51 0b18 	vmov	r0, r1, d8
 800b2f4:	f7f4 ff76 	bl	80001e4 <__adddf3>
 800b2f8:	ec53 2b19 	vmov	r2, r3, d9
 800b2fc:	f7f5 f928 	bl	8000550 <__aeabi_dmul>
 800b300:	4622      	mov	r2, r4
 800b302:	462b      	mov	r3, r5
 800b304:	f7f4 ff6e 	bl	80001e4 <__adddf3>
 800b308:	4642      	mov	r2, r8
 800b30a:	4682      	mov	sl, r0
 800b30c:	468b      	mov	fp, r1
 800b30e:	464b      	mov	r3, r9
 800b310:	4640      	mov	r0, r8
 800b312:	4649      	mov	r1, r9
 800b314:	f7f5 f91c 	bl	8000550 <__aeabi_dmul>
 800b318:	4b6b      	ldr	r3, [pc, #428]	; (800b4c8 <__ieee754_pow+0x770>)
 800b31a:	2200      	movs	r2, #0
 800b31c:	4606      	mov	r6, r0
 800b31e:	460f      	mov	r7, r1
 800b320:	f7f4 ff60 	bl	80001e4 <__adddf3>
 800b324:	4652      	mov	r2, sl
 800b326:	465b      	mov	r3, fp
 800b328:	f7f4 ff5c 	bl	80001e4 <__adddf3>
 800b32c:	2000      	movs	r0, #0
 800b32e:	4604      	mov	r4, r0
 800b330:	460d      	mov	r5, r1
 800b332:	4602      	mov	r2, r0
 800b334:	460b      	mov	r3, r1
 800b336:	4640      	mov	r0, r8
 800b338:	4649      	mov	r1, r9
 800b33a:	f7f5 f909 	bl	8000550 <__aeabi_dmul>
 800b33e:	4b62      	ldr	r3, [pc, #392]	; (800b4c8 <__ieee754_pow+0x770>)
 800b340:	4680      	mov	r8, r0
 800b342:	4689      	mov	r9, r1
 800b344:	2200      	movs	r2, #0
 800b346:	4620      	mov	r0, r4
 800b348:	4629      	mov	r1, r5
 800b34a:	f7f4 ff49 	bl	80001e0 <__aeabi_dsub>
 800b34e:	4632      	mov	r2, r6
 800b350:	463b      	mov	r3, r7
 800b352:	f7f4 ff45 	bl	80001e0 <__aeabi_dsub>
 800b356:	4602      	mov	r2, r0
 800b358:	460b      	mov	r3, r1
 800b35a:	4650      	mov	r0, sl
 800b35c:	4659      	mov	r1, fp
 800b35e:	f7f4 ff3f 	bl	80001e0 <__aeabi_dsub>
 800b362:	ec53 2b18 	vmov	r2, r3, d8
 800b366:	f7f5 f8f3 	bl	8000550 <__aeabi_dmul>
 800b36a:	4622      	mov	r2, r4
 800b36c:	4606      	mov	r6, r0
 800b36e:	460f      	mov	r7, r1
 800b370:	462b      	mov	r3, r5
 800b372:	ec51 0b19 	vmov	r0, r1, d9
 800b376:	f7f5 f8eb 	bl	8000550 <__aeabi_dmul>
 800b37a:	4602      	mov	r2, r0
 800b37c:	460b      	mov	r3, r1
 800b37e:	4630      	mov	r0, r6
 800b380:	4639      	mov	r1, r7
 800b382:	f7f4 ff2f 	bl	80001e4 <__adddf3>
 800b386:	4606      	mov	r6, r0
 800b388:	460f      	mov	r7, r1
 800b38a:	4602      	mov	r2, r0
 800b38c:	460b      	mov	r3, r1
 800b38e:	4640      	mov	r0, r8
 800b390:	4649      	mov	r1, r9
 800b392:	f7f4 ff27 	bl	80001e4 <__adddf3>
 800b396:	a33e      	add	r3, pc, #248	; (adr r3, 800b490 <__ieee754_pow+0x738>)
 800b398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39c:	2000      	movs	r0, #0
 800b39e:	4604      	mov	r4, r0
 800b3a0:	460d      	mov	r5, r1
 800b3a2:	f7f5 f8d5 	bl	8000550 <__aeabi_dmul>
 800b3a6:	4642      	mov	r2, r8
 800b3a8:	ec41 0b18 	vmov	d8, r0, r1
 800b3ac:	464b      	mov	r3, r9
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	f7f4 ff15 	bl	80001e0 <__aeabi_dsub>
 800b3b6:	4602      	mov	r2, r0
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	4630      	mov	r0, r6
 800b3bc:	4639      	mov	r1, r7
 800b3be:	f7f4 ff0f 	bl	80001e0 <__aeabi_dsub>
 800b3c2:	a335      	add	r3, pc, #212	; (adr r3, 800b498 <__ieee754_pow+0x740>)
 800b3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c8:	f7f5 f8c2 	bl	8000550 <__aeabi_dmul>
 800b3cc:	a334      	add	r3, pc, #208	; (adr r3, 800b4a0 <__ieee754_pow+0x748>)
 800b3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d2:	4606      	mov	r6, r0
 800b3d4:	460f      	mov	r7, r1
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	4629      	mov	r1, r5
 800b3da:	f7f5 f8b9 	bl	8000550 <__aeabi_dmul>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	4639      	mov	r1, r7
 800b3e6:	f7f4 fefd 	bl	80001e4 <__adddf3>
 800b3ea:	9a07      	ldr	r2, [sp, #28]
 800b3ec:	4b37      	ldr	r3, [pc, #220]	; (800b4cc <__ieee754_pow+0x774>)
 800b3ee:	4413      	add	r3, r2
 800b3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f4:	f7f4 fef6 	bl	80001e4 <__adddf3>
 800b3f8:	4682      	mov	sl, r0
 800b3fa:	9805      	ldr	r0, [sp, #20]
 800b3fc:	468b      	mov	fp, r1
 800b3fe:	f7f5 f83d 	bl	800047c <__aeabi_i2d>
 800b402:	9a07      	ldr	r2, [sp, #28]
 800b404:	4b32      	ldr	r3, [pc, #200]	; (800b4d0 <__ieee754_pow+0x778>)
 800b406:	4413      	add	r3, r2
 800b408:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b40c:	4606      	mov	r6, r0
 800b40e:	460f      	mov	r7, r1
 800b410:	4652      	mov	r2, sl
 800b412:	465b      	mov	r3, fp
 800b414:	ec51 0b18 	vmov	r0, r1, d8
 800b418:	f7f4 fee4 	bl	80001e4 <__adddf3>
 800b41c:	4642      	mov	r2, r8
 800b41e:	464b      	mov	r3, r9
 800b420:	f7f4 fee0 	bl	80001e4 <__adddf3>
 800b424:	4632      	mov	r2, r6
 800b426:	463b      	mov	r3, r7
 800b428:	f7f4 fedc 	bl	80001e4 <__adddf3>
 800b42c:	2000      	movs	r0, #0
 800b42e:	4632      	mov	r2, r6
 800b430:	463b      	mov	r3, r7
 800b432:	4604      	mov	r4, r0
 800b434:	460d      	mov	r5, r1
 800b436:	f7f4 fed3 	bl	80001e0 <__aeabi_dsub>
 800b43a:	4642      	mov	r2, r8
 800b43c:	464b      	mov	r3, r9
 800b43e:	f7f4 fecf 	bl	80001e0 <__aeabi_dsub>
 800b442:	ec53 2b18 	vmov	r2, r3, d8
 800b446:	f7f4 fecb 	bl	80001e0 <__aeabi_dsub>
 800b44a:	4602      	mov	r2, r0
 800b44c:	460b      	mov	r3, r1
 800b44e:	4650      	mov	r0, sl
 800b450:	4659      	mov	r1, fp
 800b452:	e610      	b.n	800b076 <__ieee754_pow+0x31e>
 800b454:	2401      	movs	r4, #1
 800b456:	e6a1      	b.n	800b19c <__ieee754_pow+0x444>
 800b458:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b4a8 <__ieee754_pow+0x750>
 800b45c:	e617      	b.n	800b08e <__ieee754_pow+0x336>
 800b45e:	bf00      	nop
 800b460:	4a454eef 	.word	0x4a454eef
 800b464:	3fca7e28 	.word	0x3fca7e28
 800b468:	93c9db65 	.word	0x93c9db65
 800b46c:	3fcd864a 	.word	0x3fcd864a
 800b470:	a91d4101 	.word	0xa91d4101
 800b474:	3fd17460 	.word	0x3fd17460
 800b478:	518f264d 	.word	0x518f264d
 800b47c:	3fd55555 	.word	0x3fd55555
 800b480:	db6fabff 	.word	0xdb6fabff
 800b484:	3fdb6db6 	.word	0x3fdb6db6
 800b488:	33333303 	.word	0x33333303
 800b48c:	3fe33333 	.word	0x3fe33333
 800b490:	e0000000 	.word	0xe0000000
 800b494:	3feec709 	.word	0x3feec709
 800b498:	dc3a03fd 	.word	0xdc3a03fd
 800b49c:	3feec709 	.word	0x3feec709
 800b4a0:	145b01f5 	.word	0x145b01f5
 800b4a4:	be3e2fe0 	.word	0xbe3e2fe0
 800b4a8:	00000000 	.word	0x00000000
 800b4ac:	3ff00000 	.word	0x3ff00000
 800b4b0:	7ff00000 	.word	0x7ff00000
 800b4b4:	43400000 	.word	0x43400000
 800b4b8:	0003988e 	.word	0x0003988e
 800b4bc:	000bb679 	.word	0x000bb679
 800b4c0:	0800c8d0 	.word	0x0800c8d0
 800b4c4:	3ff00000 	.word	0x3ff00000
 800b4c8:	40080000 	.word	0x40080000
 800b4cc:	0800c8f0 	.word	0x0800c8f0
 800b4d0:	0800c8e0 	.word	0x0800c8e0
 800b4d4:	a3b5      	add	r3, pc, #724	; (adr r3, 800b7ac <__ieee754_pow+0xa54>)
 800b4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4da:	4640      	mov	r0, r8
 800b4dc:	4649      	mov	r1, r9
 800b4de:	f7f4 fe81 	bl	80001e4 <__adddf3>
 800b4e2:	4622      	mov	r2, r4
 800b4e4:	ec41 0b1a 	vmov	d10, r0, r1
 800b4e8:	462b      	mov	r3, r5
 800b4ea:	4630      	mov	r0, r6
 800b4ec:	4639      	mov	r1, r7
 800b4ee:	f7f4 fe77 	bl	80001e0 <__aeabi_dsub>
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	ec51 0b1a 	vmov	r0, r1, d10
 800b4fa:	f7f5 fab9 	bl	8000a70 <__aeabi_dcmpgt>
 800b4fe:	2800      	cmp	r0, #0
 800b500:	f47f ae04 	bne.w	800b10c <__ieee754_pow+0x3b4>
 800b504:	4aa4      	ldr	r2, [pc, #656]	; (800b798 <__ieee754_pow+0xa40>)
 800b506:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b50a:	4293      	cmp	r3, r2
 800b50c:	f340 8108 	ble.w	800b720 <__ieee754_pow+0x9c8>
 800b510:	151b      	asrs	r3, r3, #20
 800b512:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b516:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b51a:	fa4a f303 	asr.w	r3, sl, r3
 800b51e:	445b      	add	r3, fp
 800b520:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b524:	4e9d      	ldr	r6, [pc, #628]	; (800b79c <__ieee754_pow+0xa44>)
 800b526:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b52a:	4116      	asrs	r6, r2
 800b52c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b530:	2000      	movs	r0, #0
 800b532:	ea23 0106 	bic.w	r1, r3, r6
 800b536:	f1c2 0214 	rsb	r2, r2, #20
 800b53a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b53e:	fa4a fa02 	asr.w	sl, sl, r2
 800b542:	f1bb 0f00 	cmp.w	fp, #0
 800b546:	4602      	mov	r2, r0
 800b548:	460b      	mov	r3, r1
 800b54a:	4620      	mov	r0, r4
 800b54c:	4629      	mov	r1, r5
 800b54e:	bfb8      	it	lt
 800b550:	f1ca 0a00 	rsblt	sl, sl, #0
 800b554:	f7f4 fe44 	bl	80001e0 <__aeabi_dsub>
 800b558:	ec41 0b19 	vmov	d9, r0, r1
 800b55c:	4642      	mov	r2, r8
 800b55e:	464b      	mov	r3, r9
 800b560:	ec51 0b19 	vmov	r0, r1, d9
 800b564:	f7f4 fe3e 	bl	80001e4 <__adddf3>
 800b568:	a37b      	add	r3, pc, #492	; (adr r3, 800b758 <__ieee754_pow+0xa00>)
 800b56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56e:	2000      	movs	r0, #0
 800b570:	4604      	mov	r4, r0
 800b572:	460d      	mov	r5, r1
 800b574:	f7f4 ffec 	bl	8000550 <__aeabi_dmul>
 800b578:	ec53 2b19 	vmov	r2, r3, d9
 800b57c:	4606      	mov	r6, r0
 800b57e:	460f      	mov	r7, r1
 800b580:	4620      	mov	r0, r4
 800b582:	4629      	mov	r1, r5
 800b584:	f7f4 fe2c 	bl	80001e0 <__aeabi_dsub>
 800b588:	4602      	mov	r2, r0
 800b58a:	460b      	mov	r3, r1
 800b58c:	4640      	mov	r0, r8
 800b58e:	4649      	mov	r1, r9
 800b590:	f7f4 fe26 	bl	80001e0 <__aeabi_dsub>
 800b594:	a372      	add	r3, pc, #456	; (adr r3, 800b760 <__ieee754_pow+0xa08>)
 800b596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59a:	f7f4 ffd9 	bl	8000550 <__aeabi_dmul>
 800b59e:	a372      	add	r3, pc, #456	; (adr r3, 800b768 <__ieee754_pow+0xa10>)
 800b5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a4:	4680      	mov	r8, r0
 800b5a6:	4689      	mov	r9, r1
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	4629      	mov	r1, r5
 800b5ac:	f7f4 ffd0 	bl	8000550 <__aeabi_dmul>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	4640      	mov	r0, r8
 800b5b6:	4649      	mov	r1, r9
 800b5b8:	f7f4 fe14 	bl	80001e4 <__adddf3>
 800b5bc:	4604      	mov	r4, r0
 800b5be:	460d      	mov	r5, r1
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	4630      	mov	r0, r6
 800b5c6:	4639      	mov	r1, r7
 800b5c8:	f7f4 fe0c 	bl	80001e4 <__adddf3>
 800b5cc:	4632      	mov	r2, r6
 800b5ce:	463b      	mov	r3, r7
 800b5d0:	4680      	mov	r8, r0
 800b5d2:	4689      	mov	r9, r1
 800b5d4:	f7f4 fe04 	bl	80001e0 <__aeabi_dsub>
 800b5d8:	4602      	mov	r2, r0
 800b5da:	460b      	mov	r3, r1
 800b5dc:	4620      	mov	r0, r4
 800b5de:	4629      	mov	r1, r5
 800b5e0:	f7f4 fdfe 	bl	80001e0 <__aeabi_dsub>
 800b5e4:	4642      	mov	r2, r8
 800b5e6:	4606      	mov	r6, r0
 800b5e8:	460f      	mov	r7, r1
 800b5ea:	464b      	mov	r3, r9
 800b5ec:	4640      	mov	r0, r8
 800b5ee:	4649      	mov	r1, r9
 800b5f0:	f7f4 ffae 	bl	8000550 <__aeabi_dmul>
 800b5f4:	a35e      	add	r3, pc, #376	; (adr r3, 800b770 <__ieee754_pow+0xa18>)
 800b5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fa:	4604      	mov	r4, r0
 800b5fc:	460d      	mov	r5, r1
 800b5fe:	f7f4 ffa7 	bl	8000550 <__aeabi_dmul>
 800b602:	a35d      	add	r3, pc, #372	; (adr r3, 800b778 <__ieee754_pow+0xa20>)
 800b604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b608:	f7f4 fdea 	bl	80001e0 <__aeabi_dsub>
 800b60c:	4622      	mov	r2, r4
 800b60e:	462b      	mov	r3, r5
 800b610:	f7f4 ff9e 	bl	8000550 <__aeabi_dmul>
 800b614:	a35a      	add	r3, pc, #360	; (adr r3, 800b780 <__ieee754_pow+0xa28>)
 800b616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61a:	f7f4 fde3 	bl	80001e4 <__adddf3>
 800b61e:	4622      	mov	r2, r4
 800b620:	462b      	mov	r3, r5
 800b622:	f7f4 ff95 	bl	8000550 <__aeabi_dmul>
 800b626:	a358      	add	r3, pc, #352	; (adr r3, 800b788 <__ieee754_pow+0xa30>)
 800b628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62c:	f7f4 fdd8 	bl	80001e0 <__aeabi_dsub>
 800b630:	4622      	mov	r2, r4
 800b632:	462b      	mov	r3, r5
 800b634:	f7f4 ff8c 	bl	8000550 <__aeabi_dmul>
 800b638:	a355      	add	r3, pc, #340	; (adr r3, 800b790 <__ieee754_pow+0xa38>)
 800b63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63e:	f7f4 fdd1 	bl	80001e4 <__adddf3>
 800b642:	4622      	mov	r2, r4
 800b644:	462b      	mov	r3, r5
 800b646:	f7f4 ff83 	bl	8000550 <__aeabi_dmul>
 800b64a:	4602      	mov	r2, r0
 800b64c:	460b      	mov	r3, r1
 800b64e:	4640      	mov	r0, r8
 800b650:	4649      	mov	r1, r9
 800b652:	f7f4 fdc5 	bl	80001e0 <__aeabi_dsub>
 800b656:	4604      	mov	r4, r0
 800b658:	460d      	mov	r5, r1
 800b65a:	4602      	mov	r2, r0
 800b65c:	460b      	mov	r3, r1
 800b65e:	4640      	mov	r0, r8
 800b660:	4649      	mov	r1, r9
 800b662:	f7f4 ff75 	bl	8000550 <__aeabi_dmul>
 800b666:	2200      	movs	r2, #0
 800b668:	ec41 0b19 	vmov	d9, r0, r1
 800b66c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b670:	4620      	mov	r0, r4
 800b672:	4629      	mov	r1, r5
 800b674:	f7f4 fdb4 	bl	80001e0 <__aeabi_dsub>
 800b678:	4602      	mov	r2, r0
 800b67a:	460b      	mov	r3, r1
 800b67c:	ec51 0b19 	vmov	r0, r1, d9
 800b680:	f7f5 f890 	bl	80007a4 <__aeabi_ddiv>
 800b684:	4632      	mov	r2, r6
 800b686:	4604      	mov	r4, r0
 800b688:	460d      	mov	r5, r1
 800b68a:	463b      	mov	r3, r7
 800b68c:	4640      	mov	r0, r8
 800b68e:	4649      	mov	r1, r9
 800b690:	f7f4 ff5e 	bl	8000550 <__aeabi_dmul>
 800b694:	4632      	mov	r2, r6
 800b696:	463b      	mov	r3, r7
 800b698:	f7f4 fda4 	bl	80001e4 <__adddf3>
 800b69c:	4602      	mov	r2, r0
 800b69e:	460b      	mov	r3, r1
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	4629      	mov	r1, r5
 800b6a4:	f7f4 fd9c 	bl	80001e0 <__aeabi_dsub>
 800b6a8:	4642      	mov	r2, r8
 800b6aa:	464b      	mov	r3, r9
 800b6ac:	f7f4 fd98 	bl	80001e0 <__aeabi_dsub>
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	493a      	ldr	r1, [pc, #232]	; (800b7a0 <__ieee754_pow+0xa48>)
 800b6b6:	2000      	movs	r0, #0
 800b6b8:	f7f4 fd92 	bl	80001e0 <__aeabi_dsub>
 800b6bc:	ec41 0b10 	vmov	d0, r0, r1
 800b6c0:	ee10 3a90 	vmov	r3, s1
 800b6c4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b6c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6cc:	da2b      	bge.n	800b726 <__ieee754_pow+0x9ce>
 800b6ce:	4650      	mov	r0, sl
 800b6d0:	f001 f856 	bl	800c780 <scalbn>
 800b6d4:	ec51 0b10 	vmov	r0, r1, d0
 800b6d8:	ec53 2b18 	vmov	r2, r3, d8
 800b6dc:	f7ff bbed 	b.w	800aeba <__ieee754_pow+0x162>
 800b6e0:	4b30      	ldr	r3, [pc, #192]	; (800b7a4 <__ieee754_pow+0xa4c>)
 800b6e2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b6e6:	429e      	cmp	r6, r3
 800b6e8:	f77f af0c 	ble.w	800b504 <__ieee754_pow+0x7ac>
 800b6ec:	4b2e      	ldr	r3, [pc, #184]	; (800b7a8 <__ieee754_pow+0xa50>)
 800b6ee:	440b      	add	r3, r1
 800b6f0:	4303      	orrs	r3, r0
 800b6f2:	d009      	beq.n	800b708 <__ieee754_pow+0x9b0>
 800b6f4:	ec51 0b18 	vmov	r0, r1, d8
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	f7f5 f99a 	bl	8000a34 <__aeabi_dcmplt>
 800b700:	3800      	subs	r0, #0
 800b702:	bf18      	it	ne
 800b704:	2001      	movne	r0, #1
 800b706:	e447      	b.n	800af98 <__ieee754_pow+0x240>
 800b708:	4622      	mov	r2, r4
 800b70a:	462b      	mov	r3, r5
 800b70c:	f7f4 fd68 	bl	80001e0 <__aeabi_dsub>
 800b710:	4642      	mov	r2, r8
 800b712:	464b      	mov	r3, r9
 800b714:	f7f5 f9a2 	bl	8000a5c <__aeabi_dcmpge>
 800b718:	2800      	cmp	r0, #0
 800b71a:	f43f aef3 	beq.w	800b504 <__ieee754_pow+0x7ac>
 800b71e:	e7e9      	b.n	800b6f4 <__ieee754_pow+0x99c>
 800b720:	f04f 0a00 	mov.w	sl, #0
 800b724:	e71a      	b.n	800b55c <__ieee754_pow+0x804>
 800b726:	ec51 0b10 	vmov	r0, r1, d0
 800b72a:	4619      	mov	r1, r3
 800b72c:	e7d4      	b.n	800b6d8 <__ieee754_pow+0x980>
 800b72e:	491c      	ldr	r1, [pc, #112]	; (800b7a0 <__ieee754_pow+0xa48>)
 800b730:	2000      	movs	r0, #0
 800b732:	f7ff bb30 	b.w	800ad96 <__ieee754_pow+0x3e>
 800b736:	2000      	movs	r0, #0
 800b738:	2100      	movs	r1, #0
 800b73a:	f7ff bb2c 	b.w	800ad96 <__ieee754_pow+0x3e>
 800b73e:	4630      	mov	r0, r6
 800b740:	4639      	mov	r1, r7
 800b742:	f7ff bb28 	b.w	800ad96 <__ieee754_pow+0x3e>
 800b746:	9204      	str	r2, [sp, #16]
 800b748:	f7ff bb7a 	b.w	800ae40 <__ieee754_pow+0xe8>
 800b74c:	2300      	movs	r3, #0
 800b74e:	f7ff bb64 	b.w	800ae1a <__ieee754_pow+0xc2>
 800b752:	bf00      	nop
 800b754:	f3af 8000 	nop.w
 800b758:	00000000 	.word	0x00000000
 800b75c:	3fe62e43 	.word	0x3fe62e43
 800b760:	fefa39ef 	.word	0xfefa39ef
 800b764:	3fe62e42 	.word	0x3fe62e42
 800b768:	0ca86c39 	.word	0x0ca86c39
 800b76c:	be205c61 	.word	0xbe205c61
 800b770:	72bea4d0 	.word	0x72bea4d0
 800b774:	3e663769 	.word	0x3e663769
 800b778:	c5d26bf1 	.word	0xc5d26bf1
 800b77c:	3ebbbd41 	.word	0x3ebbbd41
 800b780:	af25de2c 	.word	0xaf25de2c
 800b784:	3f11566a 	.word	0x3f11566a
 800b788:	16bebd93 	.word	0x16bebd93
 800b78c:	3f66c16c 	.word	0x3f66c16c
 800b790:	5555553e 	.word	0x5555553e
 800b794:	3fc55555 	.word	0x3fc55555
 800b798:	3fe00000 	.word	0x3fe00000
 800b79c:	000fffff 	.word	0x000fffff
 800b7a0:	3ff00000 	.word	0x3ff00000
 800b7a4:	4090cbff 	.word	0x4090cbff
 800b7a8:	3f6f3400 	.word	0x3f6f3400
 800b7ac:	652b82fe 	.word	0x652b82fe
 800b7b0:	3c971547 	.word	0x3c971547
 800b7b4:	00000000 	.word	0x00000000

0800b7b8 <__ieee754_rem_pio2>:
 800b7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7bc:	ed2d 8b02 	vpush	{d8}
 800b7c0:	ec55 4b10 	vmov	r4, r5, d0
 800b7c4:	4bca      	ldr	r3, [pc, #808]	; (800baf0 <__ieee754_rem_pio2+0x338>)
 800b7c6:	b08b      	sub	sp, #44	; 0x2c
 800b7c8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b7cc:	4598      	cmp	r8, r3
 800b7ce:	4682      	mov	sl, r0
 800b7d0:	9502      	str	r5, [sp, #8]
 800b7d2:	dc08      	bgt.n	800b7e6 <__ieee754_rem_pio2+0x2e>
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	ed80 0b00 	vstr	d0, [r0]
 800b7dc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b7e0:	f04f 0b00 	mov.w	fp, #0
 800b7e4:	e028      	b.n	800b838 <__ieee754_rem_pio2+0x80>
 800b7e6:	4bc3      	ldr	r3, [pc, #780]	; (800baf4 <__ieee754_rem_pio2+0x33c>)
 800b7e8:	4598      	cmp	r8, r3
 800b7ea:	dc78      	bgt.n	800b8de <__ieee754_rem_pio2+0x126>
 800b7ec:	9b02      	ldr	r3, [sp, #8]
 800b7ee:	4ec2      	ldr	r6, [pc, #776]	; (800baf8 <__ieee754_rem_pio2+0x340>)
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	ee10 0a10 	vmov	r0, s0
 800b7f6:	a3b0      	add	r3, pc, #704	; (adr r3, 800bab8 <__ieee754_rem_pio2+0x300>)
 800b7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fc:	4629      	mov	r1, r5
 800b7fe:	dd39      	ble.n	800b874 <__ieee754_rem_pio2+0xbc>
 800b800:	f7f4 fcee 	bl	80001e0 <__aeabi_dsub>
 800b804:	45b0      	cmp	r8, r6
 800b806:	4604      	mov	r4, r0
 800b808:	460d      	mov	r5, r1
 800b80a:	d01b      	beq.n	800b844 <__ieee754_rem_pio2+0x8c>
 800b80c:	a3ac      	add	r3, pc, #688	; (adr r3, 800bac0 <__ieee754_rem_pio2+0x308>)
 800b80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b812:	f7f4 fce5 	bl	80001e0 <__aeabi_dsub>
 800b816:	4602      	mov	r2, r0
 800b818:	460b      	mov	r3, r1
 800b81a:	e9ca 2300 	strd	r2, r3, [sl]
 800b81e:	4620      	mov	r0, r4
 800b820:	4629      	mov	r1, r5
 800b822:	f7f4 fcdd 	bl	80001e0 <__aeabi_dsub>
 800b826:	a3a6      	add	r3, pc, #664	; (adr r3, 800bac0 <__ieee754_rem_pio2+0x308>)
 800b828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82c:	f7f4 fcd8 	bl	80001e0 <__aeabi_dsub>
 800b830:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b834:	f04f 0b01 	mov.w	fp, #1
 800b838:	4658      	mov	r0, fp
 800b83a:	b00b      	add	sp, #44	; 0x2c
 800b83c:	ecbd 8b02 	vpop	{d8}
 800b840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b844:	a3a0      	add	r3, pc, #640	; (adr r3, 800bac8 <__ieee754_rem_pio2+0x310>)
 800b846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84a:	f7f4 fcc9 	bl	80001e0 <__aeabi_dsub>
 800b84e:	a3a0      	add	r3, pc, #640	; (adr r3, 800bad0 <__ieee754_rem_pio2+0x318>)
 800b850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b854:	4604      	mov	r4, r0
 800b856:	460d      	mov	r5, r1
 800b858:	f7f4 fcc2 	bl	80001e0 <__aeabi_dsub>
 800b85c:	4602      	mov	r2, r0
 800b85e:	460b      	mov	r3, r1
 800b860:	e9ca 2300 	strd	r2, r3, [sl]
 800b864:	4620      	mov	r0, r4
 800b866:	4629      	mov	r1, r5
 800b868:	f7f4 fcba 	bl	80001e0 <__aeabi_dsub>
 800b86c:	a398      	add	r3, pc, #608	; (adr r3, 800bad0 <__ieee754_rem_pio2+0x318>)
 800b86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b872:	e7db      	b.n	800b82c <__ieee754_rem_pio2+0x74>
 800b874:	f7f4 fcb6 	bl	80001e4 <__adddf3>
 800b878:	45b0      	cmp	r8, r6
 800b87a:	4604      	mov	r4, r0
 800b87c:	460d      	mov	r5, r1
 800b87e:	d016      	beq.n	800b8ae <__ieee754_rem_pio2+0xf6>
 800b880:	a38f      	add	r3, pc, #572	; (adr r3, 800bac0 <__ieee754_rem_pio2+0x308>)
 800b882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b886:	f7f4 fcad 	bl	80001e4 <__adddf3>
 800b88a:	4602      	mov	r2, r0
 800b88c:	460b      	mov	r3, r1
 800b88e:	e9ca 2300 	strd	r2, r3, [sl]
 800b892:	4620      	mov	r0, r4
 800b894:	4629      	mov	r1, r5
 800b896:	f7f4 fca3 	bl	80001e0 <__aeabi_dsub>
 800b89a:	a389      	add	r3, pc, #548	; (adr r3, 800bac0 <__ieee754_rem_pio2+0x308>)
 800b89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a0:	f7f4 fca0 	bl	80001e4 <__adddf3>
 800b8a4:	f04f 3bff 	mov.w	fp, #4294967295
 800b8a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b8ac:	e7c4      	b.n	800b838 <__ieee754_rem_pio2+0x80>
 800b8ae:	a386      	add	r3, pc, #536	; (adr r3, 800bac8 <__ieee754_rem_pio2+0x310>)
 800b8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b4:	f7f4 fc96 	bl	80001e4 <__adddf3>
 800b8b8:	a385      	add	r3, pc, #532	; (adr r3, 800bad0 <__ieee754_rem_pio2+0x318>)
 800b8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8be:	4604      	mov	r4, r0
 800b8c0:	460d      	mov	r5, r1
 800b8c2:	f7f4 fc8f 	bl	80001e4 <__adddf3>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	e9ca 2300 	strd	r2, r3, [sl]
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	4629      	mov	r1, r5
 800b8d2:	f7f4 fc85 	bl	80001e0 <__aeabi_dsub>
 800b8d6:	a37e      	add	r3, pc, #504	; (adr r3, 800bad0 <__ieee754_rem_pio2+0x318>)
 800b8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8dc:	e7e0      	b.n	800b8a0 <__ieee754_rem_pio2+0xe8>
 800b8de:	4b87      	ldr	r3, [pc, #540]	; (800bafc <__ieee754_rem_pio2+0x344>)
 800b8e0:	4598      	cmp	r8, r3
 800b8e2:	f300 80d9 	bgt.w	800ba98 <__ieee754_rem_pio2+0x2e0>
 800b8e6:	f000 ff2d 	bl	800c744 <fabs>
 800b8ea:	ec55 4b10 	vmov	r4, r5, d0
 800b8ee:	ee10 0a10 	vmov	r0, s0
 800b8f2:	a379      	add	r3, pc, #484	; (adr r3, 800bad8 <__ieee754_rem_pio2+0x320>)
 800b8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f8:	4629      	mov	r1, r5
 800b8fa:	f7f4 fe29 	bl	8000550 <__aeabi_dmul>
 800b8fe:	4b80      	ldr	r3, [pc, #512]	; (800bb00 <__ieee754_rem_pio2+0x348>)
 800b900:	2200      	movs	r2, #0
 800b902:	f7f4 fc6f 	bl	80001e4 <__adddf3>
 800b906:	f7f5 f8d3 	bl	8000ab0 <__aeabi_d2iz>
 800b90a:	4683      	mov	fp, r0
 800b90c:	f7f4 fdb6 	bl	800047c <__aeabi_i2d>
 800b910:	4602      	mov	r2, r0
 800b912:	460b      	mov	r3, r1
 800b914:	ec43 2b18 	vmov	d8, r2, r3
 800b918:	a367      	add	r3, pc, #412	; (adr r3, 800bab8 <__ieee754_rem_pio2+0x300>)
 800b91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91e:	f7f4 fe17 	bl	8000550 <__aeabi_dmul>
 800b922:	4602      	mov	r2, r0
 800b924:	460b      	mov	r3, r1
 800b926:	4620      	mov	r0, r4
 800b928:	4629      	mov	r1, r5
 800b92a:	f7f4 fc59 	bl	80001e0 <__aeabi_dsub>
 800b92e:	a364      	add	r3, pc, #400	; (adr r3, 800bac0 <__ieee754_rem_pio2+0x308>)
 800b930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b934:	4606      	mov	r6, r0
 800b936:	460f      	mov	r7, r1
 800b938:	ec51 0b18 	vmov	r0, r1, d8
 800b93c:	f7f4 fe08 	bl	8000550 <__aeabi_dmul>
 800b940:	f1bb 0f1f 	cmp.w	fp, #31
 800b944:	4604      	mov	r4, r0
 800b946:	460d      	mov	r5, r1
 800b948:	dc0d      	bgt.n	800b966 <__ieee754_rem_pio2+0x1ae>
 800b94a:	4b6e      	ldr	r3, [pc, #440]	; (800bb04 <__ieee754_rem_pio2+0x34c>)
 800b94c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b954:	4543      	cmp	r3, r8
 800b956:	d006      	beq.n	800b966 <__ieee754_rem_pio2+0x1ae>
 800b958:	4622      	mov	r2, r4
 800b95a:	462b      	mov	r3, r5
 800b95c:	4630      	mov	r0, r6
 800b95e:	4639      	mov	r1, r7
 800b960:	f7f4 fc3e 	bl	80001e0 <__aeabi_dsub>
 800b964:	e00f      	b.n	800b986 <__ieee754_rem_pio2+0x1ce>
 800b966:	462b      	mov	r3, r5
 800b968:	4622      	mov	r2, r4
 800b96a:	4630      	mov	r0, r6
 800b96c:	4639      	mov	r1, r7
 800b96e:	f7f4 fc37 	bl	80001e0 <__aeabi_dsub>
 800b972:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b976:	9303      	str	r3, [sp, #12]
 800b978:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b97c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b980:	f1b8 0f10 	cmp.w	r8, #16
 800b984:	dc02      	bgt.n	800b98c <__ieee754_rem_pio2+0x1d4>
 800b986:	e9ca 0100 	strd	r0, r1, [sl]
 800b98a:	e039      	b.n	800ba00 <__ieee754_rem_pio2+0x248>
 800b98c:	a34e      	add	r3, pc, #312	; (adr r3, 800bac8 <__ieee754_rem_pio2+0x310>)
 800b98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b992:	ec51 0b18 	vmov	r0, r1, d8
 800b996:	f7f4 fddb 	bl	8000550 <__aeabi_dmul>
 800b99a:	4604      	mov	r4, r0
 800b99c:	460d      	mov	r5, r1
 800b99e:	4602      	mov	r2, r0
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	4639      	mov	r1, r7
 800b9a6:	f7f4 fc1b 	bl	80001e0 <__aeabi_dsub>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	4680      	mov	r8, r0
 800b9b0:	4689      	mov	r9, r1
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	4639      	mov	r1, r7
 800b9b6:	f7f4 fc13 	bl	80001e0 <__aeabi_dsub>
 800b9ba:	4622      	mov	r2, r4
 800b9bc:	462b      	mov	r3, r5
 800b9be:	f7f4 fc0f 	bl	80001e0 <__aeabi_dsub>
 800b9c2:	a343      	add	r3, pc, #268	; (adr r3, 800bad0 <__ieee754_rem_pio2+0x318>)
 800b9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c8:	4604      	mov	r4, r0
 800b9ca:	460d      	mov	r5, r1
 800b9cc:	ec51 0b18 	vmov	r0, r1, d8
 800b9d0:	f7f4 fdbe 	bl	8000550 <__aeabi_dmul>
 800b9d4:	4622      	mov	r2, r4
 800b9d6:	462b      	mov	r3, r5
 800b9d8:	f7f4 fc02 	bl	80001e0 <__aeabi_dsub>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	460b      	mov	r3, r1
 800b9e0:	4604      	mov	r4, r0
 800b9e2:	460d      	mov	r5, r1
 800b9e4:	4640      	mov	r0, r8
 800b9e6:	4649      	mov	r1, r9
 800b9e8:	f7f4 fbfa 	bl	80001e0 <__aeabi_dsub>
 800b9ec:	9a03      	ldr	r2, [sp, #12]
 800b9ee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b9f2:	1ad3      	subs	r3, r2, r3
 800b9f4:	2b31      	cmp	r3, #49	; 0x31
 800b9f6:	dc24      	bgt.n	800ba42 <__ieee754_rem_pio2+0x28a>
 800b9f8:	e9ca 0100 	strd	r0, r1, [sl]
 800b9fc:	4646      	mov	r6, r8
 800b9fe:	464f      	mov	r7, r9
 800ba00:	e9da 8900 	ldrd	r8, r9, [sl]
 800ba04:	4630      	mov	r0, r6
 800ba06:	4642      	mov	r2, r8
 800ba08:	464b      	mov	r3, r9
 800ba0a:	4639      	mov	r1, r7
 800ba0c:	f7f4 fbe8 	bl	80001e0 <__aeabi_dsub>
 800ba10:	462b      	mov	r3, r5
 800ba12:	4622      	mov	r2, r4
 800ba14:	f7f4 fbe4 	bl	80001e0 <__aeabi_dsub>
 800ba18:	9b02      	ldr	r3, [sp, #8]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ba20:	f6bf af0a 	bge.w	800b838 <__ieee754_rem_pio2+0x80>
 800ba24:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ba28:	f8ca 3004 	str.w	r3, [sl, #4]
 800ba2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba30:	f8ca 8000 	str.w	r8, [sl]
 800ba34:	f8ca 0008 	str.w	r0, [sl, #8]
 800ba38:	f8ca 300c 	str.w	r3, [sl, #12]
 800ba3c:	f1cb 0b00 	rsb	fp, fp, #0
 800ba40:	e6fa      	b.n	800b838 <__ieee754_rem_pio2+0x80>
 800ba42:	a327      	add	r3, pc, #156	; (adr r3, 800bae0 <__ieee754_rem_pio2+0x328>)
 800ba44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba48:	ec51 0b18 	vmov	r0, r1, d8
 800ba4c:	f7f4 fd80 	bl	8000550 <__aeabi_dmul>
 800ba50:	4604      	mov	r4, r0
 800ba52:	460d      	mov	r5, r1
 800ba54:	4602      	mov	r2, r0
 800ba56:	460b      	mov	r3, r1
 800ba58:	4640      	mov	r0, r8
 800ba5a:	4649      	mov	r1, r9
 800ba5c:	f7f4 fbc0 	bl	80001e0 <__aeabi_dsub>
 800ba60:	4602      	mov	r2, r0
 800ba62:	460b      	mov	r3, r1
 800ba64:	4606      	mov	r6, r0
 800ba66:	460f      	mov	r7, r1
 800ba68:	4640      	mov	r0, r8
 800ba6a:	4649      	mov	r1, r9
 800ba6c:	f7f4 fbb8 	bl	80001e0 <__aeabi_dsub>
 800ba70:	4622      	mov	r2, r4
 800ba72:	462b      	mov	r3, r5
 800ba74:	f7f4 fbb4 	bl	80001e0 <__aeabi_dsub>
 800ba78:	a31b      	add	r3, pc, #108	; (adr r3, 800bae8 <__ieee754_rem_pio2+0x330>)
 800ba7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7e:	4604      	mov	r4, r0
 800ba80:	460d      	mov	r5, r1
 800ba82:	ec51 0b18 	vmov	r0, r1, d8
 800ba86:	f7f4 fd63 	bl	8000550 <__aeabi_dmul>
 800ba8a:	4622      	mov	r2, r4
 800ba8c:	462b      	mov	r3, r5
 800ba8e:	f7f4 fba7 	bl	80001e0 <__aeabi_dsub>
 800ba92:	4604      	mov	r4, r0
 800ba94:	460d      	mov	r5, r1
 800ba96:	e75f      	b.n	800b958 <__ieee754_rem_pio2+0x1a0>
 800ba98:	4b1b      	ldr	r3, [pc, #108]	; (800bb08 <__ieee754_rem_pio2+0x350>)
 800ba9a:	4598      	cmp	r8, r3
 800ba9c:	dd36      	ble.n	800bb0c <__ieee754_rem_pio2+0x354>
 800ba9e:	ee10 2a10 	vmov	r2, s0
 800baa2:	462b      	mov	r3, r5
 800baa4:	4620      	mov	r0, r4
 800baa6:	4629      	mov	r1, r5
 800baa8:	f7f4 fb9a 	bl	80001e0 <__aeabi_dsub>
 800baac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bab0:	e9ca 0100 	strd	r0, r1, [sl]
 800bab4:	e694      	b.n	800b7e0 <__ieee754_rem_pio2+0x28>
 800bab6:	bf00      	nop
 800bab8:	54400000 	.word	0x54400000
 800babc:	3ff921fb 	.word	0x3ff921fb
 800bac0:	1a626331 	.word	0x1a626331
 800bac4:	3dd0b461 	.word	0x3dd0b461
 800bac8:	1a600000 	.word	0x1a600000
 800bacc:	3dd0b461 	.word	0x3dd0b461
 800bad0:	2e037073 	.word	0x2e037073
 800bad4:	3ba3198a 	.word	0x3ba3198a
 800bad8:	6dc9c883 	.word	0x6dc9c883
 800badc:	3fe45f30 	.word	0x3fe45f30
 800bae0:	2e000000 	.word	0x2e000000
 800bae4:	3ba3198a 	.word	0x3ba3198a
 800bae8:	252049c1 	.word	0x252049c1
 800baec:	397b839a 	.word	0x397b839a
 800baf0:	3fe921fb 	.word	0x3fe921fb
 800baf4:	4002d97b 	.word	0x4002d97b
 800baf8:	3ff921fb 	.word	0x3ff921fb
 800bafc:	413921fb 	.word	0x413921fb
 800bb00:	3fe00000 	.word	0x3fe00000
 800bb04:	0800c900 	.word	0x0800c900
 800bb08:	7fefffff 	.word	0x7fefffff
 800bb0c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800bb10:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800bb14:	ee10 0a10 	vmov	r0, s0
 800bb18:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800bb1c:	ee10 6a10 	vmov	r6, s0
 800bb20:	460f      	mov	r7, r1
 800bb22:	f7f4 ffc5 	bl	8000ab0 <__aeabi_d2iz>
 800bb26:	f7f4 fca9 	bl	800047c <__aeabi_i2d>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	4630      	mov	r0, r6
 800bb30:	4639      	mov	r1, r7
 800bb32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bb36:	f7f4 fb53 	bl	80001e0 <__aeabi_dsub>
 800bb3a:	4b23      	ldr	r3, [pc, #140]	; (800bbc8 <__ieee754_rem_pio2+0x410>)
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	f7f4 fd07 	bl	8000550 <__aeabi_dmul>
 800bb42:	460f      	mov	r7, r1
 800bb44:	4606      	mov	r6, r0
 800bb46:	f7f4 ffb3 	bl	8000ab0 <__aeabi_d2iz>
 800bb4a:	f7f4 fc97 	bl	800047c <__aeabi_i2d>
 800bb4e:	4602      	mov	r2, r0
 800bb50:	460b      	mov	r3, r1
 800bb52:	4630      	mov	r0, r6
 800bb54:	4639      	mov	r1, r7
 800bb56:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bb5a:	f7f4 fb41 	bl	80001e0 <__aeabi_dsub>
 800bb5e:	4b1a      	ldr	r3, [pc, #104]	; (800bbc8 <__ieee754_rem_pio2+0x410>)
 800bb60:	2200      	movs	r2, #0
 800bb62:	f7f4 fcf5 	bl	8000550 <__aeabi_dmul>
 800bb66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bb6a:	ad04      	add	r5, sp, #16
 800bb6c:	f04f 0803 	mov.w	r8, #3
 800bb70:	46a9      	mov	r9, r5
 800bb72:	2600      	movs	r6, #0
 800bb74:	2700      	movs	r7, #0
 800bb76:	4632      	mov	r2, r6
 800bb78:	463b      	mov	r3, r7
 800bb7a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800bb7e:	46c3      	mov	fp, r8
 800bb80:	3d08      	subs	r5, #8
 800bb82:	f108 38ff 	add.w	r8, r8, #4294967295
 800bb86:	f7f4 ff4b 	bl	8000a20 <__aeabi_dcmpeq>
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	d1f3      	bne.n	800bb76 <__ieee754_rem_pio2+0x3be>
 800bb8e:	4b0f      	ldr	r3, [pc, #60]	; (800bbcc <__ieee754_rem_pio2+0x414>)
 800bb90:	9301      	str	r3, [sp, #4]
 800bb92:	2302      	movs	r3, #2
 800bb94:	9300      	str	r3, [sp, #0]
 800bb96:	4622      	mov	r2, r4
 800bb98:	465b      	mov	r3, fp
 800bb9a:	4651      	mov	r1, sl
 800bb9c:	4648      	mov	r0, r9
 800bb9e:	f000 f993 	bl	800bec8 <__kernel_rem_pio2>
 800bba2:	9b02      	ldr	r3, [sp, #8]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	4683      	mov	fp, r0
 800bba8:	f6bf ae46 	bge.w	800b838 <__ieee754_rem_pio2+0x80>
 800bbac:	e9da 2100 	ldrd	r2, r1, [sl]
 800bbb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bbb4:	e9ca 2300 	strd	r2, r3, [sl]
 800bbb8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800bbbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bbc0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800bbc4:	e73a      	b.n	800ba3c <__ieee754_rem_pio2+0x284>
 800bbc6:	bf00      	nop
 800bbc8:	41700000 	.word	0x41700000
 800bbcc:	0800c980 	.word	0x0800c980

0800bbd0 <__ieee754_sqrt>:
 800bbd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbd4:	ec55 4b10 	vmov	r4, r5, d0
 800bbd8:	4e55      	ldr	r6, [pc, #340]	; (800bd30 <__ieee754_sqrt+0x160>)
 800bbda:	43ae      	bics	r6, r5
 800bbdc:	ee10 0a10 	vmov	r0, s0
 800bbe0:	ee10 3a10 	vmov	r3, s0
 800bbe4:	462a      	mov	r2, r5
 800bbe6:	4629      	mov	r1, r5
 800bbe8:	d110      	bne.n	800bc0c <__ieee754_sqrt+0x3c>
 800bbea:	ee10 2a10 	vmov	r2, s0
 800bbee:	462b      	mov	r3, r5
 800bbf0:	f7f4 fcae 	bl	8000550 <__aeabi_dmul>
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	4620      	mov	r0, r4
 800bbfa:	4629      	mov	r1, r5
 800bbfc:	f7f4 faf2 	bl	80001e4 <__adddf3>
 800bc00:	4604      	mov	r4, r0
 800bc02:	460d      	mov	r5, r1
 800bc04:	ec45 4b10 	vmov	d0, r4, r5
 800bc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc0c:	2d00      	cmp	r5, #0
 800bc0e:	dc10      	bgt.n	800bc32 <__ieee754_sqrt+0x62>
 800bc10:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bc14:	4330      	orrs	r0, r6
 800bc16:	d0f5      	beq.n	800bc04 <__ieee754_sqrt+0x34>
 800bc18:	b15d      	cbz	r5, 800bc32 <__ieee754_sqrt+0x62>
 800bc1a:	ee10 2a10 	vmov	r2, s0
 800bc1e:	462b      	mov	r3, r5
 800bc20:	ee10 0a10 	vmov	r0, s0
 800bc24:	f7f4 fadc 	bl	80001e0 <__aeabi_dsub>
 800bc28:	4602      	mov	r2, r0
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	f7f4 fdba 	bl	80007a4 <__aeabi_ddiv>
 800bc30:	e7e6      	b.n	800bc00 <__ieee754_sqrt+0x30>
 800bc32:	1512      	asrs	r2, r2, #20
 800bc34:	d074      	beq.n	800bd20 <__ieee754_sqrt+0x150>
 800bc36:	07d4      	lsls	r4, r2, #31
 800bc38:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800bc3c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800bc40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bc44:	bf5e      	ittt	pl
 800bc46:	0fda      	lsrpl	r2, r3, #31
 800bc48:	005b      	lslpl	r3, r3, #1
 800bc4a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800bc4e:	2400      	movs	r4, #0
 800bc50:	0fda      	lsrs	r2, r3, #31
 800bc52:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800bc56:	107f      	asrs	r7, r7, #1
 800bc58:	005b      	lsls	r3, r3, #1
 800bc5a:	2516      	movs	r5, #22
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800bc62:	1886      	adds	r6, r0, r2
 800bc64:	428e      	cmp	r6, r1
 800bc66:	bfde      	ittt	le
 800bc68:	1b89      	suble	r1, r1, r6
 800bc6a:	18b0      	addle	r0, r6, r2
 800bc6c:	18a4      	addle	r4, r4, r2
 800bc6e:	0049      	lsls	r1, r1, #1
 800bc70:	3d01      	subs	r5, #1
 800bc72:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800bc76:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800bc7a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bc7e:	d1f0      	bne.n	800bc62 <__ieee754_sqrt+0x92>
 800bc80:	462a      	mov	r2, r5
 800bc82:	f04f 0e20 	mov.w	lr, #32
 800bc86:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bc8a:	4281      	cmp	r1, r0
 800bc8c:	eb06 0c05 	add.w	ip, r6, r5
 800bc90:	dc02      	bgt.n	800bc98 <__ieee754_sqrt+0xc8>
 800bc92:	d113      	bne.n	800bcbc <__ieee754_sqrt+0xec>
 800bc94:	459c      	cmp	ip, r3
 800bc96:	d811      	bhi.n	800bcbc <__ieee754_sqrt+0xec>
 800bc98:	f1bc 0f00 	cmp.w	ip, #0
 800bc9c:	eb0c 0506 	add.w	r5, ip, r6
 800bca0:	da43      	bge.n	800bd2a <__ieee754_sqrt+0x15a>
 800bca2:	2d00      	cmp	r5, #0
 800bca4:	db41      	blt.n	800bd2a <__ieee754_sqrt+0x15a>
 800bca6:	f100 0801 	add.w	r8, r0, #1
 800bcaa:	1a09      	subs	r1, r1, r0
 800bcac:	459c      	cmp	ip, r3
 800bcae:	bf88      	it	hi
 800bcb0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800bcb4:	eba3 030c 	sub.w	r3, r3, ip
 800bcb8:	4432      	add	r2, r6
 800bcba:	4640      	mov	r0, r8
 800bcbc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800bcc0:	f1be 0e01 	subs.w	lr, lr, #1
 800bcc4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800bcc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bccc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bcd0:	d1db      	bne.n	800bc8a <__ieee754_sqrt+0xba>
 800bcd2:	430b      	orrs	r3, r1
 800bcd4:	d006      	beq.n	800bce4 <__ieee754_sqrt+0x114>
 800bcd6:	1c50      	adds	r0, r2, #1
 800bcd8:	bf13      	iteet	ne
 800bcda:	3201      	addne	r2, #1
 800bcdc:	3401      	addeq	r4, #1
 800bcde:	4672      	moveq	r2, lr
 800bce0:	f022 0201 	bicne.w	r2, r2, #1
 800bce4:	1063      	asrs	r3, r4, #1
 800bce6:	0852      	lsrs	r2, r2, #1
 800bce8:	07e1      	lsls	r1, r4, #31
 800bcea:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bcee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bcf2:	bf48      	it	mi
 800bcf4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800bcf8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800bcfc:	4614      	mov	r4, r2
 800bcfe:	e781      	b.n	800bc04 <__ieee754_sqrt+0x34>
 800bd00:	0ad9      	lsrs	r1, r3, #11
 800bd02:	3815      	subs	r0, #21
 800bd04:	055b      	lsls	r3, r3, #21
 800bd06:	2900      	cmp	r1, #0
 800bd08:	d0fa      	beq.n	800bd00 <__ieee754_sqrt+0x130>
 800bd0a:	02cd      	lsls	r5, r1, #11
 800bd0c:	d50a      	bpl.n	800bd24 <__ieee754_sqrt+0x154>
 800bd0e:	f1c2 0420 	rsb	r4, r2, #32
 800bd12:	fa23 f404 	lsr.w	r4, r3, r4
 800bd16:	1e55      	subs	r5, r2, #1
 800bd18:	4093      	lsls	r3, r2
 800bd1a:	4321      	orrs	r1, r4
 800bd1c:	1b42      	subs	r2, r0, r5
 800bd1e:	e78a      	b.n	800bc36 <__ieee754_sqrt+0x66>
 800bd20:	4610      	mov	r0, r2
 800bd22:	e7f0      	b.n	800bd06 <__ieee754_sqrt+0x136>
 800bd24:	0049      	lsls	r1, r1, #1
 800bd26:	3201      	adds	r2, #1
 800bd28:	e7ef      	b.n	800bd0a <__ieee754_sqrt+0x13a>
 800bd2a:	4680      	mov	r8, r0
 800bd2c:	e7bd      	b.n	800bcaa <__ieee754_sqrt+0xda>
 800bd2e:	bf00      	nop
 800bd30:	7ff00000 	.word	0x7ff00000
 800bd34:	00000000 	.word	0x00000000

0800bd38 <__kernel_cos>:
 800bd38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd3c:	ec57 6b10 	vmov	r6, r7, d0
 800bd40:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bd44:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800bd48:	ed8d 1b00 	vstr	d1, [sp]
 800bd4c:	da07      	bge.n	800bd5e <__kernel_cos+0x26>
 800bd4e:	ee10 0a10 	vmov	r0, s0
 800bd52:	4639      	mov	r1, r7
 800bd54:	f7f4 feac 	bl	8000ab0 <__aeabi_d2iz>
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	f000 8088 	beq.w	800be6e <__kernel_cos+0x136>
 800bd5e:	4632      	mov	r2, r6
 800bd60:	463b      	mov	r3, r7
 800bd62:	4630      	mov	r0, r6
 800bd64:	4639      	mov	r1, r7
 800bd66:	f7f4 fbf3 	bl	8000550 <__aeabi_dmul>
 800bd6a:	4b51      	ldr	r3, [pc, #324]	; (800beb0 <__kernel_cos+0x178>)
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	4604      	mov	r4, r0
 800bd70:	460d      	mov	r5, r1
 800bd72:	f7f4 fbed 	bl	8000550 <__aeabi_dmul>
 800bd76:	a340      	add	r3, pc, #256	; (adr r3, 800be78 <__kernel_cos+0x140>)
 800bd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7c:	4682      	mov	sl, r0
 800bd7e:	468b      	mov	fp, r1
 800bd80:	4620      	mov	r0, r4
 800bd82:	4629      	mov	r1, r5
 800bd84:	f7f4 fbe4 	bl	8000550 <__aeabi_dmul>
 800bd88:	a33d      	add	r3, pc, #244	; (adr r3, 800be80 <__kernel_cos+0x148>)
 800bd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8e:	f7f4 fa29 	bl	80001e4 <__adddf3>
 800bd92:	4622      	mov	r2, r4
 800bd94:	462b      	mov	r3, r5
 800bd96:	f7f4 fbdb 	bl	8000550 <__aeabi_dmul>
 800bd9a:	a33b      	add	r3, pc, #236	; (adr r3, 800be88 <__kernel_cos+0x150>)
 800bd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda0:	f7f4 fa1e 	bl	80001e0 <__aeabi_dsub>
 800bda4:	4622      	mov	r2, r4
 800bda6:	462b      	mov	r3, r5
 800bda8:	f7f4 fbd2 	bl	8000550 <__aeabi_dmul>
 800bdac:	a338      	add	r3, pc, #224	; (adr r3, 800be90 <__kernel_cos+0x158>)
 800bdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb2:	f7f4 fa17 	bl	80001e4 <__adddf3>
 800bdb6:	4622      	mov	r2, r4
 800bdb8:	462b      	mov	r3, r5
 800bdba:	f7f4 fbc9 	bl	8000550 <__aeabi_dmul>
 800bdbe:	a336      	add	r3, pc, #216	; (adr r3, 800be98 <__kernel_cos+0x160>)
 800bdc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc4:	f7f4 fa0c 	bl	80001e0 <__aeabi_dsub>
 800bdc8:	4622      	mov	r2, r4
 800bdca:	462b      	mov	r3, r5
 800bdcc:	f7f4 fbc0 	bl	8000550 <__aeabi_dmul>
 800bdd0:	a333      	add	r3, pc, #204	; (adr r3, 800bea0 <__kernel_cos+0x168>)
 800bdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd6:	f7f4 fa05 	bl	80001e4 <__adddf3>
 800bdda:	4622      	mov	r2, r4
 800bddc:	462b      	mov	r3, r5
 800bdde:	f7f4 fbb7 	bl	8000550 <__aeabi_dmul>
 800bde2:	4622      	mov	r2, r4
 800bde4:	462b      	mov	r3, r5
 800bde6:	f7f4 fbb3 	bl	8000550 <__aeabi_dmul>
 800bdea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdee:	4604      	mov	r4, r0
 800bdf0:	460d      	mov	r5, r1
 800bdf2:	4630      	mov	r0, r6
 800bdf4:	4639      	mov	r1, r7
 800bdf6:	f7f4 fbab 	bl	8000550 <__aeabi_dmul>
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	4629      	mov	r1, r5
 800be00:	4620      	mov	r0, r4
 800be02:	f7f4 f9ed 	bl	80001e0 <__aeabi_dsub>
 800be06:	4b2b      	ldr	r3, [pc, #172]	; (800beb4 <__kernel_cos+0x17c>)
 800be08:	4598      	cmp	r8, r3
 800be0a:	4606      	mov	r6, r0
 800be0c:	460f      	mov	r7, r1
 800be0e:	dc10      	bgt.n	800be32 <__kernel_cos+0xfa>
 800be10:	4602      	mov	r2, r0
 800be12:	460b      	mov	r3, r1
 800be14:	4650      	mov	r0, sl
 800be16:	4659      	mov	r1, fp
 800be18:	f7f4 f9e2 	bl	80001e0 <__aeabi_dsub>
 800be1c:	460b      	mov	r3, r1
 800be1e:	4926      	ldr	r1, [pc, #152]	; (800beb8 <__kernel_cos+0x180>)
 800be20:	4602      	mov	r2, r0
 800be22:	2000      	movs	r0, #0
 800be24:	f7f4 f9dc 	bl	80001e0 <__aeabi_dsub>
 800be28:	ec41 0b10 	vmov	d0, r0, r1
 800be2c:	b003      	add	sp, #12
 800be2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be32:	4b22      	ldr	r3, [pc, #136]	; (800bebc <__kernel_cos+0x184>)
 800be34:	4920      	ldr	r1, [pc, #128]	; (800beb8 <__kernel_cos+0x180>)
 800be36:	4598      	cmp	r8, r3
 800be38:	bfcc      	ite	gt
 800be3a:	4d21      	ldrgt	r5, [pc, #132]	; (800bec0 <__kernel_cos+0x188>)
 800be3c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800be40:	2400      	movs	r4, #0
 800be42:	4622      	mov	r2, r4
 800be44:	462b      	mov	r3, r5
 800be46:	2000      	movs	r0, #0
 800be48:	f7f4 f9ca 	bl	80001e0 <__aeabi_dsub>
 800be4c:	4622      	mov	r2, r4
 800be4e:	4680      	mov	r8, r0
 800be50:	4689      	mov	r9, r1
 800be52:	462b      	mov	r3, r5
 800be54:	4650      	mov	r0, sl
 800be56:	4659      	mov	r1, fp
 800be58:	f7f4 f9c2 	bl	80001e0 <__aeabi_dsub>
 800be5c:	4632      	mov	r2, r6
 800be5e:	463b      	mov	r3, r7
 800be60:	f7f4 f9be 	bl	80001e0 <__aeabi_dsub>
 800be64:	4602      	mov	r2, r0
 800be66:	460b      	mov	r3, r1
 800be68:	4640      	mov	r0, r8
 800be6a:	4649      	mov	r1, r9
 800be6c:	e7da      	b.n	800be24 <__kernel_cos+0xec>
 800be6e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bea8 <__kernel_cos+0x170>
 800be72:	e7db      	b.n	800be2c <__kernel_cos+0xf4>
 800be74:	f3af 8000 	nop.w
 800be78:	be8838d4 	.word	0xbe8838d4
 800be7c:	bda8fae9 	.word	0xbda8fae9
 800be80:	bdb4b1c4 	.word	0xbdb4b1c4
 800be84:	3e21ee9e 	.word	0x3e21ee9e
 800be88:	809c52ad 	.word	0x809c52ad
 800be8c:	3e927e4f 	.word	0x3e927e4f
 800be90:	19cb1590 	.word	0x19cb1590
 800be94:	3efa01a0 	.word	0x3efa01a0
 800be98:	16c15177 	.word	0x16c15177
 800be9c:	3f56c16c 	.word	0x3f56c16c
 800bea0:	5555554c 	.word	0x5555554c
 800bea4:	3fa55555 	.word	0x3fa55555
 800bea8:	00000000 	.word	0x00000000
 800beac:	3ff00000 	.word	0x3ff00000
 800beb0:	3fe00000 	.word	0x3fe00000
 800beb4:	3fd33332 	.word	0x3fd33332
 800beb8:	3ff00000 	.word	0x3ff00000
 800bebc:	3fe90000 	.word	0x3fe90000
 800bec0:	3fd20000 	.word	0x3fd20000
 800bec4:	00000000 	.word	0x00000000

0800bec8 <__kernel_rem_pio2>:
 800bec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800becc:	ed2d 8b02 	vpush	{d8}
 800bed0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800bed4:	f112 0f14 	cmn.w	r2, #20
 800bed8:	9308      	str	r3, [sp, #32]
 800beda:	9101      	str	r1, [sp, #4]
 800bedc:	4bc4      	ldr	r3, [pc, #784]	; (800c1f0 <__kernel_rem_pio2+0x328>)
 800bede:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800bee0:	900b      	str	r0, [sp, #44]	; 0x2c
 800bee2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bee6:	9302      	str	r3, [sp, #8]
 800bee8:	9b08      	ldr	r3, [sp, #32]
 800beea:	f103 33ff 	add.w	r3, r3, #4294967295
 800beee:	bfa8      	it	ge
 800bef0:	1ed4      	subge	r4, r2, #3
 800bef2:	9306      	str	r3, [sp, #24]
 800bef4:	bfb2      	itee	lt
 800bef6:	2400      	movlt	r4, #0
 800bef8:	2318      	movge	r3, #24
 800befa:	fb94 f4f3 	sdivge	r4, r4, r3
 800befe:	f06f 0317 	mvn.w	r3, #23
 800bf02:	fb04 3303 	mla	r3, r4, r3, r3
 800bf06:	eb03 0a02 	add.w	sl, r3, r2
 800bf0a:	9b02      	ldr	r3, [sp, #8]
 800bf0c:	9a06      	ldr	r2, [sp, #24]
 800bf0e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800c1e0 <__kernel_rem_pio2+0x318>
 800bf12:	eb03 0802 	add.w	r8, r3, r2
 800bf16:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800bf18:	1aa7      	subs	r7, r4, r2
 800bf1a:	ae22      	add	r6, sp, #136	; 0x88
 800bf1c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bf20:	2500      	movs	r5, #0
 800bf22:	4545      	cmp	r5, r8
 800bf24:	dd13      	ble.n	800bf4e <__kernel_rem_pio2+0x86>
 800bf26:	9b08      	ldr	r3, [sp, #32]
 800bf28:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800c1e0 <__kernel_rem_pio2+0x318>
 800bf2c:	aa22      	add	r2, sp, #136	; 0x88
 800bf2e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800bf32:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800bf36:	f04f 0800 	mov.w	r8, #0
 800bf3a:	9b02      	ldr	r3, [sp, #8]
 800bf3c:	4598      	cmp	r8, r3
 800bf3e:	dc2f      	bgt.n	800bfa0 <__kernel_rem_pio2+0xd8>
 800bf40:	ed8d 8b04 	vstr	d8, [sp, #16]
 800bf44:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800bf48:	462f      	mov	r7, r5
 800bf4a:	2600      	movs	r6, #0
 800bf4c:	e01b      	b.n	800bf86 <__kernel_rem_pio2+0xbe>
 800bf4e:	42ef      	cmn	r7, r5
 800bf50:	d407      	bmi.n	800bf62 <__kernel_rem_pio2+0x9a>
 800bf52:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bf56:	f7f4 fa91 	bl	800047c <__aeabi_i2d>
 800bf5a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bf5e:	3501      	adds	r5, #1
 800bf60:	e7df      	b.n	800bf22 <__kernel_rem_pio2+0x5a>
 800bf62:	ec51 0b18 	vmov	r0, r1, d8
 800bf66:	e7f8      	b.n	800bf5a <__kernel_rem_pio2+0x92>
 800bf68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf6c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bf70:	f7f4 faee 	bl	8000550 <__aeabi_dmul>
 800bf74:	4602      	mov	r2, r0
 800bf76:	460b      	mov	r3, r1
 800bf78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf7c:	f7f4 f932 	bl	80001e4 <__adddf3>
 800bf80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf84:	3601      	adds	r6, #1
 800bf86:	9b06      	ldr	r3, [sp, #24]
 800bf88:	429e      	cmp	r6, r3
 800bf8a:	f1a7 0708 	sub.w	r7, r7, #8
 800bf8e:	ddeb      	ble.n	800bf68 <__kernel_rem_pio2+0xa0>
 800bf90:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bf94:	f108 0801 	add.w	r8, r8, #1
 800bf98:	ecab 7b02 	vstmia	fp!, {d7}
 800bf9c:	3508      	adds	r5, #8
 800bf9e:	e7cc      	b.n	800bf3a <__kernel_rem_pio2+0x72>
 800bfa0:	9b02      	ldr	r3, [sp, #8]
 800bfa2:	aa0e      	add	r2, sp, #56	; 0x38
 800bfa4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bfa8:	930d      	str	r3, [sp, #52]	; 0x34
 800bfaa:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800bfac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bfb0:	9c02      	ldr	r4, [sp, #8]
 800bfb2:	930c      	str	r3, [sp, #48]	; 0x30
 800bfb4:	00e3      	lsls	r3, r4, #3
 800bfb6:	930a      	str	r3, [sp, #40]	; 0x28
 800bfb8:	ab9a      	add	r3, sp, #616	; 0x268
 800bfba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bfbe:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800bfc2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800bfc6:	ab72      	add	r3, sp, #456	; 0x1c8
 800bfc8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800bfcc:	46c3      	mov	fp, r8
 800bfce:	46a1      	mov	r9, r4
 800bfd0:	f1b9 0f00 	cmp.w	r9, #0
 800bfd4:	f1a5 0508 	sub.w	r5, r5, #8
 800bfd8:	dc77      	bgt.n	800c0ca <__kernel_rem_pio2+0x202>
 800bfda:	ec47 6b10 	vmov	d0, r6, r7
 800bfde:	4650      	mov	r0, sl
 800bfe0:	f000 fbce 	bl	800c780 <scalbn>
 800bfe4:	ec57 6b10 	vmov	r6, r7, d0
 800bfe8:	2200      	movs	r2, #0
 800bfea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bfee:	ee10 0a10 	vmov	r0, s0
 800bff2:	4639      	mov	r1, r7
 800bff4:	f7f4 faac 	bl	8000550 <__aeabi_dmul>
 800bff8:	ec41 0b10 	vmov	d0, r0, r1
 800bffc:	f7fe faa4 	bl	800a548 <floor>
 800c000:	4b7c      	ldr	r3, [pc, #496]	; (800c1f4 <__kernel_rem_pio2+0x32c>)
 800c002:	ec51 0b10 	vmov	r0, r1, d0
 800c006:	2200      	movs	r2, #0
 800c008:	f7f4 faa2 	bl	8000550 <__aeabi_dmul>
 800c00c:	4602      	mov	r2, r0
 800c00e:	460b      	mov	r3, r1
 800c010:	4630      	mov	r0, r6
 800c012:	4639      	mov	r1, r7
 800c014:	f7f4 f8e4 	bl	80001e0 <__aeabi_dsub>
 800c018:	460f      	mov	r7, r1
 800c01a:	4606      	mov	r6, r0
 800c01c:	f7f4 fd48 	bl	8000ab0 <__aeabi_d2iz>
 800c020:	9004      	str	r0, [sp, #16]
 800c022:	f7f4 fa2b 	bl	800047c <__aeabi_i2d>
 800c026:	4602      	mov	r2, r0
 800c028:	460b      	mov	r3, r1
 800c02a:	4630      	mov	r0, r6
 800c02c:	4639      	mov	r1, r7
 800c02e:	f7f4 f8d7 	bl	80001e0 <__aeabi_dsub>
 800c032:	f1ba 0f00 	cmp.w	sl, #0
 800c036:	4606      	mov	r6, r0
 800c038:	460f      	mov	r7, r1
 800c03a:	dd6d      	ble.n	800c118 <__kernel_rem_pio2+0x250>
 800c03c:	1e62      	subs	r2, r4, #1
 800c03e:	ab0e      	add	r3, sp, #56	; 0x38
 800c040:	9d04      	ldr	r5, [sp, #16]
 800c042:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c046:	f1ca 0118 	rsb	r1, sl, #24
 800c04a:	fa40 f301 	asr.w	r3, r0, r1
 800c04e:	441d      	add	r5, r3
 800c050:	408b      	lsls	r3, r1
 800c052:	1ac0      	subs	r0, r0, r3
 800c054:	ab0e      	add	r3, sp, #56	; 0x38
 800c056:	9504      	str	r5, [sp, #16]
 800c058:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c05c:	f1ca 0317 	rsb	r3, sl, #23
 800c060:	fa40 fb03 	asr.w	fp, r0, r3
 800c064:	f1bb 0f00 	cmp.w	fp, #0
 800c068:	dd65      	ble.n	800c136 <__kernel_rem_pio2+0x26e>
 800c06a:	9b04      	ldr	r3, [sp, #16]
 800c06c:	2200      	movs	r2, #0
 800c06e:	3301      	adds	r3, #1
 800c070:	9304      	str	r3, [sp, #16]
 800c072:	4615      	mov	r5, r2
 800c074:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c078:	4294      	cmp	r4, r2
 800c07a:	f300 809c 	bgt.w	800c1b6 <__kernel_rem_pio2+0x2ee>
 800c07e:	f1ba 0f00 	cmp.w	sl, #0
 800c082:	dd07      	ble.n	800c094 <__kernel_rem_pio2+0x1cc>
 800c084:	f1ba 0f01 	cmp.w	sl, #1
 800c088:	f000 80c0 	beq.w	800c20c <__kernel_rem_pio2+0x344>
 800c08c:	f1ba 0f02 	cmp.w	sl, #2
 800c090:	f000 80c6 	beq.w	800c220 <__kernel_rem_pio2+0x358>
 800c094:	f1bb 0f02 	cmp.w	fp, #2
 800c098:	d14d      	bne.n	800c136 <__kernel_rem_pio2+0x26e>
 800c09a:	4632      	mov	r2, r6
 800c09c:	463b      	mov	r3, r7
 800c09e:	4956      	ldr	r1, [pc, #344]	; (800c1f8 <__kernel_rem_pio2+0x330>)
 800c0a0:	2000      	movs	r0, #0
 800c0a2:	f7f4 f89d 	bl	80001e0 <__aeabi_dsub>
 800c0a6:	4606      	mov	r6, r0
 800c0a8:	460f      	mov	r7, r1
 800c0aa:	2d00      	cmp	r5, #0
 800c0ac:	d043      	beq.n	800c136 <__kernel_rem_pio2+0x26e>
 800c0ae:	4650      	mov	r0, sl
 800c0b0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800c1e8 <__kernel_rem_pio2+0x320>
 800c0b4:	f000 fb64 	bl	800c780 <scalbn>
 800c0b8:	4630      	mov	r0, r6
 800c0ba:	4639      	mov	r1, r7
 800c0bc:	ec53 2b10 	vmov	r2, r3, d0
 800c0c0:	f7f4 f88e 	bl	80001e0 <__aeabi_dsub>
 800c0c4:	4606      	mov	r6, r0
 800c0c6:	460f      	mov	r7, r1
 800c0c8:	e035      	b.n	800c136 <__kernel_rem_pio2+0x26e>
 800c0ca:	4b4c      	ldr	r3, [pc, #304]	; (800c1fc <__kernel_rem_pio2+0x334>)
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	4630      	mov	r0, r6
 800c0d0:	4639      	mov	r1, r7
 800c0d2:	f7f4 fa3d 	bl	8000550 <__aeabi_dmul>
 800c0d6:	f7f4 fceb 	bl	8000ab0 <__aeabi_d2iz>
 800c0da:	f7f4 f9cf 	bl	800047c <__aeabi_i2d>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	ec43 2b18 	vmov	d8, r2, r3
 800c0e6:	4b46      	ldr	r3, [pc, #280]	; (800c200 <__kernel_rem_pio2+0x338>)
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	f7f4 fa31 	bl	8000550 <__aeabi_dmul>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	4630      	mov	r0, r6
 800c0f4:	4639      	mov	r1, r7
 800c0f6:	f7f4 f873 	bl	80001e0 <__aeabi_dsub>
 800c0fa:	f7f4 fcd9 	bl	8000ab0 <__aeabi_d2iz>
 800c0fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c102:	f84b 0b04 	str.w	r0, [fp], #4
 800c106:	ec51 0b18 	vmov	r0, r1, d8
 800c10a:	f7f4 f86b 	bl	80001e4 <__adddf3>
 800c10e:	f109 39ff 	add.w	r9, r9, #4294967295
 800c112:	4606      	mov	r6, r0
 800c114:	460f      	mov	r7, r1
 800c116:	e75b      	b.n	800bfd0 <__kernel_rem_pio2+0x108>
 800c118:	d106      	bne.n	800c128 <__kernel_rem_pio2+0x260>
 800c11a:	1e63      	subs	r3, r4, #1
 800c11c:	aa0e      	add	r2, sp, #56	; 0x38
 800c11e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c122:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800c126:	e79d      	b.n	800c064 <__kernel_rem_pio2+0x19c>
 800c128:	4b36      	ldr	r3, [pc, #216]	; (800c204 <__kernel_rem_pio2+0x33c>)
 800c12a:	2200      	movs	r2, #0
 800c12c:	f7f4 fc96 	bl	8000a5c <__aeabi_dcmpge>
 800c130:	2800      	cmp	r0, #0
 800c132:	d13d      	bne.n	800c1b0 <__kernel_rem_pio2+0x2e8>
 800c134:	4683      	mov	fp, r0
 800c136:	2200      	movs	r2, #0
 800c138:	2300      	movs	r3, #0
 800c13a:	4630      	mov	r0, r6
 800c13c:	4639      	mov	r1, r7
 800c13e:	f7f4 fc6f 	bl	8000a20 <__aeabi_dcmpeq>
 800c142:	2800      	cmp	r0, #0
 800c144:	f000 80c0 	beq.w	800c2c8 <__kernel_rem_pio2+0x400>
 800c148:	1e65      	subs	r5, r4, #1
 800c14a:	462b      	mov	r3, r5
 800c14c:	2200      	movs	r2, #0
 800c14e:	9902      	ldr	r1, [sp, #8]
 800c150:	428b      	cmp	r3, r1
 800c152:	da6c      	bge.n	800c22e <__kernel_rem_pio2+0x366>
 800c154:	2a00      	cmp	r2, #0
 800c156:	f000 8089 	beq.w	800c26c <__kernel_rem_pio2+0x3a4>
 800c15a:	ab0e      	add	r3, sp, #56	; 0x38
 800c15c:	f1aa 0a18 	sub.w	sl, sl, #24
 800c160:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c164:	2b00      	cmp	r3, #0
 800c166:	f000 80ad 	beq.w	800c2c4 <__kernel_rem_pio2+0x3fc>
 800c16a:	4650      	mov	r0, sl
 800c16c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800c1e8 <__kernel_rem_pio2+0x320>
 800c170:	f000 fb06 	bl	800c780 <scalbn>
 800c174:	ab9a      	add	r3, sp, #616	; 0x268
 800c176:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c17a:	ec57 6b10 	vmov	r6, r7, d0
 800c17e:	00ec      	lsls	r4, r5, #3
 800c180:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800c184:	46aa      	mov	sl, r5
 800c186:	f1ba 0f00 	cmp.w	sl, #0
 800c18a:	f280 80d6 	bge.w	800c33a <__kernel_rem_pio2+0x472>
 800c18e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800c1e0 <__kernel_rem_pio2+0x318>
 800c192:	462e      	mov	r6, r5
 800c194:	2e00      	cmp	r6, #0
 800c196:	f2c0 8104 	blt.w	800c3a2 <__kernel_rem_pio2+0x4da>
 800c19a:	ab72      	add	r3, sp, #456	; 0x1c8
 800c19c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800c1a0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800c208 <__kernel_rem_pio2+0x340>
 800c1a4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c1a8:	f04f 0800 	mov.w	r8, #0
 800c1ac:	1baf      	subs	r7, r5, r6
 800c1ae:	e0ea      	b.n	800c386 <__kernel_rem_pio2+0x4be>
 800c1b0:	f04f 0b02 	mov.w	fp, #2
 800c1b4:	e759      	b.n	800c06a <__kernel_rem_pio2+0x1a2>
 800c1b6:	f8d8 3000 	ldr.w	r3, [r8]
 800c1ba:	b955      	cbnz	r5, 800c1d2 <__kernel_rem_pio2+0x30a>
 800c1bc:	b123      	cbz	r3, 800c1c8 <__kernel_rem_pio2+0x300>
 800c1be:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c1c2:	f8c8 3000 	str.w	r3, [r8]
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	3201      	adds	r2, #1
 800c1ca:	f108 0804 	add.w	r8, r8, #4
 800c1ce:	461d      	mov	r5, r3
 800c1d0:	e752      	b.n	800c078 <__kernel_rem_pio2+0x1b0>
 800c1d2:	1acb      	subs	r3, r1, r3
 800c1d4:	f8c8 3000 	str.w	r3, [r8]
 800c1d8:	462b      	mov	r3, r5
 800c1da:	e7f5      	b.n	800c1c8 <__kernel_rem_pio2+0x300>
 800c1dc:	f3af 8000 	nop.w
	...
 800c1ec:	3ff00000 	.word	0x3ff00000
 800c1f0:	0800cac8 	.word	0x0800cac8
 800c1f4:	40200000 	.word	0x40200000
 800c1f8:	3ff00000 	.word	0x3ff00000
 800c1fc:	3e700000 	.word	0x3e700000
 800c200:	41700000 	.word	0x41700000
 800c204:	3fe00000 	.word	0x3fe00000
 800c208:	0800ca88 	.word	0x0800ca88
 800c20c:	1e62      	subs	r2, r4, #1
 800c20e:	ab0e      	add	r3, sp, #56	; 0x38
 800c210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c214:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c218:	a90e      	add	r1, sp, #56	; 0x38
 800c21a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c21e:	e739      	b.n	800c094 <__kernel_rem_pio2+0x1cc>
 800c220:	1e62      	subs	r2, r4, #1
 800c222:	ab0e      	add	r3, sp, #56	; 0x38
 800c224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c228:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c22c:	e7f4      	b.n	800c218 <__kernel_rem_pio2+0x350>
 800c22e:	a90e      	add	r1, sp, #56	; 0x38
 800c230:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c234:	3b01      	subs	r3, #1
 800c236:	430a      	orrs	r2, r1
 800c238:	e789      	b.n	800c14e <__kernel_rem_pio2+0x286>
 800c23a:	3301      	adds	r3, #1
 800c23c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c240:	2900      	cmp	r1, #0
 800c242:	d0fa      	beq.n	800c23a <__kernel_rem_pio2+0x372>
 800c244:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c246:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800c24a:	446a      	add	r2, sp
 800c24c:	3a98      	subs	r2, #152	; 0x98
 800c24e:	920a      	str	r2, [sp, #40]	; 0x28
 800c250:	9a08      	ldr	r2, [sp, #32]
 800c252:	18e3      	adds	r3, r4, r3
 800c254:	18a5      	adds	r5, r4, r2
 800c256:	aa22      	add	r2, sp, #136	; 0x88
 800c258:	f104 0801 	add.w	r8, r4, #1
 800c25c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800c260:	9304      	str	r3, [sp, #16]
 800c262:	9b04      	ldr	r3, [sp, #16]
 800c264:	4543      	cmp	r3, r8
 800c266:	da04      	bge.n	800c272 <__kernel_rem_pio2+0x3aa>
 800c268:	461c      	mov	r4, r3
 800c26a:	e6a3      	b.n	800bfb4 <__kernel_rem_pio2+0xec>
 800c26c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c26e:	2301      	movs	r3, #1
 800c270:	e7e4      	b.n	800c23c <__kernel_rem_pio2+0x374>
 800c272:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c274:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c278:	f7f4 f900 	bl	800047c <__aeabi_i2d>
 800c27c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800c280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c282:	46ab      	mov	fp, r5
 800c284:	461c      	mov	r4, r3
 800c286:	f04f 0900 	mov.w	r9, #0
 800c28a:	2600      	movs	r6, #0
 800c28c:	2700      	movs	r7, #0
 800c28e:	9b06      	ldr	r3, [sp, #24]
 800c290:	4599      	cmp	r9, r3
 800c292:	dd06      	ble.n	800c2a2 <__kernel_rem_pio2+0x3da>
 800c294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c296:	e8e3 6702 	strd	r6, r7, [r3], #8
 800c29a:	f108 0801 	add.w	r8, r8, #1
 800c29e:	930a      	str	r3, [sp, #40]	; 0x28
 800c2a0:	e7df      	b.n	800c262 <__kernel_rem_pio2+0x39a>
 800c2a2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c2a6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c2aa:	f7f4 f951 	bl	8000550 <__aeabi_dmul>
 800c2ae:	4602      	mov	r2, r0
 800c2b0:	460b      	mov	r3, r1
 800c2b2:	4630      	mov	r0, r6
 800c2b4:	4639      	mov	r1, r7
 800c2b6:	f7f3 ff95 	bl	80001e4 <__adddf3>
 800c2ba:	f109 0901 	add.w	r9, r9, #1
 800c2be:	4606      	mov	r6, r0
 800c2c0:	460f      	mov	r7, r1
 800c2c2:	e7e4      	b.n	800c28e <__kernel_rem_pio2+0x3c6>
 800c2c4:	3d01      	subs	r5, #1
 800c2c6:	e748      	b.n	800c15a <__kernel_rem_pio2+0x292>
 800c2c8:	ec47 6b10 	vmov	d0, r6, r7
 800c2cc:	f1ca 0000 	rsb	r0, sl, #0
 800c2d0:	f000 fa56 	bl	800c780 <scalbn>
 800c2d4:	ec57 6b10 	vmov	r6, r7, d0
 800c2d8:	4ba0      	ldr	r3, [pc, #640]	; (800c55c <__kernel_rem_pio2+0x694>)
 800c2da:	ee10 0a10 	vmov	r0, s0
 800c2de:	2200      	movs	r2, #0
 800c2e0:	4639      	mov	r1, r7
 800c2e2:	f7f4 fbbb 	bl	8000a5c <__aeabi_dcmpge>
 800c2e6:	b1f8      	cbz	r0, 800c328 <__kernel_rem_pio2+0x460>
 800c2e8:	4b9d      	ldr	r3, [pc, #628]	; (800c560 <__kernel_rem_pio2+0x698>)
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	4630      	mov	r0, r6
 800c2ee:	4639      	mov	r1, r7
 800c2f0:	f7f4 f92e 	bl	8000550 <__aeabi_dmul>
 800c2f4:	f7f4 fbdc 	bl	8000ab0 <__aeabi_d2iz>
 800c2f8:	4680      	mov	r8, r0
 800c2fa:	f7f4 f8bf 	bl	800047c <__aeabi_i2d>
 800c2fe:	4b97      	ldr	r3, [pc, #604]	; (800c55c <__kernel_rem_pio2+0x694>)
 800c300:	2200      	movs	r2, #0
 800c302:	f7f4 f925 	bl	8000550 <__aeabi_dmul>
 800c306:	460b      	mov	r3, r1
 800c308:	4602      	mov	r2, r0
 800c30a:	4639      	mov	r1, r7
 800c30c:	4630      	mov	r0, r6
 800c30e:	f7f3 ff67 	bl	80001e0 <__aeabi_dsub>
 800c312:	f7f4 fbcd 	bl	8000ab0 <__aeabi_d2iz>
 800c316:	1c65      	adds	r5, r4, #1
 800c318:	ab0e      	add	r3, sp, #56	; 0x38
 800c31a:	f10a 0a18 	add.w	sl, sl, #24
 800c31e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c322:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c326:	e720      	b.n	800c16a <__kernel_rem_pio2+0x2a2>
 800c328:	4630      	mov	r0, r6
 800c32a:	4639      	mov	r1, r7
 800c32c:	f7f4 fbc0 	bl	8000ab0 <__aeabi_d2iz>
 800c330:	ab0e      	add	r3, sp, #56	; 0x38
 800c332:	4625      	mov	r5, r4
 800c334:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c338:	e717      	b.n	800c16a <__kernel_rem_pio2+0x2a2>
 800c33a:	ab0e      	add	r3, sp, #56	; 0x38
 800c33c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c340:	f7f4 f89c 	bl	800047c <__aeabi_i2d>
 800c344:	4632      	mov	r2, r6
 800c346:	463b      	mov	r3, r7
 800c348:	f7f4 f902 	bl	8000550 <__aeabi_dmul>
 800c34c:	4b84      	ldr	r3, [pc, #528]	; (800c560 <__kernel_rem_pio2+0x698>)
 800c34e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800c352:	2200      	movs	r2, #0
 800c354:	4630      	mov	r0, r6
 800c356:	4639      	mov	r1, r7
 800c358:	f7f4 f8fa 	bl	8000550 <__aeabi_dmul>
 800c35c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c360:	4606      	mov	r6, r0
 800c362:	460f      	mov	r7, r1
 800c364:	e70f      	b.n	800c186 <__kernel_rem_pio2+0x2be>
 800c366:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c36a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c36e:	f7f4 f8ef 	bl	8000550 <__aeabi_dmul>
 800c372:	4602      	mov	r2, r0
 800c374:	460b      	mov	r3, r1
 800c376:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c37a:	f7f3 ff33 	bl	80001e4 <__adddf3>
 800c37e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c382:	f108 0801 	add.w	r8, r8, #1
 800c386:	9b02      	ldr	r3, [sp, #8]
 800c388:	4598      	cmp	r8, r3
 800c38a:	dc01      	bgt.n	800c390 <__kernel_rem_pio2+0x4c8>
 800c38c:	45b8      	cmp	r8, r7
 800c38e:	ddea      	ble.n	800c366 <__kernel_rem_pio2+0x49e>
 800c390:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c394:	ab4a      	add	r3, sp, #296	; 0x128
 800c396:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c39a:	ed87 7b00 	vstr	d7, [r7]
 800c39e:	3e01      	subs	r6, #1
 800c3a0:	e6f8      	b.n	800c194 <__kernel_rem_pio2+0x2cc>
 800c3a2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c3a4:	2b02      	cmp	r3, #2
 800c3a6:	dc0b      	bgt.n	800c3c0 <__kernel_rem_pio2+0x4f8>
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	dc35      	bgt.n	800c418 <__kernel_rem_pio2+0x550>
 800c3ac:	d059      	beq.n	800c462 <__kernel_rem_pio2+0x59a>
 800c3ae:	9b04      	ldr	r3, [sp, #16]
 800c3b0:	f003 0007 	and.w	r0, r3, #7
 800c3b4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800c3b8:	ecbd 8b02 	vpop	{d8}
 800c3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3c0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c3c2:	2b03      	cmp	r3, #3
 800c3c4:	d1f3      	bne.n	800c3ae <__kernel_rem_pio2+0x4e6>
 800c3c6:	ab4a      	add	r3, sp, #296	; 0x128
 800c3c8:	4423      	add	r3, r4
 800c3ca:	9306      	str	r3, [sp, #24]
 800c3cc:	461c      	mov	r4, r3
 800c3ce:	469a      	mov	sl, r3
 800c3d0:	9502      	str	r5, [sp, #8]
 800c3d2:	9b02      	ldr	r3, [sp, #8]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	f1aa 0a08 	sub.w	sl, sl, #8
 800c3da:	dc6b      	bgt.n	800c4b4 <__kernel_rem_pio2+0x5ec>
 800c3dc:	46aa      	mov	sl, r5
 800c3de:	f1ba 0f01 	cmp.w	sl, #1
 800c3e2:	f1a4 0408 	sub.w	r4, r4, #8
 800c3e6:	f300 8085 	bgt.w	800c4f4 <__kernel_rem_pio2+0x62c>
 800c3ea:	9c06      	ldr	r4, [sp, #24]
 800c3ec:	2000      	movs	r0, #0
 800c3ee:	3408      	adds	r4, #8
 800c3f0:	2100      	movs	r1, #0
 800c3f2:	2d01      	cmp	r5, #1
 800c3f4:	f300 809d 	bgt.w	800c532 <__kernel_rem_pio2+0x66a>
 800c3f8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800c3fc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800c400:	f1bb 0f00 	cmp.w	fp, #0
 800c404:	f040 809b 	bne.w	800c53e <__kernel_rem_pio2+0x676>
 800c408:	9b01      	ldr	r3, [sp, #4]
 800c40a:	e9c3 5600 	strd	r5, r6, [r3]
 800c40e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c412:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c416:	e7ca      	b.n	800c3ae <__kernel_rem_pio2+0x4e6>
 800c418:	3408      	adds	r4, #8
 800c41a:	ab4a      	add	r3, sp, #296	; 0x128
 800c41c:	441c      	add	r4, r3
 800c41e:	462e      	mov	r6, r5
 800c420:	2000      	movs	r0, #0
 800c422:	2100      	movs	r1, #0
 800c424:	2e00      	cmp	r6, #0
 800c426:	da36      	bge.n	800c496 <__kernel_rem_pio2+0x5ce>
 800c428:	f1bb 0f00 	cmp.w	fp, #0
 800c42c:	d039      	beq.n	800c4a2 <__kernel_rem_pio2+0x5da>
 800c42e:	4602      	mov	r2, r0
 800c430:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c434:	9c01      	ldr	r4, [sp, #4]
 800c436:	e9c4 2300 	strd	r2, r3, [r4]
 800c43a:	4602      	mov	r2, r0
 800c43c:	460b      	mov	r3, r1
 800c43e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800c442:	f7f3 fecd 	bl	80001e0 <__aeabi_dsub>
 800c446:	ae4c      	add	r6, sp, #304	; 0x130
 800c448:	2401      	movs	r4, #1
 800c44a:	42a5      	cmp	r5, r4
 800c44c:	da2c      	bge.n	800c4a8 <__kernel_rem_pio2+0x5e0>
 800c44e:	f1bb 0f00 	cmp.w	fp, #0
 800c452:	d002      	beq.n	800c45a <__kernel_rem_pio2+0x592>
 800c454:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c458:	4619      	mov	r1, r3
 800c45a:	9b01      	ldr	r3, [sp, #4]
 800c45c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c460:	e7a5      	b.n	800c3ae <__kernel_rem_pio2+0x4e6>
 800c462:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800c466:	eb0d 0403 	add.w	r4, sp, r3
 800c46a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800c46e:	2000      	movs	r0, #0
 800c470:	2100      	movs	r1, #0
 800c472:	2d00      	cmp	r5, #0
 800c474:	da09      	bge.n	800c48a <__kernel_rem_pio2+0x5c2>
 800c476:	f1bb 0f00 	cmp.w	fp, #0
 800c47a:	d002      	beq.n	800c482 <__kernel_rem_pio2+0x5ba>
 800c47c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c480:	4619      	mov	r1, r3
 800c482:	9b01      	ldr	r3, [sp, #4]
 800c484:	e9c3 0100 	strd	r0, r1, [r3]
 800c488:	e791      	b.n	800c3ae <__kernel_rem_pio2+0x4e6>
 800c48a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c48e:	f7f3 fea9 	bl	80001e4 <__adddf3>
 800c492:	3d01      	subs	r5, #1
 800c494:	e7ed      	b.n	800c472 <__kernel_rem_pio2+0x5aa>
 800c496:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c49a:	f7f3 fea3 	bl	80001e4 <__adddf3>
 800c49e:	3e01      	subs	r6, #1
 800c4a0:	e7c0      	b.n	800c424 <__kernel_rem_pio2+0x55c>
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	e7c5      	b.n	800c434 <__kernel_rem_pio2+0x56c>
 800c4a8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c4ac:	f7f3 fe9a 	bl	80001e4 <__adddf3>
 800c4b0:	3401      	adds	r4, #1
 800c4b2:	e7ca      	b.n	800c44a <__kernel_rem_pio2+0x582>
 800c4b4:	e9da 8900 	ldrd	r8, r9, [sl]
 800c4b8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c4bc:	9b02      	ldr	r3, [sp, #8]
 800c4be:	3b01      	subs	r3, #1
 800c4c0:	9302      	str	r3, [sp, #8]
 800c4c2:	4632      	mov	r2, r6
 800c4c4:	463b      	mov	r3, r7
 800c4c6:	4640      	mov	r0, r8
 800c4c8:	4649      	mov	r1, r9
 800c4ca:	f7f3 fe8b 	bl	80001e4 <__adddf3>
 800c4ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	4640      	mov	r0, r8
 800c4d8:	4649      	mov	r1, r9
 800c4da:	f7f3 fe81 	bl	80001e0 <__aeabi_dsub>
 800c4de:	4632      	mov	r2, r6
 800c4e0:	463b      	mov	r3, r7
 800c4e2:	f7f3 fe7f 	bl	80001e4 <__adddf3>
 800c4e6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800c4ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c4ee:	ed8a 7b00 	vstr	d7, [sl]
 800c4f2:	e76e      	b.n	800c3d2 <__kernel_rem_pio2+0x50a>
 800c4f4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c4f8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c4fc:	4640      	mov	r0, r8
 800c4fe:	4632      	mov	r2, r6
 800c500:	463b      	mov	r3, r7
 800c502:	4649      	mov	r1, r9
 800c504:	f7f3 fe6e 	bl	80001e4 <__adddf3>
 800c508:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c50c:	4602      	mov	r2, r0
 800c50e:	460b      	mov	r3, r1
 800c510:	4640      	mov	r0, r8
 800c512:	4649      	mov	r1, r9
 800c514:	f7f3 fe64 	bl	80001e0 <__aeabi_dsub>
 800c518:	4632      	mov	r2, r6
 800c51a:	463b      	mov	r3, r7
 800c51c:	f7f3 fe62 	bl	80001e4 <__adddf3>
 800c520:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c524:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c528:	ed84 7b00 	vstr	d7, [r4]
 800c52c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c530:	e755      	b.n	800c3de <__kernel_rem_pio2+0x516>
 800c532:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c536:	f7f3 fe55 	bl	80001e4 <__adddf3>
 800c53a:	3d01      	subs	r5, #1
 800c53c:	e759      	b.n	800c3f2 <__kernel_rem_pio2+0x52a>
 800c53e:	9b01      	ldr	r3, [sp, #4]
 800c540:	9a01      	ldr	r2, [sp, #4]
 800c542:	601d      	str	r5, [r3, #0]
 800c544:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c548:	605c      	str	r4, [r3, #4]
 800c54a:	609f      	str	r7, [r3, #8]
 800c54c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c550:	60d3      	str	r3, [r2, #12]
 800c552:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c556:	6110      	str	r0, [r2, #16]
 800c558:	6153      	str	r3, [r2, #20]
 800c55a:	e728      	b.n	800c3ae <__kernel_rem_pio2+0x4e6>
 800c55c:	41700000 	.word	0x41700000
 800c560:	3e700000 	.word	0x3e700000
 800c564:	00000000 	.word	0x00000000

0800c568 <__kernel_sin>:
 800c568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c56c:	ed2d 8b04 	vpush	{d8-d9}
 800c570:	eeb0 8a41 	vmov.f32	s16, s2
 800c574:	eef0 8a61 	vmov.f32	s17, s3
 800c578:	ec55 4b10 	vmov	r4, r5, d0
 800c57c:	b083      	sub	sp, #12
 800c57e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c582:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c586:	9001      	str	r0, [sp, #4]
 800c588:	da06      	bge.n	800c598 <__kernel_sin+0x30>
 800c58a:	ee10 0a10 	vmov	r0, s0
 800c58e:	4629      	mov	r1, r5
 800c590:	f7f4 fa8e 	bl	8000ab0 <__aeabi_d2iz>
 800c594:	2800      	cmp	r0, #0
 800c596:	d051      	beq.n	800c63c <__kernel_sin+0xd4>
 800c598:	4622      	mov	r2, r4
 800c59a:	462b      	mov	r3, r5
 800c59c:	4620      	mov	r0, r4
 800c59e:	4629      	mov	r1, r5
 800c5a0:	f7f3 ffd6 	bl	8000550 <__aeabi_dmul>
 800c5a4:	4682      	mov	sl, r0
 800c5a6:	468b      	mov	fp, r1
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	460b      	mov	r3, r1
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	4629      	mov	r1, r5
 800c5b0:	f7f3 ffce 	bl	8000550 <__aeabi_dmul>
 800c5b4:	a341      	add	r3, pc, #260	; (adr r3, 800c6bc <__kernel_sin+0x154>)
 800c5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ba:	4680      	mov	r8, r0
 800c5bc:	4689      	mov	r9, r1
 800c5be:	4650      	mov	r0, sl
 800c5c0:	4659      	mov	r1, fp
 800c5c2:	f7f3 ffc5 	bl	8000550 <__aeabi_dmul>
 800c5c6:	a33f      	add	r3, pc, #252	; (adr r3, 800c6c4 <__kernel_sin+0x15c>)
 800c5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5cc:	f7f3 fe08 	bl	80001e0 <__aeabi_dsub>
 800c5d0:	4652      	mov	r2, sl
 800c5d2:	465b      	mov	r3, fp
 800c5d4:	f7f3 ffbc 	bl	8000550 <__aeabi_dmul>
 800c5d8:	a33c      	add	r3, pc, #240	; (adr r3, 800c6cc <__kernel_sin+0x164>)
 800c5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5de:	f7f3 fe01 	bl	80001e4 <__adddf3>
 800c5e2:	4652      	mov	r2, sl
 800c5e4:	465b      	mov	r3, fp
 800c5e6:	f7f3 ffb3 	bl	8000550 <__aeabi_dmul>
 800c5ea:	a33a      	add	r3, pc, #232	; (adr r3, 800c6d4 <__kernel_sin+0x16c>)
 800c5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f0:	f7f3 fdf6 	bl	80001e0 <__aeabi_dsub>
 800c5f4:	4652      	mov	r2, sl
 800c5f6:	465b      	mov	r3, fp
 800c5f8:	f7f3 ffaa 	bl	8000550 <__aeabi_dmul>
 800c5fc:	a337      	add	r3, pc, #220	; (adr r3, 800c6dc <__kernel_sin+0x174>)
 800c5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c602:	f7f3 fdef 	bl	80001e4 <__adddf3>
 800c606:	9b01      	ldr	r3, [sp, #4]
 800c608:	4606      	mov	r6, r0
 800c60a:	460f      	mov	r7, r1
 800c60c:	b9eb      	cbnz	r3, 800c64a <__kernel_sin+0xe2>
 800c60e:	4602      	mov	r2, r0
 800c610:	460b      	mov	r3, r1
 800c612:	4650      	mov	r0, sl
 800c614:	4659      	mov	r1, fp
 800c616:	f7f3 ff9b 	bl	8000550 <__aeabi_dmul>
 800c61a:	a325      	add	r3, pc, #148	; (adr r3, 800c6b0 <__kernel_sin+0x148>)
 800c61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c620:	f7f3 fdde 	bl	80001e0 <__aeabi_dsub>
 800c624:	4642      	mov	r2, r8
 800c626:	464b      	mov	r3, r9
 800c628:	f7f3 ff92 	bl	8000550 <__aeabi_dmul>
 800c62c:	4602      	mov	r2, r0
 800c62e:	460b      	mov	r3, r1
 800c630:	4620      	mov	r0, r4
 800c632:	4629      	mov	r1, r5
 800c634:	f7f3 fdd6 	bl	80001e4 <__adddf3>
 800c638:	4604      	mov	r4, r0
 800c63a:	460d      	mov	r5, r1
 800c63c:	ec45 4b10 	vmov	d0, r4, r5
 800c640:	b003      	add	sp, #12
 800c642:	ecbd 8b04 	vpop	{d8-d9}
 800c646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c64a:	4b1b      	ldr	r3, [pc, #108]	; (800c6b8 <__kernel_sin+0x150>)
 800c64c:	ec51 0b18 	vmov	r0, r1, d8
 800c650:	2200      	movs	r2, #0
 800c652:	f7f3 ff7d 	bl	8000550 <__aeabi_dmul>
 800c656:	4632      	mov	r2, r6
 800c658:	ec41 0b19 	vmov	d9, r0, r1
 800c65c:	463b      	mov	r3, r7
 800c65e:	4640      	mov	r0, r8
 800c660:	4649      	mov	r1, r9
 800c662:	f7f3 ff75 	bl	8000550 <__aeabi_dmul>
 800c666:	4602      	mov	r2, r0
 800c668:	460b      	mov	r3, r1
 800c66a:	ec51 0b19 	vmov	r0, r1, d9
 800c66e:	f7f3 fdb7 	bl	80001e0 <__aeabi_dsub>
 800c672:	4652      	mov	r2, sl
 800c674:	465b      	mov	r3, fp
 800c676:	f7f3 ff6b 	bl	8000550 <__aeabi_dmul>
 800c67a:	ec53 2b18 	vmov	r2, r3, d8
 800c67e:	f7f3 fdaf 	bl	80001e0 <__aeabi_dsub>
 800c682:	a30b      	add	r3, pc, #44	; (adr r3, 800c6b0 <__kernel_sin+0x148>)
 800c684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c688:	4606      	mov	r6, r0
 800c68a:	460f      	mov	r7, r1
 800c68c:	4640      	mov	r0, r8
 800c68e:	4649      	mov	r1, r9
 800c690:	f7f3 ff5e 	bl	8000550 <__aeabi_dmul>
 800c694:	4602      	mov	r2, r0
 800c696:	460b      	mov	r3, r1
 800c698:	4630      	mov	r0, r6
 800c69a:	4639      	mov	r1, r7
 800c69c:	f7f3 fda2 	bl	80001e4 <__adddf3>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	4629      	mov	r1, r5
 800c6a8:	f7f3 fd9a 	bl	80001e0 <__aeabi_dsub>
 800c6ac:	e7c4      	b.n	800c638 <__kernel_sin+0xd0>
 800c6ae:	bf00      	nop
 800c6b0:	55555549 	.word	0x55555549
 800c6b4:	3fc55555 	.word	0x3fc55555
 800c6b8:	3fe00000 	.word	0x3fe00000
 800c6bc:	5acfd57c 	.word	0x5acfd57c
 800c6c0:	3de5d93a 	.word	0x3de5d93a
 800c6c4:	8a2b9ceb 	.word	0x8a2b9ceb
 800c6c8:	3e5ae5e6 	.word	0x3e5ae5e6
 800c6cc:	57b1fe7d 	.word	0x57b1fe7d
 800c6d0:	3ec71de3 	.word	0x3ec71de3
 800c6d4:	19c161d5 	.word	0x19c161d5
 800c6d8:	3f2a01a0 	.word	0x3f2a01a0
 800c6dc:	1110f8a6 	.word	0x1110f8a6
 800c6e0:	3f811111 	.word	0x3f811111

0800c6e4 <with_errno>:
 800c6e4:	b570      	push	{r4, r5, r6, lr}
 800c6e6:	4604      	mov	r4, r0
 800c6e8:	460d      	mov	r5, r1
 800c6ea:	4616      	mov	r6, r2
 800c6ec:	f7fd fd72 	bl	800a1d4 <__errno>
 800c6f0:	4629      	mov	r1, r5
 800c6f2:	6006      	str	r6, [r0, #0]
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	bd70      	pop	{r4, r5, r6, pc}

0800c6f8 <xflow>:
 800c6f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6fa:	4614      	mov	r4, r2
 800c6fc:	461d      	mov	r5, r3
 800c6fe:	b108      	cbz	r0, 800c704 <xflow+0xc>
 800c700:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c704:	e9cd 2300 	strd	r2, r3, [sp]
 800c708:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c70c:	4620      	mov	r0, r4
 800c70e:	4629      	mov	r1, r5
 800c710:	f7f3 ff1e 	bl	8000550 <__aeabi_dmul>
 800c714:	2222      	movs	r2, #34	; 0x22
 800c716:	b003      	add	sp, #12
 800c718:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c71c:	f7ff bfe2 	b.w	800c6e4 <with_errno>

0800c720 <__math_uflow>:
 800c720:	b508      	push	{r3, lr}
 800c722:	2200      	movs	r2, #0
 800c724:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c728:	f7ff ffe6 	bl	800c6f8 <xflow>
 800c72c:	ec41 0b10 	vmov	d0, r0, r1
 800c730:	bd08      	pop	{r3, pc}

0800c732 <__math_oflow>:
 800c732:	b508      	push	{r3, lr}
 800c734:	2200      	movs	r2, #0
 800c736:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c73a:	f7ff ffdd 	bl	800c6f8 <xflow>
 800c73e:	ec41 0b10 	vmov	d0, r0, r1
 800c742:	bd08      	pop	{r3, pc}

0800c744 <fabs>:
 800c744:	ec51 0b10 	vmov	r0, r1, d0
 800c748:	ee10 2a10 	vmov	r2, s0
 800c74c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c750:	ec43 2b10 	vmov	d0, r2, r3
 800c754:	4770      	bx	lr

0800c756 <finite>:
 800c756:	b082      	sub	sp, #8
 800c758:	ed8d 0b00 	vstr	d0, [sp]
 800c75c:	9801      	ldr	r0, [sp, #4]
 800c75e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c762:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c766:	0fc0      	lsrs	r0, r0, #31
 800c768:	b002      	add	sp, #8
 800c76a:	4770      	bx	lr
 800c76c:	0000      	movs	r0, r0
	...

0800c770 <nan>:
 800c770:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c778 <nan+0x8>
 800c774:	4770      	bx	lr
 800c776:	bf00      	nop
 800c778:	00000000 	.word	0x00000000
 800c77c:	7ff80000 	.word	0x7ff80000

0800c780 <scalbn>:
 800c780:	b570      	push	{r4, r5, r6, lr}
 800c782:	ec55 4b10 	vmov	r4, r5, d0
 800c786:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c78a:	4606      	mov	r6, r0
 800c78c:	462b      	mov	r3, r5
 800c78e:	b99a      	cbnz	r2, 800c7b8 <scalbn+0x38>
 800c790:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c794:	4323      	orrs	r3, r4
 800c796:	d036      	beq.n	800c806 <scalbn+0x86>
 800c798:	4b39      	ldr	r3, [pc, #228]	; (800c880 <scalbn+0x100>)
 800c79a:	4629      	mov	r1, r5
 800c79c:	ee10 0a10 	vmov	r0, s0
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f7f3 fed5 	bl	8000550 <__aeabi_dmul>
 800c7a6:	4b37      	ldr	r3, [pc, #220]	; (800c884 <scalbn+0x104>)
 800c7a8:	429e      	cmp	r6, r3
 800c7aa:	4604      	mov	r4, r0
 800c7ac:	460d      	mov	r5, r1
 800c7ae:	da10      	bge.n	800c7d2 <scalbn+0x52>
 800c7b0:	a32b      	add	r3, pc, #172	; (adr r3, 800c860 <scalbn+0xe0>)
 800c7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b6:	e03a      	b.n	800c82e <scalbn+0xae>
 800c7b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c7bc:	428a      	cmp	r2, r1
 800c7be:	d10c      	bne.n	800c7da <scalbn+0x5a>
 800c7c0:	ee10 2a10 	vmov	r2, s0
 800c7c4:	4620      	mov	r0, r4
 800c7c6:	4629      	mov	r1, r5
 800c7c8:	f7f3 fd0c 	bl	80001e4 <__adddf3>
 800c7cc:	4604      	mov	r4, r0
 800c7ce:	460d      	mov	r5, r1
 800c7d0:	e019      	b.n	800c806 <scalbn+0x86>
 800c7d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c7d6:	460b      	mov	r3, r1
 800c7d8:	3a36      	subs	r2, #54	; 0x36
 800c7da:	4432      	add	r2, r6
 800c7dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c7e0:	428a      	cmp	r2, r1
 800c7e2:	dd08      	ble.n	800c7f6 <scalbn+0x76>
 800c7e4:	2d00      	cmp	r5, #0
 800c7e6:	a120      	add	r1, pc, #128	; (adr r1, 800c868 <scalbn+0xe8>)
 800c7e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7ec:	da1c      	bge.n	800c828 <scalbn+0xa8>
 800c7ee:	a120      	add	r1, pc, #128	; (adr r1, 800c870 <scalbn+0xf0>)
 800c7f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7f4:	e018      	b.n	800c828 <scalbn+0xa8>
 800c7f6:	2a00      	cmp	r2, #0
 800c7f8:	dd08      	ble.n	800c80c <scalbn+0x8c>
 800c7fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c7fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c802:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c806:	ec45 4b10 	vmov	d0, r4, r5
 800c80a:	bd70      	pop	{r4, r5, r6, pc}
 800c80c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c810:	da19      	bge.n	800c846 <scalbn+0xc6>
 800c812:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c816:	429e      	cmp	r6, r3
 800c818:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c81c:	dd0a      	ble.n	800c834 <scalbn+0xb4>
 800c81e:	a112      	add	r1, pc, #72	; (adr r1, 800c868 <scalbn+0xe8>)
 800c820:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d1e2      	bne.n	800c7ee <scalbn+0x6e>
 800c828:	a30f      	add	r3, pc, #60	; (adr r3, 800c868 <scalbn+0xe8>)
 800c82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82e:	f7f3 fe8f 	bl	8000550 <__aeabi_dmul>
 800c832:	e7cb      	b.n	800c7cc <scalbn+0x4c>
 800c834:	a10a      	add	r1, pc, #40	; (adr r1, 800c860 <scalbn+0xe0>)
 800c836:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d0b8      	beq.n	800c7b0 <scalbn+0x30>
 800c83e:	a10e      	add	r1, pc, #56	; (adr r1, 800c878 <scalbn+0xf8>)
 800c840:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c844:	e7b4      	b.n	800c7b0 <scalbn+0x30>
 800c846:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c84a:	3236      	adds	r2, #54	; 0x36
 800c84c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c850:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c854:	4620      	mov	r0, r4
 800c856:	4b0c      	ldr	r3, [pc, #48]	; (800c888 <scalbn+0x108>)
 800c858:	2200      	movs	r2, #0
 800c85a:	e7e8      	b.n	800c82e <scalbn+0xae>
 800c85c:	f3af 8000 	nop.w
 800c860:	c2f8f359 	.word	0xc2f8f359
 800c864:	01a56e1f 	.word	0x01a56e1f
 800c868:	8800759c 	.word	0x8800759c
 800c86c:	7e37e43c 	.word	0x7e37e43c
 800c870:	8800759c 	.word	0x8800759c
 800c874:	fe37e43c 	.word	0xfe37e43c
 800c878:	c2f8f359 	.word	0xc2f8f359
 800c87c:	81a56e1f 	.word	0x81a56e1f
 800c880:	43500000 	.word	0x43500000
 800c884:	ffff3cb0 	.word	0xffff3cb0
 800c888:	3c900000 	.word	0x3c900000

0800c88c <_init>:
 800c88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c88e:	bf00      	nop
 800c890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c892:	bc08      	pop	{r3}
 800c894:	469e      	mov	lr, r3
 800c896:	4770      	bx	lr

0800c898 <_fini>:
 800c898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c89a:	bf00      	nop
 800c89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c89e:	bc08      	pop	{r3}
 800c8a0:	469e      	mov	lr, r3
 800c8a2:	4770      	bx	lr
