
LAB_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da64  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  0800dc00  0800dc00  0001dc00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de30  0800de30  00020420  2**0
                  CONTENTS
  4 .ARM          00000008  0800de30  0800de30  0001de30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de38  0800de38  00020420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de38  0800de38  0001de38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de3c  0800de3c  0001de3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000420  20000000  0800de40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f70  20000420  0800e260  00020420  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001390  0800e260  00021390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020420  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e62  00000000  00000000  00020450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a51  00000000  00000000  000362b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  00038d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001148  00000000  00000000  00039f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018caf  00000000  00000000  0003b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170fd  00000000  00000000  00053d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e94c  00000000  00000000  0006ae44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00109790  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005838  00000000  00000000  001097e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000420 	.word	0x20000420
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800dbe4 	.word	0x0800dbe4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000424 	.word	0x20000424
 80001d4:	0800dbe4 	.word	0x0800dbe4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b992 	b.w	8000edc <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f824 	bl	8000c0c <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__aeabi_d2ulz>:
 8000bd0:	b5d0      	push	{r4, r6, r7, lr}
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <__aeabi_d2ulz+0x34>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4606      	mov	r6, r0
 8000bd8:	460f      	mov	r7, r1
 8000bda:	f7ff fcb9 	bl	8000550 <__aeabi_dmul>
 8000bde:	f000 f97f 	bl	8000ee0 <__aeabi_d2uiz>
 8000be2:	4604      	mov	r4, r0
 8000be4:	f7ff fc3a 	bl	800045c <__aeabi_ui2d>
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <__aeabi_d2ulz+0x38>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	f7ff fcb0 	bl	8000550 <__aeabi_dmul>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	4630      	mov	r0, r6
 8000bf6:	4639      	mov	r1, r7
 8000bf8:	f7ff faf2 	bl	80001e0 <__aeabi_dsub>
 8000bfc:	f000 f970 	bl	8000ee0 <__aeabi_d2uiz>
 8000c00:	4621      	mov	r1, r4
 8000c02:	bdd0      	pop	{r4, r6, r7, pc}
 8000c04:	3df00000 	.word	0x3df00000
 8000c08:	41f00000 	.word	0x41f00000

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9d08      	ldr	r5, [sp, #32]
 8000c12:	4604      	mov	r4, r0
 8000c14:	468e      	mov	lr, r1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d14d      	bne.n	8000cb6 <__udivmoddi4+0xaa>
 8000c1a:	428a      	cmp	r2, r1
 8000c1c:	4694      	mov	ip, r2
 8000c1e:	d969      	bls.n	8000cf4 <__udivmoddi4+0xe8>
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	b152      	cbz	r2, 8000c3c <__udivmoddi4+0x30>
 8000c26:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2a:	f1c2 0120 	rsb	r1, r2, #32
 8000c2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c32:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c36:	ea41 0e03 	orr.w	lr, r1, r3
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c40:	0c21      	lsrs	r1, r4, #16
 8000c42:	fbbe f6f8 	udiv	r6, lr, r8
 8000c46:	fa1f f78c 	uxth.w	r7, ip
 8000c4a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c52:	fb06 f107 	mul.w	r1, r6, r7
 8000c56:	4299      	cmp	r1, r3
 8000c58:	d90a      	bls.n	8000c70 <__udivmoddi4+0x64>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c62:	f080 811f 	bcs.w	8000ea4 <__udivmoddi4+0x298>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 811c 	bls.w	8000ea4 <__udivmoddi4+0x298>
 8000c6c:	3e02      	subs	r6, #2
 8000c6e:	4463      	add	r3, ip
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c78:	fb08 3310 	mls	r3, r8, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 f707 	mul.w	r7, r0, r7
 8000c84:	42a7      	cmp	r7, r4
 8000c86:	d90a      	bls.n	8000c9e <__udivmoddi4+0x92>
 8000c88:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c90:	f080 810a 	bcs.w	8000ea8 <__udivmoddi4+0x29c>
 8000c94:	42a7      	cmp	r7, r4
 8000c96:	f240 8107 	bls.w	8000ea8 <__udivmoddi4+0x29c>
 8000c9a:	4464      	add	r4, ip
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca2:	1be4      	subs	r4, r4, r7
 8000ca4:	2600      	movs	r6, #0
 8000ca6:	b11d      	cbz	r5, 8000cb0 <__udivmoddi4+0xa4>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xc2>
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	f000 80ef 	beq.w	8000e9e <__udivmoddi4+0x292>
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc6:	4630      	mov	r0, r6
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f683 	clz	r6, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d14a      	bne.n	8000d6c <__udivmoddi4+0x160>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd4>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80f9 	bhi.w	8000ed2 <__udivmoddi4+0x2c6>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	469e      	mov	lr, r3
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa4>
 8000cee:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa4>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xec>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 8092 	bne.w	8000e26 <__udivmoddi4+0x21a>
 8000d02:	eba1 010c 	sub.w	r1, r1, ip
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f fe8c 	uxth.w	lr, ip
 8000d0e:	2601      	movs	r6, #1
 8000d10:	0c20      	lsrs	r0, r4, #16
 8000d12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d16:	fb07 1113 	mls	r1, r7, r3, r1
 8000d1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1e:	fb0e f003 	mul.w	r0, lr, r3
 8000d22:	4288      	cmp	r0, r1
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x12c>
 8000d26:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x12a>
 8000d30:	4288      	cmp	r0, r1
 8000d32:	f200 80cb 	bhi.w	8000ecc <__udivmoddi4+0x2c0>
 8000d36:	4643      	mov	r3, r8
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d40:	fb07 1110 	mls	r1, r7, r0, r1
 8000d44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d48:	fb0e fe00 	mul.w	lr, lr, r0
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x156>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d58:	d202      	bcs.n	8000d60 <__udivmoddi4+0x154>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f200 80bb 	bhi.w	8000ed6 <__udivmoddi4+0x2ca>
 8000d60:	4608      	mov	r0, r1
 8000d62:	eba4 040e 	sub.w	r4, r4, lr
 8000d66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d6a:	e79c      	b.n	8000ca6 <__udivmoddi4+0x9a>
 8000d6c:	f1c6 0720 	rsb	r7, r6, #32
 8000d70:	40b3      	lsls	r3, r6
 8000d72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d82:	431c      	orrs	r4, r3
 8000d84:	40f9      	lsrs	r1, r7
 8000d86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d92:	0c20      	lsrs	r0, r4, #16
 8000d94:	fa1f fe8c 	uxth.w	lr, ip
 8000d98:	fb09 1118 	mls	r1, r9, r8, r1
 8000d9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000da0:	fb08 f00e 	mul.w	r0, r8, lr
 8000da4:	4288      	cmp	r0, r1
 8000da6:	fa02 f206 	lsl.w	r2, r2, r6
 8000daa:	d90b      	bls.n	8000dc4 <__udivmoddi4+0x1b8>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db4:	f080 8088 	bcs.w	8000ec8 <__udivmoddi4+0x2bc>
 8000db8:	4288      	cmp	r0, r1
 8000dba:	f240 8085 	bls.w	8000ec8 <__udivmoddi4+0x2bc>
 8000dbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc2:	4461      	add	r1, ip
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dcc:	fb09 1110 	mls	r1, r9, r0, r1
 8000dd0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	458e      	cmp	lr, r1
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x1e2>
 8000ddc:	eb1c 0101 	adds.w	r1, ip, r1
 8000de0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de4:	d26c      	bcs.n	8000ec0 <__udivmoddi4+0x2b4>
 8000de6:	458e      	cmp	lr, r1
 8000de8:	d96a      	bls.n	8000ec0 <__udivmoddi4+0x2b4>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4461      	add	r1, ip
 8000dee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000df2:	fba0 9402 	umull	r9, r4, r0, r2
 8000df6:	eba1 010e 	sub.w	r1, r1, lr
 8000dfa:	42a1      	cmp	r1, r4
 8000dfc:	46c8      	mov	r8, r9
 8000dfe:	46a6      	mov	lr, r4
 8000e00:	d356      	bcc.n	8000eb0 <__udivmoddi4+0x2a4>
 8000e02:	d053      	beq.n	8000eac <__udivmoddi4+0x2a0>
 8000e04:	b15d      	cbz	r5, 8000e1e <__udivmoddi4+0x212>
 8000e06:	ebb3 0208 	subs.w	r2, r3, r8
 8000e0a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e12:	fa22 f306 	lsr.w	r3, r2, r6
 8000e16:	40f1      	lsrs	r1, r6
 8000e18:	431f      	orrs	r7, r3
 8000e1a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1e:	2600      	movs	r6, #0
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	f1c2 0320 	rsb	r3, r2, #32
 8000e2a:	40d8      	lsrs	r0, r3
 8000e2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e30:	fa21 f303 	lsr.w	r3, r1, r3
 8000e34:	4091      	lsls	r1, r2
 8000e36:	4301      	orrs	r1, r0
 8000e38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3c:	fa1f fe8c 	uxth.w	lr, ip
 8000e40:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e44:	fb07 3610 	mls	r6, r7, r0, r3
 8000e48:	0c0b      	lsrs	r3, r1, #16
 8000e4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e52:	429e      	cmp	r6, r3
 8000e54:	fa04 f402 	lsl.w	r4, r4, r2
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x260>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e62:	d22f      	bcs.n	8000ec4 <__udivmoddi4+0x2b8>
 8000e64:	429e      	cmp	r6, r3
 8000e66:	d92d      	bls.n	8000ec4 <__udivmoddi4+0x2b8>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4463      	add	r3, ip
 8000e6c:	1b9b      	subs	r3, r3, r6
 8000e6e:	b289      	uxth	r1, r1
 8000e70:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e74:	fb07 3316 	mls	r3, r7, r6, r3
 8000e78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e80:	428b      	cmp	r3, r1
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x28a>
 8000e84:	eb1c 0101 	adds.w	r1, ip, r1
 8000e88:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e8c:	d216      	bcs.n	8000ebc <__udivmoddi4+0x2b0>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d914      	bls.n	8000ebc <__udivmoddi4+0x2b0>
 8000e92:	3e02      	subs	r6, #2
 8000e94:	4461      	add	r1, ip
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e9c:	e738      	b.n	8000d10 <__udivmoddi4+0x104>
 8000e9e:	462e      	mov	r6, r5
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	e705      	b.n	8000cb0 <__udivmoddi4+0xa4>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	e6e3      	b.n	8000c70 <__udivmoddi4+0x64>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6f8      	b.n	8000c9e <__udivmoddi4+0x92>
 8000eac:	454b      	cmp	r3, r9
 8000eae:	d2a9      	bcs.n	8000e04 <__udivmoddi4+0x1f8>
 8000eb0:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb8:	3801      	subs	r0, #1
 8000eba:	e7a3      	b.n	8000e04 <__udivmoddi4+0x1f8>
 8000ebc:	4646      	mov	r6, r8
 8000ebe:	e7ea      	b.n	8000e96 <__udivmoddi4+0x28a>
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	e794      	b.n	8000dee <__udivmoddi4+0x1e2>
 8000ec4:	4640      	mov	r0, r8
 8000ec6:	e7d1      	b.n	8000e6c <__udivmoddi4+0x260>
 8000ec8:	46d0      	mov	r8, sl
 8000eca:	e77b      	b.n	8000dc4 <__udivmoddi4+0x1b8>
 8000ecc:	3b02      	subs	r3, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	e732      	b.n	8000d38 <__udivmoddi4+0x12c>
 8000ed2:	4630      	mov	r0, r6
 8000ed4:	e709      	b.n	8000cea <__udivmoddi4+0xde>
 8000ed6:	4464      	add	r4, ip
 8000ed8:	3802      	subs	r0, #2
 8000eda:	e742      	b.n	8000d62 <__udivmoddi4+0x156>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <__aeabi_d2uiz>:
 8000ee0:	004a      	lsls	r2, r1, #1
 8000ee2:	d211      	bcs.n	8000f08 <__aeabi_d2uiz+0x28>
 8000ee4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ee8:	d211      	bcs.n	8000f0e <__aeabi_d2uiz+0x2e>
 8000eea:	d50d      	bpl.n	8000f08 <__aeabi_d2uiz+0x28>
 8000eec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ef0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ef4:	d40e      	bmi.n	8000f14 <__aeabi_d2uiz+0x34>
 8000ef6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000efa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000efe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f02:	fa23 f002 	lsr.w	r0, r3, r2
 8000f06:	4770      	bx	lr
 8000f08:	f04f 0000 	mov.w	r0, #0
 8000f0c:	4770      	bx	lr
 8000f0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f12:	d102      	bne.n	8000f1a <__aeabi_d2uiz+0x3a>
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	4770      	bx	lr
 8000f1a:	f04f 0000 	mov.w	r0, #0
 8000f1e:	4770      	bx	lr

08000f20 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <modbus_1t5_Timeout+0x1c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	751a      	strb	r2, [r3, #20]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	2000043c 	.word	0x2000043c

08000f40 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <modbus_3t5_Timeout+0x1c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	755a      	strb	r2, [r3, #21]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	2000043c 	.word	0x2000043c

08000f60 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000f72:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8000f7a:	1c59      	adds	r1, r3, #1
 8000f7c:	b289      	uxth	r1, r1
 8000f7e:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8000f82:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f86:	d210      	bcs.n	8000faa <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68d8      	ldr	r0, [r3, #12]
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000f9a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000f9e:	4413      	add	r3, r2
 8000fa0:	3302      	adds	r3, #2
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f009 f923 	bl	800a1f0 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000043c 	.word	0x2000043c

08000fc4 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000fce:	4a24      	ldr	r2, [pc, #144]	; (8001060 <Modbus_init+0x9c>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <Modbus_init+0x9c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000fdc:	4b20      	ldr	r3, [pc, #128]	; (8001060 <Modbus_init+0x9c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	691b      	ldr	r3, [r3, #16]
 8000fe2:	4a20      	ldr	r2, [pc, #128]	; (8001064 <Modbus_init+0xa0>)
 8000fe4:	2114      	movs	r1, #20
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f008 fb06 	bl	80095f8 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000fec:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <Modbus_init+0x9c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	4a1d      	ldr	r2, [pc, #116]	; (8001068 <Modbus_init+0xa4>)
 8000ff4:	210e      	movs	r1, #14
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f008 fafe 	bl	80095f8 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <Modbus_init+0x9c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	4a1a      	ldr	r2, [pc, #104]	; (800106c <Modbus_init+0xa8>)
 8001004:	2103      	movs	r1, #3
 8001006:	4618      	mov	r0, r3
 8001008:	f009 f84a 	bl	800a0a0 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <Modbus_init+0x9c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	68d8      	ldr	r0, [r3, #12]
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <Modbus_init+0x9c>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <Modbus_init+0x9c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800101e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001022:	4413      	add	r3, r2
 8001024:	3302      	adds	r3, #2
 8001026:	2201      	movs	r2, #1
 8001028:	4619      	mov	r1, r3
 800102a:	f009 f8e1 	bl	800a1f0 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <Modbus_init+0x9c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b01      	cmp	r3, #1
 800103c:	d10c      	bne.n	8001058 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <Modbus_init+0x9c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	691b      	ldr	r3, [r3, #16]
 8001044:	4618      	mov	r0, r3
 8001046:	f007 fb81 	bl	800874c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <Modbus_init+0x9c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f007 fdc0 	bl	8008bd8 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	2000043c 	.word	0x2000043c
 8001064:	08000f21 	.word	0x08000f21
 8001068:	08000f41 	.word	0x08000f41
 800106c:	08000f61 	.word	0x08000f61

08001070 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 800107c:	23ff      	movs	r3, #255	; 0xff
 800107e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001080:	23ff      	movs	r3, #255	; 0xff
 8001082:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001084:	e013      	b.n	80010ae <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	607a      	str	r2, [r7, #4]
 800108c:	781a      	ldrb	r2, [r3, #0]
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	4053      	eors	r3, r2
 8001092:	b2db      	uxtb	r3, r3
 8001094:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <CRC16+0x64>)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4413      	add	r3, r2
 800109c:	781a      	ldrb	r2, [r3, #0]
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	4053      	eors	r3, r2
 80010a2:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80010a4:	4a0c      	ldr	r2, [pc, #48]	; (80010d8 <CRC16+0x68>)
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	4413      	add	r3, r2
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80010ae:	883b      	ldrh	r3, [r7, #0]
 80010b0:	1e5a      	subs	r2, r3, #1
 80010b2:	803a      	strh	r2, [r7, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1e6      	bne.n	8001086 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21a      	sxth	r2, r3
 80010be:	7bbb      	ldrb	r3, [r7, #14]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	b29b      	uxth	r3, r3
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	20000100 	.word	0x20000100
 80010d8:	20000000 	.word	0x20000000

080010dc <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80010e2:	4b81      	ldr	r3, [pc, #516]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	7e1b      	ldrb	r3, [r3, #24]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	2b03      	cmp	r3, #3
 80010ec:	d80a      	bhi.n	8001104 <Modbus_Protocal_Worker+0x28>
 80010ee:	a201      	add	r2, pc, #4	; (adr r2, 80010f4 <Modbus_Protocal_Worker+0x18>)
 80010f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f4:	0800110f 	.word	0x0800110f
 80010f8:	080012af 	.word	0x080012af
 80010fc:	0800119b 	.word	0x0800119b
 8001100:	080011c1 	.word	0x080011c1
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001104:	4b78      	ldr	r3, [pc, #480]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2201      	movs	r2, #1
 800110a:	761a      	strb	r2, [r3, #24]
		break;
 800110c:	e0e8      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800110e:	4b76      	ldr	r3, [pc, #472]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 800111a:	f000 f9dd 	bl	80014d8 <Modbus_Emission>
 800111e:	e01c      	b.n	800115a <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001120:	4b71      	ldr	r3, [pc, #452]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	7d9b      	ldrb	r3, [r3, #22]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d017      	beq.n	800115a <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800112a:	4b6f      	ldr	r3, [pc, #444]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001132:	4b6d      	ldr	r3, [pc, #436]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2200      	movs	r2, #0
 8001138:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 800113a:	4b6b      	ldr	r3, [pc, #428]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b68      	ldr	r3, [pc, #416]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f042 0201 	orr.w	r2, r2, #1
 8001150:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001152:	4b65      	ldr	r3, [pc, #404]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2203      	movs	r2, #3
 8001158:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800115a:	4b63      	ldr	r3, [pc, #396]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b20      	cmp	r3, #32
 8001168:	f040 80b3 	bne.w	80012d2 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800116c:	4b5e      	ldr	r3, [pc, #376]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2200      	movs	r2, #0
 8001172:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001176:	4b5c      	ldr	r3, [pc, #368]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68d8      	ldr	r0, [r3, #12]
 800117c:	4b5a      	ldr	r3, [pc, #360]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b59      	ldr	r3, [pc, #356]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001188:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800118c:	4413      	add	r3, r2
 800118e:	3302      	adds	r3, #2
 8001190:	2201      	movs	r2, #1
 8001192:	4619      	mov	r1, r3
 8001194:	f009 f82c 	bl	800a1f0 <HAL_UART_Receive_IT>
		}
		break;
 8001198:	e09b      	b.n	80012d2 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800119a:	4b53      	ldr	r3, [pc, #332]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	7d1b      	ldrb	r3, [r3, #20]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 8098 	beq.w	80012d6 <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 80011a6:	4b50      	ldr	r3, [pc, #320]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2200      	movs	r2, #0
 80011ac:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80011ae:	4b4e      	ldr	r3, [pc, #312]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	22fe      	movs	r2, #254	; 0xfe
 80011b4:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80011b6:	4b4c      	ldr	r3, [pc, #304]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2204      	movs	r2, #4
 80011bc:	761a      	strb	r2, [r3, #24]
		}
		break;
 80011be:	e08a      	b.n	80012d6 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80011c0:	4b49      	ldr	r3, [pc, #292]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	7d9b      	ldrb	r3, [r3, #22]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d009      	beq.n	80011de <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 80011ca:	4b47      	ldr	r3, [pc, #284]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d103      	bne.n	80011de <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80011d6:	4b44      	ldr	r3, [pc, #272]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	22ff      	movs	r2, #255	; 0xff
 80011dc:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80011de:	4b42      	ldr	r3, [pc, #264]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80011e6:	f113 0f02 	cmn.w	r3, #2
 80011ea:	d150      	bne.n	800128e <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80011ec:	4b3e      	ldr	r3, [pc, #248]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2200      	movs	r2, #0
 80011f2:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80011f4:	4b3c      	ldr	r3, [pc, #240]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f203 2272 	addw	r2, r3, #626	; 0x272
 80011fc:	4b3a      	ldr	r3, [pc, #232]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001204:	3b02      	subs	r3, #2
 8001206:	4619      	mov	r1, r3
 8001208:	4610      	mov	r0, r2
 800120a:	f7ff ff31 	bl	8001070 <CRC16>
 800120e:	4603      	mov	r3, r0
 8001210:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001212:	793a      	ldrb	r2, [r7, #4]
 8001214:	4b34      	ldr	r3, [pc, #208]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001216:	6819      	ldr	r1, [r3, #0]
 8001218:	4b33      	ldr	r3, [pc, #204]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001220:	3b02      	subs	r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001228:	429a      	cmp	r2, r3
 800122a:	d10c      	bne.n	8001246 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 800122c:	797a      	ldrb	r2, [r7, #5]
 800122e:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001230:	6819      	ldr	r1, [r3, #0]
 8001232:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800123a:	3b01      	subs	r3, #1
 800123c:	440b      	add	r3, r1
 800123e:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001242:	429a      	cmp	r2, r3
 8001244:	d004      	beq.n	8001250 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001246:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	22ff      	movs	r2, #255	; 0xff
 800124c:	75da      	strb	r2, [r3, #23]
				break;
 800124e:	e047      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001250:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001258:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	d113      	bne.n	800128a <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001262:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800126a:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 8001272:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800127c:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800127e:	461a      	mov	r2, r3
 8001280:	f00a f990 	bl	800b5a4 <memcpy>

			//execute command
			Modbus_frame_response();
 8001284:	f000 f910 	bl	80014a8 <Modbus_frame_response>
 8001288:	e001      	b.n	800128e <Modbus_Protocal_Worker+0x1b2>
				break;
 800128a:	bf00      	nop
					}
		break;


	}
}
 800128c:	e028      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	7d5b      	ldrb	r3, [r3, #21]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d020      	beq.n	80012da <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2201      	movs	r2, #1
 800129e:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f009 f850 	bl	800a34c <HAL_UART_AbortReceive>
		break;
 80012ac:	e015      	b.n	80012da <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b20      	cmp	r3, #32
 80012bc:	d10f      	bne.n	80012de <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2201      	movs	r2, #1
 80012ce:	761a      	strb	r2, [r3, #24]
		break;
 80012d0:	e005      	b.n	80012de <Modbus_Protocal_Worker+0x202>
		break;
 80012d2:	bf00      	nop
 80012d4:	e004      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
		break;
 80012d6:	bf00      	nop
 80012d8:	e002      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
		break;
 80012da:	bf00      	nop
 80012dc:	e000      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
		break;
 80012de:	bf00      	nop
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	2000043c 	.word	0x2000043c

080012ec <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <modbusWrite1Register+0x80>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	7e9b      	ldrb	r3, [r3, #26]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	4b1b      	ldr	r3, [pc, #108]	; (800136c <modbusWrite1Register+0x80>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	7edb      	ldrb	r3, [r3, #27]
 8001304:	b29b      	uxth	r3, r3
 8001306:	4413      	add	r3, r2
 8001308:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800130a:	88fa      	ldrh	r2, [r7, #6]
 800130c:	4b17      	ldr	r3, [pc, #92]	; (800136c <modbusWrite1Register+0x80>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	429a      	cmp	r2, r3
 8001314:	d903      	bls.n	800131e <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001316:	2002      	movs	r0, #2
 8001318:	f000 f8a4 	bl	8001464 <ModbusErrorReply>
			 return;
 800131c:	e023      	b.n	8001366 <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <modbusWrite1Register+0x80>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <modbusWrite1Register+0x80>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6859      	ldr	r1, [r3, #4]
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	440b      	add	r3, r1
 800132e:	7f12      	ldrb	r2, [r2, #28]
 8001330:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <modbusWrite1Register+0x80>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <modbusWrite1Register+0x80>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6859      	ldr	r1, [r3, #4]
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	440b      	add	r3, r1
 8001342:	7f52      	ldrb	r2, [r2, #29]
 8001344:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <modbusWrite1Register+0x80>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <modbusWrite1Register+0x80>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8001354:	2208      	movs	r2, #8
 8001356:	4619      	mov	r1, r3
 8001358:	f00a f924 	bl	800b5a4 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <modbusWrite1Register+0x80>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2205      	movs	r2, #5
 8001362:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	2000043c 	.word	0x2000043c

08001370 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001376:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <modbusRead1Register+0xf0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	7f1b      	ldrb	r3, [r3, #28]
 800137c:	b29b      	uxth	r3, r3
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	b29a      	uxth	r2, r3
 8001382:	4b37      	ldr	r3, [pc, #220]	; (8001460 <modbusRead1Register+0xf0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	7f5b      	ldrb	r3, [r3, #29]
 8001388:	b29b      	uxth	r3, r3
 800138a:	4413      	add	r3, r2
 800138c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800138e:	4b34      	ldr	r3, [pc, #208]	; (8001460 <modbusRead1Register+0xf0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	7e9b      	ldrb	r3, [r3, #26]
 8001394:	b29b      	uxth	r3, r3
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	b29a      	uxth	r2, r3
 800139a:	4b31      	ldr	r3, [pc, #196]	; (8001460 <modbusRead1Register+0xf0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	7edb      	ldrb	r3, [r3, #27]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	4413      	add	r3, r2
 80013a4:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d002      	beq.n	80013b2 <modbusRead1Register+0x42>
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	2b7d      	cmp	r3, #125	; 0x7d
 80013b0:	d903      	bls.n	80013ba <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80013b2:	2003      	movs	r0, #3
 80013b4:	f000 f856 	bl	8001464 <ModbusErrorReply>
		 return;
 80013b8:	e04e      	b.n	8001458 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80013ba:	88ba      	ldrh	r2, [r7, #4]
 80013bc:	4b28      	ldr	r3, [pc, #160]	; (8001460 <modbusRead1Register+0xf0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d808      	bhi.n	80013d8 <modbusRead1Register+0x68>
 80013c6:	88ba      	ldrh	r2, [r7, #4]
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	4413      	add	r3, r2
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b24      	ldr	r3, [pc, #144]	; (8001460 <modbusRead1Register+0xf0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d903      	bls.n	80013e0 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80013d8:	2002      	movs	r0, #2
 80013da:	f000 f843 	bl	8001464 <ModbusErrorReply>
		 return;
 80013de:	e03b      	b.n	8001458 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80013e0:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <modbusRead1Register+0xf0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2203      	movs	r2, #3
 80013e6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <modbusRead1Register+0xf0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	0052      	lsls	r2, r2, #1
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80013fa:	2400      	movs	r4, #0
 80013fc:	e020      	b.n	8001440 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <modbusRead1Register+0xf0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	88bb      	ldrh	r3, [r7, #4]
 8001406:	4423      	add	r3, r4
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	18d1      	adds	r1, r2, r3
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <modbusRead1Register+0xf0>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	1c63      	adds	r3, r4, #1
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	7849      	ldrb	r1, [r1, #1]
 8001416:	4413      	add	r3, r2
 8001418:	460a      	mov	r2, r1
 800141a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <modbusRead1Register+0xf0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	88bb      	ldrh	r3, [r7, #4]
 8001426:	4423      	add	r3, r4
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	18d1      	adds	r1, r2, r3
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <modbusRead1Register+0xf0>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	0063      	lsls	r3, r4, #1
 8001432:	3303      	adds	r3, #3
 8001434:	7809      	ldrb	r1, [r1, #0]
 8001436:	4413      	add	r3, r2
 8001438:	460a      	mov	r2, r1
 800143a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 800143e:	3401      	adds	r4, #1
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	429c      	cmp	r4, r3
 8001444:	dbdb      	blt.n	80013fe <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	3301      	adds	r3, #1
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <modbusRead1Register+0xf0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	0052      	lsls	r2, r2, #1
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	bd90      	pop	{r4, r7, pc}
 800145e:	bf00      	nop
 8001460:	2000043c 	.word	0x2000043c

08001464 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <ModbusErrorReply+0x40>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	7e5a      	ldrb	r2, [r3, #25]
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <ModbusErrorReply+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <ModbusErrorReply+0x40>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	79fa      	ldrb	r2, [r7, #7]
 8001488:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <ModbusErrorReply+0x40>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2202      	movs	r2, #2
 8001492:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	2000043c 	.word	0x2000043c

080014a8 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <Modbus_frame_response+0x2c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	7e5b      	ldrb	r3, [r3, #25]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d004      	beq.n	80014c0 <Modbus_frame_response+0x18>
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d105      	bne.n	80014c6 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80014ba:	f7ff ff17 	bl	80012ec <modbusWrite1Register>
		break;
 80014be:	e006      	b.n	80014ce <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80014c0:	f7ff ff56 	bl	8001370 <modbusRead1Register>
		break;
 80014c4:	e003      	b.n	80014ce <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80014c6:	2001      	movs	r0, #1
 80014c8:	f7ff ffcc 	bl	8001464 <ModbusErrorReply>
		break;
 80014cc:	bf00      	nop

	}
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	2000043c 	.word	0x2000043c

080014d8 <Modbus_Emission>:

void Modbus_Emission()
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80014de:	4b3d      	ldr	r3, [pc, #244]	; (80015d4 <Modbus_Emission+0xfc>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b20      	cmp	r3, #32
 80014ec:	d15e      	bne.n	80015ac <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80014ee:	4b39      	ldr	r3, [pc, #228]	; (80015d4 <Modbus_Emission+0xfc>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <Modbus_Emission+0xfc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	7812      	ldrb	r2, [r2, #0]
 80014f8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80014fc:	4b35      	ldr	r3, [pc, #212]	; (80015d4 <Modbus_Emission+0xfc>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8001504:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001506:	4b33      	ldr	r3, [pc, #204]	; (80015d4 <Modbus_Emission+0xfc>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 800150e:	4b31      	ldr	r3, [pc, #196]	; (80015d4 <Modbus_Emission+0xfc>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 8001516:	461a      	mov	r2, r3
 8001518:	f00a f844 	bl	800b5a4 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 800151c:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <Modbus_Emission+0xfc>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001524:	b29a      	uxth	r2, r3
 8001526:	4b2b      	ldr	r3, [pc, #172]	; (80015d4 <Modbus_Emission+0xfc>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	3203      	adds	r2, #3
 800152c:	b292      	uxth	r2, r2
 800152e:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001532:	4b28      	ldr	r3, [pc, #160]	; (80015d4 <Modbus_Emission+0xfc>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <Modbus_Emission+0xfc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001542:	3b02      	subs	r3, #2
 8001544:	4619      	mov	r1, r3
 8001546:	4610      	mov	r0, r2
 8001548:	f7ff fd92 	bl	8001070 <CRC16>
 800154c:	4603      	mov	r3, r0
 800154e:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001550:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <Modbus_Emission+0xfc>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <Modbus_Emission+0xfc>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800155c:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 800155e:	7939      	ldrb	r1, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	460a      	mov	r2, r1
 8001564:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001568:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <Modbus_Emission+0xfc>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <Modbus_Emission+0xfc>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001574:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001576:	7979      	ldrb	r1, [r7, #5]
 8001578:	4413      	add	r3, r2
 800157a:	460a      	mov	r2, r1
 800157c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <Modbus_Emission+0xfc>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b20      	cmp	r3, #32
 800158e:	d10d      	bne.n	80015ac <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <Modbus_Emission+0xfc>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <Modbus_Emission+0xfc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <Modbus_Emission+0xfc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80015a2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80015a6:	461a      	mov	r2, r3
 80015a8:	f008 fe52 	bl	800a250 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <Modbus_Emission+0xfc>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2200      	movs	r2, #0
 80015b2:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <Modbus_Emission+0xfc>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2200      	movs	r2, #0
 80015ba:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <Modbus_Emission+0xfc>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2200      	movs	r2, #0
 80015c2:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <Modbus_Emission+0xfc>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2202      	movs	r2, #2
 80015ca:	761a      	strb	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	2000043c 	.word	0x2000043c

080015d8 <rt_powd_snf>:
 * Arguments    : double u0
 *                double u1
 * Return Type  : double
 */
static double rt_powd_snf(double u0, double u1)
{
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b08c      	sub	sp, #48	; 0x30
 80015dc:	af00      	add	r7, sp, #0
 80015de:	ed87 0b04 	vstr	d0, [r7, #16]
 80015e2:	ed87 1b02 	vstr	d1, [r7, #8]
  double y;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 80015e6:	ed97 0b04 	vldr	d0, [r7, #16]
 80015ea:	f003 fce7 	bl	8004fbc <rtIsNaN>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d106      	bne.n	8001602 <rt_powd_snf+0x2a>
 80015f4:	ed97 0b02 	vldr	d0, [r7, #8]
 80015f8:	f003 fce0 	bl	8004fbc <rtIsNaN>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d005      	beq.n	800160e <rt_powd_snf+0x36>
    y = rtNaN;
 8001602:	4b80      	ldr	r3, [pc, #512]	; (8001804 <rt_powd_snf+0x22c>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800160c:	e0ef      	b.n	80017ee <rt_powd_snf+0x216>
  } else {
    double d;
    double d1;
    d = fabs(u0);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	ed97 7b00 	vldr	d7, [r7]
 800161e:	ed87 7b08 	vstr	d7, [r7, #32]
    d1 = fabs(u1);
 8001622:	68bc      	ldr	r4, [r7, #8]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800162a:	e9c7 4506 	strd	r4, r5, [r7, #24]
    if (rtIsInf(u1)) {
 800162e:	ed97 0b02 	vldr	d0, [r7, #8]
 8001632:	f003 fc95 	bl	8004f60 <rtIsInf>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d049      	beq.n	80016d0 <rt_powd_snf+0xf8>
      if (d == 1.0) {
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	4b71      	ldr	r3, [pc, #452]	; (8001808 <rt_powd_snf+0x230>)
 8001642:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001646:	f7ff f9eb 	bl	8000a20 <__aeabi_dcmpeq>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <rt_powd_snf+0x84>
        y = 1.0;
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b6c      	ldr	r3, [pc, #432]	; (8001808 <rt_powd_snf+0x230>)
 8001656:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800165a:	e0c8      	b.n	80017ee <rt_powd_snf+0x216>
      } else if (d > 1.0) {
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	4b69      	ldr	r3, [pc, #420]	; (8001808 <rt_powd_snf+0x230>)
 8001662:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001666:	f7ff fa03 	bl	8000a70 <__aeabi_dcmpgt>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d017      	beq.n	80016a0 <rt_powd_snf+0xc8>
        if (u1 > 0.0) {
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800167c:	f7ff f9f8 	bl	8000a70 <__aeabi_dcmpgt>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d005      	beq.n	8001692 <rt_powd_snf+0xba>
          y = rtInf;
 8001686:	4b61      	ldr	r3, [pc, #388]	; (800180c <rt_powd_snf+0x234>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001690:	e0ad      	b.n	80017ee <rt_powd_snf+0x216>
        } else {
          y = 0.0;
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800169e:	e0a6      	b.n	80017ee <rt_powd_snf+0x216>
        }
      } else if (u1 > 0.0) {
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016ac:	f7ff f9e0 	bl	8000a70 <__aeabi_dcmpgt>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d006      	beq.n	80016c4 <rt_powd_snf+0xec>
        y = 0.0;
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	f04f 0300 	mov.w	r3, #0
 80016be:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80016c2:	e094      	b.n	80017ee <rt_powd_snf+0x216>
      } else {
        y = rtInf;
 80016c4:	4b51      	ldr	r3, [pc, #324]	; (800180c <rt_powd_snf+0x234>)
 80016c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80016ce:	e08e      	b.n	80017ee <rt_powd_snf+0x216>
      }
    } else if (d1 == 0.0) {
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016dc:	f7ff f9a0 	bl	8000a20 <__aeabi_dcmpeq>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <rt_powd_snf+0x11a>
      y = 1.0;
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	4b47      	ldr	r3, [pc, #284]	; (8001808 <rt_powd_snf+0x230>)
 80016ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80016f0:	e07d      	b.n	80017ee <rt_powd_snf+0x216>
    } else if (d1 == 1.0) {
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	4b44      	ldr	r3, [pc, #272]	; (8001808 <rt_powd_snf+0x230>)
 80016f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016fc:	f7ff f990 	bl	8000a20 <__aeabi_dcmpeq>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d01b      	beq.n	800173e <rt_powd_snf+0x166>
      if (u1 > 0.0) {
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001712:	f7ff f9ad 	bl	8000a70 <__aeabi_dcmpgt>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d004      	beq.n	8001726 <rt_powd_snf+0x14e>
        y = u0;
 800171c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001720:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001724:	e063      	b.n	80017ee <rt_powd_snf+0x216>
      } else {
        y = 1.0 / u0;
 8001726:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800172a:	f04f 0000 	mov.w	r0, #0
 800172e:	4936      	ldr	r1, [pc, #216]	; (8001808 <rt_powd_snf+0x230>)
 8001730:	f7ff f838 	bl	80007a4 <__aeabi_ddiv>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800173c:	e057      	b.n	80017ee <rt_powd_snf+0x216>
      }
    } else if (u1 == 2.0) {
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001746:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800174a:	f7ff f969 	bl	8000a20 <__aeabi_dcmpeq>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00a      	beq.n	800176a <rt_powd_snf+0x192>
      y = u0 * u0;
 8001754:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001758:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800175c:	f7fe fef8 	bl	8000550 <__aeabi_dmul>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001768:	e041      	b.n	80017ee <rt_powd_snf+0x216>
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	4b28      	ldr	r3, [pc, #160]	; (8001810 <rt_powd_snf+0x238>)
 8001770:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001774:	f7ff f954 	bl	8000a20 <__aeabi_dcmpeq>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d011      	beq.n	80017a2 <rt_powd_snf+0x1ca>
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800178a:	f7ff f967 	bl	8000a5c <__aeabi_dcmpge>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d006      	beq.n	80017a2 <rt_powd_snf+0x1ca>
      y = sqrt(u0);
 8001794:	ed97 0b04 	vldr	d0, [r7, #16]
 8001798:	f00a f9fe 	bl	800bb98 <sqrt>
 800179c:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80017a0:	e025      	b.n	80017ee <rt_powd_snf+0x216>
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017ae:	f7ff f941 	bl	8000a34 <__aeabi_dcmplt>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d012      	beq.n	80017de <rt_powd_snf+0x206>
 80017b8:	ed97 0b02 	vldr	d0, [r7, #8]
 80017bc:	f00a f870 	bl	800b8a0 <floor>
 80017c0:	ec53 2b10 	vmov	r2, r3, d0
 80017c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017c8:	f7ff f952 	bl	8000a70 <__aeabi_dcmpgt>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d005      	beq.n	80017de <rt_powd_snf+0x206>
      y = rtNaN;
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <rt_powd_snf+0x22c>)
 80017d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80017dc:	e007      	b.n	80017ee <rt_powd_snf+0x216>
    } else {
      y = pow(u0, u1);
 80017de:	ed97 1b02 	vldr	d1, [r7, #8]
 80017e2:	ed97 0b04 	vldr	d0, [r7, #16]
 80017e6:	f00a f967 	bl	800bab8 <pow>
 80017ea:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
    }
  }
  return y;
 80017ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80017f6:	eeb0 0a47 	vmov.f32	s0, s14
 80017fa:	eef0 0a67 	vmov.f32	s1, s15
 80017fe:	3730      	adds	r7, #48	; 0x30
 8001800:	46bd      	mov	sp, r7
 8001802:	bdb0      	pop	{r4, r5, r7, pc}
 8001804:	200003a0 	.word	0x200003a0
 8001808:	3ff00000 	.word	0x3ff00000
 800180c:	200003a8 	.word	0x200003a8
 8001810:	3fe00000 	.word	0x3fe00000
 8001814:	00000000 	.word	0x00000000

08001818 <Qubic>:
 * Return Type  : void
 */
void Qubic(double q_k1, double q_k2, double qdot_k1, double qdot_k2, double tf,
           emxArray_real_T *q_position, emxArray_real_T *q_velocity,
           emxArray_real_T *q_acc)
{
 8001818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800181c:	b0a1      	sub	sp, #132	; 0x84
 800181e:	af00      	add	r7, sp, #0
 8001820:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 8001824:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 8001828:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 800182c:	ed87 3b08 	vstr	d3, [r7, #32]
 8001830:	ed87 4b06 	vstr	d4, [r7, #24]
 8001834:	6178      	str	r0, [r7, #20]
 8001836:	6139      	str	r1, [r7, #16]
 8001838:	60fa      	str	r2, [r7, #12]
  double *q_position_data;
  double *q_velocity_data;
  int i;
  int k;
  int q_acc_tmp_tmp;
  q_acc_data = q_acc->data;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	67fb      	str	r3, [r7, #124]	; 0x7c
  delta1 = tf * 100.0;
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	4bac      	ldr	r3, [pc, #688]	; (8001af8 <Qubic+0x2e0>)
 8001846:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800184a:	f7fe fe81 	bl	8000550 <__aeabi_dmul>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  if (!(delta1 >= 0.0)) {
 8001856:	2301      	movs	r3, #1
 8001858:	461e      	mov	r6, r3
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001866:	f7ff f8f9 	bl	8000a5c <__aeabi_dcmpge>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <Qubic+0x5c>
 8001870:	2300      	movs	r3, #0
 8001872:	461e      	mov	r6, r3
 8001874:	b2f3      	uxtb	r3, r6
 8001876:	f083 0301 	eor.w	r3, r3, #1
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	d009      	beq.n	8001894 <Qubic+0x7c>
    q_acc->size[0] = 1;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	601a      	str	r2, [r3, #0]
    q_acc->size[1] = 0;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	3304      	adds	r3, #4
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	e158      	b.n	8001b46 <Qubic+0x32e>
  } else {
    d = floor(delta1);
 8001894:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8001898:	f00a f802 	bl	800b8a0 <floor>
 800189c:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
    i = q_acc->size[0] * q_acc->size[1];
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	6852      	ldr	r2, [r2, #4]
 80018aa:	3204      	adds	r2, #4
 80018ac:	6812      	ldr	r2, [r2, #0]
 80018ae:	fb02 f303 	mul.w	r3, r2, r3
 80018b2:	67bb      	str	r3, [r7, #120]	; 0x78
    q_acc->size[0] = 1;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	601a      	str	r2, [r3, #0]
    q_acc->size[1] = (int)d;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	1d1e      	adds	r6, r3, #4
 80018c2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80018c6:	f7ff f8f3 	bl	8000ab0 <__aeabi_d2iz>
 80018ca:	4603      	mov	r3, r0
 80018cc:	6033      	str	r3, [r6, #0]
    emxEnsureCapacity_real_T(q_acc, i);
 80018ce:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 fb3e 	bl	8001f52 <emxEnsureCapacity_real_T>
    q_acc_data = q_acc->data;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	67fb      	str	r3, [r7, #124]	; 0x7c
    if ((int)d >= 1) {
 80018dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80018e0:	f7ff f8e6 	bl	8000ab0 <__aeabi_d2iz>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f340 812d 	ble.w	8001b46 <Qubic+0x32e>
      q_acc_tmp_tmp = (int)d - 1;
 80018ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80018f0:	f7ff f8de 	bl	8000ab0 <__aeabi_d2iz>
 80018f4:	4603      	mov	r3, r0
 80018f6:	3b01      	subs	r3, #1
 80018f8:	65fb      	str	r3, [r7, #92]	; 0x5c
      q_acc_data[(int)floor(delta1) - 1] = tf;
 80018fa:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 80018fe:	f009 ffcf 	bl	800b8a0 <floor>
 8001902:	ec53 2b10 	vmov	r2, r3, d0
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	f7ff f8d1 	bl	8000ab0 <__aeabi_d2iz>
 800190e:	4603      	mov	r3, r0
 8001910:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001914:	3b01      	subs	r3, #1
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800191a:	18d1      	adds	r1, r2, r3
 800191c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001920:	e9c1 2300 	strd	r2, r3, [r1]
      if (q_acc->size[1] >= 2) {
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	3304      	adds	r3, #4
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b01      	cmp	r3, #1
 800192e:	f340 810a 	ble.w	8001b46 <Qubic+0x32e>
        q_acc_data[0] = 0.0;
 8001932:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	e9c1 2300 	strd	r2, r3, [r1]
        if (q_acc->size[1] >= 3) {
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	3304      	adds	r3, #4
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b02      	cmp	r3, #2
 800194a:	f340 80fc 	ble.w	8001b46 <Qubic+0x32e>
          if (-tf == 0.0) {
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800195a:	f7ff f861 	bl	8000a20 <__aeabi_dcmpeq>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d051      	beq.n	8001a08 <Qubic+0x1f0>
            delta1 = tf / ((double)q_acc->size[1] - 1.0);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	3304      	adds	r3, #4
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fd85 	bl	800047c <__aeabi_i2d>
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	4b61      	ldr	r3, [pc, #388]	; (8001afc <Qubic+0x2e4>)
 8001978:	f7fe fc32 	bl	80001e0 <__aeabi_dsub>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001984:	f7fe ff0e 	bl	80007a4 <__aeabi_ddiv>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            for (k = 2; k <= q_acc_tmp_tmp; k++) {
 8001990:	2302      	movs	r3, #2
 8001992:	677b      	str	r3, [r7, #116]	; 0x74
 8001994:	e01c      	b.n	80019d0 <Qubic+0x1b8>
              q_acc_data[k - 1] =
                  (double)(((k << 1) - q_acc->size[1]) - 1) * delta1;
 8001996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001998:	005a      	lsls	r2, r3, #1
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	3304      	adds	r3, #4
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	3b01      	subs	r3, #1
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fd68 	bl	800047c <__aeabi_i2d>
              q_acc_data[k - 1] =
 80019ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019ae:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80019b2:	3b01      	subs	r3, #1
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80019b8:	18d6      	adds	r6, r2, r3
                  (double)(((k << 1) - q_acc->size[1]) - 1) * delta1;
 80019ba:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80019be:	f7fe fdc7 	bl	8000550 <__aeabi_dmul>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
              q_acc_data[k - 1] =
 80019c6:	e9c6 2300 	strd	r2, r3, [r6]
            for (k = 2; k <= q_acc_tmp_tmp; k++) {
 80019ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019cc:	3301      	adds	r3, #1
 80019ce:	677b      	str	r3, [r7, #116]	; 0x74
 80019d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80019d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019d4:	429a      	cmp	r2, r3
 80019d6:	ddde      	ble.n	8001996 <Qubic+0x17e>
            }
            if ((q_acc->size[1] & 1) == 1) {
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	3304      	adds	r3, #4
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80ae 	beq.w	8001b46 <Qubic+0x32e>
              q_acc_data[q_acc->size[1] >> 1] = 0.0;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	3304      	adds	r3, #4
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	105b      	asrs	r3, r3, #1
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80019f8:	18d1      	adds	r1, r2, r3
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	e9c1 2300 	strd	r2, r3, [r1]
 8001a06:	e09e      	b.n	8001b46 <Qubic+0x32e>
            }
          } else if ((tf < 0.0) && (fabs(tf) > 8.9884656743115785E+307)) {
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a14:	f7ff f80e 	bl	8000a34 <__aeabi_dcmplt>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d04e      	beq.n	8001abc <Qubic+0x2a4>
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2e:	4b34      	ldr	r3, [pc, #208]	; (8001b00 <Qubic+0x2e8>)
 8001a30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a34:	f7ff f81c 	bl	8000a70 <__aeabi_dcmpgt>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d03e      	beq.n	8001abc <Qubic+0x2a4>
            delta1 = tf / ((double)q_acc->size[1] - 1.0);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	3304      	adds	r3, #4
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fd18 	bl	800047c <__aeabi_i2d>
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <Qubic+0x2e4>)
 8001a52:	f7fe fbc5 	bl	80001e0 <__aeabi_dsub>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a5e:	f7fe fea1 	bl	80007a4 <__aeabi_ddiv>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            i = q_acc->size[1];
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	67bb      	str	r3, [r7, #120]	; 0x78
            for (k = 0; k <= i - 3; k++) {
 8001a72:	2300      	movs	r3, #0
 8001a74:	677b      	str	r3, [r7, #116]	; 0x74
 8001a76:	e01b      	b.n	8001ab0 <Qubic+0x298>
              q_acc_data[k + 1] = delta1 * ((double)k + 1.0);
 8001a78:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001a7a:	f7fe fcff 	bl	800047c <__aeabi_i2d>
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <Qubic+0x2e4>)
 8001a84:	f7fe fbae 	bl	80001e4 <__adddf3>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a92:	3301      	adds	r3, #1
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a98:	18d6      	adds	r6, r2, r3
 8001a9a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001a9e:	f7fe fd57 	bl	8000550 <__aeabi_dmul>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	e9c6 2300 	strd	r2, r3, [r6]
            for (k = 0; k <= i - 3; k++) {
 8001aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001aac:	3301      	adds	r3, #1
 8001aae:	677b      	str	r3, [r7, #116]	; 0x74
 8001ab0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ab2:	3b02      	subs	r3, #2
 8001ab4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	dbde      	blt.n	8001a78 <Qubic+0x260>
          } else if ((tf < 0.0) && (fabs(tf) > 8.9884656743115785E+307)) {
 8001aba:	e044      	b.n	8001b46 <Qubic+0x32e>
            }
          } else {
            delta1 = tf / ((double)q_acc->size[1] - 1.0);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fcd9 	bl	800047c <__aeabi_i2d>
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <Qubic+0x2e4>)
 8001ad0:	f7fe fb86 	bl	80001e0 <__aeabi_dsub>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001adc:	f7fe fe62 	bl	80007a4 <__aeabi_ddiv>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            i = q_acc->size[1];
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	67bb      	str	r3, [r7, #120]	; 0x78
            for (k = 0; k <= i - 3; k++) {
 8001af0:	2300      	movs	r3, #0
 8001af2:	677b      	str	r3, [r7, #116]	; 0x74
 8001af4:	e022      	b.n	8001b3c <Qubic+0x324>
 8001af6:	bf00      	nop
 8001af8:	40590000 	.word	0x40590000
 8001afc:	3ff00000 	.word	0x3ff00000
 8001b00:	7fdfffff 	.word	0x7fdfffff
              q_acc_data[k + 1] = ((double)k + 1.0) * delta1;
 8001b04:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001b06:	f7fe fcb9 	bl	800047c <__aeabi_i2d>
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	4b6e      	ldr	r3, [pc, #440]	; (8001cc8 <Qubic+0x4b0>)
 8001b10:	f7fe fb68 	bl	80001e4 <__adddf3>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b1e:	3301      	adds	r3, #1
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001b24:	18d6      	adds	r6, r2, r3
 8001b26:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001b2a:	f7fe fd11 	bl	8000550 <__aeabi_dmul>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	e9c6 2300 	strd	r2, r3, [r6]
            for (k = 0; k <= i - 3; k++) {
 8001b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b38:	3301      	adds	r3, #1
 8001b3a:	677b      	str	r3, [r7, #116]	; 0x74
 8001b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b3e:	3b02      	subs	r3, #2
 8001b40:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001b42:	429a      	cmp	r2, r3
 8001b44:	dbde      	blt.n	8001b04 <Qubic+0x2ec>
          }
        }
      }
    }
  }
  delta1 = q_k2 - q_k1;
 8001b46:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001b4a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001b4e:	f7fe fb47 	bl	80001e0 <__aeabi_dsub>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  C2_tmp = tf * tf;
 8001b5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b62:	f7fe fcf5 	bl	8000550 <__aeabi_dmul>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  C2 = 3.0 * (delta1 / C2_tmp) + (-qdot_k2 - 2.0 * qdot_k1) / tf;
 8001b6e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001b72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001b76:	f7fe fe15 	bl	80007a4 <__aeabi_ddiv>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	4b51      	ldr	r3, [pc, #324]	; (8001ccc <Qubic+0x4b4>)
 8001b88:	f7fe fce2 	bl	8000550 <__aeabi_dmul>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4690      	mov	r8, r2
 8001b92:	4699      	mov	r9, r3
 8001b94:	6a3c      	ldr	r4, [r7, #32]
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b9c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	f7fe fb1e 	bl	80001e4 <__adddf3>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4620      	mov	r0, r4
 8001bae:	4629      	mov	r1, r5
 8001bb0:	f7fe fb16 	bl	80001e0 <__aeabi_dsub>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bc0:	f7fe fdf0 	bl	80007a4 <__aeabi_ddiv>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4640      	mov	r0, r8
 8001bca:	4649      	mov	r1, r9
 8001bcc:	f7fe fb0a 	bl	80001e4 <__adddf3>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  delta1 =
      -2.0 * (delta1 / rt_powd_snf(tf, 3.0)) + (qdot_k2 + qdot_k1) / C2_tmp;
 8001bd8:	ed9f 1b39 	vldr	d1, [pc, #228]	; 8001cc0 <Qubic+0x4a8>
 8001bdc:	ed97 0b06 	vldr	d0, [r7, #24]
 8001be0:	f7ff fcfa 	bl	80015d8 <rt_powd_snf>
 8001be4:	ec53 2b10 	vmov	r2, r3, d0
 8001be8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001bec:	f7fe fdda 	bl	80007a4 <__aeabi_ddiv>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001c00:	f7fe fca6 	bl	8000550 <__aeabi_dmul>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4614      	mov	r4, r2
 8001c0a:	461d      	mov	r5, r3
 8001c0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c10:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c14:	f7fe fae6 	bl	80001e4 <__adddf3>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c24:	f7fe fdbe 	bl	80007a4 <__aeabi_ddiv>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
  delta1 =
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	4629      	mov	r1, r5
 8001c30:	f7fe fad8 	bl	80001e4 <__adddf3>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  i = q_velocity->size[0] * q_velocity->size[1];
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	6852      	ldr	r2, [r2, #4]
 8001c46:	3204      	adds	r2, #4
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	fb02 f303 	mul.w	r3, r2, r3
 8001c4e:	67bb      	str	r3, [r7, #120]	; 0x78
  q_velocity->size[0] = 1;
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
  q_velocity->size[1] = q_acc->size[1];
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	3304      	adds	r3, #4
 8001c62:	6852      	ldr	r2, [r2, #4]
 8001c64:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_velocity, i);
 8001c66:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001c68:	6938      	ldr	r0, [r7, #16]
 8001c6a:	f000 f972 	bl	8001f52 <emxEnsureCapacity_real_T>
  q_velocity_data = q_velocity->data;
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	647b      	str	r3, [r7, #68]	; 0x44
  q_acc_tmp_tmp = q_acc->size[1];
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  i = q_position->size[0] * q_position->size[1];
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	6852      	ldr	r2, [r2, #4]
 8001c86:	3204      	adds	r2, #4
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	fb02 f303 	mul.w	r3, r2, r3
 8001c8e:	67bb      	str	r3, [r7, #120]	; 0x78
  q_position->size[0] = 1;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
  q_position->size[1] = q_acc->size[1];
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	6852      	ldr	r2, [r2, #4]
 8001ca4:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_position, i);
 8001ca6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001ca8:	6978      	ldr	r0, [r7, #20]
 8001caa:	f000 f952 	bl	8001f52 <emxEnsureCapacity_real_T>
  q_position_data = q_position->data;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	643b      	str	r3, [r7, #64]	; 0x40
  for (i = 0; i < q_acc_tmp_tmp; i++) {
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	67bb      	str	r3, [r7, #120]	; 0x78
 8001cb8:	e067      	b.n	8001d8a <Qubic+0x572>
 8001cba:	bf00      	nop
 8001cbc:	f3af 8000 	nop.w
 8001cc0:	00000000 	.word	0x00000000
 8001cc4:	40080000 	.word	0x40080000
 8001cc8:	3ff00000 	.word	0x3ff00000
 8001ccc:	40080000 	.word	0x40080000
    d = q_acc_data[i];
 8001cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001cd6:	4413      	add	r3, r2
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    C2_tmp = d * d;
 8001ce0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ce4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001ce8:	f7fe fc32 	bl	8000550 <__aeabi_dmul>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    q_velocity_data[i] = C2_tmp;
 8001cf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001cfa:	18d1      	adds	r1, r2, r3
 8001cfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d00:	e9c1 2300 	strd	r2, r3, [r1]
    q_position_data[i] =
        ((q_k1 + qdot_k1 * d) + C2 * C2_tmp) + delta1 * rt_powd_snf(d, 3.0);
 8001d04:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001d08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d0c:	f7fe fc20 	bl	8000550 <__aeabi_dmul>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d1c:	f7fe fa62 	bl	80001e4 <__adddf3>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4614      	mov	r4, r2
 8001d26:	461d      	mov	r5, r3
 8001d28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d2c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001d30:	f7fe fc0e 	bl	8000550 <__aeabi_dmul>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4620      	mov	r0, r4
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	f7fe fa52 	bl	80001e4 <__adddf3>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4690      	mov	r8, r2
 8001d46:	4699      	mov	r9, r3
 8001d48:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8001f10 <Qubic+0x6f8>
 8001d4c:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001d50:	f7ff fc42 	bl	80015d8 <rt_powd_snf>
 8001d54:	ec51 0b10 	vmov	r0, r1, d0
 8001d58:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d5c:	f7fe fbf8 	bl	8000550 <__aeabi_dmul>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
    q_position_data[i] =
 8001d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d6e:	18d4      	adds	r4, r2, r3
        ((q_k1 + qdot_k1 * d) + C2 * C2_tmp) + delta1 * rt_powd_snf(d, 3.0);
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4640      	mov	r0, r8
 8001d76:	4649      	mov	r1, r9
 8001d78:	f7fe fa34 	bl	80001e4 <__adddf3>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
    q_position_data[i] =
 8001d80:	e9c4 2300 	strd	r2, r3, [r4]
  for (i = 0; i < q_acc_tmp_tmp; i++) {
 8001d84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d86:	3301      	adds	r3, #1
 8001d88:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d8a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001d8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	db9e      	blt.n	8001cd0 <Qubic+0x4b8>
  }
  i = q_velocity->size[0] * q_velocity->size[1];
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	6852      	ldr	r2, [r2, #4]
 8001d9c:	3204      	adds	r2, #4
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	fb02 f303 	mul.w	r3, r2, r3
 8001da4:	67bb      	str	r3, [r7, #120]	; 0x78
  q_velocity->size[0] = 1;
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	601a      	str	r2, [r3, #0]
  q_velocity->size[1] = q_acc->size[1];
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	3304      	adds	r3, #4
 8001db8:	6852      	ldr	r2, [r2, #4]
 8001dba:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_velocity, i);
 8001dbc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001dbe:	6938      	ldr	r0, [r7, #16]
 8001dc0:	f000 f8c7 	bl	8001f52 <emxEnsureCapacity_real_T>
  q_velocity_data = q_velocity->data;
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	647b      	str	r3, [r7, #68]	; 0x44
  d = 2.0 * C2;
 8001dca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	f7fe fa07 	bl	80001e4 <__adddf3>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  C2_tmp = 3.0 * delta1;
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	4b4d      	ldr	r3, [pc, #308]	; (8001f18 <Qubic+0x700>)
 8001de4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001de8:	f7fe fbb2 	bl	8000550 <__aeabi_dmul>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  q_acc_tmp_tmp = q_acc->size[1] - 1;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001e00:	2300      	movs	r3, #0
 8001e02:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e04:	e034      	b.n	8001e70 <Qubic+0x658>
    q_velocity_data[i] =
        (qdot_k1 + d * q_acc_data[i]) + C2_tmp * q_velocity_data[i];
 8001e06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001e0c:	4413      	add	r3, r2
 8001e0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e12:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001e16:	f7fe fb9b 	bl	8000550 <__aeabi_dmul>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4610      	mov	r0, r2
 8001e20:	4619      	mov	r1, r3
 8001e22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e26:	f7fe f9dd 	bl	80001e4 <__adddf3>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4690      	mov	r8, r2
 8001e30:	4699      	mov	r9, r3
 8001e32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e38:	4413      	add	r3, r2
 8001e3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e3e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e42:	f7fe fb85 	bl	8000550 <__aeabi_dmul>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	4619      	mov	r1, r3
    q_velocity_data[i] =
 8001e4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e54:	18d4      	adds	r4, r2, r3
        (qdot_k1 + d * q_acc_data[i]) + C2_tmp * q_velocity_data[i];
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4640      	mov	r0, r8
 8001e5c:	4649      	mov	r1, r9
 8001e5e:	f7fe f9c1 	bl	80001e4 <__adddf3>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
    q_velocity_data[i] =
 8001e66:	e9c4 2300 	strd	r2, r3, [r4]
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001e6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e74:	429a      	cmp	r2, r3
 8001e76:	ddc6      	ble.n	8001e06 <Qubic+0x5ee>
  }
  i = q_acc->size[0] * q_acc->size[1];
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	6852      	ldr	r2, [r2, #4]
 8001e82:	3204      	adds	r2, #4
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	fb02 f303 	mul.w	r3, r2, r3
 8001e8a:	67bb      	str	r3, [r7, #120]	; 0x78
  q_acc->size[0] = 1;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_acc, i);
 8001e94:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 f85b 	bl	8001f52 <emxEnsureCapacity_real_T>
  q_acc_data = q_acc->data;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	67fb      	str	r3, [r7, #124]	; 0x7c
  C2_tmp = 6.0 * delta1;
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <Qubic+0x704>)
 8001ea8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001eac:	f7fe fb50 	bl	8000550 <__aeabi_dmul>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001eb8:	2300      	movs	r3, #0
 8001eba:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ebc:	e01c      	b.n	8001ef8 <Qubic+0x6e0>
    q_acc_data[i] = d + C2_tmp * q_acc_data[i];
 8001ebe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ec4:	4413      	add	r3, r2
 8001ec6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ece:	f7fe fb3f 	bl	8000550 <__aeabi_dmul>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	4619      	mov	r1, r3
 8001eda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ee0:	18d4      	adds	r4, r2, r3
 8001ee2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ee6:	f7fe f97d 	bl	80001e4 <__adddf3>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	e9c4 2300 	strd	r2, r3, [r4]
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ef8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001efc:	429a      	cmp	r2, r3
 8001efe:	ddde      	ble.n	8001ebe <Qubic+0x6a6>
  }
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	3784      	adds	r7, #132	; 0x84
 8001f06:	46bd      	mov	sp, r7
 8001f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f0c:	f3af 8000 	nop.w
 8001f10:	00000000 	.word	0x00000000
 8001f14:	40080000 	.word	0x40080000
 8001f18:	40080000 	.word	0x40080000
 8001f1c:	40180000 	.word	0x40180000

08001f20 <emxDestroyArray_real_T>:
/*
 * Arguments    : emxArray_real_T *emxArray
 * Return Type  : void
 */
void emxDestroyArray_real_T(emxArray_real_T *emxArray)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  emxFree_real_T(&emxArray);
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 f878 	bl	8002020 <emxFree_real_T>
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <emxInitArray_real_T>:
 * Arguments    : emxArray_real_T **pEmxArray
 *                int numDimensions
 * Return Type  : void
 */
void emxInitArray_real_T(emxArray_real_T **pEmxArray, int numDimensions)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  emxInit_real_T(pEmxArray, numDimensions);
 8001f42:	6839      	ldr	r1, [r7, #0]
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f895 	bl	8002074 <emxInit_real_T>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <emxEnsureCapacity_real_T>:
 * Arguments    : emxArray_real_T *emxArray
 *                int oldNumel
 * Return Type  : void
 */
void emxEnsureCapacity_real_T(emxArray_real_T *emxArray, int oldNumel)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
  int i;
  int newNumel;
  void *newData;
  if (oldNumel < 0) {
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	da01      	bge.n	8001f66 <emxEnsureCapacity_real_T+0x14>
    oldNumel = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	603b      	str	r3, [r7, #0]
  }
  newNumel = 1;
 8001f66:	2301      	movs	r3, #1
 8001f68:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	e00c      	b.n	8001f8a <emxEnsureCapacity_real_T+0x38>
    newNumel *= emxArray->size[i];
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	fb02 f303 	mul.w	r3, r2, r3
 8001f82:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	3301      	adds	r3, #1
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	dbed      	blt.n	8001f70 <emxEnsureCapacity_real_T+0x1e>
  }
  if (newNumel > emxArray->allocatedSize) {
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	dd3c      	ble.n	8002018 <emxEnsureCapacity_real_T+0xc6>
    i = emxArray->allocatedSize;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	617b      	str	r3, [r7, #20]
    if (i < 16) {
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2b0f      	cmp	r3, #15
 8001fa8:	dc0d      	bgt.n	8001fc6 <emxEnsureCapacity_real_T+0x74>
      i = 16;
 8001faa:	2310      	movs	r3, #16
 8001fac:	617b      	str	r3, [r7, #20]
    }
    while (i < newNumel) {
 8001fae:	e00a      	b.n	8001fc6 <emxEnsureCapacity_real_T+0x74>
      if (i > 1073741823) {
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb6:	db03      	blt.n	8001fc0 <emxEnsureCapacity_real_T+0x6e>
        i = MAX_int32_T;
 8001fb8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	e002      	b.n	8001fc6 <emxEnsureCapacity_real_T+0x74>
      } else {
        i *= 2;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	617b      	str	r3, [r7, #20]
    while (i < newNumel) {
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	dbf0      	blt.n	8001fb0 <emxEnsureCapacity_real_T+0x5e>
      }
    }
    newData = calloc((unsigned int)i, sizeof(double));
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2108      	movs	r1, #8
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f009 faa4 	bl	800b520 <calloc>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	60fb      	str	r3, [r7, #12]
    if (emxArray->data != NULL) {
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d010      	beq.n	8002006 <emxEnsureCapacity_real_T+0xb4>
      memcpy(newData, emxArray->data, sizeof(double) * (unsigned int)oldNumel);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6819      	ldr	r1, [r3, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	461a      	mov	r2, r3
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f009 fad8 	bl	800b5a4 <memcpy>
      if (emxArray->canFreeData) {
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	7c1b      	ldrb	r3, [r3, #16]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d004      	beq.n	8002006 <emxEnsureCapacity_real_T+0xb4>
        free(emxArray->data);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f009 fac7 	bl	800b594 <free>
      }
    }
    emxArray->data = (double *)newData;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	601a      	str	r2, [r3, #0]
    emxArray->allocatedSize = i;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	609a      	str	r2, [r3, #8]
    emxArray->canFreeData = true;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	741a      	strb	r2, [r3, #16]
  }
}
 8002018:	bf00      	nop
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <emxFree_real_T>:
/*
 * Arguments    : emxArray_real_T **pEmxArray
 * Return Type  : void
 */
void emxFree_real_T(emxArray_real_T **pEmxArray)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  if (*pEmxArray != (emxArray_real_T *)NULL) {
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d01d      	beq.n	800206c <emxFree_real_T+0x4c>
    if (((*pEmxArray)->data != (double *)NULL) && (*pEmxArray)->canFreeData) {
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <emxFree_real_T+0x30>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	7c1b      	ldrb	r3, [r3, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <emxFree_real_T+0x30>
      free((*pEmxArray)->data);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f009 faa2 	bl	800b594 <free>
    }
    free((*pEmxArray)->size);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	4618      	mov	r0, r3
 8002058:	f009 fa9c 	bl	800b594 <free>
    free(*pEmxArray);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f009 fa97 	bl	800b594 <free>
    *pEmxArray = (emxArray_real_T *)NULL;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
  }
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <emxInit_real_T>:
 * Arguments    : emxArray_real_T **pEmxArray
 *                int numDimensions
 * Return Type  : void
 */
void emxInit_real_T(emxArray_real_T **pEmxArray, int numDimensions)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  emxArray_real_T *emxArray;
  int i;
  *pEmxArray = (emxArray_real_T *)malloc(sizeof(emxArray_real_T));
 800207e:	2014      	movs	r0, #20
 8002080:	f009 fa80 	bl	800b584 <malloc>
 8002084:	4603      	mov	r3, r0
 8002086:	461a      	mov	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	601a      	str	r2, [r3, #0]
  emxArray = *pEmxArray;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	60bb      	str	r3, [r7, #8]
  emxArray->data = (double *)NULL;
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
  emxArray->numDimensions = numDimensions;
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	60da      	str	r2, [r3, #12]
  emxArray->size = (int *)malloc(sizeof(int) * (unsigned int)numDimensions);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f009 fa6e 	bl	800b584 <malloc>
 80020a8:	4603      	mov	r3, r0
 80020aa:	461a      	mov	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	605a      	str	r2, [r3, #4]
  emxArray->allocatedSize = 0;
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  emxArray->canFreeData = true;
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2201      	movs	r2, #1
 80020ba:	741a      	strb	r2, [r3, #16]
  for (i = 0; i < numDimensions; i++) {
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	e009      	b.n	80020d6 <emxInit_real_T+0x62>
    emxArray->size[i] = 0;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
  for (i = 0; i < numDimensions; i++) {
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	3301      	adds	r3, #1
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	dbf1      	blt.n	80020c2 <emxInit_real_T+0x4e>
  }
}
 80020de:	bf00      	nop
 80020e0:	bf00      	nop
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80020ec:	f3bf 8f4f 	dsb	sy
}
 80020f0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <__NVIC_SystemReset+0x24>)
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80020fa:	4904      	ldr	r1, [pc, #16]	; (800210c <__NVIC_SystemReset+0x24>)
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <__NVIC_SystemReset+0x28>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002102:	f3bf 8f4f 	dsb	sy
}
 8002106:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002108:	bf00      	nop
 800210a:	e7fd      	b.n	8002108 <__NVIC_SystemReset+0x20>
 800210c:	e000ed00 	.word	0xe000ed00
 8002110:	05fa0004 	.word	0x05fa0004

08002114 <argInit_real_T>:
/* Function Definitions */
/*
 * Arguments    : void
 * Return Type  : double
 */
static double argInit_real_T(void) {
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
	return 0.0;
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	f04f 0300 	mov.w	r3, #0
 8002120:	ec43 2b17 	vmov	d7, r2, r3
}
 8002124:	eeb0 0a47 	vmov.f32	s0, s14
 8002128:	eef0 0a67 	vmov.f32	s1, s15
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	0000      	movs	r0, r0
	...

08002138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002140:	f003 fab2 	bl	80056a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002144:	f000 faf8 	bl	8002738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002148:	f000 fe24 	bl	8002d94 <MX_GPIO_Init>
  MX_DMA_Init();
 800214c:	f000 fdec 	bl	8002d28 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002150:	f000 fdbe 	bl	8002cd0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002154:	f000 fc02 	bl	800295c <MX_TIM2_Init>
  MX_TIM5_Init();
 8002158:	f000 fd18 	bl	8002b8c <MX_TIM5_Init>
  MX_ADC1_Init();
 800215c:	f000 fb54 	bl	8002808 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002160:	f000 fbce 	bl	8002900 <MX_I2C1_Init>
  MX_TIM11_Init();
 8002164:	f000 fd60 	bl	8002c28 <MX_TIM11_Init>
  MX_TIM4_Init();
 8002168:	f000 fc9a 	bl	8002aa0 <MX_TIM4_Init>
  MX_TIM3_Init();
 800216c:	f000 fc4a 	bl	8002a04 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	start_p = 0;
 8002170:	4b24      	ldr	r3, [pc, #144]	; (8002204 <main+0xcc>)
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
	stop_p = 15;
 8002178:	4b23      	ldr	r3, [pc, #140]	; (8002208 <main+0xd0>)
 800217a:	4a24      	ldr	r2, [pc, #144]	; (800220c <main+0xd4>)
 800217c:	601a      	str	r2, [r3, #0]
	start_v = 0;
 800217e:	4b24      	ldr	r3, [pc, #144]	; (8002210 <main+0xd8>)
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
	stop_v = 0;
 8002186:	4b23      	ldr	r3, [pc, #140]	; (8002214 <main+0xdc>)
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
	timecycle = 2;
 800218e:	4b22      	ldr	r3, [pc, #136]	; (8002218 <main+0xe0>)
 8002190:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002194:	601a      	str	r2, [r3, #0]
	transformRectangleAndPointsPlace();
 8002196:	f001 fa01 	bl	800359c <transformRectangleAndPointsPlace>
	HAL_ADC_Start_DMA(&hadc1, Joystick_AND_Sensor, 4);
 800219a:	2204      	movs	r2, #4
 800219c:	491f      	ldr	r1, [pc, #124]	; (800221c <main+0xe4>)
 800219e:	4820      	ldr	r0, [pc, #128]	; (8002220 <main+0xe8>)
 80021a0:	f003 fb38 	bl	8005814 <HAL_ADC_Start_DMA>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80021a4:	2104      	movs	r1, #4
 80021a6:	481f      	ldr	r0, [pc, #124]	; (8002224 <main+0xec>)
 80021a8:	f006 fe30 	bl	8008e0c <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80021ac:	2100      	movs	r1, #0
 80021ae:	481e      	ldr	r0, [pc, #120]	; (8002228 <main+0xf0>)
 80021b0:	f006 fbfa 	bl	80089a8 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim5);
 80021b4:	481d      	ldr	r0, [pc, #116]	; (800222c <main+0xf4>)
 80021b6:	f006 fa6f 	bl	8008698 <HAL_TIM_Base_Start>
	hmodbus.huart = &huart2;
 80021ba:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <main+0xf8>)
 80021bc:	4a1d      	ldr	r2, [pc, #116]	; (8002234 <main+0xfc>)
 80021be:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim11;
 80021c0:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <main+0xf8>)
 80021c2:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <main+0x100>)
 80021c4:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 80021c6:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <main+0xf8>)
 80021c8:	2215      	movs	r2, #21
 80021ca:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 70;
 80021cc:	4b18      	ldr	r3, [pc, #96]	; (8002230 <main+0xf8>)
 80021ce:	2246      	movs	r2, #70	; 0x46
 80021d0:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 80021d2:	491a      	ldr	r1, [pc, #104]	; (800223c <main+0x104>)
 80021d4:	4816      	ldr	r0, [pc, #88]	; (8002230 <main+0xf8>)
 80021d6:	f7fe fef5 	bl	8000fc4 <Modbus_init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  limitsensor();
 80021da:	f000 ff25 	bl	8003028 <limitsensor>
		if (starttray == 1) {
 80021de:	4b18      	ldr	r3, [pc, #96]	; (8002240 <main+0x108>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d104      	bne.n	80021f0 <main+0xb8>
			starttray = 0;
 80021e6:	4b16      	ldr	r3, [pc, #88]	; (8002240 <main+0x108>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
			transformRectangleAndPointsPlace();
 80021ec:	f001 f9d6 	bl	800359c <transformRectangleAndPointsPlace>
		}
		Modbus_Protocal_Worker();
 80021f0:	f7fe ff74 	bl	80010dc <Modbus_Protocal_Worker>
		flowmodbus();
 80021f4:	f001 fcb8 	bl	8003b68 <flowmodbus>

		if (SoftReset == 1) {
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <main+0x10c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d123      	bne.n	8002248 <main+0x110>
			NVIC_SystemReset();
 8002200:	f7ff ff72 	bl	80020e8 <__NVIC_SystemReset>
 8002204:	200009c8 	.word	0x200009c8
 8002208:	200009cc 	.word	0x200009cc
 800220c:	41700000 	.word	0x41700000
 8002210:	200009d0 	.word	0x200009d0
 8002214:	200009d4 	.word	0x200009d4
 8002218:	200009d8 	.word	0x200009d8
 800221c:	200012c4 	.word	0x200012c4
 8002220:	20000440 	.word	0x20000440
 8002224:	2000053c 	.word	0x2000053c
 8002228:	200006a4 	.word	0x200006a4
 800222c:	20000758 	.word	0x20000758
 8002230:	20000d44 	.word	0x20000d44
 8002234:	200008c0 	.word	0x200008c0
 8002238:	2000080c 	.word	0x2000080c
 800223c:	2000121c 	.word	0x2000121c
 8002240:	200009c5 	.word	0x200009c5
 8002244:	200012a8 	.word	0x200012a8
//		      if(HAL_GetTick() >= timestamp_I2C){
//		          I2C_all(&data_read);
//		          timestamp_I2C = HAL_GetTick()+ 20;
//		      }

		if (HAL_GetTick() >= timemodbus) { // heartbeat
 8002248:	f003 fa94 	bl	8005774 <HAL_GetTick>
 800224c:	4603      	mov	r3, r0
 800224e:	2200      	movs	r2, #0
 8002250:	461c      	mov	r4, r3
 8002252:	4615      	mov	r5, r2
 8002254:	4bb8      	ldr	r3, [pc, #736]	; (8002538 <main+0x400>)
 8002256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225a:	4294      	cmp	r4, r2
 800225c:	eb75 0303 	sbcs.w	r3, r5, r3
 8002260:	d343      	bcc.n	80022ea <main+0x1b2>
			timemodbus = HAL_GetTick() + 0.5;
 8002262:	f003 fa87 	bl	8005774 <HAL_GetTick>
 8002266:	4603      	mov	r3, r0
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe f8f7 	bl	800045c <__aeabi_ui2d>
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	4bb2      	ldr	r3, [pc, #712]	; (800253c <main+0x404>)
 8002274:	f7fd ffb6 	bl	80001e4 <__adddf3>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	f7fe fca6 	bl	8000bd0 <__aeabi_d2ulz>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	49ab      	ldr	r1, [pc, #684]	; (8002538 <main+0x400>)
 800228a:	e9c1 2300 	strd	r2, r3, [r1]
			registerFrame[0].U16 = 22881;
 800228e:	4bac      	ldr	r3, [pc, #688]	; (8002540 <main+0x408>)
 8002290:	f645 1261 	movw	r2, #22881	; 0x5961
 8002294:	801a      	strh	r2, [r3, #0]
			registerFrame[17].U16 = (int) (ReadDegree - 350) * 10;
 8002296:	4bab      	ldr	r3, [pc, #684]	; (8002544 <main+0x40c>)
 8002298:	edd3 7a00 	vldr	s15, [r3]
 800229c:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8002548 <main+0x410>
 80022a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022a8:	ee17 3a90 	vmov	r3, s15
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	0092      	lsls	r2, r2, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	4ba1      	ldr	r3, [pc, #644]	; (8002540 <main+0x408>)
 80022ba:	845a      	strh	r2, [r3, #34]	; 0x22
			registerFrame[18].U16 = abs(speed);
 80022bc:	4ba3      	ldr	r3, [pc, #652]	; (800254c <main+0x414>)
 80022be:	edd3 7a00 	vldr	s15, [r3]
 80022c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022c6:	ee17 3a90 	vmov	r3, s15
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	bfb8      	it	lt
 80022ce:	425b      	neglt	r3, r3
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	4b9b      	ldr	r3, [pc, #620]	; (8002540 <main+0x408>)
 80022d4:	849a      	strh	r2, [r3, #36]	; 0x24
			registerFrame[19].U16 = acceleration;
 80022d6:	4b9e      	ldr	r3, [pc, #632]	; (8002550 <main+0x418>)
 80022d8:	edd3 7a00 	vldr	s15, [r3]
 80022dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022e0:	ee17 3a90 	vmov	r3, s15
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	4b96      	ldr	r3, [pc, #600]	; (8002540 <main+0x408>)
 80022e8:	84da      	strh	r2, [r3, #38]	; 0x26
		}
		if (HAL_GetTick() >= timestampTrajact) {
 80022ea:	f003 fa43 	bl	8005774 <HAL_GetTick>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2200      	movs	r2, #0
 80022f2:	4698      	mov	r8, r3
 80022f4:	4691      	mov	r9, r2
 80022f6:	4b97      	ldr	r3, [pc, #604]	; (8002554 <main+0x41c>)
 80022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fc:	4590      	cmp	r8, r2
 80022fe:	eb79 0303 	sbcs.w	r3, r9, r3
 8002302:	d34e      	bcc.n	80023a2 <main+0x26a>
			timestampTrajact = HAL_GetTick() + 10;
 8002304:	f003 fa36 	bl	8005774 <HAL_GetTick>
 8002308:	4603      	mov	r3, r0
 800230a:	330a      	adds	r3, #10
 800230c:	2200      	movs	r2, #0
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	60fa      	str	r2, [r7, #12]
 8002312:	4b90      	ldr	r3, [pc, #576]	; (8002554 <main+0x41c>)
 8002314:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002318:	e9c3 1200 	strd	r1, r2, [r3]
			if (indexposition < (timecycle * 100) && path == 1) {
 800231c:	4b8e      	ldr	r3, [pc, #568]	; (8002558 <main+0x420>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	ee07 3a90 	vmov	s15, r3
 8002324:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002328:	4b8c      	ldr	r3, [pc, #560]	; (800255c <main+0x424>)
 800232a:	edd3 7a00 	vldr	s15, [r3]
 800232e:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8002560 <main+0x428>
 8002332:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002336:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800233a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233e:	d530      	bpl.n	80023a2 <main+0x26a>
 8002340:	4b88      	ldr	r3, [pc, #544]	; (8002564 <main+0x42c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d12c      	bne.n	80023a2 <main+0x26a>
				positionTraject = q_positionN->data[indexposition];
 8002348:	4b87      	ldr	r3, [pc, #540]	; (8002568 <main+0x430>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	4b82      	ldr	r3, [pc, #520]	; (8002558 <main+0x420>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4413      	add	r3, r2
 8002356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235a:	4610      	mov	r0, r2
 800235c:	4619      	mov	r1, r3
 800235e:	f7fe fbcf 	bl	8000b00 <__aeabi_d2f>
 8002362:	4603      	mov	r3, r0
 8002364:	4a81      	ldr	r2, [pc, #516]	; (800256c <main+0x434>)
 8002366:	6013      	str	r3, [r2, #0]
				velocityTraject = q_velocityN->data[indexposition];
 8002368:	4b81      	ldr	r3, [pc, #516]	; (8002570 <main+0x438>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	4b7a      	ldr	r3, [pc, #488]	; (8002558 <main+0x420>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4413      	add	r3, r2
 8002376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237a:	4610      	mov	r0, r2
 800237c:	4619      	mov	r1, r3
 800237e:	f7fe fbbf 	bl	8000b00 <__aeabi_d2f>
 8002382:	4603      	mov	r3, r0
 8002384:	4a7b      	ldr	r2, [pc, #492]	; (8002574 <main+0x43c>)
 8002386:	6013      	str	r3, [r2, #0]
				SetDegree = positionTraject;
 8002388:	4b78      	ldr	r3, [pc, #480]	; (800256c <main+0x434>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a7a      	ldr	r2, [pc, #488]	; (8002578 <main+0x440>)
 800238e:	6013      	str	r3, [r2, #0]
				SetVelocity = velocityTraject;
 8002390:	4b78      	ldr	r3, [pc, #480]	; (8002574 <main+0x43c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a79      	ldr	r2, [pc, #484]	; (800257c <main+0x444>)
 8002396:	6013      	str	r3, [r2, #0]
				indexposition += 1;
 8002398:	4b6f      	ldr	r3, [pc, #444]	; (8002558 <main+0x420>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	3301      	adds	r3, #1
 800239e:	4a6e      	ldr	r2, [pc, #440]	; (8002558 <main+0x420>)
 80023a0:	6013      	str	r3, [r2, #0]
			}
		}
		if(testgo == 1)
 80023a2:	4b77      	ldr	r3, [pc, #476]	; (8002580 <main+0x448>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d105      	bne.n	80023b6 <main+0x27e>
		{
			Mobus = Run_TrayMode;
 80023aa:	4b76      	ldr	r3, [pc, #472]	; (8002584 <main+0x44c>)
 80023ac:	2205      	movs	r2, #5
 80023ae:	701a      	strb	r2, [r3, #0]
			testgo = 0;
 80023b0:	4b73      	ldr	r3, [pc, #460]	; (8002580 <main+0x448>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
		}
		if (HAL_GetTick() >= timestamp) {
 80023b6:	f003 f9dd 	bl	8005774 <HAL_GetTick>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2200      	movs	r2, #0
 80023be:	469a      	mov	sl, r3
 80023c0:	4693      	mov	fp, r2
 80023c2:	4b71      	ldr	r3, [pc, #452]	; (8002588 <main+0x450>)
 80023c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c8:	4592      	cmp	sl, r2
 80023ca:	eb7b 0303 	sbcs.w	r3, fp, r3
 80023ce:	f4ff af04 	bcc.w	80021da <main+0xa2>
			timestamp = HAL_GetTick() + 5;
 80023d2:	f003 f9cf 	bl	8005774 <HAL_GetTick>
 80023d6:	4603      	mov	r3, r0
 80023d8:	3305      	adds	r3, #5
 80023da:	2200      	movs	r2, #0
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	4b69      	ldr	r3, [pc, #420]	; (8002588 <main+0x450>)
 80023e2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80023e6:	e9c3 1200 	strd	r1, r2, [r3]
			//abc++;
			QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2); // Read QEI
 80023ea:	4b68      	ldr	r3, [pc, #416]	; (800258c <main+0x454>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	4a67      	ldr	r2, [pc, #412]	; (8002590 <main+0x458>)
 80023f2:	6013      	str	r3, [r2, #0]
			ReadDegree = (QEIReadRaw / 8192.0 * 360) * 160 / 360; // pulse to degree
 80023f4:	4b66      	ldr	r3, [pc, #408]	; (8002590 <main+0x458>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe f82f 	bl	800045c <__aeabi_ui2d>
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	4b64      	ldr	r3, [pc, #400]	; (8002594 <main+0x45c>)
 8002404:	f7fe f9ce 	bl	80007a4 <__aeabi_ddiv>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4610      	mov	r0, r2
 800240e:	4619      	mov	r1, r3
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	4b60      	ldr	r3, [pc, #384]	; (8002598 <main+0x460>)
 8002416:	f7fe f89b 	bl	8000550 <__aeabi_dmul>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4610      	mov	r0, r2
 8002420:	4619      	mov	r1, r3
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	4b5d      	ldr	r3, [pc, #372]	; (800259c <main+0x464>)
 8002428:	f7fe f892 	bl	8000550 <__aeabi_dmul>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	4b57      	ldr	r3, [pc, #348]	; (8002598 <main+0x460>)
 800243a:	f7fe f9b3 	bl	80007a4 <__aeabi_ddiv>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4610      	mov	r0, r2
 8002444:	4619      	mov	r1, r3
 8002446:	f7fe fb5b 	bl	8000b00 <__aeabi_d2f>
 800244a:	4603      	mov	r3, r0
 800244c:	4a3d      	ldr	r2, [pc, #244]	; (8002544 <main+0x40c>)
 800244e:	6013      	str	r3, [r2, #0]
			error = SetDegree - ReadDegree;
 8002450:	4b49      	ldr	r3, [pc, #292]	; (8002578 <main+0x440>)
 8002452:	ed93 7a00 	vldr	s14, [r3]
 8002456:	4b3b      	ldr	r3, [pc, #236]	; (8002544 <main+0x40c>)
 8002458:	edd3 7a00 	vldr	s15, [r3]
 800245c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002460:	4b4f      	ldr	r3, [pc, #316]	; (80025a0 <main+0x468>)
 8002462:	edc3 7a00 	vstr	s15, [r3]
			velocity();
 8002466:	f002 fc09 	bl	8004c7c <velocity>
			accelerate();
 800246a:	f002 fc6f 	bl	8004d4c <accelerate>
			speed = ((QEIData.QEIVelocity / 8192.0) * 360.0) * 160 / 360;
 800246e:	4b4d      	ldr	r3, [pc, #308]	; (80025a4 <main+0x46c>)
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe f814 	bl	80004a0 <__aeabi_f2d>
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	4b45      	ldr	r3, [pc, #276]	; (8002594 <main+0x45c>)
 800247e:	f7fe f991 	bl	80007a4 <__aeabi_ddiv>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4610      	mov	r0, r2
 8002488:	4619      	mov	r1, r3
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	4b42      	ldr	r3, [pc, #264]	; (8002598 <main+0x460>)
 8002490:	f7fe f85e 	bl	8000550 <__aeabi_dmul>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	4b3e      	ldr	r3, [pc, #248]	; (800259c <main+0x464>)
 80024a2:	f7fe f855 	bl	8000550 <__aeabi_dmul>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4610      	mov	r0, r2
 80024ac:	4619      	mov	r1, r3
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	4b39      	ldr	r3, [pc, #228]	; (8002598 <main+0x460>)
 80024b4:	f7fe f976 	bl	80007a4 <__aeabi_ddiv>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	f7fe fb1e 	bl	8000b00 <__aeabi_d2f>
 80024c4:	4603      	mov	r3, r0
 80024c6:	4a21      	ldr	r2, [pc, #132]	; (800254c <main+0x414>)
 80024c8:	6013      	str	r3, [r2, #0]
			acceleration = QEIAcc.QEIVelocity;
 80024ca:	4b37      	ldr	r3, [pc, #220]	; (80025a8 <main+0x470>)
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	4a20      	ldr	r2, [pc, #128]	; (8002550 <main+0x418>)
 80024d0:	6013      	str	r3, [r2, #0]
			DegreeFeedback = control_interrupt(); // PID function
 80024d2:	f002 faff 	bl	8004ad4 <control_interrupt>
 80024d6:	eef0 7a40 	vmov.f32	s15, s0
 80024da:	4b34      	ldr	r3, [pc, #208]	; (80025ac <main+0x474>)
 80024dc:	edc3 7a00 	vstr	s15, [r3]

			if (velocityTraject == 0) {
 80024e0:	4b24      	ldr	r3, [pc, #144]	; (8002574 <main+0x43c>)
 80024e2:	edd3 7a00 	vldr	s15, [r3]
 80024e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ee:	d103      	bne.n	80024f8 <main+0x3c0>
				s2 = 0;
 80024f0:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <main+0x478>)
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
			}
			if (Joystick_Control == 1) {
 80024f8:	4b2e      	ldr	r3, [pc, #184]	; (80025b4 <main+0x47c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	f040 8085 	bne.w	800260c <main+0x4d4>
				DegreeFeedback = 0;
 8002502:	4b2a      	ldr	r3, [pc, #168]	; (80025ac <main+0x474>)
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
				s = 0;
 800250a:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <main+0x480>)
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
				s2 = 0;
 8002512:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <main+0x478>)
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
				error = 0;
 800251a:	4b21      	ldr	r3, [pc, #132]	; (80025a0 <main+0x468>)
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
				error2 = 0;
 8002522:	4b26      	ldr	r3, [pc, #152]	; (80025bc <main+0x484>)
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
				if (Joystick_AND_Sensor[0] >= 3150) {
 800252a:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <main+0x488>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f640 424d 	movw	r2, #3149	; 0xc4d
 8002532:	4293      	cmp	r3, r2
 8002534:	d951      	bls.n	80025da <main+0x4a2>
 8002536:	e045      	b.n	80025c4 <main+0x48c>
 8002538:	20001368 	.word	0x20001368
 800253c:	3fe00000 	.word	0x3fe00000
 8002540:	2000121c 	.word	0x2000121c
 8002544:	20001348 	.word	0x20001348
 8002548:	43af0000 	.word	0x43af0000
 800254c:	200012ac 	.word	0x200012ac
 8002550:	200012b0 	.word	0x200012b0
 8002554:	20001370 	.word	0x20001370
 8002558:	2000131c 	.word	0x2000131c
 800255c:	200009d8 	.word	0x200009d8
 8002560:	42c80000 	.word	0x42c80000
 8002564:	200012b4 	.word	0x200012b4
 8002568:	20001314 	.word	0x20001314
 800256c:	200012bc 	.word	0x200012bc
 8002570:	20001310 	.word	0x20001310
 8002574:	200012c0 	.word	0x200012c0
 8002578:	2000134c 	.word	0x2000134c
 800257c:	20000390 	.word	0x20000390
 8002580:	20001358 	.word	0x20001358
 8002584:	20000d40 	.word	0x20000d40
 8002588:	20001360 	.word	0x20001360
 800258c:	2000053c 	.word	0x2000053c
 8002590:	200012b8 	.word	0x200012b8
 8002594:	40c00000 	.word	0x40c00000
 8002598:	40768000 	.word	0x40768000
 800259c:	40640000 	.word	0x40640000
 80025a0:	20001354 	.word	0x20001354
 80025a4:	200012d8 	.word	0x200012d8
 80025a8:	200012f0 	.word	0x200012f0
 80025ac:	20001350 	.word	0x20001350
 80025b0:	20001334 	.word	0x20001334
 80025b4:	2000037c 	.word	0x2000037c
 80025b8:	20001328 	.word	0x20001328
 80025bc:	20001338 	.word	0x20001338
 80025c0:	200012c4 	.word	0x200012c4
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 16383); // 20 %
 80025c4:	4b52      	ldr	r3, [pc, #328]	; (8002710 <main+0x5d8>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80025cc:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80025ce:	2201      	movs	r2, #1
 80025d0:	2180      	movs	r1, #128	; 0x80
 80025d2:	4850      	ldr	r0, [pc, #320]	; (8002714 <main+0x5dc>)
 80025d4:	f004 fb98 	bl	8006d08 <HAL_GPIO_WritePin>
 80025d8:	e5ff      	b.n	80021da <main+0xa2>
				} else if (Joystick_AND_Sensor[0] <= 100) {
 80025da:	4b4f      	ldr	r3, [pc, #316]	; (8002718 <main+0x5e0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b64      	cmp	r3, #100	; 0x64
 80025e0:	d80a      	bhi.n	80025f8 <main+0x4c0>
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 16383); // 20 %
 80025e2:	4b4b      	ldr	r3, [pc, #300]	; (8002710 <main+0x5d8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80025ea:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80025ec:	2200      	movs	r2, #0
 80025ee:	2180      	movs	r1, #128	; 0x80
 80025f0:	4848      	ldr	r0, [pc, #288]	; (8002714 <main+0x5dc>)
 80025f2:	f004 fb89 	bl	8006d08 <HAL_GPIO_WritePin>
 80025f6:	e5f0      	b.n	80021da <main+0xa2>
				} else {
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80025f8:	4b45      	ldr	r3, [pc, #276]	; (8002710 <main+0x5d8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2200      	movs	r2, #0
 80025fe:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8002600:	2200      	movs	r2, #0
 8002602:	2180      	movs	r1, #128	; 0x80
 8002604:	4843      	ldr	r0, [pc, #268]	; (8002714 <main+0x5dc>)
 8002606:	f004 fb7f 	bl	8006d08 <HAL_GPIO_WritePin>
 800260a:	e5e6      	b.n	80021da <main+0xa2>
				}
			} else if (Joystick_Control == 0) {
 800260c:	4b43      	ldr	r3, [pc, #268]	; (800271c <main+0x5e4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	f47f ade2 	bne.w	80021da <main+0xa2>
				if (SetDegree < 0) {
 8002616:	4b42      	ldr	r3, [pc, #264]	; (8002720 <main+0x5e8>)
 8002618:	edd3 7a00 	vldr	s15, [r3]
 800261c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002624:	d503      	bpl.n	800262e <main+0x4f6>
					SetDegree = 0; // minimum value
 8002626:	4b3e      	ldr	r3, [pc, #248]	; (8002720 <main+0x5e8>)
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
				}
				if (SetDegree > 700) {
 800262e:	4b3c      	ldr	r3, [pc, #240]	; (8002720 <main+0x5e8>)
 8002630:	edd3 7a00 	vldr	s15, [r3]
 8002634:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002724 <main+0x5ec>
 8002638:	eef4 7ac7 	vcmpe.f32	s15, s14
 800263c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002640:	dd02      	ble.n	8002648 <main+0x510>
					SetDegree = 700; // maximum value
 8002642:	4b37      	ldr	r3, [pc, #220]	; (8002720 <main+0x5e8>)
 8002644:	4a38      	ldr	r2, [pc, #224]	; (8002728 <main+0x5f0>)
 8002646:	601a      	str	r2, [r3, #0]
				}

				if (error > 0) { // setpoint > read_encoder
 8002648:	4b38      	ldr	r3, [pc, #224]	; (800272c <main+0x5f4>)
 800264a:	edd3 7a00 	vldr	s15, [r3]
 800264e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002656:	dd23      	ble.n	80026a0 <main+0x568>

					if (error < 0.2) {
 8002658:	4b34      	ldr	r3, [pc, #208]	; (800272c <main+0x5f4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f7fd ff1f 	bl	80004a0 <__aeabi_f2d>
 8002662:	a329      	add	r3, pc, #164	; (adr r3, 8002708 <main+0x5d0>)
 8002664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002668:	f7fe f9e4 	bl	8000a34 <__aeabi_dcmplt>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d007      	beq.n	8002682 <main+0x54a>
						DegreeFeedback = 0; // Limit Position
 8002672:	4b2f      	ldr	r3, [pc, #188]	; (8002730 <main+0x5f8>)
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
						s = 0;
 800267a:	4b2e      	ldr	r3, [pc, #184]	; (8002734 <main+0x5fc>)
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
					}
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, DegreeFeedback);
 8002682:	4b2b      	ldr	r3, [pc, #172]	; (8002730 <main+0x5f8>)
 8002684:	edd3 7a00 	vldr	s15, [r3]
 8002688:	4b21      	ldr	r3, [pc, #132]	; (8002710 <main+0x5d8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002690:	ee17 2a90 	vmov	r2, s15
 8002694:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8002696:	2200      	movs	r2, #0
 8002698:	2180      	movs	r1, #128	; 0x80
 800269a:	481e      	ldr	r0, [pc, #120]	; (8002714 <main+0x5dc>)
 800269c:	f004 fb34 	bl	8006d08 <HAL_GPIO_WritePin>
				}
				if (error < 0) { // setpoint < read_encoder
 80026a0:	4b22      	ldr	r3, [pc, #136]	; (800272c <main+0x5f4>)
 80026a2:	edd3 7a00 	vldr	s15, [r3]
 80026a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ae:	d52a      	bpl.n	8002706 <main+0x5ce>
					if (error * -1 < 0.2) {
 80026b0:	4b1e      	ldr	r3, [pc, #120]	; (800272c <main+0x5f4>)
 80026b2:	edd3 7a00 	vldr	s15, [r3]
 80026b6:	eef1 7a67 	vneg.f32	s15, s15
 80026ba:	ee17 3a90 	vmov	r3, s15
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fd feee 	bl	80004a0 <__aeabi_f2d>
 80026c4:	a310      	add	r3, pc, #64	; (adr r3, 8002708 <main+0x5d0>)
 80026c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ca:	f7fe f9b3 	bl	8000a34 <__aeabi_dcmplt>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d007      	beq.n	80026e4 <main+0x5ac>
						DegreeFeedback = 0; // Limit Position
 80026d4:	4b16      	ldr	r3, [pc, #88]	; (8002730 <main+0x5f8>)
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
						s = 0;
 80026dc:	4b15      	ldr	r3, [pc, #84]	; (8002734 <main+0x5fc>)
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
					}
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, DegreeFeedback * -1);
 80026e4:	4b12      	ldr	r3, [pc, #72]	; (8002730 <main+0x5f8>)
 80026e6:	edd3 7a00 	vldr	s15, [r3]
 80026ea:	eef1 7a67 	vneg.f32	s15, s15
 80026ee:	4b08      	ldr	r3, [pc, #32]	; (8002710 <main+0x5d8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026f6:	ee17 2a90 	vmov	r2, s15
 80026fa:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80026fc:	2201      	movs	r2, #1
 80026fe:	2180      	movs	r1, #128	; 0x80
 8002700:	4804      	ldr	r0, [pc, #16]	; (8002714 <main+0x5dc>)
 8002702:	f004 fb01 	bl	8006d08 <HAL_GPIO_WritePin>
	while (1) {
 8002706:	e568      	b.n	80021da <main+0xa2>
 8002708:	9999999a 	.word	0x9999999a
 800270c:	3fc99999 	.word	0x3fc99999
 8002710:	200006a4 	.word	0x200006a4
 8002714:	40020000 	.word	0x40020000
 8002718:	200012c4 	.word	0x200012c4
 800271c:	2000037c 	.word	0x2000037c
 8002720:	2000134c 	.word	0x2000134c
 8002724:	442f0000 	.word	0x442f0000
 8002728:	442f0000 	.word	0x442f0000
 800272c:	20001354 	.word	0x20001354
 8002730:	20001350 	.word	0x20001350
 8002734:	20001328 	.word	0x20001328

08002738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b094      	sub	sp, #80	; 0x50
 800273c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800273e:	f107 0320 	add.w	r3, r7, #32
 8002742:	2230      	movs	r2, #48	; 0x30
 8002744:	2100      	movs	r1, #0
 8002746:	4618      	mov	r0, r3
 8002748:	f008 ff3a 	bl	800b5c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800274c:	f107 030c 	add.w	r3, r7, #12
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800275c:	2300      	movs	r3, #0
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	4b27      	ldr	r3, [pc, #156]	; (8002800 <SystemClock_Config+0xc8>)
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	4a26      	ldr	r2, [pc, #152]	; (8002800 <SystemClock_Config+0xc8>)
 8002766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800276a:	6413      	str	r3, [r2, #64]	; 0x40
 800276c:	4b24      	ldr	r3, [pc, #144]	; (8002800 <SystemClock_Config+0xc8>)
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002778:	2300      	movs	r3, #0
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	4b21      	ldr	r3, [pc, #132]	; (8002804 <SystemClock_Config+0xcc>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a20      	ldr	r2, [pc, #128]	; (8002804 <SystemClock_Config+0xcc>)
 8002782:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	4b1e      	ldr	r3, [pc, #120]	; (8002804 <SystemClock_Config+0xcc>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002794:	2302      	movs	r3, #2
 8002796:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002798:	2301      	movs	r3, #1
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800279c:	2310      	movs	r3, #16
 800279e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027a0:	2302      	movs	r3, #2
 80027a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027a4:	2300      	movs	r3, #0
 80027a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80027a8:	2308      	movs	r3, #8
 80027aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80027ac:	2364      	movs	r3, #100	; 0x64
 80027ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027b0:	2302      	movs	r3, #2
 80027b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80027b4:	2304      	movs	r3, #4
 80027b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027b8:	f107 0320 	add.w	r3, r7, #32
 80027bc:	4618      	mov	r0, r3
 80027be:	f005 fa77 	bl	8007cb0 <HAL_RCC_OscConfig>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80027c8:	f002 fbc4 	bl	8004f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027cc:	230f      	movs	r3, #15
 80027ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027d0:	2302      	movs	r3, #2
 80027d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80027e2:	f107 030c 	add.w	r3, r7, #12
 80027e6:	2103      	movs	r1, #3
 80027e8:	4618      	mov	r0, r3
 80027ea:	f005 fcd9 	bl	80081a0 <HAL_RCC_ClockConfig>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80027f4:	f002 fbae 	bl	8004f54 <Error_Handler>
  }
}
 80027f8:	bf00      	nop
 80027fa:	3750      	adds	r7, #80	; 0x50
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40023800 	.word	0x40023800
 8002804:	40007000 	.word	0x40007000

08002808 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800280e:	463b      	mov	r3, r7
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800281a:	4b36      	ldr	r3, [pc, #216]	; (80028f4 <MX_ADC1_Init+0xec>)
 800281c:	4a36      	ldr	r2, [pc, #216]	; (80028f8 <MX_ADC1_Init+0xf0>)
 800281e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002820:	4b34      	ldr	r3, [pc, #208]	; (80028f4 <MX_ADC1_Init+0xec>)
 8002822:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002826:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002828:	4b32      	ldr	r3, [pc, #200]	; (80028f4 <MX_ADC1_Init+0xec>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800282e:	4b31      	ldr	r3, [pc, #196]	; (80028f4 <MX_ADC1_Init+0xec>)
 8002830:	2201      	movs	r2, #1
 8002832:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002834:	4b2f      	ldr	r3, [pc, #188]	; (80028f4 <MX_ADC1_Init+0xec>)
 8002836:	2201      	movs	r2, #1
 8002838:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800283a:	4b2e      	ldr	r3, [pc, #184]	; (80028f4 <MX_ADC1_Init+0xec>)
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002842:	4b2c      	ldr	r3, [pc, #176]	; (80028f4 <MX_ADC1_Init+0xec>)
 8002844:	2200      	movs	r2, #0
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002848:	4b2a      	ldr	r3, [pc, #168]	; (80028f4 <MX_ADC1_Init+0xec>)
 800284a:	4a2c      	ldr	r2, [pc, #176]	; (80028fc <MX_ADC1_Init+0xf4>)
 800284c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800284e:	4b29      	ldr	r3, [pc, #164]	; (80028f4 <MX_ADC1_Init+0xec>)
 8002850:	2200      	movs	r2, #0
 8002852:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002854:	4b27      	ldr	r3, [pc, #156]	; (80028f4 <MX_ADC1_Init+0xec>)
 8002856:	2204      	movs	r2, #4
 8002858:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800285a:	4b26      	ldr	r3, [pc, #152]	; (80028f4 <MX_ADC1_Init+0xec>)
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002862:	4b24      	ldr	r3, [pc, #144]	; (80028f4 <MX_ADC1_Init+0xec>)
 8002864:	2200      	movs	r2, #0
 8002866:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002868:	4822      	ldr	r0, [pc, #136]	; (80028f4 <MX_ADC1_Init+0xec>)
 800286a:	f002 ff8f 	bl	800578c <HAL_ADC_Init>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002874:	f002 fb6e 	bl	8004f54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002878:	2308      	movs	r3, #8
 800287a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800287c:	2301      	movs	r3, #1
 800287e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002880:	2303      	movs	r3, #3
 8002882:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002884:	463b      	mov	r3, r7
 8002886:	4619      	mov	r1, r3
 8002888:	481a      	ldr	r0, [pc, #104]	; (80028f4 <MX_ADC1_Init+0xec>)
 800288a:	f003 f8d1 	bl	8005a30 <HAL_ADC_ConfigChannel>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002894:	f002 fb5e 	bl	8004f54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002898:	2304      	movs	r3, #4
 800289a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800289c:	2302      	movs	r3, #2
 800289e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028a0:	463b      	mov	r3, r7
 80028a2:	4619      	mov	r1, r3
 80028a4:	4813      	ldr	r0, [pc, #76]	; (80028f4 <MX_ADC1_Init+0xec>)
 80028a6:	f003 f8c3 	bl	8005a30 <HAL_ADC_ConfigChannel>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80028b0:	f002 fb50 	bl	8004f54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80028b4:	2306      	movs	r3, #6
 80028b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80028b8:	2303      	movs	r3, #3
 80028ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028bc:	463b      	mov	r3, r7
 80028be:	4619      	mov	r1, r3
 80028c0:	480c      	ldr	r0, [pc, #48]	; (80028f4 <MX_ADC1_Init+0xec>)
 80028c2:	f003 f8b5 	bl	8005a30 <HAL_ADC_ConfigChannel>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80028cc:	f002 fb42 	bl	8004f54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80028d0:	2305      	movs	r3, #5
 80028d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80028d4:	2304      	movs	r3, #4
 80028d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028d8:	463b      	mov	r3, r7
 80028da:	4619      	mov	r1, r3
 80028dc:	4805      	ldr	r0, [pc, #20]	; (80028f4 <MX_ADC1_Init+0xec>)
 80028de:	f003 f8a7 	bl	8005a30 <HAL_ADC_ConfigChannel>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80028e8:	f002 fb34 	bl	8004f54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80028ec:	bf00      	nop
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20000440 	.word	0x20000440
 80028f8:	40012000 	.word	0x40012000
 80028fc:	0f000001 	.word	0x0f000001

08002900 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002904:	4b12      	ldr	r3, [pc, #72]	; (8002950 <MX_I2C1_Init+0x50>)
 8002906:	4a13      	ldr	r2, [pc, #76]	; (8002954 <MX_I2C1_Init+0x54>)
 8002908:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800290a:	4b11      	ldr	r3, [pc, #68]	; (8002950 <MX_I2C1_Init+0x50>)
 800290c:	4a12      	ldr	r2, [pc, #72]	; (8002958 <MX_I2C1_Init+0x58>)
 800290e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002910:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <MX_I2C1_Init+0x50>)
 8002912:	2200      	movs	r2, #0
 8002914:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002916:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <MX_I2C1_Init+0x50>)
 8002918:	2200      	movs	r2, #0
 800291a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800291c:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <MX_I2C1_Init+0x50>)
 800291e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002922:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002924:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <MX_I2C1_Init+0x50>)
 8002926:	2200      	movs	r2, #0
 8002928:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <MX_I2C1_Init+0x50>)
 800292c:	2200      	movs	r2, #0
 800292e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002930:	4b07      	ldr	r3, [pc, #28]	; (8002950 <MX_I2C1_Init+0x50>)
 8002932:	2200      	movs	r2, #0
 8002934:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <MX_I2C1_Init+0x50>)
 8002938:	2200      	movs	r2, #0
 800293a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800293c:	4804      	ldr	r0, [pc, #16]	; (8002950 <MX_I2C1_Init+0x50>)
 800293e:	f004 fa21 	bl	8006d84 <HAL_I2C_Init>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002948:	f002 fb04 	bl	8004f54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800294c:	bf00      	nop
 800294e:	bd80      	pop	{r7, pc}
 8002950:	200004e8 	.word	0x200004e8
 8002954:	40005400 	.word	0x40005400
 8002958:	000186a0 	.word	0x000186a0

0800295c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08c      	sub	sp, #48	; 0x30
 8002960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002962:	f107 030c 	add.w	r3, r7, #12
 8002966:	2224      	movs	r2, #36	; 0x24
 8002968:	2100      	movs	r1, #0
 800296a:	4618      	mov	r0, r3
 800296c:	f008 fe28 	bl	800b5c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002970:	1d3b      	adds	r3, r7, #4
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002978:	4b21      	ldr	r3, [pc, #132]	; (8002a00 <MX_TIM2_Init+0xa4>)
 800297a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800297e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002980:	4b1f      	ldr	r3, [pc, #124]	; (8002a00 <MX_TIM2_Init+0xa4>)
 8002982:	2200      	movs	r2, #0
 8002984:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002986:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <MX_TIM2_Init+0xa4>)
 8002988:	2200      	movs	r2, #0
 800298a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = QEI_PERIOD-1;
 800298c:	4b1c      	ldr	r3, [pc, #112]	; (8002a00 <MX_TIM2_Init+0xa4>)
 800298e:	f649 72ff 	movw	r2, #40959	; 0x9fff
 8002992:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002994:	4b1a      	ldr	r3, [pc, #104]	; (8002a00 <MX_TIM2_Init+0xa4>)
 8002996:	2200      	movs	r2, #0
 8002998:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800299a:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <MX_TIM2_Init+0xa4>)
 800299c:	2200      	movs	r2, #0
 800299e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029a0:	2303      	movs	r3, #3
 80029a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029a4:	2300      	movs	r3, #0
 80029a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029a8:	2301      	movs	r3, #1
 80029aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029b4:	2300      	movs	r3, #0
 80029b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029b8:	2301      	movs	r3, #1
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029bc:	2300      	movs	r3, #0
 80029be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80029c4:	f107 030c 	add.w	r3, r7, #12
 80029c8:	4619      	mov	r1, r3
 80029ca:	480d      	ldr	r0, [pc, #52]	; (8002a00 <MX_TIM2_Init+0xa4>)
 80029cc:	f006 f96a 	bl	8008ca4 <HAL_TIM_Encoder_Init>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80029d6:	f002 fabd 	bl	8004f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029da:	2300      	movs	r3, #0
 80029dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029e2:	1d3b      	adds	r3, r7, #4
 80029e4:	4619      	mov	r1, r3
 80029e6:	4806      	ldr	r0, [pc, #24]	; (8002a00 <MX_TIM2_Init+0xa4>)
 80029e8:	f007 fa74 	bl	8009ed4 <HAL_TIMEx_MasterConfigSynchronization>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80029f2:	f002 faaf 	bl	8004f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029f6:	bf00      	nop
 80029f8:	3730      	adds	r7, #48	; 0x30
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	2000053c 	.word	0x2000053c

08002a04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a0a:	f107 0308 	add.w	r3, r7, #8
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	605a      	str	r2, [r3, #4]
 8002a14:	609a      	str	r2, [r3, #8]
 8002a16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a18:	463b      	mov	r3, r7
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a20:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <MX_TIM3_Init+0x94>)
 8002a22:	4a1e      	ldr	r2, [pc, #120]	; (8002a9c <MX_TIM3_Init+0x98>)
 8002a24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a26:	4b1c      	ldr	r3, [pc, #112]	; (8002a98 <MX_TIM3_Init+0x94>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a2c:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <MX_TIM3_Init+0x94>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a32:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <MX_TIM3_Init+0x94>)
 8002a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a3a:	4b17      	ldr	r3, [pc, #92]	; (8002a98 <MX_TIM3_Init+0x94>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a40:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <MX_TIM3_Init+0x94>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a46:	4814      	ldr	r0, [pc, #80]	; (8002a98 <MX_TIM3_Init+0x94>)
 8002a48:	f005 fdca 	bl	80085e0 <HAL_TIM_Base_Init>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002a52:	f002 fa7f 	bl	8004f54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a5c:	f107 0308 	add.w	r3, r7, #8
 8002a60:	4619      	mov	r1, r3
 8002a62:	480d      	ldr	r0, [pc, #52]	; (8002a98 <MX_TIM3_Init+0x94>)
 8002a64:	f006 fca6 	bl	80093b4 <HAL_TIM_ConfigClockSource>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002a6e:	f002 fa71 	bl	8004f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a72:	2300      	movs	r3, #0
 8002a74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a76:	2300      	movs	r3, #0
 8002a78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a7a:	463b      	mov	r3, r7
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4806      	ldr	r0, [pc, #24]	; (8002a98 <MX_TIM3_Init+0x94>)
 8002a80:	f007 fa28 	bl	8009ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002a8a:	f002 fa63 	bl	8004f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a8e:	bf00      	nop
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	200005f0 	.word	0x200005f0
 8002a9c:	40000400 	.word	0x40000400

08002aa0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08e      	sub	sp, #56	; 0x38
 8002aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	605a      	str	r2, [r3, #4]
 8002ab0:	609a      	str	r2, [r3, #8]
 8002ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab4:	f107 0320 	add.w	r3, r7, #32
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002abe:	1d3b      	adds	r3, r7, #4
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	611a      	str	r2, [r3, #16]
 8002acc:	615a      	str	r2, [r3, #20]
 8002ace:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ad0:	4b2c      	ldr	r3, [pc, #176]	; (8002b84 <MX_TIM4_Init+0xe4>)
 8002ad2:	4a2d      	ldr	r2, [pc, #180]	; (8002b88 <MX_TIM4_Init+0xe8>)
 8002ad4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002ad6:	4b2b      	ldr	r3, [pc, #172]	; (8002b84 <MX_TIM4_Init+0xe4>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002adc:	4b29      	ldr	r3, [pc, #164]	; (8002b84 <MX_TIM4_Init+0xe4>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002ae2:	4b28      	ldr	r3, [pc, #160]	; (8002b84 <MX_TIM4_Init+0xe4>)
 8002ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ae8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aea:	4b26      	ldr	r3, [pc, #152]	; (8002b84 <MX_TIM4_Init+0xe4>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af0:	4b24      	ldr	r3, [pc, #144]	; (8002b84 <MX_TIM4_Init+0xe4>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002af6:	4823      	ldr	r0, [pc, #140]	; (8002b84 <MX_TIM4_Init+0xe4>)
 8002af8:	f005 fd72 	bl	80085e0 <HAL_TIM_Base_Init>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002b02:	f002 fa27 	bl	8004f54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b10:	4619      	mov	r1, r3
 8002b12:	481c      	ldr	r0, [pc, #112]	; (8002b84 <MX_TIM4_Init+0xe4>)
 8002b14:	f006 fc4e 	bl	80093b4 <HAL_TIM_ConfigClockSource>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002b1e:	f002 fa19 	bl	8004f54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002b22:	4818      	ldr	r0, [pc, #96]	; (8002b84 <MX_TIM4_Init+0xe4>)
 8002b24:	f005 feda 	bl	80088dc <HAL_TIM_PWM_Init>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002b2e:	f002 fa11 	bl	8004f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b32:	2300      	movs	r3, #0
 8002b34:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b36:	2300      	movs	r3, #0
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b3a:	f107 0320 	add.w	r3, r7, #32
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4810      	ldr	r0, [pc, #64]	; (8002b84 <MX_TIM4_Init+0xe4>)
 8002b42:	f007 f9c7 	bl	8009ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002b4c:	f002 fa02 	bl	8004f54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b50:	2360      	movs	r3, #96	; 0x60
 8002b52:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b60:	1d3b      	adds	r3, r7, #4
 8002b62:	2200      	movs	r2, #0
 8002b64:	4619      	mov	r1, r3
 8002b66:	4807      	ldr	r0, [pc, #28]	; (8002b84 <MX_TIM4_Init+0xe4>)
 8002b68:	f006 fb62 	bl	8009230 <HAL_TIM_PWM_ConfigChannel>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002b72:	f002 f9ef 	bl	8004f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002b76:	4803      	ldr	r0, [pc, #12]	; (8002b84 <MX_TIM4_Init+0xe4>)
 8002b78:	f002 fbfa 	bl	8005370 <HAL_TIM_MspPostInit>

}
 8002b7c:	bf00      	nop
 8002b7e:	3738      	adds	r7, #56	; 0x38
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	200006a4 	.word	0x200006a4
 8002b88:	40000800 	.word	0x40000800

08002b8c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b92:	f107 0308 	add.w	r3, r7, #8
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	605a      	str	r2, [r3, #4]
 8002b9c:	609a      	str	r2, [r3, #8]
 8002b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ba0:	463b      	mov	r3, r7
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002ba8:	4b1d      	ldr	r3, [pc, #116]	; (8002c20 <MX_TIM5_Init+0x94>)
 8002baa:	4a1e      	ldr	r2, [pc, #120]	; (8002c24 <MX_TIM5_Init+0x98>)
 8002bac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8002bae:	4b1c      	ldr	r3, [pc, #112]	; (8002c20 <MX_TIM5_Init+0x94>)
 8002bb0:	2253      	movs	r2, #83	; 0x53
 8002bb2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb4:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <MX_TIM5_Init+0x94>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002bba:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <MX_TIM5_Init+0x94>)
 8002bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bc2:	4b17      	ldr	r3, [pc, #92]	; (8002c20 <MX_TIM5_Init+0x94>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bc8:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <MX_TIM5_Init+0x94>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002bce:	4814      	ldr	r0, [pc, #80]	; (8002c20 <MX_TIM5_Init+0x94>)
 8002bd0:	f005 fd06 	bl	80085e0 <HAL_TIM_Base_Init>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002bda:	f002 f9bb 	bl	8004f54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002be2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002be4:	f107 0308 	add.w	r3, r7, #8
 8002be8:	4619      	mov	r1, r3
 8002bea:	480d      	ldr	r0, [pc, #52]	; (8002c20 <MX_TIM5_Init+0x94>)
 8002bec:	f006 fbe2 	bl	80093b4 <HAL_TIM_ConfigClockSource>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002bf6:	f002 f9ad 	bl	8004f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c02:	463b      	mov	r3, r7
 8002c04:	4619      	mov	r1, r3
 8002c06:	4806      	ldr	r0, [pc, #24]	; (8002c20 <MX_TIM5_Init+0x94>)
 8002c08:	f007 f964 	bl	8009ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002c12:	f002 f99f 	bl	8004f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002c16:	bf00      	nop
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000758 	.word	0x20000758
 8002c24:	40000c00 	.word	0x40000c00

08002c28 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c2e:	1d3b      	adds	r3, r7, #4
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
 8002c3c:	615a      	str	r2, [r3, #20]
 8002c3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002c40:	4b21      	ldr	r3, [pc, #132]	; (8002cc8 <MX_TIM11_Init+0xa0>)
 8002c42:	4a22      	ldr	r2, [pc, #136]	; (8002ccc <MX_TIM11_Init+0xa4>)
 8002c44:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8002c46:	4b20      	ldr	r3, [pc, #128]	; (8002cc8 <MX_TIM11_Init+0xa0>)
 8002c48:	2263      	movs	r2, #99	; 0x63
 8002c4a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c4c:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <MX_TIM11_Init+0xa0>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8002c52:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <MX_TIM11_Init+0xa0>)
 8002c54:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8002c58:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c5a:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <MX_TIM11_Init+0xa0>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c60:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <MX_TIM11_Init+0xa0>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002c66:	4818      	ldr	r0, [pc, #96]	; (8002cc8 <MX_TIM11_Init+0xa0>)
 8002c68:	f005 fcba 	bl	80085e0 <HAL_TIM_Base_Init>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002c72:	f002 f96f 	bl	8004f54 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8002c76:	4814      	ldr	r0, [pc, #80]	; (8002cc8 <MX_TIM11_Init+0xa0>)
 8002c78:	f005 fdca 	bl	8008810 <HAL_TIM_OC_Init>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002c82:	f002 f967 	bl	8004f54 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 8002c86:	2108      	movs	r1, #8
 8002c88:	480f      	ldr	r0, [pc, #60]	; (8002cc8 <MX_TIM11_Init+0xa0>)
 8002c8a:	f005 ff3d 	bl	8008b08 <HAL_TIM_OnePulse_Init>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8002c94:	f002 f95e 	bl	8004f54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002c98:	2310      	movs	r3, #16
 8002c9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8002c9c:	f240 5399 	movw	r3, #1433	; 0x599
 8002ca0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002caa:	1d3b      	adds	r3, r7, #4
 8002cac:	2200      	movs	r2, #0
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4805      	ldr	r0, [pc, #20]	; (8002cc8 <MX_TIM11_Init+0xa0>)
 8002cb2:	f006 fa61 	bl	8009178 <HAL_TIM_OC_ConfigChannel>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8002cbc:	f002 f94a 	bl	8004f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002cc0:	bf00      	nop
 8002cc2:	3720      	adds	r7, #32
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	2000080c 	.word	0x2000080c
 8002ccc:	40014800 	.word	0x40014800

08002cd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cd4:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <MX_USART2_UART_Init+0x50>)
 8002cd6:	4a13      	ldr	r2, [pc, #76]	; (8002d24 <MX_USART2_UART_Init+0x54>)
 8002cd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <MX_USART2_UART_Init+0x50>)
 8002cdc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002ce0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002ce2:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <MX_USART2_UART_Init+0x50>)
 8002ce4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ce8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cea:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <MX_USART2_UART_Init+0x50>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <MX_USART2_UART_Init+0x50>)
 8002cf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cf8:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <MX_USART2_UART_Init+0x50>)
 8002cfa:	220c      	movs	r2, #12
 8002cfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cfe:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <MX_USART2_UART_Init+0x50>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <MX_USART2_UART_Init+0x50>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d0a:	4805      	ldr	r0, [pc, #20]	; (8002d20 <MX_USART2_UART_Init+0x50>)
 8002d0c:	f007 f96e 	bl	8009fec <HAL_UART_Init>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8002d16:	f002 f91d 	bl	8004f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	200008c0 	.word	0x200008c0
 8002d24:	40004400 	.word	0x40004400

08002d28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	607b      	str	r3, [r7, #4]
 8002d32:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <MX_DMA_Init+0x68>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	4a16      	ldr	r2, [pc, #88]	; (8002d90 <MX_DMA_Init+0x68>)
 8002d38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3e:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <MX_DMA_Init+0x68>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d46:	607b      	str	r3, [r7, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	603b      	str	r3, [r7, #0]
 8002d4e:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <MX_DMA_Init+0x68>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	4a0f      	ldr	r2, [pc, #60]	; (8002d90 <MX_DMA_Init+0x68>)
 8002d54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d58:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5a:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <MX_DMA_Init+0x68>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002d66:	2200      	movs	r2, #0
 8002d68:	2100      	movs	r1, #0
 8002d6a:	2011      	movs	r0, #17
 8002d6c:	f003 f9eb 	bl	8006146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002d70:	2011      	movs	r0, #17
 8002d72:	f003 fa04 	bl	800617e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002d76:	2200      	movs	r2, #0
 8002d78:	2100      	movs	r1, #0
 8002d7a:	2038      	movs	r0, #56	; 0x38
 8002d7c:	f003 f9e3 	bl	8006146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002d80:	2038      	movs	r0, #56	; 0x38
 8002d82:	f003 f9fc 	bl	800617e <HAL_NVIC_EnableIRQ>

}
 8002d86:	bf00      	nop
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800

08002d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08a      	sub	sp, #40	; 0x28
 8002d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9a:	f107 0314 	add.w	r3, r7, #20
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	60da      	str	r2, [r3, #12]
 8002da8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	4b3e      	ldr	r3, [pc, #248]	; (8002ea8 <MX_GPIO_Init+0x114>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	4a3d      	ldr	r2, [pc, #244]	; (8002ea8 <MX_GPIO_Init+0x114>)
 8002db4:	f043 0304 	orr.w	r3, r3, #4
 8002db8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dba:	4b3b      	ldr	r3, [pc, #236]	; (8002ea8 <MX_GPIO_Init+0x114>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	613b      	str	r3, [r7, #16]
 8002dc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	4b37      	ldr	r3, [pc, #220]	; (8002ea8 <MX_GPIO_Init+0x114>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	4a36      	ldr	r2, [pc, #216]	; (8002ea8 <MX_GPIO_Init+0x114>)
 8002dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd6:	4b34      	ldr	r3, [pc, #208]	; (8002ea8 <MX_GPIO_Init+0x114>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	4b30      	ldr	r3, [pc, #192]	; (8002ea8 <MX_GPIO_Init+0x114>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	4a2f      	ldr	r2, [pc, #188]	; (8002ea8 <MX_GPIO_Init+0x114>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	6313      	str	r3, [r2, #48]	; 0x30
 8002df2:	4b2d      	ldr	r3, [pc, #180]	; (8002ea8 <MX_GPIO_Init+0x114>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	607b      	str	r3, [r7, #4]
 8002e02:	4b29      	ldr	r3, [pc, #164]	; (8002ea8 <MX_GPIO_Init+0x114>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	4a28      	ldr	r2, [pc, #160]	; (8002ea8 <MX_GPIO_Init+0x114>)
 8002e08:	f043 0302 	orr.w	r3, r3, #2
 8002e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0e:	4b26      	ldr	r3, [pc, #152]	; (8002ea8 <MX_GPIO_Init+0x114>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	607b      	str	r3, [r7, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_Pin|Em_Pin, GPIO_PIN_RESET);
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8002e20:	4822      	ldr	r0, [pc, #136]	; (8002eac <MX_GPIO_Init+0x118>)
 8002e22:	f003 ff71 	bl	8006d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e2c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e36:	f107 0314 	add.w	r3, r7, #20
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	481c      	ldr	r0, [pc, #112]	; (8002eb0 <MX_GPIO_Init+0x11c>)
 8002e3e:	f003 fdc7 	bl	80069d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor_Home_Pin Sensor_1_Pin Set_Tray_Pin Clear_Tray_Pin */
  GPIO_InitStruct.Pin = Sensor_Home_Pin|Sensor_1_Pin|Set_Tray_Pin|Clear_Tray_Pin;
 8002e42:	2333      	movs	r3, #51	; 0x33
 8002e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e4e:	f107 0314 	add.w	r3, r7, #20
 8002e52:	4619      	mov	r1, r3
 8002e54:	4816      	ldr	r0, [pc, #88]	; (8002eb0 <MX_GPIO_Init+0x11c>)
 8002e56:	f003 fdbb 	bl	80069d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_Pin Em_Pin */
  GPIO_InitStruct.Pin = DIR_Pin|Em_Pin;
 8002e5a:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e60:	2301      	movs	r3, #1
 8002e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e6c:	f107 0314 	add.w	r3, r7, #20
 8002e70:	4619      	mov	r1, r3
 8002e72:	480e      	ldr	r0, [pc, #56]	; (8002eac <MX_GPIO_Init+0x118>)
 8002e74:	f003 fdac 	bl	80069d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor_2_Pin */
  GPIO_InitStruct.Pin = Sensor_2_Pin;
 8002e78:	2310      	movs	r3, #16
 8002e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sensor_2_GPIO_Port, &GPIO_InitStruct);
 8002e84:	f107 0314 	add.w	r3, r7, #20
 8002e88:	4619      	mov	r1, r3
 8002e8a:	480a      	ldr	r0, [pc, #40]	; (8002eb4 <MX_GPIO_Init+0x120>)
 8002e8c:	f003 fda0 	bl	80069d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002e90:	2200      	movs	r2, #0
 8002e92:	2100      	movs	r1, #0
 8002e94:	2028      	movs	r0, #40	; 0x28
 8002e96:	f003 f956 	bl	8006146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e9a:	2028      	movs	r0, #40	; 0x28
 8002e9c:	f003 f96f 	bl	800617e <HAL_NVIC_EnableIRQ>

}
 8002ea0:	bf00      	nop
 8002ea2:	3728      	adds	r7, #40	; 0x28
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40020000 	.word	0x40020000
 8002eb0:	40020800 	.word	0x40020800
 8002eb4:	40020400 	.word	0x40020400

08002eb8 <I2C_all>:
	emxDestroyArray_real_T(q_acc);
}
void home(){

}
void I2C_all(uint8_t * Rdata) {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	6078      	str	r0, [r7, #4]
	uint8_t data_1[1];
	uint8_t data_2[2];
	uint8_t data_4[4];

    switch (choice) {
 8002ec0:	4b57      	ldr	r3, [pc, #348]	; (8003020 <I2C_all+0x168>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	2b09      	cmp	r3, #9
 8002ec8:	f200 80a5 	bhi.w	8003016 <I2C_all+0x15e>
 8002ecc:	a201      	add	r2, pc, #4	; (adr r2, 8002ed4 <I2C_all+0x1c>)
 8002ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed2:	bf00      	nop
 8002ed4:	08002efd 	.word	0x08002efd
 8002ed8:	08002f19 	.word	0x08002f19
 8002edc:	08002f35 	.word	0x08002f35
 8002ee0:	08002f59 	.word	0x08002f59
 8002ee4:	08002f71 	.word	0x08002f71
 8002ee8:	08002f95 	.word	0x08002f95
 8002eec:	08002fb1 	.word	0x08002fb1
 8002ef0:	08002fcd 	.word	0x08002fcd
 8002ef4:	08002fe9 	.word	0x08002fe9
 8002ef8:	08003005 	.word	0x08003005
        // I2C_testmode_on
        case 1:
            data_2[0] = 0x01;
 8002efc:	2301      	movs	r3, #1
 8002efe:	743b      	strb	r3, [r7, #16]
            data_2[1] = 0x01;
 8002f00:	2301      	movs	r3, #1
 8002f02:	747b      	strb	r3, [r7, #17]
            HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, data_2, 2, 50);
 8002f04:	f107 0210 	add.w	r2, r7, #16
 8002f08:	2332      	movs	r3, #50	; 0x32
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	212a      	movs	r1, #42	; 0x2a
 8002f10:	4844      	ldr	r0, [pc, #272]	; (8003024 <I2C_all+0x16c>)
 8002f12:	f004 f87b 	bl	800700c <HAL_I2C_Master_Transmit>
            break;
 8002f16:	e07e      	b.n	8003016 <I2C_all+0x15e>
        // I2C_testmode_off
        case 2:
            data_2[0] = 0x01;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	743b      	strb	r3, [r7, #16]
            data_2[1] = 0x00;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	747b      	strb	r3, [r7, #17]
            HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, data_2, 2, 50);
 8002f20:	f107 0210 	add.w	r2, r7, #16
 8002f24:	2332      	movs	r3, #50	; 0x32
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	2302      	movs	r3, #2
 8002f2a:	212a      	movs	r1, #42	; 0x2a
 8002f2c:	483d      	ldr	r0, [pc, #244]	; (8003024 <I2C_all+0x16c>)
 8002f2e:	f004 f86d 	bl	800700c <HAL_I2C_Master_Transmit>
            break;
 8002f32:	e070      	b.n	8003016 <I2C_all+0x15e>
        // I2C_soft_reset
        case 3:
            data_4[0] = 0x00;
 8002f34:	2300      	movs	r3, #0
 8002f36:	733b      	strb	r3, [r7, #12]
            data_4[1] = 0xFF;
 8002f38:	23ff      	movs	r3, #255	; 0xff
 8002f3a:	737b      	strb	r3, [r7, #13]
            data_4[2] = 0x55;
 8002f3c:	2355      	movs	r3, #85	; 0x55
 8002f3e:	73bb      	strb	r3, [r7, #14]
            data_4[3] = 0xAA;
 8002f40:	23aa      	movs	r3, #170	; 0xaa
 8002f42:	73fb      	strb	r3, [r7, #15]
            HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, data_4, 4, 50);
 8002f44:	f107 020c 	add.w	r2, r7, #12
 8002f48:	2332      	movs	r3, #50	; 0x32
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	2304      	movs	r3, #4
 8002f4e:	212a      	movs	r1, #42	; 0x2a
 8002f50:	4834      	ldr	r0, [pc, #208]	; (8003024 <I2C_all+0x16c>)
 8002f52:	f004 f85b 	bl	800700c <HAL_I2C_Master_Transmit>
            break;
 8002f56:	e05e      	b.n	8003016 <I2C_all+0x15e>
        // I2C_open_emergency
        case 4:
            data_1[0] = 0xF0;
 8002f58:	23f0      	movs	r3, #240	; 0xf0
 8002f5a:	753b      	strb	r3, [r7, #20]
            HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, data_1, 1, 50);
 8002f5c:	f107 0214 	add.w	r2, r7, #20
 8002f60:	2332      	movs	r3, #50	; 0x32
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	2301      	movs	r3, #1
 8002f66:	212a      	movs	r1, #42	; 0x2a
 8002f68:	482e      	ldr	r0, [pc, #184]	; (8003024 <I2C_all+0x16c>)
 8002f6a:	f004 f84f 	bl	800700c <HAL_I2C_Master_Transmit>
            break;
 8002f6e:	e052      	b.n	8003016 <I2C_all+0x15e>
        // I2C_close_emergency
        case 5:
            data_4[0] = 0xE5;
 8002f70:	23e5      	movs	r3, #229	; 0xe5
 8002f72:	733b      	strb	r3, [r7, #12]
            data_4[1] = 0x7A;
 8002f74:	237a      	movs	r3, #122	; 0x7a
 8002f76:	737b      	strb	r3, [r7, #13]
            data_4[2] = 0xFF;
 8002f78:	23ff      	movs	r3, #255	; 0xff
 8002f7a:	73bb      	strb	r3, [r7, #14]
            data_4[3] = 0x81;
 8002f7c:	2381      	movs	r3, #129	; 0x81
 8002f7e:	73fb      	strb	r3, [r7, #15]
            HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, data_4, 4, 50);
 8002f80:	f107 020c 	add.w	r2, r7, #12
 8002f84:	2332      	movs	r3, #50	; 0x32
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	2304      	movs	r3, #4
 8002f8a:	212a      	movs	r1, #42	; 0x2a
 8002f8c:	4825      	ldr	r0, [pc, #148]	; (8003024 <I2C_all+0x16c>)
 8002f8e:	f004 f83d 	bl	800700c <HAL_I2C_Master_Transmit>
            break;
 8002f92:	e040      	b.n	8003016 <I2C_all+0x15e>
        // I2C_gripper_runmode_on
        case 6:
            data_2[0] = 0x10;
 8002f94:	2310      	movs	r3, #16
 8002f96:	743b      	strb	r3, [r7, #16]
            data_2[1] = 0x13;
 8002f98:	2313      	movs	r3, #19
 8002f9a:	747b      	strb	r3, [r7, #17]
            HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, data_2, 2, 50);
 8002f9c:	f107 0210 	add.w	r2, r7, #16
 8002fa0:	2332      	movs	r3, #50	; 0x32
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	212a      	movs	r1, #42	; 0x2a
 8002fa8:	481e      	ldr	r0, [pc, #120]	; (8003024 <I2C_all+0x16c>)
 8002faa:	f004 f82f 	bl	800700c <HAL_I2C_Master_Transmit>
            break;
 8002fae:	e032      	b.n	8003016 <I2C_all+0x15e>
        // I2C_gripper_runmode_off
        case 7:
            data_2[0] = 0x10;
 8002fb0:	2310      	movs	r3, #16
 8002fb2:	743b      	strb	r3, [r7, #16]
            data_2[1] = 0x8C;
 8002fb4:	238c      	movs	r3, #140	; 0x8c
 8002fb6:	747b      	strb	r3, [r7, #17]
            HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, data_2, 2, 50);
 8002fb8:	f107 0210 	add.w	r2, r7, #16
 8002fbc:	2332      	movs	r3, #50	; 0x32
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	212a      	movs	r1, #42	; 0x2a
 8002fc4:	4817      	ldr	r0, [pc, #92]	; (8003024 <I2C_all+0x16c>)
 8002fc6:	f004 f821 	bl	800700c <HAL_I2C_Master_Transmit>
            break;
 8002fca:	e024      	b.n	8003016 <I2C_all+0x15e>
        // I2C_gripper_pick
        case 8:
            data_2[0] = 0x10;
 8002fcc:	2310      	movs	r3, #16
 8002fce:	743b      	strb	r3, [r7, #16]
            data_2[1] = 0x5A;
 8002fd0:	235a      	movs	r3, #90	; 0x5a
 8002fd2:	747b      	strb	r3, [r7, #17]
            HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, data_2, 2, 50);
 8002fd4:	f107 0210 	add.w	r2, r7, #16
 8002fd8:	2332      	movs	r3, #50	; 0x32
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	2302      	movs	r3, #2
 8002fde:	212a      	movs	r1, #42	; 0x2a
 8002fe0:	4810      	ldr	r0, [pc, #64]	; (8003024 <I2C_all+0x16c>)
 8002fe2:	f004 f813 	bl	800700c <HAL_I2C_Master_Transmit>
            break;
 8002fe6:	e016      	b.n	8003016 <I2C_all+0x15e>
        // I2C_gripper_place
        case 9:
            data_2[0] = 0x10;
 8002fe8:	2310      	movs	r3, #16
 8002fea:	743b      	strb	r3, [r7, #16]
            data_2[1] = 0x69;
 8002fec:	2369      	movs	r3, #105	; 0x69
 8002fee:	747b      	strb	r3, [r7, #17]
            HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, data_2, 2, 50);
 8002ff0:	f107 0210 	add.w	r2, r7, #16
 8002ff4:	2332      	movs	r3, #50	; 0x32
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	212a      	movs	r1, #42	; 0x2a
 8002ffc:	4809      	ldr	r0, [pc, #36]	; (8003024 <I2C_all+0x16c>)
 8002ffe:	f004 f805 	bl	800700c <HAL_I2C_Master_Transmit>
            break;
 8003002:	e008      	b.n	8003016 <I2C_all+0x15e>
        // I2C_read_status
        case 10:
        	HAL_I2C_Master_Receive(&hi2c1, 0x15 << 1, Rdata, 1, 50);
 8003004:	2332      	movs	r3, #50	; 0x32
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	2301      	movs	r3, #1
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	212a      	movs	r1, #42	; 0x2a
 800300e:	4805      	ldr	r0, [pc, #20]	; (8003024 <I2C_all+0x16c>)
 8003010:	f004 f8fa 	bl	8007208 <HAL_I2C_Master_Receive>
        	break;
 8003014:	bf00      	nop
    }
}
 8003016:	bf00      	nop
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	200009c0 	.word	0x200009c0
 8003024:	200004e8 	.word	0x200004e8

08003028 <limitsensor>:
void limitsensor() {
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
	if (Joystick_AND_Sensor[2] > 3000)
 800302c:	4b17      	ldr	r3, [pc, #92]	; (800308c <limitsensor+0x64>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003034:	4293      	cmp	r3, r2
 8003036:	d90c      	bls.n	8003052 <limitsensor+0x2a>
	{
		s=0;
 8003038:	4b15      	ldr	r3, [pc, #84]	; (8003090 <limitsensor+0x68>)
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
		s2=0;
 8003040:	4b14      	ldr	r3, [pc, #80]	; (8003094 <limitsensor+0x6c>)
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
		TIM2->CNT = 0;
 8003048:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800304c:	2200      	movs	r2, #0
 800304e:	625a      	str	r2, [r3, #36]	; 0x24
		s=0;
		s2=0;
		abc++;
	}

}
 8003050:	e016      	b.n	8003080 <limitsensor+0x58>
	else if (Joystick_AND_Sensor[3] > 3000)
 8003052:	4b0e      	ldr	r3, [pc, #56]	; (800308c <limitsensor+0x64>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800305a:	4293      	cmp	r3, r2
 800305c:	d910      	bls.n	8003080 <limitsensor+0x58>
		s=0;
 800305e:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <limitsensor+0x68>)
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
		s2=0;
 8003066:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <limitsensor+0x6c>)
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
		abc++;
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <limitsensor+0x70>)
 8003070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003074:	1c50      	adds	r0, r2, #1
 8003076:	f143 0100 	adc.w	r1, r3, #0
 800307a:	4b07      	ldr	r3, [pc, #28]	; (8003098 <limitsensor+0x70>)
 800307c:	e9c3 0100 	strd	r0, r1, [r3]
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	200012c4 	.word	0x200012c4
 8003090:	20001328 	.word	0x20001328
 8003094:	20001334 	.word	0x20001334
 8003098:	200009b8 	.word	0x200009b8

0800309c <transformRectangleAndPointsPick>:
void transformRectangleAndPointsPick() {
 800309c:	b580      	push	{r7, lr}
 800309e:	b08a      	sub	sp, #40	; 0x28
 80030a0:	af00      	add	r7, sp, #0

	translation[0] = bottom_left_jog[0];
 80030a2:	4bac      	ldr	r3, [pc, #688]	; (8003354 <transformRectangleAndPointsPick+0x2b8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4aac      	ldr	r2, [pc, #688]	; (8003358 <transformRectangleAndPointsPick+0x2bc>)
 80030a8:	6013      	str	r3, [r2, #0]
	translation[1] = bottom_left_jog[1];
 80030aa:	4baa      	ldr	r3, [pc, #680]	; (8003354 <transformRectangleAndPointsPick+0x2b8>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4aaa      	ldr	r2, [pc, #680]	; (8003358 <transformRectangleAndPointsPick+0x2bc>)
 80030b0:	6053      	str	r3, [r2, #4]

	bottom_right_jog[0] = bottom_right_jog[0] - translation[0];
 80030b2:	4baa      	ldr	r3, [pc, #680]	; (800335c <transformRectangleAndPointsPick+0x2c0>)
 80030b4:	ed93 7a00 	vldr	s14, [r3]
 80030b8:	4ba7      	ldr	r3, [pc, #668]	; (8003358 <transformRectangleAndPointsPick+0x2bc>)
 80030ba:	edd3 7a00 	vldr	s15, [r3]
 80030be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030c2:	4ba6      	ldr	r3, [pc, #664]	; (800335c <transformRectangleAndPointsPick+0x2c0>)
 80030c4:	edc3 7a00 	vstr	s15, [r3]
	bottom_right_jog[1] = bottom_right_jog[1] - translation[1];
 80030c8:	4ba4      	ldr	r3, [pc, #656]	; (800335c <transformRectangleAndPointsPick+0x2c0>)
 80030ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80030ce:	4ba2      	ldr	r3, [pc, #648]	; (8003358 <transformRectangleAndPointsPick+0x2bc>)
 80030d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80030d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030d8:	4ba0      	ldr	r3, [pc, #640]	; (800335c <transformRectangleAndPointsPick+0x2c0>)
 80030da:	edc3 7a01 	vstr	s15, [r3, #4]

	dot_product = 60 * bottom_right_jog[0] + bottom_right_jog[1] * 0;
 80030de:	4b9f      	ldr	r3, [pc, #636]	; (800335c <transformRectangleAndPointsPick+0x2c0>)
 80030e0:	edd3 7a00 	vldr	s15, [r3]
 80030e4:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8003360 <transformRectangleAndPointsPick+0x2c4>
 80030e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030ec:	4b9b      	ldr	r3, [pc, #620]	; (800335c <transformRectangleAndPointsPick+0x2c0>)
 80030ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80030f2:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8003364 <transformRectangleAndPointsPick+0x2c8>
 80030f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030fe:	4b9a      	ldr	r3, [pc, #616]	; (8003368 <transformRectangleAndPointsPick+0x2cc>)
 8003100:	edc3 7a00 	vstr	s15, [r3]
	in_theta = dot_product / vectorsize;
 8003104:	4b98      	ldr	r3, [pc, #608]	; (8003368 <transformRectangleAndPointsPick+0x2cc>)
 8003106:	edd3 6a00 	vldr	s13, [r3]
 800310a:	4b98      	ldr	r3, [pc, #608]	; (800336c <transformRectangleAndPointsPick+0x2d0>)
 800310c:	ed93 7a00 	vldr	s14, [r3]
 8003110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003114:	4b96      	ldr	r3, [pc, #600]	; (8003370 <transformRectangleAndPointsPick+0x2d4>)
 8003116:	edc3 7a00 	vstr	s15, [r3]
	theta = -acos(in_theta);
 800311a:	4b95      	ldr	r3, [pc, #596]	; (8003370 <transformRectangleAndPointsPick+0x2d4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd f9be 	bl	80004a0 <__aeabi_f2d>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	ec43 2b10 	vmov	d0, r2, r3
 800312c:	f008 fc90 	bl	800ba50 <acos>
 8003130:	ec53 2b10 	vmov	r2, r3, d0
 8003134:	4610      	mov	r0, r2
 8003136:	4619      	mov	r1, r3
 8003138:	f7fd fce2 	bl	8000b00 <__aeabi_d2f>
 800313c:	4603      	mov	r3, r0
 800313e:	ee07 3a90 	vmov	s15, r3
 8003142:	eef1 7a67 	vneg.f32	s15, s15
 8003146:	4b8b      	ldr	r3, [pc, #556]	; (8003374 <transformRectangleAndPointsPick+0x2d8>)
 8003148:	edc3 7a00 	vstr	s15, [r3]

	T_rotation[0][0] = cos(theta);
 800314c:	4b89      	ldr	r3, [pc, #548]	; (8003374 <transformRectangleAndPointsPick+0x2d8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f7fd f9a5 	bl	80004a0 <__aeabi_f2d>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	ec43 2b10 	vmov	d0, r2, r3
 800315e:	f008 fb4b 	bl	800b7f8 <cos>
 8003162:	ec53 2b10 	vmov	r2, r3, d0
 8003166:	4610      	mov	r0, r2
 8003168:	4619      	mov	r1, r3
 800316a:	f7fd fcc9 	bl	8000b00 <__aeabi_d2f>
 800316e:	4603      	mov	r3, r0
 8003170:	4a81      	ldr	r2, [pc, #516]	; (8003378 <transformRectangleAndPointsPick+0x2dc>)
 8003172:	6013      	str	r3, [r2, #0]
	T_rotation[0][1] = -sin(theta);
 8003174:	4b7f      	ldr	r3, [pc, #508]	; (8003374 <transformRectangleAndPointsPick+0x2d8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f7fd f991 	bl	80004a0 <__aeabi_f2d>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	ec43 2b10 	vmov	d0, r2, r3
 8003186:	f008 fc0b 	bl	800b9a0 <sin>
 800318a:	ec53 2b10 	vmov	r2, r3, d0
 800318e:	4610      	mov	r0, r2
 8003190:	4619      	mov	r1, r3
 8003192:	f7fd fcb5 	bl	8000b00 <__aeabi_d2f>
 8003196:	4603      	mov	r3, r0
 8003198:	ee07 3a90 	vmov	s15, r3
 800319c:	eef1 7a67 	vneg.f32	s15, s15
 80031a0:	4b75      	ldr	r3, [pc, #468]	; (8003378 <transformRectangleAndPointsPick+0x2dc>)
 80031a2:	edc3 7a01 	vstr	s15, [r3, #4]
	T_rotation[1][0] = sin(theta);
 80031a6:	4b73      	ldr	r3, [pc, #460]	; (8003374 <transformRectangleAndPointsPick+0x2d8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd f978 	bl	80004a0 <__aeabi_f2d>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	ec43 2b10 	vmov	d0, r2, r3
 80031b8:	f008 fbf2 	bl	800b9a0 <sin>
 80031bc:	ec53 2b10 	vmov	r2, r3, d0
 80031c0:	4610      	mov	r0, r2
 80031c2:	4619      	mov	r1, r3
 80031c4:	f7fd fc9c 	bl	8000b00 <__aeabi_d2f>
 80031c8:	4603      	mov	r3, r0
 80031ca:	4a6b      	ldr	r2, [pc, #428]	; (8003378 <transformRectangleAndPointsPick+0x2dc>)
 80031cc:	6093      	str	r3, [r2, #8]
	T_rotation[1][1] = cos(theta);
 80031ce:	4b69      	ldr	r3, [pc, #420]	; (8003374 <transformRectangleAndPointsPick+0x2d8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd f964 	bl	80004a0 <__aeabi_f2d>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	ec43 2b10 	vmov	d0, r2, r3
 80031e0:	f008 fb0a 	bl	800b7f8 <cos>
 80031e4:	ec53 2b10 	vmov	r2, r3, d0
 80031e8:	4610      	mov	r0, r2
 80031ea:	4619      	mov	r1, r3
 80031ec:	f7fd fc88 	bl	8000b00 <__aeabi_d2f>
 80031f0:	4603      	mov	r3, r0
 80031f2:	4a61      	ldr	r2, [pc, #388]	; (8003378 <transformRectangleAndPointsPick+0x2dc>)
 80031f4:	60d3      	str	r3, [r2, #12]

	T[0][0] = T_rotation[0][0];
 80031f6:	4b60      	ldr	r3, [pc, #384]	; (8003378 <transformRectangleAndPointsPick+0x2dc>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a60      	ldr	r2, [pc, #384]	; (800337c <transformRectangleAndPointsPick+0x2e0>)
 80031fc:	6013      	str	r3, [r2, #0]
	T[0][1] = T_rotation[0][1];
 80031fe:	4b5e      	ldr	r3, [pc, #376]	; (8003378 <transformRectangleAndPointsPick+0x2dc>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4a5e      	ldr	r2, [pc, #376]	; (800337c <transformRectangleAndPointsPick+0x2e0>)
 8003204:	6053      	str	r3, [r2, #4]
	T[0][2] = translation[0];
 8003206:	4b54      	ldr	r3, [pc, #336]	; (8003358 <transformRectangleAndPointsPick+0x2bc>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a5c      	ldr	r2, [pc, #368]	; (800337c <transformRectangleAndPointsPick+0x2e0>)
 800320c:	6093      	str	r3, [r2, #8]
	T[1][0] = T_rotation[1][0];
 800320e:	4b5a      	ldr	r3, [pc, #360]	; (8003378 <transformRectangleAndPointsPick+0x2dc>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	4a5a      	ldr	r2, [pc, #360]	; (800337c <transformRectangleAndPointsPick+0x2e0>)
 8003214:	60d3      	str	r3, [r2, #12]
	T[1][1] = T_rotation[1][1];
 8003216:	4b58      	ldr	r3, [pc, #352]	; (8003378 <transformRectangleAndPointsPick+0x2dc>)
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	4a58      	ldr	r2, [pc, #352]	; (800337c <transformRectangleAndPointsPick+0x2e0>)
 800321c:	6113      	str	r3, [r2, #16]
	T[1][2] = translation[1];
 800321e:	4b4e      	ldr	r3, [pc, #312]	; (8003358 <transformRectangleAndPointsPick+0x2bc>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4a56      	ldr	r2, [pc, #344]	; (800337c <transformRectangleAndPointsPick+0x2e0>)
 8003224:	6153      	str	r3, [r2, #20]
	T[2][0] = 0;
 8003226:	4b55      	ldr	r3, [pc, #340]	; (800337c <transformRectangleAndPointsPick+0x2e0>)
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	619a      	str	r2, [r3, #24]
	T[2][1] = 0;
 800322e:	4b53      	ldr	r3, [pc, #332]	; (800337c <transformRectangleAndPointsPick+0x2e0>)
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	61da      	str	r2, [r3, #28]
	T[2][2] = 1;
 8003236:	4b51      	ldr	r3, [pc, #324]	; (800337c <transformRectangleAndPointsPick+0x2e0>)
 8003238:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800323c:	621a      	str	r2, [r3, #32]

	// Transform the rectangle
	for (int i = 0; i < 5; i++) {
 800323e:	2300      	movs	r3, #0
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
 8003242:	e029      	b.n	8003298 <transformRectangleAndPointsPick+0x1fc>
		homogeneousRectangle[i][0] = rectangle[i][0];
 8003244:	4a4e      	ldr	r2, [pc, #312]	; (8003380 <transformRectangleAndPointsPick+0x2e4>)
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4413      	add	r3, r2
 800324c:	6819      	ldr	r1, [r3, #0]
 800324e:	484d      	ldr	r0, [pc, #308]	; (8003384 <transformRectangleAndPointsPick+0x2e8>)
 8003250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003252:	4613      	mov	r3, r2
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4403      	add	r3, r0
 800325c:	6019      	str	r1, [r3, #0]
		homogeneousRectangle[i][1] = rectangle[i][1];
 800325e:	4a48      	ldr	r2, [pc, #288]	; (8003380 <transformRectangleAndPointsPick+0x2e4>)
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4413      	add	r3, r2
 8003266:	3304      	adds	r3, #4
 8003268:	6819      	ldr	r1, [r3, #0]
 800326a:	4846      	ldr	r0, [pc, #280]	; (8003384 <transformRectangleAndPointsPick+0x2e8>)
 800326c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326e:	4613      	mov	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4413      	add	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4403      	add	r3, r0
 8003278:	3304      	adds	r3, #4
 800327a:	6019      	str	r1, [r3, #0]
		homogeneousRectangle[i][2] = 1;
 800327c:	4941      	ldr	r1, [pc, #260]	; (8003384 <transformRectangleAndPointsPick+0x2e8>)
 800327e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003280:	4613      	mov	r3, r2
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	4413      	add	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	3308      	adds	r3, #8
 800328c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003290:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 5; i++) {
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	3301      	adds	r3, #1
 8003296:	627b      	str	r3, [r7, #36]	; 0x24
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	2b04      	cmp	r3, #4
 800329c:	ddd2      	ble.n	8003244 <transformRectangleAndPointsPick+0x1a8>
	}

	for (int i = 0; i < 5; i++) {
 800329e:	2300      	movs	r3, #0
 80032a0:	623b      	str	r3, [r7, #32]
 80032a2:	e050      	b.n	8003346 <transformRectangleAndPointsPick+0x2aa>
		for (int j = 0; j < 3; j++) {
 80032a4:	2300      	movs	r3, #0
 80032a6:	61fb      	str	r3, [r7, #28]
 80032a8:	e047      	b.n	800333a <transformRectangleAndPointsPick+0x29e>
			transformedRectangle[i][j] = 0;
 80032aa:	4937      	ldr	r1, [pc, #220]	; (8003388 <transformRectangleAndPointsPick+0x2ec>)
 80032ac:	6a3a      	ldr	r2, [r7, #32]
 80032ae:	4613      	mov	r3, r2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	4413      	add	r3, r2
 80032b4:	69fa      	ldr	r2, [r7, #28]
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
			for (int k = 0; k < 3; k++) {
 80032c2:	2300      	movs	r3, #0
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	e032      	b.n	800332e <transformRectangleAndPointsPick+0x292>
				transformedRectangle[i][j] += homogeneousRectangle[i][k]
 80032c8:	492f      	ldr	r1, [pc, #188]	; (8003388 <transformRectangleAndPointsPick+0x2ec>)
 80032ca:	6a3a      	ldr	r2, [r7, #32]
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	ed93 7a00 	vldr	s14, [r3]
 80032de:	4929      	ldr	r1, [pc, #164]	; (8003384 <transformRectangleAndPointsPick+0x2e8>)
 80032e0:	6a3a      	ldr	r2, [r7, #32]
 80032e2:	4613      	mov	r3, r2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	4413      	add	r3, r2
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	edd3 6a00 	vldr	s13, [r3]
						* T[k][j];
 80032f4:	4921      	ldr	r1, [pc, #132]	; (800337c <transformRectangleAndPointsPick+0x2e0>)
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4613      	mov	r3, r2
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	4413      	add	r3, r2
 80032fe:	69fa      	ldr	r2, [r7, #28]
 8003300:	4413      	add	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	edd3 7a00 	vldr	s15, [r3]
 800330a:	ee66 7aa7 	vmul.f32	s15, s13, s15
				transformedRectangle[i][j] += homogeneousRectangle[i][k]
 800330e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003312:	491d      	ldr	r1, [pc, #116]	; (8003388 <transformRectangleAndPointsPick+0x2ec>)
 8003314:	6a3a      	ldr	r2, [r7, #32]
 8003316:	4613      	mov	r3, r2
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	4413      	add	r3, r2
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	edc3 7a00 	vstr	s15, [r3]
			for (int k = 0; k < 3; k++) {
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	3301      	adds	r3, #1
 800332c:	61bb      	str	r3, [r7, #24]
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	2b02      	cmp	r3, #2
 8003332:	ddc9      	ble.n	80032c8 <transformRectangleAndPointsPick+0x22c>
		for (int j = 0; j < 3; j++) {
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	3301      	adds	r3, #1
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	2b02      	cmp	r3, #2
 800333e:	ddb4      	ble.n	80032aa <transformRectangleAndPointsPick+0x20e>
	for (int i = 0; i < 5; i++) {
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	3301      	adds	r3, #1
 8003344:	623b      	str	r3, [r7, #32]
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	2b04      	cmp	r3, #4
 800334a:	ddab      	ble.n	80032a4 <transformRectangleAndPointsPick+0x208>
			}
		}
	}

	// Transform the points
	for (int i = 0; i < 9; i++) {
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	e046      	b.n	80033e0 <transformRectangleAndPointsPick+0x344>
 8003352:	bf00      	nop
 8003354:	20000b7c 	.word	0x20000b7c
 8003358:	200009f4 	.word	0x200009f4
 800335c:	20000b84 	.word	0x20000b84
 8003360:	42700000 	.word	0x42700000
 8003364:	00000000 	.word	0x00000000
 8003368:	20000b70 	.word	0x20000b70
 800336c:	20000304 	.word	0x20000304
 8003370:	20000b78 	.word	0x20000b78
 8003374:	20000b74 	.word	0x20000b74
 8003378:	200009e4 	.word	0x200009e4
 800337c:	200009fc 	.word	0x200009fc
 8003380:	20000294 	.word	0x20000294
 8003384:	20000a20 	.word	0x20000a20
 8003388:	20000a5c 	.word	0x20000a5c
		homogeneousPoints[i][0] = points[i][0];
 800338c:	4a7d      	ldr	r2, [pc, #500]	; (8003584 <transformRectangleAndPointsPick+0x4e8>)
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4413      	add	r3, r2
 8003394:	6819      	ldr	r1, [r3, #0]
 8003396:	487c      	ldr	r0, [pc, #496]	; (8003588 <transformRectangleAndPointsPick+0x4ec>)
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	4613      	mov	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4403      	add	r3, r0
 80033a4:	6019      	str	r1, [r3, #0]
		homogeneousPoints[i][1] = points[i][1];
 80033a6:	4a77      	ldr	r2, [pc, #476]	; (8003584 <transformRectangleAndPointsPick+0x4e8>)
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4413      	add	r3, r2
 80033ae:	3304      	adds	r3, #4
 80033b0:	6819      	ldr	r1, [r3, #0]
 80033b2:	4875      	ldr	r0, [pc, #468]	; (8003588 <transformRectangleAndPointsPick+0x4ec>)
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	4613      	mov	r3, r2
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	4413      	add	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4403      	add	r3, r0
 80033c0:	3304      	adds	r3, #4
 80033c2:	6019      	str	r1, [r3, #0]
		homogeneousPoints[i][2] = 1;
 80033c4:	4970      	ldr	r1, [pc, #448]	; (8003588 <transformRectangleAndPointsPick+0x4ec>)
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4613      	mov	r3, r2
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	3308      	adds	r3, #8
 80033d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80033d8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 9; i++) {
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	3301      	adds	r3, #1
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	ddd2      	ble.n	800338c <transformRectangleAndPointsPick+0x2f0>
	}

	for (int i = 0; i < 9; i++) {
 80033e6:	2300      	movs	r3, #0
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	e050      	b.n	800348e <transformRectangleAndPointsPick+0x3f2>
		for (int j = 0; j < 3; j++) {
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	e047      	b.n	8003482 <transformRectangleAndPointsPick+0x3e6>
			transformedPoints[i][j] = 0;
 80033f2:	4966      	ldr	r1, [pc, #408]	; (800358c <transformRectangleAndPointsPick+0x4f0>)
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4613      	mov	r3, r2
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	4413      	add	r3, r2
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
			for (int k = 0; k < 3; k++) {
 800340a:	2300      	movs	r3, #0
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	e032      	b.n	8003476 <transformRectangleAndPointsPick+0x3da>

				transformedPoints[i][j] += homogeneousPoints[i][k] * T[k][j];
 8003410:	495e      	ldr	r1, [pc, #376]	; (800358c <transformRectangleAndPointsPick+0x4f0>)
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4613      	mov	r3, r2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	4413      	add	r3, r2
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	ed93 7a00 	vldr	s14, [r3]
 8003426:	4958      	ldr	r1, [pc, #352]	; (8003588 <transformRectangleAndPointsPick+0x4ec>)
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4613      	mov	r3, r2
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	4413      	add	r3, r2
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	4413      	add	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	edd3 6a00 	vldr	s13, [r3]
 800343c:	4954      	ldr	r1, [pc, #336]	; (8003590 <transformRectangleAndPointsPick+0x4f4>)
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	4613      	mov	r3, r2
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	4413      	add	r3, r2
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	4413      	add	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	edd3 7a00 	vldr	s15, [r3]
 8003452:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800345a:	494c      	ldr	r1, [pc, #304]	; (800358c <transformRectangleAndPointsPick+0x4f0>)
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4613      	mov	r3, r2
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	4413      	add	r3, r2
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4413      	add	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	edc3 7a00 	vstr	s15, [r3]
			for (int k = 0; k < 3; k++) {
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	3301      	adds	r3, #1
 8003474:	60bb      	str	r3, [r7, #8]
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b02      	cmp	r3, #2
 800347a:	ddc9      	ble.n	8003410 <transformRectangleAndPointsPick+0x374>
		for (int j = 0; j < 3; j++) {
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	3301      	adds	r3, #1
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2b02      	cmp	r3, #2
 8003486:	ddb4      	ble.n	80033f2 <transformRectangleAndPointsPick+0x356>
	for (int i = 0; i < 9; i++) {
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	3301      	adds	r3, #1
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2b08      	cmp	r3, #8
 8003492:	ddab      	ble.n	80033ec <transformRectangleAndPointsPick+0x350>
			}
		}
	}

	// Translation points
	for (int i = 0; i < 9; i++) {
 8003494:	2300      	movs	r3, #0
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	e032      	b.n	8003500 <transformRectangleAndPointsPick+0x464>
		transformedPoints[i][0] = transformedPoints[i][0] + translation[0];
 800349a:	493c      	ldr	r1, [pc, #240]	; (800358c <transformRectangleAndPointsPick+0x4f0>)
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	ed93 7a00 	vldr	s14, [r3]
 80034ac:	4b39      	ldr	r3, [pc, #228]	; (8003594 <transformRectangleAndPointsPick+0x4f8>)
 80034ae:	edd3 7a00 	vldr	s15, [r3]
 80034b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034b6:	4935      	ldr	r1, [pc, #212]	; (800358c <transformRectangleAndPointsPick+0x4f0>)
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	edc3 7a00 	vstr	s15, [r3]
		transformedPoints[i][1] = transformedPoints[i][1] + translation[1];
 80034c8:	4930      	ldr	r1, [pc, #192]	; (800358c <transformRectangleAndPointsPick+0x4f0>)
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	3304      	adds	r3, #4
 80034d8:	ed93 7a00 	vldr	s14, [r3]
 80034dc:	4b2d      	ldr	r3, [pc, #180]	; (8003594 <transformRectangleAndPointsPick+0x4f8>)
 80034de:	edd3 7a01 	vldr	s15, [r3, #4]
 80034e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034e6:	4929      	ldr	r1, [pc, #164]	; (800358c <transformRectangleAndPointsPick+0x4f0>)
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	3304      	adds	r3, #4
 80034f6:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 9; i++) {
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3301      	adds	r3, #1
 80034fe:	607b      	str	r3, [r7, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b08      	cmp	r3, #8
 8003504:	ddc9      	ble.n	800349a <transformRectangleAndPointsPick+0x3fe>
		//transformedPoints[i][0] = transformedPoints[i][0] *(-1);

	}

	// Translation rectangle
	for (int i = 0; i < 5; i++) {
 8003506:	2300      	movs	r3, #0
 8003508:	603b      	str	r3, [r7, #0]
 800350a:	e032      	b.n	8003572 <transformRectangleAndPointsPick+0x4d6>
		transformedRectangle[i][0] = transformedRectangle[i][0]
 800350c:	4922      	ldr	r1, [pc, #136]	; (8003598 <transformRectangleAndPointsPick+0x4fc>)
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	4613      	mov	r3, r2
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	ed93 7a00 	vldr	s14, [r3]
				+ +translation[0];
 800351e:	4b1d      	ldr	r3, [pc, #116]	; (8003594 <transformRectangleAndPointsPick+0x4f8>)
 8003520:	edd3 7a00 	vldr	s15, [r3]
 8003524:	ee77 7a27 	vadd.f32	s15, s14, s15
		transformedRectangle[i][0] = transformedRectangle[i][0]
 8003528:	491b      	ldr	r1, [pc, #108]	; (8003598 <transformRectangleAndPointsPick+0x4fc>)
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	edc3 7a00 	vstr	s15, [r3]
		transformedRectangle[i][1] = transformedRectangle[i][1]
 800353a:	4917      	ldr	r1, [pc, #92]	; (8003598 <transformRectangleAndPointsPick+0x4fc>)
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	4613      	mov	r3, r2
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	4413      	add	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	3304      	adds	r3, #4
 800354a:	ed93 7a00 	vldr	s14, [r3]
				+ translation[1];
 800354e:	4b11      	ldr	r3, [pc, #68]	; (8003594 <transformRectangleAndPointsPick+0x4f8>)
 8003550:	edd3 7a01 	vldr	s15, [r3, #4]
 8003554:	ee77 7a27 	vadd.f32	s15, s14, s15
		transformedRectangle[i][1] = transformedRectangle[i][1]
 8003558:	490f      	ldr	r1, [pc, #60]	; (8003598 <transformRectangleAndPointsPick+0x4fc>)
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	4613      	mov	r3, r2
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	3304      	adds	r3, #4
 8003568:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 5; i++) {
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	3301      	adds	r3, #1
 8003570:	603b      	str	r3, [r7, #0]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b04      	cmp	r3, #4
 8003576:	ddc9      	ble.n	800350c <transformRectangleAndPointsPick+0x470>
	}

}
 8003578:	bf00      	nop
 800357a:	bf00      	nop
 800357c:	3728      	adds	r7, #40	; 0x28
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	200002bc 	.word	0x200002bc
 8003588:	20000a98 	.word	0x20000a98
 800358c:	20000b04 	.word	0x20000b04
 8003590:	200009fc 	.word	0x200009fc
 8003594:	200009f4 	.word	0x200009f4
 8003598:	20000a5c 	.word	0x20000a5c

0800359c <transformRectangleAndPointsPlace>:
void transformRectangleAndPointsPlace() {
 800359c:	b580      	push	{r7, lr}
 800359e:	b08a      	sub	sp, #40	; 0x28
 80035a0:	af00      	add	r7, sp, #0

	translation2[0] = bottom_left_jog2[0];
 80035a2:	4bac      	ldr	r3, [pc, #688]	; (8003854 <transformRectangleAndPointsPlace+0x2b8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4aac      	ldr	r2, [pc, #688]	; (8003858 <transformRectangleAndPointsPlace+0x2bc>)
 80035a8:	6013      	str	r3, [r2, #0]
	translation2[1] = bottom_left_jog2[1];
 80035aa:	4baa      	ldr	r3, [pc, #680]	; (8003854 <transformRectangleAndPointsPlace+0x2b8>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4aaa      	ldr	r2, [pc, #680]	; (8003858 <transformRectangleAndPointsPlace+0x2bc>)
 80035b0:	6053      	str	r3, [r2, #4]

	bottom_right_jog2[0] = bottom_right_jog2[0] - translation2[0];
 80035b2:	4baa      	ldr	r3, [pc, #680]	; (800385c <transformRectangleAndPointsPlace+0x2c0>)
 80035b4:	ed93 7a00 	vldr	s14, [r3]
 80035b8:	4ba7      	ldr	r3, [pc, #668]	; (8003858 <transformRectangleAndPointsPlace+0x2bc>)
 80035ba:	edd3 7a00 	vldr	s15, [r3]
 80035be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035c2:	4ba6      	ldr	r3, [pc, #664]	; (800385c <transformRectangleAndPointsPlace+0x2c0>)
 80035c4:	edc3 7a00 	vstr	s15, [r3]
	bottom_right_jog2[1] = bottom_right_jog2[1] - translation2[1];
 80035c8:	4ba4      	ldr	r3, [pc, #656]	; (800385c <transformRectangleAndPointsPlace+0x2c0>)
 80035ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80035ce:	4ba2      	ldr	r3, [pc, #648]	; (8003858 <transformRectangleAndPointsPlace+0x2bc>)
 80035d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80035d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035d8:	4ba0      	ldr	r3, [pc, #640]	; (800385c <transformRectangleAndPointsPlace+0x2c0>)
 80035da:	edc3 7a01 	vstr	s15, [r3, #4]

	dot_product2 = 60 * bottom_right_jog2[0] + bottom_right_jog2[1] * 0;
 80035de:	4b9f      	ldr	r3, [pc, #636]	; (800385c <transformRectangleAndPointsPlace+0x2c0>)
 80035e0:	edd3 7a00 	vldr	s15, [r3]
 80035e4:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8003860 <transformRectangleAndPointsPlace+0x2c4>
 80035e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035ec:	4b9b      	ldr	r3, [pc, #620]	; (800385c <transformRectangleAndPointsPlace+0x2c0>)
 80035ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80035f2:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8003864 <transformRectangleAndPointsPlace+0x2c8>
 80035f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80035fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035fe:	4b9a      	ldr	r3, [pc, #616]	; (8003868 <transformRectangleAndPointsPlace+0x2cc>)
 8003600:	edc3 7a00 	vstr	s15, [r3]
	in_theta2 = dot_product2 / vectorsize2;
 8003604:	4b98      	ldr	r3, [pc, #608]	; (8003868 <transformRectangleAndPointsPlace+0x2cc>)
 8003606:	edd3 6a00 	vldr	s13, [r3]
 800360a:	4b98      	ldr	r3, [pc, #608]	; (800386c <transformRectangleAndPointsPlace+0x2d0>)
 800360c:	ed93 7a00 	vldr	s14, [r3]
 8003610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003614:	4b96      	ldr	r3, [pc, #600]	; (8003870 <transformRectangleAndPointsPlace+0x2d4>)
 8003616:	edc3 7a00 	vstr	s15, [r3]
	theta2 = -acos(in_theta2);
 800361a:	4b95      	ldr	r3, [pc, #596]	; (8003870 <transformRectangleAndPointsPlace+0x2d4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f7fc ff3e 	bl	80004a0 <__aeabi_f2d>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	ec43 2b10 	vmov	d0, r2, r3
 800362c:	f008 fa10 	bl	800ba50 <acos>
 8003630:	ec53 2b10 	vmov	r2, r3, d0
 8003634:	4610      	mov	r0, r2
 8003636:	4619      	mov	r1, r3
 8003638:	f7fd fa62 	bl	8000b00 <__aeabi_d2f>
 800363c:	4603      	mov	r3, r0
 800363e:	ee07 3a90 	vmov	s15, r3
 8003642:	eef1 7a67 	vneg.f32	s15, s15
 8003646:	4b8b      	ldr	r3, [pc, #556]	; (8003874 <transformRectangleAndPointsPlace+0x2d8>)
 8003648:	edc3 7a00 	vstr	s15, [r3]

	T_rotation2[0][0] = cos(theta2);
 800364c:	4b89      	ldr	r3, [pc, #548]	; (8003874 <transformRectangleAndPointsPlace+0x2d8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7fc ff25 	bl	80004a0 <__aeabi_f2d>
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	ec43 2b10 	vmov	d0, r2, r3
 800365e:	f008 f8cb 	bl	800b7f8 <cos>
 8003662:	ec53 2b10 	vmov	r2, r3, d0
 8003666:	4610      	mov	r0, r2
 8003668:	4619      	mov	r1, r3
 800366a:	f7fd fa49 	bl	8000b00 <__aeabi_d2f>
 800366e:	4603      	mov	r3, r0
 8003670:	4a81      	ldr	r2, [pc, #516]	; (8003878 <transformRectangleAndPointsPlace+0x2dc>)
 8003672:	6013      	str	r3, [r2, #0]
	T_rotation2[0][1] = -sin(theta2);
 8003674:	4b7f      	ldr	r3, [pc, #508]	; (8003874 <transformRectangleAndPointsPlace+0x2d8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f7fc ff11 	bl	80004a0 <__aeabi_f2d>
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	ec43 2b10 	vmov	d0, r2, r3
 8003686:	f008 f98b 	bl	800b9a0 <sin>
 800368a:	ec53 2b10 	vmov	r2, r3, d0
 800368e:	4610      	mov	r0, r2
 8003690:	4619      	mov	r1, r3
 8003692:	f7fd fa35 	bl	8000b00 <__aeabi_d2f>
 8003696:	4603      	mov	r3, r0
 8003698:	ee07 3a90 	vmov	s15, r3
 800369c:	eef1 7a67 	vneg.f32	s15, s15
 80036a0:	4b75      	ldr	r3, [pc, #468]	; (8003878 <transformRectangleAndPointsPlace+0x2dc>)
 80036a2:	edc3 7a01 	vstr	s15, [r3, #4]
	T_rotation2[1][0] = sin(theta2);
 80036a6:	4b73      	ldr	r3, [pc, #460]	; (8003874 <transformRectangleAndPointsPlace+0x2d8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fc fef8 	bl	80004a0 <__aeabi_f2d>
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	ec43 2b10 	vmov	d0, r2, r3
 80036b8:	f008 f972 	bl	800b9a0 <sin>
 80036bc:	ec53 2b10 	vmov	r2, r3, d0
 80036c0:	4610      	mov	r0, r2
 80036c2:	4619      	mov	r1, r3
 80036c4:	f7fd fa1c 	bl	8000b00 <__aeabi_d2f>
 80036c8:	4603      	mov	r3, r0
 80036ca:	4a6b      	ldr	r2, [pc, #428]	; (8003878 <transformRectangleAndPointsPlace+0x2dc>)
 80036cc:	6093      	str	r3, [r2, #8]
	T_rotation2[1][1] = cos(theta2);
 80036ce:	4b69      	ldr	r3, [pc, #420]	; (8003874 <transformRectangleAndPointsPlace+0x2d8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fc fee4 	bl	80004a0 <__aeabi_f2d>
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	ec43 2b10 	vmov	d0, r2, r3
 80036e0:	f008 f88a 	bl	800b7f8 <cos>
 80036e4:	ec53 2b10 	vmov	r2, r3, d0
 80036e8:	4610      	mov	r0, r2
 80036ea:	4619      	mov	r1, r3
 80036ec:	f7fd fa08 	bl	8000b00 <__aeabi_d2f>
 80036f0:	4603      	mov	r3, r0
 80036f2:	4a61      	ldr	r2, [pc, #388]	; (8003878 <transformRectangleAndPointsPlace+0x2dc>)
 80036f4:	60d3      	str	r3, [r2, #12]

	T2[0][0] = T_rotation2[0][0];
 80036f6:	4b60      	ldr	r3, [pc, #384]	; (8003878 <transformRectangleAndPointsPlace+0x2dc>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a60      	ldr	r2, [pc, #384]	; (800387c <transformRectangleAndPointsPlace+0x2e0>)
 80036fc:	6013      	str	r3, [r2, #0]
	T2[0][1] = T_rotation2[0][1];
 80036fe:	4b5e      	ldr	r3, [pc, #376]	; (8003878 <transformRectangleAndPointsPlace+0x2dc>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	4a5e      	ldr	r2, [pc, #376]	; (800387c <transformRectangleAndPointsPlace+0x2e0>)
 8003704:	6053      	str	r3, [r2, #4]
	T2[0][2] = translation2[0];
 8003706:	4b54      	ldr	r3, [pc, #336]	; (8003858 <transformRectangleAndPointsPlace+0x2bc>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a5c      	ldr	r2, [pc, #368]	; (800387c <transformRectangleAndPointsPlace+0x2e0>)
 800370c:	6093      	str	r3, [r2, #8]
	T2[1][0] = T_rotation2[1][0];
 800370e:	4b5a      	ldr	r3, [pc, #360]	; (8003878 <transformRectangleAndPointsPlace+0x2dc>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	4a5a      	ldr	r2, [pc, #360]	; (800387c <transformRectangleAndPointsPlace+0x2e0>)
 8003714:	60d3      	str	r3, [r2, #12]
	T2[1][1] = T_rotation2[1][1];
 8003716:	4b58      	ldr	r3, [pc, #352]	; (8003878 <transformRectangleAndPointsPlace+0x2dc>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	4a58      	ldr	r2, [pc, #352]	; (800387c <transformRectangleAndPointsPlace+0x2e0>)
 800371c:	6113      	str	r3, [r2, #16]
	T2[1][2] = translation2[1];
 800371e:	4b4e      	ldr	r3, [pc, #312]	; (8003858 <transformRectangleAndPointsPlace+0x2bc>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4a56      	ldr	r2, [pc, #344]	; (800387c <transformRectangleAndPointsPlace+0x2e0>)
 8003724:	6153      	str	r3, [r2, #20]
	T2[2][0] = 0;
 8003726:	4b55      	ldr	r3, [pc, #340]	; (800387c <transformRectangleAndPointsPlace+0x2e0>)
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	619a      	str	r2, [r3, #24]
	T2[2][1] = 0;
 800372e:	4b53      	ldr	r3, [pc, #332]	; (800387c <transformRectangleAndPointsPlace+0x2e0>)
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	61da      	str	r2, [r3, #28]
	T2[2][2] = 1;
 8003736:	4b51      	ldr	r3, [pc, #324]	; (800387c <transformRectangleAndPointsPlace+0x2e0>)
 8003738:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800373c:	621a      	str	r2, [r3, #32]

	// Transform the rectangle
	for (int i = 0; i < 5; i++) {
 800373e:	2300      	movs	r3, #0
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
 8003742:	e029      	b.n	8003798 <transformRectangleAndPointsPlace+0x1fc>
		homogeneousRectangle2[i][0] = rectangle2[i][0];
 8003744:	4a4e      	ldr	r2, [pc, #312]	; (8003880 <transformRectangleAndPointsPlace+0x2e4>)
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	4413      	add	r3, r2
 800374c:	6819      	ldr	r1, [r3, #0]
 800374e:	484d      	ldr	r0, [pc, #308]	; (8003884 <transformRectangleAndPointsPlace+0x2e8>)
 8003750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003752:	4613      	mov	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4413      	add	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4403      	add	r3, r0
 800375c:	6019      	str	r1, [r3, #0]
		homogeneousRectangle2[i][1] = rectangle2[i][1];
 800375e:	4a48      	ldr	r2, [pc, #288]	; (8003880 <transformRectangleAndPointsPlace+0x2e4>)
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	4413      	add	r3, r2
 8003766:	3304      	adds	r3, #4
 8003768:	6819      	ldr	r1, [r3, #0]
 800376a:	4846      	ldr	r0, [pc, #280]	; (8003884 <transformRectangleAndPointsPlace+0x2e8>)
 800376c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800376e:	4613      	mov	r3, r2
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4403      	add	r3, r0
 8003778:	3304      	adds	r3, #4
 800377a:	6019      	str	r1, [r3, #0]
		homogeneousRectangle2[i][2] = 1;
 800377c:	4941      	ldr	r1, [pc, #260]	; (8003884 <transformRectangleAndPointsPlace+0x2e8>)
 800377e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003780:	4613      	mov	r3, r2
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	3308      	adds	r3, #8
 800378c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003790:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 5; i++) {
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	3301      	adds	r3, #1
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	2b04      	cmp	r3, #4
 800379c:	ddd2      	ble.n	8003744 <transformRectangleAndPointsPlace+0x1a8>
	}

	for (int i = 0; i < 5; i++) {
 800379e:	2300      	movs	r3, #0
 80037a0:	623b      	str	r3, [r7, #32]
 80037a2:	e050      	b.n	8003846 <transformRectangleAndPointsPlace+0x2aa>
		for (int j = 0; j < 3; j++) {
 80037a4:	2300      	movs	r3, #0
 80037a6:	61fb      	str	r3, [r7, #28]
 80037a8:	e047      	b.n	800383a <transformRectangleAndPointsPlace+0x29e>
			transformedRectangle2[i][j] = 0;
 80037aa:	4937      	ldr	r1, [pc, #220]	; (8003888 <transformRectangleAndPointsPlace+0x2ec>)
 80037ac:	6a3a      	ldr	r2, [r7, #32]
 80037ae:	4613      	mov	r3, r2
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	4413      	add	r3, r2
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
			for (int k = 0; k < 3; k++) {
 80037c2:	2300      	movs	r3, #0
 80037c4:	61bb      	str	r3, [r7, #24]
 80037c6:	e032      	b.n	800382e <transformRectangleAndPointsPlace+0x292>
				transformedRectangle2[i][j] += homogeneousRectangle2[i][k]
 80037c8:	492f      	ldr	r1, [pc, #188]	; (8003888 <transformRectangleAndPointsPlace+0x2ec>)
 80037ca:	6a3a      	ldr	r2, [r7, #32]
 80037cc:	4613      	mov	r3, r2
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	4413      	add	r3, r2
 80037d2:	69fa      	ldr	r2, [r7, #28]
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	ed93 7a00 	vldr	s14, [r3]
 80037de:	4929      	ldr	r1, [pc, #164]	; (8003884 <transformRectangleAndPointsPlace+0x2e8>)
 80037e0:	6a3a      	ldr	r2, [r7, #32]
 80037e2:	4613      	mov	r3, r2
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	4413      	add	r3, r2
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4413      	add	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	edd3 6a00 	vldr	s13, [r3]
						* T2[k][j];
 80037f4:	4921      	ldr	r1, [pc, #132]	; (800387c <transformRectangleAndPointsPlace+0x2e0>)
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4613      	mov	r3, r2
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	4413      	add	r3, r2
 80037fe:	69fa      	ldr	r2, [r7, #28]
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	edd3 7a00 	vldr	s15, [r3]
 800380a:	ee66 7aa7 	vmul.f32	s15, s13, s15
				transformedRectangle2[i][j] += homogeneousRectangle2[i][k]
 800380e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003812:	491d      	ldr	r1, [pc, #116]	; (8003888 <transformRectangleAndPointsPlace+0x2ec>)
 8003814:	6a3a      	ldr	r2, [r7, #32]
 8003816:	4613      	mov	r3, r2
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	4413      	add	r3, r2
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	edc3 7a00 	vstr	s15, [r3]
			for (int k = 0; k < 3; k++) {
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	3301      	adds	r3, #1
 800382c:	61bb      	str	r3, [r7, #24]
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	2b02      	cmp	r3, #2
 8003832:	ddc9      	ble.n	80037c8 <transformRectangleAndPointsPlace+0x22c>
		for (int j = 0; j < 3; j++) {
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	3301      	adds	r3, #1
 8003838:	61fb      	str	r3, [r7, #28]
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	2b02      	cmp	r3, #2
 800383e:	ddb4      	ble.n	80037aa <transformRectangleAndPointsPlace+0x20e>
	for (int i = 0; i < 5; i++) {
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	3301      	adds	r3, #1
 8003844:	623b      	str	r3, [r7, #32]
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	2b04      	cmp	r3, #4
 800384a:	ddab      	ble.n	80037a4 <transformRectangleAndPointsPlace+0x208>
			}
		}
	}

	// Transform the points
	for (int i = 0; i < 9; i++) {
 800384c:	2300      	movs	r3, #0
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	e046      	b.n	80038e0 <transformRectangleAndPointsPlace+0x344>
 8003852:	bf00      	nop
 8003854:	20000d30 	.word	0x20000d30
 8003858:	20000ba8 	.word	0x20000ba8
 800385c:	20000d38 	.word	0x20000d38
 8003860:	42700000 	.word	0x42700000
 8003864:	00000000 	.word	0x00000000
 8003868:	20000d24 	.word	0x20000d24
 800386c:	20000378 	.word	0x20000378
 8003870:	20000d2c 	.word	0x20000d2c
 8003874:	20000d28 	.word	0x20000d28
 8003878:	20000b8c 	.word	0x20000b8c
 800387c:	20000bb0 	.word	0x20000bb0
 8003880:	20000308 	.word	0x20000308
 8003884:	20000bd4 	.word	0x20000bd4
 8003888:	20000c10 	.word	0x20000c10
		homogeneousPoints2[i][0] = points2[i][0];
 800388c:	4a7d      	ldr	r2, [pc, #500]	; (8003a84 <transformRectangleAndPointsPlace+0x4e8>)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	4413      	add	r3, r2
 8003894:	6819      	ldr	r1, [r3, #0]
 8003896:	487c      	ldr	r0, [pc, #496]	; (8003a88 <transformRectangleAndPointsPlace+0x4ec>)
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	4613      	mov	r3, r2
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4403      	add	r3, r0
 80038a4:	6019      	str	r1, [r3, #0]
		homogeneousPoints2[i][1] = points2[i][1];
 80038a6:	4a77      	ldr	r2, [pc, #476]	; (8003a84 <transformRectangleAndPointsPlace+0x4e8>)
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	4413      	add	r3, r2
 80038ae:	3304      	adds	r3, #4
 80038b0:	6819      	ldr	r1, [r3, #0]
 80038b2:	4875      	ldr	r0, [pc, #468]	; (8003a88 <transformRectangleAndPointsPlace+0x4ec>)
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	4613      	mov	r3, r2
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4403      	add	r3, r0
 80038c0:	3304      	adds	r3, #4
 80038c2:	6019      	str	r1, [r3, #0]
		homogeneousPoints2[i][2] = 1;
 80038c4:	4970      	ldr	r1, [pc, #448]	; (8003a88 <transformRectangleAndPointsPlace+0x4ec>)
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	4613      	mov	r3, r2
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	3308      	adds	r3, #8
 80038d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80038d8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 9; i++) {
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	3301      	adds	r3, #1
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	ddd2      	ble.n	800388c <transformRectangleAndPointsPlace+0x2f0>
	}

	for (int i = 0; i < 9; i++) {
 80038e6:	2300      	movs	r3, #0
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	e050      	b.n	800398e <transformRectangleAndPointsPlace+0x3f2>
		for (int j = 0; j < 3; j++) {
 80038ec:	2300      	movs	r3, #0
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	e047      	b.n	8003982 <transformRectangleAndPointsPlace+0x3e6>
			transformedPoints2[i][j] = 0;
 80038f2:	4966      	ldr	r1, [pc, #408]	; (8003a8c <transformRectangleAndPointsPlace+0x4f0>)
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4613      	mov	r3, r2
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	4413      	add	r3, r2
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4413      	add	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
			for (int k = 0; k < 3; k++) {
 800390a:	2300      	movs	r3, #0
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	e032      	b.n	8003976 <transformRectangleAndPointsPlace+0x3da>

				transformedPoints2[i][j] += homogeneousPoints2[i][k] * T2[k][j];
 8003910:	495e      	ldr	r1, [pc, #376]	; (8003a8c <transformRectangleAndPointsPlace+0x4f0>)
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4613      	mov	r3, r2
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	4413      	add	r3, r2
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	ed93 7a00 	vldr	s14, [r3]
 8003926:	4958      	ldr	r1, [pc, #352]	; (8003a88 <transformRectangleAndPointsPlace+0x4ec>)
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4613      	mov	r3, r2
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	4413      	add	r3, r2
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	edd3 6a00 	vldr	s13, [r3]
 800393c:	4954      	ldr	r1, [pc, #336]	; (8003a90 <transformRectangleAndPointsPlace+0x4f4>)
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	4613      	mov	r3, r2
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	4413      	add	r3, r2
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	edd3 7a00 	vldr	s15, [r3]
 8003952:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800395a:	494c      	ldr	r1, [pc, #304]	; (8003a8c <transformRectangleAndPointsPlace+0x4f0>)
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4613      	mov	r3, r2
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	4413      	add	r3, r2
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	edc3 7a00 	vstr	s15, [r3]
			for (int k = 0; k < 3; k++) {
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	3301      	adds	r3, #1
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2b02      	cmp	r3, #2
 800397a:	ddc9      	ble.n	8003910 <transformRectangleAndPointsPlace+0x374>
		for (int j = 0; j < 3; j++) {
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	3301      	adds	r3, #1
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b02      	cmp	r3, #2
 8003986:	ddb4      	ble.n	80038f2 <transformRectangleAndPointsPlace+0x356>
	for (int i = 0; i < 9; i++) {
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	3301      	adds	r3, #1
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	2b08      	cmp	r3, #8
 8003992:	ddab      	ble.n	80038ec <transformRectangleAndPointsPlace+0x350>
			}
		}
	}

	// Translation points
	for (int i = 0; i < 9; i++) {
 8003994:	2300      	movs	r3, #0
 8003996:	607b      	str	r3, [r7, #4]
 8003998:	e032      	b.n	8003a00 <transformRectangleAndPointsPlace+0x464>
		transformedPoints2[i][0] = transformedPoints2[i][0] + translation2[0];
 800399a:	493c      	ldr	r1, [pc, #240]	; (8003a8c <transformRectangleAndPointsPlace+0x4f0>)
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	4613      	mov	r3, r2
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	4413      	add	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	ed93 7a00 	vldr	s14, [r3]
 80039ac:	4b39      	ldr	r3, [pc, #228]	; (8003a94 <transformRectangleAndPointsPlace+0x4f8>)
 80039ae:	edd3 7a00 	vldr	s15, [r3]
 80039b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039b6:	4935      	ldr	r1, [pc, #212]	; (8003a8c <transformRectangleAndPointsPlace+0x4f0>)
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	edc3 7a00 	vstr	s15, [r3]
		transformedPoints2[i][1] = transformedPoints2[i][1] + translation2[1];
 80039c8:	4930      	ldr	r1, [pc, #192]	; (8003a8c <transformRectangleAndPointsPlace+0x4f0>)
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	3304      	adds	r3, #4
 80039d8:	ed93 7a00 	vldr	s14, [r3]
 80039dc:	4b2d      	ldr	r3, [pc, #180]	; (8003a94 <transformRectangleAndPointsPlace+0x4f8>)
 80039de:	edd3 7a01 	vldr	s15, [r3, #4]
 80039e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039e6:	4929      	ldr	r1, [pc, #164]	; (8003a8c <transformRectangleAndPointsPlace+0x4f0>)
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	440b      	add	r3, r1
 80039f4:	3304      	adds	r3, #4
 80039f6:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 9; i++) {
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3301      	adds	r3, #1
 80039fe:	607b      	str	r3, [r7, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b08      	cmp	r3, #8
 8003a04:	ddc9      	ble.n	800399a <transformRectangleAndPointsPlace+0x3fe>
		//transformedPoints2[i][0] = transformedPoints2[i][0] *(-1);

	}

	// Translation rectangle
	for (int i = 0; i < 5; i++) {
 8003a06:	2300      	movs	r3, #0
 8003a08:	603b      	str	r3, [r7, #0]
 8003a0a:	e032      	b.n	8003a72 <transformRectangleAndPointsPlace+0x4d6>
		transformedRectangle2[i][0] = transformedRectangle2[i][0]
 8003a0c:	4922      	ldr	r1, [pc, #136]	; (8003a98 <transformRectangleAndPointsPlace+0x4fc>)
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	4613      	mov	r3, r2
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	ed93 7a00 	vldr	s14, [r3]
				+ +translation2[0];
 8003a1e:	4b1d      	ldr	r3, [pc, #116]	; (8003a94 <transformRectangleAndPointsPlace+0x4f8>)
 8003a20:	edd3 7a00 	vldr	s15, [r3]
 8003a24:	ee77 7a27 	vadd.f32	s15, s14, s15
		transformedRectangle2[i][0] = transformedRectangle2[i][0]
 8003a28:	491b      	ldr	r1, [pc, #108]	; (8003a98 <transformRectangleAndPointsPlace+0x4fc>)
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	4413      	add	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	edc3 7a00 	vstr	s15, [r3]
		transformedRectangle2[i][1] = transformedRectangle2[i][1]
 8003a3a:	4917      	ldr	r1, [pc, #92]	; (8003a98 <transformRectangleAndPointsPlace+0x4fc>)
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	4413      	add	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	3304      	adds	r3, #4
 8003a4a:	ed93 7a00 	vldr	s14, [r3]
				+ translation2[1];
 8003a4e:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <transformRectangleAndPointsPlace+0x4f8>)
 8003a50:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a54:	ee77 7a27 	vadd.f32	s15, s14, s15
		transformedRectangle2[i][1] = transformedRectangle2[i][1]
 8003a58:	490f      	ldr	r1, [pc, #60]	; (8003a98 <transformRectangleAndPointsPlace+0x4fc>)
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	3304      	adds	r3, #4
 8003a68:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 5; i++) {
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	603b      	str	r3, [r7, #0]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	ddc9      	ble.n	8003a0c <transformRectangleAndPointsPlace+0x470>
	}

}
 8003a78:	bf00      	nop
 8003a7a:	bf00      	nop
 8003a7c:	3728      	adds	r7, #40	; 0x28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000330 	.word	0x20000330
 8003a88:	20000c4c 	.word	0x20000c4c
 8003a8c:	20000cb8 	.word	0x20000cb8
 8003a90:	20000bb0 	.word	0x20000bb0
 8003a94:	20000ba8 	.word	0x20000ba8
 8003a98:	20000c10 	.word	0x20000c10

08003a9c <home_yaxis>:
void home_yaxis(){
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
	if(homeflag == 0){
 8003aa0:	4b22      	ldr	r3, [pc, #136]	; (8003b2c <home_yaxis+0x90>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10c      	bne.n	8003ac2 <home_yaxis+0x26>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 16383); // 20 %
 8003aa8:	4b21      	ldr	r3, [pc, #132]	; (8003b30 <home_yaxis+0x94>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8003ab0:	635a      	str	r2, [r3, #52]	; 0x34
		path = 0;
 8003ab2:	4b20      	ldr	r3, [pc, #128]	; (8003b34 <home_yaxis+0x98>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8003ab8:	2201      	movs	r2, #1
 8003aba:	2180      	movs	r1, #128	; 0x80
 8003abc:	481e      	ldr	r0, [pc, #120]	; (8003b38 <home_yaxis+0x9c>)
 8003abe:	f003 f923 	bl	8006d08 <HAL_GPIO_WritePin>
	}
	if (Joystick_AND_Sensor[2] > 3000)
 8003ac2:	4b1e      	ldr	r3, [pc, #120]	; (8003b3c <home_yaxis+0xa0>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d92c      	bls.n	8003b28 <home_yaxis+0x8c>
	{
		Joystick_Control = 0;
 8003ace:	4b1c      	ldr	r3, [pc, #112]	; (8003b40 <home_yaxis+0xa4>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]
		homeflag = 1;
 8003ad4:	4b15      	ldr	r3, [pc, #84]	; (8003b2c <home_yaxis+0x90>)
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
		s=0;
 8003ada:	4b1a      	ldr	r3, [pc, #104]	; (8003b44 <home_yaxis+0xa8>)
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
		s2=0;
 8003ae2:	4b19      	ldr	r3, [pc, #100]	; (8003b48 <home_yaxis+0xac>)
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
		TIM2->CNT = 0;
 8003aea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003aee:	2200      	movs	r2, #0
 8003af0:	625a      	str	r2, [r3, #36]	; 0x24
		start_p = 0;
 8003af2:	4b16      	ldr	r3, [pc, #88]	; (8003b4c <home_yaxis+0xb0>)
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]
		stop_p = 350;
 8003afa:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <home_yaxis+0xb4>)
 8003afc:	4a15      	ldr	r2, [pc, #84]	; (8003b54 <home_yaxis+0xb8>)
 8003afe:	601a      	str	r2, [r3, #0]
		start_v = 0; // qk
 8003b00:	4b15      	ldr	r3, [pc, #84]	; (8003b58 <home_yaxis+0xbc>)
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]
		stop_v = 0; // q_dotk+1
 8003b08:	4b14      	ldr	r3, [pc, #80]	; (8003b5c <home_yaxis+0xc0>)
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]
		timecycle = 1.5;
 8003b10:	4b13      	ldr	r3, [pc, #76]	; (8003b60 <home_yaxis+0xc4>)
 8003b12:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8003b16:	601a      	str	r2, [r3, #0]
		main_Qubic();
 8003b18:	f001 f996 	bl	8004e48 <main_Qubic>
		path = 1;
 8003b1c:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <home_yaxis+0x98>)
 8003b1e:	2201      	movs	r2, #1
 8003b20:	601a      	str	r2, [r3, #0]
		Mobus = Initial;
 8003b22:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <home_yaxis+0xc8>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]
	}
}
 8003b28:	bf00      	nop
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	20000998 	.word	0x20000998
 8003b30:	200006a4 	.word	0x200006a4
 8003b34:	200012b4 	.word	0x200012b4
 8003b38:	40020000 	.word	0x40020000
 8003b3c:	200012c4 	.word	0x200012c4
 8003b40:	2000037c 	.word	0x2000037c
 8003b44:	20001328 	.word	0x20001328
 8003b48:	20001334 	.word	0x20001334
 8003b4c:	200009c8 	.word	0x200009c8
 8003b50:	200009cc 	.word	0x200009cc
 8003b54:	43af0000 	.word	0x43af0000
 8003b58:	200009d0 	.word	0x200009d0
 8003b5c:	200009d4 	.word	0x200009d4
 8003b60:	200009d8 	.word	0x200009d8
 8003b64:	20000d40 	.word	0x20000d40

08003b68 <flowmodbus>:
void flowmodbus() {
 8003b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b6c:	b08e      	sub	sp, #56	; 0x38
 8003b6e:	af00      	add	r7, sp, #0
	switch (Mobus) {
 8003b70:	4ba5      	ldr	r3, [pc, #660]	; (8003e08 <flowmodbus+0x2a0>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b07      	cmp	r3, #7
 8003b76:	f200 879a 	bhi.w	8004aae <flowmodbus+0xf46>
 8003b7a:	a201      	add	r2, pc, #4	; (adr r2, 8003b80 <flowmodbus+0x18>)
 8003b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b80:	08003ba1 	.word	0x08003ba1
 8003b84:	08003de7 	.word	0x08003de7
 8003b88:	080040dd 	.word	0x080040dd
 8003b8c:	0800439b 	.word	0x0800439b
 8003b90:	080043fd 	.word	0x080043fd
 8003b94:	08004637 	.word	0x08004637
 8003b98:	080044b7 	.word	0x080044b7
 8003b9c:	08004579 	.word	0x08004579
	case Initial:
		if (registerFrame[1].U16 == 0b00010) { // Set Place
 8003ba0:	4b9a      	ldr	r3, [pc, #616]	; (8003e0c <flowmodbus+0x2a4>)
 8003ba2:	885b      	ldrh	r3, [r3, #2]
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d113      	bne.n	8003bd0 <flowmodbus+0x68>
			registerFrame[1].U16 = 0; // 0x01 base system reset place tray
 8003ba8:	4b98      	ldr	r3, [pc, #608]	; (8003e0c <flowmodbus+0x2a4>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 2; // 0x10 y-axis Set Place
 8003bae:	4b97      	ldr	r3, [pc, #604]	; (8003e0c <flowmodbus+0x2a4>)
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	841a      	strh	r2, [r3, #32]
			Joystick_Control = 1;
 8003bb4:	4b96      	ldr	r3, [pc, #600]	; (8003e10 <flowmodbus+0x2a8>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]
			choice = 1;
 8003bba:	4b96      	ldr	r3, [pc, #600]	; (8003e14 <flowmodbus+0x2ac>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]
			I2C_all(&data_read);
 8003bc0:	4895      	ldr	r0, [pc, #596]	; (8003e18 <flowmodbus+0x2b0>)
 8003bc2:	f7ff f979 	bl	8002eb8 <I2C_all>
			Mobus = Jogging_Place;
 8003bc6:	4b90      	ldr	r3, [pc, #576]	; (8003e08 <flowmodbus+0x2a0>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	701a      	strb	r2, [r3, #0]
				point_x[b++] = transformedPoints[j][0];
				point_x[b++] = transformedPoints2[j][0];
			}
			Mobus = Run_TrayMode;
		}
		break;
 8003bcc:	f000 bf6a 	b.w	8004aa4 <flowmodbus+0xf3c>
		} else if (registerFrame[1].U16 == 0b00001) { //Set Pick
 8003bd0:	4b8e      	ldr	r3, [pc, #568]	; (8003e0c <flowmodbus+0x2a4>)
 8003bd2:	885b      	ldrh	r3, [r3, #2]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d113      	bne.n	8003c00 <flowmodbus+0x98>
			registerFrame[1].U16 = 0; // 0x01 base system reset place tray
 8003bd8:	4b8c      	ldr	r3, [pc, #560]	; (8003e0c <flowmodbus+0x2a4>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 1; // 0x10 y-axis Set Pick
 8003bde:	4b8b      	ldr	r3, [pc, #556]	; (8003e0c <flowmodbus+0x2a4>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	841a      	strh	r2, [r3, #32]
			Joystick_Control = 1;
 8003be4:	4b8a      	ldr	r3, [pc, #552]	; (8003e10 <flowmodbus+0x2a8>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	601a      	str	r2, [r3, #0]
			choice = 1;
 8003bea:	4b8a      	ldr	r3, [pc, #552]	; (8003e14 <flowmodbus+0x2ac>)
 8003bec:	2201      	movs	r2, #1
 8003bee:	601a      	str	r2, [r3, #0]
			I2C_all(&data_read);
 8003bf0:	4889      	ldr	r0, [pc, #548]	; (8003e18 <flowmodbus+0x2b0>)
 8003bf2:	f7ff f961 	bl	8002eb8 <I2C_all>
			Mobus = Jogging_Pick;
 8003bf6:	4b84      	ldr	r3, [pc, #528]	; (8003e08 <flowmodbus+0x2a0>)
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	701a      	strb	r2, [r3, #0]
		break;
 8003bfc:	f000 bf52 	b.w	8004aa4 <flowmodbus+0xf3c>
		} else if (registerFrame[1].U16 == 0b10000) { // Run point Mode
 8003c00:	4b82      	ldr	r3, [pc, #520]	; (8003e0c <flowmodbus+0x2a4>)
 8003c02:	885b      	ldrh	r3, [r3, #2]
 8003c04:	2b10      	cmp	r3, #16
 8003c06:	d16e      	bne.n	8003ce6 <flowmodbus+0x17e>
			registerFrame[1].U16 = 0; // base system run point mode reset
 8003c08:	4b80      	ldr	r3, [pc, #512]	; (8003e0c <flowmodbus+0x2a4>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 32; // y-axis moving status go point x
 8003c0e:	4b7f      	ldr	r3, [pc, #508]	; (8003e0c <flowmodbus+0x2a4>)
 8003c10:	2220      	movs	r2, #32
 8003c12:	841a      	strh	r2, [r3, #32]
			Joystick_Control = 0;
 8003c14:	4b7e      	ldr	r3, [pc, #504]	; (8003e10 <flowmodbus+0x2a8>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]
			indexposition = 0;
 8003c1a:	4b80      	ldr	r3, [pc, #512]	; (8003e1c <flowmodbus+0x2b4>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]
			if (registerFrame[49].U16 > 60000)
 8003c20:	4b7a      	ldr	r3, [pc, #488]	; (8003e0c <flowmodbus+0x2a4>)
 8003c22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003c26:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d91c      	bls.n	8003c68 <flowmodbus+0x100>
				posy_point = -((UINT16_MAX - registerFrame[49].U16) / 10.0);
 8003c2e:	4b77      	ldr	r3, [pc, #476]	; (8003e0c <flowmodbus+0x2a4>)
 8003c30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003c34:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003c38:	33ff      	adds	r3, #255	; 0xff
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fc fc1e 	bl	800047c <__aeabi_i2d>
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	4b76      	ldr	r3, [pc, #472]	; (8003e20 <flowmodbus+0x2b8>)
 8003c46:	f7fc fdad 	bl	80007a4 <__aeabi_ddiv>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4610      	mov	r0, r2
 8003c50:	4619      	mov	r1, r3
 8003c52:	f7fc ff55 	bl	8000b00 <__aeabi_d2f>
 8003c56:	4603      	mov	r3, r0
 8003c58:	ee07 3a90 	vmov	s15, r3
 8003c5c:	eef1 7a67 	vneg.f32	s15, s15
 8003c60:	4b70      	ldr	r3, [pc, #448]	; (8003e24 <flowmodbus+0x2bc>)
 8003c62:	edc3 7a00 	vstr	s15, [r3]
 8003c66:	e01a      	b.n	8003c9e <flowmodbus+0x136>
			else if (registerFrame[49].U16 <= 3500) {
 8003c68:	4b68      	ldr	r3, [pc, #416]	; (8003e0c <flowmodbus+0x2a4>)
 8003c6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003c6e:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d813      	bhi.n	8003c9e <flowmodbus+0x136>
				posy_point = (registerFrame[49].U16 / 10.0);
 8003c76:	4b65      	ldr	r3, [pc, #404]	; (8003e0c <flowmodbus+0x2a4>)
 8003c78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7fc fbfd 	bl	800047c <__aeabi_i2d>
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	4b66      	ldr	r3, [pc, #408]	; (8003e20 <flowmodbus+0x2b8>)
 8003c88:	f7fc fd8c 	bl	80007a4 <__aeabi_ddiv>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4610      	mov	r0, r2
 8003c92:	4619      	mov	r1, r3
 8003c94:	f7fc ff34 	bl	8000b00 <__aeabi_d2f>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	4a62      	ldr	r2, [pc, #392]	; (8003e24 <flowmodbus+0x2bc>)
 8003c9c:	6013      	str	r3, [r2, #0]
			start_p = ReadDegree;
 8003c9e:	4b62      	ldr	r3, [pc, #392]	; (8003e28 <flowmodbus+0x2c0>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a62      	ldr	r2, [pc, #392]	; (8003e2c <flowmodbus+0x2c4>)
 8003ca4:	6013      	str	r3, [r2, #0]
			stop_p = posy_point+350;
 8003ca6:	4b5f      	ldr	r3, [pc, #380]	; (8003e24 <flowmodbus+0x2bc>)
 8003ca8:	edd3 7a00 	vldr	s15, [r3]
 8003cac:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8003e30 <flowmodbus+0x2c8>
 8003cb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003cb4:	4b5f      	ldr	r3, [pc, #380]	; (8003e34 <flowmodbus+0x2cc>)
 8003cb6:	edc3 7a00 	vstr	s15, [r3]
			start_v = 0; // qk
 8003cba:	4b5f      	ldr	r3, [pc, #380]	; (8003e38 <flowmodbus+0x2d0>)
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	601a      	str	r2, [r3, #0]
			stop_v = 0; // q_dotk+1
 8003cc2:	4b5e      	ldr	r3, [pc, #376]	; (8003e3c <flowmodbus+0x2d4>)
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]
			timecycle = 1.5;
 8003cca:	4b5d      	ldr	r3, [pc, #372]	; (8003e40 <flowmodbus+0x2d8>)
 8003ccc:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8003cd0:	601a      	str	r2, [r3, #0]
			main_Qubic();
 8003cd2:	f001 f8b9 	bl	8004e48 <main_Qubic>
			path = 1;
 8003cd6:	4b5b      	ldr	r3, [pc, #364]	; (8003e44 <flowmodbus+0x2dc>)
 8003cd8:	2201      	movs	r2, #1
 8003cda:	601a      	str	r2, [r3, #0]
			Mobus = Run_PointMode;
 8003cdc:	4b4a      	ldr	r3, [pc, #296]	; (8003e08 <flowmodbus+0x2a0>)
 8003cde:	2204      	movs	r2, #4
 8003ce0:	701a      	strb	r2, [r3, #0]
		break;
 8003ce2:	f000 bedf 	b.w	8004aa4 <flowmodbus+0xf3c>
		} else if (registerFrame[1].U16 == 0b00100) { // Set Home
 8003ce6:	4b49      	ldr	r3, [pc, #292]	; (8003e0c <flowmodbus+0x2a4>)
 8003ce8:	885b      	ldrh	r3, [r3, #2]
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d110      	bne.n	8003d10 <flowmodbus+0x1a8>
			registerFrame[1].U16 = 0;
 8003cee:	4b47      	ldr	r3, [pc, #284]	; (8003e0c <flowmodbus+0x2a4>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	805a      	strh	r2, [r3, #2]
			homeflag = 0;
 8003cf4:	4b54      	ldr	r3, [pc, #336]	; (8003e48 <flowmodbus+0x2e0>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]
			path = 0;
 8003cfa:	4b52      	ldr	r3, [pc, #328]	; (8003e44 <flowmodbus+0x2dc>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
			indexposition = 0;
 8003d00:	4b46      	ldr	r3, [pc, #280]	; (8003e1c <flowmodbus+0x2b4>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
			Mobus = Home;
 8003d06:	4b40      	ldr	r3, [pc, #256]	; (8003e08 <flowmodbus+0x2a0>)
 8003d08:	2203      	movs	r2, #3
 8003d0a:	701a      	strb	r2, [r3, #0]
		break;
 8003d0c:	f000 beca 	b.w	8004aa4 <flowmodbus+0xf3c>
		} else if (registerFrame[1].U16 == 0b01000) {
 8003d10:	4b3e      	ldr	r3, [pc, #248]	; (8003e0c <flowmodbus+0x2a4>)
 8003d12:	885b      	ldrh	r3, [r3, #2]
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	f040 86c5 	bne.w	8004aa4 <flowmodbus+0xf3c>
			Joystick_Control = 0;
 8003d1a:	4b3d      	ldr	r3, [pc, #244]	; (8003e10 <flowmodbus+0x2a8>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
			plustray = -1;
 8003d20:	4b4a      	ldr	r3, [pc, #296]	; (8003e4c <flowmodbus+0x2e4>)
 8003d22:	f04f 32ff 	mov.w	r2, #4294967295
 8003d26:	601a      	str	r2, [r3, #0]
			CaseTray = 0;
 8003d28:	4b49      	ldr	r3, [pc, #292]	; (8003e50 <flowmodbus+0x2e8>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
			registerFrame[1].U16 = 0;
 8003d2e:	4b37      	ldr	r3, [pc, #220]	; (8003e0c <flowmodbus+0x2a4>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	805a      	strh	r2, [r3, #2]
			k = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	62fb      	str	r3, [r7, #44]	; 0x2c
			b = 0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	62bb      	str	r3, [r7, #40]	; 0x28
			for (i = 0; i < 9; i++) {
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d40:	e022      	b.n	8003d88 <flowmodbus+0x220>
				point_y[k++] = transformedPoints[i][1];
 8003d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d44:	1c53      	adds	r3, r2, #1
 8003d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d48:	4842      	ldr	r0, [pc, #264]	; (8003e54 <flowmodbus+0x2ec>)
 8003d4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	440b      	add	r3, r1
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4403      	add	r3, r0
 8003d56:	3304      	adds	r3, #4
 8003d58:	6819      	ldr	r1, [r3, #0]
 8003d5a:	483f      	ldr	r0, [pc, #252]	; (8003e58 <flowmodbus+0x2f0>)
 8003d5c:	0093      	lsls	r3, r2, #2
 8003d5e:	4403      	add	r3, r0
 8003d60:	6019      	str	r1, [r3, #0]
				point_y[k++] = transformedPoints2[i][1];
 8003d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d64:	1c53      	adds	r3, r2, #1
 8003d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d68:	483c      	ldr	r0, [pc, #240]	; (8003e5c <flowmodbus+0x2f4>)
 8003d6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	440b      	add	r3, r1
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4403      	add	r3, r0
 8003d76:	3304      	adds	r3, #4
 8003d78:	6819      	ldr	r1, [r3, #0]
 8003d7a:	4837      	ldr	r0, [pc, #220]	; (8003e58 <flowmodbus+0x2f0>)
 8003d7c:	0093      	lsls	r3, r2, #2
 8003d7e:	4403      	add	r3, r0
 8003d80:	6019      	str	r1, [r3, #0]
			for (i = 0; i < 9; i++) {
 8003d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d84:	3301      	adds	r3, #1
 8003d86:	637b      	str	r3, [r7, #52]	; 0x34
 8003d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	ddd9      	ble.n	8003d42 <flowmodbus+0x1da>
			for (j = 0; j < 9; j++) {
 8003d8e:	2300      	movs	r3, #0
 8003d90:	633b      	str	r3, [r7, #48]	; 0x30
 8003d92:	e020      	b.n	8003dd6 <flowmodbus+0x26e>
				point_x[b++] = transformedPoints[j][0];
 8003d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d96:	1c53      	adds	r3, r2, #1
 8003d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d9a:	482e      	ldr	r0, [pc, #184]	; (8003e54 <flowmodbus+0x2ec>)
 8003d9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d9e:	460b      	mov	r3, r1
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	440b      	add	r3, r1
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4403      	add	r3, r0
 8003da8:	6819      	ldr	r1, [r3, #0]
 8003daa:	482d      	ldr	r0, [pc, #180]	; (8003e60 <flowmodbus+0x2f8>)
 8003dac:	0093      	lsls	r3, r2, #2
 8003dae:	4403      	add	r3, r0
 8003db0:	6019      	str	r1, [r3, #0]
				point_x[b++] = transformedPoints2[j][0];
 8003db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003db4:	1c53      	adds	r3, r2, #1
 8003db6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003db8:	4828      	ldr	r0, [pc, #160]	; (8003e5c <flowmodbus+0x2f4>)
 8003dba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	440b      	add	r3, r1
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4403      	add	r3, r0
 8003dc6:	6819      	ldr	r1, [r3, #0]
 8003dc8:	4825      	ldr	r0, [pc, #148]	; (8003e60 <flowmodbus+0x2f8>)
 8003dca:	0093      	lsls	r3, r2, #2
 8003dcc:	4403      	add	r3, r0
 8003dce:	6019      	str	r1, [r3, #0]
			for (j = 0; j < 9; j++) {
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8003dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	dddb      	ble.n	8003d94 <flowmodbus+0x22c>
			Mobus = Run_TrayMode;
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <flowmodbus+0x2a0>)
 8003dde:	2205      	movs	r2, #5
 8003de0:	701a      	strb	r2, [r3, #0]
		break;
 8003de2:	f000 be5f 	b.w	8004aa4 <flowmodbus+0xf3c>
	case Jogging_Place:
		//y-axis jogging
		if (Joystick_AND_Sensor[1] >= 3150) {
 8003de6:	4b1f      	ldr	r3, [pc, #124]	; (8003e64 <flowmodbus+0x2fc>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f640 424d 	movw	r2, #3149	; 0xc4d
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d940      	bls.n	8003e74 <flowmodbus+0x30c>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, JoystickSpeed);
 8003df2:	4b1d      	ldr	r3, [pc, #116]	; (8003e68 <flowmodbus+0x300>)
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	4b1d      	ldr	r3, [pc, #116]	; (8003e6c <flowmodbus+0x304>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2180      	movs	r1, #128	; 0x80
 8003e00:	481b      	ldr	r0, [pc, #108]	; (8003e70 <flowmodbus+0x308>)
 8003e02:	f002 ff81 	bl	8006d08 <HAL_GPIO_WritePin>
 8003e06:	e04d      	b.n	8003ea4 <flowmodbus+0x33c>
 8003e08:	20000d40 	.word	0x20000d40
 8003e0c:	2000121c 	.word	0x2000121c
 8003e10:	2000037c 	.word	0x2000037c
 8003e14:	200009c0 	.word	0x200009c0
 8003e18:	200009c4 	.word	0x200009c4
 8003e1c:	2000131c 	.word	0x2000131c
 8003e20:	40240000 	.word	0x40240000
 8003e24:	2000099c 	.word	0x2000099c
 8003e28:	20001348 	.word	0x20001348
 8003e2c:	200009c8 	.word	0x200009c8
 8003e30:	43af0000 	.word	0x43af0000
 8003e34:	200009cc 	.word	0x200009cc
 8003e38:	200009d0 	.word	0x200009d0
 8003e3c:	200009d4 	.word	0x200009d4
 8003e40:	200009d8 	.word	0x200009d8
 8003e44:	200012b4 	.word	0x200012b4
 8003e48:	20000998 	.word	0x20000998
 8003e4c:	20000200 	.word	0x20000200
 8003e50:	200009b0 	.word	0x200009b0
 8003e54:	20000b04 	.word	0x20000b04
 8003e58:	2000024c 	.word	0x2000024c
 8003e5c:	20000cb8 	.word	0x20000cb8
 8003e60:	20000204 	.word	0x20000204
 8003e64:	200012c4 	.word	0x200012c4
 8003e68:	20000380 	.word	0x20000380
 8003e6c:	200006a4 	.word	0x200006a4
 8003e70:	40020000 	.word	0x40020000
		} else if (Joystick_AND_Sensor[1] <= 100) {
 8003e74:	4bac      	ldr	r3, [pc, #688]	; (8004128 <flowmodbus+0x5c0>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b64      	cmp	r3, #100	; 0x64
 8003e7a:	d80a      	bhi.n	8003e92 <flowmodbus+0x32a>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, JoystickSpeed);
 8003e7c:	4bab      	ldr	r3, [pc, #684]	; (800412c <flowmodbus+0x5c4>)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	4bab      	ldr	r3, [pc, #684]	; (8004130 <flowmodbus+0x5c8>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8003e86:	2201      	movs	r2, #1
 8003e88:	2180      	movs	r1, #128	; 0x80
 8003e8a:	48aa      	ldr	r0, [pc, #680]	; (8004134 <flowmodbus+0x5cc>)
 8003e8c:	f002 ff3c 	bl	8006d08 <HAL_GPIO_WritePin>
 8003e90:	e008      	b.n	8003ea4 <flowmodbus+0x33c>
		} else {
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8003e92:	4ba7      	ldr	r3, [pc, #668]	; (8004130 <flowmodbus+0x5c8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2200      	movs	r2, #0
 8003e98:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	2180      	movs	r1, #128	; 0x80
 8003e9e:	48a5      	ldr	r0, [pc, #660]	; (8004134 <flowmodbus+0x5cc>)
 8003ea0:	f002 ff32 	bl	8006d08 <HAL_GPIO_WritePin>
		}
		//x-axis jogging
		if (Joystick_AND_Sensor[0] >= 3150) {
 8003ea4:	4ba0      	ldr	r3, [pc, #640]	; (8004128 <flowmodbus+0x5c0>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f640 424d 	movw	r2, #3149	; 0xc4d
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d904      	bls.n	8003eba <flowmodbus+0x352>
			registerFrame[64].U16 = 8;
 8003eb0:	4ba1      	ldr	r3, [pc, #644]	; (8004138 <flowmodbus+0x5d0>)
 8003eb2:	2208      	movs	r2, #8
 8003eb4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8003eb8:	e00c      	b.n	8003ed4 <flowmodbus+0x36c>
		} else if (Joystick_AND_Sensor[0] <= 100) {
 8003eba:	4b9b      	ldr	r3, [pc, #620]	; (8004128 <flowmodbus+0x5c0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b64      	cmp	r3, #100	; 0x64
 8003ec0:	d804      	bhi.n	8003ecc <flowmodbus+0x364>
			registerFrame[64].U16 = 4;
 8003ec2:	4b9d      	ldr	r3, [pc, #628]	; (8004138 <flowmodbus+0x5d0>)
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8003eca:	e003      	b.n	8003ed4 <flowmodbus+0x36c>
		} else {
			registerFrame[64].U16 = 0;
 8003ecc:	4b9a      	ldr	r3, [pc, #616]	; (8004138 <flowmodbus+0x5d0>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		}

		// Set position
		buttonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8003ed4:	2120      	movs	r1, #32
 8003ed6:	4899      	ldr	r0, [pc, #612]	; (800413c <flowmodbus+0x5d4>)
 8003ed8:	f002 fefe 	bl	8006cd8 <HAL_GPIO_ReadPin>
 8003edc:	4603      	mov	r3, r0
 8003ede:	461a      	mov	r2, r3
 8003ee0:	4b97      	ldr	r3, [pc, #604]	; (8004140 <flowmodbus+0x5d8>)
 8003ee2:	701a      	strb	r2, [r3, #0]
		if (buttonState != lastButtonState) {
 8003ee4:	4b96      	ldr	r3, [pc, #600]	; (8004140 <flowmodbus+0x5d8>)
 8003ee6:	781a      	ldrb	r2, [r3, #0]
 8003ee8:	4b96      	ldr	r3, [pc, #600]	; (8004144 <flowmodbus+0x5dc>)
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	f000 80ef 	beq.w	80040d0 <flowmodbus+0x568>
			// Button press is valid, perform desired action
			if (CheckTray == 0) {
 8003ef2:	4b95      	ldr	r3, [pc, #596]	; (8004148 <flowmodbus+0x5e0>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d159      	bne.n	8003fae <flowmodbus+0x446>
				if (registerFrame[68].U16 > 60000) {
 8003efa:	4b8f      	ldr	r3, [pc, #572]	; (8004138 <flowmodbus+0x5d0>)
 8003efc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003f00:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d914      	bls.n	8003f32 <flowmodbus+0x3ca>
					posx = registerFrame[68].U16 - UINT16_MAX - 1;
 8003f08:	4b8b      	ldr	r3, [pc, #556]	; (8004138 <flowmodbus+0x5d0>)
 8003f0a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003f0e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003f12:	4a8e      	ldr	r2, [pc, #568]	; (800414c <flowmodbus+0x5e4>)
 8003f14:	6013      	str	r3, [r2, #0]
					bottom_left_jog2[0] = (float) (posx) / 10;
 8003f16:	4b8d      	ldr	r3, [pc, #564]	; (800414c <flowmodbus+0x5e4>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	ee07 3a90 	vmov	s15, r3
 8003f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f22:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003f26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f2a:	4b89      	ldr	r3, [pc, #548]	; (8004150 <flowmodbus+0x5e8>)
 8003f2c:	edc3 7a00 	vstr	s15, [r3]
 8003f30:	e012      	b.n	8003f58 <flowmodbus+0x3f0>
				} else {
					posx = registerFrame[68].U16;
 8003f32:	4b81      	ldr	r3, [pc, #516]	; (8004138 <flowmodbus+0x5d0>)
 8003f34:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4b84      	ldr	r3, [pc, #528]	; (800414c <flowmodbus+0x5e4>)
 8003f3c:	601a      	str	r2, [r3, #0]
					bottom_left_jog2[0] = (float) (posx) / 10;
 8003f3e:	4b83      	ldr	r3, [pc, #524]	; (800414c <flowmodbus+0x5e4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	ee07 3a90 	vmov	s15, r3
 8003f46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f4a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003f4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f52:	4b7f      	ldr	r3, [pc, #508]	; (8004150 <flowmodbus+0x5e8>)
 8003f54:	edc3 7a00 	vstr	s15, [r3]
				} // Calculate Point x-axis
				bottom_left_jog2[1] = (float) (ReadDegree - 350); // Calulate Point y-axis
 8003f58:	4b7e      	ldr	r3, [pc, #504]	; (8004154 <flowmodbus+0x5ec>)
 8003f5a:	edd3 7a00 	vldr	s15, [r3]
 8003f5e:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8004158 <flowmodbus+0x5f0>
 8003f62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f66:	4b7a      	ldr	r3, [pc, #488]	; (8004150 <flowmodbus+0x5e8>)
 8003f68:	edc3 7a01 	vstr	s15, [r3, #4]
				registerFrame[35].U16 = (int) posx; // Place Tray Origin x
 8003f6c:	4b77      	ldr	r3, [pc, #476]	; (800414c <flowmodbus+0x5e4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	4b71      	ldr	r3, [pc, #452]	; (8004138 <flowmodbus+0x5d0>)
 8003f74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				registerFrame[36].U16 = (int) (ReadDegree - 350) * 10; // Place Tray Origin y
 8003f78:	4b76      	ldr	r3, [pc, #472]	; (8004154 <flowmodbus+0x5ec>)
 8003f7a:	edd3 7a00 	vldr	s15, [r3]
 8003f7e:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8004158 <flowmodbus+0x5f0>
 8003f82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f8a:	ee17 3a90 	vmov	r3, s15
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	0092      	lsls	r2, r2, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	4b67      	ldr	r3, [pc, #412]	; (8004138 <flowmodbus+0x5d0>)
 8003f9c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
				CheckTray++;
 8003fa0:	4b69      	ldr	r3, [pc, #420]	; (8004148 <flowmodbus+0x5e0>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	4b67      	ldr	r3, [pc, #412]	; (8004148 <flowmodbus+0x5e0>)
 8003faa:	701a      	strb	r2, [r3, #0]
 8003fac:	e090      	b.n	80040d0 <flowmodbus+0x568>
			} else if (CheckTray == 1) {
 8003fae:	4b66      	ldr	r3, [pc, #408]	; (8004148 <flowmodbus+0x5e0>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d152      	bne.n	800405c <flowmodbus+0x4f4>
				if (registerFrame[68].U16 > 60000) {
 8003fb6:	4b60      	ldr	r3, [pc, #384]	; (8004138 <flowmodbus+0x5d0>)
 8003fb8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003fbc:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d914      	bls.n	8003fee <flowmodbus+0x486>
					posx = registerFrame[68].U16 - UINT16_MAX - 1;
 8003fc4:	4b5c      	ldr	r3, [pc, #368]	; (8004138 <flowmodbus+0x5d0>)
 8003fc6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003fca:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003fce:	4a5f      	ldr	r2, [pc, #380]	; (800414c <flowmodbus+0x5e4>)
 8003fd0:	6013      	str	r3, [r2, #0]
					bottom_right_jog2[0] = (float) (posx) / 10;
 8003fd2:	4b5e      	ldr	r3, [pc, #376]	; (800414c <flowmodbus+0x5e4>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	ee07 3a90 	vmov	s15, r3
 8003fda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fde:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003fe2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fe6:	4b5d      	ldr	r3, [pc, #372]	; (800415c <flowmodbus+0x5f4>)
 8003fe8:	edc3 7a00 	vstr	s15, [r3]
 8003fec:	e012      	b.n	8004014 <flowmodbus+0x4ac>
				} else {
					posx = registerFrame[68].U16;
 8003fee:	4b52      	ldr	r3, [pc, #328]	; (8004138 <flowmodbus+0x5d0>)
 8003ff0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4b55      	ldr	r3, [pc, #340]	; (800414c <flowmodbus+0x5e4>)
 8003ff8:	601a      	str	r2, [r3, #0]
					bottom_right_jog2[0] = (float) (posx) / 10;
 8003ffa:	4b54      	ldr	r3, [pc, #336]	; (800414c <flowmodbus+0x5e4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	ee07 3a90 	vmov	s15, r3
 8004002:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004006:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800400a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800400e:	4b53      	ldr	r3, [pc, #332]	; (800415c <flowmodbus+0x5f4>)
 8004010:	edc3 7a00 	vstr	s15, [r3]
				}
				posx = registerFrame[68].U16;
 8004014:	4b48      	ldr	r3, [pc, #288]	; (8004138 <flowmodbus+0x5d0>)
 8004016:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800401a:	461a      	mov	r2, r3
 800401c:	4b4b      	ldr	r3, [pc, #300]	; (800414c <flowmodbus+0x5e4>)
 800401e:	601a      	str	r2, [r3, #0]
				bottom_right_jog2[0] = (float) (posx) / 10;
 8004020:	4b4a      	ldr	r3, [pc, #296]	; (800414c <flowmodbus+0x5e4>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	ee07 3a90 	vmov	s15, r3
 8004028:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800402c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004030:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004034:	4b49      	ldr	r3, [pc, #292]	; (800415c <flowmodbus+0x5f4>)
 8004036:	edc3 7a00 	vstr	s15, [r3]
				bottom_right_jog2[1] = (float) (ReadDegree - 350); // Calculate Point y-axis
 800403a:	4b46      	ldr	r3, [pc, #280]	; (8004154 <flowmodbus+0x5ec>)
 800403c:	edd3 7a00 	vldr	s15, [r3]
 8004040:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004158 <flowmodbus+0x5f0>
 8004044:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004048:	4b44      	ldr	r3, [pc, #272]	; (800415c <flowmodbus+0x5f4>)
 800404a:	edc3 7a01 	vstr	s15, [r3, #4]
				CheckTray++;
 800404e:	4b3e      	ldr	r3, [pc, #248]	; (8004148 <flowmodbus+0x5e0>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	3301      	adds	r3, #1
 8004054:	b2da      	uxtb	r2, r3
 8004056:	4b3c      	ldr	r3, [pc, #240]	; (8004148 <flowmodbus+0x5e0>)
 8004058:	701a      	strb	r2, [r3, #0]
 800405a:	e039      	b.n	80040d0 <flowmodbus+0x568>
			} else if (CheckTray == 2) {
 800405c:	4b3a      	ldr	r3, [pc, #232]	; (8004148 <flowmodbus+0x5e0>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b02      	cmp	r3, #2
 8004062:	d135      	bne.n	80040d0 <flowmodbus+0x568>
				transformRectangleAndPointsPlace();
 8004064:	f7ff fa9a 	bl	800359c <transformRectangleAndPointsPlace>
				orenationtray = abs((theta2) * 57.2958 * 100);
 8004068:	4b3d      	ldr	r3, [pc, #244]	; (8004160 <flowmodbus+0x5f8>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f7fc fa17 	bl	80004a0 <__aeabi_f2d>
 8004072:	a32b      	add	r3, pc, #172	; (adr r3, 8004120 <flowmodbus+0x5b8>)
 8004074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004078:	f7fc fa6a 	bl	8000550 <__aeabi_dmul>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4610      	mov	r0, r2
 8004082:	4619      	mov	r1, r3
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	4b36      	ldr	r3, [pc, #216]	; (8004164 <flowmodbus+0x5fc>)
 800408a:	f7fc fa61 	bl	8000550 <__aeabi_dmul>
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	4610      	mov	r0, r2
 8004094:	4619      	mov	r1, r3
 8004096:	f7fc fd0b 	bl	8000ab0 <__aeabi_d2iz>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	bfb8      	it	lt
 80040a0:	425b      	neglt	r3, r3
 80040a2:	4a31      	ldr	r2, [pc, #196]	; (8004168 <flowmodbus+0x600>)
 80040a4:	6013      	str	r3, [r2, #0]
				registerFrame[37].U16 = orenationtray;
 80040a6:	4b30      	ldr	r3, [pc, #192]	; (8004168 <flowmodbus+0x600>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	4b22      	ldr	r3, [pc, #136]	; (8004138 <flowmodbus+0x5d0>)
 80040ae:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				registerFrame[16].U16 = 0; //0x10 y-status jogging fisnish reset to 0
 80040b2:	4b21      	ldr	r3, [pc, #132]	; (8004138 <flowmodbus+0x5d0>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	841a      	strh	r2, [r3, #32]
				CheckTray = 0;
 80040b8:	4b23      	ldr	r3, [pc, #140]	; (8004148 <flowmodbus+0x5e0>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	701a      	strb	r2, [r3, #0]
				choice = 2;
 80040be:	4b2b      	ldr	r3, [pc, #172]	; (800416c <flowmodbus+0x604>)
 80040c0:	2202      	movs	r2, #2
 80040c2:	601a      	str	r2, [r3, #0]
				I2C_all(&data_read);
 80040c4:	482a      	ldr	r0, [pc, #168]	; (8004170 <flowmodbus+0x608>)
 80040c6:	f7fe fef7 	bl	8002eb8 <I2C_all>
				Mobus = Initial;
 80040ca:	4b2a      	ldr	r3, [pc, #168]	; (8004174 <flowmodbus+0x60c>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	701a      	strb	r2, [r3, #0]
			}
		}

		// Update the previous state
		lastButtonState = buttonState;
 80040d0:	4b1b      	ldr	r3, [pc, #108]	; (8004140 <flowmodbus+0x5d8>)
 80040d2:	781a      	ldrb	r2, [r3, #0]
 80040d4:	4b1b      	ldr	r3, [pc, #108]	; (8004144 <flowmodbus+0x5dc>)
 80040d6:	701a      	strb	r2, [r3, #0]
		break;
 80040d8:	f000 bce9 	b.w	8004aae <flowmodbus+0xf46>
	case Jogging_Pick:
		//y-axis jogging
		if (Joystick_AND_Sensor[1] >= 3150) {
 80040dc:	4b12      	ldr	r3, [pc, #72]	; (8004128 <flowmodbus+0x5c0>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f640 424d 	movw	r2, #3149	; 0xc4d
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d90a      	bls.n	80040fe <flowmodbus+0x596>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, JoystickSpeed);
 80040e8:	4b10      	ldr	r3, [pc, #64]	; (800412c <flowmodbus+0x5c4>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	4b10      	ldr	r3, [pc, #64]	; (8004130 <flowmodbus+0x5c8>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80040f2:	2200      	movs	r2, #0
 80040f4:	2180      	movs	r1, #128	; 0x80
 80040f6:	480f      	ldr	r0, [pc, #60]	; (8004134 <flowmodbus+0x5cc>)
 80040f8:	f002 fe06 	bl	8006d08 <HAL_GPIO_WritePin>
 80040fc:	e045      	b.n	800418a <flowmodbus+0x622>
		} else if (Joystick_AND_Sensor[1] <= 100) {
 80040fe:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <flowmodbus+0x5c0>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b64      	cmp	r3, #100	; 0x64
 8004104:	d838      	bhi.n	8004178 <flowmodbus+0x610>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, JoystickSpeed);
 8004106:	4b09      	ldr	r3, [pc, #36]	; (800412c <flowmodbus+0x5c4>)
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	4b09      	ldr	r3, [pc, #36]	; (8004130 <flowmodbus+0x5c8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8004110:	2201      	movs	r2, #1
 8004112:	2180      	movs	r1, #128	; 0x80
 8004114:	4807      	ldr	r0, [pc, #28]	; (8004134 <flowmodbus+0x5cc>)
 8004116:	f002 fdf7 	bl	8006d08 <HAL_GPIO_WritePin>
 800411a:	e036      	b.n	800418a <flowmodbus+0x622>
 800411c:	f3af 8000 	nop.w
 8004120:	c63f1412 	.word	0xc63f1412
 8004124:	404ca5dc 	.word	0x404ca5dc
 8004128:	200012c4 	.word	0x200012c4
 800412c:	20000380 	.word	0x20000380
 8004130:	200006a4 	.word	0x200006a4
 8004134:	40020000 	.word	0x40020000
 8004138:	2000121c 	.word	0x2000121c
 800413c:	40020800 	.word	0x40020800
 8004140:	200009c7 	.word	0x200009c7
 8004144:	200009c6 	.word	0x200009c6
 8004148:	200012d4 	.word	0x200012d4
 800414c:	200009dc 	.word	0x200009dc
 8004150:	20000d30 	.word	0x20000d30
 8004154:	20001348 	.word	0x20001348
 8004158:	43af0000 	.word	0x43af0000
 800415c:	20000d38 	.word	0x20000d38
 8004160:	20000d28 	.word	0x20000d28
 8004164:	40590000 	.word	0x40590000
 8004168:	200009e0 	.word	0x200009e0
 800416c:	200009c0 	.word	0x200009c0
 8004170:	200009c4 	.word	0x200009c4
 8004174:	20000d40 	.word	0x20000d40
		} else {
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8004178:	4b8d      	ldr	r3, [pc, #564]	; (80043b0 <flowmodbus+0x848>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2200      	movs	r2, #0
 800417e:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8004180:	2200      	movs	r2, #0
 8004182:	2180      	movs	r1, #128	; 0x80
 8004184:	488b      	ldr	r0, [pc, #556]	; (80043b4 <flowmodbus+0x84c>)
 8004186:	f002 fdbf 	bl	8006d08 <HAL_GPIO_WritePin>
		}
		//x-axis jogging
		if (Joystick_AND_Sensor[0] >= 3150) {
 800418a:	4b8b      	ldr	r3, [pc, #556]	; (80043b8 <flowmodbus+0x850>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f640 424d 	movw	r2, #3149	; 0xc4d
 8004192:	4293      	cmp	r3, r2
 8004194:	d904      	bls.n	80041a0 <flowmodbus+0x638>
			registerFrame[64].U16 = 8;
 8004196:	4b89      	ldr	r3, [pc, #548]	; (80043bc <flowmodbus+0x854>)
 8004198:	2208      	movs	r2, #8
 800419a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 800419e:	e00c      	b.n	80041ba <flowmodbus+0x652>
		} else if (Joystick_AND_Sensor[0] <= 100) {
 80041a0:	4b85      	ldr	r3, [pc, #532]	; (80043b8 <flowmodbus+0x850>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b64      	cmp	r3, #100	; 0x64
 80041a6:	d804      	bhi.n	80041b2 <flowmodbus+0x64a>
			registerFrame[64].U16 = 4;
 80041a8:	4b84      	ldr	r3, [pc, #528]	; (80043bc <flowmodbus+0x854>)
 80041aa:	2204      	movs	r2, #4
 80041ac:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80041b0:	e003      	b.n	80041ba <flowmodbus+0x652>
		} else {
			registerFrame[64].U16 = 0;
 80041b2:	4b82      	ldr	r3, [pc, #520]	; (80043bc <flowmodbus+0x854>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		}

		// Set position
		buttonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 80041ba:	2120      	movs	r1, #32
 80041bc:	4880      	ldr	r0, [pc, #512]	; (80043c0 <flowmodbus+0x858>)
 80041be:	f002 fd8b 	bl	8006cd8 <HAL_GPIO_ReadPin>
 80041c2:	4603      	mov	r3, r0
 80041c4:	461a      	mov	r2, r3
 80041c6:	4b7f      	ldr	r3, [pc, #508]	; (80043c4 <flowmodbus+0x85c>)
 80041c8:	701a      	strb	r2, [r3, #0]
		if (buttonState != lastButtonState) {
 80041ca:	4b7e      	ldr	r3, [pc, #504]	; (80043c4 <flowmodbus+0x85c>)
 80041cc:	781a      	ldrb	r2, [r3, #0]
 80041ce:	4b7e      	ldr	r3, [pc, #504]	; (80043c8 <flowmodbus+0x860>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	f000 80dc 	beq.w	8004390 <flowmodbus+0x828>
			// Button press is valid, perform desired action
			if (CheckTray == 0) {
 80041d8:	4b7c      	ldr	r3, [pc, #496]	; (80043cc <flowmodbus+0x864>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d159      	bne.n	8004294 <flowmodbus+0x72c>
				if (registerFrame[68].U16 > 60000) {
 80041e0:	4b76      	ldr	r3, [pc, #472]	; (80043bc <flowmodbus+0x854>)
 80041e2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80041e6:	f64e 2260 	movw	r2, #60000	; 0xea60
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d914      	bls.n	8004218 <flowmodbus+0x6b0>
					posx = registerFrame[68].U16 - UINT16_MAX - 1;
 80041ee:	4b73      	ldr	r3, [pc, #460]	; (80043bc <flowmodbus+0x854>)
 80041f0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80041f4:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80041f8:	4a75      	ldr	r2, [pc, #468]	; (80043d0 <flowmodbus+0x868>)
 80041fa:	6013      	str	r3, [r2, #0]
					bottom_left_jog[0] = (float) (posx) / 10;
 80041fc:	4b74      	ldr	r3, [pc, #464]	; (80043d0 <flowmodbus+0x868>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	ee07 3a90 	vmov	s15, r3
 8004204:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004208:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800420c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004210:	4b70      	ldr	r3, [pc, #448]	; (80043d4 <flowmodbus+0x86c>)
 8004212:	edc3 7a00 	vstr	s15, [r3]
 8004216:	e012      	b.n	800423e <flowmodbus+0x6d6>
				} else {
					posx = registerFrame[68].U16;
 8004218:	4b68      	ldr	r3, [pc, #416]	; (80043bc <flowmodbus+0x854>)
 800421a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800421e:	461a      	mov	r2, r3
 8004220:	4b6b      	ldr	r3, [pc, #428]	; (80043d0 <flowmodbus+0x868>)
 8004222:	601a      	str	r2, [r3, #0]
					bottom_left_jog[0] = (float) (posx) / 10;
 8004224:	4b6a      	ldr	r3, [pc, #424]	; (80043d0 <flowmodbus+0x868>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	ee07 3a90 	vmov	s15, r3
 800422c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004230:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004234:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004238:	4b66      	ldr	r3, [pc, #408]	; (80043d4 <flowmodbus+0x86c>)
 800423a:	edc3 7a00 	vstr	s15, [r3]
				}
				bottom_left_jog[1] = ((float) ReadDegree - 350); // Calulate Point y-axis
 800423e:	4b66      	ldr	r3, [pc, #408]	; (80043d8 <flowmodbus+0x870>)
 8004240:	edd3 7a00 	vldr	s15, [r3]
 8004244:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80043dc <flowmodbus+0x874>
 8004248:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800424c:	4b61      	ldr	r3, [pc, #388]	; (80043d4 <flowmodbus+0x86c>)
 800424e:	edc3 7a01 	vstr	s15, [r3, #4]
				registerFrame[32].U16 = (int) posx; // Place Tray Origin x
 8004252:	4b5f      	ldr	r3, [pc, #380]	; (80043d0 <flowmodbus+0x868>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	b29a      	uxth	r2, r3
 8004258:	4b58      	ldr	r3, [pc, #352]	; (80043bc <flowmodbus+0x854>)
 800425a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
				registerFrame[33].U16 = (int) (ReadDegree - 350) * 10; // Place Tray Origin y
 800425e:	4b5e      	ldr	r3, [pc, #376]	; (80043d8 <flowmodbus+0x870>)
 8004260:	edd3 7a00 	vldr	s15, [r3]
 8004264:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80043dc <flowmodbus+0x874>
 8004268:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800426c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004270:	ee17 3a90 	vmov	r3, s15
 8004274:	b29b      	uxth	r3, r3
 8004276:	461a      	mov	r2, r3
 8004278:	0092      	lsls	r2, r2, #2
 800427a:	4413      	add	r3, r2
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	4b4e      	ldr	r3, [pc, #312]	; (80043bc <flowmodbus+0x854>)
 8004282:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
				CheckTray++;
 8004286:	4b51      	ldr	r3, [pc, #324]	; (80043cc <flowmodbus+0x864>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	3301      	adds	r3, #1
 800428c:	b2da      	uxtb	r2, r3
 800428e:	4b4f      	ldr	r3, [pc, #316]	; (80043cc <flowmodbus+0x864>)
 8004290:	701a      	strb	r2, [r3, #0]
 8004292:	e07d      	b.n	8004390 <flowmodbus+0x828>
			} else if (CheckTray == 1) {
 8004294:	4b4d      	ldr	r3, [pc, #308]	; (80043cc <flowmodbus+0x864>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d13f      	bne.n	800431c <flowmodbus+0x7b4>
				if (registerFrame[68].U16 > 60000) {
 800429c:	4b47      	ldr	r3, [pc, #284]	; (80043bc <flowmodbus+0x854>)
 800429e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80042a2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d914      	bls.n	80042d4 <flowmodbus+0x76c>
					posx = registerFrame[68].U16 - UINT16_MAX - 1;
 80042aa:	4b44      	ldr	r3, [pc, #272]	; (80043bc <flowmodbus+0x854>)
 80042ac:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80042b0:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80042b4:	4a46      	ldr	r2, [pc, #280]	; (80043d0 <flowmodbus+0x868>)
 80042b6:	6013      	str	r3, [r2, #0]
					bottom_right_jog[0] = (float) (posx) / 10;
 80042b8:	4b45      	ldr	r3, [pc, #276]	; (80043d0 <flowmodbus+0x868>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	ee07 3a90 	vmov	s15, r3
 80042c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042c4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80042c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042cc:	4b44      	ldr	r3, [pc, #272]	; (80043e0 <flowmodbus+0x878>)
 80042ce:	edc3 7a00 	vstr	s15, [r3]
 80042d2:	e012      	b.n	80042fa <flowmodbus+0x792>
				} else {
					posx = registerFrame[68].U16;
 80042d4:	4b39      	ldr	r3, [pc, #228]	; (80043bc <flowmodbus+0x854>)
 80042d6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80042da:	461a      	mov	r2, r3
 80042dc:	4b3c      	ldr	r3, [pc, #240]	; (80043d0 <flowmodbus+0x868>)
 80042de:	601a      	str	r2, [r3, #0]
					bottom_right_jog[0] = (float) (posx) / 10;
 80042e0:	4b3b      	ldr	r3, [pc, #236]	; (80043d0 <flowmodbus+0x868>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	ee07 3a90 	vmov	s15, r3
 80042e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042ec:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80042f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042f4:	4b3a      	ldr	r3, [pc, #232]	; (80043e0 <flowmodbus+0x878>)
 80042f6:	edc3 7a00 	vstr	s15, [r3]
				}
				bottom_right_jog[1] = (float) (ReadDegree - (float) 350); // Calculate Point y-axis
 80042fa:	4b37      	ldr	r3, [pc, #220]	; (80043d8 <flowmodbus+0x870>)
 80042fc:	edd3 7a00 	vldr	s15, [r3]
 8004300:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80043dc <flowmodbus+0x874>
 8004304:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004308:	4b35      	ldr	r3, [pc, #212]	; (80043e0 <flowmodbus+0x878>)
 800430a:	edc3 7a01 	vstr	s15, [r3, #4]
				CheckTray++;
 800430e:	4b2f      	ldr	r3, [pc, #188]	; (80043cc <flowmodbus+0x864>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	3301      	adds	r3, #1
 8004314:	b2da      	uxtb	r2, r3
 8004316:	4b2d      	ldr	r3, [pc, #180]	; (80043cc <flowmodbus+0x864>)
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	e039      	b.n	8004390 <flowmodbus+0x828>
			} else if (CheckTray == 2) {
 800431c:	4b2b      	ldr	r3, [pc, #172]	; (80043cc <flowmodbus+0x864>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2b02      	cmp	r3, #2
 8004322:	d135      	bne.n	8004390 <flowmodbus+0x828>
				transformRectangleAndPointsPick();
 8004324:	f7fe feba 	bl	800309c <transformRectangleAndPointsPick>
				orenationtray = abs((theta) * 57.2958 * 100);
 8004328:	4b2e      	ldr	r3, [pc, #184]	; (80043e4 <flowmodbus+0x87c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	f7fc f8b7 	bl	80004a0 <__aeabi_f2d>
 8004332:	a31d      	add	r3, pc, #116	; (adr r3, 80043a8 <flowmodbus+0x840>)
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	f7fc f90a 	bl	8000550 <__aeabi_dmul>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4610      	mov	r0, r2
 8004342:	4619      	mov	r1, r3
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	4b27      	ldr	r3, [pc, #156]	; (80043e8 <flowmodbus+0x880>)
 800434a:	f7fc f901 	bl	8000550 <__aeabi_dmul>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4610      	mov	r0, r2
 8004354:	4619      	mov	r1, r3
 8004356:	f7fc fbab 	bl	8000ab0 <__aeabi_d2iz>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	bfb8      	it	lt
 8004360:	425b      	neglt	r3, r3
 8004362:	4a22      	ldr	r2, [pc, #136]	; (80043ec <flowmodbus+0x884>)
 8004364:	6013      	str	r3, [r2, #0]
				registerFrame[34].U16 = orenationtray;
 8004366:	4b21      	ldr	r3, [pc, #132]	; (80043ec <flowmodbus+0x884>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	b29a      	uxth	r2, r3
 800436c:	4b13      	ldr	r3, [pc, #76]	; (80043bc <flowmodbus+0x854>)
 800436e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				registerFrame[16].U16 = 0; // 0x10 y-status jogging finish reset to 0
 8004372:	4b12      	ldr	r3, [pc, #72]	; (80043bc <flowmodbus+0x854>)
 8004374:	2200      	movs	r2, #0
 8004376:	841a      	strh	r2, [r3, #32]
				CheckTray = 0;
 8004378:	4b14      	ldr	r3, [pc, #80]	; (80043cc <flowmodbus+0x864>)
 800437a:	2200      	movs	r2, #0
 800437c:	701a      	strb	r2, [r3, #0]
				choice = 2;
 800437e:	4b1c      	ldr	r3, [pc, #112]	; (80043f0 <flowmodbus+0x888>)
 8004380:	2202      	movs	r2, #2
 8004382:	601a      	str	r2, [r3, #0]
				I2C_all(&data_read);
 8004384:	481b      	ldr	r0, [pc, #108]	; (80043f4 <flowmodbus+0x88c>)
 8004386:	f7fe fd97 	bl	8002eb8 <I2C_all>
				Mobus = Initial;
 800438a:	4b1b      	ldr	r3, [pc, #108]	; (80043f8 <flowmodbus+0x890>)
 800438c:	2200      	movs	r2, #0
 800438e:	701a      	strb	r2, [r3, #0]
			}
		}
		// Update the previous state
		lastButtonState = buttonState;
 8004390:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <flowmodbus+0x85c>)
 8004392:	781a      	ldrb	r2, [r3, #0]
 8004394:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <flowmodbus+0x860>)
 8004396:	701a      	strb	r2, [r3, #0]
		break;
 8004398:	e389      	b.n	8004aae <flowmodbus+0xf46>
	case Home:
		// x axis
		registerFrame[64].U16 = 1; // 0x40 Moving Status x-axis - Home
 800439a:	4b08      	ldr	r3, [pc, #32]	; (80043bc <flowmodbus+0x854>)
 800439c:	2201      	movs	r2, #1
 800439e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		home_yaxis();
 80043a2:	f7ff fb7b 	bl	8003a9c <home_yaxis>
		// y axis
		break;
 80043a6:	e382      	b.n	8004aae <flowmodbus+0xf46>
 80043a8:	c63f1412 	.word	0xc63f1412
 80043ac:	404ca5dc 	.word	0x404ca5dc
 80043b0:	200006a4 	.word	0x200006a4
 80043b4:	40020000 	.word	0x40020000
 80043b8:	200012c4 	.word	0x200012c4
 80043bc:	2000121c 	.word	0x2000121c
 80043c0:	40020800 	.word	0x40020800
 80043c4:	200009c7 	.word	0x200009c7
 80043c8:	200009c6 	.word	0x200009c6
 80043cc:	200012d4 	.word	0x200012d4
 80043d0:	200009dc 	.word	0x200009dc
 80043d4:	20000b7c 	.word	0x20000b7c
 80043d8:	20001348 	.word	0x20001348
 80043dc:	43af0000 	.word	0x43af0000
 80043e0:	20000b84 	.word	0x20000b84
 80043e4:	20000b74 	.word	0x20000b74
 80043e8:	40590000 	.word	0x40590000
 80043ec:	200009e0 	.word	0x200009e0
 80043f0:	200009c0 	.word	0x200009c0
 80043f4:	200009c4 	.word	0x200009c4
 80043f8:	20000d40 	.word	0x20000d40
	case Run_PointMode:
		// x axis
		registerFrame[65].U16 = registerFrame[48].U16; // position Tray pick/place
 80043fc:	4ba9      	ldr	r3, [pc, #676]	; (80046a4 <flowmodbus+0xb3c>)
 80043fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8004402:	4ba8      	ldr	r3, [pc, #672]	; (80046a4 <flowmodbus+0xb3c>)
 8004404:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		registerFrame[66].U16 = 3000; // speed x-axis 300mm
 8004408:	4ba6      	ldr	r3, [pc, #664]	; (80046a4 <flowmodbus+0xb3c>)
 800440a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800440e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		registerFrame[67].U16 = 1; // Acc time 1mms
 8004412:	4ba4      	ldr	r3, [pc, #656]	; (80046a4 <flowmodbus+0xb3c>)
 8004414:	2201      	movs	r2, #1
 8004416:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		registerFrame[64].U16 = 2; //0x40 Moving Status x-axis - run mode
 800441a:	4ba2      	ldr	r3, [pc, #648]	; (80046a4 <flowmodbus+0xb3c>)
 800441c:	2202      	movs	r2, #2
 800441e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		// y axis
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1){ // if Emergency Point mode on
 8004422:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004426:	48a0      	ldr	r0, [pc, #640]	; (80046a8 <flowmodbus+0xb40>)
 8004428:	f002 fc56 	bl	8006cd8 <HAL_GPIO_ReadPin>
 800442c:	4603      	mov	r3, r0
 800442e:	2b01      	cmp	r3, #1
 8004430:	d113      	bne.n	800445a <flowmodbus+0x8f2>
			choice = 4;
 8004432:	4b9e      	ldr	r3, [pc, #632]	; (80046ac <flowmodbus+0xb44>)
 8004434:	2204      	movs	r2, #4
 8004436:	601a      	str	r2, [r3, #0]
			I2C_all(&data_read);
 8004438:	489d      	ldr	r0, [pc, #628]	; (80046b0 <flowmodbus+0xb48>)
 800443a:	f7fe fd3d 	bl	8002eb8 <I2C_all>
			path = 0;
 800443e:	4b9d      	ldr	r3, [pc, #628]	; (80046b4 <flowmodbus+0xb4c>)
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
			s = 0;
 8004444:	4b9c      	ldr	r3, [pc, #624]	; (80046b8 <flowmodbus+0xb50>)
 8004446:	f04f 0200 	mov.w	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
			s2 = 0;
 800444c:	4b9b      	ldr	r3, [pc, #620]	; (80046bc <flowmodbus+0xb54>)
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	601a      	str	r2, [r3, #0]
			Mobus = EM_Run_PointMode;
 8004454:	4b9a      	ldr	r3, [pc, #616]	; (80046c0 <flowmodbus+0xb58>)
 8004456:	2206      	movs	r2, #6
 8004458:	701a      	strb	r2, [r3, #0]
		}
		if(abs(error) < 0.2 && indexposition == (timecycle*100)){
 800445a:	4b9a      	ldr	r3, [pc, #616]	; (80046c4 <flowmodbus+0xb5c>)
 800445c:	edd3 7a00 	vldr	s15, [r3]
 8004460:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004464:	ee17 3a90 	vmov	r3, s15
 8004468:	2b00      	cmp	r3, #0
 800446a:	f2c0 831d 	blt.w	8004aa8 <flowmodbus+0xf40>
 800446e:	4b95      	ldr	r3, [pc, #596]	; (80046c4 <flowmodbus+0xb5c>)
 8004470:	edd3 7a00 	vldr	s15, [r3]
 8004474:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004478:	ee17 3a90 	vmov	r3, s15
 800447c:	2b00      	cmp	r3, #0
 800447e:	f300 8313 	bgt.w	8004aa8 <flowmodbus+0xf40>
 8004482:	4b91      	ldr	r3, [pc, #580]	; (80046c8 <flowmodbus+0xb60>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	ee07 3a90 	vmov	s15, r3
 800448a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800448e:	4b8f      	ldr	r3, [pc, #572]	; (80046cc <flowmodbus+0xb64>)
 8004490:	edd3 7a00 	vldr	s15, [r3]
 8004494:	eddf 6a8e 	vldr	s13, [pc, #568]	; 80046d0 <flowmodbus+0xb68>
 8004498:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800449c:	eeb4 7a67 	vcmp.f32	s14, s15
 80044a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a4:	f040 8300 	bne.w	8004aa8 <flowmodbus+0xf40>
				Mobus = Initial;
 80044a8:	4b85      	ldr	r3, [pc, #532]	; (80046c0 <flowmodbus+0xb58>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]
				registerFrame[16].U16 = 0;
 80044ae:	4b7d      	ldr	r3, [pc, #500]	; (80046a4 <flowmodbus+0xb3c>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	841a      	strh	r2, [r3, #32]
		}
		break;
 80044b4:	e2f8      	b.n	8004aa8 <flowmodbus+0xf40>
	case EM_Run_PointMode:

		switch (Em_state) {
 80044b6:	4b87      	ldr	r3, [pc, #540]	; (80046d4 <flowmodbus+0xb6c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <flowmodbus+0x95c>
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d01d      	beq.n	80044fe <flowmodbus+0x996>
						Mobus = Run_PointMode;
					}
				}
				break;
		}
		break;
 80044c2:	e2f4      	b.n	8004aae <flowmodbus+0xf46>
				path = 0;
 80044c4:	4b7b      	ldr	r3, [pc, #492]	; (80046b4 <flowmodbus+0xb4c>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]
				s = 0;
 80044ca:	4b7b      	ldr	r3, [pc, #492]	; (80046b8 <flowmodbus+0xb50>)
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]
				s2 = 0;
 80044d2:	4b7a      	ldr	r3, [pc, #488]	; (80046bc <flowmodbus+0xb54>)
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
				if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0){ // if Emergency Tray mode On
 80044da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80044de:	4872      	ldr	r0, [pc, #456]	; (80046a8 <flowmodbus+0xb40>)
 80044e0:	f002 fbfa 	bl	8006cd8 <HAL_GPIO_ReadPin>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d142      	bne.n	8004570 <flowmodbus+0xa08>
					path = 1;
 80044ea:	4b72      	ldr	r3, [pc, #456]	; (80046b4 <flowmodbus+0xb4c>)
 80044ec:	2201      	movs	r2, #1
 80044ee:	601a      	str	r2, [r3, #0]
					Em_state = 1;
 80044f0:	4b78      	ldr	r3, [pc, #480]	; (80046d4 <flowmodbus+0xb6c>)
 80044f2:	2201      	movs	r2, #1
 80044f4:	601a      	str	r2, [r3, #0]
					I2Cdone = 0;
 80044f6:	4b78      	ldr	r3, [pc, #480]	; (80046d8 <flowmodbus+0xb70>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]
				break;
 80044fc:	e038      	b.n	8004570 <flowmodbus+0xa08>
				if(I2Cdone == 0){
 80044fe:	4b76      	ldr	r3, [pc, #472]	; (80046d8 <flowmodbus+0xb70>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10f      	bne.n	8004526 <flowmodbus+0x9be>
					timestampI2Cdone = HAL_GetTick() + 500;
 8004506:	f001 f935 	bl	8005774 <HAL_GetTick>
 800450a:	4603      	mov	r3, r0
 800450c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004510:	2200      	movs	r2, #0
 8004512:	623b      	str	r3, [r7, #32]
 8004514:	627a      	str	r2, [r7, #36]	; 0x24
 8004516:	4b71      	ldr	r3, [pc, #452]	; (80046dc <flowmodbus+0xb74>)
 8004518:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800451c:	e9c3 1200 	strd	r1, r2, [r3]
					I2Cdone = 1;
 8004520:	4b6d      	ldr	r3, [pc, #436]	; (80046d8 <flowmodbus+0xb70>)
 8004522:	2201      	movs	r2, #1
 8004524:	601a      	str	r2, [r3, #0]
				if(HAL_GetTick() >= timestampI2Cdone){
 8004526:	f001 f925 	bl	8005774 <HAL_GetTick>
 800452a:	4603      	mov	r3, r0
 800452c:	2200      	movs	r2, #0
 800452e:	61bb      	str	r3, [r7, #24]
 8004530:	61fa      	str	r2, [r7, #28]
 8004532:	4b6a      	ldr	r3, [pc, #424]	; (80046dc <flowmodbus+0xb74>)
 8004534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004538:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800453c:	4621      	mov	r1, r4
 800453e:	4291      	cmp	r1, r2
 8004540:	4629      	mov	r1, r5
 8004542:	eb71 0303 	sbcs.w	r3, r1, r3
 8004546:	d315      	bcc.n	8004574 <flowmodbus+0xa0c>
					choice = 5;
 8004548:	4b58      	ldr	r3, [pc, #352]	; (80046ac <flowmodbus+0xb44>)
 800454a:	2205      	movs	r2, #5
 800454c:	601a      	str	r2, [r3, #0]
					I2C_all(&data_read);
 800454e:	4858      	ldr	r0, [pc, #352]	; (80046b0 <flowmodbus+0xb48>)
 8004550:	f7fe fcb2 	bl	8002eb8 <I2C_all>
					if(I2Cdone == 1){
 8004554:	4b60      	ldr	r3, [pc, #384]	; (80046d8 <flowmodbus+0xb70>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d10b      	bne.n	8004574 <flowmodbus+0xa0c>
						I2Cdone = 0;
 800455c:	4b5e      	ldr	r3, [pc, #376]	; (80046d8 <flowmodbus+0xb70>)
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
						Em_state = 0;
 8004562:	4b5c      	ldr	r3, [pc, #368]	; (80046d4 <flowmodbus+0xb6c>)
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]
						Mobus = Run_PointMode;
 8004568:	4b55      	ldr	r3, [pc, #340]	; (80046c0 <flowmodbus+0xb58>)
 800456a:	2204      	movs	r2, #4
 800456c:	701a      	strb	r2, [r3, #0]
				break;
 800456e:	e001      	b.n	8004574 <flowmodbus+0xa0c>
				break;
 8004570:	bf00      	nop
 8004572:	e29c      	b.n	8004aae <flowmodbus+0xf46>
				break;
 8004574:	bf00      	nop
		break;
 8004576:	e29a      	b.n	8004aae <flowmodbus+0xf46>
	case EM_Run_TrayMode:
		switch (Em_state) {
 8004578:	4b56      	ldr	r3, [pc, #344]	; (80046d4 <flowmodbus+0xb6c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <flowmodbus+0xa1e>
 8004580:	2b01      	cmp	r3, #1
 8004582:	d01f      	beq.n	80045c4 <flowmodbus+0xa5c>
						Mobus = Initial;;
					}
				}
				break;
		}
		break;
 8004584:	e293      	b.n	8004aae <flowmodbus+0xf46>
				if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0){ // if Emergency Tray mode On
 8004586:	f44f 7100 	mov.w	r1, #512	; 0x200
 800458a:	4847      	ldr	r0, [pc, #284]	; (80046a8 <flowmodbus+0xb40>)
 800458c:	f002 fba4 	bl	8006cd8 <HAL_GPIO_ReadPin>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d14b      	bne.n	800462e <flowmodbus+0xac6>
					CaseTray = 0;
 8004596:	4b52      	ldr	r3, [pc, #328]	; (80046e0 <flowmodbus+0xb78>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]
					plustray = -1;
 800459c:	4b51      	ldr	r3, [pc, #324]	; (80046e4 <flowmodbus+0xb7c>)
 800459e:	f04f 32ff 	mov.w	r2, #4294967295
 80045a2:	601a      	str	r2, [r3, #0]
					path = 0;
 80045a4:	4b43      	ldr	r3, [pc, #268]	; (80046b4 <flowmodbus+0xb4c>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
					data_read = 0;
 80045aa:	4b41      	ldr	r3, [pc, #260]	; (80046b0 <flowmodbus+0xb48>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	701a      	strb	r2, [r3, #0]
					done = 0;
 80045b0:	4b4d      	ldr	r3, [pc, #308]	; (80046e8 <flowmodbus+0xb80>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]
					I2Cdone = 0;
 80045b6:	4b48      	ldr	r3, [pc, #288]	; (80046d8 <flowmodbus+0xb70>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]
					Em_state = 1;
 80045bc:	4b45      	ldr	r3, [pc, #276]	; (80046d4 <flowmodbus+0xb6c>)
 80045be:	2201      	movs	r2, #1
 80045c0:	601a      	str	r2, [r3, #0]
				break;
 80045c2:	e034      	b.n	800462e <flowmodbus+0xac6>
				if(I2Cdone == 0){
 80045c4:	4b44      	ldr	r3, [pc, #272]	; (80046d8 <flowmodbus+0xb70>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10f      	bne.n	80045ec <flowmodbus+0xa84>
					timestampI2Cdone = HAL_GetTick() + 500;
 80045cc:	f001 f8d2 	bl	8005774 <HAL_GetTick>
 80045d0:	4603      	mov	r3, r0
 80045d2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80045d6:	2200      	movs	r2, #0
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	617a      	str	r2, [r7, #20]
 80045dc:	4b3f      	ldr	r3, [pc, #252]	; (80046dc <flowmodbus+0xb74>)
 80045de:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80045e2:	e9c3 1200 	strd	r1, r2, [r3]
					I2Cdone = 1;
 80045e6:	4b3c      	ldr	r3, [pc, #240]	; (80046d8 <flowmodbus+0xb70>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	601a      	str	r2, [r3, #0]
				if(HAL_GetTick() >= timestampI2Cdone){
 80045ec:	f001 f8c2 	bl	8005774 <HAL_GetTick>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2200      	movs	r2, #0
 80045f4:	469a      	mov	sl, r3
 80045f6:	4693      	mov	fp, r2
 80045f8:	4b38      	ldr	r3, [pc, #224]	; (80046dc <flowmodbus+0xb74>)
 80045fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fe:	4592      	cmp	sl, r2
 8004600:	eb7b 0303 	sbcs.w	r3, fp, r3
 8004604:	d315      	bcc.n	8004632 <flowmodbus+0xaca>
					choice = 5;
 8004606:	4b29      	ldr	r3, [pc, #164]	; (80046ac <flowmodbus+0xb44>)
 8004608:	2205      	movs	r2, #5
 800460a:	601a      	str	r2, [r3, #0]
					I2C_all(&data_read);
 800460c:	4828      	ldr	r0, [pc, #160]	; (80046b0 <flowmodbus+0xb48>)
 800460e:	f7fe fc53 	bl	8002eb8 <I2C_all>
					if(I2Cdone == 1){
 8004612:	4b31      	ldr	r3, [pc, #196]	; (80046d8 <flowmodbus+0xb70>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d10b      	bne.n	8004632 <flowmodbus+0xaca>
						I2Cdone = 0;
 800461a:	4b2f      	ldr	r3, [pc, #188]	; (80046d8 <flowmodbus+0xb70>)
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]
						Em_state = 0;
 8004620:	4b2c      	ldr	r3, [pc, #176]	; (80046d4 <flowmodbus+0xb6c>)
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]
						Mobus = Initial;;
 8004626:	4b26      	ldr	r3, [pc, #152]	; (80046c0 <flowmodbus+0xb58>)
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]
				break;
 800462c:	e001      	b.n	8004632 <flowmodbus+0xaca>
				break;
 800462e:	bf00      	nop
 8004630:	e23d      	b.n	8004aae <flowmodbus+0xf46>
				break;
 8004632:	bf00      	nop
		break;
 8004634:	e23b      	b.n	8004aae <flowmodbus+0xf46>
	case Run_TrayMode:
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1){ // if Emergency Tray mode On
 8004636:	f44f 7100 	mov.w	r1, #512	; 0x200
 800463a:	481b      	ldr	r0, [pc, #108]	; (80046a8 <flowmodbus+0xb40>)
 800463c:	f002 fb4c 	bl	8006cd8 <HAL_GPIO_ReadPin>
 8004640:	4603      	mov	r3, r0
 8004642:	2b01      	cmp	r3, #1
 8004644:	d11b      	bne.n	800467e <flowmodbus+0xb16>
			CaseTray = 0;
 8004646:	4b26      	ldr	r3, [pc, #152]	; (80046e0 <flowmodbus+0xb78>)
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
			plustray = -1;
 800464c:	4b25      	ldr	r3, [pc, #148]	; (80046e4 <flowmodbus+0xb7c>)
 800464e:	f04f 32ff 	mov.w	r2, #4294967295
 8004652:	601a      	str	r2, [r3, #0]
			path = 0;
 8004654:	4b17      	ldr	r3, [pc, #92]	; (80046b4 <flowmodbus+0xb4c>)
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]
			data_read = 0;
 800465a:	4b15      	ldr	r3, [pc, #84]	; (80046b0 <flowmodbus+0xb48>)
 800465c:	2200      	movs	r2, #0
 800465e:	701a      	strb	r2, [r3, #0]
			done = 0;
 8004660:	4b21      	ldr	r3, [pc, #132]	; (80046e8 <flowmodbus+0xb80>)
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]
			I2Cdone = 0;
 8004666:	4b1c      	ldr	r3, [pc, #112]	; (80046d8 <flowmodbus+0xb70>)
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
			choice = 4;
 800466c:	4b0f      	ldr	r3, [pc, #60]	; (80046ac <flowmodbus+0xb44>)
 800466e:	2204      	movs	r2, #4
 8004670:	601a      	str	r2, [r3, #0]
			I2C_all(&data_read);
 8004672:	480f      	ldr	r0, [pc, #60]	; (80046b0 <flowmodbus+0xb48>)
 8004674:	f7fe fc20 	bl	8002eb8 <I2C_all>
			Mobus = EM_Run_TrayMode;
 8004678:	4b11      	ldr	r3, [pc, #68]	; (80046c0 <flowmodbus+0xb58>)
 800467a:	2207      	movs	r2, #7
 800467c:	701a      	strb	r2, [r3, #0]
		}
		switch (CaseTray) {
 800467e:	4b18      	ldr	r3, [pc, #96]	; (80046e0 <flowmodbus+0xb78>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b04      	cmp	r3, #4
 8004684:	f200 8212 	bhi.w	8004aac <flowmodbus+0xf44>
 8004688:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <flowmodbus+0xb28>)
 800468a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468e:	bf00      	nop
 8004690:	080046ed 	.word	0x080046ed
 8004694:	0800484f 	.word	0x0800484f
 8004698:	080048a1 	.word	0x080048a1
 800469c:	080049f9 	.word	0x080049f9
 80046a0:	08004a55 	.word	0x08004a55
 80046a4:	2000121c 	.word	0x2000121c
 80046a8:	40020000 	.word	0x40020000
 80046ac:	200009c0 	.word	0x200009c0
 80046b0:	200009c4 	.word	0x200009c4
 80046b4:	200012b4 	.word	0x200012b4
 80046b8:	20001328 	.word	0x20001328
 80046bc:	20001334 	.word	0x20001334
 80046c0:	20000d40 	.word	0x20000d40
 80046c4:	20001354 	.word	0x20001354
 80046c8:	2000131c 	.word	0x2000131c
 80046cc:	200009d8 	.word	0x200009d8
 80046d0:	42c80000 	.word	0x42c80000
 80046d4:	20000994 	.word	0x20000994
 80046d8:	200009a8 	.word	0x200009a8
 80046dc:	200009a0 	.word	0x200009a0
 80046e0:	200009b0 	.word	0x200009b0
 80046e4:	20000200 	.word	0x20000200
 80046e8:	200009ac 	.word	0x200009ac
			case 0:
				registerFrame[1].U16 = 4; // Basesystem reset position
 80046ec:	4bab      	ldr	r3, [pc, #684]	; (800499c <flowmodbus+0xe34>)
 80046ee:	2204      	movs	r2, #4
 80046f0:	805a      	strh	r2, [r3, #2]
				path = 1;
 80046f2:	4bab      	ldr	r3, [pc, #684]	; (80049a0 <flowmodbus+0xe38>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	601a      	str	r2, [r3, #0]
				indexposition = 0;
 80046f8:	4baa      	ldr	r3, [pc, #680]	; (80049a4 <flowmodbus+0xe3c>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]
				choice = 6;
 80046fe:	4baa      	ldr	r3, [pc, #680]	; (80049a8 <flowmodbus+0xe40>)
 8004700:	2206      	movs	r2, #6
 8004702:	601a      	str	r2, [r3, #0]
				I2C_all(&data_read);
 8004704:	48a9      	ldr	r0, [pc, #676]	; (80049ac <flowmodbus+0xe44>)
 8004706:	f7fe fbd7 	bl	8002eb8 <I2C_all>
				// y axis
				if(plustray == -1){ // home
 800470a:	4ba9      	ldr	r3, [pc, #676]	; (80049b0 <flowmodbus+0xe48>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004712:	d14a      	bne.n	80047aa <flowmodbus+0xc42>
					// y-axis
					start_p = 0+350;
 8004714:	4ba7      	ldr	r3, [pc, #668]	; (80049b4 <flowmodbus+0xe4c>)
 8004716:	4aa8      	ldr	r2, [pc, #672]	; (80049b8 <flowmodbus+0xe50>)
 8004718:	601a      	str	r2, [r3, #0]
					stop_p = point_y[plustray+1]+350;
 800471a:	4ba5      	ldr	r3, [pc, #660]	; (80049b0 <flowmodbus+0xe48>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3301      	adds	r3, #1
 8004720:	4aa6      	ldr	r2, [pc, #664]	; (80049bc <flowmodbus+0xe54>)
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	edd3 7a00 	vldr	s15, [r3]
 800472a:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 80049c0 <flowmodbus+0xe58>
 800472e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004732:	4ba4      	ldr	r3, [pc, #656]	; (80049c4 <flowmodbus+0xe5c>)
 8004734:	edc3 7a00 	vstr	s15, [r3]
					start_v = 0; // qk
 8004738:	4ba3      	ldr	r3, [pc, #652]	; (80049c8 <flowmodbus+0xe60>)
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	601a      	str	r2, [r3, #0]
					stop_v = 0; // q_dotk+1
 8004740:	4ba2      	ldr	r3, [pc, #648]	; (80049cc <flowmodbus+0xe64>)
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	601a      	str	r2, [r3, #0]
					timecycle = 1.5;
 8004748:	4ba1      	ldr	r3, [pc, #644]	; (80049d0 <flowmodbus+0xe68>)
 800474a:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800474e:	601a      	str	r2, [r3, #0]
					main_Qubic();
 8004750:	f000 fb7a 	bl	8004e48 <main_Qubic>
					// x axis
					if(registerFrame[64].U16 == 0){
 8004754:	4b91      	ldr	r3, [pc, #580]	; (800499c <flowmodbus+0xe34>)
 8004756:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800475a:	2b00      	cmp	r3, #0
 800475c:	d121      	bne.n	80047a2 <flowmodbus+0xc3a>
					 registerFrame[65].U16 = (int16_t)(point_x[plustray+1]*10); // position Tray pick/place
 800475e:	4b94      	ldr	r3, [pc, #592]	; (80049b0 <flowmodbus+0xe48>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3301      	adds	r3, #1
 8004764:	4a9b      	ldr	r2, [pc, #620]	; (80049d4 <flowmodbus+0xe6c>)
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4413      	add	r3, r2
 800476a:	edd3 7a00 	vldr	s15, [r3]
 800476e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004772:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004776:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800477a:	ee17 3a90 	vmov	r3, s15
 800477e:	b21b      	sxth	r3, r3
 8004780:	b29a      	uxth	r2, r3
 8004782:	4b86      	ldr	r3, [pc, #536]	; (800499c <flowmodbus+0xe34>)
 8004784:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
					 registerFrame[66].U16 = 3000; // speed x-axis 300mm
 8004788:	4b84      	ldr	r3, [pc, #528]	; (800499c <flowmodbus+0xe34>)
 800478a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800478e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
					 registerFrame[67].U16 = 1; // Acc time 1mms
 8004792:	4b82      	ldr	r3, [pc, #520]	; (800499c <flowmodbus+0xe34>)
 8004794:	2201      	movs	r2, #1
 8004796:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
					 registerFrame[64].U16 = 2; //0x40 Moving Status x-axis - run mode
 800479a:	4b80      	ldr	r3, [pc, #512]	; (800499c <flowmodbus+0xe34>)
 800479c:	2202      	movs	r2, #2
 800479e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
					}
					 CaseTray = 1;
 80047a2:	4b8d      	ldr	r3, [pc, #564]	; (80049d8 <flowmodbus+0xe70>)
 80047a4:	2201      	movs	r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
				 registerFrame[66].U16 = 3000; // speed x-axis 300mm
				 registerFrame[67].U16 = 1; // Acc time 1mms
				 registerFrame[64].U16 = 2; //0x40 Moving Status x-axis - run mode
				 CaseTray = 1;
				}
				break;
 80047a8:	e17b      	b.n	8004aa2 <flowmodbus+0xf3a>
				start_p = point_y[plustray]+350 ;
 80047aa:	4b81      	ldr	r3, [pc, #516]	; (80049b0 <flowmodbus+0xe48>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a83      	ldr	r2, [pc, #524]	; (80049bc <flowmodbus+0xe54>)
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	edd3 7a00 	vldr	s15, [r3]
 80047b8:	ed9f 7a81 	vldr	s14, [pc, #516]	; 80049c0 <flowmodbus+0xe58>
 80047bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047c0:	4b7c      	ldr	r3, [pc, #496]	; (80049b4 <flowmodbus+0xe4c>)
 80047c2:	edc3 7a00 	vstr	s15, [r3]
				stop_p = point_y[plustray + 1]+350 ;
 80047c6:	4b7a      	ldr	r3, [pc, #488]	; (80049b0 <flowmodbus+0xe48>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3301      	adds	r3, #1
 80047cc:	4a7b      	ldr	r2, [pc, #492]	; (80049bc <flowmodbus+0xe54>)
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	edd3 7a00 	vldr	s15, [r3]
 80047d6:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 80049c0 <flowmodbus+0xe58>
 80047da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047de:	4b79      	ldr	r3, [pc, #484]	; (80049c4 <flowmodbus+0xe5c>)
 80047e0:	edc3 7a00 	vstr	s15, [r3]
				start_v = 0; // qk
 80047e4:	4b78      	ldr	r3, [pc, #480]	; (80049c8 <flowmodbus+0xe60>)
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
				stop_v = 0; // q_dotk+1
 80047ec:	4b77      	ldr	r3, [pc, #476]	; (80049cc <flowmodbus+0xe64>)
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]
				timecycle = 1.5;
 80047f4:	4b76      	ldr	r3, [pc, #472]	; (80049d0 <flowmodbus+0xe68>)
 80047f6:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80047fa:	601a      	str	r2, [r3, #0]
				main_Qubic();
 80047fc:	f000 fb24 	bl	8004e48 <main_Qubic>
				 registerFrame[65].U16 = (int16_t)point_x[plustray+1]*10; // position Tray pick/place
 8004800:	4b6b      	ldr	r3, [pc, #428]	; (80049b0 <flowmodbus+0xe48>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3301      	adds	r3, #1
 8004806:	4a73      	ldr	r2, [pc, #460]	; (80049d4 <flowmodbus+0xe6c>)
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	edd3 7a00 	vldr	s15, [r3]
 8004810:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004814:	ee17 3a90 	vmov	r3, s15
 8004818:	b21b      	sxth	r3, r3
 800481a:	b29b      	uxth	r3, r3
 800481c:	461a      	mov	r2, r3
 800481e:	0092      	lsls	r2, r2, #2
 8004820:	4413      	add	r3, r2
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	4b5d      	ldr	r3, [pc, #372]	; (800499c <flowmodbus+0xe34>)
 8004828:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				 registerFrame[66].U16 = 3000; // speed x-axis 300mm
 800482c:	4b5b      	ldr	r3, [pc, #364]	; (800499c <flowmodbus+0xe34>)
 800482e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004832:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				 registerFrame[67].U16 = 1; // Acc time 1mms
 8004836:	4b59      	ldr	r3, [pc, #356]	; (800499c <flowmodbus+0xe34>)
 8004838:	2201      	movs	r2, #1
 800483a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
				 registerFrame[64].U16 = 2; //0x40 Moving Status x-axis - run mode
 800483e:	4b57      	ldr	r3, [pc, #348]	; (800499c <flowmodbus+0xe34>)
 8004840:	2202      	movs	r2, #2
 8004842:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
				 CaseTray = 1;
 8004846:	4b64      	ldr	r3, [pc, #400]	; (80049d8 <flowmodbus+0xe70>)
 8004848:	2201      	movs	r2, #1
 800484a:	601a      	str	r2, [r3, #0]
				break;
 800484c:	e129      	b.n	8004aa2 <flowmodbus+0xf3a>
			case 1:
				if(done == 0){
 800484e:	4b63      	ldr	r3, [pc, #396]	; (80049dc <flowmodbus+0xe74>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10f      	bne.n	8004876 <flowmodbus+0xd0e>
				timestamptray = HAL_GetTick() + 2000;
 8004856:	f000 ff8d 	bl	8005774 <HAL_GetTick>
 800485a:	4603      	mov	r3, r0
 800485c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004860:	2200      	movs	r2, #0
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	60fa      	str	r2, [r7, #12]
 8004866:	4b5e      	ldr	r3, [pc, #376]	; (80049e0 <flowmodbus+0xe78>)
 8004868:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800486c:	e9c3 1200 	strd	r1, r2, [r3]
				done = 1;
 8004870:	4b5a      	ldr	r3, [pc, #360]	; (80049dc <flowmodbus+0xe74>)
 8004872:	2201      	movs	r2, #1
 8004874:	601a      	str	r2, [r3, #0]
				}
				if(HAL_GetTick() >= timestamptray){
 8004876:	f000 ff7d 	bl	8005774 <HAL_GetTick>
 800487a:	4603      	mov	r3, r0
 800487c:	2200      	movs	r2, #0
 800487e:	4698      	mov	r8, r3
 8004880:	4691      	mov	r9, r2
 8004882:	4b57      	ldr	r3, [pc, #348]	; (80049e0 <flowmodbus+0xe78>)
 8004884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004888:	4590      	cmp	r8, r2
 800488a:	eb79 0303 	sbcs.w	r3, r9, r3
 800488e:	f0c0 8101 	bcc.w	8004a94 <flowmodbus+0xf2c>
					CaseTray = 2;
 8004892:	4b51      	ldr	r3, [pc, #324]	; (80049d8 <flowmodbus+0xe70>)
 8004894:	2202      	movs	r2, #2
 8004896:	601a      	str	r2, [r3, #0]
					done = 0;
 8004898:	4b50      	ldr	r3, [pc, #320]	; (80049dc <flowmodbus+0xe74>)
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]
				}
			break;
 800489e:	e0f9      	b.n	8004a94 <flowmodbus+0xf2c>
			case 2:
				 if(plustray == 17){
 80048a0:	4b43      	ldr	r3, [pc, #268]	; (80049b0 <flowmodbus+0xe48>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b11      	cmp	r3, #17
 80048a6:	d113      	bne.n	80048d0 <flowmodbus+0xd68>
					Mobus = Initial;
 80048a8:	4b4e      	ldr	r3, [pc, #312]	; (80049e4 <flowmodbus+0xe7c>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	701a      	strb	r2, [r3, #0]
					plustray = -1;
 80048ae:	4b40      	ldr	r3, [pc, #256]	; (80049b0 <flowmodbus+0xe48>)
 80048b0:	f04f 32ff 	mov.w	r2, #4294967295
 80048b4:	601a      	str	r2, [r3, #0]
					CaseTray = 0;
 80048b6:	4b48      	ldr	r3, [pc, #288]	; (80049d8 <flowmodbus+0xe70>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
					data_read = 0;
 80048bc:	4b3b      	ldr	r3, [pc, #236]	; (80049ac <flowmodbus+0xe44>)
 80048be:	2200      	movs	r2, #0
 80048c0:	701a      	strb	r2, [r3, #0]
					choice = 7;
 80048c2:	4b39      	ldr	r3, [pc, #228]	; (80049a8 <flowmodbus+0xe40>)
 80048c4:	2207      	movs	r2, #7
 80048c6:	601a      	str	r2, [r3, #0]
					I2C_all(&data_read);
 80048c8:	4838      	ldr	r0, [pc, #224]	; (80049ac <flowmodbus+0xe44>)
 80048ca:	f7fe faf5 	bl	8002eb8 <I2C_all>
						 I2C_all(&data_read);
						 CaseTray = 3;
					 	 }
				 	 }
				 }
				break;
 80048ce:	e0e3      	b.n	8004a98 <flowmodbus+0xf30>
				if(indexposition >= (timecycle*100)){
 80048d0:	4b34      	ldr	r3, [pc, #208]	; (80049a4 <flowmodbus+0xe3c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	ee07 3a90 	vmov	s15, r3
 80048d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048dc:	4b3c      	ldr	r3, [pc, #240]	; (80049d0 <flowmodbus+0xe68>)
 80048de:	edd3 7a00 	vldr	s15, [r3]
 80048e2:	eddf 6a41 	vldr	s13, [pc, #260]	; 80049e8 <flowmodbus+0xe80>
 80048e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80048ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f2:	db09      	blt.n	8004908 <flowmodbus+0xda0>
						s2 = 0;
 80048f4:	4b3d      	ldr	r3, [pc, #244]	; (80049ec <flowmodbus+0xe84>)
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]
						indexposition = 0;
 80048fc:	4b29      	ldr	r3, [pc, #164]	; (80049a4 <flowmodbus+0xe3c>)
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]
						path = 0;
 8004902:	4b27      	ldr	r3, [pc, #156]	; (80049a0 <flowmodbus+0xe38>)
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]
				 if(abs(error) < 0.2){
 8004908:	4b39      	ldr	r3, [pc, #228]	; (80049f0 <flowmodbus+0xe88>)
 800490a:	edd3 7a00 	vldr	s15, [r3]
 800490e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004912:	ee17 3a90 	vmov	r3, s15
 8004916:	2b00      	cmp	r3, #0
 8004918:	f2c0 80be 	blt.w	8004a98 <flowmodbus+0xf30>
 800491c:	4b34      	ldr	r3, [pc, #208]	; (80049f0 <flowmodbus+0xe88>)
 800491e:	edd3 7a00 	vldr	s15, [r3]
 8004922:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004926:	ee17 3a90 	vmov	r3, s15
 800492a:	2b00      	cmp	r3, #0
 800492c:	f300 80b4 	bgt.w	8004a98 <flowmodbus+0xf30>
					 if((plustray%2) != 0 || plustray == -1){ // Pick Case
 8004930:	4b1f      	ldr	r3, [pc, #124]	; (80049b0 <flowmodbus+0xe48>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b00      	cmp	r3, #0
 800493a:	d104      	bne.n	8004946 <flowmodbus+0xdde>
 800493c:	4b1c      	ldr	r3, [pc, #112]	; (80049b0 <flowmodbus+0xe48>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004944:	d110      	bne.n	8004968 <flowmodbus+0xe00>
						s2 = 0;
 8004946:	4b29      	ldr	r3, [pc, #164]	; (80049ec <flowmodbus+0xe84>)
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	601a      	str	r2, [r3, #0]
						s = 0;
 800494e:	4b29      	ldr	r3, [pc, #164]	; (80049f4 <flowmodbus+0xe8c>)
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
						 choice = 8;
 8004956:	4b14      	ldr	r3, [pc, #80]	; (80049a8 <flowmodbus+0xe40>)
 8004958:	2208      	movs	r2, #8
 800495a:	601a      	str	r2, [r3, #0]
						 I2C_all(&data_read);
 800495c:	4813      	ldr	r0, [pc, #76]	; (80049ac <flowmodbus+0xe44>)
 800495e:	f7fe faab 	bl	8002eb8 <I2C_all>
						 CaseTray = 3;
 8004962:	4b1d      	ldr	r3, [pc, #116]	; (80049d8 <flowmodbus+0xe70>)
 8004964:	2203      	movs	r2, #3
 8004966:	601a      	str	r2, [r3, #0]
					 if(plustray%2 == 0){ // Place Case
 8004968:	4b11      	ldr	r3, [pc, #68]	; (80049b0 <flowmodbus+0xe48>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	f040 8091 	bne.w	8004a98 <flowmodbus+0xf30>
						s2 = 0;
 8004976:	4b1d      	ldr	r3, [pc, #116]	; (80049ec <flowmodbus+0xe84>)
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	601a      	str	r2, [r3, #0]
						s = 0;
 800497e:	4b1d      	ldr	r3, [pc, #116]	; (80049f4 <flowmodbus+0xe8c>)
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
						 choice = 9;
 8004986:	4b08      	ldr	r3, [pc, #32]	; (80049a8 <flowmodbus+0xe40>)
 8004988:	2209      	movs	r2, #9
 800498a:	601a      	str	r2, [r3, #0]
						 I2C_all(&data_read);
 800498c:	4807      	ldr	r0, [pc, #28]	; (80049ac <flowmodbus+0xe44>)
 800498e:	f7fe fa93 	bl	8002eb8 <I2C_all>
						 CaseTray = 3;
 8004992:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <flowmodbus+0xe70>)
 8004994:	2203      	movs	r2, #3
 8004996:	601a      	str	r2, [r3, #0]
				break;
 8004998:	e07e      	b.n	8004a98 <flowmodbus+0xf30>
 800499a:	bf00      	nop
 800499c:	2000121c 	.word	0x2000121c
 80049a0:	200012b4 	.word	0x200012b4
 80049a4:	2000131c 	.word	0x2000131c
 80049a8:	200009c0 	.word	0x200009c0
 80049ac:	200009c4 	.word	0x200009c4
 80049b0:	20000200 	.word	0x20000200
 80049b4:	200009c8 	.word	0x200009c8
 80049b8:	43af0000 	.word	0x43af0000
 80049bc:	2000024c 	.word	0x2000024c
 80049c0:	43af0000 	.word	0x43af0000
 80049c4:	200009cc 	.word	0x200009cc
 80049c8:	200009d0 	.word	0x200009d0
 80049cc:	200009d4 	.word	0x200009d4
 80049d0:	200009d8 	.word	0x200009d8
 80049d4:	20000204 	.word	0x20000204
 80049d8:	200009b0 	.word	0x200009b0
 80049dc:	200009ac 	.word	0x200009ac
 80049e0:	20000398 	.word	0x20000398
 80049e4:	20000d40 	.word	0x20000d40
 80049e8:	42c80000 	.word	0x42c80000
 80049ec:	20001334 	.word	0x20001334
 80049f0:	20001354 	.word	0x20001354
 80049f4:	20001328 	.word	0x20001328
			case 3:
				if(I2Cdone == 0){
 80049f8:	4b2f      	ldr	r3, [pc, #188]	; (8004ab8 <flowmodbus+0xf50>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10f      	bne.n	8004a20 <flowmodbus+0xeb8>
					timestampI2Cdone = HAL_GetTick() + 2500;
 8004a00:	f000 feb8 	bl	8005774 <HAL_GetTick>
 8004a04:	4603      	mov	r3, r0
 8004a06:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	603b      	str	r3, [r7, #0]
 8004a0e:	607a      	str	r2, [r7, #4]
 8004a10:	4b2a      	ldr	r3, [pc, #168]	; (8004abc <flowmodbus+0xf54>)
 8004a12:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004a16:	e9c3 1200 	strd	r1, r2, [r3]
				I2Cdone = 1;
 8004a1a:	4b27      	ldr	r3, [pc, #156]	; (8004ab8 <flowmodbus+0xf50>)
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]
				}
				if(HAL_GetTick() >= timestampI2Cdone){
 8004a20:	f000 fea8 	bl	8005774 <HAL_GetTick>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2200      	movs	r2, #0
 8004a28:	461c      	mov	r4, r3
 8004a2a:	4615      	mov	r5, r2
 8004a2c:	4b23      	ldr	r3, [pc, #140]	; (8004abc <flowmodbus+0xf54>)
 8004a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a32:	4294      	cmp	r4, r2
 8004a34:	eb75 0303 	sbcs.w	r3, r5, r3
 8004a38:	d330      	bcc.n	8004a9c <flowmodbus+0xf34>
					choice = 10;
 8004a3a:	4b21      	ldr	r3, [pc, #132]	; (8004ac0 <flowmodbus+0xf58>)
 8004a3c:	220a      	movs	r2, #10
 8004a3e:	601a      	str	r2, [r3, #0]
					I2C_all(&data_read);
 8004a40:	4820      	ldr	r0, [pc, #128]	; (8004ac4 <flowmodbus+0xf5c>)
 8004a42:	f7fe fa39 	bl	8002eb8 <I2C_all>
					CaseTray = 4;
 8004a46:	4b20      	ldr	r3, [pc, #128]	; (8004ac8 <flowmodbus+0xf60>)
 8004a48:	2204      	movs	r2, #4
 8004a4a:	601a      	str	r2, [r3, #0]
					I2Cdone = 0;
 8004a4c:	4b1a      	ldr	r3, [pc, #104]	; (8004ab8 <flowmodbus+0xf50>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]
				}
				break;
 8004a52:	e023      	b.n	8004a9c <flowmodbus+0xf34>
			case 4: // Pick Case
				if(data_read == 7 || data_read == 4){
 8004a54:	4b1b      	ldr	r3, [pc, #108]	; (8004ac4 <flowmodbus+0xf5c>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b07      	cmp	r3, #7
 8004a5a:	d003      	beq.n	8004a64 <flowmodbus+0xefc>
 8004a5c:	4b19      	ldr	r3, [pc, #100]	; (8004ac4 <flowmodbus+0xf5c>)
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	2b04      	cmp	r3, #4
 8004a62:	d11d      	bne.n	8004aa0 <flowmodbus+0xf38>
					if(plustray < 17 || plustray == -1){
 8004a64:	4b19      	ldr	r3, [pc, #100]	; (8004acc <flowmodbus+0xf64>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	dd04      	ble.n	8004a76 <flowmodbus+0xf0e>
 8004a6c:	4b17      	ldr	r3, [pc, #92]	; (8004acc <flowmodbus+0xf64>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a74:	d114      	bne.n	8004aa0 <flowmodbus+0xf38>
					choice = 0;
 8004a76:	4b12      	ldr	r3, [pc, #72]	; (8004ac0 <flowmodbus+0xf58>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]
					plustray++;
 8004a7c:	4b13      	ldr	r3, [pc, #76]	; (8004acc <flowmodbus+0xf64>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3301      	adds	r3, #1
 8004a82:	4a12      	ldr	r2, [pc, #72]	; (8004acc <flowmodbus+0xf64>)
 8004a84:	6013      	str	r3, [r2, #0]
					CaseTray = 0;
 8004a86:	4b10      	ldr	r3, [pc, #64]	; (8004ac8 <flowmodbus+0xf60>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]
					done = 0;
 8004a8c:	4b10      	ldr	r3, [pc, #64]	; (8004ad0 <flowmodbus+0xf68>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]
					}
				}
				break;
 8004a92:	e005      	b.n	8004aa0 <flowmodbus+0xf38>
			break;
 8004a94:	bf00      	nop
 8004a96:	e009      	b.n	8004aac <flowmodbus+0xf44>
				break;
 8004a98:	bf00      	nop
 8004a9a:	e007      	b.n	8004aac <flowmodbus+0xf44>
				break;
 8004a9c:	bf00      	nop
 8004a9e:	e005      	b.n	8004aac <flowmodbus+0xf44>
				break;
 8004aa0:	bf00      	nop
		}
		break;
 8004aa2:	e003      	b.n	8004aac <flowmodbus+0xf44>
		break;
 8004aa4:	bf00      	nop
 8004aa6:	e002      	b.n	8004aae <flowmodbus+0xf46>
		break;
 8004aa8:	bf00      	nop
 8004aaa:	e000      	b.n	8004aae <flowmodbus+0xf46>
		break;
 8004aac:	bf00      	nop
	}
}
 8004aae:	bf00      	nop
 8004ab0:	3738      	adds	r7, #56	; 0x38
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ab8:	200009a8 	.word	0x200009a8
 8004abc:	200009a0 	.word	0x200009a0
 8004ac0:	200009c0 	.word	0x200009c0
 8004ac4:	200009c4 	.word	0x200009c4
 8004ac8:	200009b0 	.word	0x200009b0
 8004acc:	20000200 	.word	0x20000200
 8004ad0:	200009ac 	.word	0x200009ac

08004ad4 <control_interrupt>:
float control_interrupt() {
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
//loop 1
	error = SetDegree - ReadDegree;
 8004ad8:	4b52      	ldr	r3, [pc, #328]	; (8004c24 <control_interrupt+0x150>)
 8004ada:	ed93 7a00 	vldr	s14, [r3]
 8004ade:	4b52      	ldr	r3, [pc, #328]	; (8004c28 <control_interrupt+0x154>)
 8004ae0:	edd3 7a00 	vldr	s15, [r3]
 8004ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ae8:	4b50      	ldr	r3, [pc, #320]	; (8004c2c <control_interrupt+0x158>)
 8004aea:	edc3 7a00 	vstr	s15, [r3]
	s = s + error;
 8004aee:	4b50      	ldr	r3, [pc, #320]	; (8004c30 <control_interrupt+0x15c>)
 8004af0:	ed93 7a00 	vldr	s14, [r3]
 8004af4:	4b4d      	ldr	r3, [pc, #308]	; (8004c2c <control_interrupt+0x158>)
 8004af6:	edd3 7a00 	vldr	s15, [r3]
 8004afa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004afe:	4b4c      	ldr	r3, [pc, #304]	; (8004c30 <control_interrupt+0x15c>)
 8004b00:	edc3 7a00 	vstr	s15, [r3]
	u = K_P * error + K_I * s + K_D * (error - p);
 8004b04:	4b4b      	ldr	r3, [pc, #300]	; (8004c34 <control_interrupt+0x160>)
 8004b06:	ed93 7a00 	vldr	s14, [r3]
 8004b0a:	4b48      	ldr	r3, [pc, #288]	; (8004c2c <control_interrupt+0x158>)
 8004b0c:	edd3 7a00 	vldr	s15, [r3]
 8004b10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b14:	4b48      	ldr	r3, [pc, #288]	; (8004c38 <control_interrupt+0x164>)
 8004b16:	edd3 6a00 	vldr	s13, [r3]
 8004b1a:	4b45      	ldr	r3, [pc, #276]	; (8004c30 <control_interrupt+0x15c>)
 8004b1c:	edd3 7a00 	vldr	s15, [r3]
 8004b20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b28:	4b40      	ldr	r3, [pc, #256]	; (8004c2c <control_interrupt+0x158>)
 8004b2a:	edd3 6a00 	vldr	s13, [r3]
 8004b2e:	4b43      	ldr	r3, [pc, #268]	; (8004c3c <control_interrupt+0x168>)
 8004b30:	edd3 7a00 	vldr	s15, [r3]
 8004b34:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004b38:	4b41      	ldr	r3, [pc, #260]	; (8004c40 <control_interrupt+0x16c>)
 8004b3a:	edd3 7a00 	vldr	s15, [r3]
 8004b3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b46:	4b3f      	ldr	r3, [pc, #252]	; (8004c44 <control_interrupt+0x170>)
 8004b48:	edc3 7a00 	vstr	s15, [r3]
	p = error;
 8004b4c:	4b37      	ldr	r3, [pc, #220]	; (8004c2c <control_interrupt+0x158>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a3a      	ldr	r2, [pc, #232]	; (8004c3c <control_interrupt+0x168>)
 8004b52:	6013      	str	r3, [r2, #0]
// loop 2
	error2 = (u + SetVelocity) - speed;
 8004b54:	4b3b      	ldr	r3, [pc, #236]	; (8004c44 <control_interrupt+0x170>)
 8004b56:	ed93 7a00 	vldr	s14, [r3]
 8004b5a:	4b3b      	ldr	r3, [pc, #236]	; (8004c48 <control_interrupt+0x174>)
 8004b5c:	edd3 7a00 	vldr	s15, [r3]
 8004b60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b64:	4b39      	ldr	r3, [pc, #228]	; (8004c4c <control_interrupt+0x178>)
 8004b66:	edd3 7a00 	vldr	s15, [r3]
 8004b6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b6e:	4b38      	ldr	r3, [pc, #224]	; (8004c50 <control_interrupt+0x17c>)
 8004b70:	edc3 7a00 	vstr	s15, [r3]
	s2 = s2 + error2;
 8004b74:	4b37      	ldr	r3, [pc, #220]	; (8004c54 <control_interrupt+0x180>)
 8004b76:	ed93 7a00 	vldr	s14, [r3]
 8004b7a:	4b35      	ldr	r3, [pc, #212]	; (8004c50 <control_interrupt+0x17c>)
 8004b7c:	edd3 7a00 	vldr	s15, [r3]
 8004b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b84:	4b33      	ldr	r3, [pc, #204]	; (8004c54 <control_interrupt+0x180>)
 8004b86:	edc3 7a00 	vstr	s15, [r3]
	u2 = K_Pvelo * error2 + K_Ivelo * s2 + K_Dvelo * (error2 - p2);
 8004b8a:	4b33      	ldr	r3, [pc, #204]	; (8004c58 <control_interrupt+0x184>)
 8004b8c:	ed93 7a00 	vldr	s14, [r3]
 8004b90:	4b2f      	ldr	r3, [pc, #188]	; (8004c50 <control_interrupt+0x17c>)
 8004b92:	edd3 7a00 	vldr	s15, [r3]
 8004b96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b9a:	4b30      	ldr	r3, [pc, #192]	; (8004c5c <control_interrupt+0x188>)
 8004b9c:	edd3 6a00 	vldr	s13, [r3]
 8004ba0:	4b2c      	ldr	r3, [pc, #176]	; (8004c54 <control_interrupt+0x180>)
 8004ba2:	edd3 7a00 	vldr	s15, [r3]
 8004ba6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004baa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bae:	4b28      	ldr	r3, [pc, #160]	; (8004c50 <control_interrupt+0x17c>)
 8004bb0:	edd3 6a00 	vldr	s13, [r3]
 8004bb4:	4b2a      	ldr	r3, [pc, #168]	; (8004c60 <control_interrupt+0x18c>)
 8004bb6:	edd3 7a00 	vldr	s15, [r3]
 8004bba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004bbe:	4b29      	ldr	r3, [pc, #164]	; (8004c64 <control_interrupt+0x190>)
 8004bc0:	edd3 7a00 	vldr	s15, [r3]
 8004bc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bcc:	4b26      	ldr	r3, [pc, #152]	; (8004c68 <control_interrupt+0x194>)
 8004bce:	edc3 7a00 	vstr	s15, [r3]
	if (u2 > 65534)
 8004bd2:	4b25      	ldr	r3, [pc, #148]	; (8004c68 <control_interrupt+0x194>)
 8004bd4:	edd3 7a00 	vldr	s15, [r3]
 8004bd8:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8004c6c <control_interrupt+0x198>
 8004bdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be4:	dd02      	ble.n	8004bec <control_interrupt+0x118>
		u2 = 65535;
 8004be6:	4b20      	ldr	r3, [pc, #128]	; (8004c68 <control_interrupt+0x194>)
 8004be8:	4a21      	ldr	r2, [pc, #132]	; (8004c70 <control_interrupt+0x19c>)
 8004bea:	601a      	str	r2, [r3, #0]
	if (u2 < -65534)
 8004bec:	4b1e      	ldr	r3, [pc, #120]	; (8004c68 <control_interrupt+0x194>)
 8004bee:	edd3 7a00 	vldr	s15, [r3]
 8004bf2:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8004c74 <control_interrupt+0x1a0>
 8004bf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfe:	d502      	bpl.n	8004c06 <control_interrupt+0x132>
		u2 = -65535;
 8004c00:	4b19      	ldr	r3, [pc, #100]	; (8004c68 <control_interrupt+0x194>)
 8004c02:	4a1d      	ldr	r2, [pc, #116]	; (8004c78 <control_interrupt+0x1a4>)
 8004c04:	601a      	str	r2, [r3, #0]
	p2 = error2;
 8004c06:	4b12      	ldr	r3, [pc, #72]	; (8004c50 <control_interrupt+0x17c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a15      	ldr	r2, [pc, #84]	; (8004c60 <control_interrupt+0x18c>)
 8004c0c:	6013      	str	r3, [r2, #0]
	return u2;
 8004c0e:	4b16      	ldr	r3, [pc, #88]	; (8004c68 <control_interrupt+0x194>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	ee07 3a90 	vmov	s15, r3
}
 8004c16:	eeb0 0a67 	vmov.f32	s0, s15
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	2000134c 	.word	0x2000134c
 8004c28:	20001348 	.word	0x20001348
 8004c2c:	20001354 	.word	0x20001354
 8004c30:	20001328 	.word	0x20001328
 8004c34:	2000133c 	.word	0x2000133c
 8004c38:	20000384 	.word	0x20000384
 8004c3c:	20001324 	.word	0x20001324
 8004c40:	20001340 	.word	0x20001340
 8004c44:	20001320 	.word	0x20001320
 8004c48:	20000390 	.word	0x20000390
 8004c4c:	200012ac 	.word	0x200012ac
 8004c50:	20001338 	.word	0x20001338
 8004c54:	20001334 	.word	0x20001334
 8004c58:	20000388 	.word	0x20000388
 8004c5c:	2000038c 	.word	0x2000038c
 8004c60:	20001330 	.word	0x20001330
 8004c64:	20001344 	.word	0x20001344
 8004c68:	2000132c 	.word	0x2000132c
 8004c6c:	477ffe00 	.word	0x477ffe00
 8004c70:	477fff00 	.word	0x477fff00
 8004c74:	c77ffe00 	.word	0xc77ffe00
 8004c78:	c77fff00 	.word	0xc77fff00

08004c7c <velocity>:
	if (u2 < -65535)
		u2 = -65535;
	p2 = error2;
	return u2;
}
void velocity() {
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
	QEIData.data[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8004c82:	4b2c      	ldr	r3, [pc, #176]	; (8004d34 <velocity+0xb8>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	4a2b      	ldr	r2, [pc, #172]	; (8004d38 <velocity+0xbc>)
 8004c8a:	6013      	str	r3, [r2, #0]
	QEIData.timestamp[0] = micros();
 8004c8c:	f000 f8c2 	bl	8004e14 <micros>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4b28      	ldr	r3, [pc, #160]	; (8004d38 <velocity+0xbc>)
 8004c96:	609a      	str	r2, [r3, #8]

	int32_t diffposition = QEIData.data[0] - QEIData.data[1];
 8004c98:	4b27      	ldr	r3, [pc, #156]	; (8004d38 <velocity+0xbc>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	4b26      	ldr	r3, [pc, #152]	; (8004d38 <velocity+0xbc>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	607b      	str	r3, [r7, #4]
	float difftime = QEIData.timestamp[0] - QEIData.timestamp[1];
 8004ca4:	4b24      	ldr	r3, [pc, #144]	; (8004d38 <velocity+0xbc>)
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	4b23      	ldr	r3, [pc, #140]	; (8004d38 <velocity+0xbc>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cb6:	edc7 7a00 	vstr	s15, [r7]

	if (ReadDegree > 750) {
 8004cba:	4b20      	ldr	r3, [pc, #128]	; (8004d3c <velocity+0xc0>)
 8004cbc:	edd3 7a00 	vldr	s15, [r3]
 8004cc0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004d40 <velocity+0xc4>
 8004cc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ccc:	dd03      	ble.n	8004cd6 <velocity+0x5a>
		SetDegree = 0;
 8004cce:	4b1d      	ldr	r3, [pc, #116]	; (8004d44 <velocity+0xc8>)
 8004cd0:	f04f 0200 	mov.w	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]
	}
	if (diffposition < -(QEI_PERIOD >> 1)) {
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f513 4fa0 	cmn.w	r3, #20480	; 0x5000
 8004cdc:	da03      	bge.n	8004ce6 <velocity+0x6a>
		diffposition += QEI_PERIOD;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8004ce4:	607b      	str	r3, [r7, #4]
	}

	QEIData.QEIPosition = __HAL_TIM_GET_COUNTER(&htim2) % 8192;
 8004ce6:	4b13      	ldr	r3, [pc, #76]	; (8004d34 <velocity+0xb8>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cf0:	ee07 3a90 	vmov	s15, r3
 8004cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cf8:	4b0f      	ldr	r3, [pc, #60]	; (8004d38 <velocity+0xbc>)
 8004cfa:	edc3 7a04 	vstr	s15, [r3, #16]
	QEIData.QEIVelocity = (diffposition * 1000000) / difftime;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a11      	ldr	r2, [pc, #68]	; (8004d48 <velocity+0xcc>)
 8004d02:	fb02 f303 	mul.w	r3, r2, r3
 8004d06:	ee07 3a90 	vmov	s15, r3
 8004d0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004d0e:	ed97 7a00 	vldr	s14, [r7]
 8004d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d16:	4b08      	ldr	r3, [pc, #32]	; (8004d38 <velocity+0xbc>)
 8004d18:	edc3 7a05 	vstr	s15, [r3, #20]

	QEIData.data[1] = QEIData.data[0];
 8004d1c:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <velocity+0xbc>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a05      	ldr	r2, [pc, #20]	; (8004d38 <velocity+0xbc>)
 8004d22:	6053      	str	r3, [r2, #4]
	QEIData.timestamp[1] = QEIData.timestamp[0];
 8004d24:	4b04      	ldr	r3, [pc, #16]	; (8004d38 <velocity+0xbc>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	4a03      	ldr	r2, [pc, #12]	; (8004d38 <velocity+0xbc>)
 8004d2a:	60d3      	str	r3, [r2, #12]

}
 8004d2c:	bf00      	nop
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	2000053c 	.word	0x2000053c
 8004d38:	200012d8 	.word	0x200012d8
 8004d3c:	20001348 	.word	0x20001348
 8004d40:	443b8000 	.word	0x443b8000
 8004d44:	2000134c 	.word	0x2000134c
 8004d48:	000f4240 	.word	0x000f4240

08004d4c <accelerate>:
void accelerate() {
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
	QEIAcc.data[0] = speed;
 8004d52:	4b20      	ldr	r3, [pc, #128]	; (8004dd4 <accelerate+0x88>)
 8004d54:	edd3 7a00 	vldr	s15, [r3]
 8004d58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d5c:	ee17 2a90 	vmov	r2, s15
 8004d60:	4b1d      	ldr	r3, [pc, #116]	; (8004dd8 <accelerate+0x8c>)
 8004d62:	601a      	str	r2, [r3, #0]
	QEIAcc.timestamp[0] = micros();
 8004d64:	f000 f856 	bl	8004e14 <micros>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4b1a      	ldr	r3, [pc, #104]	; (8004dd8 <accelerate+0x8c>)
 8004d6e:	609a      	str	r2, [r3, #8]

	int32_t diffposition = QEIAcc.data[0] - QEIAcc.data[1];
 8004d70:	4b19      	ldr	r3, [pc, #100]	; (8004dd8 <accelerate+0x8c>)
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	4b18      	ldr	r3, [pc, #96]	; (8004dd8 <accelerate+0x8c>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	607b      	str	r3, [r7, #4]
	float difftime = QEIAcc.timestamp[0] - QEIAcc.timestamp[1];
 8004d7c:	4b16      	ldr	r3, [pc, #88]	; (8004dd8 <accelerate+0x8c>)
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	4b15      	ldr	r3, [pc, #84]	; (8004dd8 <accelerate+0x8c>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	ee07 3a90 	vmov	s15, r3
 8004d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8e:	edc7 7a00 	vstr	s15, [r7]
	difftime = difftime / 1000000;
 8004d92:	ed97 7a00 	vldr	s14, [r7]
 8004d96:	eddf 6a11 	vldr	s13, [pc, #68]	; 8004ddc <accelerate+0x90>
 8004d9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d9e:	edc7 7a00 	vstr	s15, [r7]

	QEIAcc.QEIVelocity = (diffposition / difftime);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	ee07 3a90 	vmov	s15, r3
 8004da8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004dac:	ed97 7a00 	vldr	s14, [r7]
 8004db0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004db4:	4b08      	ldr	r3, [pc, #32]	; (8004dd8 <accelerate+0x8c>)
 8004db6:	edc3 7a05 	vstr	s15, [r3, #20]

	QEIAcc.data[1] = QEIAcc.data[0];
 8004dba:	4b07      	ldr	r3, [pc, #28]	; (8004dd8 <accelerate+0x8c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a06      	ldr	r2, [pc, #24]	; (8004dd8 <accelerate+0x8c>)
 8004dc0:	6053      	str	r3, [r2, #4]
	QEIAcc.timestamp[1] = QEIAcc.timestamp[0];
 8004dc2:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <accelerate+0x8c>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	4a04      	ldr	r2, [pc, #16]	; (8004dd8 <accelerate+0x8c>)
 8004dc8:	60d3      	str	r3, [r2, #12]
}
 8004dca:	bf00      	nop
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	200012ac 	.word	0x200012ac
 8004dd8:	200012f0 	.word	0x200012f0
 8004ddc:	49742400 	.word	0x49742400

08004de0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004de0:	b4b0      	push	{r4, r5, r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a08      	ldr	r2, [pc, #32]	; (8004e0c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d108      	bne.n	8004e02 <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8004df0:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df6:	1e54      	subs	r4, r2, #1
 8004df8:	f143 0500 	adc.w	r5, r3, #0
 8004dfc:	4b04      	ldr	r3, [pc, #16]	; (8004e10 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004dfe:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bcb0      	pop	{r4, r5, r7}
 8004e0a:	4770      	bx	lr
 8004e0c:	20000758 	.word	0x20000758
 8004e10:	20001308 	.word	0x20001308

08004e14 <micros>:
uint64_t micros() {
 8004e14:	b4b0      	push	{r4, r5, r7}
 8004e16:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8004e18:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <micros+0x2c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	2200      	movs	r2, #0
 8004e20:	4618      	mov	r0, r3
 8004e22:	4611      	mov	r1, r2
 8004e24:	4b07      	ldr	r3, [pc, #28]	; (8004e44 <micros+0x30>)
 8004e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2a:	1884      	adds	r4, r0, r2
 8004e2c:	eb41 0503 	adc.w	r5, r1, r3
 8004e30:	4622      	mov	r2, r4
 8004e32:	462b      	mov	r3, r5
}
 8004e34:	4610      	mov	r0, r2
 8004e36:	4619      	mov	r1, r3
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bcb0      	pop	{r4, r5, r7}
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	20000758 	.word	0x20000758
 8004e44:	20001308 	.word	0x20001308

08004e48 <main_Qubic>:
void main_Qubic() {
 8004e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e4c:	ed2d 8b02 	vpush	{d8}
 8004e50:	b084      	sub	sp, #16
 8004e52:	af00      	add	r7, sp, #0
	emxArray_real_T *q_acc;
	emxArray_real_T *q_position;
	emxArray_real_T *q_velocity;
	/* Initialize function 'Qubic' input arguments. */
	q_k1_tmp = argInit_real_T();
 8004e54:	f7fd f95e 	bl	8002114 <argInit_real_T>
 8004e58:	eeb0 7a40 	vmov.f32	s14, s0
 8004e5c:	eef0 7a60 	vmov.f32	s15, s1
 8004e60:	4b33      	ldr	r3, [pc, #204]	; (8004f30 <main_Qubic+0xe8>)
 8004e62:	ed83 7b00 	vstr	d7, [r3]
	/* Call the entry-point 'Qubic'. */
	emxInitArray_real_T(&q_position, 2);
 8004e66:	f107 0308 	add.w	r3, r7, #8
 8004e6a:	2102      	movs	r1, #2
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fd f863 	bl	8001f38 <emxInitArray_real_T>
	emxInitArray_real_T(&q_velocity, 2);
 8004e72:	1d3b      	adds	r3, r7, #4
 8004e74:	2102      	movs	r1, #2
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fd f85e 	bl	8001f38 <emxInitArray_real_T>
	emxInitArray_real_T(&q_acc, 2);
 8004e7c:	f107 030c 	add.w	r3, r7, #12
 8004e80:	2102      	movs	r1, #2
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fd f858 	bl	8001f38 <emxInitArray_real_T>
	Qubic(start_p, stop_p, start_v, stop_v, timecycle, q_position, q_velocity,
 8004e88:	4b2a      	ldr	r3, [pc, #168]	; (8004f34 <main_Qubic+0xec>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fb fb07 	bl	80004a0 <__aeabi_f2d>
 8004e92:	4604      	mov	r4, r0
 8004e94:	460d      	mov	r5, r1
 8004e96:	4b28      	ldr	r3, [pc, #160]	; (8004f38 <main_Qubic+0xf0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fb fb00 	bl	80004a0 <__aeabi_f2d>
 8004ea0:	4680      	mov	r8, r0
 8004ea2:	4689      	mov	r9, r1
 8004ea4:	4b25      	ldr	r3, [pc, #148]	; (8004f3c <main_Qubic+0xf4>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7fb faf9 	bl	80004a0 <__aeabi_f2d>
 8004eae:	4682      	mov	sl, r0
 8004eb0:	468b      	mov	fp, r1
 8004eb2:	4b23      	ldr	r3, [pc, #140]	; (8004f40 <main_Qubic+0xf8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fb faf2 	bl	80004a0 <__aeabi_f2d>
 8004ebc:	ec41 0b18 	vmov	d8, r0, r1
 8004ec0:	4b20      	ldr	r3, [pc, #128]	; (8004f44 <main_Qubic+0xfc>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fb faeb 	bl	80004a0 <__aeabi_f2d>
 8004eca:	ec41 0b17 	vmov	d7, r0, r1
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	6879      	ldr	r1, [r7, #4]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	eeb0 4a47 	vmov.f32	s8, s14
 8004eda:	eef0 4a67 	vmov.f32	s9, s15
 8004ede:	eeb0 3a48 	vmov.f32	s6, s16
 8004ee2:	eef0 3a68 	vmov.f32	s7, s17
 8004ee6:	ec4b ab12 	vmov	d2, sl, fp
 8004eea:	ec49 8b11 	vmov	d1, r8, r9
 8004eee:	ec45 4b10 	vmov	d0, r4, r5
 8004ef2:	f7fc fc91 	bl	8001818 <Qubic>
			q_acc);
	q_positionN = q_position;
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	4a13      	ldr	r2, [pc, #76]	; (8004f48 <main_Qubic+0x100>)
 8004efa:	6013      	str	r3, [r2, #0]
	q_velocityN = q_velocity;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a13      	ldr	r2, [pc, #76]	; (8004f4c <main_Qubic+0x104>)
 8004f00:	6013      	str	r3, [r2, #0]
	q_accN = q_acc;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	4a12      	ldr	r2, [pc, #72]	; (8004f50 <main_Qubic+0x108>)
 8004f06:	6013      	str	r3, [r2, #0]
	emxDestroyArray_real_T(q_position);
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fd f808 	bl	8001f20 <emxDestroyArray_real_T>
	emxDestroyArray_real_T(q_velocity);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fd f804 	bl	8001f20 <emxDestroyArray_real_T>
	emxDestroyArray_real_T(q_acc);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fd f800 	bl	8001f20 <emxDestroyArray_real_T>
}
 8004f20:	bf00      	nop
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	ecbd 8b02 	vpop	{d8}
 8004f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f2e:	bf00      	nop
 8004f30:	20000ba0 	.word	0x20000ba0
 8004f34:	200009c8 	.word	0x200009c8
 8004f38:	200009cc 	.word	0x200009cc
 8004f3c:	200009d0 	.word	0x200009d0
 8004f40:	200009d4 	.word	0x200009d4
 8004f44:	200009d8 	.word	0x200009d8
 8004f48:	20001314 	.word	0x20001314
 8004f4c:	20001310 	.word	0x20001310
 8004f50:	20001318 	.word	0x20001318

08004f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004f58:	b672      	cpsid	i
}
 8004f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004f5c:	e7fe      	b.n	8004f5c <Error_Handler+0x8>
	...

08004f60 <rtIsInf>:
 * Function: rtIsInf ==================================================
 *  Abstract:
 *  Test if value is infinite
 */
boolean_T rtIsInf(real_T value)
{
 8004f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	ed87 0b00 	vstr	d0, [r7]
  return (isinf(value) != 0U);
 8004f6a:	683c      	ldr	r4, [r7, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004f72:	2301      	movs	r3, #1
 8004f74:	461e      	mov	r6, r3
 8004f76:	f04f 32ff 	mov.w	r2, #4294967295
 8004f7a:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <rtIsInf+0x58>)
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	4629      	mov	r1, r5
 8004f80:	f7fb fd80 	bl	8000a84 <__aeabi_dcmpun>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10b      	bne.n	8004fa2 <rtIsInf+0x42>
 8004f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f8e:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <rtIsInf+0x58>)
 8004f90:	4620      	mov	r0, r4
 8004f92:	4629      	mov	r1, r5
 8004f94:	f7fb fd58 	bl	8000a48 <__aeabi_dcmple>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <rtIsInf+0x42>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	461e      	mov	r6, r3
 8004fa2:	b2f3      	uxtb	r3, r6
 8004fa4:	f083 0301 	eor.w	r3, r3, #1
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	b2db      	uxtb	r3, r3
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fb8:	7fefffff 	.word	0x7fefffff

08004fbc <rtIsNaN>:
 * Function: rtIsNaN ==================================================
 *  Abstract:
 *  Test if value is not a number
 */
boolean_T rtIsNaN(real_T value)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	ed87 0b00 	vstr	d0, [r7]
  return (isnan(value) != 0U);
 8004fc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fce:	f7fb fd59 	bl	8000a84 <__aeabi_dcmpun>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <rtIsNaN+0x20>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e000      	b.n	8004fde <rtIsNaN+0x22>
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
	...

08004fe8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fee:	2300      	movs	r3, #0
 8004ff0:	607b      	str	r3, [r7, #4]
 8004ff2:	4b10      	ldr	r3, [pc, #64]	; (8005034 <HAL_MspInit+0x4c>)
 8004ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff6:	4a0f      	ldr	r2, [pc, #60]	; (8005034 <HAL_MspInit+0x4c>)
 8004ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8004ffe:	4b0d      	ldr	r3, [pc, #52]	; (8005034 <HAL_MspInit+0x4c>)
 8005000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005006:	607b      	str	r3, [r7, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800500a:	2300      	movs	r3, #0
 800500c:	603b      	str	r3, [r7, #0]
 800500e:	4b09      	ldr	r3, [pc, #36]	; (8005034 <HAL_MspInit+0x4c>)
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	4a08      	ldr	r2, [pc, #32]	; (8005034 <HAL_MspInit+0x4c>)
 8005014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005018:	6413      	str	r3, [r2, #64]	; 0x40
 800501a:	4b06      	ldr	r3, [pc, #24]	; (8005034 <HAL_MspInit+0x4c>)
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005026:	2007      	movs	r0, #7
 8005028:	f001 f882 	bl	8006130 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800502c:	bf00      	nop
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	40023800 	.word	0x40023800

08005038 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08a      	sub	sp, #40	; 0x28
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005040:	f107 0314 	add.w	r3, r7, #20
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	605a      	str	r2, [r3, #4]
 800504a:	609a      	str	r2, [r3, #8]
 800504c:	60da      	str	r2, [r3, #12]
 800504e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a3c      	ldr	r2, [pc, #240]	; (8005148 <HAL_ADC_MspInit+0x110>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d171      	bne.n	800513e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800505a:	2300      	movs	r3, #0
 800505c:	613b      	str	r3, [r7, #16]
 800505e:	4b3b      	ldr	r3, [pc, #236]	; (800514c <HAL_ADC_MspInit+0x114>)
 8005060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005062:	4a3a      	ldr	r2, [pc, #232]	; (800514c <HAL_ADC_MspInit+0x114>)
 8005064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005068:	6453      	str	r3, [r2, #68]	; 0x44
 800506a:	4b38      	ldr	r3, [pc, #224]	; (800514c <HAL_ADC_MspInit+0x114>)
 800506c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005072:	613b      	str	r3, [r7, #16]
 8005074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005076:	2300      	movs	r3, #0
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	4b34      	ldr	r3, [pc, #208]	; (800514c <HAL_ADC_MspInit+0x114>)
 800507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507e:	4a33      	ldr	r2, [pc, #204]	; (800514c <HAL_ADC_MspInit+0x114>)
 8005080:	f043 0301 	orr.w	r3, r3, #1
 8005084:	6313      	str	r3, [r2, #48]	; 0x30
 8005086:	4b31      	ldr	r3, [pc, #196]	; (800514c <HAL_ADC_MspInit+0x114>)
 8005088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005092:	2300      	movs	r3, #0
 8005094:	60bb      	str	r3, [r7, #8]
 8005096:	4b2d      	ldr	r3, [pc, #180]	; (800514c <HAL_ADC_MspInit+0x114>)
 8005098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509a:	4a2c      	ldr	r2, [pc, #176]	; (800514c <HAL_ADC_MspInit+0x114>)
 800509c:	f043 0302 	orr.w	r3, r3, #2
 80050a0:	6313      	str	r3, [r2, #48]	; 0x30
 80050a2:	4b2a      	ldr	r3, [pc, #168]	; (800514c <HAL_ADC_MspInit+0x114>)
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	60bb      	str	r3, [r7, #8]
 80050ac:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Joystick_Y_Pin|GPIO_PIN_5|GPIO_PIN_6;
 80050ae:	2370      	movs	r3, #112	; 0x70
 80050b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050b2:	2303      	movs	r3, #3
 80050b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b6:	2300      	movs	r3, #0
 80050b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050ba:	f107 0314 	add.w	r3, r7, #20
 80050be:	4619      	mov	r1, r3
 80050c0:	4823      	ldr	r0, [pc, #140]	; (8005150 <HAL_ADC_MspInit+0x118>)
 80050c2:	f001 fc85 	bl	80069d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Joystick_X_Pin;
 80050c6:	2301      	movs	r3, #1
 80050c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050ca:	2303      	movs	r3, #3
 80050cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Joystick_X_GPIO_Port, &GPIO_InitStruct);
 80050d2:	f107 0314 	add.w	r3, r7, #20
 80050d6:	4619      	mov	r1, r3
 80050d8:	481e      	ldr	r0, [pc, #120]	; (8005154 <HAL_ADC_MspInit+0x11c>)
 80050da:	f001 fc79 	bl	80069d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80050de:	4b1e      	ldr	r3, [pc, #120]	; (8005158 <HAL_ADC_MspInit+0x120>)
 80050e0:	4a1e      	ldr	r2, [pc, #120]	; (800515c <HAL_ADC_MspInit+0x124>)
 80050e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80050e4:	4b1c      	ldr	r3, [pc, #112]	; (8005158 <HAL_ADC_MspInit+0x120>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050ea:	4b1b      	ldr	r3, [pc, #108]	; (8005158 <HAL_ADC_MspInit+0x120>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80050f0:	4b19      	ldr	r3, [pc, #100]	; (8005158 <HAL_ADC_MspInit+0x120>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80050f6:	4b18      	ldr	r3, [pc, #96]	; (8005158 <HAL_ADC_MspInit+0x120>)
 80050f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80050fe:	4b16      	ldr	r3, [pc, #88]	; (8005158 <HAL_ADC_MspInit+0x120>)
 8005100:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005104:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005106:	4b14      	ldr	r3, [pc, #80]	; (8005158 <HAL_ADC_MspInit+0x120>)
 8005108:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800510c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800510e:	4b12      	ldr	r3, [pc, #72]	; (8005158 <HAL_ADC_MspInit+0x120>)
 8005110:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005114:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005116:	4b10      	ldr	r3, [pc, #64]	; (8005158 <HAL_ADC_MspInit+0x120>)
 8005118:	2200      	movs	r2, #0
 800511a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800511c:	4b0e      	ldr	r3, [pc, #56]	; (8005158 <HAL_ADC_MspInit+0x120>)
 800511e:	2200      	movs	r2, #0
 8005120:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005122:	480d      	ldr	r0, [pc, #52]	; (8005158 <HAL_ADC_MspInit+0x120>)
 8005124:	f001 f846 	bl	80061b4 <HAL_DMA_Init>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800512e:	f7ff ff11 	bl	8004f54 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a08      	ldr	r2, [pc, #32]	; (8005158 <HAL_ADC_MspInit+0x120>)
 8005136:	639a      	str	r2, [r3, #56]	; 0x38
 8005138:	4a07      	ldr	r2, [pc, #28]	; (8005158 <HAL_ADC_MspInit+0x120>)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800513e:	bf00      	nop
 8005140:	3728      	adds	r7, #40	; 0x28
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40012000 	.word	0x40012000
 800514c:	40023800 	.word	0x40023800
 8005150:	40020000 	.word	0x40020000
 8005154:	40020400 	.word	0x40020400
 8005158:	20000488 	.word	0x20000488
 800515c:	40026410 	.word	0x40026410

08005160 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b08a      	sub	sp, #40	; 0x28
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005168:	f107 0314 	add.w	r3, r7, #20
 800516c:	2200      	movs	r2, #0
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	605a      	str	r2, [r3, #4]
 8005172:	609a      	str	r2, [r3, #8]
 8005174:	60da      	str	r2, [r3, #12]
 8005176:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a19      	ldr	r2, [pc, #100]	; (80051e4 <HAL_I2C_MspInit+0x84>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d12c      	bne.n	80051dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005182:	2300      	movs	r3, #0
 8005184:	613b      	str	r3, [r7, #16]
 8005186:	4b18      	ldr	r3, [pc, #96]	; (80051e8 <HAL_I2C_MspInit+0x88>)
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	4a17      	ldr	r2, [pc, #92]	; (80051e8 <HAL_I2C_MspInit+0x88>)
 800518c:	f043 0302 	orr.w	r3, r3, #2
 8005190:	6313      	str	r3, [r2, #48]	; 0x30
 8005192:	4b15      	ldr	r3, [pc, #84]	; (80051e8 <HAL_I2C_MspInit+0x88>)
 8005194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	613b      	str	r3, [r7, #16]
 800519c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800519e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80051a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80051a4:	2312      	movs	r3, #18
 80051a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a8:	2300      	movs	r3, #0
 80051aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051ac:	2303      	movs	r3, #3
 80051ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80051b0:	2304      	movs	r3, #4
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051b4:	f107 0314 	add.w	r3, r7, #20
 80051b8:	4619      	mov	r1, r3
 80051ba:	480c      	ldr	r0, [pc, #48]	; (80051ec <HAL_I2C_MspInit+0x8c>)
 80051bc:	f001 fc08 	bl	80069d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80051c0:	2300      	movs	r3, #0
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	4b08      	ldr	r3, [pc, #32]	; (80051e8 <HAL_I2C_MspInit+0x88>)
 80051c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c8:	4a07      	ldr	r2, [pc, #28]	; (80051e8 <HAL_I2C_MspInit+0x88>)
 80051ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051ce:	6413      	str	r3, [r2, #64]	; 0x40
 80051d0:	4b05      	ldr	r3, [pc, #20]	; (80051e8 <HAL_I2C_MspInit+0x88>)
 80051d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80051dc:	bf00      	nop
 80051de:	3728      	adds	r7, #40	; 0x28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	40005400 	.word	0x40005400
 80051e8:	40023800 	.word	0x40023800
 80051ec:	40020400 	.word	0x40020400

080051f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08a      	sub	sp, #40	; 0x28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051f8:	f107 0314 	add.w	r3, r7, #20
 80051fc:	2200      	movs	r2, #0
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	605a      	str	r2, [r3, #4]
 8005202:	609a      	str	r2, [r3, #8]
 8005204:	60da      	str	r2, [r3, #12]
 8005206:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005210:	d12b      	bne.n	800526a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005212:	2300      	movs	r3, #0
 8005214:	613b      	str	r3, [r7, #16]
 8005216:	4b17      	ldr	r3, [pc, #92]	; (8005274 <HAL_TIM_Encoder_MspInit+0x84>)
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	4a16      	ldr	r2, [pc, #88]	; (8005274 <HAL_TIM_Encoder_MspInit+0x84>)
 800521c:	f043 0301 	orr.w	r3, r3, #1
 8005220:	6413      	str	r3, [r2, #64]	; 0x40
 8005222:	4b14      	ldr	r3, [pc, #80]	; (8005274 <HAL_TIM_Encoder_MspInit+0x84>)
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	613b      	str	r3, [r7, #16]
 800522c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	4b10      	ldr	r3, [pc, #64]	; (8005274 <HAL_TIM_Encoder_MspInit+0x84>)
 8005234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005236:	4a0f      	ldr	r2, [pc, #60]	; (8005274 <HAL_TIM_Encoder_MspInit+0x84>)
 8005238:	f043 0301 	orr.w	r3, r3, #1
 800523c:	6313      	str	r3, [r2, #48]	; 0x30
 800523e:	4b0d      	ldr	r3, [pc, #52]	; (8005274 <HAL_TIM_Encoder_MspInit+0x84>)
 8005240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Encoder_B_Pin|Encoder_A_Pin;
 800524a:	2303      	movs	r3, #3
 800524c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800524e:	2302      	movs	r3, #2
 8005250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005252:	2300      	movs	r3, #0
 8005254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005256:	2300      	movs	r3, #0
 8005258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800525a:	2301      	movs	r3, #1
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800525e:	f107 0314 	add.w	r3, r7, #20
 8005262:	4619      	mov	r1, r3
 8005264:	4804      	ldr	r0, [pc, #16]	; (8005278 <HAL_TIM_Encoder_MspInit+0x88>)
 8005266:	f001 fbb3 	bl	80069d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800526a:	bf00      	nop
 800526c:	3728      	adds	r7, #40	; 0x28
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	40023800 	.word	0x40023800
 8005278:	40020000 	.word	0x40020000

0800527c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a34      	ldr	r2, [pc, #208]	; (800535c <HAL_TIM_Base_MspInit+0xe0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d116      	bne.n	80052bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800528e:	2300      	movs	r3, #0
 8005290:	617b      	str	r3, [r7, #20]
 8005292:	4b33      	ldr	r3, [pc, #204]	; (8005360 <HAL_TIM_Base_MspInit+0xe4>)
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	4a32      	ldr	r2, [pc, #200]	; (8005360 <HAL_TIM_Base_MspInit+0xe4>)
 8005298:	f043 0302 	orr.w	r3, r3, #2
 800529c:	6413      	str	r3, [r2, #64]	; 0x40
 800529e:	4b30      	ldr	r3, [pc, #192]	; (8005360 <HAL_TIM_Base_MspInit+0xe4>)
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	617b      	str	r3, [r7, #20]
 80052a8:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80052aa:	2200      	movs	r2, #0
 80052ac:	2100      	movs	r1, #0
 80052ae:	201d      	movs	r0, #29
 80052b0:	f000 ff49 	bl	8006146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80052b4:	201d      	movs	r0, #29
 80052b6:	f000 ff62 	bl	800617e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80052ba:	e04a      	b.n	8005352 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a28      	ldr	r2, [pc, #160]	; (8005364 <HAL_TIM_Base_MspInit+0xe8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d116      	bne.n	80052f4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80052c6:	2300      	movs	r3, #0
 80052c8:	613b      	str	r3, [r7, #16]
 80052ca:	4b25      	ldr	r3, [pc, #148]	; (8005360 <HAL_TIM_Base_MspInit+0xe4>)
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	4a24      	ldr	r2, [pc, #144]	; (8005360 <HAL_TIM_Base_MspInit+0xe4>)
 80052d0:	f043 0304 	orr.w	r3, r3, #4
 80052d4:	6413      	str	r3, [r2, #64]	; 0x40
 80052d6:	4b22      	ldr	r3, [pc, #136]	; (8005360 <HAL_TIM_Base_MspInit+0xe4>)
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	f003 0304 	and.w	r3, r3, #4
 80052de:	613b      	str	r3, [r7, #16]
 80052e0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80052e2:	2200      	movs	r2, #0
 80052e4:	2100      	movs	r1, #0
 80052e6:	201e      	movs	r0, #30
 80052e8:	f000 ff2d 	bl	8006146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80052ec:	201e      	movs	r0, #30
 80052ee:	f000 ff46 	bl	800617e <HAL_NVIC_EnableIRQ>
}
 80052f2:	e02e      	b.n	8005352 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a1b      	ldr	r2, [pc, #108]	; (8005368 <HAL_TIM_Base_MspInit+0xec>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d10e      	bne.n	800531c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80052fe:	2300      	movs	r3, #0
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	4b17      	ldr	r3, [pc, #92]	; (8005360 <HAL_TIM_Base_MspInit+0xe4>)
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	4a16      	ldr	r2, [pc, #88]	; (8005360 <HAL_TIM_Base_MspInit+0xe4>)
 8005308:	f043 0308 	orr.w	r3, r3, #8
 800530c:	6413      	str	r3, [r2, #64]	; 0x40
 800530e:	4b14      	ldr	r3, [pc, #80]	; (8005360 <HAL_TIM_Base_MspInit+0xe4>)
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	f003 0308 	and.w	r3, r3, #8
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	68fb      	ldr	r3, [r7, #12]
}
 800531a:	e01a      	b.n	8005352 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM11)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a12      	ldr	r2, [pc, #72]	; (800536c <HAL_TIM_Base_MspInit+0xf0>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d115      	bne.n	8005352 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005326:	2300      	movs	r3, #0
 8005328:	60bb      	str	r3, [r7, #8]
 800532a:	4b0d      	ldr	r3, [pc, #52]	; (8005360 <HAL_TIM_Base_MspInit+0xe4>)
 800532c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532e:	4a0c      	ldr	r2, [pc, #48]	; (8005360 <HAL_TIM_Base_MspInit+0xe4>)
 8005330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005334:	6453      	str	r3, [r2, #68]	; 0x44
 8005336:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <HAL_TIM_Base_MspInit+0xe4>)
 8005338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800533e:	60bb      	str	r3, [r7, #8]
 8005340:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005342:	2200      	movs	r2, #0
 8005344:	2100      	movs	r1, #0
 8005346:	201a      	movs	r0, #26
 8005348:	f000 fefd 	bl	8006146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800534c:	201a      	movs	r0, #26
 800534e:	f000 ff16 	bl	800617e <HAL_NVIC_EnableIRQ>
}
 8005352:	bf00      	nop
 8005354:	3718      	adds	r7, #24
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	40000400 	.word	0x40000400
 8005360:	40023800 	.word	0x40023800
 8005364:	40000800 	.word	0x40000800
 8005368:	40000c00 	.word	0x40000c00
 800536c:	40014800 	.word	0x40014800

08005370 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b088      	sub	sp, #32
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005378:	f107 030c 	add.w	r3, r7, #12
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	605a      	str	r2, [r3, #4]
 8005382:	609a      	str	r2, [r3, #8]
 8005384:	60da      	str	r2, [r3, #12]
 8005386:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a12      	ldr	r2, [pc, #72]	; (80053d8 <HAL_TIM_MspPostInit+0x68>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d11d      	bne.n	80053ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005392:	2300      	movs	r3, #0
 8005394:	60bb      	str	r3, [r7, #8]
 8005396:	4b11      	ldr	r3, [pc, #68]	; (80053dc <HAL_TIM_MspPostInit+0x6c>)
 8005398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539a:	4a10      	ldr	r2, [pc, #64]	; (80053dc <HAL_TIM_MspPostInit+0x6c>)
 800539c:	f043 0302 	orr.w	r3, r3, #2
 80053a0:	6313      	str	r3, [r2, #48]	; 0x30
 80053a2:	4b0e      	ldr	r3, [pc, #56]	; (80053dc <HAL_TIM_MspPostInit+0x6c>)
 80053a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	60bb      	str	r3, [r7, #8]
 80053ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80053ae:	2340      	movs	r3, #64	; 0x40
 80053b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053b2:	2302      	movs	r3, #2
 80053b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053ba:	2300      	movs	r3, #0
 80053bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80053be:	2302      	movs	r3, #2
 80053c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053c2:	f107 030c 	add.w	r3, r7, #12
 80053c6:	4619      	mov	r1, r3
 80053c8:	4805      	ldr	r0, [pc, #20]	; (80053e0 <HAL_TIM_MspPostInit+0x70>)
 80053ca:	f001 fb01 	bl	80069d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80053ce:	bf00      	nop
 80053d0:	3720      	adds	r7, #32
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	40000800 	.word	0x40000800
 80053dc:	40023800 	.word	0x40023800
 80053e0:	40020400 	.word	0x40020400

080053e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08a      	sub	sp, #40	; 0x28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053ec:	f107 0314 	add.w	r3, r7, #20
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	605a      	str	r2, [r3, #4]
 80053f6:	609a      	str	r2, [r3, #8]
 80053f8:	60da      	str	r2, [r3, #12]
 80053fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a34      	ldr	r2, [pc, #208]	; (80054d4 <HAL_UART_MspInit+0xf0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d161      	bne.n	80054ca <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005406:	2300      	movs	r3, #0
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	4b33      	ldr	r3, [pc, #204]	; (80054d8 <HAL_UART_MspInit+0xf4>)
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	4a32      	ldr	r2, [pc, #200]	; (80054d8 <HAL_UART_MspInit+0xf4>)
 8005410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005414:	6413      	str	r3, [r2, #64]	; 0x40
 8005416:	4b30      	ldr	r3, [pc, #192]	; (80054d8 <HAL_UART_MspInit+0xf4>)
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541e:	613b      	str	r3, [r7, #16]
 8005420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005422:	2300      	movs	r3, #0
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	4b2c      	ldr	r3, [pc, #176]	; (80054d8 <HAL_UART_MspInit+0xf4>)
 8005428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542a:	4a2b      	ldr	r2, [pc, #172]	; (80054d8 <HAL_UART_MspInit+0xf4>)
 800542c:	f043 0301 	orr.w	r3, r3, #1
 8005430:	6313      	str	r3, [r2, #48]	; 0x30
 8005432:	4b29      	ldr	r3, [pc, #164]	; (80054d8 <HAL_UART_MspInit+0xf4>)
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800543e:	230c      	movs	r3, #12
 8005440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005442:	2302      	movs	r3, #2
 8005444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005446:	2300      	movs	r3, #0
 8005448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800544a:	2303      	movs	r3, #3
 800544c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800544e:	2307      	movs	r3, #7
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005452:	f107 0314 	add.w	r3, r7, #20
 8005456:	4619      	mov	r1, r3
 8005458:	4820      	ldr	r0, [pc, #128]	; (80054dc <HAL_UART_MspInit+0xf8>)
 800545a:	f001 fab9 	bl	80069d0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800545e:	4b20      	ldr	r3, [pc, #128]	; (80054e0 <HAL_UART_MspInit+0xfc>)
 8005460:	4a20      	ldr	r2, [pc, #128]	; (80054e4 <HAL_UART_MspInit+0x100>)
 8005462:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005464:	4b1e      	ldr	r3, [pc, #120]	; (80054e0 <HAL_UART_MspInit+0xfc>)
 8005466:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800546a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800546c:	4b1c      	ldr	r3, [pc, #112]	; (80054e0 <HAL_UART_MspInit+0xfc>)
 800546e:	2240      	movs	r2, #64	; 0x40
 8005470:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005472:	4b1b      	ldr	r3, [pc, #108]	; (80054e0 <HAL_UART_MspInit+0xfc>)
 8005474:	2200      	movs	r2, #0
 8005476:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005478:	4b19      	ldr	r3, [pc, #100]	; (80054e0 <HAL_UART_MspInit+0xfc>)
 800547a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800547e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005480:	4b17      	ldr	r3, [pc, #92]	; (80054e0 <HAL_UART_MspInit+0xfc>)
 8005482:	2200      	movs	r2, #0
 8005484:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005486:	4b16      	ldr	r3, [pc, #88]	; (80054e0 <HAL_UART_MspInit+0xfc>)
 8005488:	2200      	movs	r2, #0
 800548a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800548c:	4b14      	ldr	r3, [pc, #80]	; (80054e0 <HAL_UART_MspInit+0xfc>)
 800548e:	2200      	movs	r2, #0
 8005490:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005492:	4b13      	ldr	r3, [pc, #76]	; (80054e0 <HAL_UART_MspInit+0xfc>)
 8005494:	2200      	movs	r2, #0
 8005496:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005498:	4b11      	ldr	r3, [pc, #68]	; (80054e0 <HAL_UART_MspInit+0xfc>)
 800549a:	2200      	movs	r2, #0
 800549c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800549e:	4810      	ldr	r0, [pc, #64]	; (80054e0 <HAL_UART_MspInit+0xfc>)
 80054a0:	f000 fe88 	bl	80061b4 <HAL_DMA_Init>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80054aa:	f7ff fd53 	bl	8004f54 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a0b      	ldr	r2, [pc, #44]	; (80054e0 <HAL_UART_MspInit+0xfc>)
 80054b2:	635a      	str	r2, [r3, #52]	; 0x34
 80054b4:	4a0a      	ldr	r2, [pc, #40]	; (80054e0 <HAL_UART_MspInit+0xfc>)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80054ba:	2200      	movs	r2, #0
 80054bc:	2100      	movs	r1, #0
 80054be:	2026      	movs	r0, #38	; 0x26
 80054c0:	f000 fe41 	bl	8006146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80054c4:	2026      	movs	r0, #38	; 0x26
 80054c6:	f000 fe5a 	bl	800617e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80054ca:	bf00      	nop
 80054cc:	3728      	adds	r7, #40	; 0x28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	40004400 	.word	0x40004400
 80054d8:	40023800 	.word	0x40023800
 80054dc:	40020000 	.word	0x40020000
 80054e0:	20000934 	.word	0x20000934
 80054e4:	400260a0 	.word	0x400260a0

080054e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80054ec:	e7fe      	b.n	80054ec <NMI_Handler+0x4>

080054ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054ee:	b480      	push	{r7}
 80054f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80054f2:	e7fe      	b.n	80054f2 <HardFault_Handler+0x4>

080054f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80054f8:	e7fe      	b.n	80054f8 <MemManage_Handler+0x4>

080054fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80054fa:	b480      	push	{r7}
 80054fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80054fe:	e7fe      	b.n	80054fe <BusFault_Handler+0x4>

08005500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005504:	e7fe      	b.n	8005504 <UsageFault_Handler+0x4>

08005506 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005506:	b480      	push	{r7}
 8005508:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800550a:	bf00      	nop
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005518:	bf00      	nop
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005522:	b480      	push	{r7}
 8005524:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005526:	bf00      	nop
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005534:	f000 f90a 	bl	800574c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005538:	bf00      	nop
 800553a:	bd80      	pop	{r7, pc}

0800553c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005540:	4802      	ldr	r0, [pc, #8]	; (800554c <DMA1_Stream6_IRQHandler+0x10>)
 8005542:	f000 ffcf 	bl	80064e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005546:	bf00      	nop
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	20000934 	.word	0x20000934

08005550 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8005554:	4802      	ldr	r0, [pc, #8]	; (8005560 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8005556:	f003 fce7 	bl	8008f28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800555a:	bf00      	nop
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	2000080c 	.word	0x2000080c

08005564 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005568:	4802      	ldr	r0, [pc, #8]	; (8005574 <TIM3_IRQHandler+0x10>)
 800556a:	f003 fcdd 	bl	8008f28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800556e:	bf00      	nop
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	200005f0 	.word	0x200005f0

08005578 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800557c:	4802      	ldr	r0, [pc, #8]	; (8005588 <TIM4_IRQHandler+0x10>)
 800557e:	f003 fcd3 	bl	8008f28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005582:	bf00      	nop
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	200006a4 	.word	0x200006a4

0800558c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005590:	4802      	ldr	r0, [pc, #8]	; (800559c <USART2_IRQHandler+0x10>)
 8005592:	f004 ff7f 	bl	800a494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005596:	bf00      	nop
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	200008c0 	.word	0x200008c0

080055a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80055a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80055a8:	f001 fbc8 	bl	8006d3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80055ac:	bf00      	nop
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80055b4:	4802      	ldr	r0, [pc, #8]	; (80055c0 <DMA2_Stream0_IRQHandler+0x10>)
 80055b6:	f000 ff95 	bl	80064e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80055ba:	bf00      	nop
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	20000488 	.word	0x20000488

080055c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80055cc:	4a14      	ldr	r2, [pc, #80]	; (8005620 <_sbrk+0x5c>)
 80055ce:	4b15      	ldr	r3, [pc, #84]	; (8005624 <_sbrk+0x60>)
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80055d8:	4b13      	ldr	r3, [pc, #76]	; (8005628 <_sbrk+0x64>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d102      	bne.n	80055e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80055e0:	4b11      	ldr	r3, [pc, #68]	; (8005628 <_sbrk+0x64>)
 80055e2:	4a12      	ldr	r2, [pc, #72]	; (800562c <_sbrk+0x68>)
 80055e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80055e6:	4b10      	ldr	r3, [pc, #64]	; (8005628 <_sbrk+0x64>)
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4413      	add	r3, r2
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d207      	bcs.n	8005604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80055f4:	f005 ff9c 	bl	800b530 <__errno>
 80055f8:	4603      	mov	r3, r0
 80055fa:	220c      	movs	r2, #12
 80055fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80055fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005602:	e009      	b.n	8005618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005604:	4b08      	ldr	r3, [pc, #32]	; (8005628 <_sbrk+0x64>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800560a:	4b07      	ldr	r3, [pc, #28]	; (8005628 <_sbrk+0x64>)
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4413      	add	r3, r2
 8005612:	4a05      	ldr	r2, [pc, #20]	; (8005628 <_sbrk+0x64>)
 8005614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005616:	68fb      	ldr	r3, [r7, #12]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	20020000 	.word	0x20020000
 8005624:	00000400 	.word	0x00000400
 8005628:	20001378 	.word	0x20001378
 800562c:	20001390 	.word	0x20001390

08005630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005634:	4b06      	ldr	r3, [pc, #24]	; (8005650 <SystemInit+0x20>)
 8005636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563a:	4a05      	ldr	r2, [pc, #20]	; (8005650 <SystemInit+0x20>)
 800563c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005640:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005644:	bf00      	nop
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	e000ed00 	.word	0xe000ed00

08005654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800568c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005658:	480d      	ldr	r0, [pc, #52]	; (8005690 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800565a:	490e      	ldr	r1, [pc, #56]	; (8005694 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800565c:	4a0e      	ldr	r2, [pc, #56]	; (8005698 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800565e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005660:	e002      	b.n	8005668 <LoopCopyDataInit>

08005662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005666:	3304      	adds	r3, #4

08005668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800566a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800566c:	d3f9      	bcc.n	8005662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800566e:	4a0b      	ldr	r2, [pc, #44]	; (800569c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005670:	4c0b      	ldr	r4, [pc, #44]	; (80056a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005674:	e001      	b.n	800567a <LoopFillZerobss>

08005676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005678:	3204      	adds	r2, #4

0800567a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800567a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800567c:	d3fb      	bcc.n	8005676 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800567e:	f7ff ffd7 	bl	8005630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005682:	f005 ff5b 	bl	800b53c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005686:	f7fc fd57 	bl	8002138 <main>
  bx  lr    
 800568a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800568c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005694:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 8005698:	0800de40 	.word	0x0800de40
  ldr r2, =_sbss
 800569c:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 80056a0:	20001390 	.word	0x20001390

080056a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80056a4:	e7fe      	b.n	80056a4 <ADC_IRQHandler>
	...

080056a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80056ac:	4b0e      	ldr	r3, [pc, #56]	; (80056e8 <HAL_Init+0x40>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a0d      	ldr	r2, [pc, #52]	; (80056e8 <HAL_Init+0x40>)
 80056b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80056b8:	4b0b      	ldr	r3, [pc, #44]	; (80056e8 <HAL_Init+0x40>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a0a      	ldr	r2, [pc, #40]	; (80056e8 <HAL_Init+0x40>)
 80056be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80056c4:	4b08      	ldr	r3, [pc, #32]	; (80056e8 <HAL_Init+0x40>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a07      	ldr	r2, [pc, #28]	; (80056e8 <HAL_Init+0x40>)
 80056ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056d0:	2003      	movs	r0, #3
 80056d2:	f000 fd2d 	bl	8006130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80056d6:	2000      	movs	r0, #0
 80056d8:	f000 f808 	bl	80056ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80056dc:	f7ff fc84 	bl	8004fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	40023c00 	.word	0x40023c00

080056ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80056f4:	4b12      	ldr	r3, [pc, #72]	; (8005740 <HAL_InitTick+0x54>)
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	4b12      	ldr	r3, [pc, #72]	; (8005744 <HAL_InitTick+0x58>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	4619      	mov	r1, r3
 80056fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005702:	fbb3 f3f1 	udiv	r3, r3, r1
 8005706:	fbb2 f3f3 	udiv	r3, r2, r3
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fd45 	bl	800619a <HAL_SYSTICK_Config>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e00e      	b.n	8005738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b0f      	cmp	r3, #15
 800571e:	d80a      	bhi.n	8005736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005720:	2200      	movs	r2, #0
 8005722:	6879      	ldr	r1, [r7, #4]
 8005724:	f04f 30ff 	mov.w	r0, #4294967295
 8005728:	f000 fd0d 	bl	8006146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800572c:	4a06      	ldr	r2, [pc, #24]	; (8005748 <HAL_InitTick+0x5c>)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	e000      	b.n	8005738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
}
 8005738:	4618      	mov	r0, r3
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	200003b0 	.word	0x200003b0
 8005744:	200003b8 	.word	0x200003b8
 8005748:	200003b4 	.word	0x200003b4

0800574c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005750:	4b06      	ldr	r3, [pc, #24]	; (800576c <HAL_IncTick+0x20>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	461a      	mov	r2, r3
 8005756:	4b06      	ldr	r3, [pc, #24]	; (8005770 <HAL_IncTick+0x24>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4413      	add	r3, r2
 800575c:	4a04      	ldr	r2, [pc, #16]	; (8005770 <HAL_IncTick+0x24>)
 800575e:	6013      	str	r3, [r2, #0]
}
 8005760:	bf00      	nop
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	200003b8 	.word	0x200003b8
 8005770:	2000137c 	.word	0x2000137c

08005774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005774:	b480      	push	{r7}
 8005776:	af00      	add	r7, sp, #0
  return uwTick;
 8005778:	4b03      	ldr	r3, [pc, #12]	; (8005788 <HAL_GetTick+0x14>)
 800577a:	681b      	ldr	r3, [r3, #0]
}
 800577c:	4618      	mov	r0, r3
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	2000137c 	.word	0x2000137c

0800578c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005794:	2300      	movs	r3, #0
 8005796:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e033      	b.n	800580a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d109      	bne.n	80057be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7ff fc44 	bl	8005038 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	f003 0310 	and.w	r3, r3, #16
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d118      	bne.n	80057fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80057d2:	f023 0302 	bic.w	r3, r3, #2
 80057d6:	f043 0202 	orr.w	r2, r3, #2
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fa58 	bl	8005c94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ee:	f023 0303 	bic.w	r3, r3, #3
 80057f2:	f043 0201 	orr.w	r2, r3, #1
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	641a      	str	r2, [r3, #64]	; 0x40
 80057fa:	e001      	b.n	8005800 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005808:	7bfb      	ldrb	r3, [r7, #15]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
	...

08005814 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800582a:	2b01      	cmp	r3, #1
 800582c:	d101      	bne.n	8005832 <HAL_ADC_Start_DMA+0x1e>
 800582e:	2302      	movs	r3, #2
 8005830:	e0ce      	b.n	80059d0 <HAL_ADC_Start_DMA+0x1bc>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b01      	cmp	r3, #1
 8005846:	d018      	beq.n	800587a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689a      	ldr	r2, [r3, #8]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f042 0201 	orr.w	r2, r2, #1
 8005856:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005858:	4b5f      	ldr	r3, [pc, #380]	; (80059d8 <HAL_ADC_Start_DMA+0x1c4>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a5f      	ldr	r2, [pc, #380]	; (80059dc <HAL_ADC_Start_DMA+0x1c8>)
 800585e:	fba2 2303 	umull	r2, r3, r2, r3
 8005862:	0c9a      	lsrs	r2, r3, #18
 8005864:	4613      	mov	r3, r2
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	4413      	add	r3, r2
 800586a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800586c:	e002      	b.n	8005874 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	3b01      	subs	r3, #1
 8005872:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1f9      	bne.n	800586e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005888:	d107      	bne.n	800589a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689a      	ldr	r2, [r3, #8]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005898:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	f040 8086 	bne.w	80059b6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80058b2:	f023 0301 	bic.w	r3, r3, #1
 80058b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d007      	beq.n	80058dc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80058d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e8:	d106      	bne.n	80058f8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ee:	f023 0206 	bic.w	r2, r3, #6
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	645a      	str	r2, [r3, #68]	; 0x44
 80058f6:	e002      	b.n	80058fe <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005906:	4b36      	ldr	r3, [pc, #216]	; (80059e0 <HAL_ADC_Start_DMA+0x1cc>)
 8005908:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590e:	4a35      	ldr	r2, [pc, #212]	; (80059e4 <HAL_ADC_Start_DMA+0x1d0>)
 8005910:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005916:	4a34      	ldr	r2, [pc, #208]	; (80059e8 <HAL_ADC_Start_DMA+0x1d4>)
 8005918:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591e:	4a33      	ldr	r2, [pc, #204]	; (80059ec <HAL_ADC_Start_DMA+0x1d8>)
 8005920:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800592a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800593a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689a      	ldr	r2, [r3, #8]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800594a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	334c      	adds	r3, #76	; 0x4c
 8005956:	4619      	mov	r1, r3
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f000 fcd8 	bl	8006310 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f003 031f 	and.w	r3, r3, #31
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10f      	bne.n	800598c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d129      	bne.n	80059ce <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005988:	609a      	str	r2, [r3, #8]
 800598a:	e020      	b.n	80059ce <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a17      	ldr	r2, [pc, #92]	; (80059f0 <HAL_ADC_Start_DMA+0x1dc>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d11b      	bne.n	80059ce <HAL_ADC_Start_DMA+0x1ba>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d114      	bne.n	80059ce <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80059b2:	609a      	str	r2, [r3, #8]
 80059b4:	e00b      	b.n	80059ce <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	f043 0210 	orr.w	r2, r3, #16
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c6:	f043 0201 	orr.w	r2, r3, #1
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	200003b0 	.word	0x200003b0
 80059dc:	431bde83 	.word	0x431bde83
 80059e0:	40012300 	.word	0x40012300
 80059e4:	08005e8d 	.word	0x08005e8d
 80059e8:	08005f47 	.word	0x08005f47
 80059ec:	08005f63 	.word	0x08005f63
 80059f0:	40012000 	.word	0x40012000

080059f4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_ADC_ConfigChannel+0x1c>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e113      	b.n	8005c74 <HAL_ADC_ConfigChannel+0x244>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b09      	cmp	r3, #9
 8005a5a:	d925      	bls.n	8005aa8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68d9      	ldr	r1, [r3, #12]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	461a      	mov	r2, r3
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	4413      	add	r3, r2
 8005a70:	3b1e      	subs	r3, #30
 8005a72:	2207      	movs	r2, #7
 8005a74:	fa02 f303 	lsl.w	r3, r2, r3
 8005a78:	43da      	mvns	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	400a      	ands	r2, r1
 8005a80:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68d9      	ldr	r1, [r3, #12]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	689a      	ldr	r2, [r3, #8]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	4618      	mov	r0, r3
 8005a94:	4603      	mov	r3, r0
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	4403      	add	r3, r0
 8005a9a:	3b1e      	subs	r3, #30
 8005a9c:	409a      	lsls	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	60da      	str	r2, [r3, #12]
 8005aa6:	e022      	b.n	8005aee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6919      	ldr	r1, [r3, #16]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	4413      	add	r3, r2
 8005abc:	2207      	movs	r2, #7
 8005abe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac2:	43da      	mvns	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	400a      	ands	r2, r1
 8005aca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6919      	ldr	r1, [r3, #16]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	689a      	ldr	r2, [r3, #8]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	4618      	mov	r0, r3
 8005ade:	4603      	mov	r3, r0
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	4403      	add	r3, r0
 8005ae4:	409a      	lsls	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2b06      	cmp	r3, #6
 8005af4:	d824      	bhi.n	8005b40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	4613      	mov	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	3b05      	subs	r3, #5
 8005b08:	221f      	movs	r2, #31
 8005b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0e:	43da      	mvns	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	400a      	ands	r2, r1
 8005b16:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	4618      	mov	r0, r3
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	3b05      	subs	r3, #5
 8005b32:	fa00 f203 	lsl.w	r2, r0, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	635a      	str	r2, [r3, #52]	; 0x34
 8005b3e:	e04c      	b.n	8005bda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	2b0c      	cmp	r3, #12
 8005b46:	d824      	bhi.n	8005b92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	4613      	mov	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	3b23      	subs	r3, #35	; 0x23
 8005b5a:	221f      	movs	r2, #31
 8005b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b60:	43da      	mvns	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	400a      	ands	r2, r1
 8005b68:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	4618      	mov	r0, r3
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	3b23      	subs	r3, #35	; 0x23
 8005b84:	fa00 f203 	lsl.w	r2, r0, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	631a      	str	r2, [r3, #48]	; 0x30
 8005b90:	e023      	b.n	8005bda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	3b41      	subs	r3, #65	; 0x41
 8005ba4:	221f      	movs	r2, #31
 8005ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8005baa:	43da      	mvns	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	400a      	ands	r2, r1
 8005bb2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	3b41      	subs	r3, #65	; 0x41
 8005bce:	fa00 f203 	lsl.w	r2, r0, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005bda:	4b29      	ldr	r3, [pc, #164]	; (8005c80 <HAL_ADC_ConfigChannel+0x250>)
 8005bdc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a28      	ldr	r2, [pc, #160]	; (8005c84 <HAL_ADC_ConfigChannel+0x254>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d10f      	bne.n	8005c08 <HAL_ADC_ConfigChannel+0x1d8>
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b12      	cmp	r3, #18
 8005bee:	d10b      	bne.n	8005c08 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a1d      	ldr	r2, [pc, #116]	; (8005c84 <HAL_ADC_ConfigChannel+0x254>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d12b      	bne.n	8005c6a <HAL_ADC_ConfigChannel+0x23a>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a1c      	ldr	r2, [pc, #112]	; (8005c88 <HAL_ADC_ConfigChannel+0x258>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d003      	beq.n	8005c24 <HAL_ADC_ConfigChannel+0x1f4>
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b11      	cmp	r3, #17
 8005c22:	d122      	bne.n	8005c6a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a11      	ldr	r2, [pc, #68]	; (8005c88 <HAL_ADC_ConfigChannel+0x258>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d111      	bne.n	8005c6a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005c46:	4b11      	ldr	r3, [pc, #68]	; (8005c8c <HAL_ADC_ConfigChannel+0x25c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a11      	ldr	r2, [pc, #68]	; (8005c90 <HAL_ADC_ConfigChannel+0x260>)
 8005c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c50:	0c9a      	lsrs	r2, r3, #18
 8005c52:	4613      	mov	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005c5c:	e002      	b.n	8005c64 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	3b01      	subs	r3, #1
 8005c62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1f9      	bne.n	8005c5e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	40012300 	.word	0x40012300
 8005c84:	40012000 	.word	0x40012000
 8005c88:	10000012 	.word	0x10000012
 8005c8c:	200003b0 	.word	0x200003b0
 8005c90:	431bde83 	.word	0x431bde83

08005c94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c9c:	4b79      	ldr	r3, [pc, #484]	; (8005e84 <ADC_Init+0x1f0>)
 8005c9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6859      	ldr	r1, [r3, #4]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	021a      	lsls	r2, r3, #8
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005cec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6859      	ldr	r1, [r3, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689a      	ldr	r2, [r3, #8]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6899      	ldr	r1, [r3, #8]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d26:	4a58      	ldr	r2, [pc, #352]	; (8005e88 <ADC_Init+0x1f4>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d022      	beq.n	8005d72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6899      	ldr	r1, [r3, #8]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005d5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6899      	ldr	r1, [r3, #8]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	609a      	str	r2, [r3, #8]
 8005d70:	e00f      	b.n	8005d92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689a      	ldr	r2, [r3, #8]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005d90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 0202 	bic.w	r2, r2, #2
 8005da0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6899      	ldr	r1, [r3, #8]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	7e1b      	ldrb	r3, [r3, #24]
 8005dac:	005a      	lsls	r2, r3, #1
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d01b      	beq.n	8005df8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005dde:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6859      	ldr	r1, [r3, #4]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	3b01      	subs	r3, #1
 8005dec:	035a      	lsls	r2, r3, #13
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	605a      	str	r2, [r3, #4]
 8005df6:	e007      	b.n	8005e08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005e16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	3b01      	subs	r3, #1
 8005e24:	051a      	lsls	r2, r3, #20
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005e3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6899      	ldr	r1, [r3, #8]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e4a:	025a      	lsls	r2, r3, #9
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689a      	ldr	r2, [r3, #8]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6899      	ldr	r1, [r3, #8]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	029a      	lsls	r2, r3, #10
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	609a      	str	r2, [r3, #8]
}
 8005e78:	bf00      	nop
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	40012300 	.word	0x40012300
 8005e88:	0f000001 	.word	0x0f000001

08005e8c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e98:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d13c      	bne.n	8005f20 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d12b      	bne.n	8005f18 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d127      	bne.n	8005f18 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ece:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d006      	beq.n	8005ee4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d119      	bne.n	8005f18 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0220 	bic.w	r2, r2, #32
 8005ef2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d105      	bne.n	8005f18 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f10:	f043 0201 	orr.w	r2, r3, #1
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f7ff fd6b 	bl	80059f4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005f1e:	e00e      	b.n	8005f3e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f24:	f003 0310 	and.w	r3, r3, #16
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f7ff fd75 	bl	8005a1c <HAL_ADC_ErrorCallback>
}
 8005f32:	e004      	b.n	8005f3e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	4798      	blx	r3
}
 8005f3e:	bf00      	nop
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b084      	sub	sp, #16
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f52:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f7ff fd57 	bl	8005a08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005f5a:	bf00      	nop
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b084      	sub	sp, #16
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2240      	movs	r2, #64	; 0x40
 8005f74:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7a:	f043 0204 	orr.w	r2, r3, #4
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f7ff fd4a 	bl	8005a1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005f88:	bf00      	nop
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <__NVIC_SetPriorityGrouping>:
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f003 0307 	and.w	r3, r3, #7
 8005f9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005fa0:	4b0c      	ldr	r3, [pc, #48]	; (8005fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005fac:	4013      	ands	r3, r2
 8005fae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005fc2:	4a04      	ldr	r2, [pc, #16]	; (8005fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	60d3      	str	r3, [r2, #12]
}
 8005fc8:	bf00      	nop
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	e000ed00 	.word	0xe000ed00

08005fd8 <__NVIC_GetPriorityGrouping>:
{
 8005fd8:	b480      	push	{r7}
 8005fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fdc:	4b04      	ldr	r3, [pc, #16]	; (8005ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	0a1b      	lsrs	r3, r3, #8
 8005fe2:	f003 0307 	and.w	r3, r3, #7
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	e000ed00 	.word	0xe000ed00

08005ff4 <__NVIC_EnableIRQ>:
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006002:	2b00      	cmp	r3, #0
 8006004:	db0b      	blt.n	800601e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006006:	79fb      	ldrb	r3, [r7, #7]
 8006008:	f003 021f 	and.w	r2, r3, #31
 800600c:	4907      	ldr	r1, [pc, #28]	; (800602c <__NVIC_EnableIRQ+0x38>)
 800600e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006012:	095b      	lsrs	r3, r3, #5
 8006014:	2001      	movs	r0, #1
 8006016:	fa00 f202 	lsl.w	r2, r0, r2
 800601a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800601e:	bf00      	nop
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	e000e100 	.word	0xe000e100

08006030 <__NVIC_SetPriority>:
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	4603      	mov	r3, r0
 8006038:	6039      	str	r1, [r7, #0]
 800603a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800603c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006040:	2b00      	cmp	r3, #0
 8006042:	db0a      	blt.n	800605a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	b2da      	uxtb	r2, r3
 8006048:	490c      	ldr	r1, [pc, #48]	; (800607c <__NVIC_SetPriority+0x4c>)
 800604a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800604e:	0112      	lsls	r2, r2, #4
 8006050:	b2d2      	uxtb	r2, r2
 8006052:	440b      	add	r3, r1
 8006054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006058:	e00a      	b.n	8006070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	b2da      	uxtb	r2, r3
 800605e:	4908      	ldr	r1, [pc, #32]	; (8006080 <__NVIC_SetPriority+0x50>)
 8006060:	79fb      	ldrb	r3, [r7, #7]
 8006062:	f003 030f 	and.w	r3, r3, #15
 8006066:	3b04      	subs	r3, #4
 8006068:	0112      	lsls	r2, r2, #4
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	440b      	add	r3, r1
 800606e:	761a      	strb	r2, [r3, #24]
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	e000e100 	.word	0xe000e100
 8006080:	e000ed00 	.word	0xe000ed00

08006084 <NVIC_EncodePriority>:
{
 8006084:	b480      	push	{r7}
 8006086:	b089      	sub	sp, #36	; 0x24
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	f1c3 0307 	rsb	r3, r3, #7
 800609e:	2b04      	cmp	r3, #4
 80060a0:	bf28      	it	cs
 80060a2:	2304      	movcs	r3, #4
 80060a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	3304      	adds	r3, #4
 80060aa:	2b06      	cmp	r3, #6
 80060ac:	d902      	bls.n	80060b4 <NVIC_EncodePriority+0x30>
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	3b03      	subs	r3, #3
 80060b2:	e000      	b.n	80060b6 <NVIC_EncodePriority+0x32>
 80060b4:	2300      	movs	r3, #0
 80060b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060b8:	f04f 32ff 	mov.w	r2, #4294967295
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	fa02 f303 	lsl.w	r3, r2, r3
 80060c2:	43da      	mvns	r2, r3
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	401a      	ands	r2, r3
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060cc:	f04f 31ff 	mov.w	r1, #4294967295
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	fa01 f303 	lsl.w	r3, r1, r3
 80060d6:	43d9      	mvns	r1, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060dc:	4313      	orrs	r3, r2
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3724      	adds	r7, #36	; 0x24
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
	...

080060ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060fc:	d301      	bcc.n	8006102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80060fe:	2301      	movs	r3, #1
 8006100:	e00f      	b.n	8006122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006102:	4a0a      	ldr	r2, [pc, #40]	; (800612c <SysTick_Config+0x40>)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	3b01      	subs	r3, #1
 8006108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800610a:	210f      	movs	r1, #15
 800610c:	f04f 30ff 	mov.w	r0, #4294967295
 8006110:	f7ff ff8e 	bl	8006030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006114:	4b05      	ldr	r3, [pc, #20]	; (800612c <SysTick_Config+0x40>)
 8006116:	2200      	movs	r2, #0
 8006118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800611a:	4b04      	ldr	r3, [pc, #16]	; (800612c <SysTick_Config+0x40>)
 800611c:	2207      	movs	r2, #7
 800611e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	e000e010 	.word	0xe000e010

08006130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7ff ff29 	bl	8005f90 <__NVIC_SetPriorityGrouping>
}
 800613e:	bf00      	nop
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006146:	b580      	push	{r7, lr}
 8006148:	b086      	sub	sp, #24
 800614a:	af00      	add	r7, sp, #0
 800614c:	4603      	mov	r3, r0
 800614e:	60b9      	str	r1, [r7, #8]
 8006150:	607a      	str	r2, [r7, #4]
 8006152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006154:	2300      	movs	r3, #0
 8006156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006158:	f7ff ff3e 	bl	8005fd8 <__NVIC_GetPriorityGrouping>
 800615c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	68b9      	ldr	r1, [r7, #8]
 8006162:	6978      	ldr	r0, [r7, #20]
 8006164:	f7ff ff8e 	bl	8006084 <NVIC_EncodePriority>
 8006168:	4602      	mov	r2, r0
 800616a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800616e:	4611      	mov	r1, r2
 8006170:	4618      	mov	r0, r3
 8006172:	f7ff ff5d 	bl	8006030 <__NVIC_SetPriority>
}
 8006176:	bf00      	nop
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b082      	sub	sp, #8
 8006182:	af00      	add	r7, sp, #0
 8006184:	4603      	mov	r3, r0
 8006186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff ff31 	bl	8005ff4 <__NVIC_EnableIRQ>
}
 8006192:	bf00      	nop
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b082      	sub	sp, #8
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7ff ffa2 	bl	80060ec <SysTick_Config>
 80061a8:	4603      	mov	r3, r0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
	...

080061b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80061bc:	2300      	movs	r3, #0
 80061be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80061c0:	f7ff fad8 	bl	8005774 <HAL_GetTick>
 80061c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d101      	bne.n	80061d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e099      	b.n	8006304 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 0201 	bic.w	r2, r2, #1
 80061ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061f0:	e00f      	b.n	8006212 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061f2:	f7ff fabf 	bl	8005774 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	2b05      	cmp	r3, #5
 80061fe:	d908      	bls.n	8006212 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2220      	movs	r2, #32
 8006204:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2203      	movs	r2, #3
 800620a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e078      	b.n	8006304 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1e8      	bne.n	80061f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	4b38      	ldr	r3, [pc, #224]	; (800630c <HAL_DMA_Init+0x158>)
 800622c:	4013      	ands	r3, r2
 800622e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800623e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800624a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006256:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006268:	2b04      	cmp	r3, #4
 800626a:	d107      	bne.n	800627c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006274:	4313      	orrs	r3, r2
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	4313      	orrs	r3, r2
 800627a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f023 0307 	bic.w	r3, r3, #7
 8006292:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	4313      	orrs	r3, r2
 800629c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d117      	bne.n	80062d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00e      	beq.n	80062d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fb0d 	bl	80068d8 <DMA_CheckFifoParam>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d008      	beq.n	80062d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2240      	movs	r2, #64	; 0x40
 80062c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80062d2:	2301      	movs	r3, #1
 80062d4:	e016      	b.n	8006304 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fac4 	bl	800686c <DMA_CalcBaseAndBitshift>
 80062e4:	4603      	mov	r3, r0
 80062e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ec:	223f      	movs	r2, #63	; 0x3f
 80062ee:	409a      	lsls	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	f010803f 	.word	0xf010803f

08006310 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
 800631c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800631e:	2300      	movs	r3, #0
 8006320:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006326:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800632e:	2b01      	cmp	r3, #1
 8006330:	d101      	bne.n	8006336 <HAL_DMA_Start_IT+0x26>
 8006332:	2302      	movs	r3, #2
 8006334:	e040      	b.n	80063b8 <HAL_DMA_Start_IT+0xa8>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b01      	cmp	r3, #1
 8006348:	d12f      	bne.n	80063aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2202      	movs	r2, #2
 800634e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	68b9      	ldr	r1, [r7, #8]
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 fa56 	bl	8006810 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006368:	223f      	movs	r2, #63	; 0x3f
 800636a:	409a      	lsls	r2, r3
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f042 0216 	orr.w	r2, r2, #22
 800637e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006384:	2b00      	cmp	r3, #0
 8006386:	d007      	beq.n	8006398 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f042 0208 	orr.w	r2, r2, #8
 8006396:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0201 	orr.w	r2, r2, #1
 80063a6:	601a      	str	r2, [r3, #0]
 80063a8:	e005      	b.n	80063b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80063b2:	2302      	movs	r3, #2
 80063b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80063b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3718      	adds	r7, #24
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80063ce:	f7ff f9d1 	bl	8005774 <HAL_GetTick>
 80063d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d008      	beq.n	80063f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2280      	movs	r2, #128	; 0x80
 80063e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e052      	b.n	8006498 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f022 0216 	bic.w	r2, r2, #22
 8006400:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	695a      	ldr	r2, [r3, #20]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006410:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	2b00      	cmp	r3, #0
 8006418:	d103      	bne.n	8006422 <HAL_DMA_Abort+0x62>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800641e:	2b00      	cmp	r3, #0
 8006420:	d007      	beq.n	8006432 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 0208 	bic.w	r2, r2, #8
 8006430:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 0201 	bic.w	r2, r2, #1
 8006440:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006442:	e013      	b.n	800646c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006444:	f7ff f996 	bl	8005774 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b05      	cmp	r3, #5
 8006450:	d90c      	bls.n	800646c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2220      	movs	r2, #32
 8006456:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2203      	movs	r2, #3
 800645c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e015      	b.n	8006498 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1e4      	bne.n	8006444 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800647e:	223f      	movs	r2, #63	; 0x3f
 8006480:	409a      	lsls	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d004      	beq.n	80064be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2280      	movs	r2, #128	; 0x80
 80064b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e00c      	b.n	80064d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2205      	movs	r2, #5
 80064c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 0201 	bic.w	r2, r2, #1
 80064d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80064ec:	2300      	movs	r3, #0
 80064ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80064f0:	4b8e      	ldr	r3, [pc, #568]	; (800672c <HAL_DMA_IRQHandler+0x248>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a8e      	ldr	r2, [pc, #568]	; (8006730 <HAL_DMA_IRQHandler+0x24c>)
 80064f6:	fba2 2303 	umull	r2, r3, r2, r3
 80064fa:	0a9b      	lsrs	r3, r3, #10
 80064fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006502:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800650e:	2208      	movs	r2, #8
 8006510:	409a      	lsls	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4013      	ands	r3, r2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d01a      	beq.n	8006550 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b00      	cmp	r3, #0
 8006526:	d013      	beq.n	8006550 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f022 0204 	bic.w	r2, r2, #4
 8006536:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800653c:	2208      	movs	r2, #8
 800653e:	409a      	lsls	r2, r3
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006548:	f043 0201 	orr.w	r2, r3, #1
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006554:	2201      	movs	r2, #1
 8006556:	409a      	lsls	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4013      	ands	r3, r2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d012      	beq.n	8006586 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00b      	beq.n	8006586 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006572:	2201      	movs	r2, #1
 8006574:	409a      	lsls	r2, r3
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800657e:	f043 0202 	orr.w	r2, r3, #2
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800658a:	2204      	movs	r2, #4
 800658c:	409a      	lsls	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4013      	ands	r3, r2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d012      	beq.n	80065bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0302 	and.w	r3, r3, #2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00b      	beq.n	80065bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a8:	2204      	movs	r2, #4
 80065aa:	409a      	lsls	r2, r3
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b4:	f043 0204 	orr.w	r2, r3, #4
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c0:	2210      	movs	r2, #16
 80065c2:	409a      	lsls	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4013      	ands	r3, r2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d043      	beq.n	8006654 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0308 	and.w	r3, r3, #8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d03c      	beq.n	8006654 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065de:	2210      	movs	r2, #16
 80065e0:	409a      	lsls	r2, r3
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d018      	beq.n	8006626 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d108      	bne.n	8006614 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	2b00      	cmp	r3, #0
 8006608:	d024      	beq.n	8006654 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	4798      	blx	r3
 8006612:	e01f      	b.n	8006654 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006618:	2b00      	cmp	r3, #0
 800661a:	d01b      	beq.n	8006654 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	4798      	blx	r3
 8006624:	e016      	b.n	8006654 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006630:	2b00      	cmp	r3, #0
 8006632:	d107      	bne.n	8006644 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 0208 	bic.w	r2, r2, #8
 8006642:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006658:	2220      	movs	r2, #32
 800665a:	409a      	lsls	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4013      	ands	r3, r2
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 808f 	beq.w	8006784 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0310 	and.w	r3, r3, #16
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 8087 	beq.w	8006784 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800667a:	2220      	movs	r2, #32
 800667c:	409a      	lsls	r2, r3
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b05      	cmp	r3, #5
 800668c:	d136      	bne.n	80066fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0216 	bic.w	r2, r2, #22
 800669c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	695a      	ldr	r2, [r3, #20]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d103      	bne.n	80066be <HAL_DMA_IRQHandler+0x1da>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d007      	beq.n	80066ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 0208 	bic.w	r2, r2, #8
 80066cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d2:	223f      	movs	r2, #63	; 0x3f
 80066d4:	409a      	lsls	r2, r3
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d07e      	beq.n	80067f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	4798      	blx	r3
        }
        return;
 80066fa:	e079      	b.n	80067f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d01d      	beq.n	8006746 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10d      	bne.n	8006734 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800671c:	2b00      	cmp	r3, #0
 800671e:	d031      	beq.n	8006784 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	4798      	blx	r3
 8006728:	e02c      	b.n	8006784 <HAL_DMA_IRQHandler+0x2a0>
 800672a:	bf00      	nop
 800672c:	200003b0 	.word	0x200003b0
 8006730:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006738:	2b00      	cmp	r3, #0
 800673a:	d023      	beq.n	8006784 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	4798      	blx	r3
 8006744:	e01e      	b.n	8006784 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10f      	bne.n	8006774 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0210 	bic.w	r2, r2, #16
 8006762:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006788:	2b00      	cmp	r3, #0
 800678a:	d032      	beq.n	80067f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006790:	f003 0301 	and.w	r3, r3, #1
 8006794:	2b00      	cmp	r3, #0
 8006796:	d022      	beq.n	80067de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2205      	movs	r2, #5
 800679c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0201 	bic.w	r2, r2, #1
 80067ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	3301      	adds	r3, #1
 80067b4:	60bb      	str	r3, [r7, #8]
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d307      	bcc.n	80067cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1f2      	bne.n	80067b0 <HAL_DMA_IRQHandler+0x2cc>
 80067ca:	e000      	b.n	80067ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80067cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d005      	beq.n	80067f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	4798      	blx	r3
 80067ee:	e000      	b.n	80067f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80067f0:	bf00      	nop
    }
  }
}
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006804:	4618      	mov	r0, r3
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
 800681c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800682c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	2b40      	cmp	r3, #64	; 0x40
 800683c:	d108      	bne.n	8006850 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800684e:	e007      	b.n	8006860 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	60da      	str	r2, [r3, #12]
}
 8006860:	bf00      	nop
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	b2db      	uxtb	r3, r3
 800687a:	3b10      	subs	r3, #16
 800687c:	4a14      	ldr	r2, [pc, #80]	; (80068d0 <DMA_CalcBaseAndBitshift+0x64>)
 800687e:	fba2 2303 	umull	r2, r3, r2, r3
 8006882:	091b      	lsrs	r3, r3, #4
 8006884:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006886:	4a13      	ldr	r2, [pc, #76]	; (80068d4 <DMA_CalcBaseAndBitshift+0x68>)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4413      	add	r3, r2
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	461a      	mov	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b03      	cmp	r3, #3
 8006898:	d909      	bls.n	80068ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80068a2:	f023 0303 	bic.w	r3, r3, #3
 80068a6:	1d1a      	adds	r2, r3, #4
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	659a      	str	r2, [r3, #88]	; 0x58
 80068ac:	e007      	b.n	80068be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80068b6:	f023 0303 	bic.w	r3, r3, #3
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	aaaaaaab 	.word	0xaaaaaaab
 80068d4:	0800dc18 	.word	0x0800dc18

080068d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068e0:	2300      	movs	r3, #0
 80068e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d11f      	bne.n	8006932 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2b03      	cmp	r3, #3
 80068f6:	d856      	bhi.n	80069a6 <DMA_CheckFifoParam+0xce>
 80068f8:	a201      	add	r2, pc, #4	; (adr r2, 8006900 <DMA_CheckFifoParam+0x28>)
 80068fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fe:	bf00      	nop
 8006900:	08006911 	.word	0x08006911
 8006904:	08006923 	.word	0x08006923
 8006908:	08006911 	.word	0x08006911
 800690c:	080069a7 	.word	0x080069a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d046      	beq.n	80069aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006920:	e043      	b.n	80069aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006926:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800692a:	d140      	bne.n	80069ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006930:	e03d      	b.n	80069ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800693a:	d121      	bne.n	8006980 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2b03      	cmp	r3, #3
 8006940:	d837      	bhi.n	80069b2 <DMA_CheckFifoParam+0xda>
 8006942:	a201      	add	r2, pc, #4	; (adr r2, 8006948 <DMA_CheckFifoParam+0x70>)
 8006944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006948:	08006959 	.word	0x08006959
 800694c:	0800695f 	.word	0x0800695f
 8006950:	08006959 	.word	0x08006959
 8006954:	08006971 	.word	0x08006971
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	73fb      	strb	r3, [r7, #15]
      break;
 800695c:	e030      	b.n	80069c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006962:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d025      	beq.n	80069b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800696e:	e022      	b.n	80069b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006974:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006978:	d11f      	bne.n	80069ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800697e:	e01c      	b.n	80069ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	2b02      	cmp	r3, #2
 8006984:	d903      	bls.n	800698e <DMA_CheckFifoParam+0xb6>
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2b03      	cmp	r3, #3
 800698a:	d003      	beq.n	8006994 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800698c:	e018      	b.n	80069c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	73fb      	strb	r3, [r7, #15]
      break;
 8006992:	e015      	b.n	80069c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006998:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00e      	beq.n	80069be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	73fb      	strb	r3, [r7, #15]
      break;
 80069a4:	e00b      	b.n	80069be <DMA_CheckFifoParam+0xe6>
      break;
 80069a6:	bf00      	nop
 80069a8:	e00a      	b.n	80069c0 <DMA_CheckFifoParam+0xe8>
      break;
 80069aa:	bf00      	nop
 80069ac:	e008      	b.n	80069c0 <DMA_CheckFifoParam+0xe8>
      break;
 80069ae:	bf00      	nop
 80069b0:	e006      	b.n	80069c0 <DMA_CheckFifoParam+0xe8>
      break;
 80069b2:	bf00      	nop
 80069b4:	e004      	b.n	80069c0 <DMA_CheckFifoParam+0xe8>
      break;
 80069b6:	bf00      	nop
 80069b8:	e002      	b.n	80069c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80069ba:	bf00      	nop
 80069bc:	e000      	b.n	80069c0 <DMA_CheckFifoParam+0xe8>
      break;
 80069be:	bf00      	nop
    }
  } 
  
  return status; 
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop

080069d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b089      	sub	sp, #36	; 0x24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80069da:	2300      	movs	r3, #0
 80069dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80069de:	2300      	movs	r3, #0
 80069e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069e6:	2300      	movs	r3, #0
 80069e8:	61fb      	str	r3, [r7, #28]
 80069ea:	e159      	b.n	8006ca0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80069ec:	2201      	movs	r2, #1
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	fa02 f303 	lsl.w	r3, r2, r3
 80069f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	4013      	ands	r3, r2
 80069fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	f040 8148 	bne.w	8006c9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f003 0303 	and.w	r3, r3, #3
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d005      	beq.n	8006a22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d130      	bne.n	8006a84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	2203      	movs	r2, #3
 8006a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a32:	43db      	mvns	r3, r3
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	4013      	ands	r3, r2
 8006a38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	005b      	lsls	r3, r3, #1
 8006a42:	fa02 f303 	lsl.w	r3, r2, r3
 8006a46:	69ba      	ldr	r2, [r7, #24]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a58:	2201      	movs	r2, #1
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a60:	43db      	mvns	r3, r3
 8006a62:	69ba      	ldr	r2, [r7, #24]
 8006a64:	4013      	ands	r3, r2
 8006a66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	091b      	lsrs	r3, r3, #4
 8006a6e:	f003 0201 	and.w	r2, r3, #1
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	fa02 f303 	lsl.w	r3, r2, r3
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f003 0303 	and.w	r3, r3, #3
 8006a8c:	2b03      	cmp	r3, #3
 8006a8e:	d017      	beq.n	8006ac0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	2203      	movs	r2, #3
 8006a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa0:	43db      	mvns	r3, r3
 8006aa2:	69ba      	ldr	r2, [r7, #24]
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	005b      	lsls	r3, r3, #1
 8006ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab4:	69ba      	ldr	r2, [r7, #24]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	69ba      	ldr	r2, [r7, #24]
 8006abe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f003 0303 	and.w	r3, r3, #3
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d123      	bne.n	8006b14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	08da      	lsrs	r2, r3, #3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3208      	adds	r2, #8
 8006ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	f003 0307 	and.w	r3, r3, #7
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	220f      	movs	r2, #15
 8006ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae8:	43db      	mvns	r3, r3
 8006aea:	69ba      	ldr	r2, [r7, #24]
 8006aec:	4013      	ands	r3, r2
 8006aee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	691a      	ldr	r2, [r3, #16]
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	f003 0307 	and.w	r3, r3, #7
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	fa02 f303 	lsl.w	r3, r2, r3
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	08da      	lsrs	r2, r3, #3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	3208      	adds	r2, #8
 8006b0e:	69b9      	ldr	r1, [r7, #24]
 8006b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	005b      	lsls	r3, r3, #1
 8006b1e:	2203      	movs	r2, #3
 8006b20:	fa02 f303 	lsl.w	r3, r2, r3
 8006b24:	43db      	mvns	r3, r3
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	4013      	ands	r3, r2
 8006b2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f003 0203 	and.w	r2, r3, #3
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	005b      	lsls	r3, r3, #1
 8006b38:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	69ba      	ldr	r2, [r7, #24]
 8006b46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f000 80a2 	beq.w	8006c9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b56:	2300      	movs	r3, #0
 8006b58:	60fb      	str	r3, [r7, #12]
 8006b5a:	4b57      	ldr	r3, [pc, #348]	; (8006cb8 <HAL_GPIO_Init+0x2e8>)
 8006b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5e:	4a56      	ldr	r2, [pc, #344]	; (8006cb8 <HAL_GPIO_Init+0x2e8>)
 8006b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b64:	6453      	str	r3, [r2, #68]	; 0x44
 8006b66:	4b54      	ldr	r3, [pc, #336]	; (8006cb8 <HAL_GPIO_Init+0x2e8>)
 8006b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b6e:	60fb      	str	r3, [r7, #12]
 8006b70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b72:	4a52      	ldr	r2, [pc, #328]	; (8006cbc <HAL_GPIO_Init+0x2ec>)
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	089b      	lsrs	r3, r3, #2
 8006b78:	3302      	adds	r3, #2
 8006b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	f003 0303 	and.w	r3, r3, #3
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	220f      	movs	r2, #15
 8006b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8e:	43db      	mvns	r3, r3
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	4013      	ands	r3, r2
 8006b94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a49      	ldr	r2, [pc, #292]	; (8006cc0 <HAL_GPIO_Init+0x2f0>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d019      	beq.n	8006bd2 <HAL_GPIO_Init+0x202>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a48      	ldr	r2, [pc, #288]	; (8006cc4 <HAL_GPIO_Init+0x2f4>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d013      	beq.n	8006bce <HAL_GPIO_Init+0x1fe>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a47      	ldr	r2, [pc, #284]	; (8006cc8 <HAL_GPIO_Init+0x2f8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d00d      	beq.n	8006bca <HAL_GPIO_Init+0x1fa>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a46      	ldr	r2, [pc, #280]	; (8006ccc <HAL_GPIO_Init+0x2fc>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d007      	beq.n	8006bc6 <HAL_GPIO_Init+0x1f6>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a45      	ldr	r2, [pc, #276]	; (8006cd0 <HAL_GPIO_Init+0x300>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d101      	bne.n	8006bc2 <HAL_GPIO_Init+0x1f2>
 8006bbe:	2304      	movs	r3, #4
 8006bc0:	e008      	b.n	8006bd4 <HAL_GPIO_Init+0x204>
 8006bc2:	2307      	movs	r3, #7
 8006bc4:	e006      	b.n	8006bd4 <HAL_GPIO_Init+0x204>
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e004      	b.n	8006bd4 <HAL_GPIO_Init+0x204>
 8006bca:	2302      	movs	r3, #2
 8006bcc:	e002      	b.n	8006bd4 <HAL_GPIO_Init+0x204>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e000      	b.n	8006bd4 <HAL_GPIO_Init+0x204>
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	69fa      	ldr	r2, [r7, #28]
 8006bd6:	f002 0203 	and.w	r2, r2, #3
 8006bda:	0092      	lsls	r2, r2, #2
 8006bdc:	4093      	lsls	r3, r2
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006be4:	4935      	ldr	r1, [pc, #212]	; (8006cbc <HAL_GPIO_Init+0x2ec>)
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	089b      	lsrs	r3, r3, #2
 8006bea:	3302      	adds	r3, #2
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006bf2:	4b38      	ldr	r3, [pc, #224]	; (8006cd4 <HAL_GPIO_Init+0x304>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	43db      	mvns	r3, r3
 8006bfc:	69ba      	ldr	r2, [r7, #24]
 8006bfe:	4013      	ands	r3, r2
 8006c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d003      	beq.n	8006c16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006c0e:	69ba      	ldr	r2, [r7, #24]
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c16:	4a2f      	ldr	r2, [pc, #188]	; (8006cd4 <HAL_GPIO_Init+0x304>)
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c1c:	4b2d      	ldr	r3, [pc, #180]	; (8006cd4 <HAL_GPIO_Init+0x304>)
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	43db      	mvns	r3, r3
 8006c26:	69ba      	ldr	r2, [r7, #24]
 8006c28:	4013      	ands	r3, r2
 8006c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d003      	beq.n	8006c40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006c40:	4a24      	ldr	r2, [pc, #144]	; (8006cd4 <HAL_GPIO_Init+0x304>)
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006c46:	4b23      	ldr	r3, [pc, #140]	; (8006cd4 <HAL_GPIO_Init+0x304>)
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	43db      	mvns	r3, r3
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	4013      	ands	r3, r2
 8006c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006c6a:	4a1a      	ldr	r2, [pc, #104]	; (8006cd4 <HAL_GPIO_Init+0x304>)
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c70:	4b18      	ldr	r3, [pc, #96]	; (8006cd4 <HAL_GPIO_Init+0x304>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	43db      	mvns	r3, r3
 8006c7a:	69ba      	ldr	r2, [r7, #24]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d003      	beq.n	8006c94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c94:	4a0f      	ldr	r2, [pc, #60]	; (8006cd4 <HAL_GPIO_Init+0x304>)
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	61fb      	str	r3, [r7, #28]
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	2b0f      	cmp	r3, #15
 8006ca4:	f67f aea2 	bls.w	80069ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006ca8:	bf00      	nop
 8006caa:	bf00      	nop
 8006cac:	3724      	adds	r7, #36	; 0x24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	40023800 	.word	0x40023800
 8006cbc:	40013800 	.word	0x40013800
 8006cc0:	40020000 	.word	0x40020000
 8006cc4:	40020400 	.word	0x40020400
 8006cc8:	40020800 	.word	0x40020800
 8006ccc:	40020c00 	.word	0x40020c00
 8006cd0:	40021000 	.word	0x40021000
 8006cd4:	40013c00 	.word	0x40013c00

08006cd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	691a      	ldr	r2, [r3, #16]
 8006ce8:	887b      	ldrh	r3, [r7, #2]
 8006cea:	4013      	ands	r3, r2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d002      	beq.n	8006cf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	73fb      	strb	r3, [r7, #15]
 8006cf4:	e001      	b.n	8006cfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3714      	adds	r7, #20
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	460b      	mov	r3, r1
 8006d12:	807b      	strh	r3, [r7, #2]
 8006d14:	4613      	mov	r3, r2
 8006d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006d18:	787b      	ldrb	r3, [r7, #1]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d1e:	887a      	ldrh	r2, [r7, #2]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006d24:	e003      	b.n	8006d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006d26:	887b      	ldrh	r3, [r7, #2]
 8006d28:	041a      	lsls	r2, r3, #16
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	619a      	str	r2, [r3, #24]
}
 8006d2e:	bf00      	nop
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
	...

08006d3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	4603      	mov	r3, r0
 8006d44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006d46:	4b08      	ldr	r3, [pc, #32]	; (8006d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d48:	695a      	ldr	r2, [r3, #20]
 8006d4a:	88fb      	ldrh	r3, [r7, #6]
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d006      	beq.n	8006d60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006d52:	4a05      	ldr	r2, [pc, #20]	; (8006d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d54:	88fb      	ldrh	r3, [r7, #6]
 8006d56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006d58:	88fb      	ldrh	r3, [r7, #6]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 f806 	bl	8006d6c <HAL_GPIO_EXTI_Callback>
  }
}
 8006d60:	bf00      	nop
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	40013c00 	.word	0x40013c00

08006d6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	4603      	mov	r3, r0
 8006d74:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006d76:	bf00      	nop
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
	...

08006d84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e12b      	b.n	8006fee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d106      	bne.n	8006db0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7fe f9d8 	bl	8005160 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2224      	movs	r2, #36	; 0x24
 8006db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f022 0201 	bic.w	r2, r2, #1
 8006dc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006de6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006de8:	f001 fbd2 	bl	8008590 <HAL_RCC_GetPCLK1Freq>
 8006dec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	4a81      	ldr	r2, [pc, #516]	; (8006ff8 <HAL_I2C_Init+0x274>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d807      	bhi.n	8006e08 <HAL_I2C_Init+0x84>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4a80      	ldr	r2, [pc, #512]	; (8006ffc <HAL_I2C_Init+0x278>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	bf94      	ite	ls
 8006e00:	2301      	movls	r3, #1
 8006e02:	2300      	movhi	r3, #0
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	e006      	b.n	8006e16 <HAL_I2C_Init+0x92>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4a7d      	ldr	r2, [pc, #500]	; (8007000 <HAL_I2C_Init+0x27c>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	bf94      	ite	ls
 8006e10:	2301      	movls	r3, #1
 8006e12:	2300      	movhi	r3, #0
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d001      	beq.n	8006e1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e0e7      	b.n	8006fee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	4a78      	ldr	r2, [pc, #480]	; (8007004 <HAL_I2C_Init+0x280>)
 8006e22:	fba2 2303 	umull	r2, r3, r2, r3
 8006e26:	0c9b      	lsrs	r3, r3, #18
 8006e28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	4a6a      	ldr	r2, [pc, #424]	; (8006ff8 <HAL_I2C_Init+0x274>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d802      	bhi.n	8006e58 <HAL_I2C_Init+0xd4>
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	3301      	adds	r3, #1
 8006e56:	e009      	b.n	8006e6c <HAL_I2C_Init+0xe8>
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006e5e:	fb02 f303 	mul.w	r3, r2, r3
 8006e62:	4a69      	ldr	r2, [pc, #420]	; (8007008 <HAL_I2C_Init+0x284>)
 8006e64:	fba2 2303 	umull	r2, r3, r2, r3
 8006e68:	099b      	lsrs	r3, r3, #6
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	6812      	ldr	r2, [r2, #0]
 8006e70:	430b      	orrs	r3, r1
 8006e72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006e7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	495c      	ldr	r1, [pc, #368]	; (8006ff8 <HAL_I2C_Init+0x274>)
 8006e88:	428b      	cmp	r3, r1
 8006e8a:	d819      	bhi.n	8006ec0 <HAL_I2C_Init+0x13c>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	1e59      	subs	r1, r3, #1
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	005b      	lsls	r3, r3, #1
 8006e96:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e9a:	1c59      	adds	r1, r3, #1
 8006e9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006ea0:	400b      	ands	r3, r1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00a      	beq.n	8006ebc <HAL_I2C_Init+0x138>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	1e59      	subs	r1, r3, #1
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	005b      	lsls	r3, r3, #1
 8006eb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eba:	e051      	b.n	8006f60 <HAL_I2C_Init+0x1dc>
 8006ebc:	2304      	movs	r3, #4
 8006ebe:	e04f      	b.n	8006f60 <HAL_I2C_Init+0x1dc>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d111      	bne.n	8006eec <HAL_I2C_Init+0x168>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	1e58      	subs	r0, r3, #1
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6859      	ldr	r1, [r3, #4]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	440b      	add	r3, r1
 8006ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006eda:	3301      	adds	r3, #1
 8006edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	bf0c      	ite	eq
 8006ee4:	2301      	moveq	r3, #1
 8006ee6:	2300      	movne	r3, #0
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	e012      	b.n	8006f12 <HAL_I2C_Init+0x18e>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	1e58      	subs	r0, r3, #1
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6859      	ldr	r1, [r3, #4]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	440b      	add	r3, r1
 8006efa:	0099      	lsls	r1, r3, #2
 8006efc:	440b      	add	r3, r1
 8006efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f02:	3301      	adds	r3, #1
 8006f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	bf0c      	ite	eq
 8006f0c:	2301      	moveq	r3, #1
 8006f0e:	2300      	movne	r3, #0
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <HAL_I2C_Init+0x196>
 8006f16:	2301      	movs	r3, #1
 8006f18:	e022      	b.n	8006f60 <HAL_I2C_Init+0x1dc>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10e      	bne.n	8006f40 <HAL_I2C_Init+0x1bc>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	1e58      	subs	r0, r3, #1
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6859      	ldr	r1, [r3, #4]
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	005b      	lsls	r3, r3, #1
 8006f2e:	440b      	add	r3, r1
 8006f30:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f34:	3301      	adds	r3, #1
 8006f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f3e:	e00f      	b.n	8006f60 <HAL_I2C_Init+0x1dc>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	1e58      	subs	r0, r3, #1
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6859      	ldr	r1, [r3, #4]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	440b      	add	r3, r1
 8006f4e:	0099      	lsls	r1, r3, #2
 8006f50:	440b      	add	r3, r1
 8006f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f56:	3301      	adds	r3, #1
 8006f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f60:	6879      	ldr	r1, [r7, #4]
 8006f62:	6809      	ldr	r1, [r1, #0]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	69da      	ldr	r2, [r3, #28]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	431a      	orrs	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006f8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	6911      	ldr	r1, [r2, #16]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	68d2      	ldr	r2, [r2, #12]
 8006f9a:	4311      	orrs	r1, r2
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	6812      	ldr	r2, [r2, #0]
 8006fa0:	430b      	orrs	r3, r1
 8006fa2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	695a      	ldr	r2, [r3, #20]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f042 0201 	orr.w	r2, r2, #1
 8006fce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2220      	movs	r2, #32
 8006fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	000186a0 	.word	0x000186a0
 8006ffc:	001e847f 	.word	0x001e847f
 8007000:	003d08ff 	.word	0x003d08ff
 8007004:	431bde83 	.word	0x431bde83
 8007008:	10624dd3 	.word	0x10624dd3

0800700c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b088      	sub	sp, #32
 8007010:	af02      	add	r7, sp, #8
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	607a      	str	r2, [r7, #4]
 8007016:	461a      	mov	r2, r3
 8007018:	460b      	mov	r3, r1
 800701a:	817b      	strh	r3, [r7, #10]
 800701c:	4613      	mov	r3, r2
 800701e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007020:	f7fe fba8 	bl	8005774 <HAL_GetTick>
 8007024:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b20      	cmp	r3, #32
 8007030:	f040 80e0 	bne.w	80071f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	2319      	movs	r3, #25
 800703a:	2201      	movs	r2, #1
 800703c:	4970      	ldr	r1, [pc, #448]	; (8007200 <HAL_I2C_Master_Transmit+0x1f4>)
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 fc58 	bl	80078f4 <I2C_WaitOnFlagUntilTimeout>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800704a:	2302      	movs	r3, #2
 800704c:	e0d3      	b.n	80071f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007054:	2b01      	cmp	r3, #1
 8007056:	d101      	bne.n	800705c <HAL_I2C_Master_Transmit+0x50>
 8007058:	2302      	movs	r3, #2
 800705a:	e0cc      	b.n	80071f6 <HAL_I2C_Master_Transmit+0x1ea>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0301 	and.w	r3, r3, #1
 800706e:	2b01      	cmp	r3, #1
 8007070:	d007      	beq.n	8007082 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f042 0201 	orr.w	r2, r2, #1
 8007080:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007090:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2221      	movs	r2, #33	; 0x21
 8007096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2210      	movs	r2, #16
 800709e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	893a      	ldrh	r2, [r7, #8]
 80070b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	4a50      	ldr	r2, [pc, #320]	; (8007204 <HAL_I2C_Master_Transmit+0x1f8>)
 80070c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80070c4:	8979      	ldrh	r1, [r7, #10]
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	6a3a      	ldr	r2, [r7, #32]
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f000 fac2 	bl	8007654 <I2C_MasterRequestWrite>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e08d      	b.n	80071f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070da:	2300      	movs	r3, #0
 80070dc:	613b      	str	r3, [r7, #16]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	613b      	str	r3, [r7, #16]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	613b      	str	r3, [r7, #16]
 80070ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80070f0:	e066      	b.n	80071c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	6a39      	ldr	r1, [r7, #32]
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 fcd2 	bl	8007aa0 <I2C_WaitOnTXEFlagUntilTimeout>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00d      	beq.n	800711e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007106:	2b04      	cmp	r3, #4
 8007108:	d107      	bne.n	800711a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007118:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e06b      	b.n	80071f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	781a      	ldrb	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712e:	1c5a      	adds	r2, r3, #1
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007138:	b29b      	uxth	r3, r3
 800713a:	3b01      	subs	r3, #1
 800713c:	b29a      	uxth	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007146:	3b01      	subs	r3, #1
 8007148:	b29a      	uxth	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	f003 0304 	and.w	r3, r3, #4
 8007158:	2b04      	cmp	r3, #4
 800715a:	d11b      	bne.n	8007194 <HAL_I2C_Master_Transmit+0x188>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007160:	2b00      	cmp	r3, #0
 8007162:	d017      	beq.n	8007194 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007168:	781a      	ldrb	r2, [r3, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007174:	1c5a      	adds	r2, r3, #1
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800717e:	b29b      	uxth	r3, r3
 8007180:	3b01      	subs	r3, #1
 8007182:	b29a      	uxth	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800718c:	3b01      	subs	r3, #1
 800718e:	b29a      	uxth	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	6a39      	ldr	r1, [r7, #32]
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 fcc2 	bl	8007b22 <I2C_WaitOnBTFFlagUntilTimeout>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00d      	beq.n	80071c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a8:	2b04      	cmp	r3, #4
 80071aa:	d107      	bne.n	80071bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e01a      	b.n	80071f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d194      	bne.n	80070f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2220      	movs	r2, #32
 80071dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80071f0:	2300      	movs	r3, #0
 80071f2:	e000      	b.n	80071f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80071f4:	2302      	movs	r3, #2
  }
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3718      	adds	r7, #24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	00100002 	.word	0x00100002
 8007204:	ffff0000 	.word	0xffff0000

08007208 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b08c      	sub	sp, #48	; 0x30
 800720c:	af02      	add	r7, sp, #8
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	607a      	str	r2, [r7, #4]
 8007212:	461a      	mov	r2, r3
 8007214:	460b      	mov	r3, r1
 8007216:	817b      	strh	r3, [r7, #10]
 8007218:	4613      	mov	r3, r2
 800721a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800721c:	f7fe faaa 	bl	8005774 <HAL_GetTick>
 8007220:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b20      	cmp	r3, #32
 800722c:	f040 820b 	bne.w	8007646 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	2319      	movs	r3, #25
 8007236:	2201      	movs	r2, #1
 8007238:	497c      	ldr	r1, [pc, #496]	; (800742c <HAL_I2C_Master_Receive+0x224>)
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 fb5a 	bl	80078f4 <I2C_WaitOnFlagUntilTimeout>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007246:	2302      	movs	r3, #2
 8007248:	e1fe      	b.n	8007648 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007250:	2b01      	cmp	r3, #1
 8007252:	d101      	bne.n	8007258 <HAL_I2C_Master_Receive+0x50>
 8007254:	2302      	movs	r3, #2
 8007256:	e1f7      	b.n	8007648 <HAL_I2C_Master_Receive+0x440>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b01      	cmp	r3, #1
 800726c:	d007      	beq.n	800727e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f042 0201 	orr.w	r2, r2, #1
 800727c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800728c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2222      	movs	r2, #34	; 0x22
 8007292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2210      	movs	r2, #16
 800729a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	893a      	ldrh	r2, [r7, #8]
 80072ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	4a5c      	ldr	r2, [pc, #368]	; (8007430 <HAL_I2C_Master_Receive+0x228>)
 80072be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80072c0:	8979      	ldrh	r1, [r7, #10]
 80072c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f000 fa46 	bl	8007758 <I2C_MasterRequestRead>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e1b8      	b.n	8007648 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d113      	bne.n	8007306 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072de:	2300      	movs	r3, #0
 80072e0:	623b      	str	r3, [r7, #32]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	695b      	ldr	r3, [r3, #20]
 80072e8:	623b      	str	r3, [r7, #32]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	623b      	str	r3, [r7, #32]
 80072f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	e18c      	b.n	8007620 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800730a:	2b01      	cmp	r3, #1
 800730c:	d11b      	bne.n	8007346 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800731c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800731e:	2300      	movs	r3, #0
 8007320:	61fb      	str	r3, [r7, #28]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	61fb      	str	r3, [r7, #28]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	61fb      	str	r3, [r7, #28]
 8007332:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	e16c      	b.n	8007620 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800734a:	2b02      	cmp	r3, #2
 800734c:	d11b      	bne.n	8007386 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800735c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800736c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800736e:	2300      	movs	r3, #0
 8007370:	61bb      	str	r3, [r7, #24]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	61bb      	str	r3, [r7, #24]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	61bb      	str	r3, [r7, #24]
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	e14c      	b.n	8007620 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007394:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007396:	2300      	movs	r3, #0
 8007398:	617b      	str	r3, [r7, #20]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	695b      	ldr	r3, [r3, #20]
 80073a0:	617b      	str	r3, [r7, #20]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	617b      	str	r3, [r7, #20]
 80073aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80073ac:	e138      	b.n	8007620 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	f200 80f1 	bhi.w	800759a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d123      	bne.n	8007408 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f000 fbed 	bl	8007ba4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d001      	beq.n	80073d4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e139      	b.n	8007648 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	691a      	ldr	r2, [r3, #16]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073de:	b2d2      	uxtb	r2, r2
 80073e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e6:	1c5a      	adds	r2, r3, #1
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073f0:	3b01      	subs	r3, #1
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	3b01      	subs	r3, #1
 8007400:	b29a      	uxth	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007406:	e10b      	b.n	8007620 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800740c:	2b02      	cmp	r3, #2
 800740e:	d14e      	bne.n	80074ae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007416:	2200      	movs	r2, #0
 8007418:	4906      	ldr	r1, [pc, #24]	; (8007434 <HAL_I2C_Master_Receive+0x22c>)
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 fa6a 	bl	80078f4 <I2C_WaitOnFlagUntilTimeout>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d008      	beq.n	8007438 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e10e      	b.n	8007648 <HAL_I2C_Master_Receive+0x440>
 800742a:	bf00      	nop
 800742c:	00100002 	.word	0x00100002
 8007430:	ffff0000 	.word	0xffff0000
 8007434:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007446:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	691a      	ldr	r2, [r3, #16]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007452:	b2d2      	uxtb	r2, r2
 8007454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007464:	3b01      	subs	r3, #1
 8007466:	b29a      	uxth	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007470:	b29b      	uxth	r3, r3
 8007472:	3b01      	subs	r3, #1
 8007474:	b29a      	uxth	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	691a      	ldr	r2, [r3, #16]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	b2d2      	uxtb	r2, r2
 8007486:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007496:	3b01      	subs	r3, #1
 8007498:	b29a      	uxth	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	3b01      	subs	r3, #1
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074ac:	e0b8      	b.n	8007620 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b4:	2200      	movs	r2, #0
 80074b6:	4966      	ldr	r1, [pc, #408]	; (8007650 <HAL_I2C_Master_Receive+0x448>)
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f000 fa1b 	bl	80078f4 <I2C_WaitOnFlagUntilTimeout>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e0bf      	b.n	8007648 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	691a      	ldr	r2, [r3, #16]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e2:	b2d2      	uxtb	r2, r2
 80074e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ea:	1c5a      	adds	r2, r3, #1
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074f4:	3b01      	subs	r3, #1
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007500:	b29b      	uxth	r3, r3
 8007502:	3b01      	subs	r3, #1
 8007504:	b29a      	uxth	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	2200      	movs	r2, #0
 8007512:	494f      	ldr	r1, [pc, #316]	; (8007650 <HAL_I2C_Master_Receive+0x448>)
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f000 f9ed 	bl	80078f4 <I2C_WaitOnFlagUntilTimeout>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d001      	beq.n	8007524 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e091      	b.n	8007648 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007532:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	691a      	ldr	r2, [r3, #16]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753e:	b2d2      	uxtb	r2, r2
 8007540:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007546:	1c5a      	adds	r2, r3, #1
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007550:	3b01      	subs	r3, #1
 8007552:	b29a      	uxth	r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800755c:	b29b      	uxth	r3, r3
 800755e:	3b01      	subs	r3, #1
 8007560:	b29a      	uxth	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	691a      	ldr	r2, [r3, #16]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007570:	b2d2      	uxtb	r2, r2
 8007572:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007582:	3b01      	subs	r3, #1
 8007584:	b29a      	uxth	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800758e:	b29b      	uxth	r3, r3
 8007590:	3b01      	subs	r3, #1
 8007592:	b29a      	uxth	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007598:	e042      	b.n	8007620 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800759a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800759c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f000 fb00 	bl	8007ba4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e04c      	b.n	8007648 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	691a      	ldr	r2, [r3, #16]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b8:	b2d2      	uxtb	r2, r2
 80075ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c0:	1c5a      	adds	r2, r3, #1
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ca:	3b01      	subs	r3, #1
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	3b01      	subs	r3, #1
 80075da:	b29a      	uxth	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	f003 0304 	and.w	r3, r3, #4
 80075ea:	2b04      	cmp	r3, #4
 80075ec:	d118      	bne.n	8007620 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	691a      	ldr	r2, [r3, #16]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f8:	b2d2      	uxtb	r2, r2
 80075fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007600:	1c5a      	adds	r2, r3, #1
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800760a:	3b01      	subs	r3, #1
 800760c:	b29a      	uxth	r2, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007616:	b29b      	uxth	r3, r3
 8007618:	3b01      	subs	r3, #1
 800761a:	b29a      	uxth	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007624:	2b00      	cmp	r3, #0
 8007626:	f47f aec2 	bne.w	80073ae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2220      	movs	r2, #32
 800762e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007642:	2300      	movs	r3, #0
 8007644:	e000      	b.n	8007648 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007646:	2302      	movs	r3, #2
  }
}
 8007648:	4618      	mov	r0, r3
 800764a:	3728      	adds	r7, #40	; 0x28
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	00010004 	.word	0x00010004

08007654 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b088      	sub	sp, #32
 8007658:	af02      	add	r7, sp, #8
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	607a      	str	r2, [r7, #4]
 800765e:	603b      	str	r3, [r7, #0]
 8007660:	460b      	mov	r3, r1
 8007662:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007668:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	2b08      	cmp	r3, #8
 800766e:	d006      	beq.n	800767e <I2C_MasterRequestWrite+0x2a>
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d003      	beq.n	800767e <I2C_MasterRequestWrite+0x2a>
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800767c:	d108      	bne.n	8007690 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	e00b      	b.n	80076a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007694:	2b12      	cmp	r3, #18
 8007696:	d107      	bne.n	80076a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 f91d 	bl	80078f4 <I2C_WaitOnFlagUntilTimeout>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00d      	beq.n	80076dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076ce:	d103      	bne.n	80076d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	e035      	b.n	8007748 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076e4:	d108      	bne.n	80076f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80076e6:	897b      	ldrh	r3, [r7, #10]
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	461a      	mov	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80076f4:	611a      	str	r2, [r3, #16]
 80076f6:	e01b      	b.n	8007730 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80076f8:	897b      	ldrh	r3, [r7, #10]
 80076fa:	11db      	asrs	r3, r3, #7
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	f003 0306 	and.w	r3, r3, #6
 8007702:	b2db      	uxtb	r3, r3
 8007704:	f063 030f 	orn	r3, r3, #15
 8007708:	b2da      	uxtb	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	490e      	ldr	r1, [pc, #56]	; (8007750 <I2C_MasterRequestWrite+0xfc>)
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f000 f943 	bl	80079a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e010      	b.n	8007748 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007726:	897b      	ldrh	r3, [r7, #10]
 8007728:	b2da      	uxtb	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	4907      	ldr	r1, [pc, #28]	; (8007754 <I2C_MasterRequestWrite+0x100>)
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f000 f933 	bl	80079a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e000      	b.n	8007748 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3718      	adds	r7, #24
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	00010008 	.word	0x00010008
 8007754:	00010002 	.word	0x00010002

08007758 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b088      	sub	sp, #32
 800775c:	af02      	add	r7, sp, #8
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	607a      	str	r2, [r7, #4]
 8007762:	603b      	str	r3, [r7, #0]
 8007764:	460b      	mov	r3, r1
 8007766:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800777c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	2b08      	cmp	r3, #8
 8007782:	d006      	beq.n	8007792 <I2C_MasterRequestRead+0x3a>
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d003      	beq.n	8007792 <I2C_MasterRequestRead+0x3a>
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007790:	d108      	bne.n	80077a4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	e00b      	b.n	80077bc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a8:	2b11      	cmp	r3, #17
 80077aa:	d107      	bne.n	80077bc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f000 f893 	bl	80078f4 <I2C_WaitOnFlagUntilTimeout>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00d      	beq.n	80077f0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077e2:	d103      	bne.n	80077ec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e079      	b.n	80078e4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077f8:	d108      	bne.n	800780c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80077fa:	897b      	ldrh	r3, [r7, #10]
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	f043 0301 	orr.w	r3, r3, #1
 8007802:	b2da      	uxtb	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	611a      	str	r2, [r3, #16]
 800780a:	e05f      	b.n	80078cc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800780c:	897b      	ldrh	r3, [r7, #10]
 800780e:	11db      	asrs	r3, r3, #7
 8007810:	b2db      	uxtb	r3, r3
 8007812:	f003 0306 	and.w	r3, r3, #6
 8007816:	b2db      	uxtb	r3, r3
 8007818:	f063 030f 	orn	r3, r3, #15
 800781c:	b2da      	uxtb	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	4930      	ldr	r1, [pc, #192]	; (80078ec <I2C_MasterRequestRead+0x194>)
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 f8b9 	bl	80079a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e054      	b.n	80078e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800783a:	897b      	ldrh	r3, [r7, #10]
 800783c:	b2da      	uxtb	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	4929      	ldr	r1, [pc, #164]	; (80078f0 <I2C_MasterRequestRead+0x198>)
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f000 f8a9 	bl	80079a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e044      	b.n	80078e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800785a:	2300      	movs	r3, #0
 800785c:	613b      	str	r3, [r7, #16]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	613b      	str	r3, [r7, #16]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	613b      	str	r3, [r7, #16]
 800786e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800787e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f000 f831 	bl	80078f4 <I2C_WaitOnFlagUntilTimeout>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00d      	beq.n	80078b4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078a6:	d103      	bne.n	80078b0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078ae:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e017      	b.n	80078e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80078b4:	897b      	ldrh	r3, [r7, #10]
 80078b6:	11db      	asrs	r3, r3, #7
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	f003 0306 	and.w	r3, r3, #6
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	f063 030e 	orn	r3, r3, #14
 80078c4:	b2da      	uxtb	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	4907      	ldr	r1, [pc, #28]	; (80078f0 <I2C_MasterRequestRead+0x198>)
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f000 f865 	bl	80079a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e000      	b.n	80078e4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3718      	adds	r7, #24
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	00010008 	.word	0x00010008
 80078f0:	00010002 	.word	0x00010002

080078f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	603b      	str	r3, [r7, #0]
 8007900:	4613      	mov	r3, r2
 8007902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007904:	e025      	b.n	8007952 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790c:	d021      	beq.n	8007952 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800790e:	f7fd ff31 	bl	8005774 <HAL_GetTick>
 8007912:	4602      	mov	r2, r0
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	429a      	cmp	r2, r3
 800791c:	d302      	bcc.n	8007924 <I2C_WaitOnFlagUntilTimeout+0x30>
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d116      	bne.n	8007952 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2220      	movs	r2, #32
 800792e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793e:	f043 0220 	orr.w	r2, r3, #32
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e023      	b.n	800799a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	0c1b      	lsrs	r3, r3, #16
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b01      	cmp	r3, #1
 800795a:	d10d      	bne.n	8007978 <I2C_WaitOnFlagUntilTimeout+0x84>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	43da      	mvns	r2, r3
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	4013      	ands	r3, r2
 8007968:	b29b      	uxth	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	bf0c      	ite	eq
 800796e:	2301      	moveq	r3, #1
 8007970:	2300      	movne	r3, #0
 8007972:	b2db      	uxtb	r3, r3
 8007974:	461a      	mov	r2, r3
 8007976:	e00c      	b.n	8007992 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	43da      	mvns	r2, r3
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	4013      	ands	r3, r2
 8007984:	b29b      	uxth	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	bf0c      	ite	eq
 800798a:	2301      	moveq	r3, #1
 800798c:	2300      	movne	r3, #0
 800798e:	b2db      	uxtb	r3, r3
 8007990:	461a      	mov	r2, r3
 8007992:	79fb      	ldrb	r3, [r7, #7]
 8007994:	429a      	cmp	r2, r3
 8007996:	d0b6      	beq.n	8007906 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b084      	sub	sp, #16
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	60f8      	str	r0, [r7, #12]
 80079aa:	60b9      	str	r1, [r7, #8]
 80079ac:	607a      	str	r2, [r7, #4]
 80079ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80079b0:	e051      	b.n	8007a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079c0:	d123      	bne.n	8007a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80079da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2200      	movs	r2, #0
 80079e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2220      	movs	r2, #32
 80079e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f6:	f043 0204 	orr.w	r2, r3, #4
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e046      	b.n	8007a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a10:	d021      	beq.n	8007a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a12:	f7fd feaf 	bl	8005774 <HAL_GetTick>
 8007a16:	4602      	mov	r2, r0
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d302      	bcc.n	8007a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d116      	bne.n	8007a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2220      	movs	r2, #32
 8007a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a42:	f043 0220 	orr.w	r2, r3, #32
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e020      	b.n	8007a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	0c1b      	lsrs	r3, r3, #16
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d10c      	bne.n	8007a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	43da      	mvns	r2, r3
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	bf14      	ite	ne
 8007a72:	2301      	movne	r3, #1
 8007a74:	2300      	moveq	r3, #0
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	e00b      	b.n	8007a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	43da      	mvns	r2, r3
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	4013      	ands	r3, r2
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	bf14      	ite	ne
 8007a8c:	2301      	movne	r3, #1
 8007a8e:	2300      	moveq	r3, #0
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d18d      	bne.n	80079b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007aac:	e02d      	b.n	8007b0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 f8ce 	bl	8007c50 <I2C_IsAcknowledgeFailed>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e02d      	b.n	8007b1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac4:	d021      	beq.n	8007b0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ac6:	f7fd fe55 	bl	8005774 <HAL_GetTick>
 8007aca:	4602      	mov	r2, r0
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d302      	bcc.n	8007adc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d116      	bne.n	8007b0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2220      	movs	r2, #32
 8007ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af6:	f043 0220 	orr.w	r2, r3, #32
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e007      	b.n	8007b1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	695b      	ldr	r3, [r3, #20]
 8007b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b14:	2b80      	cmp	r3, #128	; 0x80
 8007b16:	d1ca      	bne.n	8007aae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b2e:	e02d      	b.n	8007b8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f000 f88d 	bl	8007c50 <I2C_IsAcknowledgeFailed>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d001      	beq.n	8007b40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e02d      	b.n	8007b9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b46:	d021      	beq.n	8007b8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b48:	f7fd fe14 	bl	8005774 <HAL_GetTick>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d302      	bcc.n	8007b5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d116      	bne.n	8007b8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2220      	movs	r2, #32
 8007b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b78:	f043 0220 	orr.w	r2, r3, #32
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e007      	b.n	8007b9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	f003 0304 	and.w	r3, r3, #4
 8007b96:	2b04      	cmp	r3, #4
 8007b98:	d1ca      	bne.n	8007b30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007bb0:	e042      	b.n	8007c38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	f003 0310 	and.w	r3, r3, #16
 8007bbc:	2b10      	cmp	r3, #16
 8007bbe:	d119      	bne.n	8007bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f06f 0210 	mvn.w	r2, #16
 8007bc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e029      	b.n	8007c48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bf4:	f7fd fdbe 	bl	8005774 <HAL_GetTick>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	1ad3      	subs	r3, r2, r3
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d302      	bcc.n	8007c0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d116      	bne.n	8007c38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2220      	movs	r2, #32
 8007c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c24:	f043 0220 	orr.w	r2, r3, #32
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e007      	b.n	8007c48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c42:	2b40      	cmp	r3, #64	; 0x40
 8007c44:	d1b5      	bne.n	8007bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c66:	d11b      	bne.n	8007ca0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2220      	movs	r2, #32
 8007c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8c:	f043 0204 	orr.w	r2, r3, #4
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e000      	b.n	8007ca2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	370c      	adds	r7, #12
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
	...

08007cb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d101      	bne.n	8007cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e267      	b.n	8008192 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d075      	beq.n	8007dba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007cce:	4b88      	ldr	r3, [pc, #544]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f003 030c 	and.w	r3, r3, #12
 8007cd6:	2b04      	cmp	r3, #4
 8007cd8:	d00c      	beq.n	8007cf4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cda:	4b85      	ldr	r3, [pc, #532]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ce2:	2b08      	cmp	r3, #8
 8007ce4:	d112      	bne.n	8007d0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ce6:	4b82      	ldr	r3, [pc, #520]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cf2:	d10b      	bne.n	8007d0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cf4:	4b7e      	ldr	r3, [pc, #504]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d05b      	beq.n	8007db8 <HAL_RCC_OscConfig+0x108>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d157      	bne.n	8007db8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e242      	b.n	8008192 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d14:	d106      	bne.n	8007d24 <HAL_RCC_OscConfig+0x74>
 8007d16:	4b76      	ldr	r3, [pc, #472]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a75      	ldr	r2, [pc, #468]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d20:	6013      	str	r3, [r2, #0]
 8007d22:	e01d      	b.n	8007d60 <HAL_RCC_OscConfig+0xb0>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d2c:	d10c      	bne.n	8007d48 <HAL_RCC_OscConfig+0x98>
 8007d2e:	4b70      	ldr	r3, [pc, #448]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a6f      	ldr	r2, [pc, #444]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d38:	6013      	str	r3, [r2, #0]
 8007d3a:	4b6d      	ldr	r3, [pc, #436]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a6c      	ldr	r2, [pc, #432]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d44:	6013      	str	r3, [r2, #0]
 8007d46:	e00b      	b.n	8007d60 <HAL_RCC_OscConfig+0xb0>
 8007d48:	4b69      	ldr	r3, [pc, #420]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a68      	ldr	r2, [pc, #416]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d52:	6013      	str	r3, [r2, #0]
 8007d54:	4b66      	ldr	r3, [pc, #408]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a65      	ldr	r2, [pc, #404]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d013      	beq.n	8007d90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d68:	f7fd fd04 	bl	8005774 <HAL_GetTick>
 8007d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d6e:	e008      	b.n	8007d82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d70:	f7fd fd00 	bl	8005774 <HAL_GetTick>
 8007d74:	4602      	mov	r2, r0
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	2b64      	cmp	r3, #100	; 0x64
 8007d7c:	d901      	bls.n	8007d82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e207      	b.n	8008192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d82:	4b5b      	ldr	r3, [pc, #364]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d0f0      	beq.n	8007d70 <HAL_RCC_OscConfig+0xc0>
 8007d8e:	e014      	b.n	8007dba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d90:	f7fd fcf0 	bl	8005774 <HAL_GetTick>
 8007d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d96:	e008      	b.n	8007daa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d98:	f7fd fcec 	bl	8005774 <HAL_GetTick>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	2b64      	cmp	r3, #100	; 0x64
 8007da4:	d901      	bls.n	8007daa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e1f3      	b.n	8008192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007daa:	4b51      	ldr	r3, [pc, #324]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1f0      	bne.n	8007d98 <HAL_RCC_OscConfig+0xe8>
 8007db6:	e000      	b.n	8007dba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0302 	and.w	r3, r3, #2
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d063      	beq.n	8007e8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007dc6:	4b4a      	ldr	r3, [pc, #296]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f003 030c 	and.w	r3, r3, #12
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00b      	beq.n	8007dea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007dd2:	4b47      	ldr	r3, [pc, #284]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007dda:	2b08      	cmp	r3, #8
 8007ddc:	d11c      	bne.n	8007e18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007dde:	4b44      	ldr	r3, [pc, #272]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d116      	bne.n	8007e18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dea:	4b41      	ldr	r3, [pc, #260]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 0302 	and.w	r3, r3, #2
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d005      	beq.n	8007e02 <HAL_RCC_OscConfig+0x152>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d001      	beq.n	8007e02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e1c7      	b.n	8008192 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e02:	4b3b      	ldr	r3, [pc, #236]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	00db      	lsls	r3, r3, #3
 8007e10:	4937      	ldr	r1, [pc, #220]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007e12:	4313      	orrs	r3, r2
 8007e14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e16:	e03a      	b.n	8007e8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d020      	beq.n	8007e62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e20:	4b34      	ldr	r3, [pc, #208]	; (8007ef4 <HAL_RCC_OscConfig+0x244>)
 8007e22:	2201      	movs	r2, #1
 8007e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e26:	f7fd fca5 	bl	8005774 <HAL_GetTick>
 8007e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e2c:	e008      	b.n	8007e40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e2e:	f7fd fca1 	bl	8005774 <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d901      	bls.n	8007e40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e1a8      	b.n	8008192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e40:	4b2b      	ldr	r3, [pc, #172]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0302 	and.w	r3, r3, #2
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d0f0      	beq.n	8007e2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e4c:	4b28      	ldr	r3, [pc, #160]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	00db      	lsls	r3, r3, #3
 8007e5a:	4925      	ldr	r1, [pc, #148]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	600b      	str	r3, [r1, #0]
 8007e60:	e015      	b.n	8007e8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e62:	4b24      	ldr	r3, [pc, #144]	; (8007ef4 <HAL_RCC_OscConfig+0x244>)
 8007e64:	2200      	movs	r2, #0
 8007e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e68:	f7fd fc84 	bl	8005774 <HAL_GetTick>
 8007e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e6e:	e008      	b.n	8007e82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e70:	f7fd fc80 	bl	8005774 <HAL_GetTick>
 8007e74:	4602      	mov	r2, r0
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d901      	bls.n	8007e82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	e187      	b.n	8008192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e82:	4b1b      	ldr	r3, [pc, #108]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 0302 	and.w	r3, r3, #2
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1f0      	bne.n	8007e70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 0308 	and.w	r3, r3, #8
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d036      	beq.n	8007f08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d016      	beq.n	8007ed0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ea2:	4b15      	ldr	r3, [pc, #84]	; (8007ef8 <HAL_RCC_OscConfig+0x248>)
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ea8:	f7fd fc64 	bl	8005774 <HAL_GetTick>
 8007eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007eae:	e008      	b.n	8007ec2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007eb0:	f7fd fc60 	bl	8005774 <HAL_GetTick>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d901      	bls.n	8007ec2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e167      	b.n	8008192 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ec2:	4b0b      	ldr	r3, [pc, #44]	; (8007ef0 <HAL_RCC_OscConfig+0x240>)
 8007ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ec6:	f003 0302 	and.w	r3, r3, #2
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d0f0      	beq.n	8007eb0 <HAL_RCC_OscConfig+0x200>
 8007ece:	e01b      	b.n	8007f08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ed0:	4b09      	ldr	r3, [pc, #36]	; (8007ef8 <HAL_RCC_OscConfig+0x248>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ed6:	f7fd fc4d 	bl	8005774 <HAL_GetTick>
 8007eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007edc:	e00e      	b.n	8007efc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ede:	f7fd fc49 	bl	8005774 <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d907      	bls.n	8007efc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e150      	b.n	8008192 <HAL_RCC_OscConfig+0x4e2>
 8007ef0:	40023800 	.word	0x40023800
 8007ef4:	42470000 	.word	0x42470000
 8007ef8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007efc:	4b88      	ldr	r3, [pc, #544]	; (8008120 <HAL_RCC_OscConfig+0x470>)
 8007efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f00:	f003 0302 	and.w	r3, r3, #2
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1ea      	bne.n	8007ede <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 0304 	and.w	r3, r3, #4
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 8097 	beq.w	8008044 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f16:	2300      	movs	r3, #0
 8007f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f1a:	4b81      	ldr	r3, [pc, #516]	; (8008120 <HAL_RCC_OscConfig+0x470>)
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10f      	bne.n	8007f46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f26:	2300      	movs	r3, #0
 8007f28:	60bb      	str	r3, [r7, #8]
 8007f2a:	4b7d      	ldr	r3, [pc, #500]	; (8008120 <HAL_RCC_OscConfig+0x470>)
 8007f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2e:	4a7c      	ldr	r2, [pc, #496]	; (8008120 <HAL_RCC_OscConfig+0x470>)
 8007f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f34:	6413      	str	r3, [r2, #64]	; 0x40
 8007f36:	4b7a      	ldr	r3, [pc, #488]	; (8008120 <HAL_RCC_OscConfig+0x470>)
 8007f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f3e:	60bb      	str	r3, [r7, #8]
 8007f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f42:	2301      	movs	r3, #1
 8007f44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f46:	4b77      	ldr	r3, [pc, #476]	; (8008124 <HAL_RCC_OscConfig+0x474>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d118      	bne.n	8007f84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f52:	4b74      	ldr	r3, [pc, #464]	; (8008124 <HAL_RCC_OscConfig+0x474>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a73      	ldr	r2, [pc, #460]	; (8008124 <HAL_RCC_OscConfig+0x474>)
 8007f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f5e:	f7fd fc09 	bl	8005774 <HAL_GetTick>
 8007f62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f64:	e008      	b.n	8007f78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f66:	f7fd fc05 	bl	8005774 <HAL_GetTick>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d901      	bls.n	8007f78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e10c      	b.n	8008192 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f78:	4b6a      	ldr	r3, [pc, #424]	; (8008124 <HAL_RCC_OscConfig+0x474>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d0f0      	beq.n	8007f66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d106      	bne.n	8007f9a <HAL_RCC_OscConfig+0x2ea>
 8007f8c:	4b64      	ldr	r3, [pc, #400]	; (8008120 <HAL_RCC_OscConfig+0x470>)
 8007f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f90:	4a63      	ldr	r2, [pc, #396]	; (8008120 <HAL_RCC_OscConfig+0x470>)
 8007f92:	f043 0301 	orr.w	r3, r3, #1
 8007f96:	6713      	str	r3, [r2, #112]	; 0x70
 8007f98:	e01c      	b.n	8007fd4 <HAL_RCC_OscConfig+0x324>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	2b05      	cmp	r3, #5
 8007fa0:	d10c      	bne.n	8007fbc <HAL_RCC_OscConfig+0x30c>
 8007fa2:	4b5f      	ldr	r3, [pc, #380]	; (8008120 <HAL_RCC_OscConfig+0x470>)
 8007fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa6:	4a5e      	ldr	r2, [pc, #376]	; (8008120 <HAL_RCC_OscConfig+0x470>)
 8007fa8:	f043 0304 	orr.w	r3, r3, #4
 8007fac:	6713      	str	r3, [r2, #112]	; 0x70
 8007fae:	4b5c      	ldr	r3, [pc, #368]	; (8008120 <HAL_RCC_OscConfig+0x470>)
 8007fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb2:	4a5b      	ldr	r2, [pc, #364]	; (8008120 <HAL_RCC_OscConfig+0x470>)
 8007fb4:	f043 0301 	orr.w	r3, r3, #1
 8007fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8007fba:	e00b      	b.n	8007fd4 <HAL_RCC_OscConfig+0x324>
 8007fbc:	4b58      	ldr	r3, [pc, #352]	; (8008120 <HAL_RCC_OscConfig+0x470>)
 8007fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc0:	4a57      	ldr	r2, [pc, #348]	; (8008120 <HAL_RCC_OscConfig+0x470>)
 8007fc2:	f023 0301 	bic.w	r3, r3, #1
 8007fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8007fc8:	4b55      	ldr	r3, [pc, #340]	; (8008120 <HAL_RCC_OscConfig+0x470>)
 8007fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fcc:	4a54      	ldr	r2, [pc, #336]	; (8008120 <HAL_RCC_OscConfig+0x470>)
 8007fce:	f023 0304 	bic.w	r3, r3, #4
 8007fd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d015      	beq.n	8008008 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fdc:	f7fd fbca 	bl	8005774 <HAL_GetTick>
 8007fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fe2:	e00a      	b.n	8007ffa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fe4:	f7fd fbc6 	bl	8005774 <HAL_GetTick>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d901      	bls.n	8007ffa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e0cb      	b.n	8008192 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ffa:	4b49      	ldr	r3, [pc, #292]	; (8008120 <HAL_RCC_OscConfig+0x470>)
 8007ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffe:	f003 0302 	and.w	r3, r3, #2
 8008002:	2b00      	cmp	r3, #0
 8008004:	d0ee      	beq.n	8007fe4 <HAL_RCC_OscConfig+0x334>
 8008006:	e014      	b.n	8008032 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008008:	f7fd fbb4 	bl	8005774 <HAL_GetTick>
 800800c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800800e:	e00a      	b.n	8008026 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008010:	f7fd fbb0 	bl	8005774 <HAL_GetTick>
 8008014:	4602      	mov	r2, r0
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	f241 3288 	movw	r2, #5000	; 0x1388
 800801e:	4293      	cmp	r3, r2
 8008020:	d901      	bls.n	8008026 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008022:	2303      	movs	r3, #3
 8008024:	e0b5      	b.n	8008192 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008026:	4b3e      	ldr	r3, [pc, #248]	; (8008120 <HAL_RCC_OscConfig+0x470>)
 8008028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800802a:	f003 0302 	and.w	r3, r3, #2
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1ee      	bne.n	8008010 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008032:	7dfb      	ldrb	r3, [r7, #23]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d105      	bne.n	8008044 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008038:	4b39      	ldr	r3, [pc, #228]	; (8008120 <HAL_RCC_OscConfig+0x470>)
 800803a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803c:	4a38      	ldr	r2, [pc, #224]	; (8008120 <HAL_RCC_OscConfig+0x470>)
 800803e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008042:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 80a1 	beq.w	8008190 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800804e:	4b34      	ldr	r3, [pc, #208]	; (8008120 <HAL_RCC_OscConfig+0x470>)
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	f003 030c 	and.w	r3, r3, #12
 8008056:	2b08      	cmp	r3, #8
 8008058:	d05c      	beq.n	8008114 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	2b02      	cmp	r3, #2
 8008060:	d141      	bne.n	80080e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008062:	4b31      	ldr	r3, [pc, #196]	; (8008128 <HAL_RCC_OscConfig+0x478>)
 8008064:	2200      	movs	r2, #0
 8008066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008068:	f7fd fb84 	bl	8005774 <HAL_GetTick>
 800806c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800806e:	e008      	b.n	8008082 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008070:	f7fd fb80 	bl	8005774 <HAL_GetTick>
 8008074:	4602      	mov	r2, r0
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	2b02      	cmp	r3, #2
 800807c:	d901      	bls.n	8008082 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e087      	b.n	8008192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008082:	4b27      	ldr	r3, [pc, #156]	; (8008120 <HAL_RCC_OscConfig+0x470>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1f0      	bne.n	8008070 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	69da      	ldr	r2, [r3, #28]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a1b      	ldr	r3, [r3, #32]
 8008096:	431a      	orrs	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809c:	019b      	lsls	r3, r3, #6
 800809e:	431a      	orrs	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a4:	085b      	lsrs	r3, r3, #1
 80080a6:	3b01      	subs	r3, #1
 80080a8:	041b      	lsls	r3, r3, #16
 80080aa:	431a      	orrs	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b0:	061b      	lsls	r3, r3, #24
 80080b2:	491b      	ldr	r1, [pc, #108]	; (8008120 <HAL_RCC_OscConfig+0x470>)
 80080b4:	4313      	orrs	r3, r2
 80080b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080b8:	4b1b      	ldr	r3, [pc, #108]	; (8008128 <HAL_RCC_OscConfig+0x478>)
 80080ba:	2201      	movs	r2, #1
 80080bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080be:	f7fd fb59 	bl	8005774 <HAL_GetTick>
 80080c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080c4:	e008      	b.n	80080d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080c6:	f7fd fb55 	bl	8005774 <HAL_GetTick>
 80080ca:	4602      	mov	r2, r0
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d901      	bls.n	80080d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80080d4:	2303      	movs	r3, #3
 80080d6:	e05c      	b.n	8008192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080d8:	4b11      	ldr	r3, [pc, #68]	; (8008120 <HAL_RCC_OscConfig+0x470>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d0f0      	beq.n	80080c6 <HAL_RCC_OscConfig+0x416>
 80080e4:	e054      	b.n	8008190 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080e6:	4b10      	ldr	r3, [pc, #64]	; (8008128 <HAL_RCC_OscConfig+0x478>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080ec:	f7fd fb42 	bl	8005774 <HAL_GetTick>
 80080f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080f2:	e008      	b.n	8008106 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080f4:	f7fd fb3e 	bl	8005774 <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d901      	bls.n	8008106 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008102:	2303      	movs	r3, #3
 8008104:	e045      	b.n	8008192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008106:	4b06      	ldr	r3, [pc, #24]	; (8008120 <HAL_RCC_OscConfig+0x470>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1f0      	bne.n	80080f4 <HAL_RCC_OscConfig+0x444>
 8008112:	e03d      	b.n	8008190 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	2b01      	cmp	r3, #1
 800811a:	d107      	bne.n	800812c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e038      	b.n	8008192 <HAL_RCC_OscConfig+0x4e2>
 8008120:	40023800 	.word	0x40023800
 8008124:	40007000 	.word	0x40007000
 8008128:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800812c:	4b1b      	ldr	r3, [pc, #108]	; (800819c <HAL_RCC_OscConfig+0x4ec>)
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	2b01      	cmp	r3, #1
 8008138:	d028      	beq.n	800818c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008144:	429a      	cmp	r2, r3
 8008146:	d121      	bne.n	800818c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008152:	429a      	cmp	r2, r3
 8008154:	d11a      	bne.n	800818c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800815c:	4013      	ands	r3, r2
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008162:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008164:	4293      	cmp	r3, r2
 8008166:	d111      	bne.n	800818c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008172:	085b      	lsrs	r3, r3, #1
 8008174:	3b01      	subs	r3, #1
 8008176:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008178:	429a      	cmp	r2, r3
 800817a:	d107      	bne.n	800818c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008186:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008188:	429a      	cmp	r2, r3
 800818a:	d001      	beq.n	8008190 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	e000      	b.n	8008192 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3718      	adds	r7, #24
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	40023800 	.word	0x40023800

080081a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	e0cc      	b.n	800834e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80081b4:	4b68      	ldr	r3, [pc, #416]	; (8008358 <HAL_RCC_ClockConfig+0x1b8>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0307 	and.w	r3, r3, #7
 80081bc:	683a      	ldr	r2, [r7, #0]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d90c      	bls.n	80081dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081c2:	4b65      	ldr	r3, [pc, #404]	; (8008358 <HAL_RCC_ClockConfig+0x1b8>)
 80081c4:	683a      	ldr	r2, [r7, #0]
 80081c6:	b2d2      	uxtb	r2, r2
 80081c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081ca:	4b63      	ldr	r3, [pc, #396]	; (8008358 <HAL_RCC_ClockConfig+0x1b8>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 0307 	and.w	r3, r3, #7
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d001      	beq.n	80081dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	e0b8      	b.n	800834e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0302 	and.w	r3, r3, #2
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d020      	beq.n	800822a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 0304 	and.w	r3, r3, #4
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d005      	beq.n	8008200 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80081f4:	4b59      	ldr	r3, [pc, #356]	; (800835c <HAL_RCC_ClockConfig+0x1bc>)
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	4a58      	ldr	r2, [pc, #352]	; (800835c <HAL_RCC_ClockConfig+0x1bc>)
 80081fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80081fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 0308 	and.w	r3, r3, #8
 8008208:	2b00      	cmp	r3, #0
 800820a:	d005      	beq.n	8008218 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800820c:	4b53      	ldr	r3, [pc, #332]	; (800835c <HAL_RCC_ClockConfig+0x1bc>)
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	4a52      	ldr	r2, [pc, #328]	; (800835c <HAL_RCC_ClockConfig+0x1bc>)
 8008212:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008216:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008218:	4b50      	ldr	r3, [pc, #320]	; (800835c <HAL_RCC_ClockConfig+0x1bc>)
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	494d      	ldr	r1, [pc, #308]	; (800835c <HAL_RCC_ClockConfig+0x1bc>)
 8008226:	4313      	orrs	r3, r2
 8008228:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	2b00      	cmp	r3, #0
 8008234:	d044      	beq.n	80082c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d107      	bne.n	800824e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800823e:	4b47      	ldr	r3, [pc, #284]	; (800835c <HAL_RCC_ClockConfig+0x1bc>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008246:	2b00      	cmp	r3, #0
 8008248:	d119      	bne.n	800827e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e07f      	b.n	800834e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	2b02      	cmp	r3, #2
 8008254:	d003      	beq.n	800825e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800825a:	2b03      	cmp	r3, #3
 800825c:	d107      	bne.n	800826e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800825e:	4b3f      	ldr	r3, [pc, #252]	; (800835c <HAL_RCC_ClockConfig+0x1bc>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d109      	bne.n	800827e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e06f      	b.n	800834e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800826e:	4b3b      	ldr	r3, [pc, #236]	; (800835c <HAL_RCC_ClockConfig+0x1bc>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 0302 	and.w	r3, r3, #2
 8008276:	2b00      	cmp	r3, #0
 8008278:	d101      	bne.n	800827e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e067      	b.n	800834e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800827e:	4b37      	ldr	r3, [pc, #220]	; (800835c <HAL_RCC_ClockConfig+0x1bc>)
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	f023 0203 	bic.w	r2, r3, #3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	4934      	ldr	r1, [pc, #208]	; (800835c <HAL_RCC_ClockConfig+0x1bc>)
 800828c:	4313      	orrs	r3, r2
 800828e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008290:	f7fd fa70 	bl	8005774 <HAL_GetTick>
 8008294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008296:	e00a      	b.n	80082ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008298:	f7fd fa6c 	bl	8005774 <HAL_GetTick>
 800829c:	4602      	mov	r2, r0
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d901      	bls.n	80082ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e04f      	b.n	800834e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082ae:	4b2b      	ldr	r3, [pc, #172]	; (800835c <HAL_RCC_ClockConfig+0x1bc>)
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	f003 020c 	and.w	r2, r3, #12
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	429a      	cmp	r2, r3
 80082be:	d1eb      	bne.n	8008298 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80082c0:	4b25      	ldr	r3, [pc, #148]	; (8008358 <HAL_RCC_ClockConfig+0x1b8>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0307 	and.w	r3, r3, #7
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d20c      	bcs.n	80082e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082ce:	4b22      	ldr	r3, [pc, #136]	; (8008358 <HAL_RCC_ClockConfig+0x1b8>)
 80082d0:	683a      	ldr	r2, [r7, #0]
 80082d2:	b2d2      	uxtb	r2, r2
 80082d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082d6:	4b20      	ldr	r3, [pc, #128]	; (8008358 <HAL_RCC_ClockConfig+0x1b8>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 0307 	and.w	r3, r3, #7
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d001      	beq.n	80082e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e032      	b.n	800834e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 0304 	and.w	r3, r3, #4
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d008      	beq.n	8008306 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082f4:	4b19      	ldr	r3, [pc, #100]	; (800835c <HAL_RCC_ClockConfig+0x1bc>)
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	4916      	ldr	r1, [pc, #88]	; (800835c <HAL_RCC_ClockConfig+0x1bc>)
 8008302:	4313      	orrs	r3, r2
 8008304:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 0308 	and.w	r3, r3, #8
 800830e:	2b00      	cmp	r3, #0
 8008310:	d009      	beq.n	8008326 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008312:	4b12      	ldr	r3, [pc, #72]	; (800835c <HAL_RCC_ClockConfig+0x1bc>)
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	00db      	lsls	r3, r3, #3
 8008320:	490e      	ldr	r1, [pc, #56]	; (800835c <HAL_RCC_ClockConfig+0x1bc>)
 8008322:	4313      	orrs	r3, r2
 8008324:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008326:	f000 f821 	bl	800836c <HAL_RCC_GetSysClockFreq>
 800832a:	4602      	mov	r2, r0
 800832c:	4b0b      	ldr	r3, [pc, #44]	; (800835c <HAL_RCC_ClockConfig+0x1bc>)
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	091b      	lsrs	r3, r3, #4
 8008332:	f003 030f 	and.w	r3, r3, #15
 8008336:	490a      	ldr	r1, [pc, #40]	; (8008360 <HAL_RCC_ClockConfig+0x1c0>)
 8008338:	5ccb      	ldrb	r3, [r1, r3]
 800833a:	fa22 f303 	lsr.w	r3, r2, r3
 800833e:	4a09      	ldr	r2, [pc, #36]	; (8008364 <HAL_RCC_ClockConfig+0x1c4>)
 8008340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008342:	4b09      	ldr	r3, [pc, #36]	; (8008368 <HAL_RCC_ClockConfig+0x1c8>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4618      	mov	r0, r3
 8008348:	f7fd f9d0 	bl	80056ec <HAL_InitTick>

  return HAL_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	40023c00 	.word	0x40023c00
 800835c:	40023800 	.word	0x40023800
 8008360:	0800dc00 	.word	0x0800dc00
 8008364:	200003b0 	.word	0x200003b0
 8008368:	200003b4 	.word	0x200003b4

0800836c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800836c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008370:	b094      	sub	sp, #80	; 0x50
 8008372:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008374:	2300      	movs	r3, #0
 8008376:	647b      	str	r3, [r7, #68]	; 0x44
 8008378:	2300      	movs	r3, #0
 800837a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800837c:	2300      	movs	r3, #0
 800837e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008380:	2300      	movs	r3, #0
 8008382:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008384:	4b79      	ldr	r3, [pc, #484]	; (800856c <HAL_RCC_GetSysClockFreq+0x200>)
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	f003 030c 	and.w	r3, r3, #12
 800838c:	2b08      	cmp	r3, #8
 800838e:	d00d      	beq.n	80083ac <HAL_RCC_GetSysClockFreq+0x40>
 8008390:	2b08      	cmp	r3, #8
 8008392:	f200 80e1 	bhi.w	8008558 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008396:	2b00      	cmp	r3, #0
 8008398:	d002      	beq.n	80083a0 <HAL_RCC_GetSysClockFreq+0x34>
 800839a:	2b04      	cmp	r3, #4
 800839c:	d003      	beq.n	80083a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800839e:	e0db      	b.n	8008558 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80083a0:	4b73      	ldr	r3, [pc, #460]	; (8008570 <HAL_RCC_GetSysClockFreq+0x204>)
 80083a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80083a4:	e0db      	b.n	800855e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80083a6:	4b73      	ldr	r3, [pc, #460]	; (8008574 <HAL_RCC_GetSysClockFreq+0x208>)
 80083a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80083aa:	e0d8      	b.n	800855e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80083ac:	4b6f      	ldr	r3, [pc, #444]	; (800856c <HAL_RCC_GetSysClockFreq+0x200>)
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80083b6:	4b6d      	ldr	r3, [pc, #436]	; (800856c <HAL_RCC_GetSysClockFreq+0x200>)
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d063      	beq.n	800848a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083c2:	4b6a      	ldr	r3, [pc, #424]	; (800856c <HAL_RCC_GetSysClockFreq+0x200>)
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	099b      	lsrs	r3, r3, #6
 80083c8:	2200      	movs	r2, #0
 80083ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80083cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80083ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083d4:	633b      	str	r3, [r7, #48]	; 0x30
 80083d6:	2300      	movs	r3, #0
 80083d8:	637b      	str	r3, [r7, #52]	; 0x34
 80083da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80083de:	4622      	mov	r2, r4
 80083e0:	462b      	mov	r3, r5
 80083e2:	f04f 0000 	mov.w	r0, #0
 80083e6:	f04f 0100 	mov.w	r1, #0
 80083ea:	0159      	lsls	r1, r3, #5
 80083ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80083f0:	0150      	lsls	r0, r2, #5
 80083f2:	4602      	mov	r2, r0
 80083f4:	460b      	mov	r3, r1
 80083f6:	4621      	mov	r1, r4
 80083f8:	1a51      	subs	r1, r2, r1
 80083fa:	6139      	str	r1, [r7, #16]
 80083fc:	4629      	mov	r1, r5
 80083fe:	eb63 0301 	sbc.w	r3, r3, r1
 8008402:	617b      	str	r3, [r7, #20]
 8008404:	f04f 0200 	mov.w	r2, #0
 8008408:	f04f 0300 	mov.w	r3, #0
 800840c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008410:	4659      	mov	r1, fp
 8008412:	018b      	lsls	r3, r1, #6
 8008414:	4651      	mov	r1, sl
 8008416:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800841a:	4651      	mov	r1, sl
 800841c:	018a      	lsls	r2, r1, #6
 800841e:	4651      	mov	r1, sl
 8008420:	ebb2 0801 	subs.w	r8, r2, r1
 8008424:	4659      	mov	r1, fp
 8008426:	eb63 0901 	sbc.w	r9, r3, r1
 800842a:	f04f 0200 	mov.w	r2, #0
 800842e:	f04f 0300 	mov.w	r3, #0
 8008432:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008436:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800843a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800843e:	4690      	mov	r8, r2
 8008440:	4699      	mov	r9, r3
 8008442:	4623      	mov	r3, r4
 8008444:	eb18 0303 	adds.w	r3, r8, r3
 8008448:	60bb      	str	r3, [r7, #8]
 800844a:	462b      	mov	r3, r5
 800844c:	eb49 0303 	adc.w	r3, r9, r3
 8008450:	60fb      	str	r3, [r7, #12]
 8008452:	f04f 0200 	mov.w	r2, #0
 8008456:	f04f 0300 	mov.w	r3, #0
 800845a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800845e:	4629      	mov	r1, r5
 8008460:	024b      	lsls	r3, r1, #9
 8008462:	4621      	mov	r1, r4
 8008464:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008468:	4621      	mov	r1, r4
 800846a:	024a      	lsls	r2, r1, #9
 800846c:	4610      	mov	r0, r2
 800846e:	4619      	mov	r1, r3
 8008470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008472:	2200      	movs	r2, #0
 8008474:	62bb      	str	r3, [r7, #40]	; 0x28
 8008476:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008478:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800847c:	f7f8 fb90 	bl	8000ba0 <__aeabi_uldivmod>
 8008480:	4602      	mov	r2, r0
 8008482:	460b      	mov	r3, r1
 8008484:	4613      	mov	r3, r2
 8008486:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008488:	e058      	b.n	800853c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800848a:	4b38      	ldr	r3, [pc, #224]	; (800856c <HAL_RCC_GetSysClockFreq+0x200>)
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	099b      	lsrs	r3, r3, #6
 8008490:	2200      	movs	r2, #0
 8008492:	4618      	mov	r0, r3
 8008494:	4611      	mov	r1, r2
 8008496:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800849a:	623b      	str	r3, [r7, #32]
 800849c:	2300      	movs	r3, #0
 800849e:	627b      	str	r3, [r7, #36]	; 0x24
 80084a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80084a4:	4642      	mov	r2, r8
 80084a6:	464b      	mov	r3, r9
 80084a8:	f04f 0000 	mov.w	r0, #0
 80084ac:	f04f 0100 	mov.w	r1, #0
 80084b0:	0159      	lsls	r1, r3, #5
 80084b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80084b6:	0150      	lsls	r0, r2, #5
 80084b8:	4602      	mov	r2, r0
 80084ba:	460b      	mov	r3, r1
 80084bc:	4641      	mov	r1, r8
 80084be:	ebb2 0a01 	subs.w	sl, r2, r1
 80084c2:	4649      	mov	r1, r9
 80084c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80084c8:	f04f 0200 	mov.w	r2, #0
 80084cc:	f04f 0300 	mov.w	r3, #0
 80084d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80084d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80084d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80084dc:	ebb2 040a 	subs.w	r4, r2, sl
 80084e0:	eb63 050b 	sbc.w	r5, r3, fp
 80084e4:	f04f 0200 	mov.w	r2, #0
 80084e8:	f04f 0300 	mov.w	r3, #0
 80084ec:	00eb      	lsls	r3, r5, #3
 80084ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084f2:	00e2      	lsls	r2, r4, #3
 80084f4:	4614      	mov	r4, r2
 80084f6:	461d      	mov	r5, r3
 80084f8:	4643      	mov	r3, r8
 80084fa:	18e3      	adds	r3, r4, r3
 80084fc:	603b      	str	r3, [r7, #0]
 80084fe:	464b      	mov	r3, r9
 8008500:	eb45 0303 	adc.w	r3, r5, r3
 8008504:	607b      	str	r3, [r7, #4]
 8008506:	f04f 0200 	mov.w	r2, #0
 800850a:	f04f 0300 	mov.w	r3, #0
 800850e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008512:	4629      	mov	r1, r5
 8008514:	028b      	lsls	r3, r1, #10
 8008516:	4621      	mov	r1, r4
 8008518:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800851c:	4621      	mov	r1, r4
 800851e:	028a      	lsls	r2, r1, #10
 8008520:	4610      	mov	r0, r2
 8008522:	4619      	mov	r1, r3
 8008524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008526:	2200      	movs	r2, #0
 8008528:	61bb      	str	r3, [r7, #24]
 800852a:	61fa      	str	r2, [r7, #28]
 800852c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008530:	f7f8 fb36 	bl	8000ba0 <__aeabi_uldivmod>
 8008534:	4602      	mov	r2, r0
 8008536:	460b      	mov	r3, r1
 8008538:	4613      	mov	r3, r2
 800853a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800853c:	4b0b      	ldr	r3, [pc, #44]	; (800856c <HAL_RCC_GetSysClockFreq+0x200>)
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	0c1b      	lsrs	r3, r3, #16
 8008542:	f003 0303 	and.w	r3, r3, #3
 8008546:	3301      	adds	r3, #1
 8008548:	005b      	lsls	r3, r3, #1
 800854a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800854c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800854e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008550:	fbb2 f3f3 	udiv	r3, r2, r3
 8008554:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008556:	e002      	b.n	800855e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008558:	4b05      	ldr	r3, [pc, #20]	; (8008570 <HAL_RCC_GetSysClockFreq+0x204>)
 800855a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800855c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800855e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008560:	4618      	mov	r0, r3
 8008562:	3750      	adds	r7, #80	; 0x50
 8008564:	46bd      	mov	sp, r7
 8008566:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800856a:	bf00      	nop
 800856c:	40023800 	.word	0x40023800
 8008570:	00f42400 	.word	0x00f42400
 8008574:	007a1200 	.word	0x007a1200

08008578 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008578:	b480      	push	{r7}
 800857a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800857c:	4b03      	ldr	r3, [pc, #12]	; (800858c <HAL_RCC_GetHCLKFreq+0x14>)
 800857e:	681b      	ldr	r3, [r3, #0]
}
 8008580:	4618      	mov	r0, r3
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	200003b0 	.word	0x200003b0

08008590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008594:	f7ff fff0 	bl	8008578 <HAL_RCC_GetHCLKFreq>
 8008598:	4602      	mov	r2, r0
 800859a:	4b05      	ldr	r3, [pc, #20]	; (80085b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	0a9b      	lsrs	r3, r3, #10
 80085a0:	f003 0307 	and.w	r3, r3, #7
 80085a4:	4903      	ldr	r1, [pc, #12]	; (80085b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085a6:	5ccb      	ldrb	r3, [r1, r3]
 80085a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	40023800 	.word	0x40023800
 80085b4:	0800dc10 	.word	0x0800dc10

080085b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80085bc:	f7ff ffdc 	bl	8008578 <HAL_RCC_GetHCLKFreq>
 80085c0:	4602      	mov	r2, r0
 80085c2:	4b05      	ldr	r3, [pc, #20]	; (80085d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	0b5b      	lsrs	r3, r3, #13
 80085c8:	f003 0307 	and.w	r3, r3, #7
 80085cc:	4903      	ldr	r1, [pc, #12]	; (80085dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80085ce:	5ccb      	ldrb	r3, [r1, r3]
 80085d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	40023800 	.word	0x40023800
 80085dc:	0800dc10 	.word	0x0800dc10

080085e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d101      	bne.n	80085f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e04c      	b.n	800868c <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d111      	bne.n	8008622 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f001 fc0c 	bl	8009e24 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008610:	2b00      	cmp	r3, #0
 8008612:	d102      	bne.n	800861a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a1f      	ldr	r2, [pc, #124]	; (8008694 <HAL_TIM_Base_Init+0xb4>)
 8008618:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2202      	movs	r2, #2
 8008626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	3304      	adds	r3, #4
 8008632:	4619      	mov	r1, r3
 8008634:	4610      	mov	r0, r2
 8008636:	f001 f929 	bl	800988c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2201      	movs	r2, #1
 800863e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2201      	movs	r2, #1
 8008656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2201      	movs	r2, #1
 800866e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2201      	movs	r2, #1
 8008676:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3708      	adds	r7, #8
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	0800527d 	.word	0x0800527d

08008698 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d001      	beq.n	80086b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e03c      	b.n	800872a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2202      	movs	r2, #2
 80086b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a1e      	ldr	r2, [pc, #120]	; (8008738 <HAL_TIM_Base_Start+0xa0>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d018      	beq.n	80086f4 <HAL_TIM_Base_Start+0x5c>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ca:	d013      	beq.n	80086f4 <HAL_TIM_Base_Start+0x5c>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a1a      	ldr	r2, [pc, #104]	; (800873c <HAL_TIM_Base_Start+0xa4>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d00e      	beq.n	80086f4 <HAL_TIM_Base_Start+0x5c>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a19      	ldr	r2, [pc, #100]	; (8008740 <HAL_TIM_Base_Start+0xa8>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d009      	beq.n	80086f4 <HAL_TIM_Base_Start+0x5c>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a17      	ldr	r2, [pc, #92]	; (8008744 <HAL_TIM_Base_Start+0xac>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d004      	beq.n	80086f4 <HAL_TIM_Base_Start+0x5c>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a16      	ldr	r2, [pc, #88]	; (8008748 <HAL_TIM_Base_Start+0xb0>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d111      	bne.n	8008718 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	f003 0307 	and.w	r3, r3, #7
 80086fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2b06      	cmp	r3, #6
 8008704:	d010      	beq.n	8008728 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f042 0201 	orr.w	r2, r2, #1
 8008714:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008716:	e007      	b.n	8008728 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f042 0201 	orr.w	r2, r2, #1
 8008726:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3714      	adds	r7, #20
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	40010000 	.word	0x40010000
 800873c:	40000400 	.word	0x40000400
 8008740:	40000800 	.word	0x40000800
 8008744:	40000c00 	.word	0x40000c00
 8008748:	40014000 	.word	0x40014000

0800874c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800875a:	b2db      	uxtb	r3, r3
 800875c:	2b01      	cmp	r3, #1
 800875e:	d001      	beq.n	8008764 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	e044      	b.n	80087ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2202      	movs	r2, #2
 8008768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68da      	ldr	r2, [r3, #12]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f042 0201 	orr.w	r2, r2, #1
 800877a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a1e      	ldr	r2, [pc, #120]	; (80087fc <HAL_TIM_Base_Start_IT+0xb0>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d018      	beq.n	80087b8 <HAL_TIM_Base_Start_IT+0x6c>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800878e:	d013      	beq.n	80087b8 <HAL_TIM_Base_Start_IT+0x6c>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a1a      	ldr	r2, [pc, #104]	; (8008800 <HAL_TIM_Base_Start_IT+0xb4>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d00e      	beq.n	80087b8 <HAL_TIM_Base_Start_IT+0x6c>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a19      	ldr	r2, [pc, #100]	; (8008804 <HAL_TIM_Base_Start_IT+0xb8>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d009      	beq.n	80087b8 <HAL_TIM_Base_Start_IT+0x6c>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a17      	ldr	r2, [pc, #92]	; (8008808 <HAL_TIM_Base_Start_IT+0xbc>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d004      	beq.n	80087b8 <HAL_TIM_Base_Start_IT+0x6c>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a16      	ldr	r2, [pc, #88]	; (800880c <HAL_TIM_Base_Start_IT+0xc0>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d111      	bne.n	80087dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	f003 0307 	and.w	r3, r3, #7
 80087c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2b06      	cmp	r3, #6
 80087c8:	d010      	beq.n	80087ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f042 0201 	orr.w	r2, r2, #1
 80087d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087da:	e007      	b.n	80087ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f042 0201 	orr.w	r2, r2, #1
 80087ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3714      	adds	r7, #20
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	40010000 	.word	0x40010000
 8008800:	40000400 	.word	0x40000400
 8008804:	40000800 	.word	0x40000800
 8008808:	40000c00 	.word	0x40000c00
 800880c:	40014000 	.word	0x40014000

08008810 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d101      	bne.n	8008822 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	e04c      	b.n	80088bc <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	d111      	bne.n	8008852 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f001 faf4 	bl	8009e24 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008840:	2b00      	cmp	r3, #0
 8008842:	d102      	bne.n	800884a <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4a1f      	ldr	r2, [pc, #124]	; (80088c4 <HAL_TIM_OC_Init+0xb4>)
 8008848:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2202      	movs	r2, #2
 8008856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	3304      	adds	r3, #4
 8008862:	4619      	mov	r1, r3
 8008864:	4610      	mov	r0, r2
 8008866:	f001 f811 	bl	800988c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2201      	movs	r2, #1
 800886e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2201      	movs	r2, #1
 800887e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2201      	movs	r2, #1
 8008886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2201      	movs	r2, #1
 800888e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2201      	movs	r2, #1
 8008896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2201      	movs	r2, #1
 800889e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2201      	movs	r2, #1
 80088a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	080088c9 	.word	0x080088c9

080088c8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d101      	bne.n	80088ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e04c      	b.n	8008988 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d111      	bne.n	800891e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f001 fa8e 	bl	8009e24 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800890c:	2b00      	cmp	r3, #0
 800890e:	d102      	bne.n	8008916 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a1f      	ldr	r2, [pc, #124]	; (8008990 <HAL_TIM_PWM_Init+0xb4>)
 8008914:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2202      	movs	r2, #2
 8008922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	3304      	adds	r3, #4
 800892e:	4619      	mov	r1, r3
 8008930:	4610      	mov	r0, r2
 8008932:	f000 ffab 	bl	800988c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2201      	movs	r2, #1
 800893a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2201      	movs	r2, #1
 8008942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2201      	movs	r2, #1
 800897a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	08008995 	.word	0x08008995

08008994 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800899c:	bf00      	nop
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d109      	bne.n	80089cc <HAL_TIM_PWM_Start+0x24>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	bf14      	ite	ne
 80089c4:	2301      	movne	r3, #1
 80089c6:	2300      	moveq	r3, #0
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	e022      	b.n	8008a12 <HAL_TIM_PWM_Start+0x6a>
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	2b04      	cmp	r3, #4
 80089d0:	d109      	bne.n	80089e6 <HAL_TIM_PWM_Start+0x3e>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	2b01      	cmp	r3, #1
 80089dc:	bf14      	ite	ne
 80089de:	2301      	movne	r3, #1
 80089e0:	2300      	moveq	r3, #0
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	e015      	b.n	8008a12 <HAL_TIM_PWM_Start+0x6a>
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	2b08      	cmp	r3, #8
 80089ea:	d109      	bne.n	8008a00 <HAL_TIM_PWM_Start+0x58>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	bf14      	ite	ne
 80089f8:	2301      	movne	r3, #1
 80089fa:	2300      	moveq	r3, #0
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	e008      	b.n	8008a12 <HAL_TIM_PWM_Start+0x6a>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	bf14      	ite	ne
 8008a0c:	2301      	movne	r3, #1
 8008a0e:	2300      	moveq	r3, #0
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e068      	b.n	8008aec <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d104      	bne.n	8008a2a <HAL_TIM_PWM_Start+0x82>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2202      	movs	r2, #2
 8008a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a28:	e013      	b.n	8008a52 <HAL_TIM_PWM_Start+0xaa>
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	2b04      	cmp	r3, #4
 8008a2e:	d104      	bne.n	8008a3a <HAL_TIM_PWM_Start+0x92>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2202      	movs	r2, #2
 8008a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a38:	e00b      	b.n	8008a52 <HAL_TIM_PWM_Start+0xaa>
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	2b08      	cmp	r3, #8
 8008a3e:	d104      	bne.n	8008a4a <HAL_TIM_PWM_Start+0xa2>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2202      	movs	r2, #2
 8008a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a48:	e003      	b.n	8008a52 <HAL_TIM_PWM_Start+0xaa>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2202      	movs	r2, #2
 8008a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2201      	movs	r2, #1
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f001 f9bc 	bl	8009dd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a23      	ldr	r2, [pc, #140]	; (8008af4 <HAL_TIM_PWM_Start+0x14c>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d107      	bne.n	8008a7a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a1d      	ldr	r2, [pc, #116]	; (8008af4 <HAL_TIM_PWM_Start+0x14c>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d018      	beq.n	8008ab6 <HAL_TIM_PWM_Start+0x10e>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a8c:	d013      	beq.n	8008ab6 <HAL_TIM_PWM_Start+0x10e>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a19      	ldr	r2, [pc, #100]	; (8008af8 <HAL_TIM_PWM_Start+0x150>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d00e      	beq.n	8008ab6 <HAL_TIM_PWM_Start+0x10e>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a17      	ldr	r2, [pc, #92]	; (8008afc <HAL_TIM_PWM_Start+0x154>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d009      	beq.n	8008ab6 <HAL_TIM_PWM_Start+0x10e>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a16      	ldr	r2, [pc, #88]	; (8008b00 <HAL_TIM_PWM_Start+0x158>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d004      	beq.n	8008ab6 <HAL_TIM_PWM_Start+0x10e>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a14      	ldr	r2, [pc, #80]	; (8008b04 <HAL_TIM_PWM_Start+0x15c>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d111      	bne.n	8008ada <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	f003 0307 	and.w	r3, r3, #7
 8008ac0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2b06      	cmp	r3, #6
 8008ac6:	d010      	beq.n	8008aea <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f042 0201 	orr.w	r2, r2, #1
 8008ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ad8:	e007      	b.n	8008aea <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f042 0201 	orr.w	r2, r2, #1
 8008ae8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	40010000 	.word	0x40010000
 8008af8:	40000400 	.word	0x40000400
 8008afc:	40000800 	.word	0x40000800
 8008b00:	40000c00 	.word	0x40000c00
 8008b04:	40014000 	.word	0x40014000

08008b08 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d101      	bne.n	8008b1c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e04c      	b.n	8008bb6 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d111      	bne.n	8008b4c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f001 f977 	bl	8009e24 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d102      	bne.n	8008b44 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a1f      	ldr	r2, [pc, #124]	; (8008bc0 <HAL_TIM_OnePulse_Init+0xb8>)
 8008b42:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2202      	movs	r2, #2
 8008b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	4610      	mov	r0, r2
 8008b60:	f000 fe94 	bl	800988c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f022 0208 	bic.w	r2, r2, #8
 8008b72:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	6819      	ldr	r1, [r3, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	683a      	ldr	r2, [r7, #0]
 8008b80:	430a      	orrs	r2, r1
 8008b82:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3708      	adds	r7, #8
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	08008bc5 	.word	0x08008bc5

08008bc4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008be8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008bf0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008bf8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008c00:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c02:	7bfb      	ldrb	r3, [r7, #15]
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d108      	bne.n	8008c1a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c08:	7bbb      	ldrb	r3, [r7, #14]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d105      	bne.n	8008c1a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c0e:	7b7b      	ldrb	r3, [r7, #13]
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d102      	bne.n	8008c1a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c14:	7b3b      	ldrb	r3, [r7, #12]
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d001      	beq.n	8008c1e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e03b      	b.n	8008c96 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2202      	movs	r2, #2
 8008c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2202      	movs	r2, #2
 8008c2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2202      	movs	r2, #2
 8008c32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2202      	movs	r2, #2
 8008c3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	68da      	ldr	r2, [r3, #12]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f042 0202 	orr.w	r2, r2, #2
 8008c4c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68da      	ldr	r2, [r3, #12]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f042 0204 	orr.w	r2, r2, #4
 8008c5c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2201      	movs	r2, #1
 8008c64:	2100      	movs	r1, #0
 8008c66:	4618      	mov	r0, r3
 8008c68:	f001 f8b6 	bl	8009dd8 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2201      	movs	r2, #1
 8008c72:	2104      	movs	r1, #4
 8008c74:	4618      	mov	r0, r3
 8008c76:	f001 f8af 	bl	8009dd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a08      	ldr	r2, [pc, #32]	; (8008ca0 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d107      	bne.n	8008c94 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c92:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	40010000 	.word	0x40010000

08008ca4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b086      	sub	sp, #24
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d101      	bne.n	8008cb8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e0a2      	b.n	8008dfe <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d111      	bne.n	8008ce8 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f001 f8a9 	bl	8009e24 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d102      	bne.n	8008ce0 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a4a      	ldr	r2, [pc, #296]	; (8008e08 <HAL_TIM_Encoder_Init+0x164>)
 8008cde:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2202      	movs	r2, #2
 8008cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	6812      	ldr	r2, [r2, #0]
 8008cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cfe:	f023 0307 	bic.w	r3, r3, #7
 8008d02:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	4610      	mov	r0, r2
 8008d10:	f000 fdbc 	bl	800988c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	699b      	ldr	r3, [r3, #24]
 8008d22:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	6a1b      	ldr	r3, [r3, #32]
 8008d2a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	697a      	ldr	r2, [r7, #20]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d3c:	f023 0303 	bic.w	r3, r3, #3
 8008d40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	689a      	ldr	r2, [r3, #8]
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	699b      	ldr	r3, [r3, #24]
 8008d4a:	021b      	lsls	r3, r3, #8
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008d5a:	f023 030c 	bic.w	r3, r3, #12
 8008d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	68da      	ldr	r2, [r3, #12]
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	69db      	ldr	r3, [r3, #28]
 8008d74:	021b      	lsls	r3, r3, #8
 8008d76:	4313      	orrs	r3, r2
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	691b      	ldr	r3, [r3, #16]
 8008d82:	011a      	lsls	r2, r3, #4
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	6a1b      	ldr	r3, [r3, #32]
 8008d88:	031b      	lsls	r3, r3, #12
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008d98:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008da0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	685a      	ldr	r2, [r3, #4]
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	695b      	ldr	r3, [r3, #20]
 8008daa:	011b      	lsls	r3, r3, #4
 8008dac:	4313      	orrs	r3, r2
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	697a      	ldr	r2, [r7, #20]
 8008dba:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	693a      	ldr	r2, [r7, #16]
 8008dc2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3718      	adds	r7, #24
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	080051f1 	.word	0x080051f1

08008e0c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e1c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008e24:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e2c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e34:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d110      	bne.n	8008e5e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e3c:	7bfb      	ldrb	r3, [r7, #15]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d102      	bne.n	8008e48 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e42:	7b7b      	ldrb	r3, [r7, #13]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d001      	beq.n	8008e4c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e069      	b.n	8008f20 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2202      	movs	r2, #2
 8008e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e5c:	e031      	b.n	8008ec2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	2b04      	cmp	r3, #4
 8008e62:	d110      	bne.n	8008e86 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e64:	7bbb      	ldrb	r3, [r7, #14]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d102      	bne.n	8008e70 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e6a:	7b3b      	ldrb	r3, [r7, #12]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d001      	beq.n	8008e74 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	e055      	b.n	8008f20 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2202      	movs	r2, #2
 8008e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2202      	movs	r2, #2
 8008e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e84:	e01d      	b.n	8008ec2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e86:	7bfb      	ldrb	r3, [r7, #15]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d108      	bne.n	8008e9e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e8c:	7bbb      	ldrb	r3, [r7, #14]
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d105      	bne.n	8008e9e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e92:	7b7b      	ldrb	r3, [r7, #13]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d102      	bne.n	8008e9e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e98:	7b3b      	ldrb	r3, [r7, #12]
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d001      	beq.n	8008ea2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e03e      	b.n	8008f20 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2202      	movs	r2, #2
 8008ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2202      	movs	r2, #2
 8008eae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2202      	movs	r2, #2
 8008eb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2202      	movs	r2, #2
 8008ebe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d003      	beq.n	8008ed0 <HAL_TIM_Encoder_Start+0xc4>
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	2b04      	cmp	r3, #4
 8008ecc:	d008      	beq.n	8008ee0 <HAL_TIM_Encoder_Start+0xd4>
 8008ece:	e00f      	b.n	8008ef0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f000 ff7d 	bl	8009dd8 <TIM_CCxChannelCmd>
      break;
 8008ede:	e016      	b.n	8008f0e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	2104      	movs	r1, #4
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f000 ff75 	bl	8009dd8 <TIM_CCxChannelCmd>
      break;
 8008eee:	e00e      	b.n	8008f0e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f000 ff6d 	bl	8009dd8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2201      	movs	r2, #1
 8008f04:	2104      	movs	r1, #4
 8008f06:	4618      	mov	r0, r3
 8008f08:	f000 ff66 	bl	8009dd8 <TIM_CCxChannelCmd>
      break;
 8008f0c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f042 0201 	orr.w	r2, r2, #1
 8008f1c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	f003 0302 	and.w	r3, r3, #2
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d128      	bne.n	8008f90 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	f003 0302 	and.w	r3, r3, #2
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d121      	bne.n	8008f90 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f06f 0202 	mvn.w	r2, #2
 8008f54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	f003 0303 	and.w	r3, r3, #3
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d005      	beq.n	8008f76 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	4798      	blx	r3
 8008f74:	e009      	b.n	8008f8a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	f003 0304 	and.w	r3, r3, #4
 8008f9a:	2b04      	cmp	r3, #4
 8008f9c:	d128      	bne.n	8008ff0 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	f003 0304 	and.w	r3, r3, #4
 8008fa8:	2b04      	cmp	r3, #4
 8008faa:	d121      	bne.n	8008ff0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f06f 0204 	mvn.w	r2, #4
 8008fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2202      	movs	r2, #2
 8008fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d005      	beq.n	8008fd6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	4798      	blx	r3
 8008fd4:	e009      	b.n	8008fea <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	f003 0308 	and.w	r3, r3, #8
 8008ffa:	2b08      	cmp	r3, #8
 8008ffc:	d128      	bne.n	8009050 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	f003 0308 	and.w	r3, r3, #8
 8009008:	2b08      	cmp	r3, #8
 800900a:	d121      	bne.n	8009050 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f06f 0208 	mvn.w	r2, #8
 8009014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2204      	movs	r2, #4
 800901a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	69db      	ldr	r3, [r3, #28]
 8009022:	f003 0303 	and.w	r3, r3, #3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d005      	beq.n	8009036 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	4798      	blx	r3
 8009034:	e009      	b.n	800904a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	f003 0310 	and.w	r3, r3, #16
 800905a:	2b10      	cmp	r3, #16
 800905c:	d128      	bne.n	80090b0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	f003 0310 	and.w	r3, r3, #16
 8009068:	2b10      	cmp	r3, #16
 800906a:	d121      	bne.n	80090b0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f06f 0210 	mvn.w	r2, #16
 8009074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2208      	movs	r2, #8
 800907a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	69db      	ldr	r3, [r3, #28]
 8009082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009086:	2b00      	cmp	r3, #0
 8009088:	d005      	beq.n	8009096 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	4798      	blx	r3
 8009094:	e009      	b.n	80090aa <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	f003 0301 	and.w	r3, r3, #1
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d110      	bne.n	80090e0 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	f003 0301 	and.w	r3, r3, #1
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d109      	bne.n	80090e0 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f06f 0201 	mvn.w	r2, #1
 80090d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ea:	2b80      	cmp	r3, #128	; 0x80
 80090ec:	d110      	bne.n	8009110 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090f8:	2b80      	cmp	r3, #128	; 0x80
 80090fa:	d109      	bne.n	8009110 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800911a:	2b40      	cmp	r3, #64	; 0x40
 800911c:	d110      	bne.n	8009140 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009128:	2b40      	cmp	r3, #64	; 0x40
 800912a:	d109      	bne.n	8009140 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	f003 0320 	and.w	r3, r3, #32
 800914a:	2b20      	cmp	r3, #32
 800914c:	d110      	bne.n	8009170 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	f003 0320 	and.w	r3, r3, #32
 8009158:	2b20      	cmp	r3, #32
 800915a:	d109      	bne.n	8009170 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f06f 0220 	mvn.w	r2, #32
 8009164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009170:	bf00      	nop
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b086      	sub	sp, #24
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800918e:	2b01      	cmp	r3, #1
 8009190:	d101      	bne.n	8009196 <HAL_TIM_OC_ConfigChannel+0x1e>
 8009192:	2302      	movs	r3, #2
 8009194:	e048      	b.n	8009228 <HAL_TIM_OC_ConfigChannel+0xb0>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2201      	movs	r2, #1
 800919a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2b0c      	cmp	r3, #12
 80091a2:	d839      	bhi.n	8009218 <HAL_TIM_OC_ConfigChannel+0xa0>
 80091a4:	a201      	add	r2, pc, #4	; (adr r2, 80091ac <HAL_TIM_OC_ConfigChannel+0x34>)
 80091a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091aa:	bf00      	nop
 80091ac:	080091e1 	.word	0x080091e1
 80091b0:	08009219 	.word	0x08009219
 80091b4:	08009219 	.word	0x08009219
 80091b8:	08009219 	.word	0x08009219
 80091bc:	080091ef 	.word	0x080091ef
 80091c0:	08009219 	.word	0x08009219
 80091c4:	08009219 	.word	0x08009219
 80091c8:	08009219 	.word	0x08009219
 80091cc:	080091fd 	.word	0x080091fd
 80091d0:	08009219 	.word	0x08009219
 80091d4:	08009219 	.word	0x08009219
 80091d8:	08009219 	.word	0x08009219
 80091dc:	0800920b 	.word	0x0800920b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68b9      	ldr	r1, [r7, #8]
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 fbd0 	bl	800998c <TIM_OC1_SetConfig>
      break;
 80091ec:	e017      	b.n	800921e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68b9      	ldr	r1, [r7, #8]
 80091f4:	4618      	mov	r0, r3
 80091f6:	f000 fc2f 	bl	8009a58 <TIM_OC2_SetConfig>
      break;
 80091fa:	e010      	b.n	800921e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68b9      	ldr	r1, [r7, #8]
 8009202:	4618      	mov	r0, r3
 8009204:	f000 fc94 	bl	8009b30 <TIM_OC3_SetConfig>
      break;
 8009208:	e009      	b.n	800921e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68b9      	ldr	r1, [r7, #8]
 8009210:	4618      	mov	r0, r3
 8009212:	f000 fcf7 	bl	8009c04 <TIM_OC4_SetConfig>
      break;
 8009216:	e002      	b.n	800921e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8009218:	2301      	movs	r3, #1
 800921a:	75fb      	strb	r3, [r7, #23]
      break;
 800921c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009226:	7dfb      	ldrb	r3, [r7, #23]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3718      	adds	r7, #24
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800923c:	2300      	movs	r3, #0
 800923e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009246:	2b01      	cmp	r3, #1
 8009248:	d101      	bne.n	800924e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800924a:	2302      	movs	r3, #2
 800924c:	e0ae      	b.n	80093ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2201      	movs	r2, #1
 8009252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2b0c      	cmp	r3, #12
 800925a:	f200 809f 	bhi.w	800939c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800925e:	a201      	add	r2, pc, #4	; (adr r2, 8009264 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009264:	08009299 	.word	0x08009299
 8009268:	0800939d 	.word	0x0800939d
 800926c:	0800939d 	.word	0x0800939d
 8009270:	0800939d 	.word	0x0800939d
 8009274:	080092d9 	.word	0x080092d9
 8009278:	0800939d 	.word	0x0800939d
 800927c:	0800939d 	.word	0x0800939d
 8009280:	0800939d 	.word	0x0800939d
 8009284:	0800931b 	.word	0x0800931b
 8009288:	0800939d 	.word	0x0800939d
 800928c:	0800939d 	.word	0x0800939d
 8009290:	0800939d 	.word	0x0800939d
 8009294:	0800935b 	.word	0x0800935b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68b9      	ldr	r1, [r7, #8]
 800929e:	4618      	mov	r0, r3
 80092a0:	f000 fb74 	bl	800998c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	699a      	ldr	r2, [r3, #24]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f042 0208 	orr.w	r2, r2, #8
 80092b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	699a      	ldr	r2, [r3, #24]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f022 0204 	bic.w	r2, r2, #4
 80092c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	6999      	ldr	r1, [r3, #24]
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	691a      	ldr	r2, [r3, #16]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	430a      	orrs	r2, r1
 80092d4:	619a      	str	r2, [r3, #24]
      break;
 80092d6:	e064      	b.n	80093a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68b9      	ldr	r1, [r7, #8]
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 fbba 	bl	8009a58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	699a      	ldr	r2, [r3, #24]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	699a      	ldr	r2, [r3, #24]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	6999      	ldr	r1, [r3, #24]
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	021a      	lsls	r2, r3, #8
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	430a      	orrs	r2, r1
 8009316:	619a      	str	r2, [r3, #24]
      break;
 8009318:	e043      	b.n	80093a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68b9      	ldr	r1, [r7, #8]
 8009320:	4618      	mov	r0, r3
 8009322:	f000 fc05 	bl	8009b30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	69da      	ldr	r2, [r3, #28]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f042 0208 	orr.w	r2, r2, #8
 8009334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	69da      	ldr	r2, [r3, #28]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f022 0204 	bic.w	r2, r2, #4
 8009344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	69d9      	ldr	r1, [r3, #28]
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	691a      	ldr	r2, [r3, #16]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	430a      	orrs	r2, r1
 8009356:	61da      	str	r2, [r3, #28]
      break;
 8009358:	e023      	b.n	80093a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	68b9      	ldr	r1, [r7, #8]
 8009360:	4618      	mov	r0, r3
 8009362:	f000 fc4f 	bl	8009c04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	69da      	ldr	r2, [r3, #28]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	69da      	ldr	r2, [r3, #28]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	69d9      	ldr	r1, [r3, #28]
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	021a      	lsls	r2, r3, #8
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	430a      	orrs	r2, r1
 8009398:	61da      	str	r2, [r3, #28]
      break;
 800939a:	e002      	b.n	80093a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	75fb      	strb	r3, [r7, #23]
      break;
 80093a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80093aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3718      	adds	r7, #24
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80093be:	2300      	movs	r3, #0
 80093c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d101      	bne.n	80093d0 <HAL_TIM_ConfigClockSource+0x1c>
 80093cc:	2302      	movs	r3, #2
 80093ce:	e0b4      	b.n	800953a <HAL_TIM_ConfigClockSource+0x186>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2202      	movs	r2, #2
 80093dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80093ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80093f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009408:	d03e      	beq.n	8009488 <HAL_TIM_ConfigClockSource+0xd4>
 800940a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800940e:	f200 8087 	bhi.w	8009520 <HAL_TIM_ConfigClockSource+0x16c>
 8009412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009416:	f000 8086 	beq.w	8009526 <HAL_TIM_ConfigClockSource+0x172>
 800941a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800941e:	d87f      	bhi.n	8009520 <HAL_TIM_ConfigClockSource+0x16c>
 8009420:	2b70      	cmp	r3, #112	; 0x70
 8009422:	d01a      	beq.n	800945a <HAL_TIM_ConfigClockSource+0xa6>
 8009424:	2b70      	cmp	r3, #112	; 0x70
 8009426:	d87b      	bhi.n	8009520 <HAL_TIM_ConfigClockSource+0x16c>
 8009428:	2b60      	cmp	r3, #96	; 0x60
 800942a:	d050      	beq.n	80094ce <HAL_TIM_ConfigClockSource+0x11a>
 800942c:	2b60      	cmp	r3, #96	; 0x60
 800942e:	d877      	bhi.n	8009520 <HAL_TIM_ConfigClockSource+0x16c>
 8009430:	2b50      	cmp	r3, #80	; 0x50
 8009432:	d03c      	beq.n	80094ae <HAL_TIM_ConfigClockSource+0xfa>
 8009434:	2b50      	cmp	r3, #80	; 0x50
 8009436:	d873      	bhi.n	8009520 <HAL_TIM_ConfigClockSource+0x16c>
 8009438:	2b40      	cmp	r3, #64	; 0x40
 800943a:	d058      	beq.n	80094ee <HAL_TIM_ConfigClockSource+0x13a>
 800943c:	2b40      	cmp	r3, #64	; 0x40
 800943e:	d86f      	bhi.n	8009520 <HAL_TIM_ConfigClockSource+0x16c>
 8009440:	2b30      	cmp	r3, #48	; 0x30
 8009442:	d064      	beq.n	800950e <HAL_TIM_ConfigClockSource+0x15a>
 8009444:	2b30      	cmp	r3, #48	; 0x30
 8009446:	d86b      	bhi.n	8009520 <HAL_TIM_ConfigClockSource+0x16c>
 8009448:	2b20      	cmp	r3, #32
 800944a:	d060      	beq.n	800950e <HAL_TIM_ConfigClockSource+0x15a>
 800944c:	2b20      	cmp	r3, #32
 800944e:	d867      	bhi.n	8009520 <HAL_TIM_ConfigClockSource+0x16c>
 8009450:	2b00      	cmp	r3, #0
 8009452:	d05c      	beq.n	800950e <HAL_TIM_ConfigClockSource+0x15a>
 8009454:	2b10      	cmp	r3, #16
 8009456:	d05a      	beq.n	800950e <HAL_TIM_ConfigClockSource+0x15a>
 8009458:	e062      	b.n	8009520 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6818      	ldr	r0, [r3, #0]
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	6899      	ldr	r1, [r3, #8]
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	685a      	ldr	r2, [r3, #4]
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	f000 fc95 	bl	8009d98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800947c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68ba      	ldr	r2, [r7, #8]
 8009484:	609a      	str	r2, [r3, #8]
      break;
 8009486:	e04f      	b.n	8009528 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6818      	ldr	r0, [r3, #0]
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	6899      	ldr	r1, [r3, #8]
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	685a      	ldr	r2, [r3, #4]
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	f000 fc7e 	bl	8009d98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	689a      	ldr	r2, [r3, #8]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80094aa:	609a      	str	r2, [r3, #8]
      break;
 80094ac:	e03c      	b.n	8009528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6818      	ldr	r0, [r3, #0]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	6859      	ldr	r1, [r3, #4]
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	461a      	mov	r2, r3
 80094bc:	f000 fbf2 	bl	8009ca4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2150      	movs	r1, #80	; 0x50
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 fc4b 	bl	8009d62 <TIM_ITRx_SetConfig>
      break;
 80094cc:	e02c      	b.n	8009528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6818      	ldr	r0, [r3, #0]
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	6859      	ldr	r1, [r3, #4]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	461a      	mov	r2, r3
 80094dc:	f000 fc11 	bl	8009d02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2160      	movs	r1, #96	; 0x60
 80094e6:	4618      	mov	r0, r3
 80094e8:	f000 fc3b 	bl	8009d62 <TIM_ITRx_SetConfig>
      break;
 80094ec:	e01c      	b.n	8009528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6818      	ldr	r0, [r3, #0]
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	6859      	ldr	r1, [r3, #4]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	461a      	mov	r2, r3
 80094fc:	f000 fbd2 	bl	8009ca4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2140      	movs	r1, #64	; 0x40
 8009506:	4618      	mov	r0, r3
 8009508:	f000 fc2b 	bl	8009d62 <TIM_ITRx_SetConfig>
      break;
 800950c:	e00c      	b.n	8009528 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4619      	mov	r1, r3
 8009518:	4610      	mov	r0, r2
 800951a:	f000 fc22 	bl	8009d62 <TIM_ITRx_SetConfig>
      break;
 800951e:	e003      	b.n	8009528 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	73fb      	strb	r3, [r7, #15]
      break;
 8009524:	e000      	b.n	8009528 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009526:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009538:	7bfb      	ldrb	r3, [r7, #15]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009542:	b480      	push	{r7}
 8009544:	b083      	sub	sp, #12
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800954a:	bf00      	nop
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009556:	b480      	push	{r7}
 8009558:	b083      	sub	sp, #12
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800955e:	bf00      	nop
 8009560:	370c      	adds	r7, #12
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr

0800956a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800956a:	b480      	push	{r7}
 800956c:	b083      	sub	sp, #12
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009572:	bf00      	nop
 8009574:	370c      	adds	r7, #12
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr

0800957e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800957e:	b480      	push	{r7}
 8009580:	b083      	sub	sp, #12
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009586:	bf00      	nop
 8009588:	370c      	adds	r7, #12
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr

08009592 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009592:	b480      	push	{r7}
 8009594:	b083      	sub	sp, #12
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800959a:	bf00      	nop
 800959c:	370c      	adds	r7, #12
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr

080095a6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80095a6:	b480      	push	{r7}
 80095a8:	b083      	sub	sp, #12
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80095ae:	bf00      	nop
 80095b0:	370c      	adds	r7, #12
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr

080095ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095ba:	b480      	push	{r7}
 80095bc:	b083      	sub	sp, #12
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095c2:	bf00      	nop
 80095c4:	370c      	adds	r7, #12
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr

080095ce <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80095ce:	b480      	push	{r7}
 80095d0:	b083      	sub	sp, #12
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80095d6:	bf00      	nop
 80095d8:	370c      	adds	r7, #12
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr

080095e2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80095e2:	b480      	push	{r7}
 80095e4:	b083      	sub	sp, #12
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80095ea:	bf00      	nop
 80095ec:	370c      	adds	r7, #12
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr
	...

080095f8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b087      	sub	sp, #28
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	460b      	mov	r3, r1
 8009602:	607a      	str	r2, [r7, #4]
 8009604:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009606:	2300      	movs	r3, #0
 8009608:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d101      	bne.n	8009614 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	e135      	b.n	8009880 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800961a:	2b01      	cmp	r3, #1
 800961c:	d101      	bne.n	8009622 <HAL_TIM_RegisterCallback+0x2a>
 800961e:	2302      	movs	r3, #2
 8009620:	e12e      	b.n	8009880 <HAL_TIM_RegisterCallback+0x288>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2201      	movs	r2, #1
 8009626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009630:	b2db      	uxtb	r3, r3
 8009632:	2b01      	cmp	r3, #1
 8009634:	f040 80ba 	bne.w	80097ac <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8009638:	7afb      	ldrb	r3, [r7, #11]
 800963a:	2b1a      	cmp	r3, #26
 800963c:	f200 80b3 	bhi.w	80097a6 <HAL_TIM_RegisterCallback+0x1ae>
 8009640:	a201      	add	r2, pc, #4	; (adr r2, 8009648 <HAL_TIM_RegisterCallback+0x50>)
 8009642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009646:	bf00      	nop
 8009648:	080096b5 	.word	0x080096b5
 800964c:	080096bd 	.word	0x080096bd
 8009650:	080096c5 	.word	0x080096c5
 8009654:	080096cd 	.word	0x080096cd
 8009658:	080096d5 	.word	0x080096d5
 800965c:	080096dd 	.word	0x080096dd
 8009660:	080096e5 	.word	0x080096e5
 8009664:	080096ed 	.word	0x080096ed
 8009668:	080096f5 	.word	0x080096f5
 800966c:	080096fd 	.word	0x080096fd
 8009670:	08009705 	.word	0x08009705
 8009674:	0800970d 	.word	0x0800970d
 8009678:	08009715 	.word	0x08009715
 800967c:	0800971d 	.word	0x0800971d
 8009680:	08009725 	.word	0x08009725
 8009684:	0800972f 	.word	0x0800972f
 8009688:	08009739 	.word	0x08009739
 800968c:	08009743 	.word	0x08009743
 8009690:	0800974d 	.word	0x0800974d
 8009694:	08009757 	.word	0x08009757
 8009698:	08009761 	.word	0x08009761
 800969c:	0800976b 	.word	0x0800976b
 80096a0:	08009775 	.word	0x08009775
 80096a4:	0800977f 	.word	0x0800977f
 80096a8:	08009789 	.word	0x08009789
 80096ac:	08009793 	.word	0x08009793
 80096b0:	0800979d 	.word	0x0800979d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80096ba:	e0dc      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80096c2:	e0d8      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80096ca:	e0d4      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80096d2:	e0d0      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80096da:	e0cc      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80096e2:	e0c8      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80096ea:	e0c4      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80096f2:	e0c0      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80096fa:	e0bc      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009702:	e0b8      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800970a:	e0b4      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009712:	e0b0      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800971a:	e0ac      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009722:	e0a8      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800972c:	e0a3      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8009736:	e09e      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8009740:	e099      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800974a:	e094      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8009754:	e08f      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800975e:	e08a      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8009768:	e085      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8009772:	e080      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800977c:	e07b      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8009786:	e076      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8009790:	e071      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800979a:	e06c      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 80097a4:	e067      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	75fb      	strb	r3, [r7, #23]
        break;
 80097aa:	e064      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d15c      	bne.n	8009872 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 80097b8:	7afb      	ldrb	r3, [r7, #11]
 80097ba:	2b0d      	cmp	r3, #13
 80097bc:	d856      	bhi.n	800986c <HAL_TIM_RegisterCallback+0x274>
 80097be:	a201      	add	r2, pc, #4	; (adr r2, 80097c4 <HAL_TIM_RegisterCallback+0x1cc>)
 80097c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c4:	080097fd 	.word	0x080097fd
 80097c8:	08009805 	.word	0x08009805
 80097cc:	0800980d 	.word	0x0800980d
 80097d0:	08009815 	.word	0x08009815
 80097d4:	0800981d 	.word	0x0800981d
 80097d8:	08009825 	.word	0x08009825
 80097dc:	0800982d 	.word	0x0800982d
 80097e0:	08009835 	.word	0x08009835
 80097e4:	0800983d 	.word	0x0800983d
 80097e8:	08009845 	.word	0x08009845
 80097ec:	0800984d 	.word	0x0800984d
 80097f0:	08009855 	.word	0x08009855
 80097f4:	0800985d 	.word	0x0800985d
 80097f8:	08009865 	.word	0x08009865
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8009802:	e038      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800980a:	e034      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009812:	e030      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800981a:	e02c      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009822:	e028      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800982a:	e024      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009832:	e020      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800983a:	e01c      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009842:	e018      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800984a:	e014      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009852:	e010      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800985a:	e00c      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009862:	e008      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800986a:	e004      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	75fb      	strb	r3, [r7, #23]
        break;
 8009870:	e001      	b.n	8009876 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009872:	2301      	movs	r3, #1
 8009874:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2200      	movs	r2, #0
 800987a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800987e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009880:	4618      	mov	r0, r3
 8009882:	371c      	adds	r7, #28
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800988c:	b480      	push	{r7}
 800988e:	b085      	sub	sp, #20
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a34      	ldr	r2, [pc, #208]	; (8009970 <TIM_Base_SetConfig+0xe4>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d00f      	beq.n	80098c4 <TIM_Base_SetConfig+0x38>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098aa:	d00b      	beq.n	80098c4 <TIM_Base_SetConfig+0x38>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	4a31      	ldr	r2, [pc, #196]	; (8009974 <TIM_Base_SetConfig+0xe8>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d007      	beq.n	80098c4 <TIM_Base_SetConfig+0x38>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4a30      	ldr	r2, [pc, #192]	; (8009978 <TIM_Base_SetConfig+0xec>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d003      	beq.n	80098c4 <TIM_Base_SetConfig+0x38>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a2f      	ldr	r2, [pc, #188]	; (800997c <TIM_Base_SetConfig+0xf0>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d108      	bne.n	80098d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	68fa      	ldr	r2, [r7, #12]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a25      	ldr	r2, [pc, #148]	; (8009970 <TIM_Base_SetConfig+0xe4>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d01b      	beq.n	8009916 <TIM_Base_SetConfig+0x8a>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098e4:	d017      	beq.n	8009916 <TIM_Base_SetConfig+0x8a>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a22      	ldr	r2, [pc, #136]	; (8009974 <TIM_Base_SetConfig+0xe8>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d013      	beq.n	8009916 <TIM_Base_SetConfig+0x8a>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a21      	ldr	r2, [pc, #132]	; (8009978 <TIM_Base_SetConfig+0xec>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d00f      	beq.n	8009916 <TIM_Base_SetConfig+0x8a>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4a20      	ldr	r2, [pc, #128]	; (800997c <TIM_Base_SetConfig+0xf0>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d00b      	beq.n	8009916 <TIM_Base_SetConfig+0x8a>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4a1f      	ldr	r2, [pc, #124]	; (8009980 <TIM_Base_SetConfig+0xf4>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d007      	beq.n	8009916 <TIM_Base_SetConfig+0x8a>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4a1e      	ldr	r2, [pc, #120]	; (8009984 <TIM_Base_SetConfig+0xf8>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d003      	beq.n	8009916 <TIM_Base_SetConfig+0x8a>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	4a1d      	ldr	r2, [pc, #116]	; (8009988 <TIM_Base_SetConfig+0xfc>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d108      	bne.n	8009928 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800991c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	4313      	orrs	r3, r2
 8009926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	695b      	ldr	r3, [r3, #20]
 8009932:	4313      	orrs	r3, r2
 8009934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	689a      	ldr	r2, [r3, #8]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	4a08      	ldr	r2, [pc, #32]	; (8009970 <TIM_Base_SetConfig+0xe4>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d103      	bne.n	800995c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	691a      	ldr	r2, [r3, #16]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	615a      	str	r2, [r3, #20]
}
 8009962:	bf00      	nop
 8009964:	3714      	adds	r7, #20
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	40010000 	.word	0x40010000
 8009974:	40000400 	.word	0x40000400
 8009978:	40000800 	.word	0x40000800
 800997c:	40000c00 	.word	0x40000c00
 8009980:	40014000 	.word	0x40014000
 8009984:	40014400 	.word	0x40014400
 8009988:	40014800 	.word	0x40014800

0800998c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800998c:	b480      	push	{r7}
 800998e:	b087      	sub	sp, #28
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a1b      	ldr	r3, [r3, #32]
 800999a:	f023 0201 	bic.w	r2, r3, #1
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a1b      	ldr	r3, [r3, #32]
 80099a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	699b      	ldr	r3, [r3, #24]
 80099b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f023 0303 	bic.w	r3, r3, #3
 80099c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	f023 0302 	bic.w	r3, r3, #2
 80099d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	697a      	ldr	r2, [r7, #20]
 80099dc:	4313      	orrs	r3, r2
 80099de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a1c      	ldr	r2, [pc, #112]	; (8009a54 <TIM_OC1_SetConfig+0xc8>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d10c      	bne.n	8009a02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	f023 0308 	bic.w	r3, r3, #8
 80099ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	697a      	ldr	r2, [r7, #20]
 80099f6:	4313      	orrs	r3, r2
 80099f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	f023 0304 	bic.w	r3, r3, #4
 8009a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a13      	ldr	r2, [pc, #76]	; (8009a54 <TIM_OC1_SetConfig+0xc8>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d111      	bne.n	8009a2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	695b      	ldr	r3, [r3, #20]
 8009a1e:	693a      	ldr	r2, [r7, #16]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	699b      	ldr	r3, [r3, #24]
 8009a28:	693a      	ldr	r2, [r7, #16]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	693a      	ldr	r2, [r7, #16]
 8009a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	685a      	ldr	r2, [r3, #4]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	697a      	ldr	r2, [r7, #20]
 8009a46:	621a      	str	r2, [r3, #32]
}
 8009a48:	bf00      	nop
 8009a4a:	371c      	adds	r7, #28
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr
 8009a54:	40010000 	.word	0x40010000

08009a58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b087      	sub	sp, #28
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a1b      	ldr	r3, [r3, #32]
 8009a66:	f023 0210 	bic.w	r2, r3, #16
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a1b      	ldr	r3, [r3, #32]
 8009a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	699b      	ldr	r3, [r3, #24]
 8009a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	021b      	lsls	r3, r3, #8
 8009a96:	68fa      	ldr	r2, [r7, #12]
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	f023 0320 	bic.w	r3, r3, #32
 8009aa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	011b      	lsls	r3, r3, #4
 8009aaa:	697a      	ldr	r2, [r7, #20]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	4a1e      	ldr	r2, [pc, #120]	; (8009b2c <TIM_OC2_SetConfig+0xd4>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d10d      	bne.n	8009ad4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	011b      	lsls	r3, r3, #4
 8009ac6:	697a      	ldr	r2, [r7, #20]
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ad2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a15      	ldr	r2, [pc, #84]	; (8009b2c <TIM_OC2_SetConfig+0xd4>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d113      	bne.n	8009b04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ae2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009aea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	695b      	ldr	r3, [r3, #20]
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	693a      	ldr	r2, [r7, #16]
 8009af4:	4313      	orrs	r3, r2
 8009af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	693a      	ldr	r2, [r7, #16]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	693a      	ldr	r2, [r7, #16]
 8009b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	685a      	ldr	r2, [r3, #4]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	697a      	ldr	r2, [r7, #20]
 8009b1c:	621a      	str	r2, [r3, #32]
}
 8009b1e:	bf00      	nop
 8009b20:	371c      	adds	r7, #28
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	40010000 	.word	0x40010000

08009b30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b087      	sub	sp, #28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a1b      	ldr	r3, [r3, #32]
 8009b3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a1b      	ldr	r3, [r3, #32]
 8009b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	69db      	ldr	r3, [r3, #28]
 8009b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f023 0303 	bic.w	r3, r3, #3
 8009b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	021b      	lsls	r3, r3, #8
 8009b80:	697a      	ldr	r2, [r7, #20]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4a1d      	ldr	r2, [pc, #116]	; (8009c00 <TIM_OC3_SetConfig+0xd0>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d10d      	bne.n	8009baa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	021b      	lsls	r3, r3, #8
 8009b9c:	697a      	ldr	r2, [r7, #20]
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4a14      	ldr	r2, [pc, #80]	; (8009c00 <TIM_OC3_SetConfig+0xd0>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d113      	bne.n	8009bda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	695b      	ldr	r3, [r3, #20]
 8009bc6:	011b      	lsls	r3, r3, #4
 8009bc8:	693a      	ldr	r2, [r7, #16]
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	011b      	lsls	r3, r3, #4
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	693a      	ldr	r2, [r7, #16]
 8009bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	685a      	ldr	r2, [r3, #4]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	697a      	ldr	r2, [r7, #20]
 8009bf2:	621a      	str	r2, [r3, #32]
}
 8009bf4:	bf00      	nop
 8009bf6:	371c      	adds	r7, #28
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr
 8009c00:	40010000 	.word	0x40010000

08009c04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b087      	sub	sp, #28
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a1b      	ldr	r3, [r3, #32]
 8009c12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6a1b      	ldr	r3, [r3, #32]
 8009c1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	69db      	ldr	r3, [r3, #28]
 8009c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	021b      	lsls	r3, r3, #8
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	031b      	lsls	r3, r3, #12
 8009c56:	693a      	ldr	r2, [r7, #16]
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4a10      	ldr	r2, [pc, #64]	; (8009ca0 <TIM_OC4_SetConfig+0x9c>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d109      	bne.n	8009c78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	695b      	ldr	r3, [r3, #20]
 8009c70:	019b      	lsls	r3, r3, #6
 8009c72:	697a      	ldr	r2, [r7, #20]
 8009c74:	4313      	orrs	r3, r2
 8009c76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	697a      	ldr	r2, [r7, #20]
 8009c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	68fa      	ldr	r2, [r7, #12]
 8009c82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	685a      	ldr	r2, [r3, #4]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	693a      	ldr	r2, [r7, #16]
 8009c90:	621a      	str	r2, [r3, #32]
}
 8009c92:	bf00      	nop
 8009c94:	371c      	adds	r7, #28
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	40010000 	.word	0x40010000

08009ca4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b087      	sub	sp, #28
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6a1b      	ldr	r3, [r3, #32]
 8009cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6a1b      	ldr	r3, [r3, #32]
 8009cba:	f023 0201 	bic.w	r2, r3, #1
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	011b      	lsls	r3, r3, #4
 8009cd4:	693a      	ldr	r2, [r7, #16]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	f023 030a 	bic.w	r3, r3, #10
 8009ce0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ce2:	697a      	ldr	r2, [r7, #20]
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	693a      	ldr	r2, [r7, #16]
 8009cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	697a      	ldr	r2, [r7, #20]
 8009cf4:	621a      	str	r2, [r3, #32]
}
 8009cf6:	bf00      	nop
 8009cf8:	371c      	adds	r7, #28
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr

08009d02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d02:	b480      	push	{r7}
 8009d04:	b087      	sub	sp, #28
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	60f8      	str	r0, [r7, #12]
 8009d0a:	60b9      	str	r1, [r7, #8]
 8009d0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6a1b      	ldr	r3, [r3, #32]
 8009d12:	f023 0210 	bic.w	r2, r3, #16
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	699b      	ldr	r3, [r3, #24]
 8009d1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6a1b      	ldr	r3, [r3, #32]
 8009d24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	031b      	lsls	r3, r3, #12
 8009d32:	697a      	ldr	r2, [r7, #20]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	011b      	lsls	r3, r3, #4
 8009d44:	693a      	ldr	r2, [r7, #16]
 8009d46:	4313      	orrs	r3, r2
 8009d48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	697a      	ldr	r2, [r7, #20]
 8009d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	693a      	ldr	r2, [r7, #16]
 8009d54:	621a      	str	r2, [r3, #32]
}
 8009d56:	bf00      	nop
 8009d58:	371c      	adds	r7, #28
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr

08009d62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d62:	b480      	push	{r7}
 8009d64:	b085      	sub	sp, #20
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
 8009d6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	f043 0307 	orr.w	r3, r3, #7
 8009d84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	609a      	str	r2, [r3, #8]
}
 8009d8c:	bf00      	nop
 8009d8e:	3714      	adds	r7, #20
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b087      	sub	sp, #28
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]
 8009da4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009db2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	021a      	lsls	r2, r3, #8
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	431a      	orrs	r2, r3
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	697a      	ldr	r2, [r7, #20]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	697a      	ldr	r2, [r7, #20]
 8009dca:	609a      	str	r2, [r3, #8]
}
 8009dcc:	bf00      	nop
 8009dce:	371c      	adds	r7, #28
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b087      	sub	sp, #28
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	f003 031f 	and.w	r3, r3, #31
 8009dea:	2201      	movs	r2, #1
 8009dec:	fa02 f303 	lsl.w	r3, r2, r3
 8009df0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6a1a      	ldr	r2, [r3, #32]
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	43db      	mvns	r3, r3
 8009dfa:	401a      	ands	r2, r3
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6a1a      	ldr	r2, [r3, #32]
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	f003 031f 	and.w	r3, r3, #31
 8009e0a:	6879      	ldr	r1, [r7, #4]
 8009e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8009e10:	431a      	orrs	r2, r3
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	621a      	str	r2, [r3, #32]
}
 8009e16:	bf00      	nop
 8009e18:	371c      	adds	r7, #28
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
	...

08009e24 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4a1c      	ldr	r2, [pc, #112]	; (8009ea0 <TIM_ResetCallback+0x7c>)
 8009e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4a1b      	ldr	r2, [pc, #108]	; (8009ea4 <TIM_ResetCallback+0x80>)
 8009e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4a1a      	ldr	r2, [pc, #104]	; (8009ea8 <TIM_ResetCallback+0x84>)
 8009e40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4a19      	ldr	r2, [pc, #100]	; (8009eac <TIM_ResetCallback+0x88>)
 8009e48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4a18      	ldr	r2, [pc, #96]	; (8009eb0 <TIM_ResetCallback+0x8c>)
 8009e50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	4a17      	ldr	r2, [pc, #92]	; (8009eb4 <TIM_ResetCallback+0x90>)
 8009e58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a16      	ldr	r2, [pc, #88]	; (8009eb8 <TIM_ResetCallback+0x94>)
 8009e60:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a15      	ldr	r2, [pc, #84]	; (8009ebc <TIM_ResetCallback+0x98>)
 8009e68:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4a14      	ldr	r2, [pc, #80]	; (8009ec0 <TIM_ResetCallback+0x9c>)
 8009e70:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a13      	ldr	r2, [pc, #76]	; (8009ec4 <TIM_ResetCallback+0xa0>)
 8009e78:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4a12      	ldr	r2, [pc, #72]	; (8009ec8 <TIM_ResetCallback+0xa4>)
 8009e80:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4a11      	ldr	r2, [pc, #68]	; (8009ecc <TIM_ResetCallback+0xa8>)
 8009e88:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4a10      	ldr	r2, [pc, #64]	; (8009ed0 <TIM_ResetCallback+0xac>)
 8009e90:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr
 8009ea0:	08004de1 	.word	0x08004de1
 8009ea4:	08009543 	.word	0x08009543
 8009ea8:	080095bb 	.word	0x080095bb
 8009eac:	080095cf 	.word	0x080095cf
 8009eb0:	0800956b 	.word	0x0800956b
 8009eb4:	0800957f 	.word	0x0800957f
 8009eb8:	08009557 	.word	0x08009557
 8009ebc:	08009593 	.word	0x08009593
 8009ec0:	080095a7 	.word	0x080095a7
 8009ec4:	080095e3 	.word	0x080095e3
 8009ec8:	08009fb1 	.word	0x08009fb1
 8009ecc:	08009fc5 	.word	0x08009fc5
 8009ed0:	08009fd9 	.word	0x08009fd9

08009ed4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d101      	bne.n	8009eec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ee8:	2302      	movs	r3, #2
 8009eea:	e050      	b.n	8009f8e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2202      	movs	r2, #2
 8009ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a1c      	ldr	r2, [pc, #112]	; (8009f9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d018      	beq.n	8009f62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f38:	d013      	beq.n	8009f62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a18      	ldr	r2, [pc, #96]	; (8009fa0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d00e      	beq.n	8009f62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a16      	ldr	r2, [pc, #88]	; (8009fa4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d009      	beq.n	8009f62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a15      	ldr	r2, [pc, #84]	; (8009fa8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d004      	beq.n	8009f62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a13      	ldr	r2, [pc, #76]	; (8009fac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d10c      	bne.n	8009f7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	68ba      	ldr	r2, [r7, #8]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3714      	adds	r7, #20
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr
 8009f9a:	bf00      	nop
 8009f9c:	40010000 	.word	0x40010000
 8009fa0:	40000400 	.word	0x40000400
 8009fa4:	40000800 	.word	0x40000800
 8009fa8:	40000c00 	.word	0x40000c00
 8009fac:	40014000 	.word	0x40014000

08009fb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fb8:	bf00      	nop
 8009fba:	370c      	adds	r7, #12
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009fcc:	bf00      	nop
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009fe0:	bf00      	nop
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d101      	bne.n	8009ffe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e04a      	b.n	800a094 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a004:	b2db      	uxtb	r3, r3
 800a006:	2b00      	cmp	r3, #0
 800a008:	d111      	bne.n	800a02e <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 fd2c 	bl	800aa70 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d102      	bne.n	800a026 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	4a1e      	ldr	r2, [pc, #120]	; (800a09c <HAL_UART_Init+0xb0>)
 800a024:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2224      	movs	r2, #36	; 0x24
 800a032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	68da      	ldr	r2, [r3, #12]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a044:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 fff6 	bl	800b038 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	691a      	ldr	r2, [r3, #16]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a05a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	695a      	ldr	r2, [r3, #20]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a06a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	68da      	ldr	r2, [r3, #12]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a07a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2220      	movs	r2, #32
 800a086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2220      	movs	r2, #32
 800a08e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	080053e5 	.word	0x080053e5

0800a0a0 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b087      	sub	sp, #28
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	607a      	str	r2, [r7, #4]
 800a0ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d107      	bne.n	800a0c8 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0bc:	f043 0220 	orr.w	r2, r3, #32
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e08c      	b.n	800a1e2 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d101      	bne.n	800a0d6 <HAL_UART_RegisterCallback+0x36>
 800a0d2:	2302      	movs	r3, #2
 800a0d4:	e085      	b.n	800a1e2 <HAL_UART_RegisterCallback+0x142>
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	2b20      	cmp	r3, #32
 800a0e8:	d151      	bne.n	800a18e <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800a0ea:	7afb      	ldrb	r3, [r7, #11]
 800a0ec:	2b0c      	cmp	r3, #12
 800a0ee:	d845      	bhi.n	800a17c <HAL_UART_RegisterCallback+0xdc>
 800a0f0:	a201      	add	r2, pc, #4	; (adr r2, 800a0f8 <HAL_UART_RegisterCallback+0x58>)
 800a0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f6:	bf00      	nop
 800a0f8:	0800a12d 	.word	0x0800a12d
 800a0fc:	0800a135 	.word	0x0800a135
 800a100:	0800a13d 	.word	0x0800a13d
 800a104:	0800a145 	.word	0x0800a145
 800a108:	0800a14d 	.word	0x0800a14d
 800a10c:	0800a155 	.word	0x0800a155
 800a110:	0800a15d 	.word	0x0800a15d
 800a114:	0800a165 	.word	0x0800a165
 800a118:	0800a17d 	.word	0x0800a17d
 800a11c:	0800a17d 	.word	0x0800a17d
 800a120:	0800a17d 	.word	0x0800a17d
 800a124:	0800a16d 	.word	0x0800a16d
 800a128:	0800a175 	.word	0x0800a175
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800a132:	e051      	b.n	800a1d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a13a:	e04d      	b.n	800a1d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a142:	e049      	b.n	800a1d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a14a:	e045      	b.n	800a1d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a152:	e041      	b.n	800a1d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a15a:	e03d      	b.n	800a1d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a162:	e039      	b.n	800a1d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a16a:	e035      	b.n	800a1d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a172:	e031      	b.n	800a1d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a17a:	e02d      	b.n	800a1d8 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a180:	f043 0220 	orr.w	r2, r3, #32
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800a188:	2301      	movs	r3, #1
 800a18a:	75fb      	strb	r3, [r7, #23]
        break;
 800a18c:	e024      	b.n	800a1d8 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a194:	b2db      	uxtb	r3, r3
 800a196:	2b00      	cmp	r3, #0
 800a198:	d116      	bne.n	800a1c8 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800a19a:	7afb      	ldrb	r3, [r7, #11]
 800a19c:	2b0b      	cmp	r3, #11
 800a19e:	d002      	beq.n	800a1a6 <HAL_UART_RegisterCallback+0x106>
 800a1a0:	2b0c      	cmp	r3, #12
 800a1a2:	d004      	beq.n	800a1ae <HAL_UART_RegisterCallback+0x10e>
 800a1a4:	e007      	b.n	800a1b6 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a1ac:	e014      	b.n	800a1d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a1b4:	e010      	b.n	800a1d8 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ba:	f043 0220 	orr.w	r2, r3, #32
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	75fb      	strb	r3, [r7, #23]
        break;
 800a1c6:	e007      	b.n	800a1d8 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1cc:	f043 0220 	orr.w	r2, r3, #32
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a1e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	371c      	adds	r7, #28
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr
 800a1ee:	bf00      	nop

0800a1f0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a204:	b2db      	uxtb	r3, r3
 800a206:	2b20      	cmp	r3, #32
 800a208:	d11d      	bne.n	800a246 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d002      	beq.n	800a216 <HAL_UART_Receive_IT+0x26>
 800a210:	88fb      	ldrh	r3, [r7, #6]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d101      	bne.n	800a21a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	e016      	b.n	800a248 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a220:	2b01      	cmp	r3, #1
 800a222:	d101      	bne.n	800a228 <HAL_UART_Receive_IT+0x38>
 800a224:	2302      	movs	r3, #2
 800a226:	e00f      	b.n	800a248 <HAL_UART_Receive_IT+0x58>
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a236:	88fb      	ldrh	r3, [r7, #6]
 800a238:	461a      	mov	r2, r3
 800a23a:	68b9      	ldr	r1, [r7, #8]
 800a23c:	68f8      	ldr	r0, [r7, #12]
 800a23e:	f000 fcf7 	bl	800ac30 <UART_Start_Receive_IT>
 800a242:	4603      	mov	r3, r0
 800a244:	e000      	b.n	800a248 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a246:	2302      	movs	r3, #2
  }
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3710      	adds	r7, #16
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b08c      	sub	sp, #48	; 0x30
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	4613      	mov	r3, r2
 800a25c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a264:	b2db      	uxtb	r3, r3
 800a266:	2b20      	cmp	r3, #32
 800a268:	d165      	bne.n	800a336 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d002      	beq.n	800a276 <HAL_UART_Transmit_DMA+0x26>
 800a270:	88fb      	ldrh	r3, [r7, #6]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d101      	bne.n	800a27a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	e05e      	b.n	800a338 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a280:	2b01      	cmp	r3, #1
 800a282:	d101      	bne.n	800a288 <HAL_UART_Transmit_DMA+0x38>
 800a284:	2302      	movs	r3, #2
 800a286:	e057      	b.n	800a338 <HAL_UART_Transmit_DMA+0xe8>
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2201      	movs	r2, #1
 800a28c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a290:	68ba      	ldr	r2, [r7, #8]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	88fa      	ldrh	r2, [r7, #6]
 800a29a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	88fa      	ldrh	r2, [r7, #6]
 800a2a0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2221      	movs	r2, #33	; 0x21
 800a2ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2b4:	4a22      	ldr	r2, [pc, #136]	; (800a340 <HAL_UART_Transmit_DMA+0xf0>)
 800a2b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2bc:	4a21      	ldr	r2, [pc, #132]	; (800a344 <HAL_UART_Transmit_DMA+0xf4>)
 800a2be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c4:	4a20      	ldr	r2, [pc, #128]	; (800a348 <HAL_UART_Transmit_DMA+0xf8>)
 800a2c6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a2d0:	f107 0308 	add.w	r3, r7, #8
 800a2d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2dc:	6819      	ldr	r1, [r3, #0]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	3304      	adds	r3, #4
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	88fb      	ldrh	r3, [r7, #6]
 800a2e8:	f7fc f812 	bl	8006310 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a2f4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	3314      	adds	r3, #20
 800a304:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	e853 3f00 	ldrex	r3, [r3]
 800a30c:	617b      	str	r3, [r7, #20]
   return(result);
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a314:	62bb      	str	r3, [r7, #40]	; 0x28
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3314      	adds	r3, #20
 800a31c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a31e:	627a      	str	r2, [r7, #36]	; 0x24
 800a320:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a322:	6a39      	ldr	r1, [r7, #32]
 800a324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a326:	e841 2300 	strex	r3, r2, [r1]
 800a32a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d1e5      	bne.n	800a2fe <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a332:	2300      	movs	r3, #0
 800a334:	e000      	b.n	800a338 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a336:	2302      	movs	r3, #2
  }
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3730      	adds	r7, #48	; 0x30
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	0800aae1 	.word	0x0800aae1
 800a344:	0800ab7d 	.word	0x0800ab7d
 800a348:	0800ab9b 	.word	0x0800ab9b

0800a34c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b09a      	sub	sp, #104	; 0x68
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	330c      	adds	r3, #12
 800a35a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a35c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a35e:	e853 3f00 	ldrex	r3, [r3]
 800a362:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a366:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a36a:	667b      	str	r3, [r7, #100]	; 0x64
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	330c      	adds	r3, #12
 800a372:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a374:	657a      	str	r2, [r7, #84]	; 0x54
 800a376:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a378:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a37a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a37c:	e841 2300 	strex	r3, r2, [r1]
 800a380:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a384:	2b00      	cmp	r3, #0
 800a386:	d1e5      	bne.n	800a354 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	3314      	adds	r3, #20
 800a38e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a392:	e853 3f00 	ldrex	r3, [r3]
 800a396:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39a:	f023 0301 	bic.w	r3, r3, #1
 800a39e:	663b      	str	r3, [r7, #96]	; 0x60
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	3314      	adds	r3, #20
 800a3a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a3a8:	643a      	str	r2, [r7, #64]	; 0x40
 800a3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a3ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3b0:	e841 2300 	strex	r3, r2, [r1]
 800a3b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d1e5      	bne.n	800a388 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d119      	bne.n	800a3f8 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	330c      	adds	r3, #12
 800a3ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3cc:	6a3b      	ldr	r3, [r7, #32]
 800a3ce:	e853 3f00 	ldrex	r3, [r3]
 800a3d2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	f023 0310 	bic.w	r3, r3, #16
 800a3da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	330c      	adds	r3, #12
 800a3e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a3e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a3e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3ec:	e841 2300 	strex	r3, r2, [r1]
 800a3f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d1e5      	bne.n	800a3c4 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	695b      	ldr	r3, [r3, #20]
 800a3fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a402:	2b40      	cmp	r3, #64	; 0x40
 800a404:	d136      	bne.n	800a474 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	3314      	adds	r3, #20
 800a40c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	e853 3f00 	ldrex	r3, [r3]
 800a414:	60bb      	str	r3, [r7, #8]
   return(result);
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a41c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	3314      	adds	r3, #20
 800a424:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a426:	61ba      	str	r2, [r7, #24]
 800a428:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42a:	6979      	ldr	r1, [r7, #20]
 800a42c:	69ba      	ldr	r2, [r7, #24]
 800a42e:	e841 2300 	strex	r3, r2, [r1]
 800a432:	613b      	str	r3, [r7, #16]
   return(result);
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d1e5      	bne.n	800a406 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d018      	beq.n	800a474 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a446:	2200      	movs	r2, #0
 800a448:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a44e:	4618      	mov	r0, r3
 800a450:	f7fb ffb6 	bl	80063c0 <HAL_DMA_Abort>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00c      	beq.n	800a474 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fc f9ca 	bl	80067f8 <HAL_DMA_GetError>
 800a464:	4603      	mov	r3, r0
 800a466:	2b20      	cmp	r3, #32
 800a468:	d104      	bne.n	800a474 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2210      	movs	r2, #16
 800a46e:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800a470:	2303      	movs	r3, #3
 800a472:	e00a      	b.n	800a48a <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2220      	movs	r2, #32
 800a47e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2200      	movs	r2, #0
 800a486:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3768      	adds	r7, #104	; 0x68
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
	...

0800a494 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b0ba      	sub	sp, #232	; 0xe8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	695b      	ldr	r3, [r3, #20]
 800a4b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a4c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4ca:	f003 030f 	and.w	r3, r3, #15
 800a4ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a4d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d10f      	bne.n	800a4fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a4da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4de:	f003 0320 	and.w	r3, r3, #32
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d009      	beq.n	800a4fa <HAL_UART_IRQHandler+0x66>
 800a4e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4ea:	f003 0320 	and.w	r3, r3, #32
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d003      	beq.n	800a4fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 fce3 	bl	800aebe <UART_Receive_IT>
      return;
 800a4f8:	e25b      	b.n	800a9b2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a4fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f000 80e1 	beq.w	800a6c6 <HAL_UART_IRQHandler+0x232>
 800a504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a508:	f003 0301 	and.w	r3, r3, #1
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d106      	bne.n	800a51e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a514:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a518:	2b00      	cmp	r3, #0
 800a51a:	f000 80d4 	beq.w	800a6c6 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a51e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a522:	f003 0301 	and.w	r3, r3, #1
 800a526:	2b00      	cmp	r3, #0
 800a528:	d00b      	beq.n	800a542 <HAL_UART_IRQHandler+0xae>
 800a52a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a52e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a532:	2b00      	cmp	r3, #0
 800a534:	d005      	beq.n	800a542 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a53a:	f043 0201 	orr.w	r2, r3, #1
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a546:	f003 0304 	and.w	r3, r3, #4
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00b      	beq.n	800a566 <HAL_UART_IRQHandler+0xd2>
 800a54e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a552:	f003 0301 	and.w	r3, r3, #1
 800a556:	2b00      	cmp	r3, #0
 800a558:	d005      	beq.n	800a566 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a55e:	f043 0202 	orr.w	r2, r3, #2
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a56a:	f003 0302 	and.w	r3, r3, #2
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00b      	beq.n	800a58a <HAL_UART_IRQHandler+0xf6>
 800a572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a576:	f003 0301 	and.w	r3, r3, #1
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d005      	beq.n	800a58a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a582:	f043 0204 	orr.w	r2, r3, #4
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a58a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a58e:	f003 0308 	and.w	r3, r3, #8
 800a592:	2b00      	cmp	r3, #0
 800a594:	d011      	beq.n	800a5ba <HAL_UART_IRQHandler+0x126>
 800a596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a59a:	f003 0320 	and.w	r3, r3, #32
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d105      	bne.n	800a5ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a5a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5a6:	f003 0301 	and.w	r3, r3, #1
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d005      	beq.n	800a5ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b2:	f043 0208 	orr.w	r2, r3, #8
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	f000 81f2 	beq.w	800a9a8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a5c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5c8:	f003 0320 	and.w	r3, r3, #32
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d008      	beq.n	800a5e2 <HAL_UART_IRQHandler+0x14e>
 800a5d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5d4:	f003 0320 	and.w	r3, r3, #32
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d002      	beq.n	800a5e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 fc6e 	bl	800aebe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	695b      	ldr	r3, [r3, #20]
 800a5e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ec:	2b40      	cmp	r3, #64	; 0x40
 800a5ee:	bf0c      	ite	eq
 800a5f0:	2301      	moveq	r3, #1
 800a5f2:	2300      	movne	r3, #0
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5fe:	f003 0308 	and.w	r3, r3, #8
 800a602:	2b00      	cmp	r3, #0
 800a604:	d103      	bne.n	800a60e <HAL_UART_IRQHandler+0x17a>
 800a606:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d051      	beq.n	800a6b2 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 fb74 	bl	800acfc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	695b      	ldr	r3, [r3, #20]
 800a61a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a61e:	2b40      	cmp	r3, #64	; 0x40
 800a620:	d142      	bne.n	800a6a8 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	3314      	adds	r3, #20
 800a628:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a62c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a630:	e853 3f00 	ldrex	r3, [r3]
 800a634:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a638:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a63c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a640:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	3314      	adds	r3, #20
 800a64a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a64e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a652:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a656:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a65a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a65e:	e841 2300 	strex	r3, r2, [r1]
 800a662:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d1d9      	bne.n	800a622 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a672:	2b00      	cmp	r3, #0
 800a674:	d013      	beq.n	800a69e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a67a:	4a7f      	ldr	r2, [pc, #508]	; (800a878 <HAL_UART_IRQHandler+0x3e4>)
 800a67c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a682:	4618      	mov	r0, r3
 800a684:	f7fb ff0c 	bl	80064a0 <HAL_DMA_Abort_IT>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d019      	beq.n	800a6c2 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a698:	4610      	mov	r0, r2
 800a69a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a69c:	e011      	b.n	800a6c2 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6a6:	e00c      	b.n	800a6c2 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6b0:	e007      	b.n	800a6c2 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a6c0:	e172      	b.n	800a9a8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6c2:	bf00      	nop
    return;
 800a6c4:	e170      	b.n	800a9a8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	f040 814c 	bne.w	800a968 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a6d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6d4:	f003 0310 	and.w	r3, r3, #16
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f000 8145 	beq.w	800a968 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a6de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6e2:	f003 0310 	and.w	r3, r3, #16
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	f000 813e 	beq.w	800a968 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	60bb      	str	r3, [r7, #8]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	60bb      	str	r3, [r7, #8]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	60bb      	str	r3, [r7, #8]
 800a700:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	695b      	ldr	r3, [r3, #20]
 800a708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a70c:	2b40      	cmp	r3, #64	; 0x40
 800a70e:	f040 80b5 	bne.w	800a87c <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a71e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a722:	2b00      	cmp	r3, #0
 800a724:	f000 8142 	beq.w	800a9ac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a72c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a730:	429a      	cmp	r2, r3
 800a732:	f080 813b 	bcs.w	800a9ac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a73c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a742:	69db      	ldr	r3, [r3, #28]
 800a744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a748:	f000 8088 	beq.w	800a85c <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	330c      	adds	r3, #12
 800a752:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a756:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a75a:	e853 3f00 	ldrex	r3, [r3]
 800a75e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a762:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a766:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a76a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	330c      	adds	r3, #12
 800a774:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a778:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a77c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a780:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a784:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a788:	e841 2300 	strex	r3, r2, [r1]
 800a78c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a790:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a794:	2b00      	cmp	r3, #0
 800a796:	d1d9      	bne.n	800a74c <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	3314      	adds	r3, #20
 800a79e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7a2:	e853 3f00 	ldrex	r3, [r3]
 800a7a6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a7a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a7aa:	f023 0301 	bic.w	r3, r3, #1
 800a7ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	3314      	adds	r3, #20
 800a7b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a7bc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a7c0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a7c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a7c8:	e841 2300 	strex	r3, r2, [r1]
 800a7cc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a7ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d1e1      	bne.n	800a798 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	3314      	adds	r3, #20
 800a7da:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7de:	e853 3f00 	ldrex	r3, [r3]
 800a7e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a7e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	3314      	adds	r3, #20
 800a7f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a7f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a7fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a7fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a800:	e841 2300 	strex	r3, r2, [r1]
 800a804:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a806:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d1e3      	bne.n	800a7d4 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2220      	movs	r2, #32
 800a810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	330c      	adds	r3, #12
 800a820:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a824:	e853 3f00 	ldrex	r3, [r3]
 800a828:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a82a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a82c:	f023 0310 	bic.w	r3, r3, #16
 800a830:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	330c      	adds	r3, #12
 800a83a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a83e:	65ba      	str	r2, [r7, #88]	; 0x58
 800a840:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a842:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a844:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a846:	e841 2300 	strex	r3, r2, [r1]
 800a84a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a84c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d1e3      	bne.n	800a81a <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a856:	4618      	mov	r0, r3
 800a858:	f7fb fdb2 	bl	80063c0 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800a868:	b292      	uxth	r2, r2
 800a86a:	1a8a      	subs	r2, r1, r2
 800a86c:	b292      	uxth	r2, r2
 800a86e:	4611      	mov	r1, r2
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a874:	e09a      	b.n	800a9ac <HAL_UART_IRQHandler+0x518>
 800a876:	bf00      	nop
 800a878:	0800adc3 	.word	0x0800adc3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a884:	b29b      	uxth	r3, r3
 800a886:	1ad3      	subs	r3, r2, r3
 800a888:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a890:	b29b      	uxth	r3, r3
 800a892:	2b00      	cmp	r3, #0
 800a894:	f000 808c 	beq.w	800a9b0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a898:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f000 8087 	beq.w	800a9b0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	330c      	adds	r3, #12
 800a8a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ac:	e853 3f00 	ldrex	r3, [r3]
 800a8b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a8b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a8b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	330c      	adds	r3, #12
 800a8c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a8c6:	647a      	str	r2, [r7, #68]	; 0x44
 800a8c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a8cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8ce:	e841 2300 	strex	r3, r2, [r1]
 800a8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a8d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d1e3      	bne.n	800a8a2 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	3314      	adds	r3, #20
 800a8e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e4:	e853 3f00 	ldrex	r3, [r3]
 800a8e8:	623b      	str	r3, [r7, #32]
   return(result);
 800a8ea:	6a3b      	ldr	r3, [r7, #32]
 800a8ec:	f023 0301 	bic.w	r3, r3, #1
 800a8f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	3314      	adds	r3, #20
 800a8fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a8fe:	633a      	str	r2, [r7, #48]	; 0x30
 800a900:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a902:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a906:	e841 2300 	strex	r3, r2, [r1]
 800a90a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d1e3      	bne.n	800a8da <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2220      	movs	r2, #32
 800a916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	330c      	adds	r3, #12
 800a926:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	e853 3f00 	ldrex	r3, [r3]
 800a92e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f023 0310 	bic.w	r3, r3, #16
 800a936:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	330c      	adds	r3, #12
 800a940:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a944:	61fa      	str	r2, [r7, #28]
 800a946:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a948:	69b9      	ldr	r1, [r7, #24]
 800a94a:	69fa      	ldr	r2, [r7, #28]
 800a94c:	e841 2300 	strex	r3, r2, [r1]
 800a950:	617b      	str	r3, [r7, #20]
   return(result);
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d1e3      	bne.n	800a920 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a95c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800a960:	4611      	mov	r1, r2
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a966:	e023      	b.n	800a9b0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a96c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a970:	2b00      	cmp	r3, #0
 800a972:	d009      	beq.n	800a988 <HAL_UART_IRQHandler+0x4f4>
 800a974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d003      	beq.n	800a988 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 fa33 	bl	800adec <UART_Transmit_IT>
    return;
 800a986:	e014      	b.n	800a9b2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a98c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a990:	2b00      	cmp	r3, #0
 800a992:	d00e      	beq.n	800a9b2 <HAL_UART_IRQHandler+0x51e>
 800a994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d008      	beq.n	800a9b2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 fa73 	bl	800ae8c <UART_EndTransmit_IT>
    return;
 800a9a6:	e004      	b.n	800a9b2 <HAL_UART_IRQHandler+0x51e>
    return;
 800a9a8:	bf00      	nop
 800a9aa:	e002      	b.n	800a9b2 <HAL_UART_IRQHandler+0x51e>
      return;
 800a9ac:	bf00      	nop
 800a9ae:	e000      	b.n	800a9b2 <HAL_UART_IRQHandler+0x51e>
      return;
 800a9b0:	bf00      	nop
  }
}
 800a9b2:	37e8      	adds	r7, #232	; 0xe8
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a9c0:	bf00      	nop
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a9d4:	bf00      	nop
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a9e8:	bf00      	nop
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a9fc:	bf00      	nop
 800a9fe:	370c      	adds	r7, #12
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aa10:	bf00      	nop
 800aa12:	370c      	adds	r7, #12
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800aa24:	bf00      	nop
 800aa26:	370c      	adds	r7, #12
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800aa38:	bf00      	nop
 800aa3a:	370c      	adds	r7, #12
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800aa4c:	bf00      	nop
 800aa4e:	370c      	adds	r7, #12
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	460b      	mov	r3, r1
 800aa62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa64:	bf00      	nop
 800aa66:	370c      	adds	r7, #12
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	4a10      	ldr	r2, [pc, #64]	; (800aabc <UART_InitCallbacksToDefault+0x4c>)
 800aa7c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4a0f      	ldr	r2, [pc, #60]	; (800aac0 <UART_InitCallbacksToDefault+0x50>)
 800aa82:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4a0f      	ldr	r2, [pc, #60]	; (800aac4 <UART_InitCallbacksToDefault+0x54>)
 800aa88:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	4a0e      	ldr	r2, [pc, #56]	; (800aac8 <UART_InitCallbacksToDefault+0x58>)
 800aa8e:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4a0e      	ldr	r2, [pc, #56]	; (800aacc <UART_InitCallbacksToDefault+0x5c>)
 800aa94:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4a0d      	ldr	r2, [pc, #52]	; (800aad0 <UART_InitCallbacksToDefault+0x60>)
 800aa9a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	4a0d      	ldr	r2, [pc, #52]	; (800aad4 <UART_InitCallbacksToDefault+0x64>)
 800aaa0:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4a0c      	ldr	r2, [pc, #48]	; (800aad8 <UART_InitCallbacksToDefault+0x68>)
 800aaa6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	4a0c      	ldr	r2, [pc, #48]	; (800aadc <UART_InitCallbacksToDefault+0x6c>)
 800aaac:	669a      	str	r2, [r3, #104]	; 0x68

}
 800aaae:	bf00      	nop
 800aab0:	370c      	adds	r7, #12
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	0800a9cd 	.word	0x0800a9cd
 800aac0:	0800a9b9 	.word	0x0800a9b9
 800aac4:	0800a9f5 	.word	0x0800a9f5
 800aac8:	0800a9e1 	.word	0x0800a9e1
 800aacc:	0800aa09 	.word	0x0800aa09
 800aad0:	0800aa1d 	.word	0x0800aa1d
 800aad4:	0800aa31 	.word	0x0800aa31
 800aad8:	0800aa45 	.word	0x0800aa45
 800aadc:	0800aa59 	.word	0x0800aa59

0800aae0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b090      	sub	sp, #64	; 0x40
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaec:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d137      	bne.n	800ab6c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800aafc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aafe:	2200      	movs	r2, #0
 800ab00:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	3314      	adds	r3, #20
 800ab08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0c:	e853 3f00 	ldrex	r3, [r3]
 800ab10:	623b      	str	r3, [r7, #32]
   return(result);
 800ab12:	6a3b      	ldr	r3, [r7, #32]
 800ab14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab18:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	3314      	adds	r3, #20
 800ab20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab22:	633a      	str	r2, [r7, #48]	; 0x30
 800ab24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab2a:	e841 2300 	strex	r3, r2, [r1]
 800ab2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d1e5      	bne.n	800ab02 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	330c      	adds	r3, #12
 800ab3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	e853 3f00 	ldrex	r3, [r3]
 800ab44:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab4c:	637b      	str	r3, [r7, #52]	; 0x34
 800ab4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	330c      	adds	r3, #12
 800ab54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab56:	61fa      	str	r2, [r7, #28]
 800ab58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab5a:	69b9      	ldr	r1, [r7, #24]
 800ab5c:	69fa      	ldr	r2, [r7, #28]
 800ab5e:	e841 2300 	strex	r3, r2, [r1]
 800ab62:	617b      	str	r3, [r7, #20]
   return(result);
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d1e5      	bne.n	800ab36 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab6a:	e003      	b.n	800ab74 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800ab6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ab72:	4798      	blx	r3
}
 800ab74:	bf00      	nop
 800ab76:	3740      	adds	r7, #64	; 0x40
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab88:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab8e:	68f8      	ldr	r0, [r7, #12]
 800ab90:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab92:	bf00      	nop
 800ab94:	3710      	adds	r7, #16
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ab9a:	b580      	push	{r7, lr}
 800ab9c:	b084      	sub	sp, #16
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800aba2:	2300      	movs	r3, #0
 800aba4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abaa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	695b      	ldr	r3, [r3, #20]
 800abb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abb6:	2b80      	cmp	r3, #128	; 0x80
 800abb8:	bf0c      	ite	eq
 800abba:	2301      	moveq	r3, #1
 800abbc:	2300      	movne	r3, #0
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	2b21      	cmp	r3, #33	; 0x21
 800abcc:	d108      	bne.n	800abe0 <UART_DMAError+0x46>
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d005      	beq.n	800abe0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	2200      	movs	r2, #0
 800abd8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800abda:	68b8      	ldr	r0, [r7, #8]
 800abdc:	f000 f866 	bl	800acac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	695b      	ldr	r3, [r3, #20]
 800abe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abea:	2b40      	cmp	r3, #64	; 0x40
 800abec:	bf0c      	ite	eq
 800abee:	2301      	moveq	r3, #1
 800abf0:	2300      	movne	r3, #0
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	2b22      	cmp	r3, #34	; 0x22
 800ac00:	d108      	bne.n	800ac14 <UART_DMAError+0x7a>
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d005      	beq.n	800ac14 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ac0e:	68b8      	ldr	r0, [r7, #8]
 800ac10:	f000 f874 	bl	800acfc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac18:	f043 0210 	orr.w	r2, r3, #16
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac24:	68b8      	ldr	r0, [r7, #8]
 800ac26:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac28:	bf00      	nop
 800ac2a:	3710      	adds	r7, #16
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b085      	sub	sp, #20
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	60b9      	str	r1, [r7, #8]
 800ac3a:	4613      	mov	r3, r2
 800ac3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	68ba      	ldr	r2, [r7, #8]
 800ac42:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	88fa      	ldrh	r2, [r7, #6]
 800ac48:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	88fa      	ldrh	r2, [r7, #6]
 800ac4e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2200      	movs	r2, #0
 800ac54:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2222      	movs	r2, #34	; 0x22
 800ac5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2200      	movs	r2, #0
 800ac62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	691b      	ldr	r3, [r3, #16]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d007      	beq.n	800ac7e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	68da      	ldr	r2, [r3, #12]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac7c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	695a      	ldr	r2, [r3, #20]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f042 0201 	orr.w	r2, r2, #1
 800ac8c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	68da      	ldr	r2, [r3, #12]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f042 0220 	orr.w	r2, r2, #32
 800ac9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ac9e:	2300      	movs	r3, #0
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3714      	adds	r7, #20
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800acac:	b480      	push	{r7}
 800acae:	b089      	sub	sp, #36	; 0x24
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	330c      	adds	r3, #12
 800acba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	e853 3f00 	ldrex	r3, [r3]
 800acc2:	60bb      	str	r3, [r7, #8]
   return(result);
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800acca:	61fb      	str	r3, [r7, #28]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	330c      	adds	r3, #12
 800acd2:	69fa      	ldr	r2, [r7, #28]
 800acd4:	61ba      	str	r2, [r7, #24]
 800acd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd8:	6979      	ldr	r1, [r7, #20]
 800acda:	69ba      	ldr	r2, [r7, #24]
 800acdc:	e841 2300 	strex	r3, r2, [r1]
 800ace0:	613b      	str	r3, [r7, #16]
   return(result);
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d1e5      	bne.n	800acb4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2220      	movs	r2, #32
 800acec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800acf0:	bf00      	nop
 800acf2:	3724      	adds	r7, #36	; 0x24
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b095      	sub	sp, #84	; 0x54
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	330c      	adds	r3, #12
 800ad0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad0e:	e853 3f00 	ldrex	r3, [r3]
 800ad12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	330c      	adds	r3, #12
 800ad22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad24:	643a      	str	r2, [r7, #64]	; 0x40
 800ad26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad2c:	e841 2300 	strex	r3, r2, [r1]
 800ad30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d1e5      	bne.n	800ad04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	3314      	adds	r3, #20
 800ad3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad40:	6a3b      	ldr	r3, [r7, #32]
 800ad42:	e853 3f00 	ldrex	r3, [r3]
 800ad46:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad48:	69fb      	ldr	r3, [r7, #28]
 800ad4a:	f023 0301 	bic.w	r3, r3, #1
 800ad4e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	3314      	adds	r3, #20
 800ad56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad58:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad60:	e841 2300 	strex	r3, r2, [r1]
 800ad64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d1e5      	bne.n	800ad38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d119      	bne.n	800ada8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	330c      	adds	r3, #12
 800ad7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	e853 3f00 	ldrex	r3, [r3]
 800ad82:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	f023 0310 	bic.w	r3, r3, #16
 800ad8a:	647b      	str	r3, [r7, #68]	; 0x44
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	330c      	adds	r3, #12
 800ad92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad94:	61ba      	str	r2, [r7, #24]
 800ad96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad98:	6979      	ldr	r1, [r7, #20]
 800ad9a:	69ba      	ldr	r2, [r7, #24]
 800ad9c:	e841 2300 	strex	r3, r2, [r1]
 800ada0:	613b      	str	r3, [r7, #16]
   return(result);
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d1e5      	bne.n	800ad74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2220      	movs	r2, #32
 800adac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800adb6:	bf00      	nop
 800adb8:	3754      	adds	r7, #84	; 0x54
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr

0800adc2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800adc2:	b580      	push	{r7, lr}
 800adc4:	b084      	sub	sp, #16
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2200      	movs	r2, #0
 800add4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2200      	movs	r2, #0
 800adda:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ade4:	bf00      	nop
 800ade6:	3710      	adds	r7, #16
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800adec:	b480      	push	{r7}
 800adee:	b085      	sub	sp, #20
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	2b21      	cmp	r3, #33	; 0x21
 800adfe:	d13e      	bne.n	800ae7e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae08:	d114      	bne.n	800ae34 <UART_Transmit_IT+0x48>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	691b      	ldr	r3, [r3, #16]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d110      	bne.n	800ae34 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6a1b      	ldr	r3, [r3, #32]
 800ae16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	881b      	ldrh	r3, [r3, #0]
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae26:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6a1b      	ldr	r3, [r3, #32]
 800ae2c:	1c9a      	adds	r2, r3, #2
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	621a      	str	r2, [r3, #32]
 800ae32:	e008      	b.n	800ae46 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6a1b      	ldr	r3, [r3, #32]
 800ae38:	1c59      	adds	r1, r3, #1
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	6211      	str	r1, [r2, #32]
 800ae3e:	781a      	ldrb	r2, [r3, #0]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	3b01      	subs	r3, #1
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	4619      	mov	r1, r3
 800ae54:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d10f      	bne.n	800ae7a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	68da      	ldr	r2, [r3, #12]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	68da      	ldr	r2, [r3, #12]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	e000      	b.n	800ae80 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ae7e:	2302      	movs	r3, #2
  }
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3714      	adds	r7, #20
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr

0800ae8c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	68da      	ldr	r2, [r3, #12]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aea2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2220      	movs	r2, #32
 800aea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aeb4:	2300      	movs	r3, #0
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3708      	adds	r7, #8
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b08c      	sub	sp, #48	; 0x30
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	2b22      	cmp	r3, #34	; 0x22
 800aed0:	f040 80ad 	bne.w	800b02e <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aedc:	d117      	bne.n	800af0e <UART_Receive_IT+0x50>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	691b      	ldr	r3, [r3, #16]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d113      	bne.n	800af0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800aee6:	2300      	movs	r3, #0
 800aee8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aefc:	b29a      	uxth	r2, r3
 800aefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af06:	1c9a      	adds	r2, r3, #2
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	629a      	str	r2, [r3, #40]	; 0x28
 800af0c:	e026      	b.n	800af5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800af14:	2300      	movs	r3, #0
 800af16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af20:	d007      	beq.n	800af32 <UART_Receive_IT+0x74>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d10a      	bne.n	800af40 <UART_Receive_IT+0x82>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	691b      	ldr	r3, [r3, #16]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d106      	bne.n	800af40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	b2da      	uxtb	r2, r3
 800af3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af3c:	701a      	strb	r2, [r3, #0]
 800af3e:	e008      	b.n	800af52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	b2db      	uxtb	r3, r3
 800af48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af4c:	b2da      	uxtb	r2, r3
 800af4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af56:	1c5a      	adds	r2, r3, #1
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af60:	b29b      	uxth	r3, r3
 800af62:	3b01      	subs	r3, #1
 800af64:	b29b      	uxth	r3, r3
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	4619      	mov	r1, r3
 800af6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d15c      	bne.n	800b02a <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	68da      	ldr	r2, [r3, #12]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f022 0220 	bic.w	r2, r2, #32
 800af7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	68da      	ldr	r2, [r3, #12]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800af8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	695a      	ldr	r2, [r3, #20]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f022 0201 	bic.w	r2, r2, #1
 800af9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2220      	movs	r2, #32
 800afa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afac:	2b01      	cmp	r3, #1
 800afae:	d136      	bne.n	800b01e <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	330c      	adds	r3, #12
 800afbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	e853 3f00 	ldrex	r3, [r3]
 800afc4:	613b      	str	r3, [r7, #16]
   return(result);
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	f023 0310 	bic.w	r3, r3, #16
 800afcc:	627b      	str	r3, [r7, #36]	; 0x24
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	330c      	adds	r3, #12
 800afd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afd6:	623a      	str	r2, [r7, #32]
 800afd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afda:	69f9      	ldr	r1, [r7, #28]
 800afdc:	6a3a      	ldr	r2, [r7, #32]
 800afde:	e841 2300 	strex	r3, r2, [r1]
 800afe2:	61bb      	str	r3, [r7, #24]
   return(result);
 800afe4:	69bb      	ldr	r3, [r7, #24]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d1e5      	bne.n	800afb6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f003 0310 	and.w	r3, r3, #16
 800aff4:	2b10      	cmp	r3, #16
 800aff6:	d10a      	bne.n	800b00e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aff8:	2300      	movs	r3, #0
 800affa:	60fb      	str	r3, [r7, #12]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	60fb      	str	r3, [r7, #12]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	60fb      	str	r3, [r7, #12]
 800b00c:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b016:	4611      	mov	r1, r2
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	4798      	blx	r3
 800b01c:	e003      	b.n	800b026 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b026:	2300      	movs	r3, #0
 800b028:	e002      	b.n	800b030 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	e000      	b.n	800b030 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800b02e:	2302      	movs	r3, #2
  }
}
 800b030:	4618      	mov	r0, r3
 800b032:	3730      	adds	r7, #48	; 0x30
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b03c:	b0c0      	sub	sp, #256	; 0x100
 800b03e:	af00      	add	r7, sp, #0
 800b040:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	691b      	ldr	r3, [r3, #16]
 800b04c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b054:	68d9      	ldr	r1, [r3, #12]
 800b056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	ea40 0301 	orr.w	r3, r0, r1
 800b060:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b066:	689a      	ldr	r2, [r3, #8]
 800b068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b06c:	691b      	ldr	r3, [r3, #16]
 800b06e:	431a      	orrs	r2, r3
 800b070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b074:	695b      	ldr	r3, [r3, #20]
 800b076:	431a      	orrs	r2, r3
 800b078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b07c:	69db      	ldr	r3, [r3, #28]
 800b07e:	4313      	orrs	r3, r2
 800b080:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	68db      	ldr	r3, [r3, #12]
 800b08c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b090:	f021 010c 	bic.w	r1, r1, #12
 800b094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b09e:	430b      	orrs	r3, r1
 800b0a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b0a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	695b      	ldr	r3, [r3, #20]
 800b0aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b0ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0b2:	6999      	ldr	r1, [r3, #24]
 800b0b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	ea40 0301 	orr.w	r3, r0, r1
 800b0be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b0c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	4b8f      	ldr	r3, [pc, #572]	; (800b304 <UART_SetConfig+0x2cc>)
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d005      	beq.n	800b0d8 <UART_SetConfig+0xa0>
 800b0cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	4b8d      	ldr	r3, [pc, #564]	; (800b308 <UART_SetConfig+0x2d0>)
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d104      	bne.n	800b0e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b0d8:	f7fd fa6e 	bl	80085b8 <HAL_RCC_GetPCLK2Freq>
 800b0dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b0e0:	e003      	b.n	800b0ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b0e2:	f7fd fa55 	bl	8008590 <HAL_RCC_GetPCLK1Freq>
 800b0e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0ee:	69db      	ldr	r3, [r3, #28]
 800b0f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0f4:	f040 810c 	bne.w	800b310 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b0f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b102:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b106:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b10a:	4622      	mov	r2, r4
 800b10c:	462b      	mov	r3, r5
 800b10e:	1891      	adds	r1, r2, r2
 800b110:	65b9      	str	r1, [r7, #88]	; 0x58
 800b112:	415b      	adcs	r3, r3
 800b114:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b116:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b11a:	4621      	mov	r1, r4
 800b11c:	eb12 0801 	adds.w	r8, r2, r1
 800b120:	4629      	mov	r1, r5
 800b122:	eb43 0901 	adc.w	r9, r3, r1
 800b126:	f04f 0200 	mov.w	r2, #0
 800b12a:	f04f 0300 	mov.w	r3, #0
 800b12e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b132:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b136:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b13a:	4690      	mov	r8, r2
 800b13c:	4699      	mov	r9, r3
 800b13e:	4623      	mov	r3, r4
 800b140:	eb18 0303 	adds.w	r3, r8, r3
 800b144:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b148:	462b      	mov	r3, r5
 800b14a:	eb49 0303 	adc.w	r3, r9, r3
 800b14e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	2200      	movs	r2, #0
 800b15a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b15e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b162:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b166:	460b      	mov	r3, r1
 800b168:	18db      	adds	r3, r3, r3
 800b16a:	653b      	str	r3, [r7, #80]	; 0x50
 800b16c:	4613      	mov	r3, r2
 800b16e:	eb42 0303 	adc.w	r3, r2, r3
 800b172:	657b      	str	r3, [r7, #84]	; 0x54
 800b174:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b178:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b17c:	f7f5 fd10 	bl	8000ba0 <__aeabi_uldivmod>
 800b180:	4602      	mov	r2, r0
 800b182:	460b      	mov	r3, r1
 800b184:	4b61      	ldr	r3, [pc, #388]	; (800b30c <UART_SetConfig+0x2d4>)
 800b186:	fba3 2302 	umull	r2, r3, r3, r2
 800b18a:	095b      	lsrs	r3, r3, #5
 800b18c:	011c      	lsls	r4, r3, #4
 800b18e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b192:	2200      	movs	r2, #0
 800b194:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b198:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b19c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b1a0:	4642      	mov	r2, r8
 800b1a2:	464b      	mov	r3, r9
 800b1a4:	1891      	adds	r1, r2, r2
 800b1a6:	64b9      	str	r1, [r7, #72]	; 0x48
 800b1a8:	415b      	adcs	r3, r3
 800b1aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b1b0:	4641      	mov	r1, r8
 800b1b2:	eb12 0a01 	adds.w	sl, r2, r1
 800b1b6:	4649      	mov	r1, r9
 800b1b8:	eb43 0b01 	adc.w	fp, r3, r1
 800b1bc:	f04f 0200 	mov.w	r2, #0
 800b1c0:	f04f 0300 	mov.w	r3, #0
 800b1c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b1c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b1cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b1d0:	4692      	mov	sl, r2
 800b1d2:	469b      	mov	fp, r3
 800b1d4:	4643      	mov	r3, r8
 800b1d6:	eb1a 0303 	adds.w	r3, sl, r3
 800b1da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b1de:	464b      	mov	r3, r9
 800b1e0:	eb4b 0303 	adc.w	r3, fp, r3
 800b1e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b1e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b1f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b1f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	18db      	adds	r3, r3, r3
 800b200:	643b      	str	r3, [r7, #64]	; 0x40
 800b202:	4613      	mov	r3, r2
 800b204:	eb42 0303 	adc.w	r3, r2, r3
 800b208:	647b      	str	r3, [r7, #68]	; 0x44
 800b20a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b20e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b212:	f7f5 fcc5 	bl	8000ba0 <__aeabi_uldivmod>
 800b216:	4602      	mov	r2, r0
 800b218:	460b      	mov	r3, r1
 800b21a:	4611      	mov	r1, r2
 800b21c:	4b3b      	ldr	r3, [pc, #236]	; (800b30c <UART_SetConfig+0x2d4>)
 800b21e:	fba3 2301 	umull	r2, r3, r3, r1
 800b222:	095b      	lsrs	r3, r3, #5
 800b224:	2264      	movs	r2, #100	; 0x64
 800b226:	fb02 f303 	mul.w	r3, r2, r3
 800b22a:	1acb      	subs	r3, r1, r3
 800b22c:	00db      	lsls	r3, r3, #3
 800b22e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b232:	4b36      	ldr	r3, [pc, #216]	; (800b30c <UART_SetConfig+0x2d4>)
 800b234:	fba3 2302 	umull	r2, r3, r3, r2
 800b238:	095b      	lsrs	r3, r3, #5
 800b23a:	005b      	lsls	r3, r3, #1
 800b23c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b240:	441c      	add	r4, r3
 800b242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b246:	2200      	movs	r2, #0
 800b248:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b24c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b250:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b254:	4642      	mov	r2, r8
 800b256:	464b      	mov	r3, r9
 800b258:	1891      	adds	r1, r2, r2
 800b25a:	63b9      	str	r1, [r7, #56]	; 0x38
 800b25c:	415b      	adcs	r3, r3
 800b25e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b260:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b264:	4641      	mov	r1, r8
 800b266:	1851      	adds	r1, r2, r1
 800b268:	6339      	str	r1, [r7, #48]	; 0x30
 800b26a:	4649      	mov	r1, r9
 800b26c:	414b      	adcs	r3, r1
 800b26e:	637b      	str	r3, [r7, #52]	; 0x34
 800b270:	f04f 0200 	mov.w	r2, #0
 800b274:	f04f 0300 	mov.w	r3, #0
 800b278:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b27c:	4659      	mov	r1, fp
 800b27e:	00cb      	lsls	r3, r1, #3
 800b280:	4651      	mov	r1, sl
 800b282:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b286:	4651      	mov	r1, sl
 800b288:	00ca      	lsls	r2, r1, #3
 800b28a:	4610      	mov	r0, r2
 800b28c:	4619      	mov	r1, r3
 800b28e:	4603      	mov	r3, r0
 800b290:	4642      	mov	r2, r8
 800b292:	189b      	adds	r3, r3, r2
 800b294:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b298:	464b      	mov	r3, r9
 800b29a:	460a      	mov	r2, r1
 800b29c:	eb42 0303 	adc.w	r3, r2, r3
 800b2a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b2a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b2b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b2b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	18db      	adds	r3, r3, r3
 800b2bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2be:	4613      	mov	r3, r2
 800b2c0:	eb42 0303 	adc.w	r3, r2, r3
 800b2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b2ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b2ce:	f7f5 fc67 	bl	8000ba0 <__aeabi_uldivmod>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	4b0d      	ldr	r3, [pc, #52]	; (800b30c <UART_SetConfig+0x2d4>)
 800b2d8:	fba3 1302 	umull	r1, r3, r3, r2
 800b2dc:	095b      	lsrs	r3, r3, #5
 800b2de:	2164      	movs	r1, #100	; 0x64
 800b2e0:	fb01 f303 	mul.w	r3, r1, r3
 800b2e4:	1ad3      	subs	r3, r2, r3
 800b2e6:	00db      	lsls	r3, r3, #3
 800b2e8:	3332      	adds	r3, #50	; 0x32
 800b2ea:	4a08      	ldr	r2, [pc, #32]	; (800b30c <UART_SetConfig+0x2d4>)
 800b2ec:	fba2 2303 	umull	r2, r3, r2, r3
 800b2f0:	095b      	lsrs	r3, r3, #5
 800b2f2:	f003 0207 	and.w	r2, r3, #7
 800b2f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4422      	add	r2, r4
 800b2fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b300:	e105      	b.n	800b50e <UART_SetConfig+0x4d6>
 800b302:	bf00      	nop
 800b304:	40011000 	.word	0x40011000
 800b308:	40011400 	.word	0x40011400
 800b30c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b314:	2200      	movs	r2, #0
 800b316:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b31a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b31e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b322:	4642      	mov	r2, r8
 800b324:	464b      	mov	r3, r9
 800b326:	1891      	adds	r1, r2, r2
 800b328:	6239      	str	r1, [r7, #32]
 800b32a:	415b      	adcs	r3, r3
 800b32c:	627b      	str	r3, [r7, #36]	; 0x24
 800b32e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b332:	4641      	mov	r1, r8
 800b334:	1854      	adds	r4, r2, r1
 800b336:	4649      	mov	r1, r9
 800b338:	eb43 0501 	adc.w	r5, r3, r1
 800b33c:	f04f 0200 	mov.w	r2, #0
 800b340:	f04f 0300 	mov.w	r3, #0
 800b344:	00eb      	lsls	r3, r5, #3
 800b346:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b34a:	00e2      	lsls	r2, r4, #3
 800b34c:	4614      	mov	r4, r2
 800b34e:	461d      	mov	r5, r3
 800b350:	4643      	mov	r3, r8
 800b352:	18e3      	adds	r3, r4, r3
 800b354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b358:	464b      	mov	r3, r9
 800b35a:	eb45 0303 	adc.w	r3, r5, r3
 800b35e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	2200      	movs	r2, #0
 800b36a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b36e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b372:	f04f 0200 	mov.w	r2, #0
 800b376:	f04f 0300 	mov.w	r3, #0
 800b37a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b37e:	4629      	mov	r1, r5
 800b380:	008b      	lsls	r3, r1, #2
 800b382:	4621      	mov	r1, r4
 800b384:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b388:	4621      	mov	r1, r4
 800b38a:	008a      	lsls	r2, r1, #2
 800b38c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b390:	f7f5 fc06 	bl	8000ba0 <__aeabi_uldivmod>
 800b394:	4602      	mov	r2, r0
 800b396:	460b      	mov	r3, r1
 800b398:	4b60      	ldr	r3, [pc, #384]	; (800b51c <UART_SetConfig+0x4e4>)
 800b39a:	fba3 2302 	umull	r2, r3, r3, r2
 800b39e:	095b      	lsrs	r3, r3, #5
 800b3a0:	011c      	lsls	r4, r3, #4
 800b3a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b3ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b3b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b3b4:	4642      	mov	r2, r8
 800b3b6:	464b      	mov	r3, r9
 800b3b8:	1891      	adds	r1, r2, r2
 800b3ba:	61b9      	str	r1, [r7, #24]
 800b3bc:	415b      	adcs	r3, r3
 800b3be:	61fb      	str	r3, [r7, #28]
 800b3c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b3c4:	4641      	mov	r1, r8
 800b3c6:	1851      	adds	r1, r2, r1
 800b3c8:	6139      	str	r1, [r7, #16]
 800b3ca:	4649      	mov	r1, r9
 800b3cc:	414b      	adcs	r3, r1
 800b3ce:	617b      	str	r3, [r7, #20]
 800b3d0:	f04f 0200 	mov.w	r2, #0
 800b3d4:	f04f 0300 	mov.w	r3, #0
 800b3d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b3dc:	4659      	mov	r1, fp
 800b3de:	00cb      	lsls	r3, r1, #3
 800b3e0:	4651      	mov	r1, sl
 800b3e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b3e6:	4651      	mov	r1, sl
 800b3e8:	00ca      	lsls	r2, r1, #3
 800b3ea:	4610      	mov	r0, r2
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	4642      	mov	r2, r8
 800b3f2:	189b      	adds	r3, r3, r2
 800b3f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b3f8:	464b      	mov	r3, r9
 800b3fa:	460a      	mov	r2, r1
 800b3fc:	eb42 0303 	adc.w	r3, r2, r3
 800b400:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b40e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b410:	f04f 0200 	mov.w	r2, #0
 800b414:	f04f 0300 	mov.w	r3, #0
 800b418:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b41c:	4649      	mov	r1, r9
 800b41e:	008b      	lsls	r3, r1, #2
 800b420:	4641      	mov	r1, r8
 800b422:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b426:	4641      	mov	r1, r8
 800b428:	008a      	lsls	r2, r1, #2
 800b42a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b42e:	f7f5 fbb7 	bl	8000ba0 <__aeabi_uldivmod>
 800b432:	4602      	mov	r2, r0
 800b434:	460b      	mov	r3, r1
 800b436:	4b39      	ldr	r3, [pc, #228]	; (800b51c <UART_SetConfig+0x4e4>)
 800b438:	fba3 1302 	umull	r1, r3, r3, r2
 800b43c:	095b      	lsrs	r3, r3, #5
 800b43e:	2164      	movs	r1, #100	; 0x64
 800b440:	fb01 f303 	mul.w	r3, r1, r3
 800b444:	1ad3      	subs	r3, r2, r3
 800b446:	011b      	lsls	r3, r3, #4
 800b448:	3332      	adds	r3, #50	; 0x32
 800b44a:	4a34      	ldr	r2, [pc, #208]	; (800b51c <UART_SetConfig+0x4e4>)
 800b44c:	fba2 2303 	umull	r2, r3, r2, r3
 800b450:	095b      	lsrs	r3, r3, #5
 800b452:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b456:	441c      	add	r4, r3
 800b458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b45c:	2200      	movs	r2, #0
 800b45e:	673b      	str	r3, [r7, #112]	; 0x70
 800b460:	677a      	str	r2, [r7, #116]	; 0x74
 800b462:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b466:	4642      	mov	r2, r8
 800b468:	464b      	mov	r3, r9
 800b46a:	1891      	adds	r1, r2, r2
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	415b      	adcs	r3, r3
 800b470:	60fb      	str	r3, [r7, #12]
 800b472:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b476:	4641      	mov	r1, r8
 800b478:	1851      	adds	r1, r2, r1
 800b47a:	6039      	str	r1, [r7, #0]
 800b47c:	4649      	mov	r1, r9
 800b47e:	414b      	adcs	r3, r1
 800b480:	607b      	str	r3, [r7, #4]
 800b482:	f04f 0200 	mov.w	r2, #0
 800b486:	f04f 0300 	mov.w	r3, #0
 800b48a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b48e:	4659      	mov	r1, fp
 800b490:	00cb      	lsls	r3, r1, #3
 800b492:	4651      	mov	r1, sl
 800b494:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b498:	4651      	mov	r1, sl
 800b49a:	00ca      	lsls	r2, r1, #3
 800b49c:	4610      	mov	r0, r2
 800b49e:	4619      	mov	r1, r3
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	4642      	mov	r2, r8
 800b4a4:	189b      	adds	r3, r3, r2
 800b4a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b4a8:	464b      	mov	r3, r9
 800b4aa:	460a      	mov	r2, r1
 800b4ac:	eb42 0303 	adc.w	r3, r2, r3
 800b4b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b4b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	663b      	str	r3, [r7, #96]	; 0x60
 800b4bc:	667a      	str	r2, [r7, #100]	; 0x64
 800b4be:	f04f 0200 	mov.w	r2, #0
 800b4c2:	f04f 0300 	mov.w	r3, #0
 800b4c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b4ca:	4649      	mov	r1, r9
 800b4cc:	008b      	lsls	r3, r1, #2
 800b4ce:	4641      	mov	r1, r8
 800b4d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b4d4:	4641      	mov	r1, r8
 800b4d6:	008a      	lsls	r2, r1, #2
 800b4d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b4dc:	f7f5 fb60 	bl	8000ba0 <__aeabi_uldivmod>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	4b0d      	ldr	r3, [pc, #52]	; (800b51c <UART_SetConfig+0x4e4>)
 800b4e6:	fba3 1302 	umull	r1, r3, r3, r2
 800b4ea:	095b      	lsrs	r3, r3, #5
 800b4ec:	2164      	movs	r1, #100	; 0x64
 800b4ee:	fb01 f303 	mul.w	r3, r1, r3
 800b4f2:	1ad3      	subs	r3, r2, r3
 800b4f4:	011b      	lsls	r3, r3, #4
 800b4f6:	3332      	adds	r3, #50	; 0x32
 800b4f8:	4a08      	ldr	r2, [pc, #32]	; (800b51c <UART_SetConfig+0x4e4>)
 800b4fa:	fba2 2303 	umull	r2, r3, r2, r3
 800b4fe:	095b      	lsrs	r3, r3, #5
 800b500:	f003 020f 	and.w	r2, r3, #15
 800b504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4422      	add	r2, r4
 800b50c:	609a      	str	r2, [r3, #8]
}
 800b50e:	bf00      	nop
 800b510:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b514:	46bd      	mov	sp, r7
 800b516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b51a:	bf00      	nop
 800b51c:	51eb851f 	.word	0x51eb851f

0800b520 <calloc>:
 800b520:	4b02      	ldr	r3, [pc, #8]	; (800b52c <calloc+0xc>)
 800b522:	460a      	mov	r2, r1
 800b524:	4601      	mov	r1, r0
 800b526:	6818      	ldr	r0, [r3, #0]
 800b528:	f000 b852 	b.w	800b5d0 <_calloc_r>
 800b52c:	200003bc 	.word	0x200003bc

0800b530 <__errno>:
 800b530:	4b01      	ldr	r3, [pc, #4]	; (800b538 <__errno+0x8>)
 800b532:	6818      	ldr	r0, [r3, #0]
 800b534:	4770      	bx	lr
 800b536:	bf00      	nop
 800b538:	200003bc 	.word	0x200003bc

0800b53c <__libc_init_array>:
 800b53c:	b570      	push	{r4, r5, r6, lr}
 800b53e:	4d0d      	ldr	r5, [pc, #52]	; (800b574 <__libc_init_array+0x38>)
 800b540:	4c0d      	ldr	r4, [pc, #52]	; (800b578 <__libc_init_array+0x3c>)
 800b542:	1b64      	subs	r4, r4, r5
 800b544:	10a4      	asrs	r4, r4, #2
 800b546:	2600      	movs	r6, #0
 800b548:	42a6      	cmp	r6, r4
 800b54a:	d109      	bne.n	800b560 <__libc_init_array+0x24>
 800b54c:	4d0b      	ldr	r5, [pc, #44]	; (800b57c <__libc_init_array+0x40>)
 800b54e:	4c0c      	ldr	r4, [pc, #48]	; (800b580 <__libc_init_array+0x44>)
 800b550:	f002 fb48 	bl	800dbe4 <_init>
 800b554:	1b64      	subs	r4, r4, r5
 800b556:	10a4      	asrs	r4, r4, #2
 800b558:	2600      	movs	r6, #0
 800b55a:	42a6      	cmp	r6, r4
 800b55c:	d105      	bne.n	800b56a <__libc_init_array+0x2e>
 800b55e:	bd70      	pop	{r4, r5, r6, pc}
 800b560:	f855 3b04 	ldr.w	r3, [r5], #4
 800b564:	4798      	blx	r3
 800b566:	3601      	adds	r6, #1
 800b568:	e7ee      	b.n	800b548 <__libc_init_array+0xc>
 800b56a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b56e:	4798      	blx	r3
 800b570:	3601      	adds	r6, #1
 800b572:	e7f2      	b.n	800b55a <__libc_init_array+0x1e>
 800b574:	0800de38 	.word	0x0800de38
 800b578:	0800de38 	.word	0x0800de38
 800b57c:	0800de38 	.word	0x0800de38
 800b580:	0800de3c 	.word	0x0800de3c

0800b584 <malloc>:
 800b584:	4b02      	ldr	r3, [pc, #8]	; (800b590 <malloc+0xc>)
 800b586:	4601      	mov	r1, r0
 800b588:	6818      	ldr	r0, [r3, #0]
 800b58a:	f000 b8a3 	b.w	800b6d4 <_malloc_r>
 800b58e:	bf00      	nop
 800b590:	200003bc 	.word	0x200003bc

0800b594 <free>:
 800b594:	4b02      	ldr	r3, [pc, #8]	; (800b5a0 <free+0xc>)
 800b596:	4601      	mov	r1, r0
 800b598:	6818      	ldr	r0, [r3, #0]
 800b59a:	f000 b82f 	b.w	800b5fc <_free_r>
 800b59e:	bf00      	nop
 800b5a0:	200003bc 	.word	0x200003bc

0800b5a4 <memcpy>:
 800b5a4:	440a      	add	r2, r1
 800b5a6:	4291      	cmp	r1, r2
 800b5a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5ac:	d100      	bne.n	800b5b0 <memcpy+0xc>
 800b5ae:	4770      	bx	lr
 800b5b0:	b510      	push	{r4, lr}
 800b5b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5ba:	4291      	cmp	r1, r2
 800b5bc:	d1f9      	bne.n	800b5b2 <memcpy+0xe>
 800b5be:	bd10      	pop	{r4, pc}

0800b5c0 <memset>:
 800b5c0:	4402      	add	r2, r0
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d100      	bne.n	800b5ca <memset+0xa>
 800b5c8:	4770      	bx	lr
 800b5ca:	f803 1b01 	strb.w	r1, [r3], #1
 800b5ce:	e7f9      	b.n	800b5c4 <memset+0x4>

0800b5d0 <_calloc_r>:
 800b5d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5d2:	fba1 2402 	umull	r2, r4, r1, r2
 800b5d6:	b94c      	cbnz	r4, 800b5ec <_calloc_r+0x1c>
 800b5d8:	4611      	mov	r1, r2
 800b5da:	9201      	str	r2, [sp, #4]
 800b5dc:	f000 f87a 	bl	800b6d4 <_malloc_r>
 800b5e0:	9a01      	ldr	r2, [sp, #4]
 800b5e2:	4605      	mov	r5, r0
 800b5e4:	b930      	cbnz	r0, 800b5f4 <_calloc_r+0x24>
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	b003      	add	sp, #12
 800b5ea:	bd30      	pop	{r4, r5, pc}
 800b5ec:	220c      	movs	r2, #12
 800b5ee:	6002      	str	r2, [r0, #0]
 800b5f0:	2500      	movs	r5, #0
 800b5f2:	e7f8      	b.n	800b5e6 <_calloc_r+0x16>
 800b5f4:	4621      	mov	r1, r4
 800b5f6:	f7ff ffe3 	bl	800b5c0 <memset>
 800b5fa:	e7f4      	b.n	800b5e6 <_calloc_r+0x16>

0800b5fc <_free_r>:
 800b5fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5fe:	2900      	cmp	r1, #0
 800b600:	d044      	beq.n	800b68c <_free_r+0x90>
 800b602:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b606:	9001      	str	r0, [sp, #4]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	f1a1 0404 	sub.w	r4, r1, #4
 800b60e:	bfb8      	it	lt
 800b610:	18e4      	addlt	r4, r4, r3
 800b612:	f000 f8e3 	bl	800b7dc <__malloc_lock>
 800b616:	4a1e      	ldr	r2, [pc, #120]	; (800b690 <_free_r+0x94>)
 800b618:	9801      	ldr	r0, [sp, #4]
 800b61a:	6813      	ldr	r3, [r2, #0]
 800b61c:	b933      	cbnz	r3, 800b62c <_free_r+0x30>
 800b61e:	6063      	str	r3, [r4, #4]
 800b620:	6014      	str	r4, [r2, #0]
 800b622:	b003      	add	sp, #12
 800b624:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b628:	f000 b8de 	b.w	800b7e8 <__malloc_unlock>
 800b62c:	42a3      	cmp	r3, r4
 800b62e:	d908      	bls.n	800b642 <_free_r+0x46>
 800b630:	6825      	ldr	r5, [r4, #0]
 800b632:	1961      	adds	r1, r4, r5
 800b634:	428b      	cmp	r3, r1
 800b636:	bf01      	itttt	eq
 800b638:	6819      	ldreq	r1, [r3, #0]
 800b63a:	685b      	ldreq	r3, [r3, #4]
 800b63c:	1949      	addeq	r1, r1, r5
 800b63e:	6021      	streq	r1, [r4, #0]
 800b640:	e7ed      	b.n	800b61e <_free_r+0x22>
 800b642:	461a      	mov	r2, r3
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	b10b      	cbz	r3, 800b64c <_free_r+0x50>
 800b648:	42a3      	cmp	r3, r4
 800b64a:	d9fa      	bls.n	800b642 <_free_r+0x46>
 800b64c:	6811      	ldr	r1, [r2, #0]
 800b64e:	1855      	adds	r5, r2, r1
 800b650:	42a5      	cmp	r5, r4
 800b652:	d10b      	bne.n	800b66c <_free_r+0x70>
 800b654:	6824      	ldr	r4, [r4, #0]
 800b656:	4421      	add	r1, r4
 800b658:	1854      	adds	r4, r2, r1
 800b65a:	42a3      	cmp	r3, r4
 800b65c:	6011      	str	r1, [r2, #0]
 800b65e:	d1e0      	bne.n	800b622 <_free_r+0x26>
 800b660:	681c      	ldr	r4, [r3, #0]
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	6053      	str	r3, [r2, #4]
 800b666:	4421      	add	r1, r4
 800b668:	6011      	str	r1, [r2, #0]
 800b66a:	e7da      	b.n	800b622 <_free_r+0x26>
 800b66c:	d902      	bls.n	800b674 <_free_r+0x78>
 800b66e:	230c      	movs	r3, #12
 800b670:	6003      	str	r3, [r0, #0]
 800b672:	e7d6      	b.n	800b622 <_free_r+0x26>
 800b674:	6825      	ldr	r5, [r4, #0]
 800b676:	1961      	adds	r1, r4, r5
 800b678:	428b      	cmp	r3, r1
 800b67a:	bf04      	itt	eq
 800b67c:	6819      	ldreq	r1, [r3, #0]
 800b67e:	685b      	ldreq	r3, [r3, #4]
 800b680:	6063      	str	r3, [r4, #4]
 800b682:	bf04      	itt	eq
 800b684:	1949      	addeq	r1, r1, r5
 800b686:	6021      	streq	r1, [r4, #0]
 800b688:	6054      	str	r4, [r2, #4]
 800b68a:	e7ca      	b.n	800b622 <_free_r+0x26>
 800b68c:	b003      	add	sp, #12
 800b68e:	bd30      	pop	{r4, r5, pc}
 800b690:	20001380 	.word	0x20001380

0800b694 <sbrk_aligned>:
 800b694:	b570      	push	{r4, r5, r6, lr}
 800b696:	4e0e      	ldr	r6, [pc, #56]	; (800b6d0 <sbrk_aligned+0x3c>)
 800b698:	460c      	mov	r4, r1
 800b69a:	6831      	ldr	r1, [r6, #0]
 800b69c:	4605      	mov	r5, r0
 800b69e:	b911      	cbnz	r1, 800b6a6 <sbrk_aligned+0x12>
 800b6a0:	f000 f88c 	bl	800b7bc <_sbrk_r>
 800b6a4:	6030      	str	r0, [r6, #0]
 800b6a6:	4621      	mov	r1, r4
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	f000 f887 	bl	800b7bc <_sbrk_r>
 800b6ae:	1c43      	adds	r3, r0, #1
 800b6b0:	d00a      	beq.n	800b6c8 <sbrk_aligned+0x34>
 800b6b2:	1cc4      	adds	r4, r0, #3
 800b6b4:	f024 0403 	bic.w	r4, r4, #3
 800b6b8:	42a0      	cmp	r0, r4
 800b6ba:	d007      	beq.n	800b6cc <sbrk_aligned+0x38>
 800b6bc:	1a21      	subs	r1, r4, r0
 800b6be:	4628      	mov	r0, r5
 800b6c0:	f000 f87c 	bl	800b7bc <_sbrk_r>
 800b6c4:	3001      	adds	r0, #1
 800b6c6:	d101      	bne.n	800b6cc <sbrk_aligned+0x38>
 800b6c8:	f04f 34ff 	mov.w	r4, #4294967295
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	bd70      	pop	{r4, r5, r6, pc}
 800b6d0:	20001384 	.word	0x20001384

0800b6d4 <_malloc_r>:
 800b6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6d8:	1ccd      	adds	r5, r1, #3
 800b6da:	f025 0503 	bic.w	r5, r5, #3
 800b6de:	3508      	adds	r5, #8
 800b6e0:	2d0c      	cmp	r5, #12
 800b6e2:	bf38      	it	cc
 800b6e4:	250c      	movcc	r5, #12
 800b6e6:	2d00      	cmp	r5, #0
 800b6e8:	4607      	mov	r7, r0
 800b6ea:	db01      	blt.n	800b6f0 <_malloc_r+0x1c>
 800b6ec:	42a9      	cmp	r1, r5
 800b6ee:	d905      	bls.n	800b6fc <_malloc_r+0x28>
 800b6f0:	230c      	movs	r3, #12
 800b6f2:	603b      	str	r3, [r7, #0]
 800b6f4:	2600      	movs	r6, #0
 800b6f6:	4630      	mov	r0, r6
 800b6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6fc:	4e2e      	ldr	r6, [pc, #184]	; (800b7b8 <_malloc_r+0xe4>)
 800b6fe:	f000 f86d 	bl	800b7dc <__malloc_lock>
 800b702:	6833      	ldr	r3, [r6, #0]
 800b704:	461c      	mov	r4, r3
 800b706:	bb34      	cbnz	r4, 800b756 <_malloc_r+0x82>
 800b708:	4629      	mov	r1, r5
 800b70a:	4638      	mov	r0, r7
 800b70c:	f7ff ffc2 	bl	800b694 <sbrk_aligned>
 800b710:	1c43      	adds	r3, r0, #1
 800b712:	4604      	mov	r4, r0
 800b714:	d14d      	bne.n	800b7b2 <_malloc_r+0xde>
 800b716:	6834      	ldr	r4, [r6, #0]
 800b718:	4626      	mov	r6, r4
 800b71a:	2e00      	cmp	r6, #0
 800b71c:	d140      	bne.n	800b7a0 <_malloc_r+0xcc>
 800b71e:	6823      	ldr	r3, [r4, #0]
 800b720:	4631      	mov	r1, r6
 800b722:	4638      	mov	r0, r7
 800b724:	eb04 0803 	add.w	r8, r4, r3
 800b728:	f000 f848 	bl	800b7bc <_sbrk_r>
 800b72c:	4580      	cmp	r8, r0
 800b72e:	d13a      	bne.n	800b7a6 <_malloc_r+0xd2>
 800b730:	6821      	ldr	r1, [r4, #0]
 800b732:	3503      	adds	r5, #3
 800b734:	1a6d      	subs	r5, r5, r1
 800b736:	f025 0503 	bic.w	r5, r5, #3
 800b73a:	3508      	adds	r5, #8
 800b73c:	2d0c      	cmp	r5, #12
 800b73e:	bf38      	it	cc
 800b740:	250c      	movcc	r5, #12
 800b742:	4629      	mov	r1, r5
 800b744:	4638      	mov	r0, r7
 800b746:	f7ff ffa5 	bl	800b694 <sbrk_aligned>
 800b74a:	3001      	adds	r0, #1
 800b74c:	d02b      	beq.n	800b7a6 <_malloc_r+0xd2>
 800b74e:	6823      	ldr	r3, [r4, #0]
 800b750:	442b      	add	r3, r5
 800b752:	6023      	str	r3, [r4, #0]
 800b754:	e00e      	b.n	800b774 <_malloc_r+0xa0>
 800b756:	6822      	ldr	r2, [r4, #0]
 800b758:	1b52      	subs	r2, r2, r5
 800b75a:	d41e      	bmi.n	800b79a <_malloc_r+0xc6>
 800b75c:	2a0b      	cmp	r2, #11
 800b75e:	d916      	bls.n	800b78e <_malloc_r+0xba>
 800b760:	1961      	adds	r1, r4, r5
 800b762:	42a3      	cmp	r3, r4
 800b764:	6025      	str	r5, [r4, #0]
 800b766:	bf18      	it	ne
 800b768:	6059      	strne	r1, [r3, #4]
 800b76a:	6863      	ldr	r3, [r4, #4]
 800b76c:	bf08      	it	eq
 800b76e:	6031      	streq	r1, [r6, #0]
 800b770:	5162      	str	r2, [r4, r5]
 800b772:	604b      	str	r3, [r1, #4]
 800b774:	4638      	mov	r0, r7
 800b776:	f104 060b 	add.w	r6, r4, #11
 800b77a:	f000 f835 	bl	800b7e8 <__malloc_unlock>
 800b77e:	f026 0607 	bic.w	r6, r6, #7
 800b782:	1d23      	adds	r3, r4, #4
 800b784:	1af2      	subs	r2, r6, r3
 800b786:	d0b6      	beq.n	800b6f6 <_malloc_r+0x22>
 800b788:	1b9b      	subs	r3, r3, r6
 800b78a:	50a3      	str	r3, [r4, r2]
 800b78c:	e7b3      	b.n	800b6f6 <_malloc_r+0x22>
 800b78e:	6862      	ldr	r2, [r4, #4]
 800b790:	42a3      	cmp	r3, r4
 800b792:	bf0c      	ite	eq
 800b794:	6032      	streq	r2, [r6, #0]
 800b796:	605a      	strne	r2, [r3, #4]
 800b798:	e7ec      	b.n	800b774 <_malloc_r+0xa0>
 800b79a:	4623      	mov	r3, r4
 800b79c:	6864      	ldr	r4, [r4, #4]
 800b79e:	e7b2      	b.n	800b706 <_malloc_r+0x32>
 800b7a0:	4634      	mov	r4, r6
 800b7a2:	6876      	ldr	r6, [r6, #4]
 800b7a4:	e7b9      	b.n	800b71a <_malloc_r+0x46>
 800b7a6:	230c      	movs	r3, #12
 800b7a8:	603b      	str	r3, [r7, #0]
 800b7aa:	4638      	mov	r0, r7
 800b7ac:	f000 f81c 	bl	800b7e8 <__malloc_unlock>
 800b7b0:	e7a1      	b.n	800b6f6 <_malloc_r+0x22>
 800b7b2:	6025      	str	r5, [r4, #0]
 800b7b4:	e7de      	b.n	800b774 <_malloc_r+0xa0>
 800b7b6:	bf00      	nop
 800b7b8:	20001380 	.word	0x20001380

0800b7bc <_sbrk_r>:
 800b7bc:	b538      	push	{r3, r4, r5, lr}
 800b7be:	4d06      	ldr	r5, [pc, #24]	; (800b7d8 <_sbrk_r+0x1c>)
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	4604      	mov	r4, r0
 800b7c4:	4608      	mov	r0, r1
 800b7c6:	602b      	str	r3, [r5, #0]
 800b7c8:	f7f9 fefc 	bl	80055c4 <_sbrk>
 800b7cc:	1c43      	adds	r3, r0, #1
 800b7ce:	d102      	bne.n	800b7d6 <_sbrk_r+0x1a>
 800b7d0:	682b      	ldr	r3, [r5, #0]
 800b7d2:	b103      	cbz	r3, 800b7d6 <_sbrk_r+0x1a>
 800b7d4:	6023      	str	r3, [r4, #0]
 800b7d6:	bd38      	pop	{r3, r4, r5, pc}
 800b7d8:	20001388 	.word	0x20001388

0800b7dc <__malloc_lock>:
 800b7dc:	4801      	ldr	r0, [pc, #4]	; (800b7e4 <__malloc_lock+0x8>)
 800b7de:	f000 b809 	b.w	800b7f4 <__retarget_lock_acquire_recursive>
 800b7e2:	bf00      	nop
 800b7e4:	2000138c 	.word	0x2000138c

0800b7e8 <__malloc_unlock>:
 800b7e8:	4801      	ldr	r0, [pc, #4]	; (800b7f0 <__malloc_unlock+0x8>)
 800b7ea:	f000 b804 	b.w	800b7f6 <__retarget_lock_release_recursive>
 800b7ee:	bf00      	nop
 800b7f0:	2000138c 	.word	0x2000138c

0800b7f4 <__retarget_lock_acquire_recursive>:
 800b7f4:	4770      	bx	lr

0800b7f6 <__retarget_lock_release_recursive>:
 800b7f6:	4770      	bx	lr

0800b7f8 <cos>:
 800b7f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b7fa:	ec53 2b10 	vmov	r2, r3, d0
 800b7fe:	4826      	ldr	r0, [pc, #152]	; (800b898 <cos+0xa0>)
 800b800:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b804:	4281      	cmp	r1, r0
 800b806:	dc06      	bgt.n	800b816 <cos+0x1e>
 800b808:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b890 <cos+0x98>
 800b80c:	b005      	add	sp, #20
 800b80e:	f85d eb04 	ldr.w	lr, [sp], #4
 800b812:	f001 bc3d 	b.w	800d090 <__kernel_cos>
 800b816:	4821      	ldr	r0, [pc, #132]	; (800b89c <cos+0xa4>)
 800b818:	4281      	cmp	r1, r0
 800b81a:	dd09      	ble.n	800b830 <cos+0x38>
 800b81c:	ee10 0a10 	vmov	r0, s0
 800b820:	4619      	mov	r1, r3
 800b822:	f7f4 fcdd 	bl	80001e0 <__aeabi_dsub>
 800b826:	ec41 0b10 	vmov	d0, r0, r1
 800b82a:	b005      	add	sp, #20
 800b82c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b830:	4668      	mov	r0, sp
 800b832:	f001 f96d 	bl	800cb10 <__ieee754_rem_pio2>
 800b836:	f000 0003 	and.w	r0, r0, #3
 800b83a:	2801      	cmp	r0, #1
 800b83c:	d00b      	beq.n	800b856 <cos+0x5e>
 800b83e:	2802      	cmp	r0, #2
 800b840:	d016      	beq.n	800b870 <cos+0x78>
 800b842:	b9e0      	cbnz	r0, 800b87e <cos+0x86>
 800b844:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b848:	ed9d 0b00 	vldr	d0, [sp]
 800b84c:	f001 fc20 	bl	800d090 <__kernel_cos>
 800b850:	ec51 0b10 	vmov	r0, r1, d0
 800b854:	e7e7      	b.n	800b826 <cos+0x2e>
 800b856:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b85a:	ed9d 0b00 	vldr	d0, [sp]
 800b85e:	f002 f82f 	bl	800d8c0 <__kernel_sin>
 800b862:	ec53 2b10 	vmov	r2, r3, d0
 800b866:	ee10 0a10 	vmov	r0, s0
 800b86a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b86e:	e7da      	b.n	800b826 <cos+0x2e>
 800b870:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b874:	ed9d 0b00 	vldr	d0, [sp]
 800b878:	f001 fc0a 	bl	800d090 <__kernel_cos>
 800b87c:	e7f1      	b.n	800b862 <cos+0x6a>
 800b87e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b882:	ed9d 0b00 	vldr	d0, [sp]
 800b886:	2001      	movs	r0, #1
 800b888:	f002 f81a 	bl	800d8c0 <__kernel_sin>
 800b88c:	e7e0      	b.n	800b850 <cos+0x58>
 800b88e:	bf00      	nop
	...
 800b898:	3fe921fb 	.word	0x3fe921fb
 800b89c:	7fefffff 	.word	0x7fefffff

0800b8a0 <floor>:
 800b8a0:	ec51 0b10 	vmov	r0, r1, d0
 800b8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b8ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b8b0:	2e13      	cmp	r6, #19
 800b8b2:	ee10 5a10 	vmov	r5, s0
 800b8b6:	ee10 8a10 	vmov	r8, s0
 800b8ba:	460c      	mov	r4, r1
 800b8bc:	dc32      	bgt.n	800b924 <floor+0x84>
 800b8be:	2e00      	cmp	r6, #0
 800b8c0:	da14      	bge.n	800b8ec <floor+0x4c>
 800b8c2:	a333      	add	r3, pc, #204	; (adr r3, 800b990 <floor+0xf0>)
 800b8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c8:	f7f4 fc8c 	bl	80001e4 <__adddf3>
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	f7f5 f8ce 	bl	8000a70 <__aeabi_dcmpgt>
 800b8d4:	b138      	cbz	r0, 800b8e6 <floor+0x46>
 800b8d6:	2c00      	cmp	r4, #0
 800b8d8:	da57      	bge.n	800b98a <floor+0xea>
 800b8da:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b8de:	431d      	orrs	r5, r3
 800b8e0:	d001      	beq.n	800b8e6 <floor+0x46>
 800b8e2:	4c2d      	ldr	r4, [pc, #180]	; (800b998 <floor+0xf8>)
 800b8e4:	2500      	movs	r5, #0
 800b8e6:	4621      	mov	r1, r4
 800b8e8:	4628      	mov	r0, r5
 800b8ea:	e025      	b.n	800b938 <floor+0x98>
 800b8ec:	4f2b      	ldr	r7, [pc, #172]	; (800b99c <floor+0xfc>)
 800b8ee:	4137      	asrs	r7, r6
 800b8f0:	ea01 0307 	and.w	r3, r1, r7
 800b8f4:	4303      	orrs	r3, r0
 800b8f6:	d01f      	beq.n	800b938 <floor+0x98>
 800b8f8:	a325      	add	r3, pc, #148	; (adr r3, 800b990 <floor+0xf0>)
 800b8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fe:	f7f4 fc71 	bl	80001e4 <__adddf3>
 800b902:	2200      	movs	r2, #0
 800b904:	2300      	movs	r3, #0
 800b906:	f7f5 f8b3 	bl	8000a70 <__aeabi_dcmpgt>
 800b90a:	2800      	cmp	r0, #0
 800b90c:	d0eb      	beq.n	800b8e6 <floor+0x46>
 800b90e:	2c00      	cmp	r4, #0
 800b910:	bfbe      	ittt	lt
 800b912:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b916:	fa43 f606 	asrlt.w	r6, r3, r6
 800b91a:	19a4      	addlt	r4, r4, r6
 800b91c:	ea24 0407 	bic.w	r4, r4, r7
 800b920:	2500      	movs	r5, #0
 800b922:	e7e0      	b.n	800b8e6 <floor+0x46>
 800b924:	2e33      	cmp	r6, #51	; 0x33
 800b926:	dd0b      	ble.n	800b940 <floor+0xa0>
 800b928:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b92c:	d104      	bne.n	800b938 <floor+0x98>
 800b92e:	ee10 2a10 	vmov	r2, s0
 800b932:	460b      	mov	r3, r1
 800b934:	f7f4 fc56 	bl	80001e4 <__adddf3>
 800b938:	ec41 0b10 	vmov	d0, r0, r1
 800b93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b940:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b944:	f04f 33ff 	mov.w	r3, #4294967295
 800b948:	fa23 f707 	lsr.w	r7, r3, r7
 800b94c:	4207      	tst	r7, r0
 800b94e:	d0f3      	beq.n	800b938 <floor+0x98>
 800b950:	a30f      	add	r3, pc, #60	; (adr r3, 800b990 <floor+0xf0>)
 800b952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b956:	f7f4 fc45 	bl	80001e4 <__adddf3>
 800b95a:	2200      	movs	r2, #0
 800b95c:	2300      	movs	r3, #0
 800b95e:	f7f5 f887 	bl	8000a70 <__aeabi_dcmpgt>
 800b962:	2800      	cmp	r0, #0
 800b964:	d0bf      	beq.n	800b8e6 <floor+0x46>
 800b966:	2c00      	cmp	r4, #0
 800b968:	da02      	bge.n	800b970 <floor+0xd0>
 800b96a:	2e14      	cmp	r6, #20
 800b96c:	d103      	bne.n	800b976 <floor+0xd6>
 800b96e:	3401      	adds	r4, #1
 800b970:	ea25 0507 	bic.w	r5, r5, r7
 800b974:	e7b7      	b.n	800b8e6 <floor+0x46>
 800b976:	2301      	movs	r3, #1
 800b978:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b97c:	fa03 f606 	lsl.w	r6, r3, r6
 800b980:	4435      	add	r5, r6
 800b982:	4545      	cmp	r5, r8
 800b984:	bf38      	it	cc
 800b986:	18e4      	addcc	r4, r4, r3
 800b988:	e7f2      	b.n	800b970 <floor+0xd0>
 800b98a:	2500      	movs	r5, #0
 800b98c:	462c      	mov	r4, r5
 800b98e:	e7aa      	b.n	800b8e6 <floor+0x46>
 800b990:	8800759c 	.word	0x8800759c
 800b994:	7e37e43c 	.word	0x7e37e43c
 800b998:	bff00000 	.word	0xbff00000
 800b99c:	000fffff 	.word	0x000fffff

0800b9a0 <sin>:
 800b9a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b9a2:	ec53 2b10 	vmov	r2, r3, d0
 800b9a6:	4828      	ldr	r0, [pc, #160]	; (800ba48 <sin+0xa8>)
 800b9a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b9ac:	4281      	cmp	r1, r0
 800b9ae:	dc07      	bgt.n	800b9c0 <sin+0x20>
 800b9b0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800ba40 <sin+0xa0>
 800b9b4:	2000      	movs	r0, #0
 800b9b6:	b005      	add	sp, #20
 800b9b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9bc:	f001 bf80 	b.w	800d8c0 <__kernel_sin>
 800b9c0:	4822      	ldr	r0, [pc, #136]	; (800ba4c <sin+0xac>)
 800b9c2:	4281      	cmp	r1, r0
 800b9c4:	dd09      	ble.n	800b9da <sin+0x3a>
 800b9c6:	ee10 0a10 	vmov	r0, s0
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	f7f4 fc08 	bl	80001e0 <__aeabi_dsub>
 800b9d0:	ec41 0b10 	vmov	d0, r0, r1
 800b9d4:	b005      	add	sp, #20
 800b9d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b9da:	4668      	mov	r0, sp
 800b9dc:	f001 f898 	bl	800cb10 <__ieee754_rem_pio2>
 800b9e0:	f000 0003 	and.w	r0, r0, #3
 800b9e4:	2801      	cmp	r0, #1
 800b9e6:	d00c      	beq.n	800ba02 <sin+0x62>
 800b9e8:	2802      	cmp	r0, #2
 800b9ea:	d011      	beq.n	800ba10 <sin+0x70>
 800b9ec:	b9f0      	cbnz	r0, 800ba2c <sin+0x8c>
 800b9ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b9f2:	ed9d 0b00 	vldr	d0, [sp]
 800b9f6:	2001      	movs	r0, #1
 800b9f8:	f001 ff62 	bl	800d8c0 <__kernel_sin>
 800b9fc:	ec51 0b10 	vmov	r0, r1, d0
 800ba00:	e7e6      	b.n	800b9d0 <sin+0x30>
 800ba02:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ba06:	ed9d 0b00 	vldr	d0, [sp]
 800ba0a:	f001 fb41 	bl	800d090 <__kernel_cos>
 800ba0e:	e7f5      	b.n	800b9fc <sin+0x5c>
 800ba10:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ba14:	ed9d 0b00 	vldr	d0, [sp]
 800ba18:	2001      	movs	r0, #1
 800ba1a:	f001 ff51 	bl	800d8c0 <__kernel_sin>
 800ba1e:	ec53 2b10 	vmov	r2, r3, d0
 800ba22:	ee10 0a10 	vmov	r0, s0
 800ba26:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ba2a:	e7d1      	b.n	800b9d0 <sin+0x30>
 800ba2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ba30:	ed9d 0b00 	vldr	d0, [sp]
 800ba34:	f001 fb2c 	bl	800d090 <__kernel_cos>
 800ba38:	e7f1      	b.n	800ba1e <sin+0x7e>
 800ba3a:	bf00      	nop
 800ba3c:	f3af 8000 	nop.w
	...
 800ba48:	3fe921fb 	.word	0x3fe921fb
 800ba4c:	7fefffff 	.word	0x7fefffff

0800ba50 <acos>:
 800ba50:	b538      	push	{r3, r4, r5, lr}
 800ba52:	ed2d 8b02 	vpush	{d8}
 800ba56:	ec55 4b10 	vmov	r4, r5, d0
 800ba5a:	f000 f8c9 	bl	800bbf0 <__ieee754_acos>
 800ba5e:	4622      	mov	r2, r4
 800ba60:	462b      	mov	r3, r5
 800ba62:	4620      	mov	r0, r4
 800ba64:	4629      	mov	r1, r5
 800ba66:	eeb0 8a40 	vmov.f32	s16, s0
 800ba6a:	eef0 8a60 	vmov.f32	s17, s1
 800ba6e:	f7f5 f809 	bl	8000a84 <__aeabi_dcmpun>
 800ba72:	b9a8      	cbnz	r0, 800baa0 <acos+0x50>
 800ba74:	ec45 4b10 	vmov	d0, r4, r5
 800ba78:	f002 f810 	bl	800da9c <fabs>
 800ba7c:	4b0c      	ldr	r3, [pc, #48]	; (800bab0 <acos+0x60>)
 800ba7e:	ec51 0b10 	vmov	r0, r1, d0
 800ba82:	2200      	movs	r2, #0
 800ba84:	f7f4 fff4 	bl	8000a70 <__aeabi_dcmpgt>
 800ba88:	b150      	cbz	r0, 800baa0 <acos+0x50>
 800ba8a:	f7ff fd51 	bl	800b530 <__errno>
 800ba8e:	ecbd 8b02 	vpop	{d8}
 800ba92:	2321      	movs	r3, #33	; 0x21
 800ba94:	6003      	str	r3, [r0, #0]
 800ba96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba9a:	4806      	ldr	r0, [pc, #24]	; (800bab4 <acos+0x64>)
 800ba9c:	f002 b814 	b.w	800dac8 <nan>
 800baa0:	eeb0 0a48 	vmov.f32	s0, s16
 800baa4:	eef0 0a68 	vmov.f32	s1, s17
 800baa8:	ecbd 8b02 	vpop	{d8}
 800baac:	bd38      	pop	{r3, r4, r5, pc}
 800baae:	bf00      	nop
 800bab0:	3ff00000 	.word	0x3ff00000
 800bab4:	0800dc20 	.word	0x0800dc20

0800bab8 <pow>:
 800bab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baba:	ed2d 8b02 	vpush	{d8}
 800babe:	eeb0 8a40 	vmov.f32	s16, s0
 800bac2:	eef0 8a60 	vmov.f32	s17, s1
 800bac6:	ec55 4b11 	vmov	r4, r5, d1
 800baca:	f000 faf1 	bl	800c0b0 <__ieee754_pow>
 800bace:	4622      	mov	r2, r4
 800bad0:	462b      	mov	r3, r5
 800bad2:	4620      	mov	r0, r4
 800bad4:	4629      	mov	r1, r5
 800bad6:	ec57 6b10 	vmov	r6, r7, d0
 800bada:	f7f4 ffd3 	bl	8000a84 <__aeabi_dcmpun>
 800bade:	2800      	cmp	r0, #0
 800bae0:	d13b      	bne.n	800bb5a <pow+0xa2>
 800bae2:	ec51 0b18 	vmov	r0, r1, d8
 800bae6:	2200      	movs	r2, #0
 800bae8:	2300      	movs	r3, #0
 800baea:	f7f4 ff99 	bl	8000a20 <__aeabi_dcmpeq>
 800baee:	b1b8      	cbz	r0, 800bb20 <pow+0x68>
 800baf0:	2200      	movs	r2, #0
 800baf2:	2300      	movs	r3, #0
 800baf4:	4620      	mov	r0, r4
 800baf6:	4629      	mov	r1, r5
 800baf8:	f7f4 ff92 	bl	8000a20 <__aeabi_dcmpeq>
 800bafc:	2800      	cmp	r0, #0
 800bafe:	d146      	bne.n	800bb8e <pow+0xd6>
 800bb00:	ec45 4b10 	vmov	d0, r4, r5
 800bb04:	f001 ffd3 	bl	800daae <finite>
 800bb08:	b338      	cbz	r0, 800bb5a <pow+0xa2>
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	4620      	mov	r0, r4
 800bb10:	4629      	mov	r1, r5
 800bb12:	f7f4 ff8f 	bl	8000a34 <__aeabi_dcmplt>
 800bb16:	b300      	cbz	r0, 800bb5a <pow+0xa2>
 800bb18:	f7ff fd0a 	bl	800b530 <__errno>
 800bb1c:	2322      	movs	r3, #34	; 0x22
 800bb1e:	e01b      	b.n	800bb58 <pow+0xa0>
 800bb20:	ec47 6b10 	vmov	d0, r6, r7
 800bb24:	f001 ffc3 	bl	800daae <finite>
 800bb28:	b9e0      	cbnz	r0, 800bb64 <pow+0xac>
 800bb2a:	eeb0 0a48 	vmov.f32	s0, s16
 800bb2e:	eef0 0a68 	vmov.f32	s1, s17
 800bb32:	f001 ffbc 	bl	800daae <finite>
 800bb36:	b1a8      	cbz	r0, 800bb64 <pow+0xac>
 800bb38:	ec45 4b10 	vmov	d0, r4, r5
 800bb3c:	f001 ffb7 	bl	800daae <finite>
 800bb40:	b180      	cbz	r0, 800bb64 <pow+0xac>
 800bb42:	4632      	mov	r2, r6
 800bb44:	463b      	mov	r3, r7
 800bb46:	4630      	mov	r0, r6
 800bb48:	4639      	mov	r1, r7
 800bb4a:	f7f4 ff9b 	bl	8000a84 <__aeabi_dcmpun>
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	d0e2      	beq.n	800bb18 <pow+0x60>
 800bb52:	f7ff fced 	bl	800b530 <__errno>
 800bb56:	2321      	movs	r3, #33	; 0x21
 800bb58:	6003      	str	r3, [r0, #0]
 800bb5a:	ecbd 8b02 	vpop	{d8}
 800bb5e:	ec47 6b10 	vmov	d0, r6, r7
 800bb62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb64:	2200      	movs	r2, #0
 800bb66:	2300      	movs	r3, #0
 800bb68:	4630      	mov	r0, r6
 800bb6a:	4639      	mov	r1, r7
 800bb6c:	f7f4 ff58 	bl	8000a20 <__aeabi_dcmpeq>
 800bb70:	2800      	cmp	r0, #0
 800bb72:	d0f2      	beq.n	800bb5a <pow+0xa2>
 800bb74:	eeb0 0a48 	vmov.f32	s0, s16
 800bb78:	eef0 0a68 	vmov.f32	s1, s17
 800bb7c:	f001 ff97 	bl	800daae <finite>
 800bb80:	2800      	cmp	r0, #0
 800bb82:	d0ea      	beq.n	800bb5a <pow+0xa2>
 800bb84:	ec45 4b10 	vmov	d0, r4, r5
 800bb88:	f001 ff91 	bl	800daae <finite>
 800bb8c:	e7c3      	b.n	800bb16 <pow+0x5e>
 800bb8e:	4f01      	ldr	r7, [pc, #4]	; (800bb94 <pow+0xdc>)
 800bb90:	2600      	movs	r6, #0
 800bb92:	e7e2      	b.n	800bb5a <pow+0xa2>
 800bb94:	3ff00000 	.word	0x3ff00000

0800bb98 <sqrt>:
 800bb98:	b538      	push	{r3, r4, r5, lr}
 800bb9a:	ed2d 8b02 	vpush	{d8}
 800bb9e:	ec55 4b10 	vmov	r4, r5, d0
 800bba2:	f001 f9c1 	bl	800cf28 <__ieee754_sqrt>
 800bba6:	4622      	mov	r2, r4
 800bba8:	462b      	mov	r3, r5
 800bbaa:	4620      	mov	r0, r4
 800bbac:	4629      	mov	r1, r5
 800bbae:	eeb0 8a40 	vmov.f32	s16, s0
 800bbb2:	eef0 8a60 	vmov.f32	s17, s1
 800bbb6:	f7f4 ff65 	bl	8000a84 <__aeabi_dcmpun>
 800bbba:	b990      	cbnz	r0, 800bbe2 <sqrt+0x4a>
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	4629      	mov	r1, r5
 800bbc4:	f7f4 ff36 	bl	8000a34 <__aeabi_dcmplt>
 800bbc8:	b158      	cbz	r0, 800bbe2 <sqrt+0x4a>
 800bbca:	f7ff fcb1 	bl	800b530 <__errno>
 800bbce:	2321      	movs	r3, #33	; 0x21
 800bbd0:	6003      	str	r3, [r0, #0]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	4610      	mov	r0, r2
 800bbd8:	4619      	mov	r1, r3
 800bbda:	f7f4 fde3 	bl	80007a4 <__aeabi_ddiv>
 800bbde:	ec41 0b18 	vmov	d8, r0, r1
 800bbe2:	eeb0 0a48 	vmov.f32	s0, s16
 800bbe6:	eef0 0a68 	vmov.f32	s1, s17
 800bbea:	ecbd 8b02 	vpop	{d8}
 800bbee:	bd38      	pop	{r3, r4, r5, pc}

0800bbf0 <__ieee754_acos>:
 800bbf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf4:	ec55 4b10 	vmov	r4, r5, d0
 800bbf8:	49b7      	ldr	r1, [pc, #732]	; (800bed8 <__ieee754_acos+0x2e8>)
 800bbfa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bbfe:	428b      	cmp	r3, r1
 800bc00:	dd1b      	ble.n	800bc3a <__ieee754_acos+0x4a>
 800bc02:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800bc06:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bc0a:	4323      	orrs	r3, r4
 800bc0c:	d106      	bne.n	800bc1c <__ieee754_acos+0x2c>
 800bc0e:	2d00      	cmp	r5, #0
 800bc10:	f300 8211 	bgt.w	800c036 <__ieee754_acos+0x446>
 800bc14:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800be70 <__ieee754_acos+0x280>
 800bc18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc1c:	ee10 2a10 	vmov	r2, s0
 800bc20:	462b      	mov	r3, r5
 800bc22:	ee10 0a10 	vmov	r0, s0
 800bc26:	4629      	mov	r1, r5
 800bc28:	f7f4 fada 	bl	80001e0 <__aeabi_dsub>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	460b      	mov	r3, r1
 800bc30:	f7f4 fdb8 	bl	80007a4 <__aeabi_ddiv>
 800bc34:	ec41 0b10 	vmov	d0, r0, r1
 800bc38:	e7ee      	b.n	800bc18 <__ieee754_acos+0x28>
 800bc3a:	49a8      	ldr	r1, [pc, #672]	; (800bedc <__ieee754_acos+0x2ec>)
 800bc3c:	428b      	cmp	r3, r1
 800bc3e:	f300 8087 	bgt.w	800bd50 <__ieee754_acos+0x160>
 800bc42:	4aa7      	ldr	r2, [pc, #668]	; (800bee0 <__ieee754_acos+0x2f0>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	f340 81f9 	ble.w	800c03c <__ieee754_acos+0x44c>
 800bc4a:	ee10 2a10 	vmov	r2, s0
 800bc4e:	ee10 0a10 	vmov	r0, s0
 800bc52:	462b      	mov	r3, r5
 800bc54:	4629      	mov	r1, r5
 800bc56:	f7f4 fc7b 	bl	8000550 <__aeabi_dmul>
 800bc5a:	a387      	add	r3, pc, #540	; (adr r3, 800be78 <__ieee754_acos+0x288>)
 800bc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc60:	4606      	mov	r6, r0
 800bc62:	460f      	mov	r7, r1
 800bc64:	f7f4 fc74 	bl	8000550 <__aeabi_dmul>
 800bc68:	a385      	add	r3, pc, #532	; (adr r3, 800be80 <__ieee754_acos+0x290>)
 800bc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6e:	f7f4 fab9 	bl	80001e4 <__adddf3>
 800bc72:	4632      	mov	r2, r6
 800bc74:	463b      	mov	r3, r7
 800bc76:	f7f4 fc6b 	bl	8000550 <__aeabi_dmul>
 800bc7a:	a383      	add	r3, pc, #524	; (adr r3, 800be88 <__ieee754_acos+0x298>)
 800bc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc80:	f7f4 faae 	bl	80001e0 <__aeabi_dsub>
 800bc84:	4632      	mov	r2, r6
 800bc86:	463b      	mov	r3, r7
 800bc88:	f7f4 fc62 	bl	8000550 <__aeabi_dmul>
 800bc8c:	a380      	add	r3, pc, #512	; (adr r3, 800be90 <__ieee754_acos+0x2a0>)
 800bc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc92:	f7f4 faa7 	bl	80001e4 <__adddf3>
 800bc96:	4632      	mov	r2, r6
 800bc98:	463b      	mov	r3, r7
 800bc9a:	f7f4 fc59 	bl	8000550 <__aeabi_dmul>
 800bc9e:	a37e      	add	r3, pc, #504	; (adr r3, 800be98 <__ieee754_acos+0x2a8>)
 800bca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca4:	f7f4 fa9c 	bl	80001e0 <__aeabi_dsub>
 800bca8:	4632      	mov	r2, r6
 800bcaa:	463b      	mov	r3, r7
 800bcac:	f7f4 fc50 	bl	8000550 <__aeabi_dmul>
 800bcb0:	a37b      	add	r3, pc, #492	; (adr r3, 800bea0 <__ieee754_acos+0x2b0>)
 800bcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb6:	f7f4 fa95 	bl	80001e4 <__adddf3>
 800bcba:	4632      	mov	r2, r6
 800bcbc:	463b      	mov	r3, r7
 800bcbe:	f7f4 fc47 	bl	8000550 <__aeabi_dmul>
 800bcc2:	a379      	add	r3, pc, #484	; (adr r3, 800bea8 <__ieee754_acos+0x2b8>)
 800bcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc8:	4680      	mov	r8, r0
 800bcca:	4689      	mov	r9, r1
 800bccc:	4630      	mov	r0, r6
 800bcce:	4639      	mov	r1, r7
 800bcd0:	f7f4 fc3e 	bl	8000550 <__aeabi_dmul>
 800bcd4:	a376      	add	r3, pc, #472	; (adr r3, 800beb0 <__ieee754_acos+0x2c0>)
 800bcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcda:	f7f4 fa81 	bl	80001e0 <__aeabi_dsub>
 800bcde:	4632      	mov	r2, r6
 800bce0:	463b      	mov	r3, r7
 800bce2:	f7f4 fc35 	bl	8000550 <__aeabi_dmul>
 800bce6:	a374      	add	r3, pc, #464	; (adr r3, 800beb8 <__ieee754_acos+0x2c8>)
 800bce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcec:	f7f4 fa7a 	bl	80001e4 <__adddf3>
 800bcf0:	4632      	mov	r2, r6
 800bcf2:	463b      	mov	r3, r7
 800bcf4:	f7f4 fc2c 	bl	8000550 <__aeabi_dmul>
 800bcf8:	a371      	add	r3, pc, #452	; (adr r3, 800bec0 <__ieee754_acos+0x2d0>)
 800bcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfe:	f7f4 fa6f 	bl	80001e0 <__aeabi_dsub>
 800bd02:	4632      	mov	r2, r6
 800bd04:	463b      	mov	r3, r7
 800bd06:	f7f4 fc23 	bl	8000550 <__aeabi_dmul>
 800bd0a:	4b76      	ldr	r3, [pc, #472]	; (800bee4 <__ieee754_acos+0x2f4>)
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f7f4 fa69 	bl	80001e4 <__adddf3>
 800bd12:	4602      	mov	r2, r0
 800bd14:	460b      	mov	r3, r1
 800bd16:	4640      	mov	r0, r8
 800bd18:	4649      	mov	r1, r9
 800bd1a:	f7f4 fd43 	bl	80007a4 <__aeabi_ddiv>
 800bd1e:	4622      	mov	r2, r4
 800bd20:	462b      	mov	r3, r5
 800bd22:	f7f4 fc15 	bl	8000550 <__aeabi_dmul>
 800bd26:	4602      	mov	r2, r0
 800bd28:	460b      	mov	r3, r1
 800bd2a:	a167      	add	r1, pc, #412	; (adr r1, 800bec8 <__ieee754_acos+0x2d8>)
 800bd2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd30:	f7f4 fa56 	bl	80001e0 <__aeabi_dsub>
 800bd34:	4602      	mov	r2, r0
 800bd36:	460b      	mov	r3, r1
 800bd38:	4620      	mov	r0, r4
 800bd3a:	4629      	mov	r1, r5
 800bd3c:	f7f4 fa50 	bl	80001e0 <__aeabi_dsub>
 800bd40:	4602      	mov	r2, r0
 800bd42:	460b      	mov	r3, r1
 800bd44:	a162      	add	r1, pc, #392	; (adr r1, 800bed0 <__ieee754_acos+0x2e0>)
 800bd46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd4a:	f7f4 fa49 	bl	80001e0 <__aeabi_dsub>
 800bd4e:	e771      	b.n	800bc34 <__ieee754_acos+0x44>
 800bd50:	2d00      	cmp	r5, #0
 800bd52:	f280 80cb 	bge.w	800beec <__ieee754_acos+0x2fc>
 800bd56:	ee10 0a10 	vmov	r0, s0
 800bd5a:	4b62      	ldr	r3, [pc, #392]	; (800bee4 <__ieee754_acos+0x2f4>)
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	4629      	mov	r1, r5
 800bd60:	f7f4 fa40 	bl	80001e4 <__adddf3>
 800bd64:	4b60      	ldr	r3, [pc, #384]	; (800bee8 <__ieee754_acos+0x2f8>)
 800bd66:	2200      	movs	r2, #0
 800bd68:	f7f4 fbf2 	bl	8000550 <__aeabi_dmul>
 800bd6c:	a342      	add	r3, pc, #264	; (adr r3, 800be78 <__ieee754_acos+0x288>)
 800bd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd72:	4604      	mov	r4, r0
 800bd74:	460d      	mov	r5, r1
 800bd76:	f7f4 fbeb 	bl	8000550 <__aeabi_dmul>
 800bd7a:	a341      	add	r3, pc, #260	; (adr r3, 800be80 <__ieee754_acos+0x290>)
 800bd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd80:	f7f4 fa30 	bl	80001e4 <__adddf3>
 800bd84:	4622      	mov	r2, r4
 800bd86:	462b      	mov	r3, r5
 800bd88:	f7f4 fbe2 	bl	8000550 <__aeabi_dmul>
 800bd8c:	a33e      	add	r3, pc, #248	; (adr r3, 800be88 <__ieee754_acos+0x298>)
 800bd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd92:	f7f4 fa25 	bl	80001e0 <__aeabi_dsub>
 800bd96:	4622      	mov	r2, r4
 800bd98:	462b      	mov	r3, r5
 800bd9a:	f7f4 fbd9 	bl	8000550 <__aeabi_dmul>
 800bd9e:	a33c      	add	r3, pc, #240	; (adr r3, 800be90 <__ieee754_acos+0x2a0>)
 800bda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda4:	f7f4 fa1e 	bl	80001e4 <__adddf3>
 800bda8:	4622      	mov	r2, r4
 800bdaa:	462b      	mov	r3, r5
 800bdac:	f7f4 fbd0 	bl	8000550 <__aeabi_dmul>
 800bdb0:	a339      	add	r3, pc, #228	; (adr r3, 800be98 <__ieee754_acos+0x2a8>)
 800bdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb6:	f7f4 fa13 	bl	80001e0 <__aeabi_dsub>
 800bdba:	4622      	mov	r2, r4
 800bdbc:	462b      	mov	r3, r5
 800bdbe:	f7f4 fbc7 	bl	8000550 <__aeabi_dmul>
 800bdc2:	a337      	add	r3, pc, #220	; (adr r3, 800bea0 <__ieee754_acos+0x2b0>)
 800bdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc8:	f7f4 fa0c 	bl	80001e4 <__adddf3>
 800bdcc:	4622      	mov	r2, r4
 800bdce:	462b      	mov	r3, r5
 800bdd0:	f7f4 fbbe 	bl	8000550 <__aeabi_dmul>
 800bdd4:	ec45 4b10 	vmov	d0, r4, r5
 800bdd8:	4680      	mov	r8, r0
 800bdda:	4689      	mov	r9, r1
 800bddc:	f001 f8a4 	bl	800cf28 <__ieee754_sqrt>
 800bde0:	a331      	add	r3, pc, #196	; (adr r3, 800bea8 <__ieee754_acos+0x2b8>)
 800bde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde6:	4620      	mov	r0, r4
 800bde8:	4629      	mov	r1, r5
 800bdea:	ec57 6b10 	vmov	r6, r7, d0
 800bdee:	f7f4 fbaf 	bl	8000550 <__aeabi_dmul>
 800bdf2:	a32f      	add	r3, pc, #188	; (adr r3, 800beb0 <__ieee754_acos+0x2c0>)
 800bdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf8:	f7f4 f9f2 	bl	80001e0 <__aeabi_dsub>
 800bdfc:	4622      	mov	r2, r4
 800bdfe:	462b      	mov	r3, r5
 800be00:	f7f4 fba6 	bl	8000550 <__aeabi_dmul>
 800be04:	a32c      	add	r3, pc, #176	; (adr r3, 800beb8 <__ieee754_acos+0x2c8>)
 800be06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0a:	f7f4 f9eb 	bl	80001e4 <__adddf3>
 800be0e:	4622      	mov	r2, r4
 800be10:	462b      	mov	r3, r5
 800be12:	f7f4 fb9d 	bl	8000550 <__aeabi_dmul>
 800be16:	a32a      	add	r3, pc, #168	; (adr r3, 800bec0 <__ieee754_acos+0x2d0>)
 800be18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1c:	f7f4 f9e0 	bl	80001e0 <__aeabi_dsub>
 800be20:	4622      	mov	r2, r4
 800be22:	462b      	mov	r3, r5
 800be24:	f7f4 fb94 	bl	8000550 <__aeabi_dmul>
 800be28:	4b2e      	ldr	r3, [pc, #184]	; (800bee4 <__ieee754_acos+0x2f4>)
 800be2a:	2200      	movs	r2, #0
 800be2c:	f7f4 f9da 	bl	80001e4 <__adddf3>
 800be30:	4602      	mov	r2, r0
 800be32:	460b      	mov	r3, r1
 800be34:	4640      	mov	r0, r8
 800be36:	4649      	mov	r1, r9
 800be38:	f7f4 fcb4 	bl	80007a4 <__aeabi_ddiv>
 800be3c:	4632      	mov	r2, r6
 800be3e:	463b      	mov	r3, r7
 800be40:	f7f4 fb86 	bl	8000550 <__aeabi_dmul>
 800be44:	a320      	add	r3, pc, #128	; (adr r3, 800bec8 <__ieee754_acos+0x2d8>)
 800be46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4a:	f7f4 f9c9 	bl	80001e0 <__aeabi_dsub>
 800be4e:	4632      	mov	r2, r6
 800be50:	463b      	mov	r3, r7
 800be52:	f7f4 f9c7 	bl	80001e4 <__adddf3>
 800be56:	4602      	mov	r2, r0
 800be58:	460b      	mov	r3, r1
 800be5a:	f7f4 f9c3 	bl	80001e4 <__adddf3>
 800be5e:	4602      	mov	r2, r0
 800be60:	460b      	mov	r3, r1
 800be62:	a103      	add	r1, pc, #12	; (adr r1, 800be70 <__ieee754_acos+0x280>)
 800be64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be68:	e76f      	b.n	800bd4a <__ieee754_acos+0x15a>
 800be6a:	bf00      	nop
 800be6c:	f3af 8000 	nop.w
 800be70:	54442d18 	.word	0x54442d18
 800be74:	400921fb 	.word	0x400921fb
 800be78:	0dfdf709 	.word	0x0dfdf709
 800be7c:	3f023de1 	.word	0x3f023de1
 800be80:	7501b288 	.word	0x7501b288
 800be84:	3f49efe0 	.word	0x3f49efe0
 800be88:	b5688f3b 	.word	0xb5688f3b
 800be8c:	3fa48228 	.word	0x3fa48228
 800be90:	0e884455 	.word	0x0e884455
 800be94:	3fc9c155 	.word	0x3fc9c155
 800be98:	03eb6f7d 	.word	0x03eb6f7d
 800be9c:	3fd4d612 	.word	0x3fd4d612
 800bea0:	55555555 	.word	0x55555555
 800bea4:	3fc55555 	.word	0x3fc55555
 800bea8:	b12e9282 	.word	0xb12e9282
 800beac:	3fb3b8c5 	.word	0x3fb3b8c5
 800beb0:	1b8d0159 	.word	0x1b8d0159
 800beb4:	3fe6066c 	.word	0x3fe6066c
 800beb8:	9c598ac8 	.word	0x9c598ac8
 800bebc:	40002ae5 	.word	0x40002ae5
 800bec0:	1c8a2d4b 	.word	0x1c8a2d4b
 800bec4:	40033a27 	.word	0x40033a27
 800bec8:	33145c07 	.word	0x33145c07
 800becc:	3c91a626 	.word	0x3c91a626
 800bed0:	54442d18 	.word	0x54442d18
 800bed4:	3ff921fb 	.word	0x3ff921fb
 800bed8:	3fefffff 	.word	0x3fefffff
 800bedc:	3fdfffff 	.word	0x3fdfffff
 800bee0:	3c600000 	.word	0x3c600000
 800bee4:	3ff00000 	.word	0x3ff00000
 800bee8:	3fe00000 	.word	0x3fe00000
 800beec:	ee10 2a10 	vmov	r2, s0
 800bef0:	462b      	mov	r3, r5
 800bef2:	496d      	ldr	r1, [pc, #436]	; (800c0a8 <__ieee754_acos+0x4b8>)
 800bef4:	2000      	movs	r0, #0
 800bef6:	f7f4 f973 	bl	80001e0 <__aeabi_dsub>
 800befa:	4b6c      	ldr	r3, [pc, #432]	; (800c0ac <__ieee754_acos+0x4bc>)
 800befc:	2200      	movs	r2, #0
 800befe:	f7f4 fb27 	bl	8000550 <__aeabi_dmul>
 800bf02:	4604      	mov	r4, r0
 800bf04:	460d      	mov	r5, r1
 800bf06:	ec45 4b10 	vmov	d0, r4, r5
 800bf0a:	f001 f80d 	bl	800cf28 <__ieee754_sqrt>
 800bf0e:	a34e      	add	r3, pc, #312	; (adr r3, 800c048 <__ieee754_acos+0x458>)
 800bf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf14:	4620      	mov	r0, r4
 800bf16:	4629      	mov	r1, r5
 800bf18:	ec59 8b10 	vmov	r8, r9, d0
 800bf1c:	f7f4 fb18 	bl	8000550 <__aeabi_dmul>
 800bf20:	a34b      	add	r3, pc, #300	; (adr r3, 800c050 <__ieee754_acos+0x460>)
 800bf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf26:	f7f4 f95d 	bl	80001e4 <__adddf3>
 800bf2a:	4622      	mov	r2, r4
 800bf2c:	462b      	mov	r3, r5
 800bf2e:	f7f4 fb0f 	bl	8000550 <__aeabi_dmul>
 800bf32:	a349      	add	r3, pc, #292	; (adr r3, 800c058 <__ieee754_acos+0x468>)
 800bf34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf38:	f7f4 f952 	bl	80001e0 <__aeabi_dsub>
 800bf3c:	4622      	mov	r2, r4
 800bf3e:	462b      	mov	r3, r5
 800bf40:	f7f4 fb06 	bl	8000550 <__aeabi_dmul>
 800bf44:	a346      	add	r3, pc, #280	; (adr r3, 800c060 <__ieee754_acos+0x470>)
 800bf46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4a:	f7f4 f94b 	bl	80001e4 <__adddf3>
 800bf4e:	4622      	mov	r2, r4
 800bf50:	462b      	mov	r3, r5
 800bf52:	f7f4 fafd 	bl	8000550 <__aeabi_dmul>
 800bf56:	a344      	add	r3, pc, #272	; (adr r3, 800c068 <__ieee754_acos+0x478>)
 800bf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5c:	f7f4 f940 	bl	80001e0 <__aeabi_dsub>
 800bf60:	4622      	mov	r2, r4
 800bf62:	462b      	mov	r3, r5
 800bf64:	f7f4 faf4 	bl	8000550 <__aeabi_dmul>
 800bf68:	a341      	add	r3, pc, #260	; (adr r3, 800c070 <__ieee754_acos+0x480>)
 800bf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6e:	f7f4 f939 	bl	80001e4 <__adddf3>
 800bf72:	4622      	mov	r2, r4
 800bf74:	462b      	mov	r3, r5
 800bf76:	f7f4 faeb 	bl	8000550 <__aeabi_dmul>
 800bf7a:	a33f      	add	r3, pc, #252	; (adr r3, 800c078 <__ieee754_acos+0x488>)
 800bf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf80:	4682      	mov	sl, r0
 800bf82:	468b      	mov	fp, r1
 800bf84:	4620      	mov	r0, r4
 800bf86:	4629      	mov	r1, r5
 800bf88:	f7f4 fae2 	bl	8000550 <__aeabi_dmul>
 800bf8c:	a33c      	add	r3, pc, #240	; (adr r3, 800c080 <__ieee754_acos+0x490>)
 800bf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf92:	f7f4 f925 	bl	80001e0 <__aeabi_dsub>
 800bf96:	4622      	mov	r2, r4
 800bf98:	462b      	mov	r3, r5
 800bf9a:	f7f4 fad9 	bl	8000550 <__aeabi_dmul>
 800bf9e:	a33a      	add	r3, pc, #232	; (adr r3, 800c088 <__ieee754_acos+0x498>)
 800bfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa4:	f7f4 f91e 	bl	80001e4 <__adddf3>
 800bfa8:	4622      	mov	r2, r4
 800bfaa:	462b      	mov	r3, r5
 800bfac:	f7f4 fad0 	bl	8000550 <__aeabi_dmul>
 800bfb0:	a337      	add	r3, pc, #220	; (adr r3, 800c090 <__ieee754_acos+0x4a0>)
 800bfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb6:	f7f4 f913 	bl	80001e0 <__aeabi_dsub>
 800bfba:	4622      	mov	r2, r4
 800bfbc:	462b      	mov	r3, r5
 800bfbe:	f7f4 fac7 	bl	8000550 <__aeabi_dmul>
 800bfc2:	4b39      	ldr	r3, [pc, #228]	; (800c0a8 <__ieee754_acos+0x4b8>)
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	f7f4 f90d 	bl	80001e4 <__adddf3>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	460b      	mov	r3, r1
 800bfce:	4650      	mov	r0, sl
 800bfd0:	4659      	mov	r1, fp
 800bfd2:	f7f4 fbe7 	bl	80007a4 <__aeabi_ddiv>
 800bfd6:	4642      	mov	r2, r8
 800bfd8:	464b      	mov	r3, r9
 800bfda:	f7f4 fab9 	bl	8000550 <__aeabi_dmul>
 800bfde:	2600      	movs	r6, #0
 800bfe0:	4682      	mov	sl, r0
 800bfe2:	468b      	mov	fp, r1
 800bfe4:	4632      	mov	r2, r6
 800bfe6:	464b      	mov	r3, r9
 800bfe8:	4630      	mov	r0, r6
 800bfea:	4649      	mov	r1, r9
 800bfec:	f7f4 fab0 	bl	8000550 <__aeabi_dmul>
 800bff0:	4602      	mov	r2, r0
 800bff2:	460b      	mov	r3, r1
 800bff4:	4620      	mov	r0, r4
 800bff6:	4629      	mov	r1, r5
 800bff8:	f7f4 f8f2 	bl	80001e0 <__aeabi_dsub>
 800bffc:	4632      	mov	r2, r6
 800bffe:	4604      	mov	r4, r0
 800c000:	460d      	mov	r5, r1
 800c002:	464b      	mov	r3, r9
 800c004:	4640      	mov	r0, r8
 800c006:	4649      	mov	r1, r9
 800c008:	f7f4 f8ec 	bl	80001e4 <__adddf3>
 800c00c:	4602      	mov	r2, r0
 800c00e:	460b      	mov	r3, r1
 800c010:	4620      	mov	r0, r4
 800c012:	4629      	mov	r1, r5
 800c014:	f7f4 fbc6 	bl	80007a4 <__aeabi_ddiv>
 800c018:	4602      	mov	r2, r0
 800c01a:	460b      	mov	r3, r1
 800c01c:	4650      	mov	r0, sl
 800c01e:	4659      	mov	r1, fp
 800c020:	f7f4 f8e0 	bl	80001e4 <__adddf3>
 800c024:	4632      	mov	r2, r6
 800c026:	464b      	mov	r3, r9
 800c028:	f7f4 f8dc 	bl	80001e4 <__adddf3>
 800c02c:	4602      	mov	r2, r0
 800c02e:	460b      	mov	r3, r1
 800c030:	f7f4 f8d8 	bl	80001e4 <__adddf3>
 800c034:	e5fe      	b.n	800bc34 <__ieee754_acos+0x44>
 800c036:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800c098 <__ieee754_acos+0x4a8>
 800c03a:	e5ed      	b.n	800bc18 <__ieee754_acos+0x28>
 800c03c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800c0a0 <__ieee754_acos+0x4b0>
 800c040:	e5ea      	b.n	800bc18 <__ieee754_acos+0x28>
 800c042:	bf00      	nop
 800c044:	f3af 8000 	nop.w
 800c048:	0dfdf709 	.word	0x0dfdf709
 800c04c:	3f023de1 	.word	0x3f023de1
 800c050:	7501b288 	.word	0x7501b288
 800c054:	3f49efe0 	.word	0x3f49efe0
 800c058:	b5688f3b 	.word	0xb5688f3b
 800c05c:	3fa48228 	.word	0x3fa48228
 800c060:	0e884455 	.word	0x0e884455
 800c064:	3fc9c155 	.word	0x3fc9c155
 800c068:	03eb6f7d 	.word	0x03eb6f7d
 800c06c:	3fd4d612 	.word	0x3fd4d612
 800c070:	55555555 	.word	0x55555555
 800c074:	3fc55555 	.word	0x3fc55555
 800c078:	b12e9282 	.word	0xb12e9282
 800c07c:	3fb3b8c5 	.word	0x3fb3b8c5
 800c080:	1b8d0159 	.word	0x1b8d0159
 800c084:	3fe6066c 	.word	0x3fe6066c
 800c088:	9c598ac8 	.word	0x9c598ac8
 800c08c:	40002ae5 	.word	0x40002ae5
 800c090:	1c8a2d4b 	.word	0x1c8a2d4b
 800c094:	40033a27 	.word	0x40033a27
	...
 800c0a0:	54442d18 	.word	0x54442d18
 800c0a4:	3ff921fb 	.word	0x3ff921fb
 800c0a8:	3ff00000 	.word	0x3ff00000
 800c0ac:	3fe00000 	.word	0x3fe00000

0800c0b0 <__ieee754_pow>:
 800c0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b4:	ed2d 8b06 	vpush	{d8-d10}
 800c0b8:	b089      	sub	sp, #36	; 0x24
 800c0ba:	ed8d 1b00 	vstr	d1, [sp]
 800c0be:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c0c2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c0c6:	ea58 0102 	orrs.w	r1, r8, r2
 800c0ca:	ec57 6b10 	vmov	r6, r7, d0
 800c0ce:	d115      	bne.n	800c0fc <__ieee754_pow+0x4c>
 800c0d0:	19b3      	adds	r3, r6, r6
 800c0d2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c0d6:	4152      	adcs	r2, r2
 800c0d8:	4299      	cmp	r1, r3
 800c0da:	4b89      	ldr	r3, [pc, #548]	; (800c300 <__ieee754_pow+0x250>)
 800c0dc:	4193      	sbcs	r3, r2
 800c0de:	f080 84d2 	bcs.w	800ca86 <__ieee754_pow+0x9d6>
 800c0e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0e6:	4630      	mov	r0, r6
 800c0e8:	4639      	mov	r1, r7
 800c0ea:	f7f4 f87b 	bl	80001e4 <__adddf3>
 800c0ee:	ec41 0b10 	vmov	d0, r0, r1
 800c0f2:	b009      	add	sp, #36	; 0x24
 800c0f4:	ecbd 8b06 	vpop	{d8-d10}
 800c0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0fc:	4b81      	ldr	r3, [pc, #516]	; (800c304 <__ieee754_pow+0x254>)
 800c0fe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c102:	429c      	cmp	r4, r3
 800c104:	ee10 aa10 	vmov	sl, s0
 800c108:	463d      	mov	r5, r7
 800c10a:	dc06      	bgt.n	800c11a <__ieee754_pow+0x6a>
 800c10c:	d101      	bne.n	800c112 <__ieee754_pow+0x62>
 800c10e:	2e00      	cmp	r6, #0
 800c110:	d1e7      	bne.n	800c0e2 <__ieee754_pow+0x32>
 800c112:	4598      	cmp	r8, r3
 800c114:	dc01      	bgt.n	800c11a <__ieee754_pow+0x6a>
 800c116:	d10f      	bne.n	800c138 <__ieee754_pow+0x88>
 800c118:	b172      	cbz	r2, 800c138 <__ieee754_pow+0x88>
 800c11a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c11e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c122:	ea55 050a 	orrs.w	r5, r5, sl
 800c126:	d1dc      	bne.n	800c0e2 <__ieee754_pow+0x32>
 800c128:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c12c:	18db      	adds	r3, r3, r3
 800c12e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c132:	4152      	adcs	r2, r2
 800c134:	429d      	cmp	r5, r3
 800c136:	e7d0      	b.n	800c0da <__ieee754_pow+0x2a>
 800c138:	2d00      	cmp	r5, #0
 800c13a:	da3b      	bge.n	800c1b4 <__ieee754_pow+0x104>
 800c13c:	4b72      	ldr	r3, [pc, #456]	; (800c308 <__ieee754_pow+0x258>)
 800c13e:	4598      	cmp	r8, r3
 800c140:	dc51      	bgt.n	800c1e6 <__ieee754_pow+0x136>
 800c142:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c146:	4598      	cmp	r8, r3
 800c148:	f340 84ac 	ble.w	800caa4 <__ieee754_pow+0x9f4>
 800c14c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c150:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c154:	2b14      	cmp	r3, #20
 800c156:	dd0f      	ble.n	800c178 <__ieee754_pow+0xc8>
 800c158:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c15c:	fa22 f103 	lsr.w	r1, r2, r3
 800c160:	fa01 f303 	lsl.w	r3, r1, r3
 800c164:	4293      	cmp	r3, r2
 800c166:	f040 849d 	bne.w	800caa4 <__ieee754_pow+0x9f4>
 800c16a:	f001 0101 	and.w	r1, r1, #1
 800c16e:	f1c1 0302 	rsb	r3, r1, #2
 800c172:	9304      	str	r3, [sp, #16]
 800c174:	b182      	cbz	r2, 800c198 <__ieee754_pow+0xe8>
 800c176:	e05f      	b.n	800c238 <__ieee754_pow+0x188>
 800c178:	2a00      	cmp	r2, #0
 800c17a:	d15b      	bne.n	800c234 <__ieee754_pow+0x184>
 800c17c:	f1c3 0314 	rsb	r3, r3, #20
 800c180:	fa48 f103 	asr.w	r1, r8, r3
 800c184:	fa01 f303 	lsl.w	r3, r1, r3
 800c188:	4543      	cmp	r3, r8
 800c18a:	f040 8488 	bne.w	800ca9e <__ieee754_pow+0x9ee>
 800c18e:	f001 0101 	and.w	r1, r1, #1
 800c192:	f1c1 0302 	rsb	r3, r1, #2
 800c196:	9304      	str	r3, [sp, #16]
 800c198:	4b5c      	ldr	r3, [pc, #368]	; (800c30c <__ieee754_pow+0x25c>)
 800c19a:	4598      	cmp	r8, r3
 800c19c:	d132      	bne.n	800c204 <__ieee754_pow+0x154>
 800c19e:	f1b9 0f00 	cmp.w	r9, #0
 800c1a2:	f280 8478 	bge.w	800ca96 <__ieee754_pow+0x9e6>
 800c1a6:	4959      	ldr	r1, [pc, #356]	; (800c30c <__ieee754_pow+0x25c>)
 800c1a8:	4632      	mov	r2, r6
 800c1aa:	463b      	mov	r3, r7
 800c1ac:	2000      	movs	r0, #0
 800c1ae:	f7f4 faf9 	bl	80007a4 <__aeabi_ddiv>
 800c1b2:	e79c      	b.n	800c0ee <__ieee754_pow+0x3e>
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	9304      	str	r3, [sp, #16]
 800c1b8:	2a00      	cmp	r2, #0
 800c1ba:	d13d      	bne.n	800c238 <__ieee754_pow+0x188>
 800c1bc:	4b51      	ldr	r3, [pc, #324]	; (800c304 <__ieee754_pow+0x254>)
 800c1be:	4598      	cmp	r8, r3
 800c1c0:	d1ea      	bne.n	800c198 <__ieee754_pow+0xe8>
 800c1c2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c1c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c1ca:	ea53 030a 	orrs.w	r3, r3, sl
 800c1ce:	f000 845a 	beq.w	800ca86 <__ieee754_pow+0x9d6>
 800c1d2:	4b4f      	ldr	r3, [pc, #316]	; (800c310 <__ieee754_pow+0x260>)
 800c1d4:	429c      	cmp	r4, r3
 800c1d6:	dd08      	ble.n	800c1ea <__ieee754_pow+0x13a>
 800c1d8:	f1b9 0f00 	cmp.w	r9, #0
 800c1dc:	f2c0 8457 	blt.w	800ca8e <__ieee754_pow+0x9de>
 800c1e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1e4:	e783      	b.n	800c0ee <__ieee754_pow+0x3e>
 800c1e6:	2302      	movs	r3, #2
 800c1e8:	e7e5      	b.n	800c1b6 <__ieee754_pow+0x106>
 800c1ea:	f1b9 0f00 	cmp.w	r9, #0
 800c1ee:	f04f 0000 	mov.w	r0, #0
 800c1f2:	f04f 0100 	mov.w	r1, #0
 800c1f6:	f6bf af7a 	bge.w	800c0ee <__ieee754_pow+0x3e>
 800c1fa:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c1fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c202:	e774      	b.n	800c0ee <__ieee754_pow+0x3e>
 800c204:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c208:	d106      	bne.n	800c218 <__ieee754_pow+0x168>
 800c20a:	4632      	mov	r2, r6
 800c20c:	463b      	mov	r3, r7
 800c20e:	4630      	mov	r0, r6
 800c210:	4639      	mov	r1, r7
 800c212:	f7f4 f99d 	bl	8000550 <__aeabi_dmul>
 800c216:	e76a      	b.n	800c0ee <__ieee754_pow+0x3e>
 800c218:	4b3e      	ldr	r3, [pc, #248]	; (800c314 <__ieee754_pow+0x264>)
 800c21a:	4599      	cmp	r9, r3
 800c21c:	d10c      	bne.n	800c238 <__ieee754_pow+0x188>
 800c21e:	2d00      	cmp	r5, #0
 800c220:	db0a      	blt.n	800c238 <__ieee754_pow+0x188>
 800c222:	ec47 6b10 	vmov	d0, r6, r7
 800c226:	b009      	add	sp, #36	; 0x24
 800c228:	ecbd 8b06 	vpop	{d8-d10}
 800c22c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c230:	f000 be7a 	b.w	800cf28 <__ieee754_sqrt>
 800c234:	2300      	movs	r3, #0
 800c236:	9304      	str	r3, [sp, #16]
 800c238:	ec47 6b10 	vmov	d0, r6, r7
 800c23c:	f001 fc2e 	bl	800da9c <fabs>
 800c240:	ec51 0b10 	vmov	r0, r1, d0
 800c244:	f1ba 0f00 	cmp.w	sl, #0
 800c248:	d129      	bne.n	800c29e <__ieee754_pow+0x1ee>
 800c24a:	b124      	cbz	r4, 800c256 <__ieee754_pow+0x1a6>
 800c24c:	4b2f      	ldr	r3, [pc, #188]	; (800c30c <__ieee754_pow+0x25c>)
 800c24e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c252:	429a      	cmp	r2, r3
 800c254:	d123      	bne.n	800c29e <__ieee754_pow+0x1ee>
 800c256:	f1b9 0f00 	cmp.w	r9, #0
 800c25a:	da05      	bge.n	800c268 <__ieee754_pow+0x1b8>
 800c25c:	4602      	mov	r2, r0
 800c25e:	460b      	mov	r3, r1
 800c260:	2000      	movs	r0, #0
 800c262:	492a      	ldr	r1, [pc, #168]	; (800c30c <__ieee754_pow+0x25c>)
 800c264:	f7f4 fa9e 	bl	80007a4 <__aeabi_ddiv>
 800c268:	2d00      	cmp	r5, #0
 800c26a:	f6bf af40 	bge.w	800c0ee <__ieee754_pow+0x3e>
 800c26e:	9b04      	ldr	r3, [sp, #16]
 800c270:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c274:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c278:	4323      	orrs	r3, r4
 800c27a:	d108      	bne.n	800c28e <__ieee754_pow+0x1de>
 800c27c:	4602      	mov	r2, r0
 800c27e:	460b      	mov	r3, r1
 800c280:	4610      	mov	r0, r2
 800c282:	4619      	mov	r1, r3
 800c284:	f7f3 ffac 	bl	80001e0 <__aeabi_dsub>
 800c288:	4602      	mov	r2, r0
 800c28a:	460b      	mov	r3, r1
 800c28c:	e78f      	b.n	800c1ae <__ieee754_pow+0xfe>
 800c28e:	9b04      	ldr	r3, [sp, #16]
 800c290:	2b01      	cmp	r3, #1
 800c292:	f47f af2c 	bne.w	800c0ee <__ieee754_pow+0x3e>
 800c296:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c29a:	4619      	mov	r1, r3
 800c29c:	e727      	b.n	800c0ee <__ieee754_pow+0x3e>
 800c29e:	0feb      	lsrs	r3, r5, #31
 800c2a0:	3b01      	subs	r3, #1
 800c2a2:	9306      	str	r3, [sp, #24]
 800c2a4:	9a06      	ldr	r2, [sp, #24]
 800c2a6:	9b04      	ldr	r3, [sp, #16]
 800c2a8:	4313      	orrs	r3, r2
 800c2aa:	d102      	bne.n	800c2b2 <__ieee754_pow+0x202>
 800c2ac:	4632      	mov	r2, r6
 800c2ae:	463b      	mov	r3, r7
 800c2b0:	e7e6      	b.n	800c280 <__ieee754_pow+0x1d0>
 800c2b2:	4b19      	ldr	r3, [pc, #100]	; (800c318 <__ieee754_pow+0x268>)
 800c2b4:	4598      	cmp	r8, r3
 800c2b6:	f340 80fb 	ble.w	800c4b0 <__ieee754_pow+0x400>
 800c2ba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c2be:	4598      	cmp	r8, r3
 800c2c0:	4b13      	ldr	r3, [pc, #76]	; (800c310 <__ieee754_pow+0x260>)
 800c2c2:	dd0c      	ble.n	800c2de <__ieee754_pow+0x22e>
 800c2c4:	429c      	cmp	r4, r3
 800c2c6:	dc0f      	bgt.n	800c2e8 <__ieee754_pow+0x238>
 800c2c8:	f1b9 0f00 	cmp.w	r9, #0
 800c2cc:	da0f      	bge.n	800c2ee <__ieee754_pow+0x23e>
 800c2ce:	2000      	movs	r0, #0
 800c2d0:	b009      	add	sp, #36	; 0x24
 800c2d2:	ecbd 8b06 	vpop	{d8-d10}
 800c2d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2da:	f001 bbd6 	b.w	800da8a <__math_oflow>
 800c2de:	429c      	cmp	r4, r3
 800c2e0:	dbf2      	blt.n	800c2c8 <__ieee754_pow+0x218>
 800c2e2:	4b0a      	ldr	r3, [pc, #40]	; (800c30c <__ieee754_pow+0x25c>)
 800c2e4:	429c      	cmp	r4, r3
 800c2e6:	dd19      	ble.n	800c31c <__ieee754_pow+0x26c>
 800c2e8:	f1b9 0f00 	cmp.w	r9, #0
 800c2ec:	dcef      	bgt.n	800c2ce <__ieee754_pow+0x21e>
 800c2ee:	2000      	movs	r0, #0
 800c2f0:	b009      	add	sp, #36	; 0x24
 800c2f2:	ecbd 8b06 	vpop	{d8-d10}
 800c2f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2fa:	f001 bbbd 	b.w	800da78 <__math_uflow>
 800c2fe:	bf00      	nop
 800c300:	fff00000 	.word	0xfff00000
 800c304:	7ff00000 	.word	0x7ff00000
 800c308:	433fffff 	.word	0x433fffff
 800c30c:	3ff00000 	.word	0x3ff00000
 800c310:	3fefffff 	.word	0x3fefffff
 800c314:	3fe00000 	.word	0x3fe00000
 800c318:	41e00000 	.word	0x41e00000
 800c31c:	4b60      	ldr	r3, [pc, #384]	; (800c4a0 <__ieee754_pow+0x3f0>)
 800c31e:	2200      	movs	r2, #0
 800c320:	f7f3 ff5e 	bl	80001e0 <__aeabi_dsub>
 800c324:	a354      	add	r3, pc, #336	; (adr r3, 800c478 <__ieee754_pow+0x3c8>)
 800c326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32a:	4604      	mov	r4, r0
 800c32c:	460d      	mov	r5, r1
 800c32e:	f7f4 f90f 	bl	8000550 <__aeabi_dmul>
 800c332:	a353      	add	r3, pc, #332	; (adr r3, 800c480 <__ieee754_pow+0x3d0>)
 800c334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c338:	4606      	mov	r6, r0
 800c33a:	460f      	mov	r7, r1
 800c33c:	4620      	mov	r0, r4
 800c33e:	4629      	mov	r1, r5
 800c340:	f7f4 f906 	bl	8000550 <__aeabi_dmul>
 800c344:	4b57      	ldr	r3, [pc, #348]	; (800c4a4 <__ieee754_pow+0x3f4>)
 800c346:	4682      	mov	sl, r0
 800c348:	468b      	mov	fp, r1
 800c34a:	2200      	movs	r2, #0
 800c34c:	4620      	mov	r0, r4
 800c34e:	4629      	mov	r1, r5
 800c350:	f7f4 f8fe 	bl	8000550 <__aeabi_dmul>
 800c354:	4602      	mov	r2, r0
 800c356:	460b      	mov	r3, r1
 800c358:	a14b      	add	r1, pc, #300	; (adr r1, 800c488 <__ieee754_pow+0x3d8>)
 800c35a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c35e:	f7f3 ff3f 	bl	80001e0 <__aeabi_dsub>
 800c362:	4622      	mov	r2, r4
 800c364:	462b      	mov	r3, r5
 800c366:	f7f4 f8f3 	bl	8000550 <__aeabi_dmul>
 800c36a:	4602      	mov	r2, r0
 800c36c:	460b      	mov	r3, r1
 800c36e:	2000      	movs	r0, #0
 800c370:	494d      	ldr	r1, [pc, #308]	; (800c4a8 <__ieee754_pow+0x3f8>)
 800c372:	f7f3 ff35 	bl	80001e0 <__aeabi_dsub>
 800c376:	4622      	mov	r2, r4
 800c378:	4680      	mov	r8, r0
 800c37a:	4689      	mov	r9, r1
 800c37c:	462b      	mov	r3, r5
 800c37e:	4620      	mov	r0, r4
 800c380:	4629      	mov	r1, r5
 800c382:	f7f4 f8e5 	bl	8000550 <__aeabi_dmul>
 800c386:	4602      	mov	r2, r0
 800c388:	460b      	mov	r3, r1
 800c38a:	4640      	mov	r0, r8
 800c38c:	4649      	mov	r1, r9
 800c38e:	f7f4 f8df 	bl	8000550 <__aeabi_dmul>
 800c392:	a33f      	add	r3, pc, #252	; (adr r3, 800c490 <__ieee754_pow+0x3e0>)
 800c394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c398:	f7f4 f8da 	bl	8000550 <__aeabi_dmul>
 800c39c:	4602      	mov	r2, r0
 800c39e:	460b      	mov	r3, r1
 800c3a0:	4650      	mov	r0, sl
 800c3a2:	4659      	mov	r1, fp
 800c3a4:	f7f3 ff1c 	bl	80001e0 <__aeabi_dsub>
 800c3a8:	4602      	mov	r2, r0
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	4680      	mov	r8, r0
 800c3ae:	4689      	mov	r9, r1
 800c3b0:	4630      	mov	r0, r6
 800c3b2:	4639      	mov	r1, r7
 800c3b4:	f7f3 ff16 	bl	80001e4 <__adddf3>
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	4632      	mov	r2, r6
 800c3bc:	463b      	mov	r3, r7
 800c3be:	4604      	mov	r4, r0
 800c3c0:	460d      	mov	r5, r1
 800c3c2:	f7f3 ff0d 	bl	80001e0 <__aeabi_dsub>
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	460b      	mov	r3, r1
 800c3ca:	4640      	mov	r0, r8
 800c3cc:	4649      	mov	r1, r9
 800c3ce:	f7f3 ff07 	bl	80001e0 <__aeabi_dsub>
 800c3d2:	9b04      	ldr	r3, [sp, #16]
 800c3d4:	9a06      	ldr	r2, [sp, #24]
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	4682      	mov	sl, r0
 800c3dc:	468b      	mov	fp, r1
 800c3de:	f040 81e7 	bne.w	800c7b0 <__ieee754_pow+0x700>
 800c3e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c498 <__ieee754_pow+0x3e8>
 800c3e6:	eeb0 8a47 	vmov.f32	s16, s14
 800c3ea:	eef0 8a67 	vmov.f32	s17, s15
 800c3ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c3f2:	2600      	movs	r6, #0
 800c3f4:	4632      	mov	r2, r6
 800c3f6:	463b      	mov	r3, r7
 800c3f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c3fc:	f7f3 fef0 	bl	80001e0 <__aeabi_dsub>
 800c400:	4622      	mov	r2, r4
 800c402:	462b      	mov	r3, r5
 800c404:	f7f4 f8a4 	bl	8000550 <__aeabi_dmul>
 800c408:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c40c:	4680      	mov	r8, r0
 800c40e:	4689      	mov	r9, r1
 800c410:	4650      	mov	r0, sl
 800c412:	4659      	mov	r1, fp
 800c414:	f7f4 f89c 	bl	8000550 <__aeabi_dmul>
 800c418:	4602      	mov	r2, r0
 800c41a:	460b      	mov	r3, r1
 800c41c:	4640      	mov	r0, r8
 800c41e:	4649      	mov	r1, r9
 800c420:	f7f3 fee0 	bl	80001e4 <__adddf3>
 800c424:	4632      	mov	r2, r6
 800c426:	463b      	mov	r3, r7
 800c428:	4680      	mov	r8, r0
 800c42a:	4689      	mov	r9, r1
 800c42c:	4620      	mov	r0, r4
 800c42e:	4629      	mov	r1, r5
 800c430:	f7f4 f88e 	bl	8000550 <__aeabi_dmul>
 800c434:	460b      	mov	r3, r1
 800c436:	4604      	mov	r4, r0
 800c438:	460d      	mov	r5, r1
 800c43a:	4602      	mov	r2, r0
 800c43c:	4649      	mov	r1, r9
 800c43e:	4640      	mov	r0, r8
 800c440:	f7f3 fed0 	bl	80001e4 <__adddf3>
 800c444:	4b19      	ldr	r3, [pc, #100]	; (800c4ac <__ieee754_pow+0x3fc>)
 800c446:	4299      	cmp	r1, r3
 800c448:	ec45 4b19 	vmov	d9, r4, r5
 800c44c:	4606      	mov	r6, r0
 800c44e:	460f      	mov	r7, r1
 800c450:	468b      	mov	fp, r1
 800c452:	f340 82f1 	ble.w	800ca38 <__ieee754_pow+0x988>
 800c456:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c45a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c45e:	4303      	orrs	r3, r0
 800c460:	f000 81e4 	beq.w	800c82c <__ieee754_pow+0x77c>
 800c464:	ec51 0b18 	vmov	r0, r1, d8
 800c468:	2200      	movs	r2, #0
 800c46a:	2300      	movs	r3, #0
 800c46c:	f7f4 fae2 	bl	8000a34 <__aeabi_dcmplt>
 800c470:	3800      	subs	r0, #0
 800c472:	bf18      	it	ne
 800c474:	2001      	movne	r0, #1
 800c476:	e72b      	b.n	800c2d0 <__ieee754_pow+0x220>
 800c478:	60000000 	.word	0x60000000
 800c47c:	3ff71547 	.word	0x3ff71547
 800c480:	f85ddf44 	.word	0xf85ddf44
 800c484:	3e54ae0b 	.word	0x3e54ae0b
 800c488:	55555555 	.word	0x55555555
 800c48c:	3fd55555 	.word	0x3fd55555
 800c490:	652b82fe 	.word	0x652b82fe
 800c494:	3ff71547 	.word	0x3ff71547
 800c498:	00000000 	.word	0x00000000
 800c49c:	bff00000 	.word	0xbff00000
 800c4a0:	3ff00000 	.word	0x3ff00000
 800c4a4:	3fd00000 	.word	0x3fd00000
 800c4a8:	3fe00000 	.word	0x3fe00000
 800c4ac:	408fffff 	.word	0x408fffff
 800c4b0:	4bd5      	ldr	r3, [pc, #852]	; (800c808 <__ieee754_pow+0x758>)
 800c4b2:	402b      	ands	r3, r5
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	b92b      	cbnz	r3, 800c4c4 <__ieee754_pow+0x414>
 800c4b8:	4bd4      	ldr	r3, [pc, #848]	; (800c80c <__ieee754_pow+0x75c>)
 800c4ba:	f7f4 f849 	bl	8000550 <__aeabi_dmul>
 800c4be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c4c2:	460c      	mov	r4, r1
 800c4c4:	1523      	asrs	r3, r4, #20
 800c4c6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c4ca:	4413      	add	r3, r2
 800c4cc:	9305      	str	r3, [sp, #20]
 800c4ce:	4bd0      	ldr	r3, [pc, #832]	; (800c810 <__ieee754_pow+0x760>)
 800c4d0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c4d4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c4d8:	429c      	cmp	r4, r3
 800c4da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c4de:	dd08      	ble.n	800c4f2 <__ieee754_pow+0x442>
 800c4e0:	4bcc      	ldr	r3, [pc, #816]	; (800c814 <__ieee754_pow+0x764>)
 800c4e2:	429c      	cmp	r4, r3
 800c4e4:	f340 8162 	ble.w	800c7ac <__ieee754_pow+0x6fc>
 800c4e8:	9b05      	ldr	r3, [sp, #20]
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	9305      	str	r3, [sp, #20]
 800c4ee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c4f2:	2400      	movs	r4, #0
 800c4f4:	00e3      	lsls	r3, r4, #3
 800c4f6:	9307      	str	r3, [sp, #28]
 800c4f8:	4bc7      	ldr	r3, [pc, #796]	; (800c818 <__ieee754_pow+0x768>)
 800c4fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c4fe:	ed93 7b00 	vldr	d7, [r3]
 800c502:	4629      	mov	r1, r5
 800c504:	ec53 2b17 	vmov	r2, r3, d7
 800c508:	eeb0 9a47 	vmov.f32	s18, s14
 800c50c:	eef0 9a67 	vmov.f32	s19, s15
 800c510:	4682      	mov	sl, r0
 800c512:	f7f3 fe65 	bl	80001e0 <__aeabi_dsub>
 800c516:	4652      	mov	r2, sl
 800c518:	4606      	mov	r6, r0
 800c51a:	460f      	mov	r7, r1
 800c51c:	462b      	mov	r3, r5
 800c51e:	ec51 0b19 	vmov	r0, r1, d9
 800c522:	f7f3 fe5f 	bl	80001e4 <__adddf3>
 800c526:	4602      	mov	r2, r0
 800c528:	460b      	mov	r3, r1
 800c52a:	2000      	movs	r0, #0
 800c52c:	49bb      	ldr	r1, [pc, #748]	; (800c81c <__ieee754_pow+0x76c>)
 800c52e:	f7f4 f939 	bl	80007a4 <__aeabi_ddiv>
 800c532:	ec41 0b1a 	vmov	d10, r0, r1
 800c536:	4602      	mov	r2, r0
 800c538:	460b      	mov	r3, r1
 800c53a:	4630      	mov	r0, r6
 800c53c:	4639      	mov	r1, r7
 800c53e:	f7f4 f807 	bl	8000550 <__aeabi_dmul>
 800c542:	2300      	movs	r3, #0
 800c544:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c548:	9302      	str	r3, [sp, #8]
 800c54a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c54e:	46ab      	mov	fp, r5
 800c550:	106d      	asrs	r5, r5, #1
 800c552:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c556:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c55a:	ec41 0b18 	vmov	d8, r0, r1
 800c55e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c562:	2200      	movs	r2, #0
 800c564:	4640      	mov	r0, r8
 800c566:	4649      	mov	r1, r9
 800c568:	4614      	mov	r4, r2
 800c56a:	461d      	mov	r5, r3
 800c56c:	f7f3 fff0 	bl	8000550 <__aeabi_dmul>
 800c570:	4602      	mov	r2, r0
 800c572:	460b      	mov	r3, r1
 800c574:	4630      	mov	r0, r6
 800c576:	4639      	mov	r1, r7
 800c578:	f7f3 fe32 	bl	80001e0 <__aeabi_dsub>
 800c57c:	ec53 2b19 	vmov	r2, r3, d9
 800c580:	4606      	mov	r6, r0
 800c582:	460f      	mov	r7, r1
 800c584:	4620      	mov	r0, r4
 800c586:	4629      	mov	r1, r5
 800c588:	f7f3 fe2a 	bl	80001e0 <__aeabi_dsub>
 800c58c:	4602      	mov	r2, r0
 800c58e:	460b      	mov	r3, r1
 800c590:	4650      	mov	r0, sl
 800c592:	4659      	mov	r1, fp
 800c594:	f7f3 fe24 	bl	80001e0 <__aeabi_dsub>
 800c598:	4642      	mov	r2, r8
 800c59a:	464b      	mov	r3, r9
 800c59c:	f7f3 ffd8 	bl	8000550 <__aeabi_dmul>
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	4630      	mov	r0, r6
 800c5a6:	4639      	mov	r1, r7
 800c5a8:	f7f3 fe1a 	bl	80001e0 <__aeabi_dsub>
 800c5ac:	ec53 2b1a 	vmov	r2, r3, d10
 800c5b0:	f7f3 ffce 	bl	8000550 <__aeabi_dmul>
 800c5b4:	ec53 2b18 	vmov	r2, r3, d8
 800c5b8:	ec41 0b19 	vmov	d9, r0, r1
 800c5bc:	ec51 0b18 	vmov	r0, r1, d8
 800c5c0:	f7f3 ffc6 	bl	8000550 <__aeabi_dmul>
 800c5c4:	a37c      	add	r3, pc, #496	; (adr r3, 800c7b8 <__ieee754_pow+0x708>)
 800c5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ca:	4604      	mov	r4, r0
 800c5cc:	460d      	mov	r5, r1
 800c5ce:	f7f3 ffbf 	bl	8000550 <__aeabi_dmul>
 800c5d2:	a37b      	add	r3, pc, #492	; (adr r3, 800c7c0 <__ieee754_pow+0x710>)
 800c5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d8:	f7f3 fe04 	bl	80001e4 <__adddf3>
 800c5dc:	4622      	mov	r2, r4
 800c5de:	462b      	mov	r3, r5
 800c5e0:	f7f3 ffb6 	bl	8000550 <__aeabi_dmul>
 800c5e4:	a378      	add	r3, pc, #480	; (adr r3, 800c7c8 <__ieee754_pow+0x718>)
 800c5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ea:	f7f3 fdfb 	bl	80001e4 <__adddf3>
 800c5ee:	4622      	mov	r2, r4
 800c5f0:	462b      	mov	r3, r5
 800c5f2:	f7f3 ffad 	bl	8000550 <__aeabi_dmul>
 800c5f6:	a376      	add	r3, pc, #472	; (adr r3, 800c7d0 <__ieee754_pow+0x720>)
 800c5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fc:	f7f3 fdf2 	bl	80001e4 <__adddf3>
 800c600:	4622      	mov	r2, r4
 800c602:	462b      	mov	r3, r5
 800c604:	f7f3 ffa4 	bl	8000550 <__aeabi_dmul>
 800c608:	a373      	add	r3, pc, #460	; (adr r3, 800c7d8 <__ieee754_pow+0x728>)
 800c60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60e:	f7f3 fde9 	bl	80001e4 <__adddf3>
 800c612:	4622      	mov	r2, r4
 800c614:	462b      	mov	r3, r5
 800c616:	f7f3 ff9b 	bl	8000550 <__aeabi_dmul>
 800c61a:	a371      	add	r3, pc, #452	; (adr r3, 800c7e0 <__ieee754_pow+0x730>)
 800c61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c620:	f7f3 fde0 	bl	80001e4 <__adddf3>
 800c624:	4622      	mov	r2, r4
 800c626:	4606      	mov	r6, r0
 800c628:	460f      	mov	r7, r1
 800c62a:	462b      	mov	r3, r5
 800c62c:	4620      	mov	r0, r4
 800c62e:	4629      	mov	r1, r5
 800c630:	f7f3 ff8e 	bl	8000550 <__aeabi_dmul>
 800c634:	4602      	mov	r2, r0
 800c636:	460b      	mov	r3, r1
 800c638:	4630      	mov	r0, r6
 800c63a:	4639      	mov	r1, r7
 800c63c:	f7f3 ff88 	bl	8000550 <__aeabi_dmul>
 800c640:	4642      	mov	r2, r8
 800c642:	4604      	mov	r4, r0
 800c644:	460d      	mov	r5, r1
 800c646:	464b      	mov	r3, r9
 800c648:	ec51 0b18 	vmov	r0, r1, d8
 800c64c:	f7f3 fdca 	bl	80001e4 <__adddf3>
 800c650:	ec53 2b19 	vmov	r2, r3, d9
 800c654:	f7f3 ff7c 	bl	8000550 <__aeabi_dmul>
 800c658:	4622      	mov	r2, r4
 800c65a:	462b      	mov	r3, r5
 800c65c:	f7f3 fdc2 	bl	80001e4 <__adddf3>
 800c660:	4642      	mov	r2, r8
 800c662:	4682      	mov	sl, r0
 800c664:	468b      	mov	fp, r1
 800c666:	464b      	mov	r3, r9
 800c668:	4640      	mov	r0, r8
 800c66a:	4649      	mov	r1, r9
 800c66c:	f7f3 ff70 	bl	8000550 <__aeabi_dmul>
 800c670:	4b6b      	ldr	r3, [pc, #428]	; (800c820 <__ieee754_pow+0x770>)
 800c672:	2200      	movs	r2, #0
 800c674:	4606      	mov	r6, r0
 800c676:	460f      	mov	r7, r1
 800c678:	f7f3 fdb4 	bl	80001e4 <__adddf3>
 800c67c:	4652      	mov	r2, sl
 800c67e:	465b      	mov	r3, fp
 800c680:	f7f3 fdb0 	bl	80001e4 <__adddf3>
 800c684:	2000      	movs	r0, #0
 800c686:	4604      	mov	r4, r0
 800c688:	460d      	mov	r5, r1
 800c68a:	4602      	mov	r2, r0
 800c68c:	460b      	mov	r3, r1
 800c68e:	4640      	mov	r0, r8
 800c690:	4649      	mov	r1, r9
 800c692:	f7f3 ff5d 	bl	8000550 <__aeabi_dmul>
 800c696:	4b62      	ldr	r3, [pc, #392]	; (800c820 <__ieee754_pow+0x770>)
 800c698:	4680      	mov	r8, r0
 800c69a:	4689      	mov	r9, r1
 800c69c:	2200      	movs	r2, #0
 800c69e:	4620      	mov	r0, r4
 800c6a0:	4629      	mov	r1, r5
 800c6a2:	f7f3 fd9d 	bl	80001e0 <__aeabi_dsub>
 800c6a6:	4632      	mov	r2, r6
 800c6a8:	463b      	mov	r3, r7
 800c6aa:	f7f3 fd99 	bl	80001e0 <__aeabi_dsub>
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	460b      	mov	r3, r1
 800c6b2:	4650      	mov	r0, sl
 800c6b4:	4659      	mov	r1, fp
 800c6b6:	f7f3 fd93 	bl	80001e0 <__aeabi_dsub>
 800c6ba:	ec53 2b18 	vmov	r2, r3, d8
 800c6be:	f7f3 ff47 	bl	8000550 <__aeabi_dmul>
 800c6c2:	4622      	mov	r2, r4
 800c6c4:	4606      	mov	r6, r0
 800c6c6:	460f      	mov	r7, r1
 800c6c8:	462b      	mov	r3, r5
 800c6ca:	ec51 0b19 	vmov	r0, r1, d9
 800c6ce:	f7f3 ff3f 	bl	8000550 <__aeabi_dmul>
 800c6d2:	4602      	mov	r2, r0
 800c6d4:	460b      	mov	r3, r1
 800c6d6:	4630      	mov	r0, r6
 800c6d8:	4639      	mov	r1, r7
 800c6da:	f7f3 fd83 	bl	80001e4 <__adddf3>
 800c6de:	4606      	mov	r6, r0
 800c6e0:	460f      	mov	r7, r1
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	4640      	mov	r0, r8
 800c6e8:	4649      	mov	r1, r9
 800c6ea:	f7f3 fd7b 	bl	80001e4 <__adddf3>
 800c6ee:	a33e      	add	r3, pc, #248	; (adr r3, 800c7e8 <__ieee754_pow+0x738>)
 800c6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f4:	2000      	movs	r0, #0
 800c6f6:	4604      	mov	r4, r0
 800c6f8:	460d      	mov	r5, r1
 800c6fa:	f7f3 ff29 	bl	8000550 <__aeabi_dmul>
 800c6fe:	4642      	mov	r2, r8
 800c700:	ec41 0b18 	vmov	d8, r0, r1
 800c704:	464b      	mov	r3, r9
 800c706:	4620      	mov	r0, r4
 800c708:	4629      	mov	r1, r5
 800c70a:	f7f3 fd69 	bl	80001e0 <__aeabi_dsub>
 800c70e:	4602      	mov	r2, r0
 800c710:	460b      	mov	r3, r1
 800c712:	4630      	mov	r0, r6
 800c714:	4639      	mov	r1, r7
 800c716:	f7f3 fd63 	bl	80001e0 <__aeabi_dsub>
 800c71a:	a335      	add	r3, pc, #212	; (adr r3, 800c7f0 <__ieee754_pow+0x740>)
 800c71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c720:	f7f3 ff16 	bl	8000550 <__aeabi_dmul>
 800c724:	a334      	add	r3, pc, #208	; (adr r3, 800c7f8 <__ieee754_pow+0x748>)
 800c726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72a:	4606      	mov	r6, r0
 800c72c:	460f      	mov	r7, r1
 800c72e:	4620      	mov	r0, r4
 800c730:	4629      	mov	r1, r5
 800c732:	f7f3 ff0d 	bl	8000550 <__aeabi_dmul>
 800c736:	4602      	mov	r2, r0
 800c738:	460b      	mov	r3, r1
 800c73a:	4630      	mov	r0, r6
 800c73c:	4639      	mov	r1, r7
 800c73e:	f7f3 fd51 	bl	80001e4 <__adddf3>
 800c742:	9a07      	ldr	r2, [sp, #28]
 800c744:	4b37      	ldr	r3, [pc, #220]	; (800c824 <__ieee754_pow+0x774>)
 800c746:	4413      	add	r3, r2
 800c748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74c:	f7f3 fd4a 	bl	80001e4 <__adddf3>
 800c750:	4682      	mov	sl, r0
 800c752:	9805      	ldr	r0, [sp, #20]
 800c754:	468b      	mov	fp, r1
 800c756:	f7f3 fe91 	bl	800047c <__aeabi_i2d>
 800c75a:	9a07      	ldr	r2, [sp, #28]
 800c75c:	4b32      	ldr	r3, [pc, #200]	; (800c828 <__ieee754_pow+0x778>)
 800c75e:	4413      	add	r3, r2
 800c760:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c764:	4606      	mov	r6, r0
 800c766:	460f      	mov	r7, r1
 800c768:	4652      	mov	r2, sl
 800c76a:	465b      	mov	r3, fp
 800c76c:	ec51 0b18 	vmov	r0, r1, d8
 800c770:	f7f3 fd38 	bl	80001e4 <__adddf3>
 800c774:	4642      	mov	r2, r8
 800c776:	464b      	mov	r3, r9
 800c778:	f7f3 fd34 	bl	80001e4 <__adddf3>
 800c77c:	4632      	mov	r2, r6
 800c77e:	463b      	mov	r3, r7
 800c780:	f7f3 fd30 	bl	80001e4 <__adddf3>
 800c784:	2000      	movs	r0, #0
 800c786:	4632      	mov	r2, r6
 800c788:	463b      	mov	r3, r7
 800c78a:	4604      	mov	r4, r0
 800c78c:	460d      	mov	r5, r1
 800c78e:	f7f3 fd27 	bl	80001e0 <__aeabi_dsub>
 800c792:	4642      	mov	r2, r8
 800c794:	464b      	mov	r3, r9
 800c796:	f7f3 fd23 	bl	80001e0 <__aeabi_dsub>
 800c79a:	ec53 2b18 	vmov	r2, r3, d8
 800c79e:	f7f3 fd1f 	bl	80001e0 <__aeabi_dsub>
 800c7a2:	4602      	mov	r2, r0
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	4650      	mov	r0, sl
 800c7a8:	4659      	mov	r1, fp
 800c7aa:	e610      	b.n	800c3ce <__ieee754_pow+0x31e>
 800c7ac:	2401      	movs	r4, #1
 800c7ae:	e6a1      	b.n	800c4f4 <__ieee754_pow+0x444>
 800c7b0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c800 <__ieee754_pow+0x750>
 800c7b4:	e617      	b.n	800c3e6 <__ieee754_pow+0x336>
 800c7b6:	bf00      	nop
 800c7b8:	4a454eef 	.word	0x4a454eef
 800c7bc:	3fca7e28 	.word	0x3fca7e28
 800c7c0:	93c9db65 	.word	0x93c9db65
 800c7c4:	3fcd864a 	.word	0x3fcd864a
 800c7c8:	a91d4101 	.word	0xa91d4101
 800c7cc:	3fd17460 	.word	0x3fd17460
 800c7d0:	518f264d 	.word	0x518f264d
 800c7d4:	3fd55555 	.word	0x3fd55555
 800c7d8:	db6fabff 	.word	0xdb6fabff
 800c7dc:	3fdb6db6 	.word	0x3fdb6db6
 800c7e0:	33333303 	.word	0x33333303
 800c7e4:	3fe33333 	.word	0x3fe33333
 800c7e8:	e0000000 	.word	0xe0000000
 800c7ec:	3feec709 	.word	0x3feec709
 800c7f0:	dc3a03fd 	.word	0xdc3a03fd
 800c7f4:	3feec709 	.word	0x3feec709
 800c7f8:	145b01f5 	.word	0x145b01f5
 800c7fc:	be3e2fe0 	.word	0xbe3e2fe0
 800c800:	00000000 	.word	0x00000000
 800c804:	3ff00000 	.word	0x3ff00000
 800c808:	7ff00000 	.word	0x7ff00000
 800c80c:	43400000 	.word	0x43400000
 800c810:	0003988e 	.word	0x0003988e
 800c814:	000bb679 	.word	0x000bb679
 800c818:	0800dc28 	.word	0x0800dc28
 800c81c:	3ff00000 	.word	0x3ff00000
 800c820:	40080000 	.word	0x40080000
 800c824:	0800dc48 	.word	0x0800dc48
 800c828:	0800dc38 	.word	0x0800dc38
 800c82c:	a3b5      	add	r3, pc, #724	; (adr r3, 800cb04 <__ieee754_pow+0xa54>)
 800c82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c832:	4640      	mov	r0, r8
 800c834:	4649      	mov	r1, r9
 800c836:	f7f3 fcd5 	bl	80001e4 <__adddf3>
 800c83a:	4622      	mov	r2, r4
 800c83c:	ec41 0b1a 	vmov	d10, r0, r1
 800c840:	462b      	mov	r3, r5
 800c842:	4630      	mov	r0, r6
 800c844:	4639      	mov	r1, r7
 800c846:	f7f3 fccb 	bl	80001e0 <__aeabi_dsub>
 800c84a:	4602      	mov	r2, r0
 800c84c:	460b      	mov	r3, r1
 800c84e:	ec51 0b1a 	vmov	r0, r1, d10
 800c852:	f7f4 f90d 	bl	8000a70 <__aeabi_dcmpgt>
 800c856:	2800      	cmp	r0, #0
 800c858:	f47f ae04 	bne.w	800c464 <__ieee754_pow+0x3b4>
 800c85c:	4aa4      	ldr	r2, [pc, #656]	; (800caf0 <__ieee754_pow+0xa40>)
 800c85e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c862:	4293      	cmp	r3, r2
 800c864:	f340 8108 	ble.w	800ca78 <__ieee754_pow+0x9c8>
 800c868:	151b      	asrs	r3, r3, #20
 800c86a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c86e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c872:	fa4a f303 	asr.w	r3, sl, r3
 800c876:	445b      	add	r3, fp
 800c878:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c87c:	4e9d      	ldr	r6, [pc, #628]	; (800caf4 <__ieee754_pow+0xa44>)
 800c87e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c882:	4116      	asrs	r6, r2
 800c884:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c888:	2000      	movs	r0, #0
 800c88a:	ea23 0106 	bic.w	r1, r3, r6
 800c88e:	f1c2 0214 	rsb	r2, r2, #20
 800c892:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c896:	fa4a fa02 	asr.w	sl, sl, r2
 800c89a:	f1bb 0f00 	cmp.w	fp, #0
 800c89e:	4602      	mov	r2, r0
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	4620      	mov	r0, r4
 800c8a4:	4629      	mov	r1, r5
 800c8a6:	bfb8      	it	lt
 800c8a8:	f1ca 0a00 	rsblt	sl, sl, #0
 800c8ac:	f7f3 fc98 	bl	80001e0 <__aeabi_dsub>
 800c8b0:	ec41 0b19 	vmov	d9, r0, r1
 800c8b4:	4642      	mov	r2, r8
 800c8b6:	464b      	mov	r3, r9
 800c8b8:	ec51 0b19 	vmov	r0, r1, d9
 800c8bc:	f7f3 fc92 	bl	80001e4 <__adddf3>
 800c8c0:	a37b      	add	r3, pc, #492	; (adr r3, 800cab0 <__ieee754_pow+0xa00>)
 800c8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c6:	2000      	movs	r0, #0
 800c8c8:	4604      	mov	r4, r0
 800c8ca:	460d      	mov	r5, r1
 800c8cc:	f7f3 fe40 	bl	8000550 <__aeabi_dmul>
 800c8d0:	ec53 2b19 	vmov	r2, r3, d9
 800c8d4:	4606      	mov	r6, r0
 800c8d6:	460f      	mov	r7, r1
 800c8d8:	4620      	mov	r0, r4
 800c8da:	4629      	mov	r1, r5
 800c8dc:	f7f3 fc80 	bl	80001e0 <__aeabi_dsub>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	4640      	mov	r0, r8
 800c8e6:	4649      	mov	r1, r9
 800c8e8:	f7f3 fc7a 	bl	80001e0 <__aeabi_dsub>
 800c8ec:	a372      	add	r3, pc, #456	; (adr r3, 800cab8 <__ieee754_pow+0xa08>)
 800c8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f2:	f7f3 fe2d 	bl	8000550 <__aeabi_dmul>
 800c8f6:	a372      	add	r3, pc, #456	; (adr r3, 800cac0 <__ieee754_pow+0xa10>)
 800c8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fc:	4680      	mov	r8, r0
 800c8fe:	4689      	mov	r9, r1
 800c900:	4620      	mov	r0, r4
 800c902:	4629      	mov	r1, r5
 800c904:	f7f3 fe24 	bl	8000550 <__aeabi_dmul>
 800c908:	4602      	mov	r2, r0
 800c90a:	460b      	mov	r3, r1
 800c90c:	4640      	mov	r0, r8
 800c90e:	4649      	mov	r1, r9
 800c910:	f7f3 fc68 	bl	80001e4 <__adddf3>
 800c914:	4604      	mov	r4, r0
 800c916:	460d      	mov	r5, r1
 800c918:	4602      	mov	r2, r0
 800c91a:	460b      	mov	r3, r1
 800c91c:	4630      	mov	r0, r6
 800c91e:	4639      	mov	r1, r7
 800c920:	f7f3 fc60 	bl	80001e4 <__adddf3>
 800c924:	4632      	mov	r2, r6
 800c926:	463b      	mov	r3, r7
 800c928:	4680      	mov	r8, r0
 800c92a:	4689      	mov	r9, r1
 800c92c:	f7f3 fc58 	bl	80001e0 <__aeabi_dsub>
 800c930:	4602      	mov	r2, r0
 800c932:	460b      	mov	r3, r1
 800c934:	4620      	mov	r0, r4
 800c936:	4629      	mov	r1, r5
 800c938:	f7f3 fc52 	bl	80001e0 <__aeabi_dsub>
 800c93c:	4642      	mov	r2, r8
 800c93e:	4606      	mov	r6, r0
 800c940:	460f      	mov	r7, r1
 800c942:	464b      	mov	r3, r9
 800c944:	4640      	mov	r0, r8
 800c946:	4649      	mov	r1, r9
 800c948:	f7f3 fe02 	bl	8000550 <__aeabi_dmul>
 800c94c:	a35e      	add	r3, pc, #376	; (adr r3, 800cac8 <__ieee754_pow+0xa18>)
 800c94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c952:	4604      	mov	r4, r0
 800c954:	460d      	mov	r5, r1
 800c956:	f7f3 fdfb 	bl	8000550 <__aeabi_dmul>
 800c95a:	a35d      	add	r3, pc, #372	; (adr r3, 800cad0 <__ieee754_pow+0xa20>)
 800c95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c960:	f7f3 fc3e 	bl	80001e0 <__aeabi_dsub>
 800c964:	4622      	mov	r2, r4
 800c966:	462b      	mov	r3, r5
 800c968:	f7f3 fdf2 	bl	8000550 <__aeabi_dmul>
 800c96c:	a35a      	add	r3, pc, #360	; (adr r3, 800cad8 <__ieee754_pow+0xa28>)
 800c96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c972:	f7f3 fc37 	bl	80001e4 <__adddf3>
 800c976:	4622      	mov	r2, r4
 800c978:	462b      	mov	r3, r5
 800c97a:	f7f3 fde9 	bl	8000550 <__aeabi_dmul>
 800c97e:	a358      	add	r3, pc, #352	; (adr r3, 800cae0 <__ieee754_pow+0xa30>)
 800c980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c984:	f7f3 fc2c 	bl	80001e0 <__aeabi_dsub>
 800c988:	4622      	mov	r2, r4
 800c98a:	462b      	mov	r3, r5
 800c98c:	f7f3 fde0 	bl	8000550 <__aeabi_dmul>
 800c990:	a355      	add	r3, pc, #340	; (adr r3, 800cae8 <__ieee754_pow+0xa38>)
 800c992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c996:	f7f3 fc25 	bl	80001e4 <__adddf3>
 800c99a:	4622      	mov	r2, r4
 800c99c:	462b      	mov	r3, r5
 800c99e:	f7f3 fdd7 	bl	8000550 <__aeabi_dmul>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	460b      	mov	r3, r1
 800c9a6:	4640      	mov	r0, r8
 800c9a8:	4649      	mov	r1, r9
 800c9aa:	f7f3 fc19 	bl	80001e0 <__aeabi_dsub>
 800c9ae:	4604      	mov	r4, r0
 800c9b0:	460d      	mov	r5, r1
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	460b      	mov	r3, r1
 800c9b6:	4640      	mov	r0, r8
 800c9b8:	4649      	mov	r1, r9
 800c9ba:	f7f3 fdc9 	bl	8000550 <__aeabi_dmul>
 800c9be:	2200      	movs	r2, #0
 800c9c0:	ec41 0b19 	vmov	d9, r0, r1
 800c9c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c9c8:	4620      	mov	r0, r4
 800c9ca:	4629      	mov	r1, r5
 800c9cc:	f7f3 fc08 	bl	80001e0 <__aeabi_dsub>
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	460b      	mov	r3, r1
 800c9d4:	ec51 0b19 	vmov	r0, r1, d9
 800c9d8:	f7f3 fee4 	bl	80007a4 <__aeabi_ddiv>
 800c9dc:	4632      	mov	r2, r6
 800c9de:	4604      	mov	r4, r0
 800c9e0:	460d      	mov	r5, r1
 800c9e2:	463b      	mov	r3, r7
 800c9e4:	4640      	mov	r0, r8
 800c9e6:	4649      	mov	r1, r9
 800c9e8:	f7f3 fdb2 	bl	8000550 <__aeabi_dmul>
 800c9ec:	4632      	mov	r2, r6
 800c9ee:	463b      	mov	r3, r7
 800c9f0:	f7f3 fbf8 	bl	80001e4 <__adddf3>
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	460b      	mov	r3, r1
 800c9f8:	4620      	mov	r0, r4
 800c9fa:	4629      	mov	r1, r5
 800c9fc:	f7f3 fbf0 	bl	80001e0 <__aeabi_dsub>
 800ca00:	4642      	mov	r2, r8
 800ca02:	464b      	mov	r3, r9
 800ca04:	f7f3 fbec 	bl	80001e0 <__aeabi_dsub>
 800ca08:	460b      	mov	r3, r1
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	493a      	ldr	r1, [pc, #232]	; (800caf8 <__ieee754_pow+0xa48>)
 800ca0e:	2000      	movs	r0, #0
 800ca10:	f7f3 fbe6 	bl	80001e0 <__aeabi_dsub>
 800ca14:	ec41 0b10 	vmov	d0, r0, r1
 800ca18:	ee10 3a90 	vmov	r3, s1
 800ca1c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ca20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca24:	da2b      	bge.n	800ca7e <__ieee754_pow+0x9ce>
 800ca26:	4650      	mov	r0, sl
 800ca28:	f001 f856 	bl	800dad8 <scalbn>
 800ca2c:	ec51 0b10 	vmov	r0, r1, d0
 800ca30:	ec53 2b18 	vmov	r2, r3, d8
 800ca34:	f7ff bbed 	b.w	800c212 <__ieee754_pow+0x162>
 800ca38:	4b30      	ldr	r3, [pc, #192]	; (800cafc <__ieee754_pow+0xa4c>)
 800ca3a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ca3e:	429e      	cmp	r6, r3
 800ca40:	f77f af0c 	ble.w	800c85c <__ieee754_pow+0x7ac>
 800ca44:	4b2e      	ldr	r3, [pc, #184]	; (800cb00 <__ieee754_pow+0xa50>)
 800ca46:	440b      	add	r3, r1
 800ca48:	4303      	orrs	r3, r0
 800ca4a:	d009      	beq.n	800ca60 <__ieee754_pow+0x9b0>
 800ca4c:	ec51 0b18 	vmov	r0, r1, d8
 800ca50:	2200      	movs	r2, #0
 800ca52:	2300      	movs	r3, #0
 800ca54:	f7f3 ffee 	bl	8000a34 <__aeabi_dcmplt>
 800ca58:	3800      	subs	r0, #0
 800ca5a:	bf18      	it	ne
 800ca5c:	2001      	movne	r0, #1
 800ca5e:	e447      	b.n	800c2f0 <__ieee754_pow+0x240>
 800ca60:	4622      	mov	r2, r4
 800ca62:	462b      	mov	r3, r5
 800ca64:	f7f3 fbbc 	bl	80001e0 <__aeabi_dsub>
 800ca68:	4642      	mov	r2, r8
 800ca6a:	464b      	mov	r3, r9
 800ca6c:	f7f3 fff6 	bl	8000a5c <__aeabi_dcmpge>
 800ca70:	2800      	cmp	r0, #0
 800ca72:	f43f aef3 	beq.w	800c85c <__ieee754_pow+0x7ac>
 800ca76:	e7e9      	b.n	800ca4c <__ieee754_pow+0x99c>
 800ca78:	f04f 0a00 	mov.w	sl, #0
 800ca7c:	e71a      	b.n	800c8b4 <__ieee754_pow+0x804>
 800ca7e:	ec51 0b10 	vmov	r0, r1, d0
 800ca82:	4619      	mov	r1, r3
 800ca84:	e7d4      	b.n	800ca30 <__ieee754_pow+0x980>
 800ca86:	491c      	ldr	r1, [pc, #112]	; (800caf8 <__ieee754_pow+0xa48>)
 800ca88:	2000      	movs	r0, #0
 800ca8a:	f7ff bb30 	b.w	800c0ee <__ieee754_pow+0x3e>
 800ca8e:	2000      	movs	r0, #0
 800ca90:	2100      	movs	r1, #0
 800ca92:	f7ff bb2c 	b.w	800c0ee <__ieee754_pow+0x3e>
 800ca96:	4630      	mov	r0, r6
 800ca98:	4639      	mov	r1, r7
 800ca9a:	f7ff bb28 	b.w	800c0ee <__ieee754_pow+0x3e>
 800ca9e:	9204      	str	r2, [sp, #16]
 800caa0:	f7ff bb7a 	b.w	800c198 <__ieee754_pow+0xe8>
 800caa4:	2300      	movs	r3, #0
 800caa6:	f7ff bb64 	b.w	800c172 <__ieee754_pow+0xc2>
 800caaa:	bf00      	nop
 800caac:	f3af 8000 	nop.w
 800cab0:	00000000 	.word	0x00000000
 800cab4:	3fe62e43 	.word	0x3fe62e43
 800cab8:	fefa39ef 	.word	0xfefa39ef
 800cabc:	3fe62e42 	.word	0x3fe62e42
 800cac0:	0ca86c39 	.word	0x0ca86c39
 800cac4:	be205c61 	.word	0xbe205c61
 800cac8:	72bea4d0 	.word	0x72bea4d0
 800cacc:	3e663769 	.word	0x3e663769
 800cad0:	c5d26bf1 	.word	0xc5d26bf1
 800cad4:	3ebbbd41 	.word	0x3ebbbd41
 800cad8:	af25de2c 	.word	0xaf25de2c
 800cadc:	3f11566a 	.word	0x3f11566a
 800cae0:	16bebd93 	.word	0x16bebd93
 800cae4:	3f66c16c 	.word	0x3f66c16c
 800cae8:	5555553e 	.word	0x5555553e
 800caec:	3fc55555 	.word	0x3fc55555
 800caf0:	3fe00000 	.word	0x3fe00000
 800caf4:	000fffff 	.word	0x000fffff
 800caf8:	3ff00000 	.word	0x3ff00000
 800cafc:	4090cbff 	.word	0x4090cbff
 800cb00:	3f6f3400 	.word	0x3f6f3400
 800cb04:	652b82fe 	.word	0x652b82fe
 800cb08:	3c971547 	.word	0x3c971547
 800cb0c:	00000000 	.word	0x00000000

0800cb10 <__ieee754_rem_pio2>:
 800cb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb14:	ed2d 8b02 	vpush	{d8}
 800cb18:	ec55 4b10 	vmov	r4, r5, d0
 800cb1c:	4bca      	ldr	r3, [pc, #808]	; (800ce48 <__ieee754_rem_pio2+0x338>)
 800cb1e:	b08b      	sub	sp, #44	; 0x2c
 800cb20:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800cb24:	4598      	cmp	r8, r3
 800cb26:	4682      	mov	sl, r0
 800cb28:	9502      	str	r5, [sp, #8]
 800cb2a:	dc08      	bgt.n	800cb3e <__ieee754_rem_pio2+0x2e>
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	2300      	movs	r3, #0
 800cb30:	ed80 0b00 	vstr	d0, [r0]
 800cb34:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cb38:	f04f 0b00 	mov.w	fp, #0
 800cb3c:	e028      	b.n	800cb90 <__ieee754_rem_pio2+0x80>
 800cb3e:	4bc3      	ldr	r3, [pc, #780]	; (800ce4c <__ieee754_rem_pio2+0x33c>)
 800cb40:	4598      	cmp	r8, r3
 800cb42:	dc78      	bgt.n	800cc36 <__ieee754_rem_pio2+0x126>
 800cb44:	9b02      	ldr	r3, [sp, #8]
 800cb46:	4ec2      	ldr	r6, [pc, #776]	; (800ce50 <__ieee754_rem_pio2+0x340>)
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	ee10 0a10 	vmov	r0, s0
 800cb4e:	a3b0      	add	r3, pc, #704	; (adr r3, 800ce10 <__ieee754_rem_pio2+0x300>)
 800cb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb54:	4629      	mov	r1, r5
 800cb56:	dd39      	ble.n	800cbcc <__ieee754_rem_pio2+0xbc>
 800cb58:	f7f3 fb42 	bl	80001e0 <__aeabi_dsub>
 800cb5c:	45b0      	cmp	r8, r6
 800cb5e:	4604      	mov	r4, r0
 800cb60:	460d      	mov	r5, r1
 800cb62:	d01b      	beq.n	800cb9c <__ieee754_rem_pio2+0x8c>
 800cb64:	a3ac      	add	r3, pc, #688	; (adr r3, 800ce18 <__ieee754_rem_pio2+0x308>)
 800cb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6a:	f7f3 fb39 	bl	80001e0 <__aeabi_dsub>
 800cb6e:	4602      	mov	r2, r0
 800cb70:	460b      	mov	r3, r1
 800cb72:	e9ca 2300 	strd	r2, r3, [sl]
 800cb76:	4620      	mov	r0, r4
 800cb78:	4629      	mov	r1, r5
 800cb7a:	f7f3 fb31 	bl	80001e0 <__aeabi_dsub>
 800cb7e:	a3a6      	add	r3, pc, #664	; (adr r3, 800ce18 <__ieee754_rem_pio2+0x308>)
 800cb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb84:	f7f3 fb2c 	bl	80001e0 <__aeabi_dsub>
 800cb88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cb8c:	f04f 0b01 	mov.w	fp, #1
 800cb90:	4658      	mov	r0, fp
 800cb92:	b00b      	add	sp, #44	; 0x2c
 800cb94:	ecbd 8b02 	vpop	{d8}
 800cb98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb9c:	a3a0      	add	r3, pc, #640	; (adr r3, 800ce20 <__ieee754_rem_pio2+0x310>)
 800cb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba2:	f7f3 fb1d 	bl	80001e0 <__aeabi_dsub>
 800cba6:	a3a0      	add	r3, pc, #640	; (adr r3, 800ce28 <__ieee754_rem_pio2+0x318>)
 800cba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbac:	4604      	mov	r4, r0
 800cbae:	460d      	mov	r5, r1
 800cbb0:	f7f3 fb16 	bl	80001e0 <__aeabi_dsub>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	e9ca 2300 	strd	r2, r3, [sl]
 800cbbc:	4620      	mov	r0, r4
 800cbbe:	4629      	mov	r1, r5
 800cbc0:	f7f3 fb0e 	bl	80001e0 <__aeabi_dsub>
 800cbc4:	a398      	add	r3, pc, #608	; (adr r3, 800ce28 <__ieee754_rem_pio2+0x318>)
 800cbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbca:	e7db      	b.n	800cb84 <__ieee754_rem_pio2+0x74>
 800cbcc:	f7f3 fb0a 	bl	80001e4 <__adddf3>
 800cbd0:	45b0      	cmp	r8, r6
 800cbd2:	4604      	mov	r4, r0
 800cbd4:	460d      	mov	r5, r1
 800cbd6:	d016      	beq.n	800cc06 <__ieee754_rem_pio2+0xf6>
 800cbd8:	a38f      	add	r3, pc, #572	; (adr r3, 800ce18 <__ieee754_rem_pio2+0x308>)
 800cbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbde:	f7f3 fb01 	bl	80001e4 <__adddf3>
 800cbe2:	4602      	mov	r2, r0
 800cbe4:	460b      	mov	r3, r1
 800cbe6:	e9ca 2300 	strd	r2, r3, [sl]
 800cbea:	4620      	mov	r0, r4
 800cbec:	4629      	mov	r1, r5
 800cbee:	f7f3 faf7 	bl	80001e0 <__aeabi_dsub>
 800cbf2:	a389      	add	r3, pc, #548	; (adr r3, 800ce18 <__ieee754_rem_pio2+0x308>)
 800cbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf8:	f7f3 faf4 	bl	80001e4 <__adddf3>
 800cbfc:	f04f 3bff 	mov.w	fp, #4294967295
 800cc00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cc04:	e7c4      	b.n	800cb90 <__ieee754_rem_pio2+0x80>
 800cc06:	a386      	add	r3, pc, #536	; (adr r3, 800ce20 <__ieee754_rem_pio2+0x310>)
 800cc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0c:	f7f3 faea 	bl	80001e4 <__adddf3>
 800cc10:	a385      	add	r3, pc, #532	; (adr r3, 800ce28 <__ieee754_rem_pio2+0x318>)
 800cc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc16:	4604      	mov	r4, r0
 800cc18:	460d      	mov	r5, r1
 800cc1a:	f7f3 fae3 	bl	80001e4 <__adddf3>
 800cc1e:	4602      	mov	r2, r0
 800cc20:	460b      	mov	r3, r1
 800cc22:	e9ca 2300 	strd	r2, r3, [sl]
 800cc26:	4620      	mov	r0, r4
 800cc28:	4629      	mov	r1, r5
 800cc2a:	f7f3 fad9 	bl	80001e0 <__aeabi_dsub>
 800cc2e:	a37e      	add	r3, pc, #504	; (adr r3, 800ce28 <__ieee754_rem_pio2+0x318>)
 800cc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc34:	e7e0      	b.n	800cbf8 <__ieee754_rem_pio2+0xe8>
 800cc36:	4b87      	ldr	r3, [pc, #540]	; (800ce54 <__ieee754_rem_pio2+0x344>)
 800cc38:	4598      	cmp	r8, r3
 800cc3a:	f300 80d9 	bgt.w	800cdf0 <__ieee754_rem_pio2+0x2e0>
 800cc3e:	f000 ff2d 	bl	800da9c <fabs>
 800cc42:	ec55 4b10 	vmov	r4, r5, d0
 800cc46:	ee10 0a10 	vmov	r0, s0
 800cc4a:	a379      	add	r3, pc, #484	; (adr r3, 800ce30 <__ieee754_rem_pio2+0x320>)
 800cc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc50:	4629      	mov	r1, r5
 800cc52:	f7f3 fc7d 	bl	8000550 <__aeabi_dmul>
 800cc56:	4b80      	ldr	r3, [pc, #512]	; (800ce58 <__ieee754_rem_pio2+0x348>)
 800cc58:	2200      	movs	r2, #0
 800cc5a:	f7f3 fac3 	bl	80001e4 <__adddf3>
 800cc5e:	f7f3 ff27 	bl	8000ab0 <__aeabi_d2iz>
 800cc62:	4683      	mov	fp, r0
 800cc64:	f7f3 fc0a 	bl	800047c <__aeabi_i2d>
 800cc68:	4602      	mov	r2, r0
 800cc6a:	460b      	mov	r3, r1
 800cc6c:	ec43 2b18 	vmov	d8, r2, r3
 800cc70:	a367      	add	r3, pc, #412	; (adr r3, 800ce10 <__ieee754_rem_pio2+0x300>)
 800cc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc76:	f7f3 fc6b 	bl	8000550 <__aeabi_dmul>
 800cc7a:	4602      	mov	r2, r0
 800cc7c:	460b      	mov	r3, r1
 800cc7e:	4620      	mov	r0, r4
 800cc80:	4629      	mov	r1, r5
 800cc82:	f7f3 faad 	bl	80001e0 <__aeabi_dsub>
 800cc86:	a364      	add	r3, pc, #400	; (adr r3, 800ce18 <__ieee754_rem_pio2+0x308>)
 800cc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc8c:	4606      	mov	r6, r0
 800cc8e:	460f      	mov	r7, r1
 800cc90:	ec51 0b18 	vmov	r0, r1, d8
 800cc94:	f7f3 fc5c 	bl	8000550 <__aeabi_dmul>
 800cc98:	f1bb 0f1f 	cmp.w	fp, #31
 800cc9c:	4604      	mov	r4, r0
 800cc9e:	460d      	mov	r5, r1
 800cca0:	dc0d      	bgt.n	800ccbe <__ieee754_rem_pio2+0x1ae>
 800cca2:	4b6e      	ldr	r3, [pc, #440]	; (800ce5c <__ieee754_rem_pio2+0x34c>)
 800cca4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800cca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccac:	4543      	cmp	r3, r8
 800ccae:	d006      	beq.n	800ccbe <__ieee754_rem_pio2+0x1ae>
 800ccb0:	4622      	mov	r2, r4
 800ccb2:	462b      	mov	r3, r5
 800ccb4:	4630      	mov	r0, r6
 800ccb6:	4639      	mov	r1, r7
 800ccb8:	f7f3 fa92 	bl	80001e0 <__aeabi_dsub>
 800ccbc:	e00f      	b.n	800ccde <__ieee754_rem_pio2+0x1ce>
 800ccbe:	462b      	mov	r3, r5
 800ccc0:	4622      	mov	r2, r4
 800ccc2:	4630      	mov	r0, r6
 800ccc4:	4639      	mov	r1, r7
 800ccc6:	f7f3 fa8b 	bl	80001e0 <__aeabi_dsub>
 800ccca:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ccce:	9303      	str	r3, [sp, #12]
 800ccd0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ccd4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800ccd8:	f1b8 0f10 	cmp.w	r8, #16
 800ccdc:	dc02      	bgt.n	800cce4 <__ieee754_rem_pio2+0x1d4>
 800ccde:	e9ca 0100 	strd	r0, r1, [sl]
 800cce2:	e039      	b.n	800cd58 <__ieee754_rem_pio2+0x248>
 800cce4:	a34e      	add	r3, pc, #312	; (adr r3, 800ce20 <__ieee754_rem_pio2+0x310>)
 800cce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccea:	ec51 0b18 	vmov	r0, r1, d8
 800ccee:	f7f3 fc2f 	bl	8000550 <__aeabi_dmul>
 800ccf2:	4604      	mov	r4, r0
 800ccf4:	460d      	mov	r5, r1
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	4630      	mov	r0, r6
 800ccfc:	4639      	mov	r1, r7
 800ccfe:	f7f3 fa6f 	bl	80001e0 <__aeabi_dsub>
 800cd02:	4602      	mov	r2, r0
 800cd04:	460b      	mov	r3, r1
 800cd06:	4680      	mov	r8, r0
 800cd08:	4689      	mov	r9, r1
 800cd0a:	4630      	mov	r0, r6
 800cd0c:	4639      	mov	r1, r7
 800cd0e:	f7f3 fa67 	bl	80001e0 <__aeabi_dsub>
 800cd12:	4622      	mov	r2, r4
 800cd14:	462b      	mov	r3, r5
 800cd16:	f7f3 fa63 	bl	80001e0 <__aeabi_dsub>
 800cd1a:	a343      	add	r3, pc, #268	; (adr r3, 800ce28 <__ieee754_rem_pio2+0x318>)
 800cd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd20:	4604      	mov	r4, r0
 800cd22:	460d      	mov	r5, r1
 800cd24:	ec51 0b18 	vmov	r0, r1, d8
 800cd28:	f7f3 fc12 	bl	8000550 <__aeabi_dmul>
 800cd2c:	4622      	mov	r2, r4
 800cd2e:	462b      	mov	r3, r5
 800cd30:	f7f3 fa56 	bl	80001e0 <__aeabi_dsub>
 800cd34:	4602      	mov	r2, r0
 800cd36:	460b      	mov	r3, r1
 800cd38:	4604      	mov	r4, r0
 800cd3a:	460d      	mov	r5, r1
 800cd3c:	4640      	mov	r0, r8
 800cd3e:	4649      	mov	r1, r9
 800cd40:	f7f3 fa4e 	bl	80001e0 <__aeabi_dsub>
 800cd44:	9a03      	ldr	r2, [sp, #12]
 800cd46:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cd4a:	1ad3      	subs	r3, r2, r3
 800cd4c:	2b31      	cmp	r3, #49	; 0x31
 800cd4e:	dc24      	bgt.n	800cd9a <__ieee754_rem_pio2+0x28a>
 800cd50:	e9ca 0100 	strd	r0, r1, [sl]
 800cd54:	4646      	mov	r6, r8
 800cd56:	464f      	mov	r7, r9
 800cd58:	e9da 8900 	ldrd	r8, r9, [sl]
 800cd5c:	4630      	mov	r0, r6
 800cd5e:	4642      	mov	r2, r8
 800cd60:	464b      	mov	r3, r9
 800cd62:	4639      	mov	r1, r7
 800cd64:	f7f3 fa3c 	bl	80001e0 <__aeabi_dsub>
 800cd68:	462b      	mov	r3, r5
 800cd6a:	4622      	mov	r2, r4
 800cd6c:	f7f3 fa38 	bl	80001e0 <__aeabi_dsub>
 800cd70:	9b02      	ldr	r3, [sp, #8]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cd78:	f6bf af0a 	bge.w	800cb90 <__ieee754_rem_pio2+0x80>
 800cd7c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cd80:	f8ca 3004 	str.w	r3, [sl, #4]
 800cd84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd88:	f8ca 8000 	str.w	r8, [sl]
 800cd8c:	f8ca 0008 	str.w	r0, [sl, #8]
 800cd90:	f8ca 300c 	str.w	r3, [sl, #12]
 800cd94:	f1cb 0b00 	rsb	fp, fp, #0
 800cd98:	e6fa      	b.n	800cb90 <__ieee754_rem_pio2+0x80>
 800cd9a:	a327      	add	r3, pc, #156	; (adr r3, 800ce38 <__ieee754_rem_pio2+0x328>)
 800cd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda0:	ec51 0b18 	vmov	r0, r1, d8
 800cda4:	f7f3 fbd4 	bl	8000550 <__aeabi_dmul>
 800cda8:	4604      	mov	r4, r0
 800cdaa:	460d      	mov	r5, r1
 800cdac:	4602      	mov	r2, r0
 800cdae:	460b      	mov	r3, r1
 800cdb0:	4640      	mov	r0, r8
 800cdb2:	4649      	mov	r1, r9
 800cdb4:	f7f3 fa14 	bl	80001e0 <__aeabi_dsub>
 800cdb8:	4602      	mov	r2, r0
 800cdba:	460b      	mov	r3, r1
 800cdbc:	4606      	mov	r6, r0
 800cdbe:	460f      	mov	r7, r1
 800cdc0:	4640      	mov	r0, r8
 800cdc2:	4649      	mov	r1, r9
 800cdc4:	f7f3 fa0c 	bl	80001e0 <__aeabi_dsub>
 800cdc8:	4622      	mov	r2, r4
 800cdca:	462b      	mov	r3, r5
 800cdcc:	f7f3 fa08 	bl	80001e0 <__aeabi_dsub>
 800cdd0:	a31b      	add	r3, pc, #108	; (adr r3, 800ce40 <__ieee754_rem_pio2+0x330>)
 800cdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd6:	4604      	mov	r4, r0
 800cdd8:	460d      	mov	r5, r1
 800cdda:	ec51 0b18 	vmov	r0, r1, d8
 800cdde:	f7f3 fbb7 	bl	8000550 <__aeabi_dmul>
 800cde2:	4622      	mov	r2, r4
 800cde4:	462b      	mov	r3, r5
 800cde6:	f7f3 f9fb 	bl	80001e0 <__aeabi_dsub>
 800cdea:	4604      	mov	r4, r0
 800cdec:	460d      	mov	r5, r1
 800cdee:	e75f      	b.n	800ccb0 <__ieee754_rem_pio2+0x1a0>
 800cdf0:	4b1b      	ldr	r3, [pc, #108]	; (800ce60 <__ieee754_rem_pio2+0x350>)
 800cdf2:	4598      	cmp	r8, r3
 800cdf4:	dd36      	ble.n	800ce64 <__ieee754_rem_pio2+0x354>
 800cdf6:	ee10 2a10 	vmov	r2, s0
 800cdfa:	462b      	mov	r3, r5
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	4629      	mov	r1, r5
 800ce00:	f7f3 f9ee 	bl	80001e0 <__aeabi_dsub>
 800ce04:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ce08:	e9ca 0100 	strd	r0, r1, [sl]
 800ce0c:	e694      	b.n	800cb38 <__ieee754_rem_pio2+0x28>
 800ce0e:	bf00      	nop
 800ce10:	54400000 	.word	0x54400000
 800ce14:	3ff921fb 	.word	0x3ff921fb
 800ce18:	1a626331 	.word	0x1a626331
 800ce1c:	3dd0b461 	.word	0x3dd0b461
 800ce20:	1a600000 	.word	0x1a600000
 800ce24:	3dd0b461 	.word	0x3dd0b461
 800ce28:	2e037073 	.word	0x2e037073
 800ce2c:	3ba3198a 	.word	0x3ba3198a
 800ce30:	6dc9c883 	.word	0x6dc9c883
 800ce34:	3fe45f30 	.word	0x3fe45f30
 800ce38:	2e000000 	.word	0x2e000000
 800ce3c:	3ba3198a 	.word	0x3ba3198a
 800ce40:	252049c1 	.word	0x252049c1
 800ce44:	397b839a 	.word	0x397b839a
 800ce48:	3fe921fb 	.word	0x3fe921fb
 800ce4c:	4002d97b 	.word	0x4002d97b
 800ce50:	3ff921fb 	.word	0x3ff921fb
 800ce54:	413921fb 	.word	0x413921fb
 800ce58:	3fe00000 	.word	0x3fe00000
 800ce5c:	0800dc58 	.word	0x0800dc58
 800ce60:	7fefffff 	.word	0x7fefffff
 800ce64:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ce68:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ce6c:	ee10 0a10 	vmov	r0, s0
 800ce70:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ce74:	ee10 6a10 	vmov	r6, s0
 800ce78:	460f      	mov	r7, r1
 800ce7a:	f7f3 fe19 	bl	8000ab0 <__aeabi_d2iz>
 800ce7e:	f7f3 fafd 	bl	800047c <__aeabi_i2d>
 800ce82:	4602      	mov	r2, r0
 800ce84:	460b      	mov	r3, r1
 800ce86:	4630      	mov	r0, r6
 800ce88:	4639      	mov	r1, r7
 800ce8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ce8e:	f7f3 f9a7 	bl	80001e0 <__aeabi_dsub>
 800ce92:	4b23      	ldr	r3, [pc, #140]	; (800cf20 <__ieee754_rem_pio2+0x410>)
 800ce94:	2200      	movs	r2, #0
 800ce96:	f7f3 fb5b 	bl	8000550 <__aeabi_dmul>
 800ce9a:	460f      	mov	r7, r1
 800ce9c:	4606      	mov	r6, r0
 800ce9e:	f7f3 fe07 	bl	8000ab0 <__aeabi_d2iz>
 800cea2:	f7f3 faeb 	bl	800047c <__aeabi_i2d>
 800cea6:	4602      	mov	r2, r0
 800cea8:	460b      	mov	r3, r1
 800ceaa:	4630      	mov	r0, r6
 800ceac:	4639      	mov	r1, r7
 800ceae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ceb2:	f7f3 f995 	bl	80001e0 <__aeabi_dsub>
 800ceb6:	4b1a      	ldr	r3, [pc, #104]	; (800cf20 <__ieee754_rem_pio2+0x410>)
 800ceb8:	2200      	movs	r2, #0
 800ceba:	f7f3 fb49 	bl	8000550 <__aeabi_dmul>
 800cebe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cec2:	ad04      	add	r5, sp, #16
 800cec4:	f04f 0803 	mov.w	r8, #3
 800cec8:	46a9      	mov	r9, r5
 800ceca:	2600      	movs	r6, #0
 800cecc:	2700      	movs	r7, #0
 800cece:	4632      	mov	r2, r6
 800ced0:	463b      	mov	r3, r7
 800ced2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ced6:	46c3      	mov	fp, r8
 800ced8:	3d08      	subs	r5, #8
 800ceda:	f108 38ff 	add.w	r8, r8, #4294967295
 800cede:	f7f3 fd9f 	bl	8000a20 <__aeabi_dcmpeq>
 800cee2:	2800      	cmp	r0, #0
 800cee4:	d1f3      	bne.n	800cece <__ieee754_rem_pio2+0x3be>
 800cee6:	4b0f      	ldr	r3, [pc, #60]	; (800cf24 <__ieee754_rem_pio2+0x414>)
 800cee8:	9301      	str	r3, [sp, #4]
 800ceea:	2302      	movs	r3, #2
 800ceec:	9300      	str	r3, [sp, #0]
 800ceee:	4622      	mov	r2, r4
 800cef0:	465b      	mov	r3, fp
 800cef2:	4651      	mov	r1, sl
 800cef4:	4648      	mov	r0, r9
 800cef6:	f000 f993 	bl	800d220 <__kernel_rem_pio2>
 800cefa:	9b02      	ldr	r3, [sp, #8]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	4683      	mov	fp, r0
 800cf00:	f6bf ae46 	bge.w	800cb90 <__ieee754_rem_pio2+0x80>
 800cf04:	e9da 2100 	ldrd	r2, r1, [sl]
 800cf08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf0c:	e9ca 2300 	strd	r2, r3, [sl]
 800cf10:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800cf14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf18:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800cf1c:	e73a      	b.n	800cd94 <__ieee754_rem_pio2+0x284>
 800cf1e:	bf00      	nop
 800cf20:	41700000 	.word	0x41700000
 800cf24:	0800dcd8 	.word	0x0800dcd8

0800cf28 <__ieee754_sqrt>:
 800cf28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf2c:	ec55 4b10 	vmov	r4, r5, d0
 800cf30:	4e55      	ldr	r6, [pc, #340]	; (800d088 <__ieee754_sqrt+0x160>)
 800cf32:	43ae      	bics	r6, r5
 800cf34:	ee10 0a10 	vmov	r0, s0
 800cf38:	ee10 3a10 	vmov	r3, s0
 800cf3c:	462a      	mov	r2, r5
 800cf3e:	4629      	mov	r1, r5
 800cf40:	d110      	bne.n	800cf64 <__ieee754_sqrt+0x3c>
 800cf42:	ee10 2a10 	vmov	r2, s0
 800cf46:	462b      	mov	r3, r5
 800cf48:	f7f3 fb02 	bl	8000550 <__aeabi_dmul>
 800cf4c:	4602      	mov	r2, r0
 800cf4e:	460b      	mov	r3, r1
 800cf50:	4620      	mov	r0, r4
 800cf52:	4629      	mov	r1, r5
 800cf54:	f7f3 f946 	bl	80001e4 <__adddf3>
 800cf58:	4604      	mov	r4, r0
 800cf5a:	460d      	mov	r5, r1
 800cf5c:	ec45 4b10 	vmov	d0, r4, r5
 800cf60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf64:	2d00      	cmp	r5, #0
 800cf66:	dc10      	bgt.n	800cf8a <__ieee754_sqrt+0x62>
 800cf68:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cf6c:	4330      	orrs	r0, r6
 800cf6e:	d0f5      	beq.n	800cf5c <__ieee754_sqrt+0x34>
 800cf70:	b15d      	cbz	r5, 800cf8a <__ieee754_sqrt+0x62>
 800cf72:	ee10 2a10 	vmov	r2, s0
 800cf76:	462b      	mov	r3, r5
 800cf78:	ee10 0a10 	vmov	r0, s0
 800cf7c:	f7f3 f930 	bl	80001e0 <__aeabi_dsub>
 800cf80:	4602      	mov	r2, r0
 800cf82:	460b      	mov	r3, r1
 800cf84:	f7f3 fc0e 	bl	80007a4 <__aeabi_ddiv>
 800cf88:	e7e6      	b.n	800cf58 <__ieee754_sqrt+0x30>
 800cf8a:	1512      	asrs	r2, r2, #20
 800cf8c:	d074      	beq.n	800d078 <__ieee754_sqrt+0x150>
 800cf8e:	07d4      	lsls	r4, r2, #31
 800cf90:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cf94:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800cf98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800cf9c:	bf5e      	ittt	pl
 800cf9e:	0fda      	lsrpl	r2, r3, #31
 800cfa0:	005b      	lslpl	r3, r3, #1
 800cfa2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800cfa6:	2400      	movs	r4, #0
 800cfa8:	0fda      	lsrs	r2, r3, #31
 800cfaa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800cfae:	107f      	asrs	r7, r7, #1
 800cfb0:	005b      	lsls	r3, r3, #1
 800cfb2:	2516      	movs	r5, #22
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cfba:	1886      	adds	r6, r0, r2
 800cfbc:	428e      	cmp	r6, r1
 800cfbe:	bfde      	ittt	le
 800cfc0:	1b89      	suble	r1, r1, r6
 800cfc2:	18b0      	addle	r0, r6, r2
 800cfc4:	18a4      	addle	r4, r4, r2
 800cfc6:	0049      	lsls	r1, r1, #1
 800cfc8:	3d01      	subs	r5, #1
 800cfca:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800cfce:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800cfd2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cfd6:	d1f0      	bne.n	800cfba <__ieee754_sqrt+0x92>
 800cfd8:	462a      	mov	r2, r5
 800cfda:	f04f 0e20 	mov.w	lr, #32
 800cfde:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cfe2:	4281      	cmp	r1, r0
 800cfe4:	eb06 0c05 	add.w	ip, r6, r5
 800cfe8:	dc02      	bgt.n	800cff0 <__ieee754_sqrt+0xc8>
 800cfea:	d113      	bne.n	800d014 <__ieee754_sqrt+0xec>
 800cfec:	459c      	cmp	ip, r3
 800cfee:	d811      	bhi.n	800d014 <__ieee754_sqrt+0xec>
 800cff0:	f1bc 0f00 	cmp.w	ip, #0
 800cff4:	eb0c 0506 	add.w	r5, ip, r6
 800cff8:	da43      	bge.n	800d082 <__ieee754_sqrt+0x15a>
 800cffa:	2d00      	cmp	r5, #0
 800cffc:	db41      	blt.n	800d082 <__ieee754_sqrt+0x15a>
 800cffe:	f100 0801 	add.w	r8, r0, #1
 800d002:	1a09      	subs	r1, r1, r0
 800d004:	459c      	cmp	ip, r3
 800d006:	bf88      	it	hi
 800d008:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800d00c:	eba3 030c 	sub.w	r3, r3, ip
 800d010:	4432      	add	r2, r6
 800d012:	4640      	mov	r0, r8
 800d014:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d018:	f1be 0e01 	subs.w	lr, lr, #1
 800d01c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800d020:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d024:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d028:	d1db      	bne.n	800cfe2 <__ieee754_sqrt+0xba>
 800d02a:	430b      	orrs	r3, r1
 800d02c:	d006      	beq.n	800d03c <__ieee754_sqrt+0x114>
 800d02e:	1c50      	adds	r0, r2, #1
 800d030:	bf13      	iteet	ne
 800d032:	3201      	addne	r2, #1
 800d034:	3401      	addeq	r4, #1
 800d036:	4672      	moveq	r2, lr
 800d038:	f022 0201 	bicne.w	r2, r2, #1
 800d03c:	1063      	asrs	r3, r4, #1
 800d03e:	0852      	lsrs	r2, r2, #1
 800d040:	07e1      	lsls	r1, r4, #31
 800d042:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d046:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d04a:	bf48      	it	mi
 800d04c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d050:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d054:	4614      	mov	r4, r2
 800d056:	e781      	b.n	800cf5c <__ieee754_sqrt+0x34>
 800d058:	0ad9      	lsrs	r1, r3, #11
 800d05a:	3815      	subs	r0, #21
 800d05c:	055b      	lsls	r3, r3, #21
 800d05e:	2900      	cmp	r1, #0
 800d060:	d0fa      	beq.n	800d058 <__ieee754_sqrt+0x130>
 800d062:	02cd      	lsls	r5, r1, #11
 800d064:	d50a      	bpl.n	800d07c <__ieee754_sqrt+0x154>
 800d066:	f1c2 0420 	rsb	r4, r2, #32
 800d06a:	fa23 f404 	lsr.w	r4, r3, r4
 800d06e:	1e55      	subs	r5, r2, #1
 800d070:	4093      	lsls	r3, r2
 800d072:	4321      	orrs	r1, r4
 800d074:	1b42      	subs	r2, r0, r5
 800d076:	e78a      	b.n	800cf8e <__ieee754_sqrt+0x66>
 800d078:	4610      	mov	r0, r2
 800d07a:	e7f0      	b.n	800d05e <__ieee754_sqrt+0x136>
 800d07c:	0049      	lsls	r1, r1, #1
 800d07e:	3201      	adds	r2, #1
 800d080:	e7ef      	b.n	800d062 <__ieee754_sqrt+0x13a>
 800d082:	4680      	mov	r8, r0
 800d084:	e7bd      	b.n	800d002 <__ieee754_sqrt+0xda>
 800d086:	bf00      	nop
 800d088:	7ff00000 	.word	0x7ff00000
 800d08c:	00000000 	.word	0x00000000

0800d090 <__kernel_cos>:
 800d090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d094:	ec57 6b10 	vmov	r6, r7, d0
 800d098:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d09c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d0a0:	ed8d 1b00 	vstr	d1, [sp]
 800d0a4:	da07      	bge.n	800d0b6 <__kernel_cos+0x26>
 800d0a6:	ee10 0a10 	vmov	r0, s0
 800d0aa:	4639      	mov	r1, r7
 800d0ac:	f7f3 fd00 	bl	8000ab0 <__aeabi_d2iz>
 800d0b0:	2800      	cmp	r0, #0
 800d0b2:	f000 8088 	beq.w	800d1c6 <__kernel_cos+0x136>
 800d0b6:	4632      	mov	r2, r6
 800d0b8:	463b      	mov	r3, r7
 800d0ba:	4630      	mov	r0, r6
 800d0bc:	4639      	mov	r1, r7
 800d0be:	f7f3 fa47 	bl	8000550 <__aeabi_dmul>
 800d0c2:	4b51      	ldr	r3, [pc, #324]	; (800d208 <__kernel_cos+0x178>)
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	4604      	mov	r4, r0
 800d0c8:	460d      	mov	r5, r1
 800d0ca:	f7f3 fa41 	bl	8000550 <__aeabi_dmul>
 800d0ce:	a340      	add	r3, pc, #256	; (adr r3, 800d1d0 <__kernel_cos+0x140>)
 800d0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d4:	4682      	mov	sl, r0
 800d0d6:	468b      	mov	fp, r1
 800d0d8:	4620      	mov	r0, r4
 800d0da:	4629      	mov	r1, r5
 800d0dc:	f7f3 fa38 	bl	8000550 <__aeabi_dmul>
 800d0e0:	a33d      	add	r3, pc, #244	; (adr r3, 800d1d8 <__kernel_cos+0x148>)
 800d0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e6:	f7f3 f87d 	bl	80001e4 <__adddf3>
 800d0ea:	4622      	mov	r2, r4
 800d0ec:	462b      	mov	r3, r5
 800d0ee:	f7f3 fa2f 	bl	8000550 <__aeabi_dmul>
 800d0f2:	a33b      	add	r3, pc, #236	; (adr r3, 800d1e0 <__kernel_cos+0x150>)
 800d0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f8:	f7f3 f872 	bl	80001e0 <__aeabi_dsub>
 800d0fc:	4622      	mov	r2, r4
 800d0fe:	462b      	mov	r3, r5
 800d100:	f7f3 fa26 	bl	8000550 <__aeabi_dmul>
 800d104:	a338      	add	r3, pc, #224	; (adr r3, 800d1e8 <__kernel_cos+0x158>)
 800d106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d10a:	f7f3 f86b 	bl	80001e4 <__adddf3>
 800d10e:	4622      	mov	r2, r4
 800d110:	462b      	mov	r3, r5
 800d112:	f7f3 fa1d 	bl	8000550 <__aeabi_dmul>
 800d116:	a336      	add	r3, pc, #216	; (adr r3, 800d1f0 <__kernel_cos+0x160>)
 800d118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11c:	f7f3 f860 	bl	80001e0 <__aeabi_dsub>
 800d120:	4622      	mov	r2, r4
 800d122:	462b      	mov	r3, r5
 800d124:	f7f3 fa14 	bl	8000550 <__aeabi_dmul>
 800d128:	a333      	add	r3, pc, #204	; (adr r3, 800d1f8 <__kernel_cos+0x168>)
 800d12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12e:	f7f3 f859 	bl	80001e4 <__adddf3>
 800d132:	4622      	mov	r2, r4
 800d134:	462b      	mov	r3, r5
 800d136:	f7f3 fa0b 	bl	8000550 <__aeabi_dmul>
 800d13a:	4622      	mov	r2, r4
 800d13c:	462b      	mov	r3, r5
 800d13e:	f7f3 fa07 	bl	8000550 <__aeabi_dmul>
 800d142:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d146:	4604      	mov	r4, r0
 800d148:	460d      	mov	r5, r1
 800d14a:	4630      	mov	r0, r6
 800d14c:	4639      	mov	r1, r7
 800d14e:	f7f3 f9ff 	bl	8000550 <__aeabi_dmul>
 800d152:	460b      	mov	r3, r1
 800d154:	4602      	mov	r2, r0
 800d156:	4629      	mov	r1, r5
 800d158:	4620      	mov	r0, r4
 800d15a:	f7f3 f841 	bl	80001e0 <__aeabi_dsub>
 800d15e:	4b2b      	ldr	r3, [pc, #172]	; (800d20c <__kernel_cos+0x17c>)
 800d160:	4598      	cmp	r8, r3
 800d162:	4606      	mov	r6, r0
 800d164:	460f      	mov	r7, r1
 800d166:	dc10      	bgt.n	800d18a <__kernel_cos+0xfa>
 800d168:	4602      	mov	r2, r0
 800d16a:	460b      	mov	r3, r1
 800d16c:	4650      	mov	r0, sl
 800d16e:	4659      	mov	r1, fp
 800d170:	f7f3 f836 	bl	80001e0 <__aeabi_dsub>
 800d174:	460b      	mov	r3, r1
 800d176:	4926      	ldr	r1, [pc, #152]	; (800d210 <__kernel_cos+0x180>)
 800d178:	4602      	mov	r2, r0
 800d17a:	2000      	movs	r0, #0
 800d17c:	f7f3 f830 	bl	80001e0 <__aeabi_dsub>
 800d180:	ec41 0b10 	vmov	d0, r0, r1
 800d184:	b003      	add	sp, #12
 800d186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d18a:	4b22      	ldr	r3, [pc, #136]	; (800d214 <__kernel_cos+0x184>)
 800d18c:	4920      	ldr	r1, [pc, #128]	; (800d210 <__kernel_cos+0x180>)
 800d18e:	4598      	cmp	r8, r3
 800d190:	bfcc      	ite	gt
 800d192:	4d21      	ldrgt	r5, [pc, #132]	; (800d218 <__kernel_cos+0x188>)
 800d194:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d198:	2400      	movs	r4, #0
 800d19a:	4622      	mov	r2, r4
 800d19c:	462b      	mov	r3, r5
 800d19e:	2000      	movs	r0, #0
 800d1a0:	f7f3 f81e 	bl	80001e0 <__aeabi_dsub>
 800d1a4:	4622      	mov	r2, r4
 800d1a6:	4680      	mov	r8, r0
 800d1a8:	4689      	mov	r9, r1
 800d1aa:	462b      	mov	r3, r5
 800d1ac:	4650      	mov	r0, sl
 800d1ae:	4659      	mov	r1, fp
 800d1b0:	f7f3 f816 	bl	80001e0 <__aeabi_dsub>
 800d1b4:	4632      	mov	r2, r6
 800d1b6:	463b      	mov	r3, r7
 800d1b8:	f7f3 f812 	bl	80001e0 <__aeabi_dsub>
 800d1bc:	4602      	mov	r2, r0
 800d1be:	460b      	mov	r3, r1
 800d1c0:	4640      	mov	r0, r8
 800d1c2:	4649      	mov	r1, r9
 800d1c4:	e7da      	b.n	800d17c <__kernel_cos+0xec>
 800d1c6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d200 <__kernel_cos+0x170>
 800d1ca:	e7db      	b.n	800d184 <__kernel_cos+0xf4>
 800d1cc:	f3af 8000 	nop.w
 800d1d0:	be8838d4 	.word	0xbe8838d4
 800d1d4:	bda8fae9 	.word	0xbda8fae9
 800d1d8:	bdb4b1c4 	.word	0xbdb4b1c4
 800d1dc:	3e21ee9e 	.word	0x3e21ee9e
 800d1e0:	809c52ad 	.word	0x809c52ad
 800d1e4:	3e927e4f 	.word	0x3e927e4f
 800d1e8:	19cb1590 	.word	0x19cb1590
 800d1ec:	3efa01a0 	.word	0x3efa01a0
 800d1f0:	16c15177 	.word	0x16c15177
 800d1f4:	3f56c16c 	.word	0x3f56c16c
 800d1f8:	5555554c 	.word	0x5555554c
 800d1fc:	3fa55555 	.word	0x3fa55555
 800d200:	00000000 	.word	0x00000000
 800d204:	3ff00000 	.word	0x3ff00000
 800d208:	3fe00000 	.word	0x3fe00000
 800d20c:	3fd33332 	.word	0x3fd33332
 800d210:	3ff00000 	.word	0x3ff00000
 800d214:	3fe90000 	.word	0x3fe90000
 800d218:	3fd20000 	.word	0x3fd20000
 800d21c:	00000000 	.word	0x00000000

0800d220 <__kernel_rem_pio2>:
 800d220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d224:	ed2d 8b02 	vpush	{d8}
 800d228:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800d22c:	f112 0f14 	cmn.w	r2, #20
 800d230:	9308      	str	r3, [sp, #32]
 800d232:	9101      	str	r1, [sp, #4]
 800d234:	4bc4      	ldr	r3, [pc, #784]	; (800d548 <__kernel_rem_pio2+0x328>)
 800d236:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800d238:	900b      	str	r0, [sp, #44]	; 0x2c
 800d23a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d23e:	9302      	str	r3, [sp, #8]
 800d240:	9b08      	ldr	r3, [sp, #32]
 800d242:	f103 33ff 	add.w	r3, r3, #4294967295
 800d246:	bfa8      	it	ge
 800d248:	1ed4      	subge	r4, r2, #3
 800d24a:	9306      	str	r3, [sp, #24]
 800d24c:	bfb2      	itee	lt
 800d24e:	2400      	movlt	r4, #0
 800d250:	2318      	movge	r3, #24
 800d252:	fb94 f4f3 	sdivge	r4, r4, r3
 800d256:	f06f 0317 	mvn.w	r3, #23
 800d25a:	fb04 3303 	mla	r3, r4, r3, r3
 800d25e:	eb03 0a02 	add.w	sl, r3, r2
 800d262:	9b02      	ldr	r3, [sp, #8]
 800d264:	9a06      	ldr	r2, [sp, #24]
 800d266:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800d538 <__kernel_rem_pio2+0x318>
 800d26a:	eb03 0802 	add.w	r8, r3, r2
 800d26e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d270:	1aa7      	subs	r7, r4, r2
 800d272:	ae22      	add	r6, sp, #136	; 0x88
 800d274:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d278:	2500      	movs	r5, #0
 800d27a:	4545      	cmp	r5, r8
 800d27c:	dd13      	ble.n	800d2a6 <__kernel_rem_pio2+0x86>
 800d27e:	9b08      	ldr	r3, [sp, #32]
 800d280:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800d538 <__kernel_rem_pio2+0x318>
 800d284:	aa22      	add	r2, sp, #136	; 0x88
 800d286:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d28a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800d28e:	f04f 0800 	mov.w	r8, #0
 800d292:	9b02      	ldr	r3, [sp, #8]
 800d294:	4598      	cmp	r8, r3
 800d296:	dc2f      	bgt.n	800d2f8 <__kernel_rem_pio2+0xd8>
 800d298:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d29c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800d2a0:	462f      	mov	r7, r5
 800d2a2:	2600      	movs	r6, #0
 800d2a4:	e01b      	b.n	800d2de <__kernel_rem_pio2+0xbe>
 800d2a6:	42ef      	cmn	r7, r5
 800d2a8:	d407      	bmi.n	800d2ba <__kernel_rem_pio2+0x9a>
 800d2aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d2ae:	f7f3 f8e5 	bl	800047c <__aeabi_i2d>
 800d2b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d2b6:	3501      	adds	r5, #1
 800d2b8:	e7df      	b.n	800d27a <__kernel_rem_pio2+0x5a>
 800d2ba:	ec51 0b18 	vmov	r0, r1, d8
 800d2be:	e7f8      	b.n	800d2b2 <__kernel_rem_pio2+0x92>
 800d2c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d2c8:	f7f3 f942 	bl	8000550 <__aeabi_dmul>
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	460b      	mov	r3, r1
 800d2d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d2d4:	f7f2 ff86 	bl	80001e4 <__adddf3>
 800d2d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d2dc:	3601      	adds	r6, #1
 800d2de:	9b06      	ldr	r3, [sp, #24]
 800d2e0:	429e      	cmp	r6, r3
 800d2e2:	f1a7 0708 	sub.w	r7, r7, #8
 800d2e6:	ddeb      	ble.n	800d2c0 <__kernel_rem_pio2+0xa0>
 800d2e8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d2ec:	f108 0801 	add.w	r8, r8, #1
 800d2f0:	ecab 7b02 	vstmia	fp!, {d7}
 800d2f4:	3508      	adds	r5, #8
 800d2f6:	e7cc      	b.n	800d292 <__kernel_rem_pio2+0x72>
 800d2f8:	9b02      	ldr	r3, [sp, #8]
 800d2fa:	aa0e      	add	r2, sp, #56	; 0x38
 800d2fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d300:	930d      	str	r3, [sp, #52]	; 0x34
 800d302:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d304:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d308:	9c02      	ldr	r4, [sp, #8]
 800d30a:	930c      	str	r3, [sp, #48]	; 0x30
 800d30c:	00e3      	lsls	r3, r4, #3
 800d30e:	930a      	str	r3, [sp, #40]	; 0x28
 800d310:	ab9a      	add	r3, sp, #616	; 0x268
 800d312:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d316:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d31a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800d31e:	ab72      	add	r3, sp, #456	; 0x1c8
 800d320:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d324:	46c3      	mov	fp, r8
 800d326:	46a1      	mov	r9, r4
 800d328:	f1b9 0f00 	cmp.w	r9, #0
 800d32c:	f1a5 0508 	sub.w	r5, r5, #8
 800d330:	dc77      	bgt.n	800d422 <__kernel_rem_pio2+0x202>
 800d332:	ec47 6b10 	vmov	d0, r6, r7
 800d336:	4650      	mov	r0, sl
 800d338:	f000 fbce 	bl	800dad8 <scalbn>
 800d33c:	ec57 6b10 	vmov	r6, r7, d0
 800d340:	2200      	movs	r2, #0
 800d342:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d346:	ee10 0a10 	vmov	r0, s0
 800d34a:	4639      	mov	r1, r7
 800d34c:	f7f3 f900 	bl	8000550 <__aeabi_dmul>
 800d350:	ec41 0b10 	vmov	d0, r0, r1
 800d354:	f7fe faa4 	bl	800b8a0 <floor>
 800d358:	4b7c      	ldr	r3, [pc, #496]	; (800d54c <__kernel_rem_pio2+0x32c>)
 800d35a:	ec51 0b10 	vmov	r0, r1, d0
 800d35e:	2200      	movs	r2, #0
 800d360:	f7f3 f8f6 	bl	8000550 <__aeabi_dmul>
 800d364:	4602      	mov	r2, r0
 800d366:	460b      	mov	r3, r1
 800d368:	4630      	mov	r0, r6
 800d36a:	4639      	mov	r1, r7
 800d36c:	f7f2 ff38 	bl	80001e0 <__aeabi_dsub>
 800d370:	460f      	mov	r7, r1
 800d372:	4606      	mov	r6, r0
 800d374:	f7f3 fb9c 	bl	8000ab0 <__aeabi_d2iz>
 800d378:	9004      	str	r0, [sp, #16]
 800d37a:	f7f3 f87f 	bl	800047c <__aeabi_i2d>
 800d37e:	4602      	mov	r2, r0
 800d380:	460b      	mov	r3, r1
 800d382:	4630      	mov	r0, r6
 800d384:	4639      	mov	r1, r7
 800d386:	f7f2 ff2b 	bl	80001e0 <__aeabi_dsub>
 800d38a:	f1ba 0f00 	cmp.w	sl, #0
 800d38e:	4606      	mov	r6, r0
 800d390:	460f      	mov	r7, r1
 800d392:	dd6d      	ble.n	800d470 <__kernel_rem_pio2+0x250>
 800d394:	1e62      	subs	r2, r4, #1
 800d396:	ab0e      	add	r3, sp, #56	; 0x38
 800d398:	9d04      	ldr	r5, [sp, #16]
 800d39a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d39e:	f1ca 0118 	rsb	r1, sl, #24
 800d3a2:	fa40 f301 	asr.w	r3, r0, r1
 800d3a6:	441d      	add	r5, r3
 800d3a8:	408b      	lsls	r3, r1
 800d3aa:	1ac0      	subs	r0, r0, r3
 800d3ac:	ab0e      	add	r3, sp, #56	; 0x38
 800d3ae:	9504      	str	r5, [sp, #16]
 800d3b0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d3b4:	f1ca 0317 	rsb	r3, sl, #23
 800d3b8:	fa40 fb03 	asr.w	fp, r0, r3
 800d3bc:	f1bb 0f00 	cmp.w	fp, #0
 800d3c0:	dd65      	ble.n	800d48e <__kernel_rem_pio2+0x26e>
 800d3c2:	9b04      	ldr	r3, [sp, #16]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	3301      	adds	r3, #1
 800d3c8:	9304      	str	r3, [sp, #16]
 800d3ca:	4615      	mov	r5, r2
 800d3cc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d3d0:	4294      	cmp	r4, r2
 800d3d2:	f300 809c 	bgt.w	800d50e <__kernel_rem_pio2+0x2ee>
 800d3d6:	f1ba 0f00 	cmp.w	sl, #0
 800d3da:	dd07      	ble.n	800d3ec <__kernel_rem_pio2+0x1cc>
 800d3dc:	f1ba 0f01 	cmp.w	sl, #1
 800d3e0:	f000 80c0 	beq.w	800d564 <__kernel_rem_pio2+0x344>
 800d3e4:	f1ba 0f02 	cmp.w	sl, #2
 800d3e8:	f000 80c6 	beq.w	800d578 <__kernel_rem_pio2+0x358>
 800d3ec:	f1bb 0f02 	cmp.w	fp, #2
 800d3f0:	d14d      	bne.n	800d48e <__kernel_rem_pio2+0x26e>
 800d3f2:	4632      	mov	r2, r6
 800d3f4:	463b      	mov	r3, r7
 800d3f6:	4956      	ldr	r1, [pc, #344]	; (800d550 <__kernel_rem_pio2+0x330>)
 800d3f8:	2000      	movs	r0, #0
 800d3fa:	f7f2 fef1 	bl	80001e0 <__aeabi_dsub>
 800d3fe:	4606      	mov	r6, r0
 800d400:	460f      	mov	r7, r1
 800d402:	2d00      	cmp	r5, #0
 800d404:	d043      	beq.n	800d48e <__kernel_rem_pio2+0x26e>
 800d406:	4650      	mov	r0, sl
 800d408:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800d540 <__kernel_rem_pio2+0x320>
 800d40c:	f000 fb64 	bl	800dad8 <scalbn>
 800d410:	4630      	mov	r0, r6
 800d412:	4639      	mov	r1, r7
 800d414:	ec53 2b10 	vmov	r2, r3, d0
 800d418:	f7f2 fee2 	bl	80001e0 <__aeabi_dsub>
 800d41c:	4606      	mov	r6, r0
 800d41e:	460f      	mov	r7, r1
 800d420:	e035      	b.n	800d48e <__kernel_rem_pio2+0x26e>
 800d422:	4b4c      	ldr	r3, [pc, #304]	; (800d554 <__kernel_rem_pio2+0x334>)
 800d424:	2200      	movs	r2, #0
 800d426:	4630      	mov	r0, r6
 800d428:	4639      	mov	r1, r7
 800d42a:	f7f3 f891 	bl	8000550 <__aeabi_dmul>
 800d42e:	f7f3 fb3f 	bl	8000ab0 <__aeabi_d2iz>
 800d432:	f7f3 f823 	bl	800047c <__aeabi_i2d>
 800d436:	4602      	mov	r2, r0
 800d438:	460b      	mov	r3, r1
 800d43a:	ec43 2b18 	vmov	d8, r2, r3
 800d43e:	4b46      	ldr	r3, [pc, #280]	; (800d558 <__kernel_rem_pio2+0x338>)
 800d440:	2200      	movs	r2, #0
 800d442:	f7f3 f885 	bl	8000550 <__aeabi_dmul>
 800d446:	4602      	mov	r2, r0
 800d448:	460b      	mov	r3, r1
 800d44a:	4630      	mov	r0, r6
 800d44c:	4639      	mov	r1, r7
 800d44e:	f7f2 fec7 	bl	80001e0 <__aeabi_dsub>
 800d452:	f7f3 fb2d 	bl	8000ab0 <__aeabi_d2iz>
 800d456:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d45a:	f84b 0b04 	str.w	r0, [fp], #4
 800d45e:	ec51 0b18 	vmov	r0, r1, d8
 800d462:	f7f2 febf 	bl	80001e4 <__adddf3>
 800d466:	f109 39ff 	add.w	r9, r9, #4294967295
 800d46a:	4606      	mov	r6, r0
 800d46c:	460f      	mov	r7, r1
 800d46e:	e75b      	b.n	800d328 <__kernel_rem_pio2+0x108>
 800d470:	d106      	bne.n	800d480 <__kernel_rem_pio2+0x260>
 800d472:	1e63      	subs	r3, r4, #1
 800d474:	aa0e      	add	r2, sp, #56	; 0x38
 800d476:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d47a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800d47e:	e79d      	b.n	800d3bc <__kernel_rem_pio2+0x19c>
 800d480:	4b36      	ldr	r3, [pc, #216]	; (800d55c <__kernel_rem_pio2+0x33c>)
 800d482:	2200      	movs	r2, #0
 800d484:	f7f3 faea 	bl	8000a5c <__aeabi_dcmpge>
 800d488:	2800      	cmp	r0, #0
 800d48a:	d13d      	bne.n	800d508 <__kernel_rem_pio2+0x2e8>
 800d48c:	4683      	mov	fp, r0
 800d48e:	2200      	movs	r2, #0
 800d490:	2300      	movs	r3, #0
 800d492:	4630      	mov	r0, r6
 800d494:	4639      	mov	r1, r7
 800d496:	f7f3 fac3 	bl	8000a20 <__aeabi_dcmpeq>
 800d49a:	2800      	cmp	r0, #0
 800d49c:	f000 80c0 	beq.w	800d620 <__kernel_rem_pio2+0x400>
 800d4a0:	1e65      	subs	r5, r4, #1
 800d4a2:	462b      	mov	r3, r5
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	9902      	ldr	r1, [sp, #8]
 800d4a8:	428b      	cmp	r3, r1
 800d4aa:	da6c      	bge.n	800d586 <__kernel_rem_pio2+0x366>
 800d4ac:	2a00      	cmp	r2, #0
 800d4ae:	f000 8089 	beq.w	800d5c4 <__kernel_rem_pio2+0x3a4>
 800d4b2:	ab0e      	add	r3, sp, #56	; 0x38
 800d4b4:	f1aa 0a18 	sub.w	sl, sl, #24
 800d4b8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	f000 80ad 	beq.w	800d61c <__kernel_rem_pio2+0x3fc>
 800d4c2:	4650      	mov	r0, sl
 800d4c4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800d540 <__kernel_rem_pio2+0x320>
 800d4c8:	f000 fb06 	bl	800dad8 <scalbn>
 800d4cc:	ab9a      	add	r3, sp, #616	; 0x268
 800d4ce:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d4d2:	ec57 6b10 	vmov	r6, r7, d0
 800d4d6:	00ec      	lsls	r4, r5, #3
 800d4d8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800d4dc:	46aa      	mov	sl, r5
 800d4de:	f1ba 0f00 	cmp.w	sl, #0
 800d4e2:	f280 80d6 	bge.w	800d692 <__kernel_rem_pio2+0x472>
 800d4e6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800d538 <__kernel_rem_pio2+0x318>
 800d4ea:	462e      	mov	r6, r5
 800d4ec:	2e00      	cmp	r6, #0
 800d4ee:	f2c0 8104 	blt.w	800d6fa <__kernel_rem_pio2+0x4da>
 800d4f2:	ab72      	add	r3, sp, #456	; 0x1c8
 800d4f4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800d4f8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800d560 <__kernel_rem_pio2+0x340>
 800d4fc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800d500:	f04f 0800 	mov.w	r8, #0
 800d504:	1baf      	subs	r7, r5, r6
 800d506:	e0ea      	b.n	800d6de <__kernel_rem_pio2+0x4be>
 800d508:	f04f 0b02 	mov.w	fp, #2
 800d50c:	e759      	b.n	800d3c2 <__kernel_rem_pio2+0x1a2>
 800d50e:	f8d8 3000 	ldr.w	r3, [r8]
 800d512:	b955      	cbnz	r5, 800d52a <__kernel_rem_pio2+0x30a>
 800d514:	b123      	cbz	r3, 800d520 <__kernel_rem_pio2+0x300>
 800d516:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d51a:	f8c8 3000 	str.w	r3, [r8]
 800d51e:	2301      	movs	r3, #1
 800d520:	3201      	adds	r2, #1
 800d522:	f108 0804 	add.w	r8, r8, #4
 800d526:	461d      	mov	r5, r3
 800d528:	e752      	b.n	800d3d0 <__kernel_rem_pio2+0x1b0>
 800d52a:	1acb      	subs	r3, r1, r3
 800d52c:	f8c8 3000 	str.w	r3, [r8]
 800d530:	462b      	mov	r3, r5
 800d532:	e7f5      	b.n	800d520 <__kernel_rem_pio2+0x300>
 800d534:	f3af 8000 	nop.w
	...
 800d544:	3ff00000 	.word	0x3ff00000
 800d548:	0800de20 	.word	0x0800de20
 800d54c:	40200000 	.word	0x40200000
 800d550:	3ff00000 	.word	0x3ff00000
 800d554:	3e700000 	.word	0x3e700000
 800d558:	41700000 	.word	0x41700000
 800d55c:	3fe00000 	.word	0x3fe00000
 800d560:	0800dde0 	.word	0x0800dde0
 800d564:	1e62      	subs	r2, r4, #1
 800d566:	ab0e      	add	r3, sp, #56	; 0x38
 800d568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d56c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d570:	a90e      	add	r1, sp, #56	; 0x38
 800d572:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d576:	e739      	b.n	800d3ec <__kernel_rem_pio2+0x1cc>
 800d578:	1e62      	subs	r2, r4, #1
 800d57a:	ab0e      	add	r3, sp, #56	; 0x38
 800d57c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d580:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d584:	e7f4      	b.n	800d570 <__kernel_rem_pio2+0x350>
 800d586:	a90e      	add	r1, sp, #56	; 0x38
 800d588:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d58c:	3b01      	subs	r3, #1
 800d58e:	430a      	orrs	r2, r1
 800d590:	e789      	b.n	800d4a6 <__kernel_rem_pio2+0x286>
 800d592:	3301      	adds	r3, #1
 800d594:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d598:	2900      	cmp	r1, #0
 800d59a:	d0fa      	beq.n	800d592 <__kernel_rem_pio2+0x372>
 800d59c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d59e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800d5a2:	446a      	add	r2, sp
 800d5a4:	3a98      	subs	r2, #152	; 0x98
 800d5a6:	920a      	str	r2, [sp, #40]	; 0x28
 800d5a8:	9a08      	ldr	r2, [sp, #32]
 800d5aa:	18e3      	adds	r3, r4, r3
 800d5ac:	18a5      	adds	r5, r4, r2
 800d5ae:	aa22      	add	r2, sp, #136	; 0x88
 800d5b0:	f104 0801 	add.w	r8, r4, #1
 800d5b4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800d5b8:	9304      	str	r3, [sp, #16]
 800d5ba:	9b04      	ldr	r3, [sp, #16]
 800d5bc:	4543      	cmp	r3, r8
 800d5be:	da04      	bge.n	800d5ca <__kernel_rem_pio2+0x3aa>
 800d5c0:	461c      	mov	r4, r3
 800d5c2:	e6a3      	b.n	800d30c <__kernel_rem_pio2+0xec>
 800d5c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	e7e4      	b.n	800d594 <__kernel_rem_pio2+0x374>
 800d5ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d5cc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d5d0:	f7f2 ff54 	bl	800047c <__aeabi_i2d>
 800d5d4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800d5d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5da:	46ab      	mov	fp, r5
 800d5dc:	461c      	mov	r4, r3
 800d5de:	f04f 0900 	mov.w	r9, #0
 800d5e2:	2600      	movs	r6, #0
 800d5e4:	2700      	movs	r7, #0
 800d5e6:	9b06      	ldr	r3, [sp, #24]
 800d5e8:	4599      	cmp	r9, r3
 800d5ea:	dd06      	ble.n	800d5fa <__kernel_rem_pio2+0x3da>
 800d5ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5ee:	e8e3 6702 	strd	r6, r7, [r3], #8
 800d5f2:	f108 0801 	add.w	r8, r8, #1
 800d5f6:	930a      	str	r3, [sp, #40]	; 0x28
 800d5f8:	e7df      	b.n	800d5ba <__kernel_rem_pio2+0x39a>
 800d5fa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d5fe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d602:	f7f2 ffa5 	bl	8000550 <__aeabi_dmul>
 800d606:	4602      	mov	r2, r0
 800d608:	460b      	mov	r3, r1
 800d60a:	4630      	mov	r0, r6
 800d60c:	4639      	mov	r1, r7
 800d60e:	f7f2 fde9 	bl	80001e4 <__adddf3>
 800d612:	f109 0901 	add.w	r9, r9, #1
 800d616:	4606      	mov	r6, r0
 800d618:	460f      	mov	r7, r1
 800d61a:	e7e4      	b.n	800d5e6 <__kernel_rem_pio2+0x3c6>
 800d61c:	3d01      	subs	r5, #1
 800d61e:	e748      	b.n	800d4b2 <__kernel_rem_pio2+0x292>
 800d620:	ec47 6b10 	vmov	d0, r6, r7
 800d624:	f1ca 0000 	rsb	r0, sl, #0
 800d628:	f000 fa56 	bl	800dad8 <scalbn>
 800d62c:	ec57 6b10 	vmov	r6, r7, d0
 800d630:	4ba0      	ldr	r3, [pc, #640]	; (800d8b4 <__kernel_rem_pio2+0x694>)
 800d632:	ee10 0a10 	vmov	r0, s0
 800d636:	2200      	movs	r2, #0
 800d638:	4639      	mov	r1, r7
 800d63a:	f7f3 fa0f 	bl	8000a5c <__aeabi_dcmpge>
 800d63e:	b1f8      	cbz	r0, 800d680 <__kernel_rem_pio2+0x460>
 800d640:	4b9d      	ldr	r3, [pc, #628]	; (800d8b8 <__kernel_rem_pio2+0x698>)
 800d642:	2200      	movs	r2, #0
 800d644:	4630      	mov	r0, r6
 800d646:	4639      	mov	r1, r7
 800d648:	f7f2 ff82 	bl	8000550 <__aeabi_dmul>
 800d64c:	f7f3 fa30 	bl	8000ab0 <__aeabi_d2iz>
 800d650:	4680      	mov	r8, r0
 800d652:	f7f2 ff13 	bl	800047c <__aeabi_i2d>
 800d656:	4b97      	ldr	r3, [pc, #604]	; (800d8b4 <__kernel_rem_pio2+0x694>)
 800d658:	2200      	movs	r2, #0
 800d65a:	f7f2 ff79 	bl	8000550 <__aeabi_dmul>
 800d65e:	460b      	mov	r3, r1
 800d660:	4602      	mov	r2, r0
 800d662:	4639      	mov	r1, r7
 800d664:	4630      	mov	r0, r6
 800d666:	f7f2 fdbb 	bl	80001e0 <__aeabi_dsub>
 800d66a:	f7f3 fa21 	bl	8000ab0 <__aeabi_d2iz>
 800d66e:	1c65      	adds	r5, r4, #1
 800d670:	ab0e      	add	r3, sp, #56	; 0x38
 800d672:	f10a 0a18 	add.w	sl, sl, #24
 800d676:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d67a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d67e:	e720      	b.n	800d4c2 <__kernel_rem_pio2+0x2a2>
 800d680:	4630      	mov	r0, r6
 800d682:	4639      	mov	r1, r7
 800d684:	f7f3 fa14 	bl	8000ab0 <__aeabi_d2iz>
 800d688:	ab0e      	add	r3, sp, #56	; 0x38
 800d68a:	4625      	mov	r5, r4
 800d68c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d690:	e717      	b.n	800d4c2 <__kernel_rem_pio2+0x2a2>
 800d692:	ab0e      	add	r3, sp, #56	; 0x38
 800d694:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800d698:	f7f2 fef0 	bl	800047c <__aeabi_i2d>
 800d69c:	4632      	mov	r2, r6
 800d69e:	463b      	mov	r3, r7
 800d6a0:	f7f2 ff56 	bl	8000550 <__aeabi_dmul>
 800d6a4:	4b84      	ldr	r3, [pc, #528]	; (800d8b8 <__kernel_rem_pio2+0x698>)
 800d6a6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	4630      	mov	r0, r6
 800d6ae:	4639      	mov	r1, r7
 800d6b0:	f7f2 ff4e 	bl	8000550 <__aeabi_dmul>
 800d6b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d6b8:	4606      	mov	r6, r0
 800d6ba:	460f      	mov	r7, r1
 800d6bc:	e70f      	b.n	800d4de <__kernel_rem_pio2+0x2be>
 800d6be:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d6c2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800d6c6:	f7f2 ff43 	bl	8000550 <__aeabi_dmul>
 800d6ca:	4602      	mov	r2, r0
 800d6cc:	460b      	mov	r3, r1
 800d6ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d6d2:	f7f2 fd87 	bl	80001e4 <__adddf3>
 800d6d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d6da:	f108 0801 	add.w	r8, r8, #1
 800d6de:	9b02      	ldr	r3, [sp, #8]
 800d6e0:	4598      	cmp	r8, r3
 800d6e2:	dc01      	bgt.n	800d6e8 <__kernel_rem_pio2+0x4c8>
 800d6e4:	45b8      	cmp	r8, r7
 800d6e6:	ddea      	ble.n	800d6be <__kernel_rem_pio2+0x49e>
 800d6e8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800d6ec:	ab4a      	add	r3, sp, #296	; 0x128
 800d6ee:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d6f2:	ed87 7b00 	vstr	d7, [r7]
 800d6f6:	3e01      	subs	r6, #1
 800d6f8:	e6f8      	b.n	800d4ec <__kernel_rem_pio2+0x2cc>
 800d6fa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d6fc:	2b02      	cmp	r3, #2
 800d6fe:	dc0b      	bgt.n	800d718 <__kernel_rem_pio2+0x4f8>
 800d700:	2b00      	cmp	r3, #0
 800d702:	dc35      	bgt.n	800d770 <__kernel_rem_pio2+0x550>
 800d704:	d059      	beq.n	800d7ba <__kernel_rem_pio2+0x59a>
 800d706:	9b04      	ldr	r3, [sp, #16]
 800d708:	f003 0007 	and.w	r0, r3, #7
 800d70c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800d710:	ecbd 8b02 	vpop	{d8}
 800d714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d718:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d71a:	2b03      	cmp	r3, #3
 800d71c:	d1f3      	bne.n	800d706 <__kernel_rem_pio2+0x4e6>
 800d71e:	ab4a      	add	r3, sp, #296	; 0x128
 800d720:	4423      	add	r3, r4
 800d722:	9306      	str	r3, [sp, #24]
 800d724:	461c      	mov	r4, r3
 800d726:	469a      	mov	sl, r3
 800d728:	9502      	str	r5, [sp, #8]
 800d72a:	9b02      	ldr	r3, [sp, #8]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	f1aa 0a08 	sub.w	sl, sl, #8
 800d732:	dc6b      	bgt.n	800d80c <__kernel_rem_pio2+0x5ec>
 800d734:	46aa      	mov	sl, r5
 800d736:	f1ba 0f01 	cmp.w	sl, #1
 800d73a:	f1a4 0408 	sub.w	r4, r4, #8
 800d73e:	f300 8085 	bgt.w	800d84c <__kernel_rem_pio2+0x62c>
 800d742:	9c06      	ldr	r4, [sp, #24]
 800d744:	2000      	movs	r0, #0
 800d746:	3408      	adds	r4, #8
 800d748:	2100      	movs	r1, #0
 800d74a:	2d01      	cmp	r5, #1
 800d74c:	f300 809d 	bgt.w	800d88a <__kernel_rem_pio2+0x66a>
 800d750:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800d754:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800d758:	f1bb 0f00 	cmp.w	fp, #0
 800d75c:	f040 809b 	bne.w	800d896 <__kernel_rem_pio2+0x676>
 800d760:	9b01      	ldr	r3, [sp, #4]
 800d762:	e9c3 5600 	strd	r5, r6, [r3]
 800d766:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d76a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d76e:	e7ca      	b.n	800d706 <__kernel_rem_pio2+0x4e6>
 800d770:	3408      	adds	r4, #8
 800d772:	ab4a      	add	r3, sp, #296	; 0x128
 800d774:	441c      	add	r4, r3
 800d776:	462e      	mov	r6, r5
 800d778:	2000      	movs	r0, #0
 800d77a:	2100      	movs	r1, #0
 800d77c:	2e00      	cmp	r6, #0
 800d77e:	da36      	bge.n	800d7ee <__kernel_rem_pio2+0x5ce>
 800d780:	f1bb 0f00 	cmp.w	fp, #0
 800d784:	d039      	beq.n	800d7fa <__kernel_rem_pio2+0x5da>
 800d786:	4602      	mov	r2, r0
 800d788:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d78c:	9c01      	ldr	r4, [sp, #4]
 800d78e:	e9c4 2300 	strd	r2, r3, [r4]
 800d792:	4602      	mov	r2, r0
 800d794:	460b      	mov	r3, r1
 800d796:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800d79a:	f7f2 fd21 	bl	80001e0 <__aeabi_dsub>
 800d79e:	ae4c      	add	r6, sp, #304	; 0x130
 800d7a0:	2401      	movs	r4, #1
 800d7a2:	42a5      	cmp	r5, r4
 800d7a4:	da2c      	bge.n	800d800 <__kernel_rem_pio2+0x5e0>
 800d7a6:	f1bb 0f00 	cmp.w	fp, #0
 800d7aa:	d002      	beq.n	800d7b2 <__kernel_rem_pio2+0x592>
 800d7ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d7b0:	4619      	mov	r1, r3
 800d7b2:	9b01      	ldr	r3, [sp, #4]
 800d7b4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d7b8:	e7a5      	b.n	800d706 <__kernel_rem_pio2+0x4e6>
 800d7ba:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800d7be:	eb0d 0403 	add.w	r4, sp, r3
 800d7c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800d7c6:	2000      	movs	r0, #0
 800d7c8:	2100      	movs	r1, #0
 800d7ca:	2d00      	cmp	r5, #0
 800d7cc:	da09      	bge.n	800d7e2 <__kernel_rem_pio2+0x5c2>
 800d7ce:	f1bb 0f00 	cmp.w	fp, #0
 800d7d2:	d002      	beq.n	800d7da <__kernel_rem_pio2+0x5ba>
 800d7d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d7d8:	4619      	mov	r1, r3
 800d7da:	9b01      	ldr	r3, [sp, #4]
 800d7dc:	e9c3 0100 	strd	r0, r1, [r3]
 800d7e0:	e791      	b.n	800d706 <__kernel_rem_pio2+0x4e6>
 800d7e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d7e6:	f7f2 fcfd 	bl	80001e4 <__adddf3>
 800d7ea:	3d01      	subs	r5, #1
 800d7ec:	e7ed      	b.n	800d7ca <__kernel_rem_pio2+0x5aa>
 800d7ee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d7f2:	f7f2 fcf7 	bl	80001e4 <__adddf3>
 800d7f6:	3e01      	subs	r6, #1
 800d7f8:	e7c0      	b.n	800d77c <__kernel_rem_pio2+0x55c>
 800d7fa:	4602      	mov	r2, r0
 800d7fc:	460b      	mov	r3, r1
 800d7fe:	e7c5      	b.n	800d78c <__kernel_rem_pio2+0x56c>
 800d800:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d804:	f7f2 fcee 	bl	80001e4 <__adddf3>
 800d808:	3401      	adds	r4, #1
 800d80a:	e7ca      	b.n	800d7a2 <__kernel_rem_pio2+0x582>
 800d80c:	e9da 8900 	ldrd	r8, r9, [sl]
 800d810:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d814:	9b02      	ldr	r3, [sp, #8]
 800d816:	3b01      	subs	r3, #1
 800d818:	9302      	str	r3, [sp, #8]
 800d81a:	4632      	mov	r2, r6
 800d81c:	463b      	mov	r3, r7
 800d81e:	4640      	mov	r0, r8
 800d820:	4649      	mov	r1, r9
 800d822:	f7f2 fcdf 	bl	80001e4 <__adddf3>
 800d826:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d82a:	4602      	mov	r2, r0
 800d82c:	460b      	mov	r3, r1
 800d82e:	4640      	mov	r0, r8
 800d830:	4649      	mov	r1, r9
 800d832:	f7f2 fcd5 	bl	80001e0 <__aeabi_dsub>
 800d836:	4632      	mov	r2, r6
 800d838:	463b      	mov	r3, r7
 800d83a:	f7f2 fcd3 	bl	80001e4 <__adddf3>
 800d83e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800d842:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d846:	ed8a 7b00 	vstr	d7, [sl]
 800d84a:	e76e      	b.n	800d72a <__kernel_rem_pio2+0x50a>
 800d84c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d850:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800d854:	4640      	mov	r0, r8
 800d856:	4632      	mov	r2, r6
 800d858:	463b      	mov	r3, r7
 800d85a:	4649      	mov	r1, r9
 800d85c:	f7f2 fcc2 	bl	80001e4 <__adddf3>
 800d860:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d864:	4602      	mov	r2, r0
 800d866:	460b      	mov	r3, r1
 800d868:	4640      	mov	r0, r8
 800d86a:	4649      	mov	r1, r9
 800d86c:	f7f2 fcb8 	bl	80001e0 <__aeabi_dsub>
 800d870:	4632      	mov	r2, r6
 800d872:	463b      	mov	r3, r7
 800d874:	f7f2 fcb6 	bl	80001e4 <__adddf3>
 800d878:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d87c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d880:	ed84 7b00 	vstr	d7, [r4]
 800d884:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d888:	e755      	b.n	800d736 <__kernel_rem_pio2+0x516>
 800d88a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d88e:	f7f2 fca9 	bl	80001e4 <__adddf3>
 800d892:	3d01      	subs	r5, #1
 800d894:	e759      	b.n	800d74a <__kernel_rem_pio2+0x52a>
 800d896:	9b01      	ldr	r3, [sp, #4]
 800d898:	9a01      	ldr	r2, [sp, #4]
 800d89a:	601d      	str	r5, [r3, #0]
 800d89c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800d8a0:	605c      	str	r4, [r3, #4]
 800d8a2:	609f      	str	r7, [r3, #8]
 800d8a4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800d8a8:	60d3      	str	r3, [r2, #12]
 800d8aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d8ae:	6110      	str	r0, [r2, #16]
 800d8b0:	6153      	str	r3, [r2, #20]
 800d8b2:	e728      	b.n	800d706 <__kernel_rem_pio2+0x4e6>
 800d8b4:	41700000 	.word	0x41700000
 800d8b8:	3e700000 	.word	0x3e700000
 800d8bc:	00000000 	.word	0x00000000

0800d8c0 <__kernel_sin>:
 800d8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8c4:	ed2d 8b04 	vpush	{d8-d9}
 800d8c8:	eeb0 8a41 	vmov.f32	s16, s2
 800d8cc:	eef0 8a61 	vmov.f32	s17, s3
 800d8d0:	ec55 4b10 	vmov	r4, r5, d0
 800d8d4:	b083      	sub	sp, #12
 800d8d6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d8da:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d8de:	9001      	str	r0, [sp, #4]
 800d8e0:	da06      	bge.n	800d8f0 <__kernel_sin+0x30>
 800d8e2:	ee10 0a10 	vmov	r0, s0
 800d8e6:	4629      	mov	r1, r5
 800d8e8:	f7f3 f8e2 	bl	8000ab0 <__aeabi_d2iz>
 800d8ec:	2800      	cmp	r0, #0
 800d8ee:	d051      	beq.n	800d994 <__kernel_sin+0xd4>
 800d8f0:	4622      	mov	r2, r4
 800d8f2:	462b      	mov	r3, r5
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	4629      	mov	r1, r5
 800d8f8:	f7f2 fe2a 	bl	8000550 <__aeabi_dmul>
 800d8fc:	4682      	mov	sl, r0
 800d8fe:	468b      	mov	fp, r1
 800d900:	4602      	mov	r2, r0
 800d902:	460b      	mov	r3, r1
 800d904:	4620      	mov	r0, r4
 800d906:	4629      	mov	r1, r5
 800d908:	f7f2 fe22 	bl	8000550 <__aeabi_dmul>
 800d90c:	a341      	add	r3, pc, #260	; (adr r3, 800da14 <__kernel_sin+0x154>)
 800d90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d912:	4680      	mov	r8, r0
 800d914:	4689      	mov	r9, r1
 800d916:	4650      	mov	r0, sl
 800d918:	4659      	mov	r1, fp
 800d91a:	f7f2 fe19 	bl	8000550 <__aeabi_dmul>
 800d91e:	a33f      	add	r3, pc, #252	; (adr r3, 800da1c <__kernel_sin+0x15c>)
 800d920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d924:	f7f2 fc5c 	bl	80001e0 <__aeabi_dsub>
 800d928:	4652      	mov	r2, sl
 800d92a:	465b      	mov	r3, fp
 800d92c:	f7f2 fe10 	bl	8000550 <__aeabi_dmul>
 800d930:	a33c      	add	r3, pc, #240	; (adr r3, 800da24 <__kernel_sin+0x164>)
 800d932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d936:	f7f2 fc55 	bl	80001e4 <__adddf3>
 800d93a:	4652      	mov	r2, sl
 800d93c:	465b      	mov	r3, fp
 800d93e:	f7f2 fe07 	bl	8000550 <__aeabi_dmul>
 800d942:	a33a      	add	r3, pc, #232	; (adr r3, 800da2c <__kernel_sin+0x16c>)
 800d944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d948:	f7f2 fc4a 	bl	80001e0 <__aeabi_dsub>
 800d94c:	4652      	mov	r2, sl
 800d94e:	465b      	mov	r3, fp
 800d950:	f7f2 fdfe 	bl	8000550 <__aeabi_dmul>
 800d954:	a337      	add	r3, pc, #220	; (adr r3, 800da34 <__kernel_sin+0x174>)
 800d956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95a:	f7f2 fc43 	bl	80001e4 <__adddf3>
 800d95e:	9b01      	ldr	r3, [sp, #4]
 800d960:	4606      	mov	r6, r0
 800d962:	460f      	mov	r7, r1
 800d964:	b9eb      	cbnz	r3, 800d9a2 <__kernel_sin+0xe2>
 800d966:	4602      	mov	r2, r0
 800d968:	460b      	mov	r3, r1
 800d96a:	4650      	mov	r0, sl
 800d96c:	4659      	mov	r1, fp
 800d96e:	f7f2 fdef 	bl	8000550 <__aeabi_dmul>
 800d972:	a325      	add	r3, pc, #148	; (adr r3, 800da08 <__kernel_sin+0x148>)
 800d974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d978:	f7f2 fc32 	bl	80001e0 <__aeabi_dsub>
 800d97c:	4642      	mov	r2, r8
 800d97e:	464b      	mov	r3, r9
 800d980:	f7f2 fde6 	bl	8000550 <__aeabi_dmul>
 800d984:	4602      	mov	r2, r0
 800d986:	460b      	mov	r3, r1
 800d988:	4620      	mov	r0, r4
 800d98a:	4629      	mov	r1, r5
 800d98c:	f7f2 fc2a 	bl	80001e4 <__adddf3>
 800d990:	4604      	mov	r4, r0
 800d992:	460d      	mov	r5, r1
 800d994:	ec45 4b10 	vmov	d0, r4, r5
 800d998:	b003      	add	sp, #12
 800d99a:	ecbd 8b04 	vpop	{d8-d9}
 800d99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9a2:	4b1b      	ldr	r3, [pc, #108]	; (800da10 <__kernel_sin+0x150>)
 800d9a4:	ec51 0b18 	vmov	r0, r1, d8
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	f7f2 fdd1 	bl	8000550 <__aeabi_dmul>
 800d9ae:	4632      	mov	r2, r6
 800d9b0:	ec41 0b19 	vmov	d9, r0, r1
 800d9b4:	463b      	mov	r3, r7
 800d9b6:	4640      	mov	r0, r8
 800d9b8:	4649      	mov	r1, r9
 800d9ba:	f7f2 fdc9 	bl	8000550 <__aeabi_dmul>
 800d9be:	4602      	mov	r2, r0
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	ec51 0b19 	vmov	r0, r1, d9
 800d9c6:	f7f2 fc0b 	bl	80001e0 <__aeabi_dsub>
 800d9ca:	4652      	mov	r2, sl
 800d9cc:	465b      	mov	r3, fp
 800d9ce:	f7f2 fdbf 	bl	8000550 <__aeabi_dmul>
 800d9d2:	ec53 2b18 	vmov	r2, r3, d8
 800d9d6:	f7f2 fc03 	bl	80001e0 <__aeabi_dsub>
 800d9da:	a30b      	add	r3, pc, #44	; (adr r3, 800da08 <__kernel_sin+0x148>)
 800d9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e0:	4606      	mov	r6, r0
 800d9e2:	460f      	mov	r7, r1
 800d9e4:	4640      	mov	r0, r8
 800d9e6:	4649      	mov	r1, r9
 800d9e8:	f7f2 fdb2 	bl	8000550 <__aeabi_dmul>
 800d9ec:	4602      	mov	r2, r0
 800d9ee:	460b      	mov	r3, r1
 800d9f0:	4630      	mov	r0, r6
 800d9f2:	4639      	mov	r1, r7
 800d9f4:	f7f2 fbf6 	bl	80001e4 <__adddf3>
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	460b      	mov	r3, r1
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	4629      	mov	r1, r5
 800da00:	f7f2 fbee 	bl	80001e0 <__aeabi_dsub>
 800da04:	e7c4      	b.n	800d990 <__kernel_sin+0xd0>
 800da06:	bf00      	nop
 800da08:	55555549 	.word	0x55555549
 800da0c:	3fc55555 	.word	0x3fc55555
 800da10:	3fe00000 	.word	0x3fe00000
 800da14:	5acfd57c 	.word	0x5acfd57c
 800da18:	3de5d93a 	.word	0x3de5d93a
 800da1c:	8a2b9ceb 	.word	0x8a2b9ceb
 800da20:	3e5ae5e6 	.word	0x3e5ae5e6
 800da24:	57b1fe7d 	.word	0x57b1fe7d
 800da28:	3ec71de3 	.word	0x3ec71de3
 800da2c:	19c161d5 	.word	0x19c161d5
 800da30:	3f2a01a0 	.word	0x3f2a01a0
 800da34:	1110f8a6 	.word	0x1110f8a6
 800da38:	3f811111 	.word	0x3f811111

0800da3c <with_errno>:
 800da3c:	b570      	push	{r4, r5, r6, lr}
 800da3e:	4604      	mov	r4, r0
 800da40:	460d      	mov	r5, r1
 800da42:	4616      	mov	r6, r2
 800da44:	f7fd fd74 	bl	800b530 <__errno>
 800da48:	4629      	mov	r1, r5
 800da4a:	6006      	str	r6, [r0, #0]
 800da4c:	4620      	mov	r0, r4
 800da4e:	bd70      	pop	{r4, r5, r6, pc}

0800da50 <xflow>:
 800da50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da52:	4614      	mov	r4, r2
 800da54:	461d      	mov	r5, r3
 800da56:	b108      	cbz	r0, 800da5c <xflow+0xc>
 800da58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800da5c:	e9cd 2300 	strd	r2, r3, [sp]
 800da60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da64:	4620      	mov	r0, r4
 800da66:	4629      	mov	r1, r5
 800da68:	f7f2 fd72 	bl	8000550 <__aeabi_dmul>
 800da6c:	2222      	movs	r2, #34	; 0x22
 800da6e:	b003      	add	sp, #12
 800da70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da74:	f7ff bfe2 	b.w	800da3c <with_errno>

0800da78 <__math_uflow>:
 800da78:	b508      	push	{r3, lr}
 800da7a:	2200      	movs	r2, #0
 800da7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800da80:	f7ff ffe6 	bl	800da50 <xflow>
 800da84:	ec41 0b10 	vmov	d0, r0, r1
 800da88:	bd08      	pop	{r3, pc}

0800da8a <__math_oflow>:
 800da8a:	b508      	push	{r3, lr}
 800da8c:	2200      	movs	r2, #0
 800da8e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800da92:	f7ff ffdd 	bl	800da50 <xflow>
 800da96:	ec41 0b10 	vmov	d0, r0, r1
 800da9a:	bd08      	pop	{r3, pc}

0800da9c <fabs>:
 800da9c:	ec51 0b10 	vmov	r0, r1, d0
 800daa0:	ee10 2a10 	vmov	r2, s0
 800daa4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800daa8:	ec43 2b10 	vmov	d0, r2, r3
 800daac:	4770      	bx	lr

0800daae <finite>:
 800daae:	b082      	sub	sp, #8
 800dab0:	ed8d 0b00 	vstr	d0, [sp]
 800dab4:	9801      	ldr	r0, [sp, #4]
 800dab6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800daba:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800dabe:	0fc0      	lsrs	r0, r0, #31
 800dac0:	b002      	add	sp, #8
 800dac2:	4770      	bx	lr
 800dac4:	0000      	movs	r0, r0
	...

0800dac8 <nan>:
 800dac8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dad0 <nan+0x8>
 800dacc:	4770      	bx	lr
 800dace:	bf00      	nop
 800dad0:	00000000 	.word	0x00000000
 800dad4:	7ff80000 	.word	0x7ff80000

0800dad8 <scalbn>:
 800dad8:	b570      	push	{r4, r5, r6, lr}
 800dada:	ec55 4b10 	vmov	r4, r5, d0
 800dade:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800dae2:	4606      	mov	r6, r0
 800dae4:	462b      	mov	r3, r5
 800dae6:	b99a      	cbnz	r2, 800db10 <scalbn+0x38>
 800dae8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800daec:	4323      	orrs	r3, r4
 800daee:	d036      	beq.n	800db5e <scalbn+0x86>
 800daf0:	4b39      	ldr	r3, [pc, #228]	; (800dbd8 <scalbn+0x100>)
 800daf2:	4629      	mov	r1, r5
 800daf4:	ee10 0a10 	vmov	r0, s0
 800daf8:	2200      	movs	r2, #0
 800dafa:	f7f2 fd29 	bl	8000550 <__aeabi_dmul>
 800dafe:	4b37      	ldr	r3, [pc, #220]	; (800dbdc <scalbn+0x104>)
 800db00:	429e      	cmp	r6, r3
 800db02:	4604      	mov	r4, r0
 800db04:	460d      	mov	r5, r1
 800db06:	da10      	bge.n	800db2a <scalbn+0x52>
 800db08:	a32b      	add	r3, pc, #172	; (adr r3, 800dbb8 <scalbn+0xe0>)
 800db0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0e:	e03a      	b.n	800db86 <scalbn+0xae>
 800db10:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800db14:	428a      	cmp	r2, r1
 800db16:	d10c      	bne.n	800db32 <scalbn+0x5a>
 800db18:	ee10 2a10 	vmov	r2, s0
 800db1c:	4620      	mov	r0, r4
 800db1e:	4629      	mov	r1, r5
 800db20:	f7f2 fb60 	bl	80001e4 <__adddf3>
 800db24:	4604      	mov	r4, r0
 800db26:	460d      	mov	r5, r1
 800db28:	e019      	b.n	800db5e <scalbn+0x86>
 800db2a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800db2e:	460b      	mov	r3, r1
 800db30:	3a36      	subs	r2, #54	; 0x36
 800db32:	4432      	add	r2, r6
 800db34:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800db38:	428a      	cmp	r2, r1
 800db3a:	dd08      	ble.n	800db4e <scalbn+0x76>
 800db3c:	2d00      	cmp	r5, #0
 800db3e:	a120      	add	r1, pc, #128	; (adr r1, 800dbc0 <scalbn+0xe8>)
 800db40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db44:	da1c      	bge.n	800db80 <scalbn+0xa8>
 800db46:	a120      	add	r1, pc, #128	; (adr r1, 800dbc8 <scalbn+0xf0>)
 800db48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db4c:	e018      	b.n	800db80 <scalbn+0xa8>
 800db4e:	2a00      	cmp	r2, #0
 800db50:	dd08      	ble.n	800db64 <scalbn+0x8c>
 800db52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800db56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800db5a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800db5e:	ec45 4b10 	vmov	d0, r4, r5
 800db62:	bd70      	pop	{r4, r5, r6, pc}
 800db64:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800db68:	da19      	bge.n	800db9e <scalbn+0xc6>
 800db6a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800db6e:	429e      	cmp	r6, r3
 800db70:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800db74:	dd0a      	ble.n	800db8c <scalbn+0xb4>
 800db76:	a112      	add	r1, pc, #72	; (adr r1, 800dbc0 <scalbn+0xe8>)
 800db78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d1e2      	bne.n	800db46 <scalbn+0x6e>
 800db80:	a30f      	add	r3, pc, #60	; (adr r3, 800dbc0 <scalbn+0xe8>)
 800db82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db86:	f7f2 fce3 	bl	8000550 <__aeabi_dmul>
 800db8a:	e7cb      	b.n	800db24 <scalbn+0x4c>
 800db8c:	a10a      	add	r1, pc, #40	; (adr r1, 800dbb8 <scalbn+0xe0>)
 800db8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d0b8      	beq.n	800db08 <scalbn+0x30>
 800db96:	a10e      	add	r1, pc, #56	; (adr r1, 800dbd0 <scalbn+0xf8>)
 800db98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db9c:	e7b4      	b.n	800db08 <scalbn+0x30>
 800db9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dba2:	3236      	adds	r2, #54	; 0x36
 800dba4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dba8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dbac:	4620      	mov	r0, r4
 800dbae:	4b0c      	ldr	r3, [pc, #48]	; (800dbe0 <scalbn+0x108>)
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	e7e8      	b.n	800db86 <scalbn+0xae>
 800dbb4:	f3af 8000 	nop.w
 800dbb8:	c2f8f359 	.word	0xc2f8f359
 800dbbc:	01a56e1f 	.word	0x01a56e1f
 800dbc0:	8800759c 	.word	0x8800759c
 800dbc4:	7e37e43c 	.word	0x7e37e43c
 800dbc8:	8800759c 	.word	0x8800759c
 800dbcc:	fe37e43c 	.word	0xfe37e43c
 800dbd0:	c2f8f359 	.word	0xc2f8f359
 800dbd4:	81a56e1f 	.word	0x81a56e1f
 800dbd8:	43500000 	.word	0x43500000
 800dbdc:	ffff3cb0 	.word	0xffff3cb0
 800dbe0:	3c900000 	.word	0x3c900000

0800dbe4 <_init>:
 800dbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbe6:	bf00      	nop
 800dbe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbea:	bc08      	pop	{r3}
 800dbec:	469e      	mov	lr, r3
 800dbee:	4770      	bx	lr

0800dbf0 <_fini>:
 800dbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbf2:	bf00      	nop
 800dbf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbf6:	bc08      	pop	{r3}
 800dbf8:	469e      	mov	lr, r3
 800dbfa:	4770      	bx	lr
