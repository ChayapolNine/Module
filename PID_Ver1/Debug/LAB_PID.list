
LAB_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcbc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  0800be58  0800be58  0001be58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c088  0800c088  00020318  2**0
                  CONTENTS
  4 .ARM          00000008  0800c088  0800c088  0001c088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c090  0800c090  00020318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c090  0800c090  0001c090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c094  0800c094  0001c094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000318  20000000  0800c098  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d58  20000318  0800c3b0  00020318  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001070  0800c3b0  00021070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020318  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015896  00000000  00000000  00020348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a3b  00000000  00000000  00035bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  00038620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  00039848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cb6  00000000  00000000  0003a970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a5e  00000000  00000000  00053626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e779  00000000  00000000  0006a084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001087fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005748  00000000  00000000  00108850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000318 	.word	0x20000318
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800be3c 	.word	0x0800be3c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000031c 	.word	0x2000031c
 80001d4:	0800be3c 	.word	0x0800be3c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b974 	b.w	8000ee0 <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9d08      	ldr	r5, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	468e      	mov	lr, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14d      	bne.n	8000cba <__udivmoddi4+0xaa>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4694      	mov	ip, r2
 8000c22:	d969      	bls.n	8000cf8 <__udivmoddi4+0xe8>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b152      	cbz	r2, 8000c40 <__udivmoddi4+0x30>
 8000c2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2e:	f1c2 0120 	rsb	r1, r2, #32
 8000c32:	fa20 f101 	lsr.w	r1, r0, r1
 8000c36:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c3a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c3e:	4094      	lsls	r4, r2
 8000c40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c44:	0c21      	lsrs	r1, r4, #16
 8000c46:	fbbe f6f8 	udiv	r6, lr, r8
 8000c4a:	fa1f f78c 	uxth.w	r7, ip
 8000c4e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c52:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c56:	fb06 f107 	mul.w	r1, r6, r7
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	d90a      	bls.n	8000c74 <__udivmoddi4+0x64>
 8000c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c62:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c66:	f080 811f 	bcs.w	8000ea8 <__udivmoddi4+0x298>
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	f240 811c 	bls.w	8000ea8 <__udivmoddi4+0x298>
 8000c70:	3e02      	subs	r6, #2
 8000c72:	4463      	add	r3, ip
 8000c74:	1a5b      	subs	r3, r3, r1
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c84:	fb00 f707 	mul.w	r7, r0, r7
 8000c88:	42a7      	cmp	r7, r4
 8000c8a:	d90a      	bls.n	8000ca2 <__udivmoddi4+0x92>
 8000c8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c94:	f080 810a 	bcs.w	8000eac <__udivmoddi4+0x29c>
 8000c98:	42a7      	cmp	r7, r4
 8000c9a:	f240 8107 	bls.w	8000eac <__udivmoddi4+0x29c>
 8000c9e:	4464      	add	r4, ip
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca6:	1be4      	subs	r4, r4, r7
 8000ca8:	2600      	movs	r6, #0
 8000caa:	b11d      	cbz	r5, 8000cb4 <__udivmoddi4+0xa4>
 8000cac:	40d4      	lsrs	r4, r2
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d909      	bls.n	8000cd2 <__udivmoddi4+0xc2>
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	f000 80ef 	beq.w	8000ea2 <__udivmoddi4+0x292>
 8000cc4:	2600      	movs	r6, #0
 8000cc6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cca:	4630      	mov	r0, r6
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	fab3 f683 	clz	r6, r3
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d14a      	bne.n	8000d70 <__udivmoddi4+0x160>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xd4>
 8000cde:	4282      	cmp	r2, r0
 8000ce0:	f200 80f9 	bhi.w	8000ed6 <__udivmoddi4+0x2c6>
 8000ce4:	1a84      	subs	r4, r0, r2
 8000ce6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	469e      	mov	lr, r3
 8000cee:	2d00      	cmp	r5, #0
 8000cf0:	d0e0      	beq.n	8000cb4 <__udivmoddi4+0xa4>
 8000cf2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cf6:	e7dd      	b.n	8000cb4 <__udivmoddi4+0xa4>
 8000cf8:	b902      	cbnz	r2, 8000cfc <__udivmoddi4+0xec>
 8000cfa:	deff      	udf	#255	; 0xff
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f040 8092 	bne.w	8000e2a <__udivmoddi4+0x21a>
 8000d06:	eba1 010c 	sub.w	r1, r1, ip
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2601      	movs	r6, #1
 8000d14:	0c20      	lsrs	r0, r4, #16
 8000d16:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d1a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d1e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d22:	fb0e f003 	mul.w	r0, lr, r3
 8000d26:	4288      	cmp	r0, r1
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x12c>
 8000d2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x12a>
 8000d34:	4288      	cmp	r0, r1
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2c0>
 8000d3a:	4643      	mov	r3, r8
 8000d3c:	1a09      	subs	r1, r1, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d44:	fb07 1110 	mls	r1, r7, r0, r1
 8000d48:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x156>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x154>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2ca>
 8000d64:	4608      	mov	r0, r1
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d6e:	e79c      	b.n	8000caa <__udivmoddi4+0x9a>
 8000d70:	f1c6 0720 	rsb	r7, r6, #32
 8000d74:	40b3      	lsls	r3, r6
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d82:	fa01 f306 	lsl.w	r3, r1, r6
 8000d86:	431c      	orrs	r4, r3
 8000d88:	40f9      	lsrs	r1, r7
 8000d8a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d92:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d96:	0c20      	lsrs	r0, r4, #16
 8000d98:	fa1f fe8c 	uxth.w	lr, ip
 8000d9c:	fb09 1118 	mls	r1, r9, r8, r1
 8000da0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000da4:	fb08 f00e 	mul.w	r0, r8, lr
 8000da8:	4288      	cmp	r0, r1
 8000daa:	fa02 f206 	lsl.w	r2, r2, r6
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b8>
 8000db0:	eb1c 0101 	adds.w	r1, ip, r1
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2bc>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2bc>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4461      	add	r1, ip
 8000dc8:	1a09      	subs	r1, r1, r0
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd0:	fb09 1110 	mls	r1, r9, r0, r1
 8000dd4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ddc:	458e      	cmp	lr, r1
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1e2>
 8000de0:	eb1c 0101 	adds.w	r1, ip, r1
 8000de4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2b4>
 8000dea:	458e      	cmp	lr, r1
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2b4>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4461      	add	r1, ip
 8000df2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000df6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dfa:	eba1 010e 	sub.w	r1, r1, lr
 8000dfe:	42a1      	cmp	r1, r4
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46a6      	mov	lr, r4
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x2a4>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x2a0>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x212>
 8000e0a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e0e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e12:	fa01 f707 	lsl.w	r7, r1, r7
 8000e16:	fa22 f306 	lsr.w	r3, r2, r6
 8000e1a:	40f1      	lsrs	r1, r6
 8000e1c:	431f      	orrs	r7, r3
 8000e1e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e22:	2600      	movs	r6, #0
 8000e24:	4631      	mov	r1, r6
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	f1c2 0320 	rsb	r3, r2, #32
 8000e2e:	40d8      	lsrs	r0, r3
 8000e30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e34:	fa21 f303 	lsr.w	r3, r1, r3
 8000e38:	4091      	lsls	r1, r2
 8000e3a:	4301      	orrs	r1, r0
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e48:	fb07 3610 	mls	r6, r7, r0, r3
 8000e4c:	0c0b      	lsrs	r3, r1, #16
 8000e4e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e52:	fb00 f60e 	mul.w	r6, r0, lr
 8000e56:	429e      	cmp	r6, r3
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x260>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b8>
 8000e68:	429e      	cmp	r6, r3
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b8>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	1b9b      	subs	r3, r3, r6
 8000e72:	b289      	uxth	r1, r1
 8000e74:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e78:	fb07 3316 	mls	r3, r7, r6, r3
 8000e7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e80:	fb06 f30e 	mul.w	r3, r6, lr
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x28a>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e92:	428b      	cmp	r3, r1
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e96:	3e02      	subs	r6, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	1ac9      	subs	r1, r1, r3
 8000e9c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0x104>
 8000ea2:	462e      	mov	r6, r5
 8000ea4:	4628      	mov	r0, r5
 8000ea6:	e705      	b.n	8000cb4 <__udivmoddi4+0xa4>
 8000ea8:	4606      	mov	r6, r0
 8000eaa:	e6e3      	b.n	8000c74 <__udivmoddi4+0x64>
 8000eac:	4618      	mov	r0, r3
 8000eae:	e6f8      	b.n	8000ca2 <__udivmoddi4+0x92>
 8000eb0:	454b      	cmp	r3, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f8>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ebc:	3801      	subs	r0, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f8>
 8000ec0:	4646      	mov	r6, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x28a>
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1e2>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x260>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b8>
 8000ed0:	3b02      	subs	r3, #2
 8000ed2:	4461      	add	r1, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x12c>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e709      	b.n	8000cee <__udivmoddi4+0xde>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x156>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <modbus_1t5_Timeout+0x1c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	751a      	strb	r2, [r3, #20]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	20000334 	.word	0x20000334

08000f04 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <modbus_3t5_Timeout+0x1c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2201      	movs	r2, #1
 8000f12:	755a      	strb	r2, [r3, #21]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	20000334 	.word	0x20000334

08000f24 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <modbus_UART_Recived+0x60>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2201      	movs	r2, #1
 8000f34:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <modbus_UART_Recived+0x60>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8000f3e:	1c59      	adds	r1, r3, #1
 8000f40:	b289      	uxth	r1, r1
 8000f42:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8000f46:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f4a:	d210      	bcs.n	8000f6e <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <modbus_UART_Recived+0x60>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	68d8      	ldr	r0, [r3, #12]
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <modbus_UART_Recived+0x60>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <modbus_UART_Recived+0x60>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000f5e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000f62:	4413      	add	r3, r2
 8000f64:	3302      	adds	r3, #2
 8000f66:	2201      	movs	r2, #1
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f007 fa6b 	bl	8008444 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000f6e:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <modbus_UART_Recived+0x60>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2200      	movs	r2, #0
 8000f78:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000334 	.word	0x20000334

08000f88 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000f92:	4a24      	ldr	r2, [pc, #144]	; (8001024 <Modbus_init+0x9c>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000f98:	4b22      	ldr	r3, [pc, #136]	; (8001024 <Modbus_init+0x9c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000fa0:	4b20      	ldr	r3, [pc, #128]	; (8001024 <Modbus_init+0x9c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	4a20      	ldr	r2, [pc, #128]	; (8001028 <Modbus_init+0xa0>)
 8000fa8:	2114      	movs	r1, #20
 8000faa:	4618      	mov	r0, r3
 8000fac:	f006 fc4e 	bl	800784c <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000fb0:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <Modbus_init+0x9c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	4a1d      	ldr	r2, [pc, #116]	; (800102c <Modbus_init+0xa4>)
 8000fb8:	210e      	movs	r1, #14
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f006 fc46 	bl	800784c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000fc0:	4b18      	ldr	r3, [pc, #96]	; (8001024 <Modbus_init+0x9c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	4a1a      	ldr	r2, [pc, #104]	; (8001030 <Modbus_init+0xa8>)
 8000fc8:	2103      	movs	r1, #3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f007 f992 	bl	80082f4 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <Modbus_init+0x9c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	68d8      	ldr	r0, [r3, #12]
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <Modbus_init+0x9c>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <Modbus_init+0x9c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000fe2:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000fe6:	4413      	add	r3, r2
 8000fe8:	3302      	adds	r3, #2
 8000fea:	2201      	movs	r2, #1
 8000fec:	4619      	mov	r1, r3
 8000fee:	f007 fa29 	bl	8008444 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <Modbus_init+0x9c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d10c      	bne.n	800101c <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <Modbus_init+0x9c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	4618      	mov	r0, r3
 800100a:	f005 fcc9 	bl	80069a0 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800100e:	4b05      	ldr	r3, [pc, #20]	; (8001024 <Modbus_init+0x9c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f005 ff08 	bl	8006e2c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000334 	.word	0x20000334
 8001028:	08000ee5 	.word	0x08000ee5
 800102c:	08000f05 	.word	0x08000f05
 8001030:	08000f25 	.word	0x08000f25

08001034 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001040:	23ff      	movs	r3, #255	; 0xff
 8001042:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001044:	23ff      	movs	r3, #255	; 0xff
 8001046:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001048:	e013      	b.n	8001072 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	781a      	ldrb	r2, [r3, #0]
 8001052:	7bbb      	ldrb	r3, [r7, #14]
 8001054:	4053      	eors	r3, r2
 8001056:	b2db      	uxtb	r3, r3
 8001058:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800105a:	4a0f      	ldr	r2, [pc, #60]	; (8001098 <CRC16+0x64>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	4413      	add	r3, r2
 8001060:	781a      	ldrb	r2, [r3, #0]
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	4053      	eors	r3, r2
 8001066:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001068:	4a0c      	ldr	r2, [pc, #48]	; (800109c <CRC16+0x68>)
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	4413      	add	r3, r2
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001072:	883b      	ldrh	r3, [r7, #0]
 8001074:	1e5a      	subs	r2, r3, #1
 8001076:	803a      	strh	r2, [r7, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1e6      	bne.n	800104a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b21a      	sxth	r2, r3
 8001082:	7bbb      	ldrb	r3, [r7, #14]
 8001084:	b21b      	sxth	r3, r3
 8001086:	4313      	orrs	r3, r2
 8001088:	b21b      	sxth	r3, r3
 800108a:	b29b      	uxth	r3, r3
}
 800108c:	4618      	mov	r0, r3
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	20000100 	.word	0x20000100
 800109c:	20000000 	.word	0x20000000

080010a0 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80010a6:	4b81      	ldr	r3, [pc, #516]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	7e1b      	ldrb	r3, [r3, #24]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d80a      	bhi.n	80010c8 <Modbus_Protocal_Worker+0x28>
 80010b2:	a201      	add	r2, pc, #4	; (adr r2, 80010b8 <Modbus_Protocal_Worker+0x18>)
 80010b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b8:	080010d3 	.word	0x080010d3
 80010bc:	08001273 	.word	0x08001273
 80010c0:	0800115f 	.word	0x0800115f
 80010c4:	08001185 	.word	0x08001185
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80010c8:	4b78      	ldr	r3, [pc, #480]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2201      	movs	r2, #1
 80010ce:	761a      	strb	r2, [r3, #24]
		break;
 80010d0:	e0e8      	b.n	80012a4 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80010d2:	4b76      	ldr	r3, [pc, #472]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d002      	beq.n	80010e4 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 80010de:	f000 f9dd 	bl	800149c <Modbus_Emission>
 80010e2:	e01c      	b.n	800111e <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 80010e4:	4b71      	ldr	r3, [pc, #452]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	7d9b      	ldrb	r3, [r3, #22]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d017      	beq.n	800111e <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80010ee:	4b6f      	ldr	r3, [pc, #444]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2200      	movs	r2, #0
 80010f4:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80010f6:	4b6d      	ldr	r3, [pc, #436]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2200      	movs	r2, #0
 80010fc:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80010fe:	4b6b      	ldr	r3, [pc, #428]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b68      	ldr	r3, [pc, #416]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f042 0201 	orr.w	r2, r2, #1
 8001114:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001116:	4b65      	ldr	r3, [pc, #404]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2203      	movs	r2, #3
 800111c:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800111e:	4b63      	ldr	r3, [pc, #396]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b20      	cmp	r3, #32
 800112c:	f040 80b3 	bne.w	8001296 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001130:	4b5e      	ldr	r3, [pc, #376]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2200      	movs	r2, #0
 8001136:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800113a:	4b5c      	ldr	r3, [pc, #368]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68d8      	ldr	r0, [r3, #12]
 8001140:	4b5a      	ldr	r3, [pc, #360]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b59      	ldr	r3, [pc, #356]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800114c:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001150:	4413      	add	r3, r2
 8001152:	3302      	adds	r3, #2
 8001154:	2201      	movs	r2, #1
 8001156:	4619      	mov	r1, r3
 8001158:	f007 f974 	bl	8008444 <HAL_UART_Receive_IT>
		}
		break;
 800115c:	e09b      	b.n	8001296 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800115e:	4b53      	ldr	r3, [pc, #332]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	7d1b      	ldrb	r3, [r3, #20]
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 8098 	beq.w	800129a <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800116a:	4b50      	ldr	r3, [pc, #320]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2200      	movs	r2, #0
 8001170:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001172:	4b4e      	ldr	r3, [pc, #312]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	22fe      	movs	r2, #254	; 0xfe
 8001178:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800117a:	4b4c      	ldr	r3, [pc, #304]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2204      	movs	r2, #4
 8001180:	761a      	strb	r2, [r3, #24]
		}
		break;
 8001182:	e08a      	b.n	800129a <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8001184:	4b49      	ldr	r3, [pc, #292]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	7d9b      	ldrb	r3, [r3, #22]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d009      	beq.n	80011a2 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 800118e:	4b47      	ldr	r3, [pc, #284]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d103      	bne.n	80011a2 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800119a:	4b44      	ldr	r3, [pc, #272]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	22ff      	movs	r2, #255	; 0xff
 80011a0:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80011a2:	4b42      	ldr	r3, [pc, #264]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80011aa:	f113 0f02 	cmn.w	r3, #2
 80011ae:	d150      	bne.n	8001252 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80011b0:	4b3e      	ldr	r3, [pc, #248]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2200      	movs	r2, #0
 80011b6:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80011b8:	4b3c      	ldr	r3, [pc, #240]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f203 2272 	addw	r2, r3, #626	; 0x272
 80011c0:	4b3a      	ldr	r3, [pc, #232]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011c8:	3b02      	subs	r3, #2
 80011ca:	4619      	mov	r1, r3
 80011cc:	4610      	mov	r0, r2
 80011ce:	f7ff ff31 	bl	8001034 <CRC16>
 80011d2:	4603      	mov	r3, r0
 80011d4:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80011d6:	793a      	ldrb	r2, [r7, #4]
 80011d8:	4b34      	ldr	r3, [pc, #208]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80011da:	6819      	ldr	r1, [r3, #0]
 80011dc:	4b33      	ldr	r3, [pc, #204]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011e4:	3b02      	subs	r3, #2
 80011e6:	440b      	add	r3, r1
 80011e8:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d10c      	bne.n	800120a <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80011f0:	797a      	ldrb	r2, [r7, #5]
 80011f2:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80011f4:	6819      	ldr	r1, [r3, #0]
 80011f6:	4b2d      	ldr	r3, [pc, #180]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011fe:	3b01      	subs	r3, #1
 8001200:	440b      	add	r3, r1
 8001202:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001206:	429a      	cmp	r2, r3
 8001208:	d004      	beq.n	8001214 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800120a:	4b28      	ldr	r3, [pc, #160]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	22ff      	movs	r2, #255	; 0xff
 8001210:	75da      	strb	r2, [r3, #23]
				break;
 8001212:	e047      	b.n	80012a4 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001214:	4b25      	ldr	r3, [pc, #148]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 800121c:	4b23      	ldr	r3, [pc, #140]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d113      	bne.n	800124e <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001226:	4b21      	ldr	r3, [pc, #132]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 8001236:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001238:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001240:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001242:	461a      	mov	r2, r3
 8001244:	f008 fad8 	bl	80097f8 <memcpy>

			//execute command
			Modbus_frame_response();
 8001248:	f000 f910 	bl	800146c <Modbus_frame_response>
 800124c:	e001      	b.n	8001252 <Modbus_Protocal_Worker+0x1b2>
				break;
 800124e:	bf00      	nop
					}
		break;


	}
}
 8001250:	e028      	b.n	80012a4 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001252:	4b16      	ldr	r3, [pc, #88]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	7d5b      	ldrb	r3, [r3, #21]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d020      	beq.n	800129e <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 800125c:	4b13      	ldr	r3, [pc, #76]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2201      	movs	r2, #1
 8001262:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	4618      	mov	r0, r3
 800126c:	f007 f998 	bl	80085a0 <HAL_UART_AbortReceive>
		break;
 8001270:	e015      	b.n	800129e <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b20      	cmp	r3, #32
 8001280:	d10f      	bne.n	80012a2 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2201      	movs	r2, #1
 8001292:	761a      	strb	r2, [r3, #24]
		break;
 8001294:	e005      	b.n	80012a2 <Modbus_Protocal_Worker+0x202>
		break;
 8001296:	bf00      	nop
 8001298:	e004      	b.n	80012a4 <Modbus_Protocal_Worker+0x204>
		break;
 800129a:	bf00      	nop
 800129c:	e002      	b.n	80012a4 <Modbus_Protocal_Worker+0x204>
		break;
 800129e:	bf00      	nop
 80012a0:	e000      	b.n	80012a4 <Modbus_Protocal_Worker+0x204>
		break;
 80012a2:	bf00      	nop
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000334 	.word	0x20000334

080012b0 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80012b6:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <modbusWrite1Register+0x80>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	7e9b      	ldrb	r3, [r3, #26]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <modbusWrite1Register+0x80>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	7edb      	ldrb	r3, [r3, #27]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	4413      	add	r3, r2
 80012cc:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80012ce:	88fa      	ldrh	r2, [r7, #6]
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <modbusWrite1Register+0x80>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d903      	bls.n	80012e2 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80012da:	2002      	movs	r0, #2
 80012dc:	f000 f8a4 	bl	8001428 <ModbusErrorReply>
			 return;
 80012e0:	e023      	b.n	800132a <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <modbusWrite1Register+0x80>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <modbusWrite1Register+0x80>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6859      	ldr	r1, [r3, #4]
 80012ec:	88fb      	ldrh	r3, [r7, #6]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	440b      	add	r3, r1
 80012f2:	7f12      	ldrb	r2, [r2, #28]
 80012f4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <modbusWrite1Register+0x80>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <modbusWrite1Register+0x80>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6859      	ldr	r1, [r3, #4]
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	440b      	add	r3, r1
 8001306:	7f52      	ldrb	r2, [r2, #29]
 8001308:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <modbusWrite1Register+0x80>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <modbusWrite1Register+0x80>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8001318:	2208      	movs	r2, #8
 800131a:	4619      	mov	r1, r3
 800131c:	f008 fa6c 	bl	80097f8 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <modbusWrite1Register+0x80>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2205      	movs	r2, #5
 8001326:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000334 	.word	0x20000334

08001334 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001334:	b590      	push	{r4, r7, lr}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800133a:	4b3a      	ldr	r3, [pc, #232]	; (8001424 <modbusRead1Register+0xf0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	7f1b      	ldrb	r3, [r3, #28]
 8001340:	b29b      	uxth	r3, r3
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	b29a      	uxth	r2, r3
 8001346:	4b37      	ldr	r3, [pc, #220]	; (8001424 <modbusRead1Register+0xf0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	7f5b      	ldrb	r3, [r3, #29]
 800134c:	b29b      	uxth	r3, r3
 800134e:	4413      	add	r3, r2
 8001350:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001352:	4b34      	ldr	r3, [pc, #208]	; (8001424 <modbusRead1Register+0xf0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	7e9b      	ldrb	r3, [r3, #26]
 8001358:	b29b      	uxth	r3, r3
 800135a:	021b      	lsls	r3, r3, #8
 800135c:	b29a      	uxth	r2, r3
 800135e:	4b31      	ldr	r3, [pc, #196]	; (8001424 <modbusRead1Register+0xf0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	7edb      	ldrb	r3, [r3, #27]
 8001364:	b29b      	uxth	r3, r3
 8001366:	4413      	add	r3, r2
 8001368:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d002      	beq.n	8001376 <modbusRead1Register+0x42>
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	2b7d      	cmp	r3, #125	; 0x7d
 8001374:	d903      	bls.n	800137e <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001376:	2003      	movs	r0, #3
 8001378:	f000 f856 	bl	8001428 <ModbusErrorReply>
		 return;
 800137c:	e04e      	b.n	800141c <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800137e:	88ba      	ldrh	r2, [r7, #4]
 8001380:	4b28      	ldr	r3, [pc, #160]	; (8001424 <modbusRead1Register+0xf0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	429a      	cmp	r2, r3
 8001388:	d808      	bhi.n	800139c <modbusRead1Register+0x68>
 800138a:	88ba      	ldrh	r2, [r7, #4]
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	4413      	add	r3, r2
 8001390:	461a      	mov	r2, r3
 8001392:	4b24      	ldr	r3, [pc, #144]	; (8001424 <modbusRead1Register+0xf0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	429a      	cmp	r2, r3
 800139a:	d903      	bls.n	80013a4 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800139c:	2002      	movs	r0, #2
 800139e:	f000 f843 	bl	8001428 <ModbusErrorReply>
		 return;
 80013a2:	e03b      	b.n	800141c <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80013a4:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <modbusRead1Register+0xf0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2203      	movs	r2, #3
 80013aa:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80013ae:	88fb      	ldrh	r3, [r7, #6]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <modbusRead1Register+0xf0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	0052      	lsls	r2, r2, #1
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80013be:	2400      	movs	r4, #0
 80013c0:	e020      	b.n	8001404 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <modbusRead1Register+0xf0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	88bb      	ldrh	r3, [r7, #4]
 80013ca:	4423      	add	r3, r4
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	18d1      	adds	r1, r2, r3
 80013d0:	4b14      	ldr	r3, [pc, #80]	; (8001424 <modbusRead1Register+0xf0>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	1c63      	adds	r3, r4, #1
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	7849      	ldrb	r1, [r1, #1]
 80013da:	4413      	add	r3, r2
 80013dc:	460a      	mov	r2, r1
 80013de:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <modbusRead1Register+0xf0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	88bb      	ldrh	r3, [r7, #4]
 80013ea:	4423      	add	r3, r4
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	18d1      	adds	r1, r2, r3
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <modbusRead1Register+0xf0>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	0063      	lsls	r3, r4, #1
 80013f6:	3303      	adds	r3, #3
 80013f8:	7809      	ldrb	r1, [r1, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	460a      	mov	r2, r1
 80013fe:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001402:	3401      	adds	r4, #1
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	429c      	cmp	r4, r3
 8001408:	dbdb      	blt.n	80013c2 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	3301      	adds	r3, #1
 800140e:	b2da      	uxtb	r2, r3
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <modbusRead1Register+0xf0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	0052      	lsls	r2, r2, #1
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bd90      	pop	{r4, r7, pc}
 8001422:	bf00      	nop
 8001424:	20000334 	.word	0x20000334

08001428 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <ModbusErrorReply+0x40>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	7e5a      	ldrb	r2, [r3, #25]
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <ModbusErrorReply+0x40>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001446:	4b08      	ldr	r3, [pc, #32]	; (8001468 <ModbusErrorReply+0x40>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	79fa      	ldrb	r2, [r7, #7]
 800144c:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <ModbusErrorReply+0x40>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2202      	movs	r2, #2
 8001456:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000334 	.word	0x20000334

0800146c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <Modbus_frame_response+0x2c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	7e5b      	ldrb	r3, [r3, #25]
 8001476:	2b03      	cmp	r3, #3
 8001478:	d004      	beq.n	8001484 <Modbus_frame_response+0x18>
 800147a:	2b06      	cmp	r3, #6
 800147c:	d105      	bne.n	800148a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800147e:	f7ff ff17 	bl	80012b0 <modbusWrite1Register>
		break;
 8001482:	e006      	b.n	8001492 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001484:	f7ff ff56 	bl	8001334 <modbusRead1Register>
		break;
 8001488:	e003      	b.n	8001492 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800148a:	2001      	movs	r0, #1
 800148c:	f7ff ffcc 	bl	8001428 <ModbusErrorReply>
		break;
 8001490:	bf00      	nop

	}
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000334 	.word	0x20000334

0800149c <Modbus_Emission>:

void Modbus_Emission()
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80014a2:	4b3d      	ldr	r3, [pc, #244]	; (8001598 <Modbus_Emission+0xfc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b20      	cmp	r3, #32
 80014b0:	d15e      	bne.n	8001570 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80014b2:	4b39      	ldr	r3, [pc, #228]	; (8001598 <Modbus_Emission+0xfc>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	4b38      	ldr	r3, [pc, #224]	; (8001598 <Modbus_Emission+0xfc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	7812      	ldrb	r2, [r2, #0]
 80014bc:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80014c0:	4b35      	ldr	r3, [pc, #212]	; (8001598 <Modbus_Emission+0xfc>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 80014c8:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80014ca:	4b33      	ldr	r3, [pc, #204]	; (8001598 <Modbus_Emission+0xfc>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 80014d2:	4b31      	ldr	r3, [pc, #196]	; (8001598 <Modbus_Emission+0xfc>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 80014da:	461a      	mov	r2, r3
 80014dc:	f008 f98c 	bl	80097f8 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80014e0:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <Modbus_Emission+0xfc>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	4b2b      	ldr	r3, [pc, #172]	; (8001598 <Modbus_Emission+0xfc>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	3203      	adds	r2, #3
 80014f0:	b292      	uxth	r2, r2
 80014f2:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014f6:	4b28      	ldr	r3, [pc, #160]	; (8001598 <Modbus_Emission+0xfc>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80014fe:	4b26      	ldr	r3, [pc, #152]	; (8001598 <Modbus_Emission+0xfc>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001506:	3b02      	subs	r3, #2
 8001508:	4619      	mov	r1, r3
 800150a:	4610      	mov	r0, r2
 800150c:	f7ff fd92 	bl	8001034 <CRC16>
 8001510:	4603      	mov	r3, r0
 8001512:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001514:	4b20      	ldr	r3, [pc, #128]	; (8001598 <Modbus_Emission+0xfc>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <Modbus_Emission+0xfc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001520:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001522:	7939      	ldrb	r1, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	460a      	mov	r2, r1
 8001528:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800152c:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <Modbus_Emission+0xfc>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b19      	ldr	r3, [pc, #100]	; (8001598 <Modbus_Emission+0xfc>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001538:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 800153a:	7979      	ldrb	r1, [r7, #5]
 800153c:	4413      	add	r3, r2
 800153e:	460a      	mov	r2, r1
 8001540:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <Modbus_Emission+0xfc>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b20      	cmp	r3, #32
 8001552:	d10d      	bne.n	8001570 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001554:	4b10      	ldr	r3, [pc, #64]	; (8001598 <Modbus_Emission+0xfc>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <Modbus_Emission+0xfc>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001562:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <Modbus_Emission+0xfc>)
 8001564:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001566:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800156a:	461a      	mov	r2, r3
 800156c:	f006 ff9a 	bl	80084a4 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <Modbus_Emission+0xfc>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2200      	movs	r2, #0
 8001576:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001578:	4b07      	ldr	r3, [pc, #28]	; (8001598 <Modbus_Emission+0xfc>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2200      	movs	r2, #0
 800157e:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <Modbus_Emission+0xfc>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2200      	movs	r2, #0
 8001586:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <Modbus_Emission+0xfc>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2202      	movs	r2, #2
 800158e:	761a      	strb	r2, [r3, #24]
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000334 	.word	0x20000334

0800159c <rt_powd_snf>:
 * Arguments    : double u0
 *                double u1
 * Return Type  : double
 */
static double rt_powd_snf(double u0, double u1)
{
 800159c:	b5b0      	push	{r4, r5, r7, lr}
 800159e:	b08c      	sub	sp, #48	; 0x30
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	ed87 0b04 	vstr	d0, [r7, #16]
 80015a6:	ed87 1b02 	vstr	d1, [r7, #8]
  double y;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 80015aa:	ed97 0b04 	vldr	d0, [r7, #16]
 80015ae:	f002 fc81 	bl	8003eb4 <rtIsNaN>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d106      	bne.n	80015c6 <rt_powd_snf+0x2a>
 80015b8:	ed97 0b02 	vldr	d0, [r7, #8]
 80015bc:	f002 fc7a 	bl	8003eb4 <rtIsNaN>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d005      	beq.n	80015d2 <rt_powd_snf+0x36>
    y = rtNaN;
 80015c6:	4b80      	ldr	r3, [pc, #512]	; (80017c8 <rt_powd_snf+0x22c>)
 80015c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015cc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80015d0:	e0ef      	b.n	80017b2 <rt_powd_snf+0x216>
  } else {
    double d;
    double d1;
    d = fabs(u0);
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	ed97 7b00 	vldr	d7, [r7]
 80015e2:	ed87 7b08 	vstr	d7, [r7, #32]
    d1 = fabs(u1);
 80015e6:	68bc      	ldr	r4, [r7, #8]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80015ee:	e9c7 4506 	strd	r4, r5, [r7, #24]
    if (rtIsInf(u1)) {
 80015f2:	ed97 0b02 	vldr	d0, [r7, #8]
 80015f6:	f002 fc2f 	bl	8003e58 <rtIsInf>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d049      	beq.n	8001694 <rt_powd_snf+0xf8>
      if (d == 1.0) {
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	4b71      	ldr	r3, [pc, #452]	; (80017cc <rt_powd_snf+0x230>)
 8001606:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800160a:	f7ff fa09 	bl	8000a20 <__aeabi_dcmpeq>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <rt_powd_snf+0x84>
        y = 1.0;
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	4b6c      	ldr	r3, [pc, #432]	; (80017cc <rt_powd_snf+0x230>)
 800161a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800161e:	e0c8      	b.n	80017b2 <rt_powd_snf+0x216>
      } else if (d > 1.0) {
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	4b69      	ldr	r3, [pc, #420]	; (80017cc <rt_powd_snf+0x230>)
 8001626:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800162a:	f7ff fa21 	bl	8000a70 <__aeabi_dcmpgt>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d017      	beq.n	8001664 <rt_powd_snf+0xc8>
        if (u1 > 0.0) {
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001640:	f7ff fa16 	bl	8000a70 <__aeabi_dcmpgt>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d005      	beq.n	8001656 <rt_powd_snf+0xba>
          y = rtInf;
 800164a:	4b61      	ldr	r3, [pc, #388]	; (80017d0 <rt_powd_snf+0x234>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001654:	e0ad      	b.n	80017b2 <rt_powd_snf+0x216>
        } else {
          y = 0.0;
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001662:	e0a6      	b.n	80017b2 <rt_powd_snf+0x216>
        }
      } else if (u1 > 0.0) {
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001670:	f7ff f9fe 	bl	8000a70 <__aeabi_dcmpgt>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d006      	beq.n	8001688 <rt_powd_snf+0xec>
        y = 0.0;
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	f04f 0300 	mov.w	r3, #0
 8001682:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001686:	e094      	b.n	80017b2 <rt_powd_snf+0x216>
      } else {
        y = rtInf;
 8001688:	4b51      	ldr	r3, [pc, #324]	; (80017d0 <rt_powd_snf+0x234>)
 800168a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001692:	e08e      	b.n	80017b2 <rt_powd_snf+0x216>
      }
    } else if (d1 == 0.0) {
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	f04f 0300 	mov.w	r3, #0
 800169c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016a0:	f7ff f9be 	bl	8000a20 <__aeabi_dcmpeq>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d005      	beq.n	80016b6 <rt_powd_snf+0x11a>
      y = 1.0;
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	4b47      	ldr	r3, [pc, #284]	; (80017cc <rt_powd_snf+0x230>)
 80016b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80016b4:	e07d      	b.n	80017b2 <rt_powd_snf+0x216>
    } else if (d1 == 1.0) {
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	4b44      	ldr	r3, [pc, #272]	; (80017cc <rt_powd_snf+0x230>)
 80016bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016c0:	f7ff f9ae 	bl	8000a20 <__aeabi_dcmpeq>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d01b      	beq.n	8001702 <rt_powd_snf+0x166>
      if (u1 > 0.0) {
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016d6:	f7ff f9cb 	bl	8000a70 <__aeabi_dcmpgt>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d004      	beq.n	80016ea <rt_powd_snf+0x14e>
        y = u0;
 80016e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80016e8:	e063      	b.n	80017b2 <rt_powd_snf+0x216>
      } else {
        y = 1.0 / u0;
 80016ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016ee:	f04f 0000 	mov.w	r0, #0
 80016f2:	4936      	ldr	r1, [pc, #216]	; (80017cc <rt_powd_snf+0x230>)
 80016f4:	f7ff f856 	bl	80007a4 <__aeabi_ddiv>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001700:	e057      	b.n	80017b2 <rt_powd_snf+0x216>
      }
    } else if (u1 == 2.0) {
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800170a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800170e:	f7ff f987 	bl	8000a20 <__aeabi_dcmpeq>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d00a      	beq.n	800172e <rt_powd_snf+0x192>
      y = u0 * u0;
 8001718:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800171c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001720:	f7fe ff16 	bl	8000550 <__aeabi_dmul>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800172c:	e041      	b.n	80017b2 <rt_powd_snf+0x216>
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <rt_powd_snf+0x238>)
 8001734:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001738:	f7ff f972 	bl	8000a20 <__aeabi_dcmpeq>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d011      	beq.n	8001766 <rt_powd_snf+0x1ca>
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800174e:	f7ff f985 	bl	8000a5c <__aeabi_dcmpge>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d006      	beq.n	8001766 <rt_powd_snf+0x1ca>
      y = sqrt(u0);
 8001758:	ed97 0b04 	vldr	d0, [r7, #16]
 800175c:	f008 fb48 	bl	8009df0 <sqrt>
 8001760:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8001764:	e025      	b.n	80017b2 <rt_powd_snf+0x216>
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001772:	f7ff f95f 	bl	8000a34 <__aeabi_dcmplt>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d012      	beq.n	80017a2 <rt_powd_snf+0x206>
 800177c:	ed97 0b02 	vldr	d0, [r7, #8]
 8001780:	f008 f9ba 	bl	8009af8 <floor>
 8001784:	ec53 2b10 	vmov	r2, r3, d0
 8001788:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800178c:	f7ff f970 	bl	8000a70 <__aeabi_dcmpgt>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d005      	beq.n	80017a2 <rt_powd_snf+0x206>
      y = rtNaN;
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <rt_powd_snf+0x22c>)
 8001798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80017a0:	e007      	b.n	80017b2 <rt_powd_snf+0x216>
    } else {
      y = pow(u0, u1);
 80017a2:	ed97 1b02 	vldr	d1, [r7, #8]
 80017a6:	ed97 0b04 	vldr	d0, [r7, #16]
 80017aa:	f008 fab1 	bl	8009d10 <pow>
 80017ae:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
    }
  }
  return y;
 80017b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017b6:	ec43 2b17 	vmov	d7, r2, r3
}
 80017ba:	eeb0 0a47 	vmov.f32	s0, s14
 80017be:	eef0 0a67 	vmov.f32	s1, s15
 80017c2:	3730      	adds	r7, #48	; 0x30
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bdb0      	pop	{r4, r5, r7, pc}
 80017c8:	20000298 	.word	0x20000298
 80017cc:	3ff00000 	.word	0x3ff00000
 80017d0:	200002a0 	.word	0x200002a0
 80017d4:	3fe00000 	.word	0x3fe00000

080017d8 <Qubic>:
 * Return Type  : void
 */
void Qubic(double q_k1, double q_k2, double qdot_k1, double qdot_k2, double tf,
           emxArray_real_T *q_position, emxArray_real_T *q_velocity,
           emxArray_real_T *q_acc)
{
 80017d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017dc:	b0a1      	sub	sp, #132	; 0x84
 80017de:	af00      	add	r7, sp, #0
 80017e0:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 80017e4:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 80017e8:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 80017ec:	ed87 3b08 	vstr	d3, [r7, #32]
 80017f0:	ed87 4b06 	vstr	d4, [r7, #24]
 80017f4:	6178      	str	r0, [r7, #20]
 80017f6:	6139      	str	r1, [r7, #16]
 80017f8:	60fa      	str	r2, [r7, #12]
  double *q_position_data;
  double *q_velocity_data;
  int i;
  int k;
  int q_acc_tmp_tmp;
  q_acc_data = q_acc->data;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	67fb      	str	r3, [r7, #124]	; 0x7c
  delta1 = tf * 2000.0;
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	4bac      	ldr	r3, [pc, #688]	; (8001ab8 <Qubic+0x2e0>)
 8001806:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800180a:	f7fe fea1 	bl	8000550 <__aeabi_dmul>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  if (!(delta1 >= 0.0)) {
 8001816:	2301      	movs	r3, #1
 8001818:	461e      	mov	r6, r3
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001826:	f7ff f919 	bl	8000a5c <__aeabi_dcmpge>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <Qubic+0x5c>
 8001830:	2300      	movs	r3, #0
 8001832:	461e      	mov	r6, r3
 8001834:	b2f3      	uxtb	r3, r6
 8001836:	f083 0301 	eor.w	r3, r3, #1
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	d009      	beq.n	8001854 <Qubic+0x7c>
    q_acc->size[0] = 1;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	601a      	str	r2, [r3, #0]
    q_acc->size[1] = 0;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	3304      	adds	r3, #4
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	e158      	b.n	8001b06 <Qubic+0x32e>
  } else {
    d = floor(delta1);
 8001854:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8001858:	f008 f94e 	bl	8009af8 <floor>
 800185c:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
    i = q_acc->size[0] * q_acc->size[1];
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	6852      	ldr	r2, [r2, #4]
 800186a:	3204      	adds	r2, #4
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	fb02 f303 	mul.w	r3, r2, r3
 8001872:	67bb      	str	r3, [r7, #120]	; 0x78
    q_acc->size[0] = 1;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	601a      	str	r2, [r3, #0]
    q_acc->size[1] = (int)d;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	1d1e      	adds	r6, r3, #4
 8001882:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001886:	f7ff f913 	bl	8000ab0 <__aeabi_d2iz>
 800188a:	4603      	mov	r3, r0
 800188c:	6033      	str	r3, [r6, #0]
    emxEnsureCapacity_real_T(q_acc, i);
 800188e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f000 fb3e 	bl	8001f12 <emxEnsureCapacity_real_T>
    q_acc_data = q_acc->data;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if ((int)d >= 1) {
 800189c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80018a0:	f7ff f906 	bl	8000ab0 <__aeabi_d2iz>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f340 812d 	ble.w	8001b06 <Qubic+0x32e>
      q_acc_tmp_tmp = (int)d - 1;
 80018ac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80018b0:	f7ff f8fe 	bl	8000ab0 <__aeabi_d2iz>
 80018b4:	4603      	mov	r3, r0
 80018b6:	3b01      	subs	r3, #1
 80018b8:	65fb      	str	r3, [r7, #92]	; 0x5c
      q_acc_data[(int)floor(delta1) - 1] = tf;
 80018ba:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 80018be:	f008 f91b 	bl	8009af8 <floor>
 80018c2:	ec53 2b10 	vmov	r2, r3, d0
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	f7ff f8f1 	bl	8000ab0 <__aeabi_d2iz>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80018d4:	3b01      	subs	r3, #1
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80018da:	18d1      	adds	r1, r2, r3
 80018dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018e0:	e9c1 2300 	strd	r2, r3, [r1]
      if (q_acc->size[1] >= 2) {
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	3304      	adds	r3, #4
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	f340 810a 	ble.w	8001b06 <Qubic+0x32e>
        q_acc_data[0] = 0.0;
 80018f2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	e9c1 2300 	strd	r2, r3, [r1]
        if (q_acc->size[1] >= 3) {
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	3304      	adds	r3, #4
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b02      	cmp	r3, #2
 800190a:	f340 80fc 	ble.w	8001b06 <Qubic+0x32e>
          if (-tf == 0.0) {
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800191a:	f7ff f881 	bl	8000a20 <__aeabi_dcmpeq>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d051      	beq.n	80019c8 <Qubic+0x1f0>
            delta1 = tf / ((double)q_acc->size[1] - 1.0);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	3304      	adds	r3, #4
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fda5 	bl	800047c <__aeabi_i2d>
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	4b61      	ldr	r3, [pc, #388]	; (8001abc <Qubic+0x2e4>)
 8001938:	f7fe fc52 	bl	80001e0 <__aeabi_dsub>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001944:	f7fe ff2e 	bl	80007a4 <__aeabi_ddiv>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            for (k = 2; k <= q_acc_tmp_tmp; k++) {
 8001950:	2302      	movs	r3, #2
 8001952:	677b      	str	r3, [r7, #116]	; 0x74
 8001954:	e01c      	b.n	8001990 <Qubic+0x1b8>
              q_acc_data[k - 1] =
                  (double)(((k << 1) - q_acc->size[1]) - 1) * delta1;
 8001956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001958:	005a      	lsls	r2, r3, #1
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	3304      	adds	r3, #4
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	3b01      	subs	r3, #1
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fd88 	bl	800047c <__aeabi_i2d>
              q_acc_data[k - 1] =
 800196c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800196e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001972:	3b01      	subs	r3, #1
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001978:	18d6      	adds	r6, r2, r3
                  (double)(((k << 1) - q_acc->size[1]) - 1) * delta1;
 800197a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800197e:	f7fe fde7 	bl	8000550 <__aeabi_dmul>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
              q_acc_data[k - 1] =
 8001986:	e9c6 2300 	strd	r2, r3, [r6]
            for (k = 2; k <= q_acc_tmp_tmp; k++) {
 800198a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800198c:	3301      	adds	r3, #1
 800198e:	677b      	str	r3, [r7, #116]	; 0x74
 8001990:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001994:	429a      	cmp	r2, r3
 8001996:	ddde      	ble.n	8001956 <Qubic+0x17e>
            }
            if ((q_acc->size[1] & 1) == 1) {
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	3304      	adds	r3, #4
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80ae 	beq.w	8001b06 <Qubic+0x32e>
              q_acc_data[q_acc->size[1] >> 1] = 0.0;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	3304      	adds	r3, #4
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	105b      	asrs	r3, r3, #1
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80019b8:	18d1      	adds	r1, r2, r3
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	e9c1 2300 	strd	r2, r3, [r1]
 80019c6:	e09e      	b.n	8001b06 <Qubic+0x32e>
            }
          } else if ((tf < 0.0) && (fabs(tf) > 8.9884656743115785E+307)) {
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019d4:	f7ff f82e 	bl	8000a34 <__aeabi_dcmplt>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d04e      	beq.n	8001a7c <Qubic+0x2a4>
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	603b      	str	r3, [r7, #0]
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	f04f 32ff 	mov.w	r2, #4294967295
 80019ee:	4b34      	ldr	r3, [pc, #208]	; (8001ac0 <Qubic+0x2e8>)
 80019f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019f4:	f7ff f83c 	bl	8000a70 <__aeabi_dcmpgt>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d03e      	beq.n	8001a7c <Qubic+0x2a4>
            delta1 = tf / ((double)q_acc->size[1] - 1.0);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	3304      	adds	r3, #4
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fd38 	bl	800047c <__aeabi_i2d>
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <Qubic+0x2e4>)
 8001a12:	f7fe fbe5 	bl	80001e0 <__aeabi_dsub>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a1e:	f7fe fec1 	bl	80007a4 <__aeabi_ddiv>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            i = q_acc->size[1];
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	67bb      	str	r3, [r7, #120]	; 0x78
            for (k = 0; k <= i - 3; k++) {
 8001a32:	2300      	movs	r3, #0
 8001a34:	677b      	str	r3, [r7, #116]	; 0x74
 8001a36:	e01b      	b.n	8001a70 <Qubic+0x298>
              q_acc_data[k + 1] = delta1 * ((double)k + 1.0);
 8001a38:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001a3a:	f7fe fd1f 	bl	800047c <__aeabi_i2d>
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <Qubic+0x2e4>)
 8001a44:	f7fe fbce 	bl	80001e4 <__adddf3>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a52:	3301      	adds	r3, #1
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a58:	18d6      	adds	r6, r2, r3
 8001a5a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001a5e:	f7fe fd77 	bl	8000550 <__aeabi_dmul>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	e9c6 2300 	strd	r2, r3, [r6]
            for (k = 0; k <= i - 3; k++) {
 8001a6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	677b      	str	r3, [r7, #116]	; 0x74
 8001a70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a72:	3b02      	subs	r3, #2
 8001a74:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001a76:	429a      	cmp	r2, r3
 8001a78:	dbde      	blt.n	8001a38 <Qubic+0x260>
          } else if ((tf < 0.0) && (fabs(tf) > 8.9884656743115785E+307)) {
 8001a7a:	e044      	b.n	8001b06 <Qubic+0x32e>
            }
          } else {
            delta1 = tf / ((double)q_acc->size[1] - 1.0);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	3304      	adds	r3, #4
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fcf9 	bl	800047c <__aeabi_i2d>
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <Qubic+0x2e4>)
 8001a90:	f7fe fba6 	bl	80001e0 <__aeabi_dsub>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a9c:	f7fe fe82 	bl	80007a4 <__aeabi_ddiv>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            i = q_acc->size[1];
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	67bb      	str	r3, [r7, #120]	; 0x78
            for (k = 0; k <= i - 3; k++) {
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	677b      	str	r3, [r7, #116]	; 0x74
 8001ab4:	e022      	b.n	8001afc <Qubic+0x324>
 8001ab6:	bf00      	nop
 8001ab8:	409f4000 	.word	0x409f4000
 8001abc:	3ff00000 	.word	0x3ff00000
 8001ac0:	7fdfffff 	.word	0x7fdfffff
              q_acc_data[k + 1] = ((double)k + 1.0) * delta1;
 8001ac4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001ac6:	f7fe fcd9 	bl	800047c <__aeabi_i2d>
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	4b6e      	ldr	r3, [pc, #440]	; (8001c88 <Qubic+0x4b0>)
 8001ad0:	f7fe fb88 	bl	80001e4 <__adddf3>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ade:	3301      	adds	r3, #1
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ae4:	18d6      	adds	r6, r2, r3
 8001ae6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001aea:	f7fe fd31 	bl	8000550 <__aeabi_dmul>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	e9c6 2300 	strd	r2, r3, [r6]
            for (k = 0; k <= i - 3; k++) {
 8001af6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001af8:	3301      	adds	r3, #1
 8001afa:	677b      	str	r3, [r7, #116]	; 0x74
 8001afc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001afe:	3b02      	subs	r3, #2
 8001b00:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001b02:	429a      	cmp	r2, r3
 8001b04:	dbde      	blt.n	8001ac4 <Qubic+0x2ec>
          }
        }
      }
    }
  }
  delta1 = q_k2 - q_k1;
 8001b06:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001b0a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001b0e:	f7fe fb67 	bl	80001e0 <__aeabi_dsub>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  C2_tmp = tf * tf;
 8001b1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b1e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b22:	f7fe fd15 	bl	8000550 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  C2 = 3.0 * (delta1 / C2_tmp) + (-qdot_k2 - 2.0 * qdot_k1) / tf;
 8001b2e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001b32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001b36:	f7fe fe35 	bl	80007a4 <__aeabi_ddiv>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	4b51      	ldr	r3, [pc, #324]	; (8001c8c <Qubic+0x4b4>)
 8001b48:	f7fe fd02 	bl	8000550 <__aeabi_dmul>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4690      	mov	r8, r2
 8001b52:	4699      	mov	r9, r3
 8001b54:	6a3c      	ldr	r4, [r7, #32]
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b5c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	f7fe fb3e 	bl	80001e4 <__adddf3>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	4629      	mov	r1, r5
 8001b70:	f7fe fb36 	bl	80001e0 <__aeabi_dsub>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b80:	f7fe fe10 	bl	80007a4 <__aeabi_ddiv>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4640      	mov	r0, r8
 8001b8a:	4649      	mov	r1, r9
 8001b8c:	f7fe fb2a 	bl	80001e4 <__adddf3>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  delta1 =
      -2.0 * (delta1 / rt_powd_snf(tf, 3.0)) + (qdot_k2 + qdot_k1) / C2_tmp;
 8001b98:	ed9f 1b39 	vldr	d1, [pc, #228]	; 8001c80 <Qubic+0x4a8>
 8001b9c:	ed97 0b06 	vldr	d0, [r7, #24]
 8001ba0:	f7ff fcfc 	bl	800159c <rt_powd_snf>
 8001ba4:	ec53 2b10 	vmov	r2, r3, d0
 8001ba8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001bac:	f7fe fdfa 	bl	80007a4 <__aeabi_ddiv>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001bc0:	f7fe fcc6 	bl	8000550 <__aeabi_dmul>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4614      	mov	r4, r2
 8001bca:	461d      	mov	r5, r3
 8001bcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bd0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bd4:	f7fe fb06 	bl	80001e4 <__adddf3>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001be4:	f7fe fdde 	bl	80007a4 <__aeabi_ddiv>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
  delta1 =
 8001bec:	4620      	mov	r0, r4
 8001bee:	4629      	mov	r1, r5
 8001bf0:	f7fe faf8 	bl	80001e4 <__adddf3>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  i = q_velocity->size[0] * q_velocity->size[1];
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	6852      	ldr	r2, [r2, #4]
 8001c06:	3204      	adds	r2, #4
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	fb02 f303 	mul.w	r3, r2, r3
 8001c0e:	67bb      	str	r3, [r7, #120]	; 0x78
  q_velocity->size[0] = 1;
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
  q_velocity->size[1] = q_acc->size[1];
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	3304      	adds	r3, #4
 8001c22:	6852      	ldr	r2, [r2, #4]
 8001c24:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_velocity, i);
 8001c26:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001c28:	6938      	ldr	r0, [r7, #16]
 8001c2a:	f000 f972 	bl	8001f12 <emxEnsureCapacity_real_T>
  q_velocity_data = q_velocity->data;
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	647b      	str	r3, [r7, #68]	; 0x44
  q_acc_tmp_tmp = q_acc->size[1];
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  i = q_position->size[0] * q_position->size[1];
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	6852      	ldr	r2, [r2, #4]
 8001c46:	3204      	adds	r2, #4
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	fb02 f303 	mul.w	r3, r2, r3
 8001c4e:	67bb      	str	r3, [r7, #120]	; 0x78
  q_position->size[0] = 1;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
  q_position->size[1] = q_acc->size[1];
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	3304      	adds	r3, #4
 8001c62:	6852      	ldr	r2, [r2, #4]
 8001c64:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_position, i);
 8001c66:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001c68:	6978      	ldr	r0, [r7, #20]
 8001c6a:	f000 f952 	bl	8001f12 <emxEnsureCapacity_real_T>
  q_position_data = q_position->data;
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	643b      	str	r3, [r7, #64]	; 0x40
  for (i = 0; i < q_acc_tmp_tmp; i++) {
 8001c74:	2300      	movs	r3, #0
 8001c76:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c78:	e067      	b.n	8001d4a <Qubic+0x572>
 8001c7a:	bf00      	nop
 8001c7c:	f3af 8000 	nop.w
 8001c80:	00000000 	.word	0x00000000
 8001c84:	40080000 	.word	0x40080000
 8001c88:	3ff00000 	.word	0x3ff00000
 8001c8c:	40080000 	.word	0x40080000
    d = q_acc_data[i];
 8001c90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001c96:	4413      	add	r3, r2
 8001c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    C2_tmp = d * d;
 8001ca0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ca4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001ca8:	f7fe fc52 	bl	8000550 <__aeabi_dmul>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    q_velocity_data[i] = C2_tmp;
 8001cb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001cba:	18d1      	adds	r1, r2, r3
 8001cbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001cc0:	e9c1 2300 	strd	r2, r3, [r1]
    q_position_data[i] =
        ((q_k1 + qdot_k1 * d) + C2 * C2_tmp) + delta1 * rt_powd_snf(d, 3.0);
 8001cc4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001cc8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ccc:	f7fe fc40 	bl	8000550 <__aeabi_dmul>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001cdc:	f7fe fa82 	bl	80001e4 <__adddf3>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4614      	mov	r4, r2
 8001ce6:	461d      	mov	r5, r3
 8001ce8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001cec:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001cf0:	f7fe fc2e 	bl	8000550 <__aeabi_dmul>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	4629      	mov	r1, r5
 8001cfc:	f7fe fa72 	bl	80001e4 <__adddf3>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4690      	mov	r8, r2
 8001d06:	4699      	mov	r9, r3
 8001d08:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8001ed0 <Qubic+0x6f8>
 8001d0c:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001d10:	f7ff fc44 	bl	800159c <rt_powd_snf>
 8001d14:	ec51 0b10 	vmov	r0, r1, d0
 8001d18:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d1c:	f7fe fc18 	bl	8000550 <__aeabi_dmul>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
    q_position_data[i] =
 8001d28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d2e:	18d4      	adds	r4, r2, r3
        ((q_k1 + qdot_k1 * d) + C2 * C2_tmp) + delta1 * rt_powd_snf(d, 3.0);
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4640      	mov	r0, r8
 8001d36:	4649      	mov	r1, r9
 8001d38:	f7fe fa54 	bl	80001e4 <__adddf3>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
    q_position_data[i] =
 8001d40:	e9c4 2300 	strd	r2, r3, [r4]
  for (i = 0; i < q_acc_tmp_tmp; i++) {
 8001d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d46:	3301      	adds	r3, #1
 8001d48:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d4a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001d4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	db9e      	blt.n	8001c90 <Qubic+0x4b8>
  }
  i = q_velocity->size[0] * q_velocity->size[1];
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	6852      	ldr	r2, [r2, #4]
 8001d5c:	3204      	adds	r2, #4
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	fb02 f303 	mul.w	r3, r2, r3
 8001d64:	67bb      	str	r3, [r7, #120]	; 0x78
  q_velocity->size[0] = 1;
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]
  q_velocity->size[1] = q_acc->size[1];
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	3304      	adds	r3, #4
 8001d78:	6852      	ldr	r2, [r2, #4]
 8001d7a:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_velocity, i);
 8001d7c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001d7e:	6938      	ldr	r0, [r7, #16]
 8001d80:	f000 f8c7 	bl	8001f12 <emxEnsureCapacity_real_T>
  q_velocity_data = q_velocity->data;
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	647b      	str	r3, [r7, #68]	; 0x44
  d = 2.0 * C2;
 8001d8a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	f7fe fa27 	bl	80001e4 <__adddf3>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  C2_tmp = 3.0 * delta1;
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	4b4d      	ldr	r3, [pc, #308]	; (8001ed8 <Qubic+0x700>)
 8001da4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001da8:	f7fe fbd2 	bl	8000550 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  q_acc_tmp_tmp = q_acc->size[1] - 1;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	3304      	adds	r3, #4
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	67bb      	str	r3, [r7, #120]	; 0x78
 8001dc4:	e034      	b.n	8001e30 <Qubic+0x658>
    q_velocity_data[i] =
        (qdot_k1 + d * q_acc_data[i]) + C2_tmp * q_velocity_data[i];
 8001dc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001dcc:	4413      	add	r3, r2
 8001dce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dd2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001dd6:	f7fe fbbb 	bl	8000550 <__aeabi_dmul>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001de6:	f7fe f9fd 	bl	80001e4 <__adddf3>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4690      	mov	r8, r2
 8001df0:	4699      	mov	r9, r3
 8001df2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001df8:	4413      	add	r3, r2
 8001dfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dfe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e02:	f7fe fba5 	bl	8000550 <__aeabi_dmul>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
    q_velocity_data[i] =
 8001e0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e14:	18d4      	adds	r4, r2, r3
        (qdot_k1 + d * q_acc_data[i]) + C2_tmp * q_velocity_data[i];
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4640      	mov	r0, r8
 8001e1c:	4649      	mov	r1, r9
 8001e1e:	f7fe f9e1 	bl	80001e4 <__adddf3>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
    q_velocity_data[i] =
 8001e26:	e9c4 2300 	strd	r2, r3, [r4]
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001e2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e34:	429a      	cmp	r2, r3
 8001e36:	ddc6      	ble.n	8001dc6 <Qubic+0x5ee>
  }
  i = q_acc->size[0] * q_acc->size[1];
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	6852      	ldr	r2, [r2, #4]
 8001e42:	3204      	adds	r2, #4
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	fb02 f303 	mul.w	r3, r2, r3
 8001e4a:	67bb      	str	r3, [r7, #120]	; 0x78
  q_acc->size[0] = 1;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_acc, i);
 8001e54:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 f85b 	bl	8001f12 <emxEnsureCapacity_real_T>
  q_acc_data = q_acc->data;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	67fb      	str	r3, [r7, #124]	; 0x7c
  C2_tmp = 6.0 * delta1;
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <Qubic+0x704>)
 8001e68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001e6c:	f7fe fb70 	bl	8000550 <__aeabi_dmul>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001e78:	2300      	movs	r3, #0
 8001e7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e7c:	e01c      	b.n	8001eb8 <Qubic+0x6e0>
    q_acc_data[i] = d + C2_tmp * q_acc_data[i];
 8001e7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001e84:	4413      	add	r3, r2
 8001e86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e8a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e8e:	f7fe fb5f 	bl	8000550 <__aeabi_dmul>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4610      	mov	r0, r2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ea0:	18d4      	adds	r4, r2, r3
 8001ea2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ea6:	f7fe f99d 	bl	80001e4 <__adddf3>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	e9c4 2300 	strd	r2, r3, [r4]
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001eb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	67bb      	str	r3, [r7, #120]	; 0x78
 8001eb8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001eba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	ddde      	ble.n	8001e7e <Qubic+0x6a6>
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	3784      	adds	r7, #132	; 0x84
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ecc:	f3af 8000 	nop.w
 8001ed0:	00000000 	.word	0x00000000
 8001ed4:	40080000 	.word	0x40080000
 8001ed8:	40080000 	.word	0x40080000
 8001edc:	40180000 	.word	0x40180000

08001ee0 <emxDestroyArray_real_T>:
/*
 * Arguments    : emxArray_real_T *emxArray
 * Return Type  : void
 */
void emxDestroyArray_real_T(emxArray_real_T *emxArray)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  emxFree_real_T(&emxArray);
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 f878 	bl	8001fe0 <emxFree_real_T>
}
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <emxInitArray_real_T>:
 * Arguments    : emxArray_real_T **pEmxArray
 *                int numDimensions
 * Return Type  : void
 */
void emxInitArray_real_T(emxArray_real_T **pEmxArray, int numDimensions)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  emxInit_real_T(pEmxArray, numDimensions);
 8001f02:	6839      	ldr	r1, [r7, #0]
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f895 	bl	8002034 <emxInit_real_T>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <emxEnsureCapacity_real_T>:
 * Arguments    : emxArray_real_T *emxArray
 *                int oldNumel
 * Return Type  : void
 */
void emxEnsureCapacity_real_T(emxArray_real_T *emxArray, int oldNumel)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b086      	sub	sp, #24
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
  int i;
  int newNumel;
  void *newData;
  if (oldNumel < 0) {
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	da01      	bge.n	8001f26 <emxEnsureCapacity_real_T+0x14>
    oldNumel = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	603b      	str	r3, [r7, #0]
  }
  newNumel = 1;
 8001f26:	2301      	movs	r3, #1
 8001f28:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	e00c      	b.n	8001f4a <emxEnsureCapacity_real_T+0x38>
    newNumel *= emxArray->size[i];
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	fb02 f303 	mul.w	r3, r2, r3
 8001f42:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	3301      	adds	r3, #1
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	dbed      	blt.n	8001f30 <emxEnsureCapacity_real_T+0x1e>
  }
  if (newNumel > emxArray->allocatedSize) {
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	dd3c      	ble.n	8001fd8 <emxEnsureCapacity_real_T+0xc6>
    i = emxArray->allocatedSize;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	617b      	str	r3, [r7, #20]
    if (i < 16) {
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	2b0f      	cmp	r3, #15
 8001f68:	dc0d      	bgt.n	8001f86 <emxEnsureCapacity_real_T+0x74>
      i = 16;
 8001f6a:	2310      	movs	r3, #16
 8001f6c:	617b      	str	r3, [r7, #20]
    }
    while (i < newNumel) {
 8001f6e:	e00a      	b.n	8001f86 <emxEnsureCapacity_real_T+0x74>
      if (i > 1073741823) {
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f76:	db03      	blt.n	8001f80 <emxEnsureCapacity_real_T+0x6e>
        i = MAX_int32_T;
 8001f78:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	e002      	b.n	8001f86 <emxEnsureCapacity_real_T+0x74>
      } else {
        i *= 2;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	617b      	str	r3, [r7, #20]
    while (i < newNumel) {
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	dbf0      	blt.n	8001f70 <emxEnsureCapacity_real_T+0x5e>
      }
    }
    newData = calloc((unsigned int)i, sizeof(double));
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2108      	movs	r1, #8
 8001f92:	4618      	mov	r0, r3
 8001f94:	f007 fbee 	bl	8009774 <calloc>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	60fb      	str	r3, [r7, #12]
    if (emxArray->data != NULL) {
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d010      	beq.n	8001fc6 <emxEnsureCapacity_real_T+0xb4>
      memcpy(newData, emxArray->data, sizeof(double) * (unsigned int)oldNumel);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6819      	ldr	r1, [r3, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	461a      	mov	r2, r3
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f007 fc22 	bl	80097f8 <memcpy>
      if (emxArray->canFreeData) {
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	7c1b      	ldrb	r3, [r3, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d004      	beq.n	8001fc6 <emxEnsureCapacity_real_T+0xb4>
        free(emxArray->data);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f007 fc11 	bl	80097e8 <free>
      }
    }
    emxArray->data = (double *)newData;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	601a      	str	r2, [r3, #0]
    emxArray->allocatedSize = i;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	609a      	str	r2, [r3, #8]
    emxArray->canFreeData = true;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	741a      	strb	r2, [r3, #16]
  }
}
 8001fd8:	bf00      	nop
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <emxFree_real_T>:
/*
 * Arguments    : emxArray_real_T **pEmxArray
 * Return Type  : void
 */
void emxFree_real_T(emxArray_real_T **pEmxArray)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if (*pEmxArray != (emxArray_real_T *)NULL) {
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d01d      	beq.n	800202c <emxFree_real_T+0x4c>
    if (((*pEmxArray)->data != (double *)NULL) && (*pEmxArray)->canFreeData) {
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00a      	beq.n	8002010 <emxFree_real_T+0x30>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	7c1b      	ldrb	r3, [r3, #16]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <emxFree_real_T+0x30>
      free((*pEmxArray)->data);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f007 fbec 	bl	80097e8 <free>
    }
    free((*pEmxArray)->size);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	4618      	mov	r0, r3
 8002018:	f007 fbe6 	bl	80097e8 <free>
    free(*pEmxArray);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f007 fbe1 	bl	80097e8 <free>
    *pEmxArray = (emxArray_real_T *)NULL;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
  }
}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <emxInit_real_T>:
 * Arguments    : emxArray_real_T **pEmxArray
 *                int numDimensions
 * Return Type  : void
 */
void emxInit_real_T(emxArray_real_T **pEmxArray, int numDimensions)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  emxArray_real_T *emxArray;
  int i;
  *pEmxArray = (emxArray_real_T *)malloc(sizeof(emxArray_real_T));
 800203e:	2014      	movs	r0, #20
 8002040:	f007 fbca 	bl	80097d8 <malloc>
 8002044:	4603      	mov	r3, r0
 8002046:	461a      	mov	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	601a      	str	r2, [r3, #0]
  emxArray = *pEmxArray;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	60bb      	str	r3, [r7, #8]
  emxArray->data = (double *)NULL;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
  emxArray->numDimensions = numDimensions;
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	60da      	str	r2, [r3, #12]
  emxArray->size = (int *)malloc(sizeof(int) * (unsigned int)numDimensions);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4618      	mov	r0, r3
 8002064:	f007 fbb8 	bl	80097d8 <malloc>
 8002068:	4603      	mov	r3, r0
 800206a:	461a      	mov	r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	605a      	str	r2, [r3, #4]
  emxArray->allocatedSize = 0;
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  emxArray->canFreeData = true;
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2201      	movs	r2, #1
 800207a:	741a      	strb	r2, [r3, #16]
  for (i = 0; i < numDimensions; i++) {
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	e009      	b.n	8002096 <emxInit_real_T+0x62>
    emxArray->size[i] = 0;
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
  for (i = 0; i < numDimensions; i++) {
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	3301      	adds	r3, #1
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	dbf1      	blt.n	8002082 <emxInit_real_T+0x4e>
  }
}
 800209e:	bf00      	nop
 80020a0:	bf00      	nop
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80020ac:	f3bf 8f4f 	dsb	sy
}
 80020b0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <__NVIC_SystemReset+0x24>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80020ba:	4904      	ldr	r1, [pc, #16]	; (80020cc <__NVIC_SystemReset+0x24>)
 80020bc:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <__NVIC_SystemReset+0x28>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80020c2:	f3bf 8f4f 	dsb	sy
}
 80020c6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80020c8:	bf00      	nop
 80020ca:	e7fd      	b.n	80020c8 <__NVIC_SystemReset+0x20>
 80020cc:	e000ed00 	.word	0xe000ed00
 80020d0:	05fa0004 	.word	0x05fa0004

080020d4 <argInit_real_T>:
/*
 * Arguments    : void
 * Return Type  : double
 */
static double argInit_real_T(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return 0.0;
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	ec43 2b17 	vmov	d7, r2, r3
}
 80020e4:	eeb0 0a47 	vmov.f32	s0, s14
 80020e8:	eef0 0a67 	vmov.f32	s1, s15
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020fc:	f002 fa50 	bl	80045a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002100:	f000 faba 	bl	8002678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002104:	f000 fdca 	bl	8002c9c <MX_GPIO_Init>
  MX_DMA_Init();
 8002108:	f000 fd92 	bl	8002c30 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800210c:	f000 fd64 	bl	8002bd8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002110:	f000 fba8 	bl	8002864 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002114:	f000 fcbe 	bl	8002a94 <MX_TIM5_Init>
  MX_ADC1_Init();
 8002118:	f000 fb16 	bl	8002748 <MX_ADC1_Init>
  MX_I2C1_Init();
 800211c:	f000 fb74 	bl	8002808 <MX_I2C1_Init>
  MX_TIM11_Init();
 8002120:	f000 fd06 	bl	8002b30 <MX_TIM11_Init>
  MX_TIM4_Init();
 8002124:	f000 fc40 	bl	80029a8 <MX_TIM4_Init>
  MX_TIM3_Init();
 8002128:	f000 fbf0 	bl	800290c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  main_Qubic();
 800212c:	f001 fe2c 	bl	8003d88 <main_Qubic>
  transformRectangleAndPoints();
 8002130:	f000 fe36 	bl	8002da0 <transformRectangleAndPoints>
    HAL_ADC_Start_DMA(&hadc1, Joystick_position, 2);
 8002134:	2202      	movs	r2, #2
 8002136:	4919      	ldr	r1, [pc, #100]	; (800219c <main+0xa8>)
 8002138:	4819      	ldr	r0, [pc, #100]	; (80021a0 <main+0xac>)
 800213a:	f002 fae7 	bl	800470c <HAL_ADC_Start_DMA>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);
 800213e:	2104      	movs	r1, #4
 8002140:	4818      	ldr	r0, [pc, #96]	; (80021a4 <main+0xb0>)
 8002142:	f004 ff8d 	bl	8007060 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002146:	2100      	movs	r1, #0
 8002148:	4817      	ldr	r0, [pc, #92]	; (80021a8 <main+0xb4>)
 800214a:	f004 fd57 	bl	8006bfc <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim5);
 800214e:	4817      	ldr	r0, [pc, #92]	; (80021ac <main+0xb8>)
 8002150:	f004 fbcc 	bl	80068ec <HAL_TIM_Base_Start>
	 hmodbus.huart = &huart2;
 8002154:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <main+0xbc>)
 8002156:	4a17      	ldr	r2, [pc, #92]	; (80021b4 <main+0xc0>)
 8002158:	60da      	str	r2, [r3, #12]
	 hmodbus.htim = &htim11;
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <main+0xbc>)
 800215c:	4a16      	ldr	r2, [pc, #88]	; (80021b8 <main+0xc4>)
 800215e:	611a      	str	r2, [r3, #16]
	 hmodbus.slaveAddress = 0x15;
 8002160:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <main+0xbc>)
 8002162:	2215      	movs	r2, #21
 8002164:	701a      	strb	r2, [r3, #0]
	 hmodbus.RegisterSize =70;
 8002166:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <main+0xbc>)
 8002168:	2246      	movs	r2, #70	; 0x46
 800216a:	609a      	str	r2, [r3, #8]
	 Modbus_init(&hmodbus, registerFrame);
 800216c:	4913      	ldr	r1, [pc, #76]	; (80021bc <main+0xc8>)
 800216e:	4810      	ldr	r0, [pc, #64]	; (80021b0 <main+0xbc>)
 8002170:	f7fe ff0a 	bl	8000f88 <Modbus_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(starttray == 1){
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <main+0xcc>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d104      	bne.n	8002186 <main+0x92>
		  starttray = 0;
 800217c:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <main+0xcc>)
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
		  transformRectangleAndPoints();
 8002182:	f000 fe0d 	bl	8002da0 <transformRectangleAndPoints>

	  }
	  	  Modbus_Protocal_Worker();
 8002186:	f7fe ff8b 	bl	80010a0 <Modbus_Protocal_Worker>
	  	  flowmodbus();
 800218a:	f001 f889 	bl	80032a0 <flowmodbus>
	      static uint64_t timestamp = 0;
	      static uint64_t timemodbus = 0;
	      static float timestampTrajact = 0;
	      if(SoftReset == 1){
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <main+0xd0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d118      	bne.n	80021c8 <main+0xd4>
	    	  NVIC_SystemReset();
 8002196:	f7ff ff87 	bl	80020a8 <__NVIC_SystemReset>
 800219a:	bf00      	nop
 800219c:	20000fac 	.word	0x20000fac
 80021a0:	20000338 	.word	0x20000338
 80021a4:	20000434 	.word	0x20000434
 80021a8:	2000059c 	.word	0x2000059c
 80021ac:	20000650 	.word	0x20000650
 80021b0:	20000a2c 	.word	0x20000a2c
 80021b4:	200007b8 	.word	0x200007b8
 80021b8:	20000704 	.word	0x20000704
 80021bc:	20000f04 	.word	0x20000f04
 80021c0:	2000088c 	.word	0x2000088c
 80021c4:	20000f90 	.word	0x20000f90
	    	  SoftReset = 0;
	      }
//	      int pos = (int)registerFrame[17].U16;
	  	  if(HAL_GetTick() >= timemodbus){ // heartbeat
 80021c8:	f002 fa50 	bl	800466c <HAL_GetTick>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2200      	movs	r2, #0
 80021d0:	461c      	mov	r4, r3
 80021d2:	4615      	mov	r5, r2
 80021d4:	4bb1      	ldr	r3, [pc, #708]	; (800249c <main+0x3a8>)
 80021d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021da:	4294      	cmp	r4, r2
 80021dc:	eb75 0303 	sbcs.w	r3, r5, r3
 80021e0:	d337      	bcc.n	8002252 <main+0x15e>
	  		  	  timemodbus = HAL_GetTick() + 100;
 80021e2:	f002 fa43 	bl	800466c <HAL_GetTick>
 80021e6:	4603      	mov	r3, r0
 80021e8:	3364      	adds	r3, #100	; 0x64
 80021ea:	2200      	movs	r2, #0
 80021ec:	469a      	mov	sl, r3
 80021ee:	4693      	mov	fp, r2
 80021f0:	4baa      	ldr	r3, [pc, #680]	; (800249c <main+0x3a8>)
 80021f2:	e9c3 ab00 	strd	sl, fp, [r3]
	  			  registerFrame[0].U16 = 22881;
 80021f6:	4baa      	ldr	r3, [pc, #680]	; (80024a0 <main+0x3ac>)
 80021f8:	f645 1261 	movw	r2, #22881	; 0x5961
 80021fc:	801a      	strh	r2, [r3, #0]
	  			  registerFrame[17].U16 = (int)(ReadDegree-350)*10;
 80021fe:	4ba9      	ldr	r3, [pc, #676]	; (80024a4 <main+0x3b0>)
 8002200:	edd3 7a00 	vldr	s15, [r3]
 8002204:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 80024a8 <main+0x3b4>
 8002208:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800220c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002210:	ee17 3a90 	vmov	r3, s15
 8002214:	b29b      	uxth	r3, r3
 8002216:	461a      	mov	r2, r3
 8002218:	0092      	lsls	r2, r2, #2
 800221a:	4413      	add	r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	4b9f      	ldr	r3, [pc, #636]	; (80024a0 <main+0x3ac>)
 8002222:	845a      	strh	r2, [r3, #34]	; 0x22
	  			  registerFrame[18].U16 = abs(speed);
 8002224:	4ba1      	ldr	r3, [pc, #644]	; (80024ac <main+0x3b8>)
 8002226:	edd3 7a00 	vldr	s15, [r3]
 800222a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800222e:	ee17 3a90 	vmov	r3, s15
 8002232:	2b00      	cmp	r3, #0
 8002234:	bfb8      	it	lt
 8002236:	425b      	neglt	r3, r3
 8002238:	b29a      	uxth	r2, r3
 800223a:	4b99      	ldr	r3, [pc, #612]	; (80024a0 <main+0x3ac>)
 800223c:	849a      	strh	r2, [r3, #36]	; 0x24
	  			  registerFrame[19].U16 = acceleration;
 800223e:	4b9c      	ldr	r3, [pc, #624]	; (80024b0 <main+0x3bc>)
 8002240:	edd3 7a00 	vldr	s15, [r3]
 8002244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002248:	ee17 3a90 	vmov	r3, s15
 800224c:	b29a      	uxth	r2, r3
 800224e:	4b94      	ldr	r3, [pc, #592]	; (80024a0 <main+0x3ac>)
 8002250:	84da      	strh	r2, [r3, #38]	; 0x26
	  		}
		  if(HAL_GetTick() >= timestampTrajact){
 8002252:	f002 fa0b 	bl	800466c <HAL_GetTick>
 8002256:	ee07 0a90 	vmov	s15, r0
 800225a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800225e:	4b95      	ldr	r3, [pc, #596]	; (80024b4 <main+0x3c0>)
 8002260:	edd3 7a00 	vldr	s15, [r3]
 8002264:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226c:	db48      	blt.n	8002300 <main+0x20c>
			  timestampTrajact = HAL_GetTick() + 1;
 800226e:	f002 f9fd 	bl	800466c <HAL_GetTick>
 8002272:	4603      	mov	r3, r0
 8002274:	3301      	adds	r3, #1
 8002276:	ee07 3a90 	vmov	s15, r3
 800227a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800227e:	4b8d      	ldr	r3, [pc, #564]	; (80024b4 <main+0x3c0>)
 8002280:	edc3 7a00 	vstr	s15, [r3]
			  if(path == 0)indexposition = 0;
 8002284:	4b8c      	ldr	r3, [pc, #560]	; (80024b8 <main+0x3c4>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d102      	bne.n	8002292 <main+0x19e>
 800228c:	4b8b      	ldr	r3, [pc, #556]	; (80024bc <main+0x3c8>)
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
			  if(indexposition < (0.5*2000)-1 && path == 1){
 8002292:	4b8a      	ldr	r3, [pc, #552]	; (80024bc <main+0x3c8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f240 32e6 	movw	r2, #998	; 0x3e6
 800229a:	4293      	cmp	r3, r2
 800229c:	dc30      	bgt.n	8002300 <main+0x20c>
 800229e:	4b86      	ldr	r3, [pc, #536]	; (80024b8 <main+0x3c4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d12c      	bne.n	8002300 <main+0x20c>
			  SetDegree = positionTraject;
 80022a6:	4b86      	ldr	r3, [pc, #536]	; (80024c0 <main+0x3cc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a86      	ldr	r2, [pc, #536]	; (80024c4 <main+0x3d0>)
 80022ac:	6013      	str	r3, [r2, #0]
			  SetVelocity = velocityTraject;
 80022ae:	4b86      	ldr	r3, [pc, #536]	; (80024c8 <main+0x3d4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a86      	ldr	r2, [pc, #536]	; (80024cc <main+0x3d8>)
 80022b4:	6013      	str	r3, [r2, #0]
			  indexposition += 1;
 80022b6:	4b81      	ldr	r3, [pc, #516]	; (80024bc <main+0x3c8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	3301      	adds	r3, #1
 80022bc:	4a7f      	ldr	r2, [pc, #508]	; (80024bc <main+0x3c8>)
 80022be:	6013      	str	r3, [r2, #0]
		      positionTraject = q_positionN->data[indexposition];
 80022c0:	4b83      	ldr	r3, [pc, #524]	; (80024d0 <main+0x3dc>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	4b7d      	ldr	r3, [pc, #500]	; (80024bc <main+0x3c8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4413      	add	r3, r2
 80022ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d2:	4610      	mov	r0, r2
 80022d4:	4619      	mov	r1, r3
 80022d6:	f7fe fc33 	bl	8000b40 <__aeabi_d2f>
 80022da:	4603      	mov	r3, r0
 80022dc:	4a78      	ldr	r2, [pc, #480]	; (80024c0 <main+0x3cc>)
 80022de:	6013      	str	r3, [r2, #0]
		      velocityTraject = q_velocityN->data[indexposition];
 80022e0:	4b7c      	ldr	r3, [pc, #496]	; (80024d4 <main+0x3e0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	4b75      	ldr	r3, [pc, #468]	; (80024bc <main+0x3c8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f2:	4610      	mov	r0, r2
 80022f4:	4619      	mov	r1, r3
 80022f6:	f7fe fc23 	bl	8000b40 <__aeabi_d2f>
 80022fa:	4603      	mov	r3, r0
 80022fc:	4a72      	ldr	r2, [pc, #456]	; (80024c8 <main+0x3d4>)
 80022fe:	6013      	str	r3, [r2, #0]
			  }
		  }
	      if (HAL_GetTick() >= timestamp) {
 8002300:	f002 f9b4 	bl	800466c <HAL_GetTick>
 8002304:	4603      	mov	r3, r0
 8002306:	2200      	movs	r2, #0
 8002308:	4698      	mov	r8, r3
 800230a:	4691      	mov	r9, r2
 800230c:	4b72      	ldr	r3, [pc, #456]	; (80024d8 <main+0x3e4>)
 800230e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002312:	4590      	cmp	r8, r2
 8002314:	eb79 0303 	sbcs.w	r3, r9, r3
 8002318:	f4ff af2c 	bcc.w	8002174 <main+0x80>
			  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2); // Read QEI
 800231c:	4b6f      	ldr	r3, [pc, #444]	; (80024dc <main+0x3e8>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	4a6f      	ldr	r2, [pc, #444]	; (80024e0 <main+0x3ec>)
 8002324:	6013      	str	r3, [r2, #0]
			  ReadDegree = (QEIReadRaw / 8192.0 * 360)*160/360; // pulse to degree
 8002326:	4b6e      	ldr	r3, [pc, #440]	; (80024e0 <main+0x3ec>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe f896 	bl	800045c <__aeabi_ui2d>
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	4b6b      	ldr	r3, [pc, #428]	; (80024e4 <main+0x3f0>)
 8002336:	f7fe fa35 	bl	80007a4 <__aeabi_ddiv>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4610      	mov	r0, r2
 8002340:	4619      	mov	r1, r3
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	4b68      	ldr	r3, [pc, #416]	; (80024e8 <main+0x3f4>)
 8002348:	f7fe f902 	bl	8000550 <__aeabi_dmul>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4610      	mov	r0, r2
 8002352:	4619      	mov	r1, r3
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	4b64      	ldr	r3, [pc, #400]	; (80024ec <main+0x3f8>)
 800235a:	f7fe f8f9 	bl	8000550 <__aeabi_dmul>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4610      	mov	r0, r2
 8002364:	4619      	mov	r1, r3
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	4b5f      	ldr	r3, [pc, #380]	; (80024e8 <main+0x3f4>)
 800236c:	f7fe fa1a 	bl	80007a4 <__aeabi_ddiv>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4610      	mov	r0, r2
 8002376:	4619      	mov	r1, r3
 8002378:	f7fe fbe2 	bl	8000b40 <__aeabi_d2f>
 800237c:	4603      	mov	r3, r0
 800237e:	4a49      	ldr	r2, [pc, #292]	; (80024a4 <main+0x3b0>)
 8002380:	6013      	str	r3, [r2, #0]
			  error = SetDegree - ReadDegree;
 8002382:	4b50      	ldr	r3, [pc, #320]	; (80024c4 <main+0x3d0>)
 8002384:	ed93 7a00 	vldr	s14, [r3]
 8002388:	4b46      	ldr	r3, [pc, #280]	; (80024a4 <main+0x3b0>)
 800238a:	edd3 7a00 	vldr	s15, [r3]
 800238e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002392:	4b57      	ldr	r3, [pc, #348]	; (80024f0 <main+0x3fc>)
 8002394:	edc3 7a00 	vstr	s15, [r3]
			  velocity();
 8002398:	f001 fc10 	bl	8003bbc <velocity>
			  accelerate();
 800239c:	f001 fc76 	bl	8003c8c <accelerate>
			  speed = ((QEIData.QEIVelocity / 8192.0)*360.0)*160/360;
 80023a0:	4b54      	ldr	r3, [pc, #336]	; (80024f4 <main+0x400>)
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f87b 	bl	80004a0 <__aeabi_f2d>
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	4b4d      	ldr	r3, [pc, #308]	; (80024e4 <main+0x3f0>)
 80023b0:	f7fe f9f8 	bl	80007a4 <__aeabi_ddiv>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4610      	mov	r0, r2
 80023ba:	4619      	mov	r1, r3
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	4b49      	ldr	r3, [pc, #292]	; (80024e8 <main+0x3f4>)
 80023c2:	f7fe f8c5 	bl	8000550 <__aeabi_dmul>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4610      	mov	r0, r2
 80023cc:	4619      	mov	r1, r3
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	4b46      	ldr	r3, [pc, #280]	; (80024ec <main+0x3f8>)
 80023d4:	f7fe f8bc 	bl	8000550 <__aeabi_dmul>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	4b40      	ldr	r3, [pc, #256]	; (80024e8 <main+0x3f4>)
 80023e6:	f7fe f9dd 	bl	80007a4 <__aeabi_ddiv>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	f7fe fba5 	bl	8000b40 <__aeabi_d2f>
 80023f6:	4603      	mov	r3, r0
 80023f8:	4a2c      	ldr	r2, [pc, #176]	; (80024ac <main+0x3b8>)
 80023fa:	6013      	str	r3, [r2, #0]
			  acceleration = QEIAcc.QEIVelocity;
 80023fc:	4b3e      	ldr	r3, [pc, #248]	; (80024f8 <main+0x404>)
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	4a2b      	ldr	r2, [pc, #172]	; (80024b0 <main+0x3bc>)
 8002402:	6013      	str	r3, [r2, #0]
			  DegreeFeedback = control_interrupt(); // PID function
 8002404:	f001 fada 	bl	80039bc <control_interrupt>
 8002408:	eef0 7a40 	vmov.f32	s15, s0
 800240c:	4b3b      	ldr	r3, [pc, #236]	; (80024fc <main+0x408>)
 800240e:	edc3 7a00 	vstr	s15, [r3]
	          timestamp = HAL_GetTick() + 10;
 8002412:	f002 f92b 	bl	800466c <HAL_GetTick>
 8002416:	4603      	mov	r3, r0
 8002418:	330a      	adds	r3, #10
 800241a:	2200      	movs	r2, #0
 800241c:	603b      	str	r3, [r7, #0]
 800241e:	607a      	str	r2, [r7, #4]
 8002420:	4b2d      	ldr	r3, [pc, #180]	; (80024d8 <main+0x3e4>)
 8002422:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002426:	e9c3 1200 	strd	r1, r2, [r3]
	          if (Joystick_Control == 1) {
 800242a:	4b35      	ldr	r3, [pc, #212]	; (8002500 <main+0x40c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d170      	bne.n	8002514 <main+0x420>
	        	  DegreeFeedback = 0;
 8002432:	4b32      	ldr	r3, [pc, #200]	; (80024fc <main+0x408>)
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
	        	  s = 0;
 800243a:	4b32      	ldr	r3, [pc, #200]	; (8002504 <main+0x410>)
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
	        	  error = 0;
 8002442:	4b2b      	ldr	r3, [pc, #172]	; (80024f0 <main+0x3fc>)
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
	              if (Joystick_position[0] >= 3150) {
 800244a:	4b2f      	ldr	r3, [pc, #188]	; (8002508 <main+0x414>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f640 424d 	movw	r2, #3149	; 0xc4d
 8002452:	4293      	cmp	r3, r2
 8002454:	d909      	bls.n	800246a <main+0x376>
	                  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 20);
 8002456:	4b2d      	ldr	r3, [pc, #180]	; (800250c <main+0x418>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2214      	movs	r2, #20
 800245c:	635a      	str	r2, [r3, #52]	; 0x34
	                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800245e:	2201      	movs	r2, #1
 8002460:	2180      	movs	r1, #128	; 0x80
 8002462:	482b      	ldr	r0, [pc, #172]	; (8002510 <main+0x41c>)
 8002464:	f003 fbcc 	bl	8005c00 <HAL_GPIO_WritePin>
 8002468:	e684      	b.n	8002174 <main+0x80>
	              }
	              else if (Joystick_position[0] <= 100) {
 800246a:	4b27      	ldr	r3, [pc, #156]	; (8002508 <main+0x414>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2b64      	cmp	r3, #100	; 0x64
 8002470:	d809      	bhi.n	8002486 <main+0x392>
	                  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 20);
 8002472:	4b26      	ldr	r3, [pc, #152]	; (800250c <main+0x418>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2214      	movs	r2, #20
 8002478:	635a      	str	r2, [r3, #52]	; 0x34
	                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800247a:	2200      	movs	r2, #0
 800247c:	2180      	movs	r1, #128	; 0x80
 800247e:	4824      	ldr	r0, [pc, #144]	; (8002510 <main+0x41c>)
 8002480:	f003 fbbe 	bl	8005c00 <HAL_GPIO_WritePin>
 8002484:	e676      	b.n	8002174 <main+0x80>
	              }
	              else{
	            	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8002486:	4b21      	ldr	r3, [pc, #132]	; (800250c <main+0x418>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2200      	movs	r2, #0
 800248c:	635a      	str	r2, [r3, #52]	; 0x34
	            	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800248e:	2200      	movs	r2, #0
 8002490:	2180      	movs	r1, #128	; 0x80
 8002492:	481f      	ldr	r0, [pc, #124]	; (8002510 <main+0x41c>)
 8002494:	f003 fbb4 	bl	8005c00 <HAL_GPIO_WritePin>
 8002498:	e66c      	b.n	8002174 <main+0x80>
 800249a:	bf00      	nop
 800249c:	20001040 	.word	0x20001040
 80024a0:	20000f04 	.word	0x20000f04
 80024a4:	20001030 	.word	0x20001030
 80024a8:	43af0000 	.word	0x43af0000
 80024ac:	20000f94 	.word	0x20000f94
 80024b0:	20000f98 	.word	0x20000f98
 80024b4:	20001048 	.word	0x20001048
 80024b8:	20000f9c 	.word	0x20000f9c
 80024bc:	20000ffc 	.word	0x20000ffc
 80024c0:	20000fa4 	.word	0x20000fa4
 80024c4:	20001034 	.word	0x20001034
 80024c8:	20000fa8 	.word	0x20000fa8
 80024cc:	2000102c 	.word	0x2000102c
 80024d0:	20000ff4 	.word	0x20000ff4
 80024d4:	20000ff0 	.word	0x20000ff0
 80024d8:	20001050 	.word	0x20001050
 80024dc:	20000434 	.word	0x20000434
 80024e0:	20000fa0 	.word	0x20000fa0
 80024e4:	40c00000 	.word	0x40c00000
 80024e8:	40768000 	.word	0x40768000
 80024ec:	40640000 	.word	0x40640000
 80024f0:	2000103c 	.word	0x2000103c
 80024f4:	20000fb8 	.word	0x20000fb8
 80024f8:	20000fd0 	.word	0x20000fd0
 80024fc:	20001038 	.word	0x20001038
 8002500:	20000284 	.word	0x20000284
 8002504:	20001008 	.word	0x20001008
 8002508:	20000fac 	.word	0x20000fac
 800250c:	2000059c 	.word	0x2000059c
 8002510:	40020000 	.word	0x40020000
	              }
	          }
	          else if (Joystick_Control == 0) {
 8002514:	4b4d      	ldr	r3, [pc, #308]	; (800264c <main+0x558>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	f47f ae2b 	bne.w	8002174 <main+0x80>
	              if (SetDegree < 0) {
 800251e:	4b4c      	ldr	r3, [pc, #304]	; (8002650 <main+0x55c>)
 8002520:	edd3 7a00 	vldr	s15, [r3]
 8002524:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252c:	d503      	bpl.n	8002536 <main+0x442>
	                  SetDegree = 0; // minimum value
 800252e:	4b48      	ldr	r3, [pc, #288]	; (8002650 <main+0x55c>)
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
	              }
	              if (SetDegree > 700) {
 8002536:	4b46      	ldr	r3, [pc, #280]	; (8002650 <main+0x55c>)
 8002538:	edd3 7a00 	vldr	s15, [r3]
 800253c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002654 <main+0x560>
 8002540:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002548:	dd02      	ble.n	8002550 <main+0x45c>
	                  SetDegree = 700; // maximum value
 800254a:	4b41      	ldr	r3, [pc, #260]	; (8002650 <main+0x55c>)
 800254c:	4a42      	ldr	r2, [pc, #264]	; (8002658 <main+0x564>)
 800254e:	601a      	str	r2, [r3, #0]
	              }

	              if (error > 0) { // setpoint > read_encoder
 8002550:	4b42      	ldr	r3, [pc, #264]	; (800265c <main+0x568>)
 8002552:	edd3 7a00 	vldr	s15, [r3]
 8002556:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800255a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255e:	dd35      	ble.n	80025cc <main+0x4d8>
	            	  SetVelocity = abs(SetVelocity);
 8002560:	4b3f      	ldr	r3, [pc, #252]	; (8002660 <main+0x56c>)
 8002562:	edd3 7a00 	vldr	s15, [r3]
 8002566:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800256a:	ee17 3a90 	vmov	r3, s15
 800256e:	2b00      	cmp	r3, #0
 8002570:	bfb8      	it	lt
 8002572:	425b      	neglt	r3, r3
 8002574:	ee07 3a90 	vmov	s15, r3
 8002578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800257c:	4b38      	ldr	r3, [pc, #224]	; (8002660 <main+0x56c>)
 800257e:	edc3 7a00 	vstr	s15, [r3]
	                  if (error < 1) {
 8002582:	4b36      	ldr	r3, [pc, #216]	; (800265c <main+0x568>)
 8002584:	edd3 7a00 	vldr	s15, [r3]
 8002588:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800258c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002594:	d50b      	bpl.n	80025ae <main+0x4ba>
	                      DegreeFeedback = 0; // Limit Position
 8002596:	4b33      	ldr	r3, [pc, #204]	; (8002664 <main+0x570>)
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
	                      s = 0;
 800259e:	4b32      	ldr	r3, [pc, #200]	; (8002668 <main+0x574>)
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
	                      s2 = 0;
 80025a6:	4b31      	ldr	r3, [pc, #196]	; (800266c <main+0x578>)
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
	                  }
	                  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, DegreeFeedback);
 80025ae:	4b2d      	ldr	r3, [pc, #180]	; (8002664 <main+0x570>)
 80025b0:	edd3 7a00 	vldr	s15, [r3]
 80025b4:	4b2e      	ldr	r3, [pc, #184]	; (8002670 <main+0x57c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025bc:	ee17 2a90 	vmov	r2, s15
 80025c0:	635a      	str	r2, [r3, #52]	; 0x34
	                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80025c2:	2200      	movs	r2, #0
 80025c4:	2180      	movs	r1, #128	; 0x80
 80025c6:	482b      	ldr	r0, [pc, #172]	; (8002674 <main+0x580>)
 80025c8:	f003 fb1a 	bl	8005c00 <HAL_GPIO_WritePin>
	              }
	              if (error < 0 ) { // setpoint < read_encoder
 80025cc:	4b23      	ldr	r3, [pc, #140]	; (800265c <main+0x568>)
 80025ce:	edd3 7a00 	vldr	s15, [r3]
 80025d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025da:	d536      	bpl.n	800264a <main+0x556>
	            	  if(SetVelocity > 0)SetVelocity = -SetVelocity;
 80025dc:	4b20      	ldr	r3, [pc, #128]	; (8002660 <main+0x56c>)
 80025de:	edd3 7a00 	vldr	s15, [r3]
 80025e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ea:	dd07      	ble.n	80025fc <main+0x508>
 80025ec:	4b1c      	ldr	r3, [pc, #112]	; (8002660 <main+0x56c>)
 80025ee:	edd3 7a00 	vldr	s15, [r3]
 80025f2:	eef1 7a67 	vneg.f32	s15, s15
 80025f6:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <main+0x56c>)
 80025f8:	edc3 7a00 	vstr	s15, [r3]
	                  if (error * -1 < 1) {
 80025fc:	4b17      	ldr	r3, [pc, #92]	; (800265c <main+0x568>)
 80025fe:	edd3 7a00 	vldr	s15, [r3]
 8002602:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002606:	eef4 7ac7 	vcmpe.f32	s15, s14
 800260a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260e:	dd0b      	ble.n	8002628 <main+0x534>
	                      DegreeFeedback = 0; // Limit Position
 8002610:	4b14      	ldr	r3, [pc, #80]	; (8002664 <main+0x570>)
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
	                      s = 0;
 8002618:	4b13      	ldr	r3, [pc, #76]	; (8002668 <main+0x574>)
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
	                      s2 = 0;
 8002620:	4b12      	ldr	r3, [pc, #72]	; (800266c <main+0x578>)
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
	                  }
	                  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, DegreeFeedback * -1);
 8002628:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <main+0x570>)
 800262a:	edd3 7a00 	vldr	s15, [r3]
 800262e:	eef1 7a67 	vneg.f32	s15, s15
 8002632:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <main+0x57c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800263a:	ee17 2a90 	vmov	r2, s15
 800263e:	635a      	str	r2, [r3, #52]	; 0x34
	                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8002640:	2201      	movs	r2, #1
 8002642:	2180      	movs	r1, #128	; 0x80
 8002644:	480b      	ldr	r0, [pc, #44]	; (8002674 <main+0x580>)
 8002646:	f003 fadb 	bl	8005c00 <HAL_GPIO_WritePin>
  {
 800264a:	e593      	b.n	8002174 <main+0x80>
 800264c:	20000284 	.word	0x20000284
 8002650:	20001034 	.word	0x20001034
 8002654:	442f0000 	.word	0x442f0000
 8002658:	442f0000 	.word	0x442f0000
 800265c:	2000103c 	.word	0x2000103c
 8002660:	2000102c 	.word	0x2000102c
 8002664:	20001038 	.word	0x20001038
 8002668:	20001008 	.word	0x20001008
 800266c:	20001014 	.word	0x20001014
 8002670:	2000059c 	.word	0x2000059c
 8002674:	40020000 	.word	0x40020000

08002678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b094      	sub	sp, #80	; 0x50
 800267c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800267e:	f107 0320 	add.w	r3, r7, #32
 8002682:	2230      	movs	r2, #48	; 0x30
 8002684:	2100      	movs	r1, #0
 8002686:	4618      	mov	r0, r3
 8002688:	f007 f8c4 	bl	8009814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800268c:	f107 030c 	add.w	r3, r7, #12
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800269c:	2300      	movs	r3, #0
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	4b27      	ldr	r3, [pc, #156]	; (8002740 <SystemClock_Config+0xc8>)
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	4a26      	ldr	r2, [pc, #152]	; (8002740 <SystemClock_Config+0xc8>)
 80026a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026aa:	6413      	str	r3, [r2, #64]	; 0x40
 80026ac:	4b24      	ldr	r3, [pc, #144]	; (8002740 <SystemClock_Config+0xc8>)
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026b8:	2300      	movs	r3, #0
 80026ba:	607b      	str	r3, [r7, #4]
 80026bc:	4b21      	ldr	r3, [pc, #132]	; (8002744 <SystemClock_Config+0xcc>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a20      	ldr	r2, [pc, #128]	; (8002744 <SystemClock_Config+0xcc>)
 80026c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	4b1e      	ldr	r3, [pc, #120]	; (8002744 <SystemClock_Config+0xcc>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026d0:	607b      	str	r3, [r7, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026d4:	2302      	movs	r3, #2
 80026d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026d8:	2301      	movs	r3, #1
 80026da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026dc:	2310      	movs	r3, #16
 80026de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026e0:	2302      	movs	r3, #2
 80026e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026e4:	2300      	movs	r3, #0
 80026e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80026e8:	2308      	movs	r3, #8
 80026ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80026ec:	2364      	movs	r3, #100	; 0x64
 80026ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026f0:	2302      	movs	r3, #2
 80026f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80026f4:	2304      	movs	r3, #4
 80026f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026f8:	f107 0320 	add.w	r3, r7, #32
 80026fc:	4618      	mov	r0, r3
 80026fe:	f003 fc01 	bl	8005f04 <HAL_RCC_OscConfig>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002708:	f001 fba0 	bl	8003e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800270c:	230f      	movs	r3, #15
 800270e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002710:	2302      	movs	r3, #2
 8002712:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800271c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002722:	f107 030c 	add.w	r3, r7, #12
 8002726:	2103      	movs	r1, #3
 8002728:	4618      	mov	r0, r3
 800272a:	f003 fe63 	bl	80063f4 <HAL_RCC_ClockConfig>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002734:	f001 fb8a 	bl	8003e4c <Error_Handler>
  }
}
 8002738:	bf00      	nop
 800273a:	3750      	adds	r7, #80	; 0x50
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40023800 	.word	0x40023800
 8002744:	40007000 	.word	0x40007000

08002748 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800274e:	463b      	mov	r3, r7
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800275a:	4b28      	ldr	r3, [pc, #160]	; (80027fc <MX_ADC1_Init+0xb4>)
 800275c:	4a28      	ldr	r2, [pc, #160]	; (8002800 <MX_ADC1_Init+0xb8>)
 800275e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002760:	4b26      	ldr	r3, [pc, #152]	; (80027fc <MX_ADC1_Init+0xb4>)
 8002762:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002766:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002768:	4b24      	ldr	r3, [pc, #144]	; (80027fc <MX_ADC1_Init+0xb4>)
 800276a:	2200      	movs	r2, #0
 800276c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800276e:	4b23      	ldr	r3, [pc, #140]	; (80027fc <MX_ADC1_Init+0xb4>)
 8002770:	2201      	movs	r2, #1
 8002772:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002774:	4b21      	ldr	r3, [pc, #132]	; (80027fc <MX_ADC1_Init+0xb4>)
 8002776:	2201      	movs	r2, #1
 8002778:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800277a:	4b20      	ldr	r3, [pc, #128]	; (80027fc <MX_ADC1_Init+0xb4>)
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002782:	4b1e      	ldr	r3, [pc, #120]	; (80027fc <MX_ADC1_Init+0xb4>)
 8002784:	2200      	movs	r2, #0
 8002786:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002788:	4b1c      	ldr	r3, [pc, #112]	; (80027fc <MX_ADC1_Init+0xb4>)
 800278a:	4a1e      	ldr	r2, [pc, #120]	; (8002804 <MX_ADC1_Init+0xbc>)
 800278c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800278e:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <MX_ADC1_Init+0xb4>)
 8002790:	2200      	movs	r2, #0
 8002792:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002794:	4b19      	ldr	r3, [pc, #100]	; (80027fc <MX_ADC1_Init+0xb4>)
 8002796:	2202      	movs	r2, #2
 8002798:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800279a:	4b18      	ldr	r3, [pc, #96]	; (80027fc <MX_ADC1_Init+0xb4>)
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80027a2:	4b16      	ldr	r3, [pc, #88]	; (80027fc <MX_ADC1_Init+0xb4>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027a8:	4814      	ldr	r0, [pc, #80]	; (80027fc <MX_ADC1_Init+0xb4>)
 80027aa:	f001 ff6b 	bl	8004684 <HAL_ADC_Init>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80027b4:	f001 fb4a 	bl	8003e4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80027b8:	2308      	movs	r3, #8
 80027ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80027bc:	2301      	movs	r3, #1
 80027be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80027c0:	2303      	movs	r3, #3
 80027c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027c4:	463b      	mov	r3, r7
 80027c6:	4619      	mov	r1, r3
 80027c8:	480c      	ldr	r0, [pc, #48]	; (80027fc <MX_ADC1_Init+0xb4>)
 80027ca:	f002 f8ad 	bl	8004928 <HAL_ADC_ConfigChannel>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80027d4:	f001 fb3a 	bl	8003e4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80027d8:	2304      	movs	r3, #4
 80027da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80027dc:	2302      	movs	r3, #2
 80027de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027e0:	463b      	mov	r3, r7
 80027e2:	4619      	mov	r1, r3
 80027e4:	4805      	ldr	r0, [pc, #20]	; (80027fc <MX_ADC1_Init+0xb4>)
 80027e6:	f002 f89f 	bl	8004928 <HAL_ADC_ConfigChannel>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80027f0:	f001 fb2c 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027f4:	bf00      	nop
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000338 	.word	0x20000338
 8002800:	40012000 	.word	0x40012000
 8002804:	0f000001 	.word	0x0f000001

08002808 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800280c:	4b12      	ldr	r3, [pc, #72]	; (8002858 <MX_I2C1_Init+0x50>)
 800280e:	4a13      	ldr	r2, [pc, #76]	; (800285c <MX_I2C1_Init+0x54>)
 8002810:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002812:	4b11      	ldr	r3, [pc, #68]	; (8002858 <MX_I2C1_Init+0x50>)
 8002814:	4a12      	ldr	r2, [pc, #72]	; (8002860 <MX_I2C1_Init+0x58>)
 8002816:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002818:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <MX_I2C1_Init+0x50>)
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800281e:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <MX_I2C1_Init+0x50>)
 8002820:	2200      	movs	r2, #0
 8002822:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002824:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <MX_I2C1_Init+0x50>)
 8002826:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800282a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800282c:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <MX_I2C1_Init+0x50>)
 800282e:	2200      	movs	r2, #0
 8002830:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <MX_I2C1_Init+0x50>)
 8002834:	2200      	movs	r2, #0
 8002836:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002838:	4b07      	ldr	r3, [pc, #28]	; (8002858 <MX_I2C1_Init+0x50>)
 800283a:	2200      	movs	r2, #0
 800283c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <MX_I2C1_Init+0x50>)
 8002840:	2200      	movs	r2, #0
 8002842:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002844:	4804      	ldr	r0, [pc, #16]	; (8002858 <MX_I2C1_Init+0x50>)
 8002846:	f003 fa19 	bl	8005c7c <HAL_I2C_Init>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002850:	f001 fafc 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}
 8002858:	200003e0 	.word	0x200003e0
 800285c:	40005400 	.word	0x40005400
 8002860:	000186a0 	.word	0x000186a0

08002864 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08c      	sub	sp, #48	; 0x30
 8002868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800286a:	f107 030c 	add.w	r3, r7, #12
 800286e:	2224      	movs	r2, #36	; 0x24
 8002870:	2100      	movs	r1, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f006 ffce 	bl	8009814 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002878:	1d3b      	adds	r3, r7, #4
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002880:	4b21      	ldr	r3, [pc, #132]	; (8002908 <MX_TIM2_Init+0xa4>)
 8002882:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002886:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002888:	4b1f      	ldr	r3, [pc, #124]	; (8002908 <MX_TIM2_Init+0xa4>)
 800288a:	2200      	movs	r2, #0
 800288c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800288e:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <MX_TIM2_Init+0xa4>)
 8002890:	2200      	movs	r2, #0
 8002892:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = QEI_PERIOD-1;
 8002894:	4b1c      	ldr	r3, [pc, #112]	; (8002908 <MX_TIM2_Init+0xa4>)
 8002896:	f649 72ff 	movw	r2, #40959	; 0x9fff
 800289a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800289c:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <MX_TIM2_Init+0xa4>)
 800289e:	2200      	movs	r2, #0
 80028a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028a2:	4b19      	ldr	r3, [pc, #100]	; (8002908 <MX_TIM2_Init+0xa4>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80028a8:	2303      	movs	r3, #3
 80028aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80028ac:	2300      	movs	r3, #0
 80028ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80028b0:	2301      	movs	r3, #1
 80028b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80028b4:	2300      	movs	r3, #0
 80028b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80028bc:	2300      	movs	r3, #0
 80028be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80028c0:	2301      	movs	r3, #1
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80028c4:	2300      	movs	r3, #0
 80028c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80028cc:	f107 030c 	add.w	r3, r7, #12
 80028d0:	4619      	mov	r1, r3
 80028d2:	480d      	ldr	r0, [pc, #52]	; (8002908 <MX_TIM2_Init+0xa4>)
 80028d4:	f004 fb10 	bl	8006ef8 <HAL_TIM_Encoder_Init>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80028de:	f001 fab5 	bl	8003e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028ea:	1d3b      	adds	r3, r7, #4
 80028ec:	4619      	mov	r1, r3
 80028ee:	4806      	ldr	r0, [pc, #24]	; (8002908 <MX_TIM2_Init+0xa4>)
 80028f0:	f005 fc1a 	bl	8008128 <HAL_TIMEx_MasterConfigSynchronization>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80028fa:	f001 faa7 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028fe:	bf00      	nop
 8002900:	3730      	adds	r7, #48	; 0x30
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000434 	.word	0x20000434

0800290c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002912:	f107 0308 	add.w	r3, r7, #8
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	609a      	str	r2, [r3, #8]
 800291e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002920:	463b      	mov	r3, r7
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002928:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <MX_TIM3_Init+0x94>)
 800292a:	4a1e      	ldr	r2, [pc, #120]	; (80029a4 <MX_TIM3_Init+0x98>)
 800292c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800292e:	4b1c      	ldr	r3, [pc, #112]	; (80029a0 <MX_TIM3_Init+0x94>)
 8002930:	2200      	movs	r2, #0
 8002932:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002934:	4b1a      	ldr	r3, [pc, #104]	; (80029a0 <MX_TIM3_Init+0x94>)
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800293a:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <MX_TIM3_Init+0x94>)
 800293c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002940:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002942:	4b17      	ldr	r3, [pc, #92]	; (80029a0 <MX_TIM3_Init+0x94>)
 8002944:	2200      	movs	r2, #0
 8002946:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002948:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <MX_TIM3_Init+0x94>)
 800294a:	2200      	movs	r2, #0
 800294c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800294e:	4814      	ldr	r0, [pc, #80]	; (80029a0 <MX_TIM3_Init+0x94>)
 8002950:	f003 ff70 	bl	8006834 <HAL_TIM_Base_Init>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800295a:	f001 fa77 	bl	8003e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800295e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002962:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002964:	f107 0308 	add.w	r3, r7, #8
 8002968:	4619      	mov	r1, r3
 800296a:	480d      	ldr	r0, [pc, #52]	; (80029a0 <MX_TIM3_Init+0x94>)
 800296c:	f004 fe4c 	bl	8007608 <HAL_TIM_ConfigClockSource>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002976:	f001 fa69 	bl	8003e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800297a:	2300      	movs	r3, #0
 800297c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800297e:	2300      	movs	r3, #0
 8002980:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002982:	463b      	mov	r3, r7
 8002984:	4619      	mov	r1, r3
 8002986:	4806      	ldr	r0, [pc, #24]	; (80029a0 <MX_TIM3_Init+0x94>)
 8002988:	f005 fbce 	bl	8008128 <HAL_TIMEx_MasterConfigSynchronization>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002992:	f001 fa5b 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002996:	bf00      	nop
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	200004e8 	.word	0x200004e8
 80029a4:	40000400 	.word	0x40000400

080029a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08e      	sub	sp, #56	; 0x38
 80029ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	605a      	str	r2, [r3, #4]
 80029b8:	609a      	str	r2, [r3, #8]
 80029ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029bc:	f107 0320 	add.w	r3, r7, #32
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029c6:	1d3b      	adds	r3, r7, #4
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	611a      	str	r2, [r3, #16]
 80029d4:	615a      	str	r2, [r3, #20]
 80029d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029d8:	4b2c      	ldr	r3, [pc, #176]	; (8002a8c <MX_TIM4_Init+0xe4>)
 80029da:	4a2d      	ldr	r2, [pc, #180]	; (8002a90 <MX_TIM4_Init+0xe8>)
 80029dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 49;
 80029de:	4b2b      	ldr	r3, [pc, #172]	; (8002a8c <MX_TIM4_Init+0xe4>)
 80029e0:	2231      	movs	r2, #49	; 0x31
 80029e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e4:	4b29      	ldr	r3, [pc, #164]	; (8002a8c <MX_TIM4_Init+0xe4>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80029ea:	4b28      	ldr	r3, [pc, #160]	; (8002a8c <MX_TIM4_Init+0xe4>)
 80029ec:	2263      	movs	r2, #99	; 0x63
 80029ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029f0:	4b26      	ldr	r3, [pc, #152]	; (8002a8c <MX_TIM4_Init+0xe4>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029f6:	4b25      	ldr	r3, [pc, #148]	; (8002a8c <MX_TIM4_Init+0xe4>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80029fc:	4823      	ldr	r0, [pc, #140]	; (8002a8c <MX_TIM4_Init+0xe4>)
 80029fe:	f003 ff19 	bl	8006834 <HAL_TIM_Base_Init>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002a08:	f001 fa20 	bl	8003e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a16:	4619      	mov	r1, r3
 8002a18:	481c      	ldr	r0, [pc, #112]	; (8002a8c <MX_TIM4_Init+0xe4>)
 8002a1a:	f004 fdf5 	bl	8007608 <HAL_TIM_ConfigClockSource>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002a24:	f001 fa12 	bl	8003e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002a28:	4818      	ldr	r0, [pc, #96]	; (8002a8c <MX_TIM4_Init+0xe4>)
 8002a2a:	f004 f881 	bl	8006b30 <HAL_TIM_PWM_Init>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002a34:	f001 fa0a 	bl	8003e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a40:	f107 0320 	add.w	r3, r7, #32
 8002a44:	4619      	mov	r1, r3
 8002a46:	4811      	ldr	r0, [pc, #68]	; (8002a8c <MX_TIM4_Init+0xe4>)
 8002a48:	f005 fb6e 	bl	8008128 <HAL_TIMEx_MasterConfigSynchronization>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8002a52:	f001 f9fb 	bl	8003e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a56:	2360      	movs	r3, #96	; 0x60
 8002a58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a66:	1d3b      	adds	r3, r7, #4
 8002a68:	2200      	movs	r2, #0
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4807      	ldr	r0, [pc, #28]	; (8002a8c <MX_TIM4_Init+0xe4>)
 8002a6e:	f004 fd09 	bl	8007484 <HAL_TIM_PWM_ConfigChannel>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002a78:	f001 f9e8 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002a7c:	4803      	ldr	r0, [pc, #12]	; (8002a8c <MX_TIM4_Init+0xe4>)
 8002a7e:	f001 fbf3 	bl	8004268 <HAL_TIM_MspPostInit>

}
 8002a82:	bf00      	nop
 8002a84:	3738      	adds	r7, #56	; 0x38
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	2000059c 	.word	0x2000059c
 8002a90:	40000800 	.word	0x40000800

08002a94 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a9a:	f107 0308 	add.w	r3, r7, #8
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	609a      	str	r2, [r3, #8]
 8002aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa8:	463b      	mov	r3, r7
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <MX_TIM5_Init+0x94>)
 8002ab2:	4a1e      	ldr	r2, [pc, #120]	; (8002b2c <MX_TIM5_Init+0x98>)
 8002ab4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8002ab6:	4b1c      	ldr	r3, [pc, #112]	; (8002b28 <MX_TIM5_Init+0x94>)
 8002ab8:	2253      	movs	r2, #83	; 0x53
 8002aba:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002abc:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <MX_TIM5_Init+0x94>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002ac2:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <MX_TIM5_Init+0x94>)
 8002ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aca:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <MX_TIM5_Init+0x94>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ad0:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <MX_TIM5_Init+0x94>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002ad6:	4814      	ldr	r0, [pc, #80]	; (8002b28 <MX_TIM5_Init+0x94>)
 8002ad8:	f003 feac 	bl	8006834 <HAL_TIM_Base_Init>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002ae2:	f001 f9b3 	bl	8003e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ae6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002aec:	f107 0308 	add.w	r3, r7, #8
 8002af0:	4619      	mov	r1, r3
 8002af2:	480d      	ldr	r0, [pc, #52]	; (8002b28 <MX_TIM5_Init+0x94>)
 8002af4:	f004 fd88 	bl	8007608 <HAL_TIM_ConfigClockSource>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002afe:	f001 f9a5 	bl	8003e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b02:	2300      	movs	r3, #0
 8002b04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b0a:	463b      	mov	r3, r7
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4806      	ldr	r0, [pc, #24]	; (8002b28 <MX_TIM5_Init+0x94>)
 8002b10:	f005 fb0a 	bl	8008128 <HAL_TIMEx_MasterConfigSynchronization>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002b1a:	f001 f997 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002b1e:	bf00      	nop
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000650 	.word	0x20000650
 8002b2c:	40000c00 	.word	0x40000c00

08002b30 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b36:	1d3b      	adds	r3, r7, #4
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	611a      	str	r2, [r3, #16]
 8002b44:	615a      	str	r2, [r3, #20]
 8002b46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002b48:	4b21      	ldr	r3, [pc, #132]	; (8002bd0 <MX_TIM11_Init+0xa0>)
 8002b4a:	4a22      	ldr	r2, [pc, #136]	; (8002bd4 <MX_TIM11_Init+0xa4>)
 8002b4c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8002b4e:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <MX_TIM11_Init+0xa0>)
 8002b50:	2263      	movs	r2, #99	; 0x63
 8002b52:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b54:	4b1e      	ldr	r3, [pc, #120]	; (8002bd0 <MX_TIM11_Init+0xa0>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8002b5a:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <MX_TIM11_Init+0xa0>)
 8002b5c:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8002b60:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b62:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <MX_TIM11_Init+0xa0>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b68:	4b19      	ldr	r3, [pc, #100]	; (8002bd0 <MX_TIM11_Init+0xa0>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002b6e:	4818      	ldr	r0, [pc, #96]	; (8002bd0 <MX_TIM11_Init+0xa0>)
 8002b70:	f003 fe60 	bl	8006834 <HAL_TIM_Base_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002b7a:	f001 f967 	bl	8003e4c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8002b7e:	4814      	ldr	r0, [pc, #80]	; (8002bd0 <MX_TIM11_Init+0xa0>)
 8002b80:	f003 ff70 	bl	8006a64 <HAL_TIM_OC_Init>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002b8a:	f001 f95f 	bl	8003e4c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 8002b8e:	2108      	movs	r1, #8
 8002b90:	480f      	ldr	r0, [pc, #60]	; (8002bd0 <MX_TIM11_Init+0xa0>)
 8002b92:	f004 f8e3 	bl	8006d5c <HAL_TIM_OnePulse_Init>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8002b9c:	f001 f956 	bl	8003e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002ba0:	2310      	movs	r3, #16
 8002ba2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8002ba4:	f240 5399 	movw	r3, #1433	; 0x599
 8002ba8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bb2:	1d3b      	adds	r3, r7, #4
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4805      	ldr	r0, [pc, #20]	; (8002bd0 <MX_TIM11_Init+0xa0>)
 8002bba:	f004 fc07 	bl	80073cc <HAL_TIM_OC_ConfigChannel>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8002bc4:	f001 f942 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002bc8:	bf00      	nop
 8002bca:	3720      	adds	r7, #32
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	20000704 	.word	0x20000704
 8002bd4:	40014800 	.word	0x40014800

08002bd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bdc:	4b12      	ldr	r3, [pc, #72]	; (8002c28 <MX_USART2_UART_Init+0x50>)
 8002bde:	4a13      	ldr	r2, [pc, #76]	; (8002c2c <MX_USART2_UART_Init+0x54>)
 8002be0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002be2:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <MX_USART2_UART_Init+0x50>)
 8002be4:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002be8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002bea:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <MX_USART2_UART_Init+0x50>)
 8002bec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bf0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bf2:	4b0d      	ldr	r3, [pc, #52]	; (8002c28 <MX_USART2_UART_Init+0x50>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002bf8:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <MX_USART2_UART_Init+0x50>)
 8002bfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c00:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <MX_USART2_UART_Init+0x50>)
 8002c02:	220c      	movs	r2, #12
 8002c04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c06:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <MX_USART2_UART_Init+0x50>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c0c:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <MX_USART2_UART_Init+0x50>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c12:	4805      	ldr	r0, [pc, #20]	; (8002c28 <MX_USART2_UART_Init+0x50>)
 8002c14:	f005 fb14 	bl	8008240 <HAL_UART_Init>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8002c1e:	f001 f915 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	200007b8 	.word	0x200007b8
 8002c2c:	40004400 	.word	0x40004400

08002c30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	607b      	str	r3, [r7, #4]
 8002c3a:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <MX_DMA_Init+0x68>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4a16      	ldr	r2, [pc, #88]	; (8002c98 <MX_DMA_Init+0x68>)
 8002c40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c44:	6313      	str	r3, [r2, #48]	; 0x30
 8002c46:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <MX_DMA_Init+0x68>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4e:	607b      	str	r3, [r7, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	603b      	str	r3, [r7, #0]
 8002c56:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <MX_DMA_Init+0x68>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	4a0f      	ldr	r2, [pc, #60]	; (8002c98 <MX_DMA_Init+0x68>)
 8002c5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c60:	6313      	str	r3, [r2, #48]	; 0x30
 8002c62:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <MX_DMA_Init+0x68>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2100      	movs	r1, #0
 8002c72:	2011      	movs	r0, #17
 8002c74:	f002 f9e3 	bl	800503e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002c78:	2011      	movs	r0, #17
 8002c7a:	f002 f9fc 	bl	8005076 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2100      	movs	r1, #0
 8002c82:	2038      	movs	r0, #56	; 0x38
 8002c84:	f002 f9db 	bl	800503e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002c88:	2038      	movs	r0, #56	; 0x38
 8002c8a:	f002 f9f4 	bl	8005076 <HAL_NVIC_EnableIRQ>

}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40023800 	.word	0x40023800

08002c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08a      	sub	sp, #40	; 0x28
 8002ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca2:	f107 0314 	add.w	r3, r7, #20
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	605a      	str	r2, [r3, #4]
 8002cac:	609a      	str	r2, [r3, #8]
 8002cae:	60da      	str	r2, [r3, #12]
 8002cb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	4b37      	ldr	r3, [pc, #220]	; (8002d94 <MX_GPIO_Init+0xf8>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	4a36      	ldr	r2, [pc, #216]	; (8002d94 <MX_GPIO_Init+0xf8>)
 8002cbc:	f043 0304 	orr.w	r3, r3, #4
 8002cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc2:	4b34      	ldr	r3, [pc, #208]	; (8002d94 <MX_GPIO_Init+0xf8>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	4b30      	ldr	r3, [pc, #192]	; (8002d94 <MX_GPIO_Init+0xf8>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	4a2f      	ldr	r2, [pc, #188]	; (8002d94 <MX_GPIO_Init+0xf8>)
 8002cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cde:	4b2d      	ldr	r3, [pc, #180]	; (8002d94 <MX_GPIO_Init+0xf8>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	4b29      	ldr	r3, [pc, #164]	; (8002d94 <MX_GPIO_Init+0xf8>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	4a28      	ldr	r2, [pc, #160]	; (8002d94 <MX_GPIO_Init+0xf8>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfa:	4b26      	ldr	r3, [pc, #152]	; (8002d94 <MX_GPIO_Init+0xf8>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	60bb      	str	r3, [r7, #8]
 8002d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	4b22      	ldr	r3, [pc, #136]	; (8002d94 <MX_GPIO_Init+0xf8>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	4a21      	ldr	r2, [pc, #132]	; (8002d94 <MX_GPIO_Init+0xf8>)
 8002d10:	f043 0302 	orr.w	r3, r3, #2
 8002d14:	6313      	str	r3, [r2, #48]	; 0x30
 8002d16:	4b1f      	ldr	r3, [pc, #124]	; (8002d94 <MX_GPIO_Init+0xf8>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	607b      	str	r3, [r7, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIR_Pin, GPIO_PIN_RESET);
 8002d22:	2200      	movs	r2, #0
 8002d24:	21a0      	movs	r1, #160	; 0xa0
 8002d26:	481c      	ldr	r0, [pc, #112]	; (8002d98 <MX_GPIO_Init+0xfc>)
 8002d28:	f002 ff6a 	bl	8005c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002d2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d32:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d3c:	f107 0314 	add.w	r3, r7, #20
 8002d40:	4619      	mov	r1, r3
 8002d42:	4816      	ldr	r0, [pc, #88]	; (8002d9c <MX_GPIO_Init+0x100>)
 8002d44:	f002 fdc0 	bl	80058c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor_Home_Pin Sensor_1_Pin Sensor_2_Pin Set_Tray_Pin
                           Clear_Tray_Pin */
  GPIO_InitStruct.Pin = Sensor_Home_Pin|Sensor_1_Pin|Sensor_2_Pin|Set_Tray_Pin
 8002d48:	2337      	movs	r3, #55	; 0x37
 8002d4a:	617b      	str	r3, [r7, #20]
                          |Clear_Tray_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d54:	f107 0314 	add.w	r3, r7, #20
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4810      	ldr	r0, [pc, #64]	; (8002d9c <MX_GPIO_Init+0x100>)
 8002d5c:	f002 fdb4 	bl	80058c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DIR_Pin;
 8002d60:	23a0      	movs	r3, #160	; 0xa0
 8002d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d64:	2301      	movs	r3, #1
 8002d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	4619      	mov	r1, r3
 8002d76:	4808      	ldr	r0, [pc, #32]	; (8002d98 <MX_GPIO_Init+0xfc>)
 8002d78:	f002 fda6 	bl	80058c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2100      	movs	r1, #0
 8002d80:	2028      	movs	r0, #40	; 0x28
 8002d82:	f002 f95c 	bl	800503e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d86:	2028      	movs	r0, #40	; 0x28
 8002d88:	f002 f975 	bl	8005076 <HAL_NVIC_EnableIRQ>

}
 8002d8c:	bf00      	nop
 8002d8e:	3728      	adds	r7, #40	; 0x28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40023800 	.word	0x40023800
 8002d98:	40020000 	.word	0x40020000
 8002d9c:	40020800 	.word	0x40020800

08002da0 <transformRectangleAndPoints>:
		  				registerFrame[10].U16 = 0;
		  				Mobus = Initial;
		  			}
	  	}
}
void transformRectangleAndPoints() {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08a      	sub	sp, #40	; 0x28
 8002da4:	af00      	add	r7, sp, #0

	translation[0] = bottom_left_jog[0];
 8002da6:	4bac      	ldr	r3, [pc, #688]	; (8003058 <transformRectangleAndPoints+0x2b8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4aac      	ldr	r2, [pc, #688]	; (800305c <transformRectangleAndPoints+0x2bc>)
 8002dac:	6013      	str	r3, [r2, #0]
	translation[1] = bottom_left_jog[1];
 8002dae:	4baa      	ldr	r3, [pc, #680]	; (8003058 <transformRectangleAndPoints+0x2b8>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4aaa      	ldr	r2, [pc, #680]	; (800305c <transformRectangleAndPoints+0x2bc>)
 8002db4:	6053      	str	r3, [r2, #4]

	bottom_right_jog[0] = bottom_right_jog[0]-translation[0];
 8002db6:	4baa      	ldr	r3, [pc, #680]	; (8003060 <transformRectangleAndPoints+0x2c0>)
 8002db8:	ed93 7a00 	vldr	s14, [r3]
 8002dbc:	4ba7      	ldr	r3, [pc, #668]	; (800305c <transformRectangleAndPoints+0x2bc>)
 8002dbe:	edd3 7a00 	vldr	s15, [r3]
 8002dc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dc6:	4ba6      	ldr	r3, [pc, #664]	; (8003060 <transformRectangleAndPoints+0x2c0>)
 8002dc8:	edc3 7a00 	vstr	s15, [r3]
	bottom_right_jog[1] = bottom_right_jog[1]-translation[1];
 8002dcc:	4ba4      	ldr	r3, [pc, #656]	; (8003060 <transformRectangleAndPoints+0x2c0>)
 8002dce:	ed93 7a01 	vldr	s14, [r3, #4]
 8002dd2:	4ba2      	ldr	r3, [pc, #648]	; (800305c <transformRectangleAndPoints+0x2bc>)
 8002dd4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002dd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ddc:	4ba0      	ldr	r3, [pc, #640]	; (8003060 <transformRectangleAndPoints+0x2c0>)
 8002dde:	edc3 7a01 	vstr	s15, [r3, #4]

	dot_product = 600*bottom_right_jog[0]+bottom_right_jog[1]*0;
 8002de2:	4b9f      	ldr	r3, [pc, #636]	; (8003060 <transformRectangleAndPoints+0x2c0>)
 8002de4:	edd3 7a00 	vldr	s15, [r3]
 8002de8:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8003064 <transformRectangleAndPoints+0x2c4>
 8002dec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002df0:	4b9b      	ldr	r3, [pc, #620]	; (8003060 <transformRectangleAndPoints+0x2c0>)
 8002df2:	edd3 7a01 	vldr	s15, [r3, #4]
 8002df6:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8003068 <transformRectangleAndPoints+0x2c8>
 8002dfa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e02:	4b9a      	ldr	r3, [pc, #616]	; (800306c <transformRectangleAndPoints+0x2cc>)
 8002e04:	edc3 7a00 	vstr	s15, [r3]
	in_theta = dot_product/vectorsize;
 8002e08:	4b98      	ldr	r3, [pc, #608]	; (800306c <transformRectangleAndPoints+0x2cc>)
 8002e0a:	edd3 6a00 	vldr	s13, [r3]
 8002e0e:	4b98      	ldr	r3, [pc, #608]	; (8003070 <transformRectangleAndPoints+0x2d0>)
 8002e10:	ed93 7a00 	vldr	s14, [r3]
 8002e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e18:	4b96      	ldr	r3, [pc, #600]	; (8003074 <transformRectangleAndPoints+0x2d4>)
 8002e1a:	edc3 7a00 	vstr	s15, [r3]
	theta = - acos(in_theta);
 8002e1e:	4b95      	ldr	r3, [pc, #596]	; (8003074 <transformRectangleAndPoints+0x2d4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fd fb3c 	bl	80004a0 <__aeabi_f2d>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	ec43 2b10 	vmov	d0, r2, r3
 8002e30:	f006 ff3a 	bl	8009ca8 <acos>
 8002e34:	ec53 2b10 	vmov	r2, r3, d0
 8002e38:	4610      	mov	r0, r2
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	f7fd fe80 	bl	8000b40 <__aeabi_d2f>
 8002e40:	4603      	mov	r3, r0
 8002e42:	ee07 3a90 	vmov	s15, r3
 8002e46:	eef1 7a67 	vneg.f32	s15, s15
 8002e4a:	4b8b      	ldr	r3, [pc, #556]	; (8003078 <transformRectangleAndPoints+0x2d8>)
 8002e4c:	edc3 7a00 	vstr	s15, [r3]
	//theta = acos(in_theta)* 57.257795;

    T_rotation[0][0] = cos(theta);
 8002e50:	4b89      	ldr	r3, [pc, #548]	; (8003078 <transformRectangleAndPoints+0x2d8>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fd fb23 	bl	80004a0 <__aeabi_f2d>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	ec43 2b10 	vmov	d0, r2, r3
 8002e62:	f006 fdf5 	bl	8009a50 <cos>
 8002e66:	ec53 2b10 	vmov	r2, r3, d0
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	f7fd fe67 	bl	8000b40 <__aeabi_d2f>
 8002e72:	4603      	mov	r3, r0
 8002e74:	4a81      	ldr	r2, [pc, #516]	; (800307c <transformRectangleAndPoints+0x2dc>)
 8002e76:	6013      	str	r3, [r2, #0]
    T_rotation[0][1] = -sin(theta);
 8002e78:	4b7f      	ldr	r3, [pc, #508]	; (8003078 <transformRectangleAndPoints+0x2d8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fd fb0f 	bl	80004a0 <__aeabi_f2d>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	ec43 2b10 	vmov	d0, r2, r3
 8002e8a:	f006 feb5 	bl	8009bf8 <sin>
 8002e8e:	ec53 2b10 	vmov	r2, r3, d0
 8002e92:	4610      	mov	r0, r2
 8002e94:	4619      	mov	r1, r3
 8002e96:	f7fd fe53 	bl	8000b40 <__aeabi_d2f>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	ee07 3a90 	vmov	s15, r3
 8002ea0:	eef1 7a67 	vneg.f32	s15, s15
 8002ea4:	4b75      	ldr	r3, [pc, #468]	; (800307c <transformRectangleAndPoints+0x2dc>)
 8002ea6:	edc3 7a01 	vstr	s15, [r3, #4]
    T_rotation[1][0] = sin(theta);
 8002eaa:	4b73      	ldr	r3, [pc, #460]	; (8003078 <transformRectangleAndPoints+0x2d8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd faf6 	bl	80004a0 <__aeabi_f2d>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	ec43 2b10 	vmov	d0, r2, r3
 8002ebc:	f006 fe9c 	bl	8009bf8 <sin>
 8002ec0:	ec53 2b10 	vmov	r2, r3, d0
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f7fd fe3a 	bl	8000b40 <__aeabi_d2f>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	4a6b      	ldr	r2, [pc, #428]	; (800307c <transformRectangleAndPoints+0x2dc>)
 8002ed0:	6093      	str	r3, [r2, #8]
    T_rotation[1][1] = cos(theta);
 8002ed2:	4b69      	ldr	r3, [pc, #420]	; (8003078 <transformRectangleAndPoints+0x2d8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fd fae2 	bl	80004a0 <__aeabi_f2d>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	ec43 2b10 	vmov	d0, r2, r3
 8002ee4:	f006 fdb4 	bl	8009a50 <cos>
 8002ee8:	ec53 2b10 	vmov	r2, r3, d0
 8002eec:	4610      	mov	r0, r2
 8002eee:	4619      	mov	r1, r3
 8002ef0:	f7fd fe26 	bl	8000b40 <__aeabi_d2f>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	4a61      	ldr	r2, [pc, #388]	; (800307c <transformRectangleAndPoints+0x2dc>)
 8002ef8:	60d3      	str	r3, [r2, #12]

    T[0][0] = T_rotation[0][0];
 8002efa:	4b60      	ldr	r3, [pc, #384]	; (800307c <transformRectangleAndPoints+0x2dc>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a60      	ldr	r2, [pc, #384]	; (8003080 <transformRectangleAndPoints+0x2e0>)
 8002f00:	6013      	str	r3, [r2, #0]
    T[0][1] = T_rotation[0][1];
 8002f02:	4b5e      	ldr	r3, [pc, #376]	; (800307c <transformRectangleAndPoints+0x2dc>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	4a5e      	ldr	r2, [pc, #376]	; (8003080 <transformRectangleAndPoints+0x2e0>)
 8002f08:	6053      	str	r3, [r2, #4]
    T[0][2] = translation[0];
 8002f0a:	4b54      	ldr	r3, [pc, #336]	; (800305c <transformRectangleAndPoints+0x2bc>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a5c      	ldr	r2, [pc, #368]	; (8003080 <transformRectangleAndPoints+0x2e0>)
 8002f10:	6093      	str	r3, [r2, #8]
    T[1][0] = T_rotation[1][0];
 8002f12:	4b5a      	ldr	r3, [pc, #360]	; (800307c <transformRectangleAndPoints+0x2dc>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	4a5a      	ldr	r2, [pc, #360]	; (8003080 <transformRectangleAndPoints+0x2e0>)
 8002f18:	60d3      	str	r3, [r2, #12]
    T[1][1] = T_rotation[1][1];
 8002f1a:	4b58      	ldr	r3, [pc, #352]	; (800307c <transformRectangleAndPoints+0x2dc>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	4a58      	ldr	r2, [pc, #352]	; (8003080 <transformRectangleAndPoints+0x2e0>)
 8002f20:	6113      	str	r3, [r2, #16]
    T[1][2] = translation[1];
 8002f22:	4b4e      	ldr	r3, [pc, #312]	; (800305c <transformRectangleAndPoints+0x2bc>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	4a56      	ldr	r2, [pc, #344]	; (8003080 <transformRectangleAndPoints+0x2e0>)
 8002f28:	6153      	str	r3, [r2, #20]
    T[2][0] = 0;
 8002f2a:	4b55      	ldr	r3, [pc, #340]	; (8003080 <transformRectangleAndPoints+0x2e0>)
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	619a      	str	r2, [r3, #24]
    T[2][1] = 0;
 8002f32:	4b53      	ldr	r3, [pc, #332]	; (8003080 <transformRectangleAndPoints+0x2e0>)
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	61da      	str	r2, [r3, #28]
    T[2][2] = 1;
 8002f3a:	4b51      	ldr	r3, [pc, #324]	; (8003080 <transformRectangleAndPoints+0x2e0>)
 8002f3c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f40:	621a      	str	r2, [r3, #32]

    // Transform the rectangle
    for (int i = 0; i < 5; i++) {
 8002f42:	2300      	movs	r3, #0
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
 8002f46:	e029      	b.n	8002f9c <transformRectangleAndPoints+0x1fc>
        homogeneousRectangle[i][0] = rectangle[i][0];
 8002f48:	4a4e      	ldr	r2, [pc, #312]	; (8003084 <transformRectangleAndPoints+0x2e4>)
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	4413      	add	r3, r2
 8002f50:	6819      	ldr	r1, [r3, #0]
 8002f52:	484d      	ldr	r0, [pc, #308]	; (8003088 <transformRectangleAndPoints+0x2e8>)
 8002f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f56:	4613      	mov	r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4403      	add	r3, r0
 8002f60:	6019      	str	r1, [r3, #0]
        homogeneousRectangle[i][1] = rectangle[i][1];
 8002f62:	4a48      	ldr	r2, [pc, #288]	; (8003084 <transformRectangleAndPoints+0x2e4>)
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	6819      	ldr	r1, [r3, #0]
 8002f6e:	4846      	ldr	r0, [pc, #280]	; (8003088 <transformRectangleAndPoints+0x2e8>)
 8002f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f72:	4613      	mov	r3, r2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4403      	add	r3, r0
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	6019      	str	r1, [r3, #0]
        homogeneousRectangle[i][2] = 1;
 8002f80:	4941      	ldr	r1, [pc, #260]	; (8003088 <transformRectangleAndPoints+0x2e8>)
 8002f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f84:	4613      	mov	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	3308      	adds	r3, #8
 8002f90:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f94:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 5; i++) {
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	3301      	adds	r3, #1
 8002f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	ddd2      	ble.n	8002f48 <transformRectangleAndPoints+0x1a8>
    }

    for (int i = 0; i < 5; i++) {
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	623b      	str	r3, [r7, #32]
 8002fa6:	e050      	b.n	800304a <transformRectangleAndPoints+0x2aa>
        for (int j = 0; j < 3; j++) {
 8002fa8:	2300      	movs	r3, #0
 8002faa:	61fb      	str	r3, [r7, #28]
 8002fac:	e047      	b.n	800303e <transformRectangleAndPoints+0x29e>
            transformedRectangle[i][j] = 0;
 8002fae:	4937      	ldr	r1, [pc, #220]	; (800308c <transformRectangleAndPoints+0x2ec>)
 8002fb0:	6a3a      	ldr	r2, [r7, #32]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	4413      	add	r3, r2
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	4413      	add	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	e032      	b.n	8003032 <transformRectangleAndPoints+0x292>
                transformedRectangle[i][j] += homogeneousRectangle[i][k] * T[k][j];
 8002fcc:	492f      	ldr	r1, [pc, #188]	; (800308c <transformRectangleAndPoints+0x2ec>)
 8002fce:	6a3a      	ldr	r2, [r7, #32]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	4413      	add	r3, r2
 8002fd6:	69fa      	ldr	r2, [r7, #28]
 8002fd8:	4413      	add	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	ed93 7a00 	vldr	s14, [r3]
 8002fe2:	4929      	ldr	r1, [pc, #164]	; (8003088 <transformRectangleAndPoints+0x2e8>)
 8002fe4:	6a3a      	ldr	r2, [r7, #32]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	4413      	add	r3, r2
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	edd3 6a00 	vldr	s13, [r3]
 8002ff8:	4921      	ldr	r1, [pc, #132]	; (8003080 <transformRectangleAndPoints+0x2e0>)
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	4413      	add	r3, r2
 8003002:	69fa      	ldr	r2, [r7, #28]
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	edd3 7a00 	vldr	s15, [r3]
 800300e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003016:	491d      	ldr	r1, [pc, #116]	; (800308c <transformRectangleAndPoints+0x2ec>)
 8003018:	6a3a      	ldr	r2, [r7, #32]
 800301a:	4613      	mov	r3, r2
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	4413      	add	r3, r2
 8003020:	69fa      	ldr	r2, [r7, #28]
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	440b      	add	r3, r1
 8003028:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	3301      	adds	r3, #1
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	2b02      	cmp	r3, #2
 8003036:	ddc9      	ble.n	8002fcc <transformRectangleAndPoints+0x22c>
        for (int j = 0; j < 3; j++) {
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	3301      	adds	r3, #1
 800303c:	61fb      	str	r3, [r7, #28]
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	2b02      	cmp	r3, #2
 8003042:	ddb4      	ble.n	8002fae <transformRectangleAndPoints+0x20e>
    for (int i = 0; i < 5; i++) {
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	3301      	adds	r3, #1
 8003048:	623b      	str	r3, [r7, #32]
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	2b04      	cmp	r3, #4
 800304e:	ddab      	ble.n	8002fa8 <transformRectangleAndPoints+0x208>
            }
        }
    }

    // Transform the points
    for (int i = 0; i < 9; i++) {
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	e046      	b.n	80030e4 <transformRectangleAndPoints+0x344>
 8003056:	bf00      	nop
 8003058:	20000270 	.word	0x20000270
 800305c:	200008a0 	.word	0x200008a0
 8003060:	20000278 	.word	0x20000278
 8003064:	44160000 	.word	0x44160000
 8003068:	00000000 	.word	0x00000000
 800306c:	20000a1c 	.word	0x20000a1c
 8003070:	20000280 	.word	0x20000280
 8003074:	20000a24 	.word	0x20000a24
 8003078:	20000a20 	.word	0x20000a20
 800307c:	20000890 	.word	0x20000890
 8003080:	200008a8 	.word	0x200008a8
 8003084:	20000200 	.word	0x20000200
 8003088:	200008cc 	.word	0x200008cc
 800308c:	20000908 	.word	0x20000908
        homogeneousPoints[i][0] = points[i][0];
 8003090:	4a7d      	ldr	r2, [pc, #500]	; (8003288 <transformRectangleAndPoints+0x4e8>)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4413      	add	r3, r2
 8003098:	6819      	ldr	r1, [r3, #0]
 800309a:	487c      	ldr	r0, [pc, #496]	; (800328c <transformRectangleAndPoints+0x4ec>)
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4613      	mov	r3, r2
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	4413      	add	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4403      	add	r3, r0
 80030a8:	6019      	str	r1, [r3, #0]
        homogeneousPoints[i][1] = points[i][1];
 80030aa:	4a77      	ldr	r2, [pc, #476]	; (8003288 <transformRectangleAndPoints+0x4e8>)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	3304      	adds	r3, #4
 80030b4:	6819      	ldr	r1, [r3, #0]
 80030b6:	4875      	ldr	r0, [pc, #468]	; (800328c <transformRectangleAndPoints+0x4ec>)
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	4613      	mov	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4413      	add	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4403      	add	r3, r0
 80030c4:	3304      	adds	r3, #4
 80030c6:	6019      	str	r1, [r3, #0]
        homogeneousPoints[i][2] = 1;
 80030c8:	4970      	ldr	r1, [pc, #448]	; (800328c <transformRectangleAndPoints+0x4ec>)
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4613      	mov	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4413      	add	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	3308      	adds	r3, #8
 80030d8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80030dc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 9; i++) {
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	3301      	adds	r3, #1
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	ddd2      	ble.n	8003090 <transformRectangleAndPoints+0x2f0>
    }

    for (int i = 0; i < 9; i++) {
 80030ea:	2300      	movs	r3, #0
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	e050      	b.n	8003192 <transformRectangleAndPoints+0x3f2>
        for (int j = 0; j < 3; j++) {
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	e047      	b.n	8003186 <transformRectangleAndPoints+0x3e6>
            transformedPoints[i][j] = 0;
 80030f6:	4966      	ldr	r1, [pc, #408]	; (8003290 <transformRectangleAndPoints+0x4f0>)
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	4613      	mov	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4413      	add	r3, r2
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 800310e:	2300      	movs	r3, #0
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	e032      	b.n	800317a <transformRectangleAndPoints+0x3da>


                transformedPoints[i][j] += homogeneousPoints[i][k] * T[k][j];
 8003114:	495e      	ldr	r1, [pc, #376]	; (8003290 <transformRectangleAndPoints+0x4f0>)
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4613      	mov	r3, r2
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4413      	add	r3, r2
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	ed93 7a00 	vldr	s14, [r3]
 800312a:	4958      	ldr	r1, [pc, #352]	; (800328c <transformRectangleAndPoints+0x4ec>)
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4613      	mov	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	4413      	add	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	edd3 6a00 	vldr	s13, [r3]
 8003140:	4954      	ldr	r1, [pc, #336]	; (8003294 <transformRectangleAndPoints+0x4f4>)
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	4613      	mov	r3, r2
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	4413      	add	r3, r2
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4413      	add	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	edd3 7a00 	vldr	s15, [r3]
 8003156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800315a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315e:	494c      	ldr	r1, [pc, #304]	; (8003290 <transformRectangleAndPoints+0x4f0>)
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4613      	mov	r3, r2
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	4413      	add	r3, r2
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	3301      	adds	r3, #1
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b02      	cmp	r3, #2
 800317e:	ddc9      	ble.n	8003114 <transformRectangleAndPoints+0x374>
        for (int j = 0; j < 3; j++) {
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	3301      	adds	r3, #1
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b02      	cmp	r3, #2
 800318a:	ddb4      	ble.n	80030f6 <transformRectangleAndPoints+0x356>
    for (int i = 0; i < 9; i++) {
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	3301      	adds	r3, #1
 8003190:	613b      	str	r3, [r7, #16]
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	2b08      	cmp	r3, #8
 8003196:	ddab      	ble.n	80030f0 <transformRectangleAndPoints+0x350>
            }
        }
    }

    // Translation points
    for (int i = 0; i < 9; i++) {
 8003198:	2300      	movs	r3, #0
 800319a:	607b      	str	r3, [r7, #4]
 800319c:	e032      	b.n	8003204 <transformRectangleAndPoints+0x464>
    	transformedPoints[i][0] = transformedPoints[i][0] + translation[0];
 800319e:	493c      	ldr	r1, [pc, #240]	; (8003290 <transformRectangleAndPoints+0x4f0>)
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4413      	add	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	ed93 7a00 	vldr	s14, [r3]
 80031b0:	4b39      	ldr	r3, [pc, #228]	; (8003298 <transformRectangleAndPoints+0x4f8>)
 80031b2:	edd3 7a00 	vldr	s15, [r3]
 80031b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ba:	4935      	ldr	r1, [pc, #212]	; (8003290 <transformRectangleAndPoints+0x4f0>)
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	edc3 7a00 	vstr	s15, [r3]
    	transformedPoints[i][1] =  transformedPoints[i][1] + translation[1] ;
 80031cc:	4930      	ldr	r1, [pc, #192]	; (8003290 <transformRectangleAndPoints+0x4f0>)
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	3304      	adds	r3, #4
 80031dc:	ed93 7a00 	vldr	s14, [r3]
 80031e0:	4b2d      	ldr	r3, [pc, #180]	; (8003298 <transformRectangleAndPoints+0x4f8>)
 80031e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80031e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ea:	4929      	ldr	r1, [pc, #164]	; (8003290 <transformRectangleAndPoints+0x4f0>)
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	3304      	adds	r3, #4
 80031fa:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 9; i++) {
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3301      	adds	r3, #1
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b08      	cmp	r3, #8
 8003208:	ddc9      	ble.n	800319e <transformRectangleAndPoints+0x3fe>

    }

    // Translation rectangle
    for (int i = 0; i < 5; i++) {
 800320a:	2300      	movs	r3, #0
 800320c:	603b      	str	r3, [r7, #0]
 800320e:	e032      	b.n	8003276 <transformRectangleAndPoints+0x4d6>
    	transformedRectangle[i][0] = transformedRectangle[i][0] + + translation[0];
 8003210:	4922      	ldr	r1, [pc, #136]	; (800329c <transformRectangleAndPoints+0x4fc>)
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	4613      	mov	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	ed93 7a00 	vldr	s14, [r3]
 8003222:	4b1d      	ldr	r3, [pc, #116]	; (8003298 <transformRectangleAndPoints+0x4f8>)
 8003224:	edd3 7a00 	vldr	s15, [r3]
 8003228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800322c:	491b      	ldr	r1, [pc, #108]	; (800329c <transformRectangleAndPoints+0x4fc>)
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	4613      	mov	r3, r2
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	4413      	add	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	edc3 7a00 	vstr	s15, [r3]
    	transformedRectangle[i][1] =  transformedRectangle[i][1] + translation[1] ;
 800323e:	4917      	ldr	r1, [pc, #92]	; (800329c <transformRectangleAndPoints+0x4fc>)
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	4613      	mov	r3, r2
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	3304      	adds	r3, #4
 800324e:	ed93 7a00 	vldr	s14, [r3]
 8003252:	4b11      	ldr	r3, [pc, #68]	; (8003298 <transformRectangleAndPoints+0x4f8>)
 8003254:	edd3 7a01 	vldr	s15, [r3, #4]
 8003258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800325c:	490f      	ldr	r1, [pc, #60]	; (800329c <transformRectangleAndPoints+0x4fc>)
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	4613      	mov	r3, r2
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	3304      	adds	r3, #4
 800326c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 5; i++) {
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	3301      	adds	r3, #1
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b04      	cmp	r3, #4
 800327a:	ddc9      	ble.n	8003210 <transformRectangleAndPoints+0x470>
    }


}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	3728      	adds	r7, #40	; 0x28
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000228 	.word	0x20000228
 800328c:	20000944 	.word	0x20000944
 8003290:	200009b0 	.word	0x200009b0
 8003294:	200008a8 	.word	0x200008a8
 8003298:	200008a0 	.word	0x200008a0
 800329c:	20000908 	.word	0x20000908

080032a0 <flowmodbus>:
void flowmodbus(){
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
switch (Mobus){
 80032a4:	4bae      	ldr	r3, [pc, #696]	; (8003560 <flowmodbus+0x2c0>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b05      	cmp	r3, #5
 80032aa:	f200 836c 	bhi.w	8003986 <flowmodbus+0x6e6>
 80032ae:	a201      	add	r2, pc, #4	; (adr r2, 80032b4 <flowmodbus+0x14>)
 80032b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b4:	080032cd 	.word	0x080032cd
 80032b8:	08003339 	.word	0x08003339
 80032bc:	08003535 	.word	0x08003535
 80032c0:	0800377f 	.word	0x0800377f
 80032c4:	0800378f 	.word	0x0800378f
 80032c8:	0800397d 	.word	0x0800397d
	case Initial:
		if(registerFrame[1].U16 == 0b00010){ // Set Place
 80032cc:	4ba5      	ldr	r3, [pc, #660]	; (8003564 <flowmodbus+0x2c4>)
 80032ce:	885b      	ldrh	r3, [r3, #2]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d109      	bne.n	80032e8 <flowmodbus+0x48>
			registerFrame[1].U16 = 0; // 0x01 base system reset place tray
 80032d4:	4ba3      	ldr	r3, [pc, #652]	; (8003564 <flowmodbus+0x2c4>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 2; // 0x10 y-axis Set Place
 80032da:	4ba2      	ldr	r3, [pc, #648]	; (8003564 <flowmodbus+0x2c4>)
 80032dc:	2202      	movs	r2, #2
 80032de:	841a      	strh	r2, [r3, #32]
			Mobus = Jogging_Place;
 80032e0:	4b9f      	ldr	r3, [pc, #636]	; (8003560 <flowmodbus+0x2c0>)
 80032e2:	2201      	movs	r2, #1
 80032e4:	701a      	strb	r2, [r3, #0]
		}
		else if(registerFrame[1].U16 == 0b00100){ // Set Home
			registerFrame[1].U16 = 0;
			Mobus = Home;
		}
		break;
 80032e6:	e34d      	b.n	8003984 <flowmodbus+0x6e4>
		else if(registerFrame[1].U16 == 0b00001){ //Set Pick
 80032e8:	4b9e      	ldr	r3, [pc, #632]	; (8003564 <flowmodbus+0x2c4>)
 80032ea:	885b      	ldrh	r3, [r3, #2]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d109      	bne.n	8003304 <flowmodbus+0x64>
			registerFrame[1].U16 = 0; // 0x01 base system reset place tray
 80032f0:	4b9c      	ldr	r3, [pc, #624]	; (8003564 <flowmodbus+0x2c4>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 1; // 0x10 y-axis Set Pick
 80032f6:	4b9b      	ldr	r3, [pc, #620]	; (8003564 <flowmodbus+0x2c4>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	841a      	strh	r2, [r3, #32]
			Mobus = Jogging_Pick;
 80032fc:	4b98      	ldr	r3, [pc, #608]	; (8003560 <flowmodbus+0x2c0>)
 80032fe:	2202      	movs	r2, #2
 8003300:	701a      	strb	r2, [r3, #0]
		break;
 8003302:	e33f      	b.n	8003984 <flowmodbus+0x6e4>
		else if(registerFrame[1].U16 == 0b10000){ // Run point Mode
 8003304:	4b97      	ldr	r3, [pc, #604]	; (8003564 <flowmodbus+0x2c4>)
 8003306:	885b      	ldrh	r3, [r3, #2]
 8003308:	2b10      	cmp	r3, #16
 800330a:	d109      	bne.n	8003320 <flowmodbus+0x80>
			registerFrame[1].U16 = 0; // base system run point mode reset
 800330c:	4b95      	ldr	r3, [pc, #596]	; (8003564 <flowmodbus+0x2c4>)
 800330e:	2200      	movs	r2, #0
 8003310:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 16; // y-axis moving status go point x
 8003312:	4b94      	ldr	r3, [pc, #592]	; (8003564 <flowmodbus+0x2c4>)
 8003314:	2210      	movs	r2, #16
 8003316:	841a      	strh	r2, [r3, #32]
			Mobus = Run_PointMode;
 8003318:	4b91      	ldr	r3, [pc, #580]	; (8003560 <flowmodbus+0x2c0>)
 800331a:	2204      	movs	r2, #4
 800331c:	701a      	strb	r2, [r3, #0]
		break;
 800331e:	e331      	b.n	8003984 <flowmodbus+0x6e4>
		else if(registerFrame[1].U16 == 0b00100){ // Set Home
 8003320:	4b90      	ldr	r3, [pc, #576]	; (8003564 <flowmodbus+0x2c4>)
 8003322:	885b      	ldrh	r3, [r3, #2]
 8003324:	2b04      	cmp	r3, #4
 8003326:	f040 832d 	bne.w	8003984 <flowmodbus+0x6e4>
			registerFrame[1].U16 = 0;
 800332a:	4b8e      	ldr	r3, [pc, #568]	; (8003564 <flowmodbus+0x2c4>)
 800332c:	2200      	movs	r2, #0
 800332e:	805a      	strh	r2, [r3, #2]
			Mobus = Home;
 8003330:	4b8b      	ldr	r3, [pc, #556]	; (8003560 <flowmodbus+0x2c0>)
 8003332:	2203      	movs	r2, #3
 8003334:	701a      	strb	r2, [r3, #0]
		break;
 8003336:	e325      	b.n	8003984 <flowmodbus+0x6e4>
	case Jogging_Place:
		//y-axis jogging
				if (Joystick_position[1] >= 3150) {
 8003338:	4b8b      	ldr	r3, [pc, #556]	; (8003568 <flowmodbus+0x2c8>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f640 424d 	movw	r2, #3149	; 0xc4d
 8003340:	4293      	cmp	r3, r2
 8003342:	d90a      	bls.n	800335a <flowmodbus+0xba>
				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, JoystickSpeed);
 8003344:	4b89      	ldr	r3, [pc, #548]	; (800356c <flowmodbus+0x2cc>)
 8003346:	781a      	ldrb	r2, [r3, #0]
 8003348:	4b89      	ldr	r3, [pc, #548]	; (8003570 <flowmodbus+0x2d0>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	635a      	str	r2, [r3, #52]	; 0x34
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800334e:	2200      	movs	r2, #0
 8003350:	2180      	movs	r1, #128	; 0x80
 8003352:	4888      	ldr	r0, [pc, #544]	; (8003574 <flowmodbus+0x2d4>)
 8003354:	f002 fc54 	bl	8005c00 <HAL_GPIO_WritePin>
 8003358:	e012      	b.n	8003380 <flowmodbus+0xe0>
			  }
			  else if (Joystick_position[1] <= 100) {
 800335a:	4b83      	ldr	r3, [pc, #524]	; (8003568 <flowmodbus+0x2c8>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b64      	cmp	r3, #100	; 0x64
 8003360:	d80a      	bhi.n	8003378 <flowmodbus+0xd8>
				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, JoystickSpeed);
 8003362:	4b82      	ldr	r3, [pc, #520]	; (800356c <flowmodbus+0x2cc>)
 8003364:	781a      	ldrb	r2, [r3, #0]
 8003366:	4b82      	ldr	r3, [pc, #520]	; (8003570 <flowmodbus+0x2d0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	635a      	str	r2, [r3, #52]	; 0x34
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800336c:	2201      	movs	r2, #1
 800336e:	2180      	movs	r1, #128	; 0x80
 8003370:	4880      	ldr	r0, [pc, #512]	; (8003574 <flowmodbus+0x2d4>)
 8003372:	f002 fc45 	bl	8005c00 <HAL_GPIO_WritePin>
 8003376:	e003      	b.n	8003380 <flowmodbus+0xe0>
			  }
			  else{
				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8003378:	4b7d      	ldr	r3, [pc, #500]	; (8003570 <flowmodbus+0x2d0>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2200      	movs	r2, #0
 800337e:	635a      	str	r2, [r3, #52]	; 0x34
			  }
				//x-axis jogging
			  if (Joystick_position[0] >= 3150)
 8003380:	4b79      	ldr	r3, [pc, #484]	; (8003568 <flowmodbus+0x2c8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f640 424d 	movw	r2, #3149	; 0xc4d
 8003388:	4293      	cmp	r3, r2
 800338a:	d904      	bls.n	8003396 <flowmodbus+0xf6>
			  {
				  registerFrame[64].U16 = 8;
 800338c:	4b75      	ldr	r3, [pc, #468]	; (8003564 <flowmodbus+0x2c4>)
 800338e:	2208      	movs	r2, #8
 8003390:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8003394:	e00c      	b.n	80033b0 <flowmodbus+0x110>
			  }
			  else if (Joystick_position[0] <= 100){
 8003396:	4b74      	ldr	r3, [pc, #464]	; (8003568 <flowmodbus+0x2c8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b64      	cmp	r3, #100	; 0x64
 800339c:	d804      	bhi.n	80033a8 <flowmodbus+0x108>
				  registerFrame[64].U16 = 4;
 800339e:	4b71      	ldr	r3, [pc, #452]	; (8003564 <flowmodbus+0x2c4>)
 80033a0:	2204      	movs	r2, #4
 80033a2:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80033a6:	e003      	b.n	80033b0 <flowmodbus+0x110>
			  }
			  else{
				  registerFrame[64].U16 = 0;
 80033a8:	4b6e      	ldr	r3, [pc, #440]	; (8003564 <flowmodbus+0x2c4>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			  }

			  // Set position
			        lastButtonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 80033b0:	2120      	movs	r1, #32
 80033b2:	4871      	ldr	r0, [pc, #452]	; (8003578 <flowmodbus+0x2d8>)
 80033b4:	f002 fc0c 	bl	8005bd0 <HAL_GPIO_ReadPin>
 80033b8:	4603      	mov	r3, r0
 80033ba:	461a      	mov	r2, r3
 80033bc:	4b6f      	ldr	r3, [pc, #444]	; (800357c <flowmodbus+0x2dc>)
 80033be:	701a      	strb	r2, [r3, #0]
			        if (buttonState != lastButtonState) {
 80033c0:	4b6f      	ldr	r3, [pc, #444]	; (8003580 <flowmodbus+0x2e0>)
 80033c2:	781a      	ldrb	r2, [r3, #0]
 80033c4:	4b6d      	ldr	r3, [pc, #436]	; (800357c <flowmodbus+0x2dc>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	f000 80ae 	beq.w	800352a <flowmodbus+0x28a>
			            // Button press is valid, perform desired action
						  if(CheckTray == 0){
 80033ce:	4b6d      	ldr	r3, [pc, #436]	; (8003584 <flowmodbus+0x2e4>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d131      	bne.n	800343a <flowmodbus+0x19a>
							  bottom_left_jog[0] = (int)registerFrame[68].U16/10; // Calculate Point x-axis
 80033d6:	4b63      	ldr	r3, [pc, #396]	; (8003564 <flowmodbus+0x2c4>)
 80033d8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80033dc:	4a6a      	ldr	r2, [pc, #424]	; (8003588 <flowmodbus+0x2e8>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	08db      	lsrs	r3, r3, #3
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033ee:	4b67      	ldr	r3, [pc, #412]	; (800358c <flowmodbus+0x2ec>)
 80033f0:	edc3 7a00 	vstr	s15, [r3]
							  bottom_left_jog[1] = (int)(ReadDegree-350)*10; // Calulate Point y-axis
 80033f4:	4b66      	ldr	r3, [pc, #408]	; (8003590 <flowmodbus+0x2f0>)
 80033f6:	edd3 7a00 	vldr	s15, [r3]
 80033fa:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8003594 <flowmodbus+0x2f4>
 80033fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003402:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003406:	ee17 2a90 	vmov	r2, s15
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800341a:	4b5c      	ldr	r3, [pc, #368]	; (800358c <flowmodbus+0x2ec>)
 800341c:	edc3 7a01 	vstr	s15, [r3, #4]
							  registerFrame[35].U16 = registerFrame[68].U16; // Place Tray Origin x
 8003420:	4b50      	ldr	r3, [pc, #320]	; (8003564 <flowmodbus+0x2c4>)
 8003422:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 8003426:	4b4f      	ldr	r3, [pc, #316]	; (8003564 <flowmodbus+0x2c4>)
 8003428:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
							  CheckTray++;
 800342c:	4b55      	ldr	r3, [pc, #340]	; (8003584 <flowmodbus+0x2e4>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	3301      	adds	r3, #1
 8003432:	b2da      	uxtb	r2, r3
 8003434:	4b53      	ldr	r3, [pc, #332]	; (8003584 <flowmodbus+0x2e4>)
 8003436:	701a      	strb	r2, [r3, #0]
 8003438:	e077      	b.n	800352a <flowmodbus+0x28a>
						  }
						  else if(CheckTray == 1){
 800343a:	4b52      	ldr	r3, [pc, #328]	; (8003584 <flowmodbus+0x2e4>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d13e      	bne.n	80034c0 <flowmodbus+0x220>
							  bottom_right_jog[0] = (int)registerFrame[68].U16/10;
 8003442:	4b48      	ldr	r3, [pc, #288]	; (8003564 <flowmodbus+0x2c4>)
 8003444:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003448:	4a4f      	ldr	r2, [pc, #316]	; (8003588 <flowmodbus+0x2e8>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	08db      	lsrs	r3, r3, #3
 8003450:	b29b      	uxth	r3, r3
 8003452:	ee07 3a90 	vmov	s15, r3
 8003456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800345a:	4b4f      	ldr	r3, [pc, #316]	; (8003598 <flowmodbus+0x2f8>)
 800345c:	edc3 7a00 	vstr	s15, [r3]
							  bottom_right_jog[1] = (int)(ReadDegree-350)*10; // Calculate Point y-axis
 8003460:	4b4b      	ldr	r3, [pc, #300]	; (8003590 <flowmodbus+0x2f0>)
 8003462:	edd3 7a00 	vldr	s15, [r3]
 8003466:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8003594 <flowmodbus+0x2f4>
 800346a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800346e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003472:	ee17 2a90 	vmov	r2, s15
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	ee07 3a90 	vmov	s15, r3
 8003482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003486:	4b44      	ldr	r3, [pc, #272]	; (8003598 <flowmodbus+0x2f8>)
 8003488:	edc3 7a01 	vstr	s15, [r3, #4]
							  registerFrame[36].U16 = (ReadDegree-350)*10; // Place Tray Origin y
 800348c:	4b40      	ldr	r3, [pc, #256]	; (8003590 <flowmodbus+0x2f0>)
 800348e:	edd3 7a00 	vldr	s15, [r3]
 8003492:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8003594 <flowmodbus+0x2f4>
 8003496:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800349a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800349e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034a6:	ee17 3a90 	vmov	r3, s15
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	4b2d      	ldr	r3, [pc, #180]	; (8003564 <flowmodbus+0x2c4>)
 80034ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
							  CheckTray++;
 80034b2:	4b34      	ldr	r3, [pc, #208]	; (8003584 <flowmodbus+0x2e4>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	3301      	adds	r3, #1
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	4b32      	ldr	r3, [pc, #200]	; (8003584 <flowmodbus+0x2e4>)
 80034bc:	701a      	strb	r2, [r3, #0]
 80034be:	e034      	b.n	800352a <flowmodbus+0x28a>
						  }
						  else if(CheckTray == 2){
 80034c0:	4b30      	ldr	r3, [pc, #192]	; (8003584 <flowmodbus+0x2e4>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d130      	bne.n	800352a <flowmodbus+0x28a>
							  transformRectangleAndPoints();
 80034c8:	f7ff fc6a 	bl	8002da0 <transformRectangleAndPoints>
							  registerFrame[37].U16 = abs(theta)*57.2958*100;
 80034cc:	4b33      	ldr	r3, [pc, #204]	; (800359c <flowmodbus+0x2fc>)
 80034ce:	edd3 7a00 	vldr	s15, [r3]
 80034d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034d6:	ee17 3a90 	vmov	r3, s15
 80034da:	2b00      	cmp	r3, #0
 80034dc:	bfb8      	it	lt
 80034de:	425b      	neglt	r3, r3
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fc ffcb 	bl	800047c <__aeabi_i2d>
 80034e6:	a31c      	add	r3, pc, #112	; (adr r3, 8003558 <flowmodbus+0x2b8>)
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	f7fd f830 	bl	8000550 <__aeabi_dmul>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4610      	mov	r0, r2
 80034f6:	4619      	mov	r1, r3
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	4b28      	ldr	r3, [pc, #160]	; (80035a0 <flowmodbus+0x300>)
 80034fe:	f7fd f827 	bl	8000550 <__aeabi_dmul>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4610      	mov	r0, r2
 8003508:	4619      	mov	r1, r3
 800350a:	f7fd faf9 	bl	8000b00 <__aeabi_d2uiz>
 800350e:	4603      	mov	r3, r0
 8003510:	b29a      	uxth	r2, r3
 8003512:	4b14      	ldr	r3, [pc, #80]	; (8003564 <flowmodbus+0x2c4>)
 8003514:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
							  registerFrame[16].U16 = 0; //0x10 y-status jogging fisnish reset to 0
 8003518:	4b12      	ldr	r3, [pc, #72]	; (8003564 <flowmodbus+0x2c4>)
 800351a:	2200      	movs	r2, #0
 800351c:	841a      	strh	r2, [r3, #32]
							  CheckTray = 0;
 800351e:	4b19      	ldr	r3, [pc, #100]	; (8003584 <flowmodbus+0x2e4>)
 8003520:	2200      	movs	r2, #0
 8003522:	701a      	strb	r2, [r3, #0]
							  Mobus = Initial;
 8003524:	4b0e      	ldr	r3, [pc, #56]	; (8003560 <flowmodbus+0x2c0>)
 8003526:	2200      	movs	r2, #0
 8003528:	701a      	strb	r2, [r3, #0]
						  }
			        }

			    // Update the previous state
			    lastButtonState = buttonState;
 800352a:	4b15      	ldr	r3, [pc, #84]	; (8003580 <flowmodbus+0x2e0>)
 800352c:	781a      	ldrb	r2, [r3, #0]
 800352e:	4b13      	ldr	r3, [pc, #76]	; (800357c <flowmodbus+0x2dc>)
 8003530:	701a      	strb	r2, [r3, #0]
		break;
 8003532:	e228      	b.n	8003986 <flowmodbus+0x6e6>
	case Jogging_Pick:
		//y-axis jogging
					if (Joystick_position[1] >= 3150) {
 8003534:	4b0c      	ldr	r3, [pc, #48]	; (8003568 <flowmodbus+0x2c8>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f640 424d 	movw	r2, #3149	; 0xc4d
 800353c:	4293      	cmp	r3, r2
 800353e:	d931      	bls.n	80035a4 <flowmodbus+0x304>
						  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, JoystickSpeed);
 8003540:	4b0a      	ldr	r3, [pc, #40]	; (800356c <flowmodbus+0x2cc>)
 8003542:	781a      	ldrb	r2, [r3, #0]
 8003544:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <flowmodbus+0x2d0>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	635a      	str	r2, [r3, #52]	; 0x34
						  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800354a:	2200      	movs	r2, #0
 800354c:	2180      	movs	r1, #128	; 0x80
 800354e:	4809      	ldr	r0, [pc, #36]	; (8003574 <flowmodbus+0x2d4>)
 8003550:	f002 fb56 	bl	8005c00 <HAL_GPIO_WritePin>
 8003554:	e039      	b.n	80035ca <flowmodbus+0x32a>
 8003556:	bf00      	nop
 8003558:	c63f1412 	.word	0xc63f1412
 800355c:	404ca5dc 	.word	0x404ca5dc
 8003560:	20000a28 	.word	0x20000a28
 8003564:	20000f04 	.word	0x20000f04
 8003568:	20000fac 	.word	0x20000fac
 800356c:	20000288 	.word	0x20000288
 8003570:	2000059c 	.word	0x2000059c
 8003574:	40020000 	.word	0x40020000
 8003578:	40020800 	.word	0x40020800
 800357c:	2000088e 	.word	0x2000088e
 8003580:	2000088d 	.word	0x2000088d
 8003584:	20000fb4 	.word	0x20000fb4
 8003588:	cccccccd 	.word	0xcccccccd
 800358c:	20000270 	.word	0x20000270
 8003590:	20001030 	.word	0x20001030
 8003594:	43af0000 	.word	0x43af0000
 8003598:	20000278 	.word	0x20000278
 800359c:	20000a20 	.word	0x20000a20
 80035a0:	40590000 	.word	0x40590000
					  }
					  else if (Joystick_position[1] <= 100) {
 80035a4:	4b94      	ldr	r3, [pc, #592]	; (80037f8 <flowmodbus+0x558>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b64      	cmp	r3, #100	; 0x64
 80035aa:	d80a      	bhi.n	80035c2 <flowmodbus+0x322>
						  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, JoystickSpeed);
 80035ac:	4b93      	ldr	r3, [pc, #588]	; (80037fc <flowmodbus+0x55c>)
 80035ae:	781a      	ldrb	r2, [r3, #0]
 80035b0:	4b93      	ldr	r3, [pc, #588]	; (8003800 <flowmodbus+0x560>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	635a      	str	r2, [r3, #52]	; 0x34
						  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80035b6:	2201      	movs	r2, #1
 80035b8:	2180      	movs	r1, #128	; 0x80
 80035ba:	4892      	ldr	r0, [pc, #584]	; (8003804 <flowmodbus+0x564>)
 80035bc:	f002 fb20 	bl	8005c00 <HAL_GPIO_WritePin>
 80035c0:	e003      	b.n	80035ca <flowmodbus+0x32a>
					  }
					  else{
						  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80035c2:	4b8f      	ldr	r3, [pc, #572]	; (8003800 <flowmodbus+0x560>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2200      	movs	r2, #0
 80035c8:	635a      	str	r2, [r3, #52]	; 0x34
					  }
						//x-axis jogging
					  if (Joystick_position[0] >= 3150)
 80035ca:	4b8b      	ldr	r3, [pc, #556]	; (80037f8 <flowmodbus+0x558>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f640 424d 	movw	r2, #3149	; 0xc4d
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d904      	bls.n	80035e0 <flowmodbus+0x340>
					  {
						  registerFrame[64].U16 = 8;
 80035d6:	4b8c      	ldr	r3, [pc, #560]	; (8003808 <flowmodbus+0x568>)
 80035d8:	2208      	movs	r2, #8
 80035da:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80035de:	e00c      	b.n	80035fa <flowmodbus+0x35a>
					  }
					  else if (Joystick_position[0] <= 100){
 80035e0:	4b85      	ldr	r3, [pc, #532]	; (80037f8 <flowmodbus+0x558>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b64      	cmp	r3, #100	; 0x64
 80035e6:	d804      	bhi.n	80035f2 <flowmodbus+0x352>
						  registerFrame[64].U16 = 4;
 80035e8:	4b87      	ldr	r3, [pc, #540]	; (8003808 <flowmodbus+0x568>)
 80035ea:	2204      	movs	r2, #4
 80035ec:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80035f0:	e003      	b.n	80035fa <flowmodbus+0x35a>
					  }
					  else{
						  registerFrame[64].U16 = 0;
 80035f2:	4b85      	ldr	r3, [pc, #532]	; (8003808 <flowmodbus+0x568>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
					  }

			  // Set position
						buttonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 80035fa:	2120      	movs	r1, #32
 80035fc:	4883      	ldr	r0, [pc, #524]	; (800380c <flowmodbus+0x56c>)
 80035fe:	f002 fae7 	bl	8005bd0 <HAL_GPIO_ReadPin>
 8003602:	4603      	mov	r3, r0
 8003604:	461a      	mov	r2, r3
 8003606:	4b82      	ldr	r3, [pc, #520]	; (8003810 <flowmodbus+0x570>)
 8003608:	701a      	strb	r2, [r3, #0]
						if (buttonState != lastButtonState) {
 800360a:	4b81      	ldr	r3, [pc, #516]	; (8003810 <flowmodbus+0x570>)
 800360c:	781a      	ldrb	r2, [r3, #0]
 800360e:	4b81      	ldr	r3, [pc, #516]	; (8003814 <flowmodbus+0x574>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	f000 80ae 	beq.w	8003774 <flowmodbus+0x4d4>
							// Button press is valid, perform desired action
							if (CheckTray == 0) {
 8003618:	4b7f      	ldr	r3, [pc, #508]	; (8003818 <flowmodbus+0x578>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d131      	bne.n	8003684 <flowmodbus+0x3e4>
								bottom_left_jog[0] = (int)registerFrame[68].U16/10; // Calculate Point x-axis
 8003620:	4b79      	ldr	r3, [pc, #484]	; (8003808 <flowmodbus+0x568>)
 8003622:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003626:	4a7d      	ldr	r2, [pc, #500]	; (800381c <flowmodbus+0x57c>)
 8003628:	fba2 2303 	umull	r2, r3, r2, r3
 800362c:	08db      	lsrs	r3, r3, #3
 800362e:	b29b      	uxth	r3, r3
 8003630:	ee07 3a90 	vmov	s15, r3
 8003634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003638:	4b79      	ldr	r3, [pc, #484]	; (8003820 <flowmodbus+0x580>)
 800363a:	edc3 7a00 	vstr	s15, [r3]
								bottom_left_jog[1] = (int)(ReadDegree-350)*10; // Calulate Point y-axis
 800363e:	4b79      	ldr	r3, [pc, #484]	; (8003824 <flowmodbus+0x584>)
 8003640:	edd3 7a00 	vldr	s15, [r3]
 8003644:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8003828 <flowmodbus+0x588>
 8003648:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800364c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003650:	ee17 2a90 	vmov	r2, s15
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	ee07 3a90 	vmov	s15, r3
 8003660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003664:	4b6e      	ldr	r3, [pc, #440]	; (8003820 <flowmodbus+0x580>)
 8003666:	edc3 7a01 	vstr	s15, [r3, #4]
								registerFrame[32].U16 = registerFrame[68].U16; // Place Tray Origin x
 800366a:	4b67      	ldr	r3, [pc, #412]	; (8003808 <flowmodbus+0x568>)
 800366c:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 8003670:	4b65      	ldr	r3, [pc, #404]	; (8003808 <flowmodbus+0x568>)
 8003672:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
								CheckTray++;
 8003676:	4b68      	ldr	r3, [pc, #416]	; (8003818 <flowmodbus+0x578>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	3301      	adds	r3, #1
 800367c:	b2da      	uxtb	r2, r3
 800367e:	4b66      	ldr	r3, [pc, #408]	; (8003818 <flowmodbus+0x578>)
 8003680:	701a      	strb	r2, [r3, #0]
 8003682:	e077      	b.n	8003774 <flowmodbus+0x4d4>
							}
							else if (CheckTray == 1) {
 8003684:	4b64      	ldr	r3, [pc, #400]	; (8003818 <flowmodbus+0x578>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d13e      	bne.n	800370a <flowmodbus+0x46a>
								bottom_right_jog[0] = (int)registerFrame[68].U16/10;
 800368c:	4b5e      	ldr	r3, [pc, #376]	; (8003808 <flowmodbus+0x568>)
 800368e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003692:	4a62      	ldr	r2, [pc, #392]	; (800381c <flowmodbus+0x57c>)
 8003694:	fba2 2303 	umull	r2, r3, r2, r3
 8003698:	08db      	lsrs	r3, r3, #3
 800369a:	b29b      	uxth	r3, r3
 800369c:	ee07 3a90 	vmov	s15, r3
 80036a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036a4:	4b61      	ldr	r3, [pc, #388]	; (800382c <flowmodbus+0x58c>)
 80036a6:	edc3 7a00 	vstr	s15, [r3]
								bottom_right_jog[1] = (int)(ReadDegree-350)*10; // Calculate Point y-axis
 80036aa:	4b5e      	ldr	r3, [pc, #376]	; (8003824 <flowmodbus+0x584>)
 80036ac:	edd3 7a00 	vldr	s15, [r3]
 80036b0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8003828 <flowmodbus+0x588>
 80036b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036bc:	ee17 2a90 	vmov	r2, s15
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	ee07 3a90 	vmov	s15, r3
 80036cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036d0:	4b56      	ldr	r3, [pc, #344]	; (800382c <flowmodbus+0x58c>)
 80036d2:	edc3 7a01 	vstr	s15, [r3, #4]
								registerFrame[33].U16 = (ReadDegree - 350) * 10; // Place Tray Origin y
 80036d6:	4b53      	ldr	r3, [pc, #332]	; (8003824 <flowmodbus+0x584>)
 80036d8:	edd3 7a00 	vldr	s15, [r3]
 80036dc:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8003828 <flowmodbus+0x588>
 80036e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036e4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80036e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036f0:	ee17 3a90 	vmov	r3, s15
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	4b44      	ldr	r3, [pc, #272]	; (8003808 <flowmodbus+0x568>)
 80036f8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
								CheckTray++;
 80036fc:	4b46      	ldr	r3, [pc, #280]	; (8003818 <flowmodbus+0x578>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	3301      	adds	r3, #1
 8003702:	b2da      	uxtb	r2, r3
 8003704:	4b44      	ldr	r3, [pc, #272]	; (8003818 <flowmodbus+0x578>)
 8003706:	701a      	strb	r2, [r3, #0]
 8003708:	e034      	b.n	8003774 <flowmodbus+0x4d4>
							}
							else if (CheckTray == 2) {
 800370a:	4b43      	ldr	r3, [pc, #268]	; (8003818 <flowmodbus+0x578>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d130      	bne.n	8003774 <flowmodbus+0x4d4>
								transformRectangleAndPoints();
 8003712:	f7ff fb45 	bl	8002da0 <transformRectangleAndPoints>
								registerFrame[34].U16 = abs(theta) * 57.2958 * 100;
 8003716:	4b46      	ldr	r3, [pc, #280]	; (8003830 <flowmodbus+0x590>)
 8003718:	edd3 7a00 	vldr	s15, [r3]
 800371c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003720:	ee17 3a90 	vmov	r3, s15
 8003724:	2b00      	cmp	r3, #0
 8003726:	bfb8      	it	lt
 8003728:	425b      	neglt	r3, r3
 800372a:	4618      	mov	r0, r3
 800372c:	f7fc fea6 	bl	800047c <__aeabi_i2d>
 8003730:	a32f      	add	r3, pc, #188	; (adr r3, 80037f0 <flowmodbus+0x550>)
 8003732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003736:	f7fc ff0b 	bl	8000550 <__aeabi_dmul>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	4610      	mov	r0, r2
 8003740:	4619      	mov	r1, r3
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	4b3b      	ldr	r3, [pc, #236]	; (8003834 <flowmodbus+0x594>)
 8003748:	f7fc ff02 	bl	8000550 <__aeabi_dmul>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	4610      	mov	r0, r2
 8003752:	4619      	mov	r1, r3
 8003754:	f7fd f9d4 	bl	8000b00 <__aeabi_d2uiz>
 8003758:	4603      	mov	r3, r0
 800375a:	b29a      	uxth	r2, r3
 800375c:	4b2a      	ldr	r3, [pc, #168]	; (8003808 <flowmodbus+0x568>)
 800375e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
								registerFrame[16].U16 = 0; // 0x10 y-status jogging finish reset to 0
 8003762:	4b29      	ldr	r3, [pc, #164]	; (8003808 <flowmodbus+0x568>)
 8003764:	2200      	movs	r2, #0
 8003766:	841a      	strh	r2, [r3, #32]
								CheckTray = 0;
 8003768:	4b2b      	ldr	r3, [pc, #172]	; (8003818 <flowmodbus+0x578>)
 800376a:	2200      	movs	r2, #0
 800376c:	701a      	strb	r2, [r3, #0]
								Mobus = Initial;
 800376e:	4b32      	ldr	r3, [pc, #200]	; (8003838 <flowmodbus+0x598>)
 8003770:	2200      	movs	r2, #0
 8003772:	701a      	strb	r2, [r3, #0]
							}
						}
				// Update the previous state
				lastButtonState = buttonState;
 8003774:	4b26      	ldr	r3, [pc, #152]	; (8003810 <flowmodbus+0x570>)
 8003776:	781a      	ldrb	r2, [r3, #0]
 8003778:	4b26      	ldr	r3, [pc, #152]	; (8003814 <flowmodbus+0x574>)
 800377a:	701a      	strb	r2, [r3, #0]
		break;
 800377c:	e103      	b.n	8003986 <flowmodbus+0x6e6>
	case Home:
		// x axis
			registerFrame[64].U16 = 1; // 0x40 Moving Status x-axis - Home
 800377e:	4b22      	ldr	r3, [pc, #136]	; (8003808 <flowmodbus+0x568>)
 8003780:	2201      	movs	r2, #1
 8003782:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			Mobus = Initial;
 8003786:	4b2c      	ldr	r3, [pc, #176]	; (8003838 <flowmodbus+0x598>)
 8003788:	2200      	movs	r2, #0
 800378a:	701a      	strb	r2, [r3, #0]
		// y axis
		break;
 800378c:	e0fb      	b.n	8003986 <flowmodbus+0x6e6>
	case Run_PointMode:
		// x axis
			registerFrame[65].U16 = registerFrame[48].U16; // position Tray pick/place
 800378e:	4b1e      	ldr	r3, [pc, #120]	; (8003808 <flowmodbus+0x568>)
 8003790:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8003794:	4b1c      	ldr	r3, [pc, #112]	; (8003808 <flowmodbus+0x568>)
 8003796:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
			registerFrame[66].U16 = 3000; // speed x-axis 300mm
 800379a:	4b1b      	ldr	r3, [pc, #108]	; (8003808 <flowmodbus+0x568>)
 800379c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80037a0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
			registerFrame[67].U16 = 1; // Acc time 1mms
 80037a4:	4b18      	ldr	r3, [pc, #96]	; (8003808 <flowmodbus+0x568>)
 80037a6:	2201      	movs	r2, #1
 80037a8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
			registerFrame[64].U16 = 2; //0x40 Moving Status x-axis - run mode
 80037ac:	4b16      	ldr	r3, [pc, #88]	; (8003808 <flowmodbus+0x568>)
 80037ae:	2202      	movs	r2, #2
 80037b0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		// y axis
			if(registerFrame[49].U16 > 60000)SetDegree = ((350-(UINT16_MAX - registerFrame[49].U16)/10));
 80037b4:	4b14      	ldr	r3, [pc, #80]	; (8003808 <flowmodbus+0x568>)
 80037b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80037ba:	f64e 2260 	movw	r2, #60000	; 0xea60
 80037be:	4293      	cmp	r3, r2
 80037c0:	d940      	bls.n	8003844 <flowmodbus+0x5a4>
 80037c2:	4b11      	ldr	r3, [pc, #68]	; (8003808 <flowmodbus+0x568>)
 80037c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80037c8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80037cc:	33ff      	adds	r3, #255	; 0xff
 80037ce:	4a1b      	ldr	r2, [pc, #108]	; (800383c <flowmodbus+0x59c>)
 80037d0:	fb82 1203 	smull	r1, r2, r2, r3
 80037d4:	1092      	asrs	r2, r2, #2
 80037d6:	17db      	asrs	r3, r3, #31
 80037d8:	1a9b      	subs	r3, r3, r2
 80037da:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 80037de:	ee07 3a90 	vmov	s15, r3
 80037e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037e6:	4b16      	ldr	r3, [pc, #88]	; (8003840 <flowmodbus+0x5a0>)
 80037e8:	edc3 7a00 	vstr	s15, [r3]
 80037ec:	e042      	b.n	8003874 <flowmodbus+0x5d4>
 80037ee:	bf00      	nop
 80037f0:	c63f1412 	.word	0xc63f1412
 80037f4:	404ca5dc 	.word	0x404ca5dc
 80037f8:	20000fac 	.word	0x20000fac
 80037fc:	20000288 	.word	0x20000288
 8003800:	2000059c 	.word	0x2000059c
 8003804:	40020000 	.word	0x40020000
 8003808:	20000f04 	.word	0x20000f04
 800380c:	40020800 	.word	0x40020800
 8003810:	2000088d 	.word	0x2000088d
 8003814:	2000088e 	.word	0x2000088e
 8003818:	20000fb4 	.word	0x20000fb4
 800381c:	cccccccd 	.word	0xcccccccd
 8003820:	20000270 	.word	0x20000270
 8003824:	20001030 	.word	0x20001030
 8003828:	43af0000 	.word	0x43af0000
 800382c:	20000278 	.word	0x20000278
 8003830:	20000a20 	.word	0x20000a20
 8003834:	40590000 	.word	0x40590000
 8003838:	20000a28 	.word	0x20000a28
 800383c:	66666667 	.word	0x66666667
 8003840:	20001034 	.word	0x20001034
			else if (registerFrame[49].U16 <= 3500){
 8003844:	4b51      	ldr	r3, [pc, #324]	; (800398c <flowmodbus+0x6ec>)
 8003846:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800384a:	f640 52ac 	movw	r2, #3500	; 0xdac
 800384e:	4293      	cmp	r3, r2
 8003850:	d810      	bhi.n	8003874 <flowmodbus+0x5d4>
			SetDegree = (registerFrame[49].U16 / 10)+350;
 8003852:	4b4e      	ldr	r3, [pc, #312]	; (800398c <flowmodbus+0x6ec>)
 8003854:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003858:	4a4d      	ldr	r2, [pc, #308]	; (8003990 <flowmodbus+0x6f0>)
 800385a:	fba2 2303 	umull	r2, r3, r2, r3
 800385e:	08db      	lsrs	r3, r3, #3
 8003860:	b29b      	uxth	r3, r3
 8003862:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 8003866:	ee07 3a90 	vmov	s15, r3
 800386a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800386e:	4b49      	ldr	r3, [pc, #292]	; (8003994 <flowmodbus+0x6f4>)
 8003870:	edc3 7a00 	vstr	s15, [r3]
			}
			SetVelocity = 400;
 8003874:	4b48      	ldr	r3, [pc, #288]	; (8003998 <flowmodbus+0x6f8>)
 8003876:	4a49      	ldr	r2, [pc, #292]	; (800399c <flowmodbus+0x6fc>)
 8003878:	601a      	str	r2, [r3, #0]
			if (error > 0) { // setpoint > read_encoder
 800387a:	4b49      	ldr	r3, [pc, #292]	; (80039a0 <flowmodbus+0x700>)
 800387c:	edd3 7a00 	vldr	s15, [r3]
 8003880:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003888:	dd35      	ble.n	80038f6 <flowmodbus+0x656>
			  SetVelocity = abs(SetVelocity);
 800388a:	4b43      	ldr	r3, [pc, #268]	; (8003998 <flowmodbus+0x6f8>)
 800388c:	edd3 7a00 	vldr	s15, [r3]
 8003890:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003894:	ee17 3a90 	vmov	r3, s15
 8003898:	2b00      	cmp	r3, #0
 800389a:	bfb8      	it	lt
 800389c:	425b      	neglt	r3, r3
 800389e:	ee07 3a90 	vmov	s15, r3
 80038a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038a6:	4b3c      	ldr	r3, [pc, #240]	; (8003998 <flowmodbus+0x6f8>)
 80038a8:	edc3 7a00 	vstr	s15, [r3]
			 if (error < 1) {
 80038ac:	4b3c      	ldr	r3, [pc, #240]	; (80039a0 <flowmodbus+0x700>)
 80038ae:	edd3 7a00 	vldr	s15, [r3]
 80038b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038be:	d50b      	bpl.n	80038d8 <flowmodbus+0x638>
				  DegreeFeedback = 0; // Limit Position
 80038c0:	4b38      	ldr	r3, [pc, #224]	; (80039a4 <flowmodbus+0x704>)
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
				  s = 0;
 80038c8:	4b37      	ldr	r3, [pc, #220]	; (80039a8 <flowmodbus+0x708>)
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
				  s2 = 0;
 80038d0:	4b36      	ldr	r3, [pc, #216]	; (80039ac <flowmodbus+0x70c>)
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
			  }
			  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, DegreeFeedback);
 80038d8:	4b32      	ldr	r3, [pc, #200]	; (80039a4 <flowmodbus+0x704>)
 80038da:	edd3 7a00 	vldr	s15, [r3]
 80038de:	4b34      	ldr	r3, [pc, #208]	; (80039b0 <flowmodbus+0x710>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038e6:	ee17 2a90 	vmov	r2, s15
 80038ea:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80038ec:	2200      	movs	r2, #0
 80038ee:	2180      	movs	r1, #128	; 0x80
 80038f0:	4830      	ldr	r0, [pc, #192]	; (80039b4 <flowmodbus+0x714>)
 80038f2:	f002 f985 	bl	8005c00 <HAL_GPIO_WritePin>
		  }
			if (error < 0 ) { // setpoint < read_encoder
 80038f6:	4b2a      	ldr	r3, [pc, #168]	; (80039a0 <flowmodbus+0x700>)
 80038f8:	edd3 7a00 	vldr	s15, [r3]
 80038fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003904:	d536      	bpl.n	8003974 <flowmodbus+0x6d4>
			  if(SetVelocity > 0)SetVelocity = -SetVelocity;
 8003906:	4b24      	ldr	r3, [pc, #144]	; (8003998 <flowmodbus+0x6f8>)
 8003908:	edd3 7a00 	vldr	s15, [r3]
 800390c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003914:	dd07      	ble.n	8003926 <flowmodbus+0x686>
 8003916:	4b20      	ldr	r3, [pc, #128]	; (8003998 <flowmodbus+0x6f8>)
 8003918:	edd3 7a00 	vldr	s15, [r3]
 800391c:	eef1 7a67 	vneg.f32	s15, s15
 8003920:	4b1d      	ldr	r3, [pc, #116]	; (8003998 <flowmodbus+0x6f8>)
 8003922:	edc3 7a00 	vstr	s15, [r3]
			  if (error * -1 < 1) {
 8003926:	4b1e      	ldr	r3, [pc, #120]	; (80039a0 <flowmodbus+0x700>)
 8003928:	edd3 7a00 	vldr	s15, [r3]
 800392c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003930:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003938:	dd0b      	ble.n	8003952 <flowmodbus+0x6b2>
				  DegreeFeedback = 0; // Limit Position
 800393a:	4b1a      	ldr	r3, [pc, #104]	; (80039a4 <flowmodbus+0x704>)
 800393c:	f04f 0200 	mov.w	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
				  s = 0;
 8003942:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <flowmodbus+0x708>)
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
				  s2 = 0;
 800394a:	4b18      	ldr	r3, [pc, #96]	; (80039ac <flowmodbus+0x70c>)
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	601a      	str	r2, [r3, #0]
			  }
			  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, DegreeFeedback * -1);
 8003952:	4b14      	ldr	r3, [pc, #80]	; (80039a4 <flowmodbus+0x704>)
 8003954:	edd3 7a00 	vldr	s15, [r3]
 8003958:	eef1 7a67 	vneg.f32	s15, s15
 800395c:	4b14      	ldr	r3, [pc, #80]	; (80039b0 <flowmodbus+0x710>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003964:	ee17 2a90 	vmov	r2, s15
 8003968:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800396a:	2201      	movs	r2, #1
 800396c:	2180      	movs	r1, #128	; 0x80
 800396e:	4811      	ldr	r0, [pc, #68]	; (80039b4 <flowmodbus+0x714>)
 8003970:	f002 f946 	bl	8005c00 <HAL_GPIO_WritePin>
		  }
			Mobus = Initial;
 8003974:	4b10      	ldr	r3, [pc, #64]	; (80039b8 <flowmodbus+0x718>)
 8003976:	2200      	movs	r2, #0
 8003978:	701a      	strb	r2, [r3, #0]
		break;
 800397a:	e004      	b.n	8003986 <flowmodbus+0x6e6>
	case Run_TrayMode:
		registerFrame[1].U16 = 4 ;// Basesystem reset position
 800397c:	4b03      	ldr	r3, [pc, #12]	; (800398c <flowmodbus+0x6ec>)
 800397e:	2204      	movs	r2, #4
 8003980:	805a      	strh	r2, [r3, #2]
		break;
 8003982:	e000      	b.n	8003986 <flowmodbus+0x6e6>
		break;
 8003984:	bf00      	nop
		}
	}
 8003986:	bf00      	nop
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	20000f04 	.word	0x20000f04
 8003990:	cccccccd 	.word	0xcccccccd
 8003994:	20001034 	.word	0x20001034
 8003998:	2000102c 	.word	0x2000102c
 800399c:	43c80000 	.word	0x43c80000
 80039a0:	2000103c 	.word	0x2000103c
 80039a4:	20001038 	.word	0x20001038
 80039a8:	20001008 	.word	0x20001008
 80039ac:	20001014 	.word	0x20001014
 80039b0:	2000059c 	.word	0x2000059c
 80039b4:	40020000 	.word	0x40020000
 80039b8:	20000a28 	.word	0x20000a28

080039bc <control_interrupt>:
float control_interrupt(){
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
    //loop 1
	error = SetDegree - ReadDegree;
 80039c0:	4b68      	ldr	r3, [pc, #416]	; (8003b64 <control_interrupt+0x1a8>)
 80039c2:	ed93 7a00 	vldr	s14, [r3]
 80039c6:	4b68      	ldr	r3, [pc, #416]	; (8003b68 <control_interrupt+0x1ac>)
 80039c8:	edd3 7a00 	vldr	s15, [r3]
 80039cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039d0:	4b66      	ldr	r3, [pc, #408]	; (8003b6c <control_interrupt+0x1b0>)
 80039d2:	edc3 7a00 	vstr	s15, [r3]
	if(abs(error) <= 0.5)s = 0;
 80039d6:	4b65      	ldr	r3, [pc, #404]	; (8003b6c <control_interrupt+0x1b0>)
 80039d8:	edd3 7a00 	vldr	s15, [r3]
 80039dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039e0:	ee17 3a90 	vmov	r3, s15
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	db0c      	blt.n	8003a02 <control_interrupt+0x46>
 80039e8:	4b60      	ldr	r3, [pc, #384]	; (8003b6c <control_interrupt+0x1b0>)
 80039ea:	edd3 7a00 	vldr	s15, [r3]
 80039ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039f2:	ee17 3a90 	vmov	r3, s15
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	dc03      	bgt.n	8003a02 <control_interrupt+0x46>
 80039fa:	4b5d      	ldr	r3, [pc, #372]	; (8003b70 <control_interrupt+0x1b4>)
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
	s = s + error;
 8003a02:	4b5b      	ldr	r3, [pc, #364]	; (8003b70 <control_interrupt+0x1b4>)
 8003a04:	ed93 7a00 	vldr	s14, [r3]
 8003a08:	4b58      	ldr	r3, [pc, #352]	; (8003b6c <control_interrupt+0x1b0>)
 8003a0a:	edd3 7a00 	vldr	s15, [r3]
 8003a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a12:	4b57      	ldr	r3, [pc, #348]	; (8003b70 <control_interrupt+0x1b4>)
 8003a14:	edc3 7a00 	vstr	s15, [r3]
	u = K_P*error+K_I*s+K_D*(error-p);
 8003a18:	4b56      	ldr	r3, [pc, #344]	; (8003b74 <control_interrupt+0x1b8>)
 8003a1a:	ed93 7a00 	vldr	s14, [r3]
 8003a1e:	4b53      	ldr	r3, [pc, #332]	; (8003b6c <control_interrupt+0x1b0>)
 8003a20:	edd3 7a00 	vldr	s15, [r3]
 8003a24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a28:	4b53      	ldr	r3, [pc, #332]	; (8003b78 <control_interrupt+0x1bc>)
 8003a2a:	edd3 6a00 	vldr	s13, [r3]
 8003a2e:	4b50      	ldr	r3, [pc, #320]	; (8003b70 <control_interrupt+0x1b4>)
 8003a30:	edd3 7a00 	vldr	s15, [r3]
 8003a34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a3c:	4b4b      	ldr	r3, [pc, #300]	; (8003b6c <control_interrupt+0x1b0>)
 8003a3e:	edd3 6a00 	vldr	s13, [r3]
 8003a42:	4b4e      	ldr	r3, [pc, #312]	; (8003b7c <control_interrupt+0x1c0>)
 8003a44:	edd3 7a00 	vldr	s15, [r3]
 8003a48:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003a4c:	4b4c      	ldr	r3, [pc, #304]	; (8003b80 <control_interrupt+0x1c4>)
 8003a4e:	edd3 7a00 	vldr	s15, [r3]
 8003a52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a5a:	4b4a      	ldr	r3, [pc, #296]	; (8003b84 <control_interrupt+0x1c8>)
 8003a5c:	edc3 7a00 	vstr	s15, [r3]
	p = error;
 8003a60:	4b42      	ldr	r3, [pc, #264]	; (8003b6c <control_interrupt+0x1b0>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a45      	ldr	r2, [pc, #276]	; (8003b7c <control_interrupt+0x1c0>)
 8003a66:	6013      	str	r3, [r2, #0]
	// loop 2
	error2 = (u + SetVelocity) - speed;
 8003a68:	4b46      	ldr	r3, [pc, #280]	; (8003b84 <control_interrupt+0x1c8>)
 8003a6a:	ed93 7a00 	vldr	s14, [r3]
 8003a6e:	4b46      	ldr	r3, [pc, #280]	; (8003b88 <control_interrupt+0x1cc>)
 8003a70:	edd3 7a00 	vldr	s15, [r3]
 8003a74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a78:	4b44      	ldr	r3, [pc, #272]	; (8003b8c <control_interrupt+0x1d0>)
 8003a7a:	edd3 7a00 	vldr	s15, [r3]
 8003a7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a82:	4b43      	ldr	r3, [pc, #268]	; (8003b90 <control_interrupt+0x1d4>)
 8003a84:	edc3 7a00 	vstr	s15, [r3]
	if(abs(error2) <= 0.5)s2 = 0;
 8003a88:	4b41      	ldr	r3, [pc, #260]	; (8003b90 <control_interrupt+0x1d4>)
 8003a8a:	edd3 7a00 	vldr	s15, [r3]
 8003a8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a92:	ee17 3a90 	vmov	r3, s15
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	db0c      	blt.n	8003ab4 <control_interrupt+0xf8>
 8003a9a:	4b3d      	ldr	r3, [pc, #244]	; (8003b90 <control_interrupt+0x1d4>)
 8003a9c:	edd3 7a00 	vldr	s15, [r3]
 8003aa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003aa4:	ee17 3a90 	vmov	r3, s15
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	dc03      	bgt.n	8003ab4 <control_interrupt+0xf8>
 8003aac:	4b39      	ldr	r3, [pc, #228]	; (8003b94 <control_interrupt+0x1d8>)
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
	s2 = s2 + error2;
 8003ab4:	4b37      	ldr	r3, [pc, #220]	; (8003b94 <control_interrupt+0x1d8>)
 8003ab6:	ed93 7a00 	vldr	s14, [r3]
 8003aba:	4b35      	ldr	r3, [pc, #212]	; (8003b90 <control_interrupt+0x1d4>)
 8003abc:	edd3 7a00 	vldr	s15, [r3]
 8003ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ac4:	4b33      	ldr	r3, [pc, #204]	; (8003b94 <control_interrupt+0x1d8>)
 8003ac6:	edc3 7a00 	vstr	s15, [r3]
	u2 = K_Pvelo*error2+K_Ivelo*s2+K_Dvelo*(error2-p2);
 8003aca:	4b33      	ldr	r3, [pc, #204]	; (8003b98 <control_interrupt+0x1dc>)
 8003acc:	ed93 7a00 	vldr	s14, [r3]
 8003ad0:	4b2f      	ldr	r3, [pc, #188]	; (8003b90 <control_interrupt+0x1d4>)
 8003ad2:	edd3 7a00 	vldr	s15, [r3]
 8003ad6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ada:	4b30      	ldr	r3, [pc, #192]	; (8003b9c <control_interrupt+0x1e0>)
 8003adc:	edd3 6a00 	vldr	s13, [r3]
 8003ae0:	4b2c      	ldr	r3, [pc, #176]	; (8003b94 <control_interrupt+0x1d8>)
 8003ae2:	edd3 7a00 	vldr	s15, [r3]
 8003ae6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003aea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003aee:	4b28      	ldr	r3, [pc, #160]	; (8003b90 <control_interrupt+0x1d4>)
 8003af0:	edd3 6a00 	vldr	s13, [r3]
 8003af4:	4b2a      	ldr	r3, [pc, #168]	; (8003ba0 <control_interrupt+0x1e4>)
 8003af6:	edd3 7a00 	vldr	s15, [r3]
 8003afa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003afe:	4b29      	ldr	r3, [pc, #164]	; (8003ba4 <control_interrupt+0x1e8>)
 8003b00:	edd3 7a00 	vldr	s15, [r3]
 8003b04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b0c:	4b26      	ldr	r3, [pc, #152]	; (8003ba8 <control_interrupt+0x1ec>)
 8003b0e:	edc3 7a00 	vstr	s15, [r3]
	if(u2>100)u2=100;
 8003b12:	4b25      	ldr	r3, [pc, #148]	; (8003ba8 <control_interrupt+0x1ec>)
 8003b14:	edd3 7a00 	vldr	s15, [r3]
 8003b18:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003bac <control_interrupt+0x1f0>
 8003b1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b24:	dd02      	ble.n	8003b2c <control_interrupt+0x170>
 8003b26:	4b20      	ldr	r3, [pc, #128]	; (8003ba8 <control_interrupt+0x1ec>)
 8003b28:	4a21      	ldr	r2, [pc, #132]	; (8003bb0 <control_interrupt+0x1f4>)
 8003b2a:	601a      	str	r2, [r3, #0]
	if(u2<-100)u2=-100;
 8003b2c:	4b1e      	ldr	r3, [pc, #120]	; (8003ba8 <control_interrupt+0x1ec>)
 8003b2e:	edd3 7a00 	vldr	s15, [r3]
 8003b32:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003bb4 <control_interrupt+0x1f8>
 8003b36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b3e:	d502      	bpl.n	8003b46 <control_interrupt+0x18a>
 8003b40:	4b19      	ldr	r3, [pc, #100]	; (8003ba8 <control_interrupt+0x1ec>)
 8003b42:	4a1d      	ldr	r2, [pc, #116]	; (8003bb8 <control_interrupt+0x1fc>)
 8003b44:	601a      	str	r2, [r3, #0]
	p2 = error2;
 8003b46:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <control_interrupt+0x1d4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a15      	ldr	r2, [pc, #84]	; (8003ba0 <control_interrupt+0x1e4>)
 8003b4c:	6013      	str	r3, [r2, #0]
return u2;
 8003b4e:	4b16      	ldr	r3, [pc, #88]	; (8003ba8 <control_interrupt+0x1ec>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	ee07 3a90 	vmov	s15, r3
}
 8003b56:	eeb0 0a67 	vmov.f32	s0, s15
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	20001034 	.word	0x20001034
 8003b68:	20001030 	.word	0x20001030
 8003b6c:	2000103c 	.word	0x2000103c
 8003b70:	20001008 	.word	0x20001008
 8003b74:	2000101c 	.word	0x2000101c
 8003b78:	2000028c 	.word	0x2000028c
 8003b7c:	20001004 	.word	0x20001004
 8003b80:	20001020 	.word	0x20001020
 8003b84:	20001000 	.word	0x20001000
 8003b88:	2000102c 	.word	0x2000102c
 8003b8c:	20000f94 	.word	0x20000f94
 8003b90:	20001018 	.word	0x20001018
 8003b94:	20001014 	.word	0x20001014
 8003b98:	20001024 	.word	0x20001024
 8003b9c:	20000290 	.word	0x20000290
 8003ba0:	20001010 	.word	0x20001010
 8003ba4:	20001028 	.word	0x20001028
 8003ba8:	2000100c 	.word	0x2000100c
 8003bac:	42c80000 	.word	0x42c80000
 8003bb0:	42c80000 	.word	0x42c80000
 8003bb4:	c2c80000 	.word	0xc2c80000
 8003bb8:	c2c80000 	.word	0xc2c80000

08003bbc <velocity>:
	if(u2>100)u2=100;
	if(u2<-100)u2=-100;
	p2 = error2;
return u2;
}
void velocity(){
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
	QEIData.data[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8003bc2:	4b2c      	ldr	r3, [pc, #176]	; (8003c74 <velocity+0xb8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	4a2b      	ldr	r2, [pc, #172]	; (8003c78 <velocity+0xbc>)
 8003bca:	6013      	str	r3, [r2, #0]
	QEIData.timestamp[0] = micros();
 8003bcc:	f000 f8c2 	bl	8003d54 <micros>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4b28      	ldr	r3, [pc, #160]	; (8003c78 <velocity+0xbc>)
 8003bd6:	609a      	str	r2, [r3, #8]

	int32_t diffposition = QEIData.data[0] - QEIData.data[1];
 8003bd8:	4b27      	ldr	r3, [pc, #156]	; (8003c78 <velocity+0xbc>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	4b26      	ldr	r3, [pc, #152]	; (8003c78 <velocity+0xbc>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	607b      	str	r3, [r7, #4]
	float difftime = QEIData.timestamp[0] - QEIData.timestamp[1];
 8003be4:	4b24      	ldr	r3, [pc, #144]	; (8003c78 <velocity+0xbc>)
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	4b23      	ldr	r3, [pc, #140]	; (8003c78 <velocity+0xbc>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	ee07 3a90 	vmov	s15, r3
 8003bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bf6:	edc7 7a00 	vstr	s15, [r7]

	if(ReadDegree > 750){
 8003bfa:	4b20      	ldr	r3, [pc, #128]	; (8003c7c <velocity+0xc0>)
 8003bfc:	edd3 7a00 	vldr	s15, [r3]
 8003c00:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003c80 <velocity+0xc4>
 8003c04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c0c:	dd03      	ble.n	8003c16 <velocity+0x5a>
		SetDegree = 0;
 8003c0e:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <velocity+0xc8>)
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
	}
	if(diffposition < -(QEI_PERIOD >> 1)){
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f513 4fa0 	cmn.w	r3, #20480	; 0x5000
 8003c1c:	da03      	bge.n	8003c26 <velocity+0x6a>
		diffposition += QEI_PERIOD;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8003c24:	607b      	str	r3, [r7, #4]
	}

	QEIData.QEIPosition = __HAL_TIM_GET_COUNTER(&htim2) % 8192;
 8003c26:	4b13      	ldr	r3, [pc, #76]	; (8003c74 <velocity+0xb8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c30:	ee07 3a90 	vmov	s15, r3
 8003c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c38:	4b0f      	ldr	r3, [pc, #60]	; (8003c78 <velocity+0xbc>)
 8003c3a:	edc3 7a04 	vstr	s15, [r3, #16]
	QEIData.QEIVelocity = (diffposition*1000000)/difftime;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a11      	ldr	r2, [pc, #68]	; (8003c88 <velocity+0xcc>)
 8003c42:	fb02 f303 	mul.w	r3, r2, r3
 8003c46:	ee07 3a90 	vmov	s15, r3
 8003c4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003c4e:	ed97 7a00 	vldr	s14, [r7]
 8003c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c56:	4b08      	ldr	r3, [pc, #32]	; (8003c78 <velocity+0xbc>)
 8003c58:	edc3 7a05 	vstr	s15, [r3, #20]

	QEIData.data[1] = QEIData.data[0];
 8003c5c:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <velocity+0xbc>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a05      	ldr	r2, [pc, #20]	; (8003c78 <velocity+0xbc>)
 8003c62:	6053      	str	r3, [r2, #4]
	QEIData.timestamp[1] = QEIData.timestamp[0];
 8003c64:	4b04      	ldr	r3, [pc, #16]	; (8003c78 <velocity+0xbc>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	4a03      	ldr	r2, [pc, #12]	; (8003c78 <velocity+0xbc>)
 8003c6a:	60d3      	str	r3, [r2, #12]

}
 8003c6c:	bf00      	nop
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	20000434 	.word	0x20000434
 8003c78:	20000fb8 	.word	0x20000fb8
 8003c7c:	20001030 	.word	0x20001030
 8003c80:	443b8000 	.word	0x443b8000
 8003c84:	20001034 	.word	0x20001034
 8003c88:	000f4240 	.word	0x000f4240

08003c8c <accelerate>:
void accelerate(){
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
	QEIAcc.data[0] = speed;
 8003c92:	4b20      	ldr	r3, [pc, #128]	; (8003d14 <accelerate+0x88>)
 8003c94:	edd3 7a00 	vldr	s15, [r3]
 8003c98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c9c:	ee17 2a90 	vmov	r2, s15
 8003ca0:	4b1d      	ldr	r3, [pc, #116]	; (8003d18 <accelerate+0x8c>)
 8003ca2:	601a      	str	r2, [r3, #0]
	QEIAcc.timestamp[0] = micros();
 8003ca4:	f000 f856 	bl	8003d54 <micros>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4b1a      	ldr	r3, [pc, #104]	; (8003d18 <accelerate+0x8c>)
 8003cae:	609a      	str	r2, [r3, #8]

	int32_t diffposition = QEIAcc.data[0] - QEIAcc.data[1];
 8003cb0:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <accelerate+0x8c>)
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	4b18      	ldr	r3, [pc, #96]	; (8003d18 <accelerate+0x8c>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	607b      	str	r3, [r7, #4]
	float difftime = QEIAcc.timestamp[0] - QEIAcc.timestamp[1];
 8003cbc:	4b16      	ldr	r3, [pc, #88]	; (8003d18 <accelerate+0x8c>)
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	4b15      	ldr	r3, [pc, #84]	; (8003d18 <accelerate+0x8c>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	ee07 3a90 	vmov	s15, r3
 8003cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cce:	edc7 7a00 	vstr	s15, [r7]
	difftime = difftime/1000000;
 8003cd2:	ed97 7a00 	vldr	s14, [r7]
 8003cd6:	eddf 6a11 	vldr	s13, [pc, #68]	; 8003d1c <accelerate+0x90>
 8003cda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cde:	edc7 7a00 	vstr	s15, [r7]

	QEIAcc.QEIVelocity = (diffposition/difftime);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	ee07 3a90 	vmov	s15, r3
 8003ce8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003cec:	ed97 7a00 	vldr	s14, [r7]
 8003cf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cf4:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <accelerate+0x8c>)
 8003cf6:	edc3 7a05 	vstr	s15, [r3, #20]

	QEIAcc.data[1] = QEIAcc.data[0];
 8003cfa:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <accelerate+0x8c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a06      	ldr	r2, [pc, #24]	; (8003d18 <accelerate+0x8c>)
 8003d00:	6053      	str	r3, [r2, #4]
	QEIAcc.timestamp[1] = QEIAcc.timestamp[0];
 8003d02:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <accelerate+0x8c>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	4a04      	ldr	r2, [pc, #16]	; (8003d18 <accelerate+0x8c>)
 8003d08:	60d3      	str	r3, [r2, #12]
}
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	20000f94 	.word	0x20000f94
 8003d18:	20000fd0 	.word	0x20000fd0
 8003d1c:	49742400 	.word	0x49742400

08003d20 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d20:	b4b0      	push	{r4, r5, r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
	if(htim == &htim5){
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a08      	ldr	r2, [pc, #32]	; (8003d4c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d108      	bne.n	8003d42 <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8003d30:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d36:	1e54      	subs	r4, r2, #1
 8003d38:	f143 0500 	adc.w	r5, r3, #0
 8003d3c:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003d3e:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bcb0      	pop	{r4, r5, r7}
 8003d4a:	4770      	bx	lr
 8003d4c:	20000650 	.word	0x20000650
 8003d50:	20000fe8 	.word	0x20000fe8

08003d54 <micros>:
uint64_t micros(){
 8003d54:	b4b0      	push	{r4, r5, r7}
 8003d56:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8003d58:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <micros+0x2c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	2200      	movs	r2, #0
 8003d60:	4618      	mov	r0, r3
 8003d62:	4611      	mov	r1, r2
 8003d64:	4b07      	ldr	r3, [pc, #28]	; (8003d84 <micros+0x30>)
 8003d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6a:	1884      	adds	r4, r0, r2
 8003d6c:	eb41 0503 	adc.w	r5, r1, r3
 8003d70:	4622      	mov	r2, r4
 8003d72:	462b      	mov	r3, r5
}
 8003d74:	4610      	mov	r0, r2
 8003d76:	4619      	mov	r1, r3
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bcb0      	pop	{r4, r5, r7}
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20000650 	.word	0x20000650
 8003d84:	20000fe8 	.word	0x20000fe8

08003d88 <main_Qubic>:
void main_Qubic(float start_p,float stop_p,float start_v,float stop_v)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08a      	sub	sp, #40	; 0x28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003d92:	edc7 0a02 	vstr	s1, [r7, #8]
 8003d96:	ed87 1a01 	vstr	s2, [r7, #4]
 8003d9a:	edc7 1a00 	vstr	s3, [r7]
  emxArray_real_T *q_acc;
  emxArray_real_T *q_position;
  emxArray_real_T *q_velocity;
  double q_k1_tmp;
  /* Initialize function 'Qubic' input arguments. */
  q_k1_tmp = argInit_real_T();
 8003d9e:	f7fe f999 	bl	80020d4 <argInit_real_T>
 8003da2:	ed87 0b08 	vstr	d0, [r7, #32]
  /* Call the entry-point 'Qubic'. */
  emxInitArray_real_T(&q_position, 2);
 8003da6:	f107 0318 	add.w	r3, r7, #24
 8003daa:	2102      	movs	r1, #2
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fe f8a3 	bl	8001ef8 <emxInitArray_real_T>
  emxInitArray_real_T(&q_velocity, 2);
 8003db2:	f107 0314 	add.w	r3, r7, #20
 8003db6:	2102      	movs	r1, #2
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fe f89d 	bl	8001ef8 <emxInitArray_real_T>
  emxInitArray_real_T(&q_acc, 2);
 8003dbe:	f107 031c 	add.w	r3, r7, #28
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fe f897 	bl	8001ef8 <emxInitArray_real_T>
  Qubic(0, 650, 0, 400, 0.5, q_position,
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	6979      	ldr	r1, [r7, #20]
 8003dce:	69fa      	ldr	r2, [r7, #28]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	ed9f 4b13 	vldr	d4, [pc, #76]	; 8003e20 <main_Qubic+0x98>
 8003dd6:	ed9f 3b14 	vldr	d3, [pc, #80]	; 8003e28 <main_Qubic+0xa0>
 8003dda:	ed9f 2b15 	vldr	d2, [pc, #84]	; 8003e30 <main_Qubic+0xa8>
 8003dde:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8003e38 <main_Qubic+0xb0>
 8003de2:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8003e30 <main_Qubic+0xa8>
 8003de6:	f7fd fcf7 	bl	80017d8 <Qubic>
        q_velocity, q_acc);
  q_positionN = q_position;
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	4a14      	ldr	r2, [pc, #80]	; (8003e40 <main_Qubic+0xb8>)
 8003dee:	6013      	str	r3, [r2, #0]
  q_velocityN = q_velocity;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	4a14      	ldr	r2, [pc, #80]	; (8003e44 <main_Qubic+0xbc>)
 8003df4:	6013      	str	r3, [r2, #0]
  q_accN = q_acc;
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	4a13      	ldr	r2, [pc, #76]	; (8003e48 <main_Qubic+0xc0>)
 8003dfa:	6013      	str	r3, [r2, #0]
  emxDestroyArray_real_T(q_position);
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fe f86e 	bl	8001ee0 <emxDestroyArray_real_T>
  emxDestroyArray_real_T(q_velocity);
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fe f86a 	bl	8001ee0 <emxDestroyArray_real_T>
  emxDestroyArray_real_T(q_acc);
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fe f866 	bl	8001ee0 <emxDestroyArray_real_T>
}
 8003e14:	bf00      	nop
 8003e16:	3728      	adds	r7, #40	; 0x28
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	f3af 8000 	nop.w
 8003e20:	00000000 	.word	0x00000000
 8003e24:	3fe00000 	.word	0x3fe00000
 8003e28:	00000000 	.word	0x00000000
 8003e2c:	40790000 	.word	0x40790000
	...
 8003e3c:	40845000 	.word	0x40845000
 8003e40:	20000ff4 	.word	0x20000ff4
 8003e44:	20000ff0 	.word	0x20000ff0
 8003e48:	20000ff8 	.word	0x20000ff8

08003e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003e50:	b672      	cpsid	i
}
 8003e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e54:	e7fe      	b.n	8003e54 <Error_Handler+0x8>
	...

08003e58 <rtIsInf>:
 * Function: rtIsInf ==================================================
 *  Abstract:
 *  Test if value is infinite
 */
boolean_T rtIsInf(real_T value)
{
 8003e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	ed87 0b00 	vstr	d0, [r7]
  return (isinf(value) != 0U);
 8003e62:	683c      	ldr	r4, [r7, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	461e      	mov	r6, r3
 8003e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e72:	4b0f      	ldr	r3, [pc, #60]	; (8003eb0 <rtIsInf+0x58>)
 8003e74:	4620      	mov	r0, r4
 8003e76:	4629      	mov	r1, r5
 8003e78:	f7fc fe04 	bl	8000a84 <__aeabi_dcmpun>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10b      	bne.n	8003e9a <rtIsInf+0x42>
 8003e82:	f04f 32ff 	mov.w	r2, #4294967295
 8003e86:	4b0a      	ldr	r3, [pc, #40]	; (8003eb0 <rtIsInf+0x58>)
 8003e88:	4620      	mov	r0, r4
 8003e8a:	4629      	mov	r1, r5
 8003e8c:	f7fc fddc 	bl	8000a48 <__aeabi_dcmple>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <rtIsInf+0x42>
 8003e96:	2300      	movs	r3, #0
 8003e98:	461e      	mov	r6, r3
 8003e9a:	b2f3      	uxtb	r3, r6
 8003e9c:	f083 0301 	eor.w	r3, r3, #1
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	b2db      	uxtb	r3, r3
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eb0:	7fefffff 	.word	0x7fefffff

08003eb4 <rtIsNaN>:
 * Function: rtIsNaN ==================================================
 *  Abstract:
 *  Test if value is not a number
 */
boolean_T rtIsNaN(real_T value)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	ed87 0b00 	vstr	d0, [r7]
  return (isnan(value) != 0U);
 8003ebe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ec2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ec6:	f7fc fddd 	bl	8000a84 <__aeabi_dcmpun>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <rtIsNaN+0x20>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <rtIsNaN+0x22>
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
	...

08003ee0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	607b      	str	r3, [r7, #4]
 8003eea:	4b10      	ldr	r3, [pc, #64]	; (8003f2c <HAL_MspInit+0x4c>)
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	4a0f      	ldr	r2, [pc, #60]	; (8003f2c <HAL_MspInit+0x4c>)
 8003ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ef6:	4b0d      	ldr	r3, [pc, #52]	; (8003f2c <HAL_MspInit+0x4c>)
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003efe:	607b      	str	r3, [r7, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <HAL_MspInit+0x4c>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	4a08      	ldr	r2, [pc, #32]	; (8003f2c <HAL_MspInit+0x4c>)
 8003f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f10:	6413      	str	r3, [r2, #64]	; 0x40
 8003f12:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <HAL_MspInit+0x4c>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003f1e:	2007      	movs	r0, #7
 8003f20:	f001 f882 	bl	8005028 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f24:	bf00      	nop
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40023800 	.word	0x40023800

08003f30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b08a      	sub	sp, #40	; 0x28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f38:	f107 0314 	add.w	r3, r7, #20
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	609a      	str	r2, [r3, #8]
 8003f44:	60da      	str	r2, [r3, #12]
 8003f46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a3c      	ldr	r2, [pc, #240]	; (8004040 <HAL_ADC_MspInit+0x110>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d171      	bne.n	8004036 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	4b3b      	ldr	r3, [pc, #236]	; (8004044 <HAL_ADC_MspInit+0x114>)
 8003f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5a:	4a3a      	ldr	r2, [pc, #232]	; (8004044 <HAL_ADC_MspInit+0x114>)
 8003f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f60:	6453      	str	r3, [r2, #68]	; 0x44
 8003f62:	4b38      	ldr	r3, [pc, #224]	; (8004044 <HAL_ADC_MspInit+0x114>)
 8003f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	4b34      	ldr	r3, [pc, #208]	; (8004044 <HAL_ADC_MspInit+0x114>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	4a33      	ldr	r2, [pc, #204]	; (8004044 <HAL_ADC_MspInit+0x114>)
 8003f78:	f043 0301 	orr.w	r3, r3, #1
 8003f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f7e:	4b31      	ldr	r3, [pc, #196]	; (8004044 <HAL_ADC_MspInit+0x114>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	4b2d      	ldr	r3, [pc, #180]	; (8004044 <HAL_ADC_MspInit+0x114>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	4a2c      	ldr	r2, [pc, #176]	; (8004044 <HAL_ADC_MspInit+0x114>)
 8003f94:	f043 0302 	orr.w	r3, r3, #2
 8003f98:	6313      	str	r3, [r2, #48]	; 0x30
 8003f9a:	4b2a      	ldr	r3, [pc, #168]	; (8004044 <HAL_ADC_MspInit+0x114>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	60bb      	str	r3, [r7, #8]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Joystick_Y_Pin;
 8003fa6:	2310      	movs	r3, #16
 8003fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003faa:	2303      	movs	r3, #3
 8003fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Joystick_Y_GPIO_Port, &GPIO_InitStruct);
 8003fb2:	f107 0314 	add.w	r3, r7, #20
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4823      	ldr	r0, [pc, #140]	; (8004048 <HAL_ADC_MspInit+0x118>)
 8003fba:	f001 fc85 	bl	80058c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Joystick_X_Pin;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Joystick_X_GPIO_Port, &GPIO_InitStruct);
 8003fca:	f107 0314 	add.w	r3, r7, #20
 8003fce:	4619      	mov	r1, r3
 8003fd0:	481e      	ldr	r0, [pc, #120]	; (800404c <HAL_ADC_MspInit+0x11c>)
 8003fd2:	f001 fc79 	bl	80058c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003fd6:	4b1e      	ldr	r3, [pc, #120]	; (8004050 <HAL_ADC_MspInit+0x120>)
 8003fd8:	4a1e      	ldr	r2, [pc, #120]	; (8004054 <HAL_ADC_MspInit+0x124>)
 8003fda:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003fdc:	4b1c      	ldr	r3, [pc, #112]	; (8004050 <HAL_ADC_MspInit+0x120>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fe2:	4b1b      	ldr	r3, [pc, #108]	; (8004050 <HAL_ADC_MspInit+0x120>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fe8:	4b19      	ldr	r3, [pc, #100]	; (8004050 <HAL_ADC_MspInit+0x120>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003fee:	4b18      	ldr	r3, [pc, #96]	; (8004050 <HAL_ADC_MspInit+0x120>)
 8003ff0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ff4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003ff6:	4b16      	ldr	r3, [pc, #88]	; (8004050 <HAL_ADC_MspInit+0x120>)
 8003ff8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ffc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003ffe:	4b14      	ldr	r3, [pc, #80]	; (8004050 <HAL_ADC_MspInit+0x120>)
 8004000:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004004:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004006:	4b12      	ldr	r3, [pc, #72]	; (8004050 <HAL_ADC_MspInit+0x120>)
 8004008:	f44f 7280 	mov.w	r2, #256	; 0x100
 800400c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800400e:	4b10      	ldr	r3, [pc, #64]	; (8004050 <HAL_ADC_MspInit+0x120>)
 8004010:	2200      	movs	r2, #0
 8004012:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004014:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <HAL_ADC_MspInit+0x120>)
 8004016:	2200      	movs	r2, #0
 8004018:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800401a:	480d      	ldr	r0, [pc, #52]	; (8004050 <HAL_ADC_MspInit+0x120>)
 800401c:	f001 f846 	bl	80050ac <HAL_DMA_Init>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8004026:	f7ff ff11 	bl	8003e4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a08      	ldr	r2, [pc, #32]	; (8004050 <HAL_ADC_MspInit+0x120>)
 800402e:	639a      	str	r2, [r3, #56]	; 0x38
 8004030:	4a07      	ldr	r2, [pc, #28]	; (8004050 <HAL_ADC_MspInit+0x120>)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004036:	bf00      	nop
 8004038:	3728      	adds	r7, #40	; 0x28
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40012000 	.word	0x40012000
 8004044:	40023800 	.word	0x40023800
 8004048:	40020000 	.word	0x40020000
 800404c:	40020400 	.word	0x40020400
 8004050:	20000380 	.word	0x20000380
 8004054:	40026410 	.word	0x40026410

08004058 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08a      	sub	sp, #40	; 0x28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004060:	f107 0314 	add.w	r3, r7, #20
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	605a      	str	r2, [r3, #4]
 800406a:	609a      	str	r2, [r3, #8]
 800406c:	60da      	str	r2, [r3, #12]
 800406e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a19      	ldr	r2, [pc, #100]	; (80040dc <HAL_I2C_MspInit+0x84>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d12c      	bne.n	80040d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800407a:	2300      	movs	r3, #0
 800407c:	613b      	str	r3, [r7, #16]
 800407e:	4b18      	ldr	r3, [pc, #96]	; (80040e0 <HAL_I2C_MspInit+0x88>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	4a17      	ldr	r2, [pc, #92]	; (80040e0 <HAL_I2C_MspInit+0x88>)
 8004084:	f043 0302 	orr.w	r3, r3, #2
 8004088:	6313      	str	r3, [r2, #48]	; 0x30
 800408a:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <HAL_I2C_MspInit+0x88>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004096:	f44f 7340 	mov.w	r3, #768	; 0x300
 800409a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800409c:	2312      	movs	r3, #18
 800409e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a4:	2303      	movs	r3, #3
 80040a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80040a8:	2304      	movs	r3, #4
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ac:	f107 0314 	add.w	r3, r7, #20
 80040b0:	4619      	mov	r1, r3
 80040b2:	480c      	ldr	r0, [pc, #48]	; (80040e4 <HAL_I2C_MspInit+0x8c>)
 80040b4:	f001 fc08 	bl	80058c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80040b8:	2300      	movs	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	4b08      	ldr	r3, [pc, #32]	; (80040e0 <HAL_I2C_MspInit+0x88>)
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	4a07      	ldr	r2, [pc, #28]	; (80040e0 <HAL_I2C_MspInit+0x88>)
 80040c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040c6:	6413      	str	r3, [r2, #64]	; 0x40
 80040c8:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <HAL_I2C_MspInit+0x88>)
 80040ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80040d4:	bf00      	nop
 80040d6:	3728      	adds	r7, #40	; 0x28
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40005400 	.word	0x40005400
 80040e0:	40023800 	.word	0x40023800
 80040e4:	40020400 	.word	0x40020400

080040e8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08a      	sub	sp, #40	; 0x28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f0:	f107 0314 	add.w	r3, r7, #20
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	605a      	str	r2, [r3, #4]
 80040fa:	609a      	str	r2, [r3, #8]
 80040fc:	60da      	str	r2, [r3, #12]
 80040fe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004108:	d12b      	bne.n	8004162 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800410a:	2300      	movs	r3, #0
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	4b17      	ldr	r3, [pc, #92]	; (800416c <HAL_TIM_Encoder_MspInit+0x84>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	4a16      	ldr	r2, [pc, #88]	; (800416c <HAL_TIM_Encoder_MspInit+0x84>)
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	6413      	str	r3, [r2, #64]	; 0x40
 800411a:	4b14      	ldr	r3, [pc, #80]	; (800416c <HAL_TIM_Encoder_MspInit+0x84>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	613b      	str	r3, [r7, #16]
 8004124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004126:	2300      	movs	r3, #0
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	4b10      	ldr	r3, [pc, #64]	; (800416c <HAL_TIM_Encoder_MspInit+0x84>)
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	4a0f      	ldr	r2, [pc, #60]	; (800416c <HAL_TIM_Encoder_MspInit+0x84>)
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	6313      	str	r3, [r2, #48]	; 0x30
 8004136:	4b0d      	ldr	r3, [pc, #52]	; (800416c <HAL_TIM_Encoder_MspInit+0x84>)
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Encoder_B_Pin|Encoder_A_Pin;
 8004142:	2303      	movs	r3, #3
 8004144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004146:	2302      	movs	r3, #2
 8004148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414a:	2300      	movs	r3, #0
 800414c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800414e:	2300      	movs	r3, #0
 8004150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004152:	2301      	movs	r3, #1
 8004154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004156:	f107 0314 	add.w	r3, r7, #20
 800415a:	4619      	mov	r1, r3
 800415c:	4804      	ldr	r0, [pc, #16]	; (8004170 <HAL_TIM_Encoder_MspInit+0x88>)
 800415e:	f001 fbb3 	bl	80058c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004162:	bf00      	nop
 8004164:	3728      	adds	r7, #40	; 0x28
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40023800 	.word	0x40023800
 8004170:	40020000 	.word	0x40020000

08004174 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a34      	ldr	r2, [pc, #208]	; (8004254 <HAL_TIM_Base_MspInit+0xe0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d116      	bne.n	80041b4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	4b33      	ldr	r3, [pc, #204]	; (8004258 <HAL_TIM_Base_MspInit+0xe4>)
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	4a32      	ldr	r2, [pc, #200]	; (8004258 <HAL_TIM_Base_MspInit+0xe4>)
 8004190:	f043 0302 	orr.w	r3, r3, #2
 8004194:	6413      	str	r3, [r2, #64]	; 0x40
 8004196:	4b30      	ldr	r3, [pc, #192]	; (8004258 <HAL_TIM_Base_MspInit+0xe4>)
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80041a2:	2200      	movs	r2, #0
 80041a4:	2100      	movs	r1, #0
 80041a6:	201d      	movs	r0, #29
 80041a8:	f000 ff49 	bl	800503e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80041ac:	201d      	movs	r0, #29
 80041ae:	f000 ff62 	bl	8005076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80041b2:	e04a      	b.n	800424a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a28      	ldr	r2, [pc, #160]	; (800425c <HAL_TIM_Base_MspInit+0xe8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d116      	bne.n	80041ec <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80041be:	2300      	movs	r3, #0
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	4b25      	ldr	r3, [pc, #148]	; (8004258 <HAL_TIM_Base_MspInit+0xe4>)
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	4a24      	ldr	r2, [pc, #144]	; (8004258 <HAL_TIM_Base_MspInit+0xe4>)
 80041c8:	f043 0304 	orr.w	r3, r3, #4
 80041cc:	6413      	str	r3, [r2, #64]	; 0x40
 80041ce:	4b22      	ldr	r3, [pc, #136]	; (8004258 <HAL_TIM_Base_MspInit+0xe4>)
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	f003 0304 	and.w	r3, r3, #4
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80041da:	2200      	movs	r2, #0
 80041dc:	2100      	movs	r1, #0
 80041de:	201e      	movs	r0, #30
 80041e0:	f000 ff2d 	bl	800503e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80041e4:	201e      	movs	r0, #30
 80041e6:	f000 ff46 	bl	8005076 <HAL_NVIC_EnableIRQ>
}
 80041ea:	e02e      	b.n	800424a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a1b      	ldr	r2, [pc, #108]	; (8004260 <HAL_TIM_Base_MspInit+0xec>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d10e      	bne.n	8004214 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	4b17      	ldr	r3, [pc, #92]	; (8004258 <HAL_TIM_Base_MspInit+0xe4>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	4a16      	ldr	r2, [pc, #88]	; (8004258 <HAL_TIM_Base_MspInit+0xe4>)
 8004200:	f043 0308 	orr.w	r3, r3, #8
 8004204:	6413      	str	r3, [r2, #64]	; 0x40
 8004206:	4b14      	ldr	r3, [pc, #80]	; (8004258 <HAL_TIM_Base_MspInit+0xe4>)
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]
}
 8004212:	e01a      	b.n	800424a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM11)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a12      	ldr	r2, [pc, #72]	; (8004264 <HAL_TIM_Base_MspInit+0xf0>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d115      	bne.n	800424a <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800421e:	2300      	movs	r3, #0
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	4b0d      	ldr	r3, [pc, #52]	; (8004258 <HAL_TIM_Base_MspInit+0xe4>)
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	4a0c      	ldr	r2, [pc, #48]	; (8004258 <HAL_TIM_Base_MspInit+0xe4>)
 8004228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800422c:	6453      	str	r3, [r2, #68]	; 0x44
 800422e:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <HAL_TIM_Base_MspInit+0xe4>)
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004236:	60bb      	str	r3, [r7, #8]
 8004238:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800423a:	2200      	movs	r2, #0
 800423c:	2100      	movs	r1, #0
 800423e:	201a      	movs	r0, #26
 8004240:	f000 fefd 	bl	800503e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004244:	201a      	movs	r0, #26
 8004246:	f000 ff16 	bl	8005076 <HAL_NVIC_EnableIRQ>
}
 800424a:	bf00      	nop
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40000400 	.word	0x40000400
 8004258:	40023800 	.word	0x40023800
 800425c:	40000800 	.word	0x40000800
 8004260:	40000c00 	.word	0x40000c00
 8004264:	40014800 	.word	0x40014800

08004268 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b088      	sub	sp, #32
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004270:	f107 030c 	add.w	r3, r7, #12
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	605a      	str	r2, [r3, #4]
 800427a:	609a      	str	r2, [r3, #8]
 800427c:	60da      	str	r2, [r3, #12]
 800427e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a12      	ldr	r2, [pc, #72]	; (80042d0 <HAL_TIM_MspPostInit+0x68>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d11d      	bne.n	80042c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800428a:	2300      	movs	r3, #0
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	4b11      	ldr	r3, [pc, #68]	; (80042d4 <HAL_TIM_MspPostInit+0x6c>)
 8004290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004292:	4a10      	ldr	r2, [pc, #64]	; (80042d4 <HAL_TIM_MspPostInit+0x6c>)
 8004294:	f043 0302 	orr.w	r3, r3, #2
 8004298:	6313      	str	r3, [r2, #48]	; 0x30
 800429a:	4b0e      	ldr	r3, [pc, #56]	; (80042d4 <HAL_TIM_MspPostInit+0x6c>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	60bb      	str	r3, [r7, #8]
 80042a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80042a6:	2340      	movs	r3, #64	; 0x40
 80042a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042aa:	2302      	movs	r3, #2
 80042ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ae:	2300      	movs	r3, #0
 80042b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b2:	2300      	movs	r3, #0
 80042b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80042b6:	2302      	movs	r3, #2
 80042b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042ba:	f107 030c 	add.w	r3, r7, #12
 80042be:	4619      	mov	r1, r3
 80042c0:	4805      	ldr	r0, [pc, #20]	; (80042d8 <HAL_TIM_MspPostInit+0x70>)
 80042c2:	f001 fb01 	bl	80058c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80042c6:	bf00      	nop
 80042c8:	3720      	adds	r7, #32
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40000800 	.word	0x40000800
 80042d4:	40023800 	.word	0x40023800
 80042d8:	40020400 	.word	0x40020400

080042dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08a      	sub	sp, #40	; 0x28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e4:	f107 0314 	add.w	r3, r7, #20
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	605a      	str	r2, [r3, #4]
 80042ee:	609a      	str	r2, [r3, #8]
 80042f0:	60da      	str	r2, [r3, #12]
 80042f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a34      	ldr	r2, [pc, #208]	; (80043cc <HAL_UART_MspInit+0xf0>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d161      	bne.n	80043c2 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80042fe:	2300      	movs	r3, #0
 8004300:	613b      	str	r3, [r7, #16]
 8004302:	4b33      	ldr	r3, [pc, #204]	; (80043d0 <HAL_UART_MspInit+0xf4>)
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	4a32      	ldr	r2, [pc, #200]	; (80043d0 <HAL_UART_MspInit+0xf4>)
 8004308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800430c:	6413      	str	r3, [r2, #64]	; 0x40
 800430e:	4b30      	ldr	r3, [pc, #192]	; (80043d0 <HAL_UART_MspInit+0xf4>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004316:	613b      	str	r3, [r7, #16]
 8004318:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	4b2c      	ldr	r3, [pc, #176]	; (80043d0 <HAL_UART_MspInit+0xf4>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	4a2b      	ldr	r2, [pc, #172]	; (80043d0 <HAL_UART_MspInit+0xf4>)
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	6313      	str	r3, [r2, #48]	; 0x30
 800432a:	4b29      	ldr	r3, [pc, #164]	; (80043d0 <HAL_UART_MspInit+0xf4>)
 800432c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004336:	230c      	movs	r3, #12
 8004338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800433a:	2302      	movs	r3, #2
 800433c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433e:	2300      	movs	r3, #0
 8004340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004342:	2303      	movs	r3, #3
 8004344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004346:	2307      	movs	r3, #7
 8004348:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800434a:	f107 0314 	add.w	r3, r7, #20
 800434e:	4619      	mov	r1, r3
 8004350:	4820      	ldr	r0, [pc, #128]	; (80043d4 <HAL_UART_MspInit+0xf8>)
 8004352:	f001 fab9 	bl	80058c8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004356:	4b20      	ldr	r3, [pc, #128]	; (80043d8 <HAL_UART_MspInit+0xfc>)
 8004358:	4a20      	ldr	r2, [pc, #128]	; (80043dc <HAL_UART_MspInit+0x100>)
 800435a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800435c:	4b1e      	ldr	r3, [pc, #120]	; (80043d8 <HAL_UART_MspInit+0xfc>)
 800435e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004362:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004364:	4b1c      	ldr	r3, [pc, #112]	; (80043d8 <HAL_UART_MspInit+0xfc>)
 8004366:	2240      	movs	r2, #64	; 0x40
 8004368:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800436a:	4b1b      	ldr	r3, [pc, #108]	; (80043d8 <HAL_UART_MspInit+0xfc>)
 800436c:	2200      	movs	r2, #0
 800436e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004370:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <HAL_UART_MspInit+0xfc>)
 8004372:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004376:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004378:	4b17      	ldr	r3, [pc, #92]	; (80043d8 <HAL_UART_MspInit+0xfc>)
 800437a:	2200      	movs	r2, #0
 800437c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800437e:	4b16      	ldr	r3, [pc, #88]	; (80043d8 <HAL_UART_MspInit+0xfc>)
 8004380:	2200      	movs	r2, #0
 8004382:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004384:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <HAL_UART_MspInit+0xfc>)
 8004386:	2200      	movs	r2, #0
 8004388:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800438a:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <HAL_UART_MspInit+0xfc>)
 800438c:	2200      	movs	r2, #0
 800438e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004390:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <HAL_UART_MspInit+0xfc>)
 8004392:	2200      	movs	r2, #0
 8004394:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004396:	4810      	ldr	r0, [pc, #64]	; (80043d8 <HAL_UART_MspInit+0xfc>)
 8004398:	f000 fe88 	bl	80050ac <HAL_DMA_Init>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80043a2:	f7ff fd53 	bl	8003e4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a0b      	ldr	r2, [pc, #44]	; (80043d8 <HAL_UART_MspInit+0xfc>)
 80043aa:	635a      	str	r2, [r3, #52]	; 0x34
 80043ac:	4a0a      	ldr	r2, [pc, #40]	; (80043d8 <HAL_UART_MspInit+0xfc>)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80043b2:	2200      	movs	r2, #0
 80043b4:	2100      	movs	r1, #0
 80043b6:	2026      	movs	r0, #38	; 0x26
 80043b8:	f000 fe41 	bl	800503e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80043bc:	2026      	movs	r0, #38	; 0x26
 80043be:	f000 fe5a 	bl	8005076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80043c2:	bf00      	nop
 80043c4:	3728      	adds	r7, #40	; 0x28
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40004400 	.word	0x40004400
 80043d0:	40023800 	.word	0x40023800
 80043d4:	40020000 	.word	0x40020000
 80043d8:	2000082c 	.word	0x2000082c
 80043dc:	400260a0 	.word	0x400260a0

080043e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80043e4:	e7fe      	b.n	80043e4 <NMI_Handler+0x4>

080043e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043e6:	b480      	push	{r7}
 80043e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043ea:	e7fe      	b.n	80043ea <HardFault_Handler+0x4>

080043ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043f0:	e7fe      	b.n	80043f0 <MemManage_Handler+0x4>

080043f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043f2:	b480      	push	{r7}
 80043f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043f6:	e7fe      	b.n	80043f6 <BusFault_Handler+0x4>

080043f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043fc:	e7fe      	b.n	80043fc <UsageFault_Handler+0x4>

080043fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043fe:	b480      	push	{r7}
 8004400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004402:	bf00      	nop
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004410:	bf00      	nop
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800441a:	b480      	push	{r7}
 800441c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800441e:	bf00      	nop
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800442c:	f000 f90a 	bl	8004644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004430:	bf00      	nop
 8004432:	bd80      	pop	{r7, pc}

08004434 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004438:	4802      	ldr	r0, [pc, #8]	; (8004444 <DMA1_Stream6_IRQHandler+0x10>)
 800443a:	f000 ffcf 	bl	80053dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800443e:	bf00      	nop
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	2000082c 	.word	0x2000082c

08004448 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800444c:	4802      	ldr	r0, [pc, #8]	; (8004458 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800444e:	f002 fe95 	bl	800717c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004452:	bf00      	nop
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	20000704 	.word	0x20000704

0800445c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004460:	4802      	ldr	r0, [pc, #8]	; (800446c <TIM3_IRQHandler+0x10>)
 8004462:	f002 fe8b 	bl	800717c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004466:	bf00      	nop
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	200004e8 	.word	0x200004e8

08004470 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004474:	4802      	ldr	r0, [pc, #8]	; (8004480 <TIM4_IRQHandler+0x10>)
 8004476:	f002 fe81 	bl	800717c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800447a:	bf00      	nop
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	2000059c 	.word	0x2000059c

08004484 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004488:	4802      	ldr	r0, [pc, #8]	; (8004494 <USART2_IRQHandler+0x10>)
 800448a:	f004 f92d 	bl	80086e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800448e:	bf00      	nop
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	200007b8 	.word	0x200007b8

08004498 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800449c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80044a0:	f001 fbc8 	bl	8005c34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80044a4:	bf00      	nop
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80044ac:	4802      	ldr	r0, [pc, #8]	; (80044b8 <DMA2_Stream0_IRQHandler+0x10>)
 80044ae:	f000 ff95 	bl	80053dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80044b2:	bf00      	nop
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	20000380 	.word	0x20000380

080044bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044c4:	4a14      	ldr	r2, [pc, #80]	; (8004518 <_sbrk+0x5c>)
 80044c6:	4b15      	ldr	r3, [pc, #84]	; (800451c <_sbrk+0x60>)
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044d0:	4b13      	ldr	r3, [pc, #76]	; (8004520 <_sbrk+0x64>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d102      	bne.n	80044de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044d8:	4b11      	ldr	r3, [pc, #68]	; (8004520 <_sbrk+0x64>)
 80044da:	4a12      	ldr	r2, [pc, #72]	; (8004524 <_sbrk+0x68>)
 80044dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044de:	4b10      	ldr	r3, [pc, #64]	; (8004520 <_sbrk+0x64>)
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4413      	add	r3, r2
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d207      	bcs.n	80044fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044ec:	f005 f94a 	bl	8009784 <__errno>
 80044f0:	4603      	mov	r3, r0
 80044f2:	220c      	movs	r2, #12
 80044f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044f6:	f04f 33ff 	mov.w	r3, #4294967295
 80044fa:	e009      	b.n	8004510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044fc:	4b08      	ldr	r3, [pc, #32]	; (8004520 <_sbrk+0x64>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004502:	4b07      	ldr	r3, [pc, #28]	; (8004520 <_sbrk+0x64>)
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4413      	add	r3, r2
 800450a:	4a05      	ldr	r2, [pc, #20]	; (8004520 <_sbrk+0x64>)
 800450c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800450e:	68fb      	ldr	r3, [r7, #12]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	20020000 	.word	0x20020000
 800451c:	00000400 	.word	0x00000400
 8004520:	20001058 	.word	0x20001058
 8004524:	20001070 	.word	0x20001070

08004528 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800452c:	4b06      	ldr	r3, [pc, #24]	; (8004548 <SystemInit+0x20>)
 800452e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004532:	4a05      	ldr	r2, [pc, #20]	; (8004548 <SystemInit+0x20>)
 8004534:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004538:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800453c:	bf00      	nop
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	e000ed00 	.word	0xe000ed00

0800454c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800454c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004584 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004550:	480d      	ldr	r0, [pc, #52]	; (8004588 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004552:	490e      	ldr	r1, [pc, #56]	; (800458c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004554:	4a0e      	ldr	r2, [pc, #56]	; (8004590 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004558:	e002      	b.n	8004560 <LoopCopyDataInit>

0800455a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800455a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800455c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800455e:	3304      	adds	r3, #4

08004560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004564:	d3f9      	bcc.n	800455a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004566:	4a0b      	ldr	r2, [pc, #44]	; (8004594 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004568:	4c0b      	ldr	r4, [pc, #44]	; (8004598 <LoopFillZerobss+0x26>)
  movs r3, #0
 800456a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800456c:	e001      	b.n	8004572 <LoopFillZerobss>

0800456e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800456e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004570:	3204      	adds	r2, #4

08004572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004574:	d3fb      	bcc.n	800456e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004576:	f7ff ffd7 	bl	8004528 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800457a:	f005 f909 	bl	8009790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800457e:	f7fd fdb9 	bl	80020f4 <main>
  bx  lr    
 8004582:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004584:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800458c:	20000318 	.word	0x20000318
  ldr r2, =_sidata
 8004590:	0800c098 	.word	0x0800c098
  ldr r2, =_sbss
 8004594:	20000318 	.word	0x20000318
  ldr r4, =_ebss
 8004598:	20001070 	.word	0x20001070

0800459c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800459c:	e7fe      	b.n	800459c <ADC_IRQHandler>
	...

080045a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045a4:	4b0e      	ldr	r3, [pc, #56]	; (80045e0 <HAL_Init+0x40>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a0d      	ldr	r2, [pc, #52]	; (80045e0 <HAL_Init+0x40>)
 80045aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80045b0:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <HAL_Init+0x40>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a0a      	ldr	r2, [pc, #40]	; (80045e0 <HAL_Init+0x40>)
 80045b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045bc:	4b08      	ldr	r3, [pc, #32]	; (80045e0 <HAL_Init+0x40>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a07      	ldr	r2, [pc, #28]	; (80045e0 <HAL_Init+0x40>)
 80045c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045c8:	2003      	movs	r0, #3
 80045ca:	f000 fd2d 	bl	8005028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045ce:	2000      	movs	r0, #0
 80045d0:	f000 f808 	bl	80045e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045d4:	f7ff fc84 	bl	8003ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40023c00 	.word	0x40023c00

080045e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045ec:	4b12      	ldr	r3, [pc, #72]	; (8004638 <HAL_InitTick+0x54>)
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	4b12      	ldr	r3, [pc, #72]	; (800463c <HAL_InitTick+0x58>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	4619      	mov	r1, r3
 80045f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80045fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fd45 	bl	8005092 <HAL_SYSTICK_Config>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e00e      	b.n	8004630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b0f      	cmp	r3, #15
 8004616:	d80a      	bhi.n	800462e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004618:	2200      	movs	r2, #0
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	f04f 30ff 	mov.w	r0, #4294967295
 8004620:	f000 fd0d 	bl	800503e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004624:	4a06      	ldr	r2, [pc, #24]	; (8004640 <HAL_InitTick+0x5c>)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	e000      	b.n	8004630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
}
 8004630:	4618      	mov	r0, r3
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	200002a8 	.word	0x200002a8
 800463c:	200002b0 	.word	0x200002b0
 8004640:	200002ac 	.word	0x200002ac

08004644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004648:	4b06      	ldr	r3, [pc, #24]	; (8004664 <HAL_IncTick+0x20>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	461a      	mov	r2, r3
 800464e:	4b06      	ldr	r3, [pc, #24]	; (8004668 <HAL_IncTick+0x24>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4413      	add	r3, r2
 8004654:	4a04      	ldr	r2, [pc, #16]	; (8004668 <HAL_IncTick+0x24>)
 8004656:	6013      	str	r3, [r2, #0]
}
 8004658:	bf00      	nop
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	200002b0 	.word	0x200002b0
 8004668:	2000105c 	.word	0x2000105c

0800466c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
  return uwTick;
 8004670:	4b03      	ldr	r3, [pc, #12]	; (8004680 <HAL_GetTick+0x14>)
 8004672:	681b      	ldr	r3, [r3, #0]
}
 8004674:	4618      	mov	r0, r3
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	2000105c 	.word	0x2000105c

08004684 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800468c:	2300      	movs	r3, #0
 800468e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e033      	b.n	8004702 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d109      	bne.n	80046b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7ff fc44 	bl	8003f30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d118      	bne.n	80046f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80046ca:	f023 0302 	bic.w	r3, r3, #2
 80046ce:	f043 0202 	orr.w	r2, r3, #2
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fa58 	bl	8004b8c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	f023 0303 	bic.w	r3, r3, #3
 80046ea:	f043 0201 	orr.w	r2, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	641a      	str	r2, [r3, #64]	; 0x40
 80046f2:	e001      	b.n	80046f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004700:	7bfb      	ldrb	r3, [r7, #15]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
	...

0800470c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004722:	2b01      	cmp	r3, #1
 8004724:	d101      	bne.n	800472a <HAL_ADC_Start_DMA+0x1e>
 8004726:	2302      	movs	r3, #2
 8004728:	e0ce      	b.n	80048c8 <HAL_ADC_Start_DMA+0x1bc>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b01      	cmp	r3, #1
 800473e:	d018      	beq.n	8004772 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0201 	orr.w	r2, r2, #1
 800474e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004750:	4b5f      	ldr	r3, [pc, #380]	; (80048d0 <HAL_ADC_Start_DMA+0x1c4>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a5f      	ldr	r2, [pc, #380]	; (80048d4 <HAL_ADC_Start_DMA+0x1c8>)
 8004756:	fba2 2303 	umull	r2, r3, r2, r3
 800475a:	0c9a      	lsrs	r2, r3, #18
 800475c:	4613      	mov	r3, r2
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	4413      	add	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004764:	e002      	b.n	800476c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	3b01      	subs	r3, #1
 800476a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f9      	bne.n	8004766 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004780:	d107      	bne.n	8004792 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004790:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b01      	cmp	r3, #1
 800479e:	f040 8086 	bne.w	80048ae <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80047aa:	f023 0301 	bic.w	r3, r3, #1
 80047ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d007      	beq.n	80047d4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80047cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e0:	d106      	bne.n	80047f0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e6:	f023 0206 	bic.w	r2, r3, #6
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	645a      	str	r2, [r3, #68]	; 0x44
 80047ee:	e002      	b.n	80047f6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047fe:	4b36      	ldr	r3, [pc, #216]	; (80048d8 <HAL_ADC_Start_DMA+0x1cc>)
 8004800:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	4a35      	ldr	r2, [pc, #212]	; (80048dc <HAL_ADC_Start_DMA+0x1d0>)
 8004808:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480e:	4a34      	ldr	r2, [pc, #208]	; (80048e0 <HAL_ADC_Start_DMA+0x1d4>)
 8004810:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004816:	4a33      	ldr	r2, [pc, #204]	; (80048e4 <HAL_ADC_Start_DMA+0x1d8>)
 8004818:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004822:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004832:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689a      	ldr	r2, [r3, #8]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004842:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	334c      	adds	r3, #76	; 0x4c
 800484e:	4619      	mov	r1, r3
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f000 fcd8 	bl	8005208 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f003 031f 	and.w	r3, r3, #31
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10f      	bne.n	8004884 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d129      	bne.n	80048c6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004880:	609a      	str	r2, [r3, #8]
 8004882:	e020      	b.n	80048c6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a17      	ldr	r2, [pc, #92]	; (80048e8 <HAL_ADC_Start_DMA+0x1dc>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d11b      	bne.n	80048c6 <HAL_ADC_Start_DMA+0x1ba>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d114      	bne.n	80048c6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689a      	ldr	r2, [r3, #8]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80048aa:	609a      	str	r2, [r3, #8]
 80048ac:	e00b      	b.n	80048c6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f043 0210 	orr.w	r2, r3, #16
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048be:	f043 0201 	orr.w	r2, r3, #1
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	200002a8 	.word	0x200002a8
 80048d4:	431bde83 	.word	0x431bde83
 80048d8:	40012300 	.word	0x40012300
 80048dc:	08004d85 	.word	0x08004d85
 80048e0:	08004e3f 	.word	0x08004e3f
 80048e4:	08004e5b 	.word	0x08004e5b
 80048e8:	40012000 	.word	0x40012000

080048ec <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800493c:	2b01      	cmp	r3, #1
 800493e:	d101      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x1c>
 8004940:	2302      	movs	r3, #2
 8004942:	e113      	b.n	8004b6c <HAL_ADC_ConfigChannel+0x244>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b09      	cmp	r3, #9
 8004952:	d925      	bls.n	80049a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68d9      	ldr	r1, [r3, #12]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	b29b      	uxth	r3, r3
 8004960:	461a      	mov	r2, r3
 8004962:	4613      	mov	r3, r2
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	4413      	add	r3, r2
 8004968:	3b1e      	subs	r3, #30
 800496a:	2207      	movs	r2, #7
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	43da      	mvns	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	400a      	ands	r2, r1
 8004978:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68d9      	ldr	r1, [r3, #12]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	b29b      	uxth	r3, r3
 800498a:	4618      	mov	r0, r3
 800498c:	4603      	mov	r3, r0
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	4403      	add	r3, r0
 8004992:	3b1e      	subs	r3, #30
 8004994:	409a      	lsls	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	60da      	str	r2, [r3, #12]
 800499e:	e022      	b.n	80049e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6919      	ldr	r1, [r3, #16]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	461a      	mov	r2, r3
 80049ae:	4613      	mov	r3, r2
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	4413      	add	r3, r2
 80049b4:	2207      	movs	r2, #7
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	43da      	mvns	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	400a      	ands	r2, r1
 80049c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6919      	ldr	r1, [r3, #16]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	4618      	mov	r0, r3
 80049d6:	4603      	mov	r3, r0
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	4403      	add	r3, r0
 80049dc:	409a      	lsls	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b06      	cmp	r3, #6
 80049ec:	d824      	bhi.n	8004a38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	4613      	mov	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	3b05      	subs	r3, #5
 8004a00:	221f      	movs	r2, #31
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	43da      	mvns	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	400a      	ands	r2, r1
 8004a0e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	3b05      	subs	r3, #5
 8004a2a:	fa00 f203 	lsl.w	r2, r0, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	635a      	str	r2, [r3, #52]	; 0x34
 8004a36:	e04c      	b.n	8004ad2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2b0c      	cmp	r3, #12
 8004a3e:	d824      	bhi.n	8004a8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	3b23      	subs	r3, #35	; 0x23
 8004a52:	221f      	movs	r2, #31
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	43da      	mvns	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	400a      	ands	r2, r1
 8004a60:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	4618      	mov	r0, r3
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	4613      	mov	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	3b23      	subs	r3, #35	; 0x23
 8004a7c:	fa00 f203 	lsl.w	r2, r0, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
 8004a88:	e023      	b.n	8004ad2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	4613      	mov	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	3b41      	subs	r3, #65	; 0x41
 8004a9c:	221f      	movs	r2, #31
 8004a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa2:	43da      	mvns	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	400a      	ands	r2, r1
 8004aaa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	4618      	mov	r0, r3
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3b41      	subs	r3, #65	; 0x41
 8004ac6:	fa00 f203 	lsl.w	r2, r0, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ad2:	4b29      	ldr	r3, [pc, #164]	; (8004b78 <HAL_ADC_ConfigChannel+0x250>)
 8004ad4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a28      	ldr	r2, [pc, #160]	; (8004b7c <HAL_ADC_ConfigChannel+0x254>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d10f      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x1d8>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b12      	cmp	r3, #18
 8004ae6:	d10b      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a1d      	ldr	r2, [pc, #116]	; (8004b7c <HAL_ADC_ConfigChannel+0x254>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d12b      	bne.n	8004b62 <HAL_ADC_ConfigChannel+0x23a>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a1c      	ldr	r2, [pc, #112]	; (8004b80 <HAL_ADC_ConfigChannel+0x258>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d003      	beq.n	8004b1c <HAL_ADC_ConfigChannel+0x1f4>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b11      	cmp	r3, #17
 8004b1a:	d122      	bne.n	8004b62 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a11      	ldr	r2, [pc, #68]	; (8004b80 <HAL_ADC_ConfigChannel+0x258>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d111      	bne.n	8004b62 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b3e:	4b11      	ldr	r3, [pc, #68]	; (8004b84 <HAL_ADC_ConfigChannel+0x25c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a11      	ldr	r2, [pc, #68]	; (8004b88 <HAL_ADC_ConfigChannel+0x260>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	0c9a      	lsrs	r2, r3, #18
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004b54:	e002      	b.n	8004b5c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1f9      	bne.n	8004b56 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	40012300 	.word	0x40012300
 8004b7c:	40012000 	.word	0x40012000
 8004b80:	10000012 	.word	0x10000012
 8004b84:	200002a8 	.word	0x200002a8
 8004b88:	431bde83 	.word	0x431bde83

08004b8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b94:	4b79      	ldr	r3, [pc, #484]	; (8004d7c <ADC_Init+0x1f0>)
 8004b96:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	431a      	orrs	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6859      	ldr	r1, [r3, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	021a      	lsls	r2, r3, #8
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004be4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6859      	ldr	r1, [r3, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6899      	ldr	r1, [r3, #8]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1e:	4a58      	ldr	r2, [pc, #352]	; (8004d80 <ADC_Init+0x1f4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d022      	beq.n	8004c6a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6899      	ldr	r1, [r3, #8]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6899      	ldr	r1, [r3, #8]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	609a      	str	r2, [r3, #8]
 8004c68:	e00f      	b.n	8004c8a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c88:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0202 	bic.w	r2, r2, #2
 8004c98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6899      	ldr	r1, [r3, #8]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	7e1b      	ldrb	r3, [r3, #24]
 8004ca4:	005a      	lsls	r2, r3, #1
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d01b      	beq.n	8004cf0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cc6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004cd6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6859      	ldr	r1, [r3, #4]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	035a      	lsls	r2, r3, #13
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	605a      	str	r2, [r3, #4]
 8004cee:	e007      	b.n	8004d00 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cfe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	051a      	lsls	r2, r3, #20
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6899      	ldr	r1, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d42:	025a      	lsls	r2, r3, #9
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689a      	ldr	r2, [r3, #8]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6899      	ldr	r1, [r3, #8]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	029a      	lsls	r2, r3, #10
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	609a      	str	r2, [r3, #8]
}
 8004d70:	bf00      	nop
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	40012300 	.word	0x40012300
 8004d80:	0f000001 	.word	0x0f000001

08004d84 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d13c      	bne.n	8004e18 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d12b      	bne.n	8004e10 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d127      	bne.n	8004e10 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d006      	beq.n	8004ddc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d119      	bne.n	8004e10 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0220 	bic.w	r2, r2, #32
 8004dea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d105      	bne.n	8004e10 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e08:	f043 0201 	orr.w	r2, r3, #1
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f7ff fd6b 	bl	80048ec <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004e16:	e00e      	b.n	8004e36 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	f003 0310 	and.w	r3, r3, #16
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f7ff fd75 	bl	8004914 <HAL_ADC_ErrorCallback>
}
 8004e2a:	e004      	b.n	8004e36 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	4798      	blx	r3
}
 8004e36:	bf00      	nop
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b084      	sub	sp, #16
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f7ff fd57 	bl	8004900 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e52:	bf00      	nop
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b084      	sub	sp, #16
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2240      	movs	r2, #64	; 0x40
 8004e6c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e72:	f043 0204 	orr.w	r2, r3, #4
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f7ff fd4a 	bl	8004914 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e80:	bf00      	nop
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <__NVIC_SetPriorityGrouping>:
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e98:	4b0c      	ldr	r3, [pc, #48]	; (8004ecc <__NVIC_SetPriorityGrouping+0x44>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004eba:	4a04      	ldr	r2, [pc, #16]	; (8004ecc <__NVIC_SetPriorityGrouping+0x44>)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	60d3      	str	r3, [r2, #12]
}
 8004ec0:	bf00      	nop
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	e000ed00 	.word	0xe000ed00

08004ed0 <__NVIC_GetPriorityGrouping>:
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ed4:	4b04      	ldr	r3, [pc, #16]	; (8004ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	0a1b      	lsrs	r3, r3, #8
 8004eda:	f003 0307 	and.w	r3, r3, #7
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	e000ed00 	.word	0xe000ed00

08004eec <__NVIC_EnableIRQ>:
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	db0b      	blt.n	8004f16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004efe:	79fb      	ldrb	r3, [r7, #7]
 8004f00:	f003 021f 	and.w	r2, r3, #31
 8004f04:	4907      	ldr	r1, [pc, #28]	; (8004f24 <__NVIC_EnableIRQ+0x38>)
 8004f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f0a:	095b      	lsrs	r3, r3, #5
 8004f0c:	2001      	movs	r0, #1
 8004f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	e000e100 	.word	0xe000e100

08004f28 <__NVIC_SetPriority>:
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	6039      	str	r1, [r7, #0]
 8004f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	db0a      	blt.n	8004f52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	490c      	ldr	r1, [pc, #48]	; (8004f74 <__NVIC_SetPriority+0x4c>)
 8004f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f46:	0112      	lsls	r2, r2, #4
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004f50:	e00a      	b.n	8004f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	4908      	ldr	r1, [pc, #32]	; (8004f78 <__NVIC_SetPriority+0x50>)
 8004f58:	79fb      	ldrb	r3, [r7, #7]
 8004f5a:	f003 030f 	and.w	r3, r3, #15
 8004f5e:	3b04      	subs	r3, #4
 8004f60:	0112      	lsls	r2, r2, #4
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	440b      	add	r3, r1
 8004f66:	761a      	strb	r2, [r3, #24]
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	e000e100 	.word	0xe000e100
 8004f78:	e000ed00 	.word	0xe000ed00

08004f7c <NVIC_EncodePriority>:
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b089      	sub	sp, #36	; 0x24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f003 0307 	and.w	r3, r3, #7
 8004f8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	f1c3 0307 	rsb	r3, r3, #7
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	bf28      	it	cs
 8004f9a:	2304      	movcs	r3, #4
 8004f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	2b06      	cmp	r3, #6
 8004fa4:	d902      	bls.n	8004fac <NVIC_EncodePriority+0x30>
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	3b03      	subs	r3, #3
 8004faa:	e000      	b.n	8004fae <NVIC_EncodePriority+0x32>
 8004fac:	2300      	movs	r3, #0
 8004fae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	43da      	mvns	r2, r3
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	401a      	ands	r2, r3
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	fa01 f303 	lsl.w	r3, r1, r3
 8004fce:	43d9      	mvns	r1, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fd4:	4313      	orrs	r3, r2
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3724      	adds	r7, #36	; 0x24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
	...

08004fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ff4:	d301      	bcc.n	8004ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e00f      	b.n	800501a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ffa:	4a0a      	ldr	r2, [pc, #40]	; (8005024 <SysTick_Config+0x40>)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005002:	210f      	movs	r1, #15
 8005004:	f04f 30ff 	mov.w	r0, #4294967295
 8005008:	f7ff ff8e 	bl	8004f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800500c:	4b05      	ldr	r3, [pc, #20]	; (8005024 <SysTick_Config+0x40>)
 800500e:	2200      	movs	r2, #0
 8005010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005012:	4b04      	ldr	r3, [pc, #16]	; (8005024 <SysTick_Config+0x40>)
 8005014:	2207      	movs	r2, #7
 8005016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	e000e010 	.word	0xe000e010

08005028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7ff ff29 	bl	8004e88 <__NVIC_SetPriorityGrouping>
}
 8005036:	bf00      	nop
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800503e:	b580      	push	{r7, lr}
 8005040:	b086      	sub	sp, #24
 8005042:	af00      	add	r7, sp, #0
 8005044:	4603      	mov	r3, r0
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	607a      	str	r2, [r7, #4]
 800504a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800504c:	2300      	movs	r3, #0
 800504e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005050:	f7ff ff3e 	bl	8004ed0 <__NVIC_GetPriorityGrouping>
 8005054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	68b9      	ldr	r1, [r7, #8]
 800505a:	6978      	ldr	r0, [r7, #20]
 800505c:	f7ff ff8e 	bl	8004f7c <NVIC_EncodePriority>
 8005060:	4602      	mov	r2, r0
 8005062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005066:	4611      	mov	r1, r2
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff ff5d 	bl	8004f28 <__NVIC_SetPriority>
}
 800506e:	bf00      	nop
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b082      	sub	sp, #8
 800507a:	af00      	add	r7, sp, #0
 800507c:	4603      	mov	r3, r0
 800507e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005084:	4618      	mov	r0, r3
 8005086:	f7ff ff31 	bl	8004eec <__NVIC_EnableIRQ>
}
 800508a:	bf00      	nop
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b082      	sub	sp, #8
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7ff ffa2 	bl	8004fe4 <SysTick_Config>
 80050a0:	4603      	mov	r3, r0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
	...

080050ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80050b8:	f7ff fad8 	bl	800466c <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e099      	b.n	80051fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 0201 	bic.w	r2, r2, #1
 80050e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050e8:	e00f      	b.n	800510a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050ea:	f7ff fabf 	bl	800466c <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b05      	cmp	r3, #5
 80050f6:	d908      	bls.n	800510a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2203      	movs	r2, #3
 8005102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e078      	b.n	80051fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1e8      	bne.n	80050ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	4b38      	ldr	r3, [pc, #224]	; (8005204 <HAL_DMA_Init+0x158>)
 8005124:	4013      	ands	r3, r2
 8005126:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005136:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005142:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800514e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	4313      	orrs	r3, r2
 800515a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	2b04      	cmp	r3, #4
 8005162:	d107      	bne.n	8005174 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516c:	4313      	orrs	r3, r2
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f023 0307 	bic.w	r3, r3, #7
 800518a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	2b04      	cmp	r3, #4
 800519c:	d117      	bne.n	80051ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00e      	beq.n	80051ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fb0d 	bl	80057d0 <DMA_CheckFifoParam>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d008      	beq.n	80051ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2240      	movs	r2, #64	; 0x40
 80051c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80051ca:	2301      	movs	r3, #1
 80051cc:	e016      	b.n	80051fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fac4 	bl	8005764 <DMA_CalcBaseAndBitshift>
 80051dc:	4603      	mov	r3, r0
 80051de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e4:	223f      	movs	r2, #63	; 0x3f
 80051e6:	409a      	lsls	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	f010803f 	.word	0xf010803f

08005208 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005226:	2b01      	cmp	r3, #1
 8005228:	d101      	bne.n	800522e <HAL_DMA_Start_IT+0x26>
 800522a:	2302      	movs	r3, #2
 800522c:	e040      	b.n	80052b0 <HAL_DMA_Start_IT+0xa8>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b01      	cmp	r3, #1
 8005240:	d12f      	bne.n	80052a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2202      	movs	r2, #2
 8005246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	68b9      	ldr	r1, [r7, #8]
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fa56 	bl	8005708 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005260:	223f      	movs	r2, #63	; 0x3f
 8005262:	409a      	lsls	r2, r3
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0216 	orr.w	r2, r2, #22
 8005276:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527c:	2b00      	cmp	r3, #0
 800527e:	d007      	beq.n	8005290 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0208 	orr.w	r2, r2, #8
 800528e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	e005      	b.n	80052ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80052aa:	2302      	movs	r3, #2
 80052ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80052ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3718      	adds	r7, #24
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80052c6:	f7ff f9d1 	bl	800466c <HAL_GetTick>
 80052ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d008      	beq.n	80052ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2280      	movs	r2, #128	; 0x80
 80052dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e052      	b.n	8005390 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0216 	bic.w	r2, r2, #22
 80052f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	695a      	ldr	r2, [r3, #20]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005308:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	2b00      	cmp	r3, #0
 8005310:	d103      	bne.n	800531a <HAL_DMA_Abort+0x62>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005316:	2b00      	cmp	r3, #0
 8005318:	d007      	beq.n	800532a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0208 	bic.w	r2, r2, #8
 8005328:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0201 	bic.w	r2, r2, #1
 8005338:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800533a:	e013      	b.n	8005364 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800533c:	f7ff f996 	bl	800466c <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b05      	cmp	r3, #5
 8005348:	d90c      	bls.n	8005364 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2220      	movs	r2, #32
 800534e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2203      	movs	r2, #3
 8005354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e015      	b.n	8005390 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e4      	bne.n	800533c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005376:	223f      	movs	r2, #63	; 0x3f
 8005378:	409a      	lsls	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d004      	beq.n	80053b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2280      	movs	r2, #128	; 0x80
 80053b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e00c      	b.n	80053d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2205      	movs	r2, #5
 80053ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0201 	bic.w	r2, r2, #1
 80053cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80053e8:	4b8e      	ldr	r3, [pc, #568]	; (8005624 <HAL_DMA_IRQHandler+0x248>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a8e      	ldr	r2, [pc, #568]	; (8005628 <HAL_DMA_IRQHandler+0x24c>)
 80053ee:	fba2 2303 	umull	r2, r3, r2, r3
 80053f2:	0a9b      	lsrs	r3, r3, #10
 80053f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005406:	2208      	movs	r2, #8
 8005408:	409a      	lsls	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4013      	ands	r3, r2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d01a      	beq.n	8005448 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b00      	cmp	r3, #0
 800541e:	d013      	beq.n	8005448 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0204 	bic.w	r2, r2, #4
 800542e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005434:	2208      	movs	r2, #8
 8005436:	409a      	lsls	r2, r3
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005440:	f043 0201 	orr.w	r2, r3, #1
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800544c:	2201      	movs	r2, #1
 800544e:	409a      	lsls	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4013      	ands	r3, r2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d012      	beq.n	800547e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00b      	beq.n	800547e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546a:	2201      	movs	r2, #1
 800546c:	409a      	lsls	r2, r3
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005476:	f043 0202 	orr.w	r2, r3, #2
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005482:	2204      	movs	r2, #4
 8005484:	409a      	lsls	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4013      	ands	r3, r2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d012      	beq.n	80054b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00b      	beq.n	80054b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a0:	2204      	movs	r2, #4
 80054a2:	409a      	lsls	r2, r3
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ac:	f043 0204 	orr.w	r2, r3, #4
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b8:	2210      	movs	r2, #16
 80054ba:	409a      	lsls	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4013      	ands	r3, r2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d043      	beq.n	800554c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0308 	and.w	r3, r3, #8
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d03c      	beq.n	800554c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d6:	2210      	movs	r2, #16
 80054d8:	409a      	lsls	r2, r3
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d018      	beq.n	800551e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d108      	bne.n	800550c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d024      	beq.n	800554c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	4798      	blx	r3
 800550a:	e01f      	b.n	800554c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005510:	2b00      	cmp	r3, #0
 8005512:	d01b      	beq.n	800554c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	4798      	blx	r3
 800551c:	e016      	b.n	800554c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005528:	2b00      	cmp	r3, #0
 800552a:	d107      	bne.n	800553c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0208 	bic.w	r2, r2, #8
 800553a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005550:	2220      	movs	r2, #32
 8005552:	409a      	lsls	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4013      	ands	r3, r2
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 808f 	beq.w	800567c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0310 	and.w	r3, r3, #16
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 8087 	beq.w	800567c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005572:	2220      	movs	r2, #32
 8005574:	409a      	lsls	r2, r3
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b05      	cmp	r3, #5
 8005584:	d136      	bne.n	80055f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0216 	bic.w	r2, r2, #22
 8005594:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	695a      	ldr	r2, [r3, #20]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d103      	bne.n	80055b6 <HAL_DMA_IRQHandler+0x1da>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d007      	beq.n	80055c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0208 	bic.w	r2, r2, #8
 80055c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ca:	223f      	movs	r2, #63	; 0x3f
 80055cc:	409a      	lsls	r2, r3
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d07e      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	4798      	blx	r3
        }
        return;
 80055f2:	e079      	b.n	80056e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d01d      	beq.n	800563e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10d      	bne.n	800562c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005614:	2b00      	cmp	r3, #0
 8005616:	d031      	beq.n	800567c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	4798      	blx	r3
 8005620:	e02c      	b.n	800567c <HAL_DMA_IRQHandler+0x2a0>
 8005622:	bf00      	nop
 8005624:	200002a8 	.word	0x200002a8
 8005628:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005630:	2b00      	cmp	r3, #0
 8005632:	d023      	beq.n	800567c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	4798      	blx	r3
 800563c:	e01e      	b.n	800567c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10f      	bne.n	800566c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0210 	bic.w	r2, r2, #16
 800565a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005680:	2b00      	cmp	r3, #0
 8005682:	d032      	beq.n	80056ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d022      	beq.n	80056d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2205      	movs	r2, #5
 8005694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0201 	bic.w	r2, r2, #1
 80056a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	3301      	adds	r3, #1
 80056ac:	60bb      	str	r3, [r7, #8]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d307      	bcc.n	80056c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1f2      	bne.n	80056a8 <HAL_DMA_IRQHandler+0x2cc>
 80056c2:	e000      	b.n	80056c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80056c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d005      	beq.n	80056ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	4798      	blx	r3
 80056e6:	e000      	b.n	80056ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80056e8:	bf00      	nop
    }
  }
}
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
 8005714:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005724:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	2b40      	cmp	r3, #64	; 0x40
 8005734:	d108      	bne.n	8005748 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005746:	e007      	b.n	8005758 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	60da      	str	r2, [r3, #12]
}
 8005758:	bf00      	nop
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	b2db      	uxtb	r3, r3
 8005772:	3b10      	subs	r3, #16
 8005774:	4a14      	ldr	r2, [pc, #80]	; (80057c8 <DMA_CalcBaseAndBitshift+0x64>)
 8005776:	fba2 2303 	umull	r2, r3, r2, r3
 800577a:	091b      	lsrs	r3, r3, #4
 800577c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800577e:	4a13      	ldr	r2, [pc, #76]	; (80057cc <DMA_CalcBaseAndBitshift+0x68>)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4413      	add	r3, r2
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	461a      	mov	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2b03      	cmp	r3, #3
 8005790:	d909      	bls.n	80057a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800579a:	f023 0303 	bic.w	r3, r3, #3
 800579e:	1d1a      	adds	r2, r3, #4
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	659a      	str	r2, [r3, #88]	; 0x58
 80057a4:	e007      	b.n	80057b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80057ae:	f023 0303 	bic.w	r3, r3, #3
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	aaaaaaab 	.word	0xaaaaaaab
 80057cc:	0800be70 	.word	0x0800be70

080057d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057d8:	2300      	movs	r3, #0
 80057da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d11f      	bne.n	800582a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	2b03      	cmp	r3, #3
 80057ee:	d856      	bhi.n	800589e <DMA_CheckFifoParam+0xce>
 80057f0:	a201      	add	r2, pc, #4	; (adr r2, 80057f8 <DMA_CheckFifoParam+0x28>)
 80057f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f6:	bf00      	nop
 80057f8:	08005809 	.word	0x08005809
 80057fc:	0800581b 	.word	0x0800581b
 8005800:	08005809 	.word	0x08005809
 8005804:	0800589f 	.word	0x0800589f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d046      	beq.n	80058a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005818:	e043      	b.n	80058a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005822:	d140      	bne.n	80058a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005828:	e03d      	b.n	80058a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005832:	d121      	bne.n	8005878 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	2b03      	cmp	r3, #3
 8005838:	d837      	bhi.n	80058aa <DMA_CheckFifoParam+0xda>
 800583a:	a201      	add	r2, pc, #4	; (adr r2, 8005840 <DMA_CheckFifoParam+0x70>)
 800583c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005840:	08005851 	.word	0x08005851
 8005844:	08005857 	.word	0x08005857
 8005848:	08005851 	.word	0x08005851
 800584c:	08005869 	.word	0x08005869
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	73fb      	strb	r3, [r7, #15]
      break;
 8005854:	e030      	b.n	80058b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d025      	beq.n	80058ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005866:	e022      	b.n	80058ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005870:	d11f      	bne.n	80058b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005876:	e01c      	b.n	80058b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2b02      	cmp	r3, #2
 800587c:	d903      	bls.n	8005886 <DMA_CheckFifoParam+0xb6>
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2b03      	cmp	r3, #3
 8005882:	d003      	beq.n	800588c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005884:	e018      	b.n	80058b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	73fb      	strb	r3, [r7, #15]
      break;
 800588a:	e015      	b.n	80058b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00e      	beq.n	80058b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	73fb      	strb	r3, [r7, #15]
      break;
 800589c:	e00b      	b.n	80058b6 <DMA_CheckFifoParam+0xe6>
      break;
 800589e:	bf00      	nop
 80058a0:	e00a      	b.n	80058b8 <DMA_CheckFifoParam+0xe8>
      break;
 80058a2:	bf00      	nop
 80058a4:	e008      	b.n	80058b8 <DMA_CheckFifoParam+0xe8>
      break;
 80058a6:	bf00      	nop
 80058a8:	e006      	b.n	80058b8 <DMA_CheckFifoParam+0xe8>
      break;
 80058aa:	bf00      	nop
 80058ac:	e004      	b.n	80058b8 <DMA_CheckFifoParam+0xe8>
      break;
 80058ae:	bf00      	nop
 80058b0:	e002      	b.n	80058b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80058b2:	bf00      	nop
 80058b4:	e000      	b.n	80058b8 <DMA_CheckFifoParam+0xe8>
      break;
 80058b6:	bf00      	nop
    }
  } 
  
  return status; 
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop

080058c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b089      	sub	sp, #36	; 0x24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80058da:	2300      	movs	r3, #0
 80058dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058de:	2300      	movs	r3, #0
 80058e0:	61fb      	str	r3, [r7, #28]
 80058e2:	e159      	b.n	8005b98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80058e4:	2201      	movs	r2, #1
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	4013      	ands	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	f040 8148 	bne.w	8005b92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f003 0303 	and.w	r3, r3, #3
 800590a:	2b01      	cmp	r3, #1
 800590c:	d005      	beq.n	800591a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005916:	2b02      	cmp	r3, #2
 8005918:	d130      	bne.n	800597c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	005b      	lsls	r3, r3, #1
 8005924:	2203      	movs	r2, #3
 8005926:	fa02 f303 	lsl.w	r3, r2, r3
 800592a:	43db      	mvns	r3, r3
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	4013      	ands	r3, r2
 8005930:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	fa02 f303 	lsl.w	r3, r2, r3
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	4313      	orrs	r3, r2
 8005942:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005950:	2201      	movs	r2, #1
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	fa02 f303 	lsl.w	r3, r2, r3
 8005958:	43db      	mvns	r3, r3
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	4013      	ands	r3, r2
 800595e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	091b      	lsrs	r3, r3, #4
 8005966:	f003 0201 	and.w	r2, r3, #1
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	fa02 f303 	lsl.w	r3, r2, r3
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	4313      	orrs	r3, r2
 8005974:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f003 0303 	and.w	r3, r3, #3
 8005984:	2b03      	cmp	r3, #3
 8005986:	d017      	beq.n	80059b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	2203      	movs	r2, #3
 8005994:	fa02 f303 	lsl.w	r3, r2, r3
 8005998:	43db      	mvns	r3, r3
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	4013      	ands	r3, r2
 800599e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f003 0303 	and.w	r3, r3, #3
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d123      	bne.n	8005a0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	08da      	lsrs	r2, r3, #3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	3208      	adds	r2, #8
 80059cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	f003 0307 	and.w	r3, r3, #7
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	220f      	movs	r2, #15
 80059dc:	fa02 f303 	lsl.w	r3, r2, r3
 80059e0:	43db      	mvns	r3, r3
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	4013      	ands	r3, r2
 80059e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	691a      	ldr	r2, [r3, #16]
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	f003 0307 	and.w	r3, r3, #7
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	08da      	lsrs	r2, r3, #3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	3208      	adds	r2, #8
 8005a06:	69b9      	ldr	r1, [r7, #24]
 8005a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	2203      	movs	r2, #3
 8005a18:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1c:	43db      	mvns	r3, r3
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	4013      	ands	r3, r2
 8005a22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f003 0203 	and.w	r2, r3, #3
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	fa02 f303 	lsl.w	r3, r2, r3
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 80a2 	beq.w	8005b92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	4b57      	ldr	r3, [pc, #348]	; (8005bb0 <HAL_GPIO_Init+0x2e8>)
 8005a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a56:	4a56      	ldr	r2, [pc, #344]	; (8005bb0 <HAL_GPIO_Init+0x2e8>)
 8005a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8005a5e:	4b54      	ldr	r3, [pc, #336]	; (8005bb0 <HAL_GPIO_Init+0x2e8>)
 8005a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a6a:	4a52      	ldr	r2, [pc, #328]	; (8005bb4 <HAL_GPIO_Init+0x2ec>)
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	089b      	lsrs	r3, r3, #2
 8005a70:	3302      	adds	r3, #2
 8005a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	220f      	movs	r2, #15
 8005a82:	fa02 f303 	lsl.w	r3, r2, r3
 8005a86:	43db      	mvns	r3, r3
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a49      	ldr	r2, [pc, #292]	; (8005bb8 <HAL_GPIO_Init+0x2f0>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d019      	beq.n	8005aca <HAL_GPIO_Init+0x202>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a48      	ldr	r2, [pc, #288]	; (8005bbc <HAL_GPIO_Init+0x2f4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d013      	beq.n	8005ac6 <HAL_GPIO_Init+0x1fe>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a47      	ldr	r2, [pc, #284]	; (8005bc0 <HAL_GPIO_Init+0x2f8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d00d      	beq.n	8005ac2 <HAL_GPIO_Init+0x1fa>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a46      	ldr	r2, [pc, #280]	; (8005bc4 <HAL_GPIO_Init+0x2fc>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d007      	beq.n	8005abe <HAL_GPIO_Init+0x1f6>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a45      	ldr	r2, [pc, #276]	; (8005bc8 <HAL_GPIO_Init+0x300>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d101      	bne.n	8005aba <HAL_GPIO_Init+0x1f2>
 8005ab6:	2304      	movs	r3, #4
 8005ab8:	e008      	b.n	8005acc <HAL_GPIO_Init+0x204>
 8005aba:	2307      	movs	r3, #7
 8005abc:	e006      	b.n	8005acc <HAL_GPIO_Init+0x204>
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e004      	b.n	8005acc <HAL_GPIO_Init+0x204>
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	e002      	b.n	8005acc <HAL_GPIO_Init+0x204>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e000      	b.n	8005acc <HAL_GPIO_Init+0x204>
 8005aca:	2300      	movs	r3, #0
 8005acc:	69fa      	ldr	r2, [r7, #28]
 8005ace:	f002 0203 	and.w	r2, r2, #3
 8005ad2:	0092      	lsls	r2, r2, #2
 8005ad4:	4093      	lsls	r3, r2
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005adc:	4935      	ldr	r1, [pc, #212]	; (8005bb4 <HAL_GPIO_Init+0x2ec>)
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	089b      	lsrs	r3, r3, #2
 8005ae2:	3302      	adds	r3, #2
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005aea:	4b38      	ldr	r3, [pc, #224]	; (8005bcc <HAL_GPIO_Init+0x304>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	43db      	mvns	r3, r3
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	4013      	ands	r3, r2
 8005af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b0e:	4a2f      	ldr	r2, [pc, #188]	; (8005bcc <HAL_GPIO_Init+0x304>)
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b14:	4b2d      	ldr	r3, [pc, #180]	; (8005bcc <HAL_GPIO_Init+0x304>)
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	43db      	mvns	r3, r3
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	4013      	ands	r3, r2
 8005b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b38:	4a24      	ldr	r2, [pc, #144]	; (8005bcc <HAL_GPIO_Init+0x304>)
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b3e:	4b23      	ldr	r3, [pc, #140]	; (8005bcc <HAL_GPIO_Init+0x304>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	43db      	mvns	r3, r3
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b62:	4a1a      	ldr	r2, [pc, #104]	; (8005bcc <HAL_GPIO_Init+0x304>)
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b68:	4b18      	ldr	r3, [pc, #96]	; (8005bcc <HAL_GPIO_Init+0x304>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	43db      	mvns	r3, r3
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	4013      	ands	r3, r2
 8005b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b8c:	4a0f      	ldr	r2, [pc, #60]	; (8005bcc <HAL_GPIO_Init+0x304>)
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	3301      	adds	r3, #1
 8005b96:	61fb      	str	r3, [r7, #28]
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	2b0f      	cmp	r3, #15
 8005b9c:	f67f aea2 	bls.w	80058e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ba0:	bf00      	nop
 8005ba2:	bf00      	nop
 8005ba4:	3724      	adds	r7, #36	; 0x24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	40023800 	.word	0x40023800
 8005bb4:	40013800 	.word	0x40013800
 8005bb8:	40020000 	.word	0x40020000
 8005bbc:	40020400 	.word	0x40020400
 8005bc0:	40020800 	.word	0x40020800
 8005bc4:	40020c00 	.word	0x40020c00
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	40013c00 	.word	0x40013c00

08005bd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691a      	ldr	r2, [r3, #16]
 8005be0:	887b      	ldrh	r3, [r7, #2]
 8005be2:	4013      	ands	r3, r2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005be8:	2301      	movs	r3, #1
 8005bea:	73fb      	strb	r3, [r7, #15]
 8005bec:	e001      	b.n	8005bf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	460b      	mov	r3, r1
 8005c0a:	807b      	strh	r3, [r7, #2]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c10:	787b      	ldrb	r3, [r7, #1]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c16:	887a      	ldrh	r2, [r7, #2]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005c1c:	e003      	b.n	8005c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005c1e:	887b      	ldrh	r3, [r7, #2]
 8005c20:	041a      	lsls	r2, r3, #16
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	619a      	str	r2, [r3, #24]
}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
	...

08005c34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005c3e:	4b08      	ldr	r3, [pc, #32]	; (8005c60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c40:	695a      	ldr	r2, [r3, #20]
 8005c42:	88fb      	ldrh	r3, [r7, #6]
 8005c44:	4013      	ands	r3, r2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d006      	beq.n	8005c58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c4a:	4a05      	ldr	r2, [pc, #20]	; (8005c60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c4c:	88fb      	ldrh	r3, [r7, #6]
 8005c4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c50:	88fb      	ldrh	r3, [r7, #6]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 f806 	bl	8005c64 <HAL_GPIO_EXTI_Callback>
  }
}
 8005c58:	bf00      	nop
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	40013c00 	.word	0x40013c00

08005c64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005c6e:	bf00      	nop
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
	...

08005c7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e12b      	b.n	8005ee6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d106      	bne.n	8005ca8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7fe f9d8 	bl	8004058 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2224      	movs	r2, #36	; 0x24
 8005cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0201 	bic.w	r2, r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ce0:	f000 fd80 	bl	80067e4 <HAL_RCC_GetPCLK1Freq>
 8005ce4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	4a81      	ldr	r2, [pc, #516]	; (8005ef0 <HAL_I2C_Init+0x274>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d807      	bhi.n	8005d00 <HAL_I2C_Init+0x84>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4a80      	ldr	r2, [pc, #512]	; (8005ef4 <HAL_I2C_Init+0x278>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	bf94      	ite	ls
 8005cf8:	2301      	movls	r3, #1
 8005cfa:	2300      	movhi	r3, #0
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	e006      	b.n	8005d0e <HAL_I2C_Init+0x92>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4a7d      	ldr	r2, [pc, #500]	; (8005ef8 <HAL_I2C_Init+0x27c>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	bf94      	ite	ls
 8005d08:	2301      	movls	r3, #1
 8005d0a:	2300      	movhi	r3, #0
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e0e7      	b.n	8005ee6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4a78      	ldr	r2, [pc, #480]	; (8005efc <HAL_I2C_Init+0x280>)
 8005d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1e:	0c9b      	lsrs	r3, r3, #18
 8005d20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	430a      	orrs	r2, r1
 8005d34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	4a6a      	ldr	r2, [pc, #424]	; (8005ef0 <HAL_I2C_Init+0x274>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d802      	bhi.n	8005d50 <HAL_I2C_Init+0xd4>
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	e009      	b.n	8005d64 <HAL_I2C_Init+0xe8>
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005d56:	fb02 f303 	mul.w	r3, r2, r3
 8005d5a:	4a69      	ldr	r2, [pc, #420]	; (8005f00 <HAL_I2C_Init+0x284>)
 8005d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d60:	099b      	lsrs	r3, r3, #6
 8005d62:	3301      	adds	r3, #1
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6812      	ldr	r2, [r2, #0]
 8005d68:	430b      	orrs	r3, r1
 8005d6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005d76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	495c      	ldr	r1, [pc, #368]	; (8005ef0 <HAL_I2C_Init+0x274>)
 8005d80:	428b      	cmp	r3, r1
 8005d82:	d819      	bhi.n	8005db8 <HAL_I2C_Init+0x13c>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	1e59      	subs	r1, r3, #1
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d92:	1c59      	adds	r1, r3, #1
 8005d94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005d98:	400b      	ands	r3, r1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00a      	beq.n	8005db4 <HAL_I2C_Init+0x138>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	1e59      	subs	r1, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	005b      	lsls	r3, r3, #1
 8005da8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005dac:	3301      	adds	r3, #1
 8005dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005db2:	e051      	b.n	8005e58 <HAL_I2C_Init+0x1dc>
 8005db4:	2304      	movs	r3, #4
 8005db6:	e04f      	b.n	8005e58 <HAL_I2C_Init+0x1dc>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d111      	bne.n	8005de4 <HAL_I2C_Init+0x168>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	1e58      	subs	r0, r3, #1
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6859      	ldr	r1, [r3, #4]
 8005dc8:	460b      	mov	r3, r1
 8005dca:	005b      	lsls	r3, r3, #1
 8005dcc:	440b      	add	r3, r1
 8005dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	bf0c      	ite	eq
 8005ddc:	2301      	moveq	r3, #1
 8005dde:	2300      	movne	r3, #0
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	e012      	b.n	8005e0a <HAL_I2C_Init+0x18e>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	1e58      	subs	r0, r3, #1
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6859      	ldr	r1, [r3, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	440b      	add	r3, r1
 8005df2:	0099      	lsls	r1, r3, #2
 8005df4:	440b      	add	r3, r1
 8005df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	bf0c      	ite	eq
 8005e04:	2301      	moveq	r3, #1
 8005e06:	2300      	movne	r3, #0
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <HAL_I2C_Init+0x196>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e022      	b.n	8005e58 <HAL_I2C_Init+0x1dc>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10e      	bne.n	8005e38 <HAL_I2C_Init+0x1bc>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	1e58      	subs	r0, r3, #1
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6859      	ldr	r1, [r3, #4]
 8005e22:	460b      	mov	r3, r1
 8005e24:	005b      	lsls	r3, r3, #1
 8005e26:	440b      	add	r3, r1
 8005e28:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e36:	e00f      	b.n	8005e58 <HAL_I2C_Init+0x1dc>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	1e58      	subs	r0, r3, #1
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6859      	ldr	r1, [r3, #4]
 8005e40:	460b      	mov	r3, r1
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	440b      	add	r3, r1
 8005e46:	0099      	lsls	r1, r3, #2
 8005e48:	440b      	add	r3, r1
 8005e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e4e:	3301      	adds	r3, #1
 8005e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e58:	6879      	ldr	r1, [r7, #4]
 8005e5a:	6809      	ldr	r1, [r1, #0]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	69da      	ldr	r2, [r3, #28]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	431a      	orrs	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005e86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	6911      	ldr	r1, [r2, #16]
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	68d2      	ldr	r2, [r2, #12]
 8005e92:	4311      	orrs	r1, r2
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	6812      	ldr	r2, [r2, #0]
 8005e98:	430b      	orrs	r3, r1
 8005e9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	695a      	ldr	r2, [r3, #20]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0201 	orr.w	r2, r2, #1
 8005ec6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	000186a0 	.word	0x000186a0
 8005ef4:	001e847f 	.word	0x001e847f
 8005ef8:	003d08ff 	.word	0x003d08ff
 8005efc:	431bde83 	.word	0x431bde83
 8005f00:	10624dd3 	.word	0x10624dd3

08005f04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e267      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d075      	beq.n	800600e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f22:	4b88      	ldr	r3, [pc, #544]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 030c 	and.w	r3, r3, #12
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d00c      	beq.n	8005f48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f2e:	4b85      	ldr	r3, [pc, #532]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d112      	bne.n	8005f60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f3a:	4b82      	ldr	r3, [pc, #520]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f46:	d10b      	bne.n	8005f60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f48:	4b7e      	ldr	r3, [pc, #504]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d05b      	beq.n	800600c <HAL_RCC_OscConfig+0x108>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d157      	bne.n	800600c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e242      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f68:	d106      	bne.n	8005f78 <HAL_RCC_OscConfig+0x74>
 8005f6a:	4b76      	ldr	r3, [pc, #472]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a75      	ldr	r2, [pc, #468]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 8005f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	e01d      	b.n	8005fb4 <HAL_RCC_OscConfig+0xb0>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f80:	d10c      	bne.n	8005f9c <HAL_RCC_OscConfig+0x98>
 8005f82:	4b70      	ldr	r3, [pc, #448]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a6f      	ldr	r2, [pc, #444]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 8005f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f8c:	6013      	str	r3, [r2, #0]
 8005f8e:	4b6d      	ldr	r3, [pc, #436]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a6c      	ldr	r2, [pc, #432]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 8005f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f98:	6013      	str	r3, [r2, #0]
 8005f9a:	e00b      	b.n	8005fb4 <HAL_RCC_OscConfig+0xb0>
 8005f9c:	4b69      	ldr	r3, [pc, #420]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a68      	ldr	r2, [pc, #416]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 8005fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	4b66      	ldr	r3, [pc, #408]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a65      	ldr	r2, [pc, #404]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 8005fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d013      	beq.n	8005fe4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fbc:	f7fe fb56 	bl	800466c <HAL_GetTick>
 8005fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fc4:	f7fe fb52 	bl	800466c <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b64      	cmp	r3, #100	; 0x64
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e207      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fd6:	4b5b      	ldr	r3, [pc, #364]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0f0      	beq.n	8005fc4 <HAL_RCC_OscConfig+0xc0>
 8005fe2:	e014      	b.n	800600e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe4:	f7fe fb42 	bl	800466c <HAL_GetTick>
 8005fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fea:	e008      	b.n	8005ffe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fec:	f7fe fb3e 	bl	800466c <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b64      	cmp	r3, #100	; 0x64
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e1f3      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ffe:	4b51      	ldr	r3, [pc, #324]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1f0      	bne.n	8005fec <HAL_RCC_OscConfig+0xe8>
 800600a:	e000      	b.n	800600e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800600c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d063      	beq.n	80060e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800601a:	4b4a      	ldr	r3, [pc, #296]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f003 030c 	and.w	r3, r3, #12
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00b      	beq.n	800603e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006026:	4b47      	ldr	r3, [pc, #284]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800602e:	2b08      	cmp	r3, #8
 8006030:	d11c      	bne.n	800606c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006032:	4b44      	ldr	r3, [pc, #272]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d116      	bne.n	800606c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800603e:	4b41      	ldr	r3, [pc, #260]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d005      	beq.n	8006056 <HAL_RCC_OscConfig+0x152>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d001      	beq.n	8006056 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e1c7      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006056:	4b3b      	ldr	r3, [pc, #236]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	4937      	ldr	r1, [pc, #220]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 8006066:	4313      	orrs	r3, r2
 8006068:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800606a:	e03a      	b.n	80060e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d020      	beq.n	80060b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006074:	4b34      	ldr	r3, [pc, #208]	; (8006148 <HAL_RCC_OscConfig+0x244>)
 8006076:	2201      	movs	r2, #1
 8006078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800607a:	f7fe faf7 	bl	800466c <HAL_GetTick>
 800607e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006080:	e008      	b.n	8006094 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006082:	f7fe faf3 	bl	800466c <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d901      	bls.n	8006094 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e1a8      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006094:	4b2b      	ldr	r3, [pc, #172]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d0f0      	beq.n	8006082 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060a0:	4b28      	ldr	r3, [pc, #160]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	4925      	ldr	r1, [pc, #148]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	600b      	str	r3, [r1, #0]
 80060b4:	e015      	b.n	80060e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060b6:	4b24      	ldr	r3, [pc, #144]	; (8006148 <HAL_RCC_OscConfig+0x244>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060bc:	f7fe fad6 	bl	800466c <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060c2:	e008      	b.n	80060d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060c4:	f7fe fad2 	bl	800466c <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e187      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060d6:	4b1b      	ldr	r3, [pc, #108]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1f0      	bne.n	80060c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0308 	and.w	r3, r3, #8
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d036      	beq.n	800615c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d016      	beq.n	8006124 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060f6:	4b15      	ldr	r3, [pc, #84]	; (800614c <HAL_RCC_OscConfig+0x248>)
 80060f8:	2201      	movs	r2, #1
 80060fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060fc:	f7fe fab6 	bl	800466c <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006102:	e008      	b.n	8006116 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006104:	f7fe fab2 	bl	800466c <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e167      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006116:	4b0b      	ldr	r3, [pc, #44]	; (8006144 <HAL_RCC_OscConfig+0x240>)
 8006118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0f0      	beq.n	8006104 <HAL_RCC_OscConfig+0x200>
 8006122:	e01b      	b.n	800615c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006124:	4b09      	ldr	r3, [pc, #36]	; (800614c <HAL_RCC_OscConfig+0x248>)
 8006126:	2200      	movs	r2, #0
 8006128:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800612a:	f7fe fa9f 	bl	800466c <HAL_GetTick>
 800612e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006130:	e00e      	b.n	8006150 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006132:	f7fe fa9b 	bl	800466c <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2b02      	cmp	r3, #2
 800613e:	d907      	bls.n	8006150 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e150      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
 8006144:	40023800 	.word	0x40023800
 8006148:	42470000 	.word	0x42470000
 800614c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006150:	4b88      	ldr	r3, [pc, #544]	; (8006374 <HAL_RCC_OscConfig+0x470>)
 8006152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1ea      	bne.n	8006132 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0304 	and.w	r3, r3, #4
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 8097 	beq.w	8006298 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800616a:	2300      	movs	r3, #0
 800616c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800616e:	4b81      	ldr	r3, [pc, #516]	; (8006374 <HAL_RCC_OscConfig+0x470>)
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10f      	bne.n	800619a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800617a:	2300      	movs	r3, #0
 800617c:	60bb      	str	r3, [r7, #8]
 800617e:	4b7d      	ldr	r3, [pc, #500]	; (8006374 <HAL_RCC_OscConfig+0x470>)
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	4a7c      	ldr	r2, [pc, #496]	; (8006374 <HAL_RCC_OscConfig+0x470>)
 8006184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006188:	6413      	str	r3, [r2, #64]	; 0x40
 800618a:	4b7a      	ldr	r3, [pc, #488]	; (8006374 <HAL_RCC_OscConfig+0x470>)
 800618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006192:	60bb      	str	r3, [r7, #8]
 8006194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006196:	2301      	movs	r3, #1
 8006198:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800619a:	4b77      	ldr	r3, [pc, #476]	; (8006378 <HAL_RCC_OscConfig+0x474>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d118      	bne.n	80061d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061a6:	4b74      	ldr	r3, [pc, #464]	; (8006378 <HAL_RCC_OscConfig+0x474>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a73      	ldr	r2, [pc, #460]	; (8006378 <HAL_RCC_OscConfig+0x474>)
 80061ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061b2:	f7fe fa5b 	bl	800466c <HAL_GetTick>
 80061b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061b8:	e008      	b.n	80061cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061ba:	f7fe fa57 	bl	800466c <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d901      	bls.n	80061cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e10c      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061cc:	4b6a      	ldr	r3, [pc, #424]	; (8006378 <HAL_RCC_OscConfig+0x474>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0f0      	beq.n	80061ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d106      	bne.n	80061ee <HAL_RCC_OscConfig+0x2ea>
 80061e0:	4b64      	ldr	r3, [pc, #400]	; (8006374 <HAL_RCC_OscConfig+0x470>)
 80061e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e4:	4a63      	ldr	r2, [pc, #396]	; (8006374 <HAL_RCC_OscConfig+0x470>)
 80061e6:	f043 0301 	orr.w	r3, r3, #1
 80061ea:	6713      	str	r3, [r2, #112]	; 0x70
 80061ec:	e01c      	b.n	8006228 <HAL_RCC_OscConfig+0x324>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	2b05      	cmp	r3, #5
 80061f4:	d10c      	bne.n	8006210 <HAL_RCC_OscConfig+0x30c>
 80061f6:	4b5f      	ldr	r3, [pc, #380]	; (8006374 <HAL_RCC_OscConfig+0x470>)
 80061f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fa:	4a5e      	ldr	r2, [pc, #376]	; (8006374 <HAL_RCC_OscConfig+0x470>)
 80061fc:	f043 0304 	orr.w	r3, r3, #4
 8006200:	6713      	str	r3, [r2, #112]	; 0x70
 8006202:	4b5c      	ldr	r3, [pc, #368]	; (8006374 <HAL_RCC_OscConfig+0x470>)
 8006204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006206:	4a5b      	ldr	r2, [pc, #364]	; (8006374 <HAL_RCC_OscConfig+0x470>)
 8006208:	f043 0301 	orr.w	r3, r3, #1
 800620c:	6713      	str	r3, [r2, #112]	; 0x70
 800620e:	e00b      	b.n	8006228 <HAL_RCC_OscConfig+0x324>
 8006210:	4b58      	ldr	r3, [pc, #352]	; (8006374 <HAL_RCC_OscConfig+0x470>)
 8006212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006214:	4a57      	ldr	r2, [pc, #348]	; (8006374 <HAL_RCC_OscConfig+0x470>)
 8006216:	f023 0301 	bic.w	r3, r3, #1
 800621a:	6713      	str	r3, [r2, #112]	; 0x70
 800621c:	4b55      	ldr	r3, [pc, #340]	; (8006374 <HAL_RCC_OscConfig+0x470>)
 800621e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006220:	4a54      	ldr	r2, [pc, #336]	; (8006374 <HAL_RCC_OscConfig+0x470>)
 8006222:	f023 0304 	bic.w	r3, r3, #4
 8006226:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d015      	beq.n	800625c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006230:	f7fe fa1c 	bl	800466c <HAL_GetTick>
 8006234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006236:	e00a      	b.n	800624e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006238:	f7fe fa18 	bl	800466c <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	f241 3288 	movw	r2, #5000	; 0x1388
 8006246:	4293      	cmp	r3, r2
 8006248:	d901      	bls.n	800624e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e0cb      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800624e:	4b49      	ldr	r3, [pc, #292]	; (8006374 <HAL_RCC_OscConfig+0x470>)
 8006250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0ee      	beq.n	8006238 <HAL_RCC_OscConfig+0x334>
 800625a:	e014      	b.n	8006286 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800625c:	f7fe fa06 	bl	800466c <HAL_GetTick>
 8006260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006262:	e00a      	b.n	800627a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006264:	f7fe fa02 	bl	800466c <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006272:	4293      	cmp	r3, r2
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e0b5      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800627a:	4b3e      	ldr	r3, [pc, #248]	; (8006374 <HAL_RCC_OscConfig+0x470>)
 800627c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1ee      	bne.n	8006264 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006286:	7dfb      	ldrb	r3, [r7, #23]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d105      	bne.n	8006298 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800628c:	4b39      	ldr	r3, [pc, #228]	; (8006374 <HAL_RCC_OscConfig+0x470>)
 800628e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006290:	4a38      	ldr	r2, [pc, #224]	; (8006374 <HAL_RCC_OscConfig+0x470>)
 8006292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006296:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 80a1 	beq.w	80063e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062a2:	4b34      	ldr	r3, [pc, #208]	; (8006374 <HAL_RCC_OscConfig+0x470>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 030c 	and.w	r3, r3, #12
 80062aa:	2b08      	cmp	r3, #8
 80062ac:	d05c      	beq.n	8006368 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d141      	bne.n	800633a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062b6:	4b31      	ldr	r3, [pc, #196]	; (800637c <HAL_RCC_OscConfig+0x478>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062bc:	f7fe f9d6 	bl	800466c <HAL_GetTick>
 80062c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062c2:	e008      	b.n	80062d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062c4:	f7fe f9d2 	bl	800466c <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e087      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062d6:	4b27      	ldr	r3, [pc, #156]	; (8006374 <HAL_RCC_OscConfig+0x470>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1f0      	bne.n	80062c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	69da      	ldr	r2, [r3, #28]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	431a      	orrs	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f0:	019b      	lsls	r3, r3, #6
 80062f2:	431a      	orrs	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f8:	085b      	lsrs	r3, r3, #1
 80062fa:	3b01      	subs	r3, #1
 80062fc:	041b      	lsls	r3, r3, #16
 80062fe:	431a      	orrs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	061b      	lsls	r3, r3, #24
 8006306:	491b      	ldr	r1, [pc, #108]	; (8006374 <HAL_RCC_OscConfig+0x470>)
 8006308:	4313      	orrs	r3, r2
 800630a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800630c:	4b1b      	ldr	r3, [pc, #108]	; (800637c <HAL_RCC_OscConfig+0x478>)
 800630e:	2201      	movs	r2, #1
 8006310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006312:	f7fe f9ab 	bl	800466c <HAL_GetTick>
 8006316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006318:	e008      	b.n	800632c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800631a:	f7fe f9a7 	bl	800466c <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	2b02      	cmp	r3, #2
 8006326:	d901      	bls.n	800632c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e05c      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800632c:	4b11      	ldr	r3, [pc, #68]	; (8006374 <HAL_RCC_OscConfig+0x470>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d0f0      	beq.n	800631a <HAL_RCC_OscConfig+0x416>
 8006338:	e054      	b.n	80063e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800633a:	4b10      	ldr	r3, [pc, #64]	; (800637c <HAL_RCC_OscConfig+0x478>)
 800633c:	2200      	movs	r2, #0
 800633e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006340:	f7fe f994 	bl	800466c <HAL_GetTick>
 8006344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006346:	e008      	b.n	800635a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006348:	f7fe f990 	bl	800466c <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	2b02      	cmp	r3, #2
 8006354:	d901      	bls.n	800635a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e045      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800635a:	4b06      	ldr	r3, [pc, #24]	; (8006374 <HAL_RCC_OscConfig+0x470>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1f0      	bne.n	8006348 <HAL_RCC_OscConfig+0x444>
 8006366:	e03d      	b.n	80063e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d107      	bne.n	8006380 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e038      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
 8006374:	40023800 	.word	0x40023800
 8006378:	40007000 	.word	0x40007000
 800637c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006380:	4b1b      	ldr	r3, [pc, #108]	; (80063f0 <HAL_RCC_OscConfig+0x4ec>)
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d028      	beq.n	80063e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006398:	429a      	cmp	r2, r3
 800639a:	d121      	bne.n	80063e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d11a      	bne.n	80063e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80063b0:	4013      	ands	r3, r2
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80063b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d111      	bne.n	80063e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c6:	085b      	lsrs	r3, r3, #1
 80063c8:	3b01      	subs	r3, #1
 80063ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d107      	bne.n	80063e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063dc:	429a      	cmp	r2, r3
 80063de:	d001      	beq.n	80063e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e000      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3718      	adds	r7, #24
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	40023800 	.word	0x40023800

080063f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e0cc      	b.n	80065a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006408:	4b68      	ldr	r3, [pc, #416]	; (80065ac <HAL_RCC_ClockConfig+0x1b8>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0307 	and.w	r3, r3, #7
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	429a      	cmp	r2, r3
 8006414:	d90c      	bls.n	8006430 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006416:	4b65      	ldr	r3, [pc, #404]	; (80065ac <HAL_RCC_ClockConfig+0x1b8>)
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	b2d2      	uxtb	r2, r2
 800641c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800641e:	4b63      	ldr	r3, [pc, #396]	; (80065ac <HAL_RCC_ClockConfig+0x1b8>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0307 	and.w	r3, r3, #7
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	429a      	cmp	r2, r3
 800642a:	d001      	beq.n	8006430 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e0b8      	b.n	80065a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0302 	and.w	r3, r3, #2
 8006438:	2b00      	cmp	r3, #0
 800643a:	d020      	beq.n	800647e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b00      	cmp	r3, #0
 8006446:	d005      	beq.n	8006454 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006448:	4b59      	ldr	r3, [pc, #356]	; (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	4a58      	ldr	r2, [pc, #352]	; (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 800644e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006452:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0308 	and.w	r3, r3, #8
 800645c:	2b00      	cmp	r3, #0
 800645e:	d005      	beq.n	800646c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006460:	4b53      	ldr	r3, [pc, #332]	; (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	4a52      	ldr	r2, [pc, #328]	; (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006466:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800646a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800646c:	4b50      	ldr	r3, [pc, #320]	; (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	494d      	ldr	r1, [pc, #308]	; (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 800647a:	4313      	orrs	r3, r2
 800647c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d044      	beq.n	8006514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d107      	bne.n	80064a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006492:	4b47      	ldr	r3, [pc, #284]	; (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d119      	bne.n	80064d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e07f      	b.n	80065a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d003      	beq.n	80064b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064ae:	2b03      	cmp	r3, #3
 80064b0:	d107      	bne.n	80064c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064b2:	4b3f      	ldr	r3, [pc, #252]	; (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d109      	bne.n	80064d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e06f      	b.n	80065a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064c2:	4b3b      	ldr	r3, [pc, #236]	; (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0302 	and.w	r3, r3, #2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e067      	b.n	80065a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064d2:	4b37      	ldr	r3, [pc, #220]	; (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f023 0203 	bic.w	r2, r3, #3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	4934      	ldr	r1, [pc, #208]	; (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064e4:	f7fe f8c2 	bl	800466c <HAL_GetTick>
 80064e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ea:	e00a      	b.n	8006502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064ec:	f7fe f8be 	bl	800466c <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e04f      	b.n	80065a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006502:	4b2b      	ldr	r3, [pc, #172]	; (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f003 020c 	and.w	r2, r3, #12
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	429a      	cmp	r2, r3
 8006512:	d1eb      	bne.n	80064ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006514:	4b25      	ldr	r3, [pc, #148]	; (80065ac <HAL_RCC_ClockConfig+0x1b8>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	429a      	cmp	r2, r3
 8006520:	d20c      	bcs.n	800653c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006522:	4b22      	ldr	r3, [pc, #136]	; (80065ac <HAL_RCC_ClockConfig+0x1b8>)
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	b2d2      	uxtb	r2, r2
 8006528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800652a:	4b20      	ldr	r3, [pc, #128]	; (80065ac <HAL_RCC_ClockConfig+0x1b8>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0307 	and.w	r3, r3, #7
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	429a      	cmp	r2, r3
 8006536:	d001      	beq.n	800653c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e032      	b.n	80065a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	2b00      	cmp	r3, #0
 8006546:	d008      	beq.n	800655a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006548:	4b19      	ldr	r3, [pc, #100]	; (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	4916      	ldr	r1, [pc, #88]	; (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006556:	4313      	orrs	r3, r2
 8006558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0308 	and.w	r3, r3, #8
 8006562:	2b00      	cmp	r3, #0
 8006564:	d009      	beq.n	800657a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006566:	4b12      	ldr	r3, [pc, #72]	; (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	00db      	lsls	r3, r3, #3
 8006574:	490e      	ldr	r1, [pc, #56]	; (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006576:	4313      	orrs	r3, r2
 8006578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800657a:	f000 f821 	bl	80065c0 <HAL_RCC_GetSysClockFreq>
 800657e:	4602      	mov	r2, r0
 8006580:	4b0b      	ldr	r3, [pc, #44]	; (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	091b      	lsrs	r3, r3, #4
 8006586:	f003 030f 	and.w	r3, r3, #15
 800658a:	490a      	ldr	r1, [pc, #40]	; (80065b4 <HAL_RCC_ClockConfig+0x1c0>)
 800658c:	5ccb      	ldrb	r3, [r1, r3]
 800658e:	fa22 f303 	lsr.w	r3, r2, r3
 8006592:	4a09      	ldr	r2, [pc, #36]	; (80065b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006596:	4b09      	ldr	r3, [pc, #36]	; (80065bc <HAL_RCC_ClockConfig+0x1c8>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4618      	mov	r0, r3
 800659c:	f7fe f822 	bl	80045e4 <HAL_InitTick>

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	40023c00 	.word	0x40023c00
 80065b0:	40023800 	.word	0x40023800
 80065b4:	0800be58 	.word	0x0800be58
 80065b8:	200002a8 	.word	0x200002a8
 80065bc:	200002ac 	.word	0x200002ac

080065c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065c4:	b094      	sub	sp, #80	; 0x50
 80065c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	647b      	str	r3, [r7, #68]	; 0x44
 80065cc:	2300      	movs	r3, #0
 80065ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065d0:	2300      	movs	r3, #0
 80065d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80065d4:	2300      	movs	r3, #0
 80065d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065d8:	4b79      	ldr	r3, [pc, #484]	; (80067c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f003 030c 	and.w	r3, r3, #12
 80065e0:	2b08      	cmp	r3, #8
 80065e2:	d00d      	beq.n	8006600 <HAL_RCC_GetSysClockFreq+0x40>
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	f200 80e1 	bhi.w	80067ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d002      	beq.n	80065f4 <HAL_RCC_GetSysClockFreq+0x34>
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d003      	beq.n	80065fa <HAL_RCC_GetSysClockFreq+0x3a>
 80065f2:	e0db      	b.n	80067ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065f4:	4b73      	ldr	r3, [pc, #460]	; (80067c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80065f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80065f8:	e0db      	b.n	80067b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065fa:	4b73      	ldr	r3, [pc, #460]	; (80067c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80065fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065fe:	e0d8      	b.n	80067b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006600:	4b6f      	ldr	r3, [pc, #444]	; (80067c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006608:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800660a:	4b6d      	ldr	r3, [pc, #436]	; (80067c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d063      	beq.n	80066de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006616:	4b6a      	ldr	r3, [pc, #424]	; (80067c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	099b      	lsrs	r3, r3, #6
 800661c:	2200      	movs	r2, #0
 800661e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006620:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006628:	633b      	str	r3, [r7, #48]	; 0x30
 800662a:	2300      	movs	r3, #0
 800662c:	637b      	str	r3, [r7, #52]	; 0x34
 800662e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006632:	4622      	mov	r2, r4
 8006634:	462b      	mov	r3, r5
 8006636:	f04f 0000 	mov.w	r0, #0
 800663a:	f04f 0100 	mov.w	r1, #0
 800663e:	0159      	lsls	r1, r3, #5
 8006640:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006644:	0150      	lsls	r0, r2, #5
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	4621      	mov	r1, r4
 800664c:	1a51      	subs	r1, r2, r1
 800664e:	6139      	str	r1, [r7, #16]
 8006650:	4629      	mov	r1, r5
 8006652:	eb63 0301 	sbc.w	r3, r3, r1
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	f04f 0200 	mov.w	r2, #0
 800665c:	f04f 0300 	mov.w	r3, #0
 8006660:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006664:	4659      	mov	r1, fp
 8006666:	018b      	lsls	r3, r1, #6
 8006668:	4651      	mov	r1, sl
 800666a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800666e:	4651      	mov	r1, sl
 8006670:	018a      	lsls	r2, r1, #6
 8006672:	4651      	mov	r1, sl
 8006674:	ebb2 0801 	subs.w	r8, r2, r1
 8006678:	4659      	mov	r1, fp
 800667a:	eb63 0901 	sbc.w	r9, r3, r1
 800667e:	f04f 0200 	mov.w	r2, #0
 8006682:	f04f 0300 	mov.w	r3, #0
 8006686:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800668a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800668e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006692:	4690      	mov	r8, r2
 8006694:	4699      	mov	r9, r3
 8006696:	4623      	mov	r3, r4
 8006698:	eb18 0303 	adds.w	r3, r8, r3
 800669c:	60bb      	str	r3, [r7, #8]
 800669e:	462b      	mov	r3, r5
 80066a0:	eb49 0303 	adc.w	r3, r9, r3
 80066a4:	60fb      	str	r3, [r7, #12]
 80066a6:	f04f 0200 	mov.w	r2, #0
 80066aa:	f04f 0300 	mov.w	r3, #0
 80066ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80066b2:	4629      	mov	r1, r5
 80066b4:	024b      	lsls	r3, r1, #9
 80066b6:	4621      	mov	r1, r4
 80066b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80066bc:	4621      	mov	r1, r4
 80066be:	024a      	lsls	r2, r1, #9
 80066c0:	4610      	mov	r0, r2
 80066c2:	4619      	mov	r1, r3
 80066c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066c6:	2200      	movs	r2, #0
 80066c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80066ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066d0:	f7fa fa86 	bl	8000be0 <__aeabi_uldivmod>
 80066d4:	4602      	mov	r2, r0
 80066d6:	460b      	mov	r3, r1
 80066d8:	4613      	mov	r3, r2
 80066da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066dc:	e058      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066de:	4b38      	ldr	r3, [pc, #224]	; (80067c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	099b      	lsrs	r3, r3, #6
 80066e4:	2200      	movs	r2, #0
 80066e6:	4618      	mov	r0, r3
 80066e8:	4611      	mov	r1, r2
 80066ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80066ee:	623b      	str	r3, [r7, #32]
 80066f0:	2300      	movs	r3, #0
 80066f2:	627b      	str	r3, [r7, #36]	; 0x24
 80066f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80066f8:	4642      	mov	r2, r8
 80066fa:	464b      	mov	r3, r9
 80066fc:	f04f 0000 	mov.w	r0, #0
 8006700:	f04f 0100 	mov.w	r1, #0
 8006704:	0159      	lsls	r1, r3, #5
 8006706:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800670a:	0150      	lsls	r0, r2, #5
 800670c:	4602      	mov	r2, r0
 800670e:	460b      	mov	r3, r1
 8006710:	4641      	mov	r1, r8
 8006712:	ebb2 0a01 	subs.w	sl, r2, r1
 8006716:	4649      	mov	r1, r9
 8006718:	eb63 0b01 	sbc.w	fp, r3, r1
 800671c:	f04f 0200 	mov.w	r2, #0
 8006720:	f04f 0300 	mov.w	r3, #0
 8006724:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006728:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800672c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006730:	ebb2 040a 	subs.w	r4, r2, sl
 8006734:	eb63 050b 	sbc.w	r5, r3, fp
 8006738:	f04f 0200 	mov.w	r2, #0
 800673c:	f04f 0300 	mov.w	r3, #0
 8006740:	00eb      	lsls	r3, r5, #3
 8006742:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006746:	00e2      	lsls	r2, r4, #3
 8006748:	4614      	mov	r4, r2
 800674a:	461d      	mov	r5, r3
 800674c:	4643      	mov	r3, r8
 800674e:	18e3      	adds	r3, r4, r3
 8006750:	603b      	str	r3, [r7, #0]
 8006752:	464b      	mov	r3, r9
 8006754:	eb45 0303 	adc.w	r3, r5, r3
 8006758:	607b      	str	r3, [r7, #4]
 800675a:	f04f 0200 	mov.w	r2, #0
 800675e:	f04f 0300 	mov.w	r3, #0
 8006762:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006766:	4629      	mov	r1, r5
 8006768:	028b      	lsls	r3, r1, #10
 800676a:	4621      	mov	r1, r4
 800676c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006770:	4621      	mov	r1, r4
 8006772:	028a      	lsls	r2, r1, #10
 8006774:	4610      	mov	r0, r2
 8006776:	4619      	mov	r1, r3
 8006778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800677a:	2200      	movs	r2, #0
 800677c:	61bb      	str	r3, [r7, #24]
 800677e:	61fa      	str	r2, [r7, #28]
 8006780:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006784:	f7fa fa2c 	bl	8000be0 <__aeabi_uldivmod>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4613      	mov	r3, r2
 800678e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006790:	4b0b      	ldr	r3, [pc, #44]	; (80067c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	0c1b      	lsrs	r3, r3, #16
 8006796:	f003 0303 	and.w	r3, r3, #3
 800679a:	3301      	adds	r3, #1
 800679c:	005b      	lsls	r3, r3, #1
 800679e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80067a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067aa:	e002      	b.n	80067b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067ac:	4b05      	ldr	r3, [pc, #20]	; (80067c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80067ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3750      	adds	r7, #80	; 0x50
 80067b8:	46bd      	mov	sp, r7
 80067ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067be:	bf00      	nop
 80067c0:	40023800 	.word	0x40023800
 80067c4:	00f42400 	.word	0x00f42400
 80067c8:	007a1200 	.word	0x007a1200

080067cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067cc:	b480      	push	{r7}
 80067ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067d0:	4b03      	ldr	r3, [pc, #12]	; (80067e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80067d2:	681b      	ldr	r3, [r3, #0]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	200002a8 	.word	0x200002a8

080067e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80067e8:	f7ff fff0 	bl	80067cc <HAL_RCC_GetHCLKFreq>
 80067ec:	4602      	mov	r2, r0
 80067ee:	4b05      	ldr	r3, [pc, #20]	; (8006804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	0a9b      	lsrs	r3, r3, #10
 80067f4:	f003 0307 	and.w	r3, r3, #7
 80067f8:	4903      	ldr	r1, [pc, #12]	; (8006808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067fa:	5ccb      	ldrb	r3, [r1, r3]
 80067fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006800:	4618      	mov	r0, r3
 8006802:	bd80      	pop	{r7, pc}
 8006804:	40023800 	.word	0x40023800
 8006808:	0800be68 	.word	0x0800be68

0800680c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006810:	f7ff ffdc 	bl	80067cc <HAL_RCC_GetHCLKFreq>
 8006814:	4602      	mov	r2, r0
 8006816:	4b05      	ldr	r3, [pc, #20]	; (800682c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	0b5b      	lsrs	r3, r3, #13
 800681c:	f003 0307 	and.w	r3, r3, #7
 8006820:	4903      	ldr	r1, [pc, #12]	; (8006830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006822:	5ccb      	ldrb	r3, [r1, r3]
 8006824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006828:	4618      	mov	r0, r3
 800682a:	bd80      	pop	{r7, pc}
 800682c:	40023800 	.word	0x40023800
 8006830:	0800be68 	.word	0x0800be68

08006834 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e04c      	b.n	80068e0 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d111      	bne.n	8006876 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f001 fc0c 	bl	8008078 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006864:	2b00      	cmp	r3, #0
 8006866:	d102      	bne.n	800686e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a1f      	ldr	r2, [pc, #124]	; (80068e8 <HAL_TIM_Base_Init+0xb4>)
 800686c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2202      	movs	r2, #2
 800687a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	3304      	adds	r3, #4
 8006886:	4619      	mov	r1, r3
 8006888:	4610      	mov	r0, r2
 800688a:	f001 f929 	bl	8007ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	08004175 	.word	0x08004175

080068ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d001      	beq.n	8006904 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e03c      	b.n	800697e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2202      	movs	r2, #2
 8006908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a1e      	ldr	r2, [pc, #120]	; (800698c <HAL_TIM_Base_Start+0xa0>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d018      	beq.n	8006948 <HAL_TIM_Base_Start+0x5c>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800691e:	d013      	beq.n	8006948 <HAL_TIM_Base_Start+0x5c>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a1a      	ldr	r2, [pc, #104]	; (8006990 <HAL_TIM_Base_Start+0xa4>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d00e      	beq.n	8006948 <HAL_TIM_Base_Start+0x5c>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a19      	ldr	r2, [pc, #100]	; (8006994 <HAL_TIM_Base_Start+0xa8>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d009      	beq.n	8006948 <HAL_TIM_Base_Start+0x5c>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a17      	ldr	r2, [pc, #92]	; (8006998 <HAL_TIM_Base_Start+0xac>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d004      	beq.n	8006948 <HAL_TIM_Base_Start+0x5c>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a16      	ldr	r2, [pc, #88]	; (800699c <HAL_TIM_Base_Start+0xb0>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d111      	bne.n	800696c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f003 0307 	and.w	r3, r3, #7
 8006952:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b06      	cmp	r3, #6
 8006958:	d010      	beq.n	800697c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f042 0201 	orr.w	r2, r2, #1
 8006968:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800696a:	e007      	b.n	800697c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f042 0201 	orr.w	r2, r2, #1
 800697a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	40010000 	.word	0x40010000
 8006990:	40000400 	.word	0x40000400
 8006994:	40000800 	.word	0x40000800
 8006998:	40000c00 	.word	0x40000c00
 800699c:	40014000 	.word	0x40014000

080069a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d001      	beq.n	80069b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e044      	b.n	8006a42 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68da      	ldr	r2, [r3, #12]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f042 0201 	orr.w	r2, r2, #1
 80069ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a1e      	ldr	r2, [pc, #120]	; (8006a50 <HAL_TIM_Base_Start_IT+0xb0>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d018      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x6c>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e2:	d013      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x6c>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a1a      	ldr	r2, [pc, #104]	; (8006a54 <HAL_TIM_Base_Start_IT+0xb4>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d00e      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x6c>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a19      	ldr	r2, [pc, #100]	; (8006a58 <HAL_TIM_Base_Start_IT+0xb8>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d009      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x6c>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a17      	ldr	r2, [pc, #92]	; (8006a5c <HAL_TIM_Base_Start_IT+0xbc>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d004      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x6c>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a16      	ldr	r2, [pc, #88]	; (8006a60 <HAL_TIM_Base_Start_IT+0xc0>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d111      	bne.n	8006a30 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f003 0307 	and.w	r3, r3, #7
 8006a16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2b06      	cmp	r3, #6
 8006a1c:	d010      	beq.n	8006a40 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f042 0201 	orr.w	r2, r2, #1
 8006a2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a2e:	e007      	b.n	8006a40 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f042 0201 	orr.w	r2, r2, #1
 8006a3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	40010000 	.word	0x40010000
 8006a54:	40000400 	.word	0x40000400
 8006a58:	40000800 	.word	0x40000800
 8006a5c:	40000c00 	.word	0x40000c00
 8006a60:	40014000 	.word	0x40014000

08006a64 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e04c      	b.n	8006b10 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d111      	bne.n	8006aa6 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f001 faf4 	bl	8008078 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d102      	bne.n	8006a9e <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a1f      	ldr	r2, [pc, #124]	; (8006b18 <HAL_TIM_OC_Init+0xb4>)
 8006a9c:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2202      	movs	r2, #2
 8006aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	3304      	adds	r3, #4
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	4610      	mov	r0, r2
 8006aba:	f001 f811 	bl	8007ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	08006b1d 	.word	0x08006b1d

08006b1c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e04c      	b.n	8006bdc <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d111      	bne.n	8006b72 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f001 fa8e 	bl	8008078 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d102      	bne.n	8006b6a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a1f      	ldr	r2, [pc, #124]	; (8006be4 <HAL_TIM_PWM_Init+0xb4>)
 8006b68:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2202      	movs	r2, #2
 8006b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	3304      	adds	r3, #4
 8006b82:	4619      	mov	r1, r3
 8006b84:	4610      	mov	r0, r2
 8006b86:	f000 ffab 	bl	8007ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	08006be9 	.word	0x08006be9

08006be8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d109      	bne.n	8006c20 <HAL_TIM_PWM_Start+0x24>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	bf14      	ite	ne
 8006c18:	2301      	movne	r3, #1
 8006c1a:	2300      	moveq	r3, #0
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	e022      	b.n	8006c66 <HAL_TIM_PWM_Start+0x6a>
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	2b04      	cmp	r3, #4
 8006c24:	d109      	bne.n	8006c3a <HAL_TIM_PWM_Start+0x3e>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	bf14      	ite	ne
 8006c32:	2301      	movne	r3, #1
 8006c34:	2300      	moveq	r3, #0
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	e015      	b.n	8006c66 <HAL_TIM_PWM_Start+0x6a>
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b08      	cmp	r3, #8
 8006c3e:	d109      	bne.n	8006c54 <HAL_TIM_PWM_Start+0x58>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	bf14      	ite	ne
 8006c4c:	2301      	movne	r3, #1
 8006c4e:	2300      	moveq	r3, #0
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	e008      	b.n	8006c66 <HAL_TIM_PWM_Start+0x6a>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	bf14      	ite	ne
 8006c60:	2301      	movne	r3, #1
 8006c62:	2300      	moveq	r3, #0
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e068      	b.n	8006d40 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d104      	bne.n	8006c7e <HAL_TIM_PWM_Start+0x82>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2202      	movs	r2, #2
 8006c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c7c:	e013      	b.n	8006ca6 <HAL_TIM_PWM_Start+0xaa>
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	2b04      	cmp	r3, #4
 8006c82:	d104      	bne.n	8006c8e <HAL_TIM_PWM_Start+0x92>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2202      	movs	r2, #2
 8006c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c8c:	e00b      	b.n	8006ca6 <HAL_TIM_PWM_Start+0xaa>
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b08      	cmp	r3, #8
 8006c92:	d104      	bne.n	8006c9e <HAL_TIM_PWM_Start+0xa2>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2202      	movs	r2, #2
 8006c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c9c:	e003      	b.n	8006ca6 <HAL_TIM_PWM_Start+0xaa>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2201      	movs	r2, #1
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f001 f9bc 	bl	800802c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a23      	ldr	r2, [pc, #140]	; (8006d48 <HAL_TIM_PWM_Start+0x14c>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d107      	bne.n	8006cce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ccc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a1d      	ldr	r2, [pc, #116]	; (8006d48 <HAL_TIM_PWM_Start+0x14c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d018      	beq.n	8006d0a <HAL_TIM_PWM_Start+0x10e>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ce0:	d013      	beq.n	8006d0a <HAL_TIM_PWM_Start+0x10e>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a19      	ldr	r2, [pc, #100]	; (8006d4c <HAL_TIM_PWM_Start+0x150>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d00e      	beq.n	8006d0a <HAL_TIM_PWM_Start+0x10e>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a17      	ldr	r2, [pc, #92]	; (8006d50 <HAL_TIM_PWM_Start+0x154>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d009      	beq.n	8006d0a <HAL_TIM_PWM_Start+0x10e>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a16      	ldr	r2, [pc, #88]	; (8006d54 <HAL_TIM_PWM_Start+0x158>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d004      	beq.n	8006d0a <HAL_TIM_PWM_Start+0x10e>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a14      	ldr	r2, [pc, #80]	; (8006d58 <HAL_TIM_PWM_Start+0x15c>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d111      	bne.n	8006d2e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f003 0307 	and.w	r3, r3, #7
 8006d14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b06      	cmp	r3, #6
 8006d1a:	d010      	beq.n	8006d3e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f042 0201 	orr.w	r2, r2, #1
 8006d2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d2c:	e007      	b.n	8006d3e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f042 0201 	orr.w	r2, r2, #1
 8006d3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	40010000 	.word	0x40010000
 8006d4c:	40000400 	.word	0x40000400
 8006d50:	40000800 	.word	0x40000800
 8006d54:	40000c00 	.word	0x40000c00
 8006d58:	40014000 	.word	0x40014000

08006d5c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e04c      	b.n	8006e0a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d111      	bne.n	8006da0 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f001 f977 	bl	8008078 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d102      	bne.n	8006d98 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a1f      	ldr	r2, [pc, #124]	; (8006e14 <HAL_TIM_OnePulse_Init+0xb8>)
 8006d96:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	3304      	adds	r3, #4
 8006db0:	4619      	mov	r1, r3
 8006db2:	4610      	mov	r0, r2
 8006db4:	f000 fe94 	bl	8007ae0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f022 0208 	bic.w	r2, r2, #8
 8006dc6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6819      	ldr	r1, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	08006e19 	.word	0x08006e19

08006e18 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e3c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e44:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e4c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006e54:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d108      	bne.n	8006e6e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e5c:	7bbb      	ldrb	r3, [r7, #14]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d105      	bne.n	8006e6e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e62:	7b7b      	ldrb	r3, [r7, #13]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d102      	bne.n	8006e6e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e68:	7b3b      	ldrb	r3, [r7, #12]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d001      	beq.n	8006e72 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e03b      	b.n	8006eea <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2202      	movs	r2, #2
 8006e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2202      	movs	r2, #2
 8006e7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2202      	movs	r2, #2
 8006e86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2202      	movs	r2, #2
 8006e8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68da      	ldr	r2, [r3, #12]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f042 0202 	orr.w	r2, r2, #2
 8006ea0:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68da      	ldr	r2, [r3, #12]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f042 0204 	orr.w	r2, r2, #4
 8006eb0:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	2100      	movs	r1, #0
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f001 f8b6 	bl	800802c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	2104      	movs	r1, #4
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f001 f8af 	bl	800802c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a08      	ldr	r2, [pc, #32]	; (8006ef4 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d107      	bne.n	8006ee8 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ee6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	40010000 	.word	0x40010000

08006ef8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d101      	bne.n	8006f0c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e0a2      	b.n	8007052 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d111      	bne.n	8006f3c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f001 f8a9 	bl	8008078 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d102      	bne.n	8006f34 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a4a      	ldr	r2, [pc, #296]	; (800705c <HAL_TIM_Encoder_Init+0x164>)
 8006f32:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2202      	movs	r2, #2
 8006f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	6812      	ldr	r2, [r2, #0]
 8006f4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f52:	f023 0307 	bic.w	r3, r3, #7
 8006f56:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	3304      	adds	r3, #4
 8006f60:	4619      	mov	r1, r3
 8006f62:	4610      	mov	r0, r2
 8006f64:	f000 fdbc 	bl	8007ae0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	697a      	ldr	r2, [r7, #20]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f90:	f023 0303 	bic.w	r3, r3, #3
 8006f94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	689a      	ldr	r2, [r3, #8]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	021b      	lsls	r3, r3, #8
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006fae:	f023 030c 	bic.w	r3, r3, #12
 8006fb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	68da      	ldr	r2, [r3, #12]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	69db      	ldr	r3, [r3, #28]
 8006fc8:	021b      	lsls	r3, r3, #8
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	011a      	lsls	r2, r3, #4
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	031b      	lsls	r3, r3, #12
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006fec:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006ff4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	011b      	lsls	r3, r3, #4
 8007000:	4313      	orrs	r3, r2
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	4313      	orrs	r3, r2
 8007006:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	697a      	ldr	r2, [r7, #20]
 800700e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3718      	adds	r7, #24
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	080040e9 	.word	0x080040e9

08007060 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007070:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007078:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007080:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007088:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d110      	bne.n	80070b2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007090:	7bfb      	ldrb	r3, [r7, #15]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d102      	bne.n	800709c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007096:	7b7b      	ldrb	r3, [r7, #13]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d001      	beq.n	80070a0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e069      	b.n	8007174 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2202      	movs	r2, #2
 80070ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070b0:	e031      	b.n	8007116 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2b04      	cmp	r3, #4
 80070b6:	d110      	bne.n	80070da <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80070b8:	7bbb      	ldrb	r3, [r7, #14]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d102      	bne.n	80070c4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80070be:	7b3b      	ldrb	r3, [r7, #12]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d001      	beq.n	80070c8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e055      	b.n	8007174 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2202      	movs	r2, #2
 80070d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070d8:	e01d      	b.n	8007116 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80070da:	7bfb      	ldrb	r3, [r7, #15]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d108      	bne.n	80070f2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80070e0:	7bbb      	ldrb	r3, [r7, #14]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d105      	bne.n	80070f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80070e6:	7b7b      	ldrb	r3, [r7, #13]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d102      	bne.n	80070f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80070ec:	7b3b      	ldrb	r3, [r7, #12]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d001      	beq.n	80070f6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e03e      	b.n	8007174 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2202      	movs	r2, #2
 80070fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2202      	movs	r2, #2
 8007102:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2202      	movs	r2, #2
 800710a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2202      	movs	r2, #2
 8007112:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d003      	beq.n	8007124 <HAL_TIM_Encoder_Start+0xc4>
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	2b04      	cmp	r3, #4
 8007120:	d008      	beq.n	8007134 <HAL_TIM_Encoder_Start+0xd4>
 8007122:	e00f      	b.n	8007144 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2201      	movs	r2, #1
 800712a:	2100      	movs	r1, #0
 800712c:	4618      	mov	r0, r3
 800712e:	f000 ff7d 	bl	800802c <TIM_CCxChannelCmd>
      break;
 8007132:	e016      	b.n	8007162 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2201      	movs	r2, #1
 800713a:	2104      	movs	r1, #4
 800713c:	4618      	mov	r0, r3
 800713e:	f000 ff75 	bl	800802c <TIM_CCxChannelCmd>
      break;
 8007142:	e00e      	b.n	8007162 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2201      	movs	r2, #1
 800714a:	2100      	movs	r1, #0
 800714c:	4618      	mov	r0, r3
 800714e:	f000 ff6d 	bl	800802c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2201      	movs	r2, #1
 8007158:	2104      	movs	r1, #4
 800715a:	4618      	mov	r0, r3
 800715c:	f000 ff66 	bl	800802c <TIM_CCxChannelCmd>
      break;
 8007160:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f042 0201 	orr.w	r2, r2, #1
 8007170:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	2b02      	cmp	r3, #2
 8007190:	d128      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b02      	cmp	r3, #2
 800719e:	d121      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f06f 0202 	mvn.w	r2, #2
 80071a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	f003 0303 	and.w	r3, r3, #3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d005      	beq.n	80071ca <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	4798      	blx	r3
 80071c8:	e009      	b.n	80071de <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	f003 0304 	and.w	r3, r3, #4
 80071ee:	2b04      	cmp	r3, #4
 80071f0:	d128      	bne.n	8007244 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	f003 0304 	and.w	r3, r3, #4
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d121      	bne.n	8007244 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f06f 0204 	mvn.w	r2, #4
 8007208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2202      	movs	r2, #2
 800720e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800721a:	2b00      	cmp	r3, #0
 800721c:	d005      	beq.n	800722a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	4798      	blx	r3
 8007228:	e009      	b.n	800723e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	f003 0308 	and.w	r3, r3, #8
 800724e:	2b08      	cmp	r3, #8
 8007250:	d128      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	f003 0308 	and.w	r3, r3, #8
 800725c:	2b08      	cmp	r3, #8
 800725e:	d121      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f06f 0208 	mvn.w	r2, #8
 8007268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2204      	movs	r2, #4
 800726e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	f003 0303 	and.w	r3, r3, #3
 800727a:	2b00      	cmp	r3, #0
 800727c:	d005      	beq.n	800728a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	4798      	blx	r3
 8007288:	e009      	b.n	800729e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	f003 0310 	and.w	r3, r3, #16
 80072ae:	2b10      	cmp	r3, #16
 80072b0:	d128      	bne.n	8007304 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	f003 0310 	and.w	r3, r3, #16
 80072bc:	2b10      	cmp	r3, #16
 80072be:	d121      	bne.n	8007304 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f06f 0210 	mvn.w	r2, #16
 80072c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2208      	movs	r2, #8
 80072ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d005      	beq.n	80072ea <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	4798      	blx	r3
 80072e8:	e009      	b.n	80072fe <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	f003 0301 	and.w	r3, r3, #1
 800730e:	2b01      	cmp	r3, #1
 8007310:	d110      	bne.n	8007334 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	f003 0301 	and.w	r3, r3, #1
 800731c:	2b01      	cmp	r3, #1
 800731e:	d109      	bne.n	8007334 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f06f 0201 	mvn.w	r2, #1
 8007328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800733e:	2b80      	cmp	r3, #128	; 0x80
 8007340:	d110      	bne.n	8007364 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800734c:	2b80      	cmp	r3, #128	; 0x80
 800734e:	d109      	bne.n	8007364 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736e:	2b40      	cmp	r3, #64	; 0x40
 8007370:	d110      	bne.n	8007394 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800737c:	2b40      	cmp	r3, #64	; 0x40
 800737e:	d109      	bne.n	8007394 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	f003 0320 	and.w	r3, r3, #32
 800739e:	2b20      	cmp	r3, #32
 80073a0:	d110      	bne.n	80073c4 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	f003 0320 	and.w	r3, r3, #32
 80073ac:	2b20      	cmp	r3, #32
 80073ae:	d109      	bne.n	80073c4 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f06f 0220 	mvn.w	r2, #32
 80073b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073c4:	bf00      	nop
 80073c6:	3708      	adds	r7, #8
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073d8:	2300      	movs	r3, #0
 80073da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d101      	bne.n	80073ea <HAL_TIM_OC_ConfigChannel+0x1e>
 80073e6:	2302      	movs	r3, #2
 80073e8:	e048      	b.n	800747c <HAL_TIM_OC_ConfigChannel+0xb0>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b0c      	cmp	r3, #12
 80073f6:	d839      	bhi.n	800746c <HAL_TIM_OC_ConfigChannel+0xa0>
 80073f8:	a201      	add	r2, pc, #4	; (adr r2, 8007400 <HAL_TIM_OC_ConfigChannel+0x34>)
 80073fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fe:	bf00      	nop
 8007400:	08007435 	.word	0x08007435
 8007404:	0800746d 	.word	0x0800746d
 8007408:	0800746d 	.word	0x0800746d
 800740c:	0800746d 	.word	0x0800746d
 8007410:	08007443 	.word	0x08007443
 8007414:	0800746d 	.word	0x0800746d
 8007418:	0800746d 	.word	0x0800746d
 800741c:	0800746d 	.word	0x0800746d
 8007420:	08007451 	.word	0x08007451
 8007424:	0800746d 	.word	0x0800746d
 8007428:	0800746d 	.word	0x0800746d
 800742c:	0800746d 	.word	0x0800746d
 8007430:	0800745f 	.word	0x0800745f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68b9      	ldr	r1, [r7, #8]
 800743a:	4618      	mov	r0, r3
 800743c:	f000 fbd0 	bl	8007be0 <TIM_OC1_SetConfig>
      break;
 8007440:	e017      	b.n	8007472 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68b9      	ldr	r1, [r7, #8]
 8007448:	4618      	mov	r0, r3
 800744a:	f000 fc2f 	bl	8007cac <TIM_OC2_SetConfig>
      break;
 800744e:	e010      	b.n	8007472 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68b9      	ldr	r1, [r7, #8]
 8007456:	4618      	mov	r0, r3
 8007458:	f000 fc94 	bl	8007d84 <TIM_OC3_SetConfig>
      break;
 800745c:	e009      	b.n	8007472 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68b9      	ldr	r1, [r7, #8]
 8007464:	4618      	mov	r0, r3
 8007466:	f000 fcf7 	bl	8007e58 <TIM_OC4_SetConfig>
      break;
 800746a:	e002      	b.n	8007472 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	75fb      	strb	r3, [r7, #23]
      break;
 8007470:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800747a:	7dfb      	ldrb	r3, [r7, #23]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3718      	adds	r7, #24
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800749a:	2b01      	cmp	r3, #1
 800749c:	d101      	bne.n	80074a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800749e:	2302      	movs	r3, #2
 80074a0:	e0ae      	b.n	8007600 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b0c      	cmp	r3, #12
 80074ae:	f200 809f 	bhi.w	80075f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80074b2:	a201      	add	r2, pc, #4	; (adr r2, 80074b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80074b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b8:	080074ed 	.word	0x080074ed
 80074bc:	080075f1 	.word	0x080075f1
 80074c0:	080075f1 	.word	0x080075f1
 80074c4:	080075f1 	.word	0x080075f1
 80074c8:	0800752d 	.word	0x0800752d
 80074cc:	080075f1 	.word	0x080075f1
 80074d0:	080075f1 	.word	0x080075f1
 80074d4:	080075f1 	.word	0x080075f1
 80074d8:	0800756f 	.word	0x0800756f
 80074dc:	080075f1 	.word	0x080075f1
 80074e0:	080075f1 	.word	0x080075f1
 80074e4:	080075f1 	.word	0x080075f1
 80074e8:	080075af 	.word	0x080075af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68b9      	ldr	r1, [r7, #8]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f000 fb74 	bl	8007be0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	699a      	ldr	r2, [r3, #24]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f042 0208 	orr.w	r2, r2, #8
 8007506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	699a      	ldr	r2, [r3, #24]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f022 0204 	bic.w	r2, r2, #4
 8007516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6999      	ldr	r1, [r3, #24]
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	691a      	ldr	r2, [r3, #16]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	430a      	orrs	r2, r1
 8007528:	619a      	str	r2, [r3, #24]
      break;
 800752a:	e064      	b.n	80075f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68b9      	ldr	r1, [r7, #8]
 8007532:	4618      	mov	r0, r3
 8007534:	f000 fbba 	bl	8007cac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	699a      	ldr	r2, [r3, #24]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	699a      	ldr	r2, [r3, #24]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6999      	ldr	r1, [r3, #24]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	021a      	lsls	r2, r3, #8
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	430a      	orrs	r2, r1
 800756a:	619a      	str	r2, [r3, #24]
      break;
 800756c:	e043      	b.n	80075f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68b9      	ldr	r1, [r7, #8]
 8007574:	4618      	mov	r0, r3
 8007576:	f000 fc05 	bl	8007d84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	69da      	ldr	r2, [r3, #28]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f042 0208 	orr.w	r2, r2, #8
 8007588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	69da      	ldr	r2, [r3, #28]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f022 0204 	bic.w	r2, r2, #4
 8007598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	69d9      	ldr	r1, [r3, #28]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	691a      	ldr	r2, [r3, #16]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	430a      	orrs	r2, r1
 80075aa:	61da      	str	r2, [r3, #28]
      break;
 80075ac:	e023      	b.n	80075f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68b9      	ldr	r1, [r7, #8]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f000 fc4f 	bl	8007e58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	69da      	ldr	r2, [r3, #28]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	69da      	ldr	r2, [r3, #28]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	69d9      	ldr	r1, [r3, #28]
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	021a      	lsls	r2, r3, #8
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	430a      	orrs	r2, r1
 80075ec:	61da      	str	r2, [r3, #28]
      break;
 80075ee:	e002      	b.n	80075f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	75fb      	strb	r3, [r7, #23]
      break;
 80075f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3718      	adds	r7, #24
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007612:	2300      	movs	r3, #0
 8007614:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800761c:	2b01      	cmp	r3, #1
 800761e:	d101      	bne.n	8007624 <HAL_TIM_ConfigClockSource+0x1c>
 8007620:	2302      	movs	r3, #2
 8007622:	e0b4      	b.n	800778e <HAL_TIM_ConfigClockSource+0x186>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800764a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800765c:	d03e      	beq.n	80076dc <HAL_TIM_ConfigClockSource+0xd4>
 800765e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007662:	f200 8087 	bhi.w	8007774 <HAL_TIM_ConfigClockSource+0x16c>
 8007666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800766a:	f000 8086 	beq.w	800777a <HAL_TIM_ConfigClockSource+0x172>
 800766e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007672:	d87f      	bhi.n	8007774 <HAL_TIM_ConfigClockSource+0x16c>
 8007674:	2b70      	cmp	r3, #112	; 0x70
 8007676:	d01a      	beq.n	80076ae <HAL_TIM_ConfigClockSource+0xa6>
 8007678:	2b70      	cmp	r3, #112	; 0x70
 800767a:	d87b      	bhi.n	8007774 <HAL_TIM_ConfigClockSource+0x16c>
 800767c:	2b60      	cmp	r3, #96	; 0x60
 800767e:	d050      	beq.n	8007722 <HAL_TIM_ConfigClockSource+0x11a>
 8007680:	2b60      	cmp	r3, #96	; 0x60
 8007682:	d877      	bhi.n	8007774 <HAL_TIM_ConfigClockSource+0x16c>
 8007684:	2b50      	cmp	r3, #80	; 0x50
 8007686:	d03c      	beq.n	8007702 <HAL_TIM_ConfigClockSource+0xfa>
 8007688:	2b50      	cmp	r3, #80	; 0x50
 800768a:	d873      	bhi.n	8007774 <HAL_TIM_ConfigClockSource+0x16c>
 800768c:	2b40      	cmp	r3, #64	; 0x40
 800768e:	d058      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0x13a>
 8007690:	2b40      	cmp	r3, #64	; 0x40
 8007692:	d86f      	bhi.n	8007774 <HAL_TIM_ConfigClockSource+0x16c>
 8007694:	2b30      	cmp	r3, #48	; 0x30
 8007696:	d064      	beq.n	8007762 <HAL_TIM_ConfigClockSource+0x15a>
 8007698:	2b30      	cmp	r3, #48	; 0x30
 800769a:	d86b      	bhi.n	8007774 <HAL_TIM_ConfigClockSource+0x16c>
 800769c:	2b20      	cmp	r3, #32
 800769e:	d060      	beq.n	8007762 <HAL_TIM_ConfigClockSource+0x15a>
 80076a0:	2b20      	cmp	r3, #32
 80076a2:	d867      	bhi.n	8007774 <HAL_TIM_ConfigClockSource+0x16c>
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d05c      	beq.n	8007762 <HAL_TIM_ConfigClockSource+0x15a>
 80076a8:	2b10      	cmp	r3, #16
 80076aa:	d05a      	beq.n	8007762 <HAL_TIM_ConfigClockSource+0x15a>
 80076ac:	e062      	b.n	8007774 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6818      	ldr	r0, [r3, #0]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	6899      	ldr	r1, [r3, #8]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	685a      	ldr	r2, [r3, #4]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	f000 fc95 	bl	8007fec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	609a      	str	r2, [r3, #8]
      break;
 80076da:	e04f      	b.n	800777c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6818      	ldr	r0, [r3, #0]
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	6899      	ldr	r1, [r3, #8]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	685a      	ldr	r2, [r3, #4]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	f000 fc7e 	bl	8007fec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	689a      	ldr	r2, [r3, #8]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076fe:	609a      	str	r2, [r3, #8]
      break;
 8007700:	e03c      	b.n	800777c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6818      	ldr	r0, [r3, #0]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	6859      	ldr	r1, [r3, #4]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	461a      	mov	r2, r3
 8007710:	f000 fbf2 	bl	8007ef8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2150      	movs	r1, #80	; 0x50
 800771a:	4618      	mov	r0, r3
 800771c:	f000 fc4b 	bl	8007fb6 <TIM_ITRx_SetConfig>
      break;
 8007720:	e02c      	b.n	800777c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6818      	ldr	r0, [r3, #0]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	6859      	ldr	r1, [r3, #4]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	461a      	mov	r2, r3
 8007730:	f000 fc11 	bl	8007f56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2160      	movs	r1, #96	; 0x60
 800773a:	4618      	mov	r0, r3
 800773c:	f000 fc3b 	bl	8007fb6 <TIM_ITRx_SetConfig>
      break;
 8007740:	e01c      	b.n	800777c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6818      	ldr	r0, [r3, #0]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	6859      	ldr	r1, [r3, #4]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	461a      	mov	r2, r3
 8007750:	f000 fbd2 	bl	8007ef8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2140      	movs	r1, #64	; 0x40
 800775a:	4618      	mov	r0, r3
 800775c:	f000 fc2b 	bl	8007fb6 <TIM_ITRx_SetConfig>
      break;
 8007760:	e00c      	b.n	800777c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4619      	mov	r1, r3
 800776c:	4610      	mov	r0, r2
 800776e:	f000 fc22 	bl	8007fb6 <TIM_ITRx_SetConfig>
      break;
 8007772:	e003      	b.n	800777c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	73fb      	strb	r3, [r7, #15]
      break;
 8007778:	e000      	b.n	800777c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800777a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800778c:	7bfb      	ldrb	r3, [r7, #15]
}
 800778e:	4618      	mov	r0, r3
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007796:	b480      	push	{r7}
 8007798:	b083      	sub	sp, #12
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800779e:	bf00      	nop
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b083      	sub	sp, #12
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077b2:	bf00      	nop
 80077b4:	370c      	adds	r7, #12
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr

080077be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077be:	b480      	push	{r7}
 80077c0:	b083      	sub	sp, #12
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077c6:	bf00      	nop
 80077c8:	370c      	adds	r7, #12
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b083      	sub	sp, #12
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80077da:	bf00      	nop
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b083      	sub	sp, #12
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077ee:	bf00      	nop
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b083      	sub	sp, #12
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007802:	bf00      	nop
 8007804:	370c      	adds	r7, #12
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800780e:	b480      	push	{r7}
 8007810:	b083      	sub	sp, #12
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007816:	bf00      	nop
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007822:	b480      	push	{r7}
 8007824:	b083      	sub	sp, #12
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800782a:	bf00      	nop
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007836:	b480      	push	{r7}
 8007838:	b083      	sub	sp, #12
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800783e:	bf00      	nop
 8007840:	370c      	adds	r7, #12
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
	...

0800784c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800784c:	b480      	push	{r7}
 800784e:	b087      	sub	sp, #28
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	460b      	mov	r3, r1
 8007856:	607a      	str	r2, [r7, #4]
 8007858:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800785a:	2300      	movs	r3, #0
 800785c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d101      	bne.n	8007868 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e135      	b.n	8007ad4 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800786e:	2b01      	cmp	r3, #1
 8007870:	d101      	bne.n	8007876 <HAL_TIM_RegisterCallback+0x2a>
 8007872:	2302      	movs	r3, #2
 8007874:	e12e      	b.n	8007ad4 <HAL_TIM_RegisterCallback+0x288>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b01      	cmp	r3, #1
 8007888:	f040 80ba 	bne.w	8007a00 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 800788c:	7afb      	ldrb	r3, [r7, #11]
 800788e:	2b1a      	cmp	r3, #26
 8007890:	f200 80b3 	bhi.w	80079fa <HAL_TIM_RegisterCallback+0x1ae>
 8007894:	a201      	add	r2, pc, #4	; (adr r2, 800789c <HAL_TIM_RegisterCallback+0x50>)
 8007896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789a:	bf00      	nop
 800789c:	08007909 	.word	0x08007909
 80078a0:	08007911 	.word	0x08007911
 80078a4:	08007919 	.word	0x08007919
 80078a8:	08007921 	.word	0x08007921
 80078ac:	08007929 	.word	0x08007929
 80078b0:	08007931 	.word	0x08007931
 80078b4:	08007939 	.word	0x08007939
 80078b8:	08007941 	.word	0x08007941
 80078bc:	08007949 	.word	0x08007949
 80078c0:	08007951 	.word	0x08007951
 80078c4:	08007959 	.word	0x08007959
 80078c8:	08007961 	.word	0x08007961
 80078cc:	08007969 	.word	0x08007969
 80078d0:	08007971 	.word	0x08007971
 80078d4:	08007979 	.word	0x08007979
 80078d8:	08007983 	.word	0x08007983
 80078dc:	0800798d 	.word	0x0800798d
 80078e0:	08007997 	.word	0x08007997
 80078e4:	080079a1 	.word	0x080079a1
 80078e8:	080079ab 	.word	0x080079ab
 80078ec:	080079b5 	.word	0x080079b5
 80078f0:	080079bf 	.word	0x080079bf
 80078f4:	080079c9 	.word	0x080079c9
 80078f8:	080079d3 	.word	0x080079d3
 80078fc:	080079dd 	.word	0x080079dd
 8007900:	080079e7 	.word	0x080079e7
 8007904:	080079f1 	.word	0x080079f1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800790e:	e0dc      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8007916:	e0d8      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800791e:	e0d4      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007926:	e0d0      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800792e:	e0cc      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8007936:	e0c8      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800793e:	e0c4      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8007946:	e0c0      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800794e:	e0bc      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007956:	e0b8      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800795e:	e0b4      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8007966:	e0b0      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800796e:	e0ac      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8007976:	e0a8      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8007980:	e0a3      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800798a:	e09e      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8007994:	e099      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800799e:	e094      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 80079a8:	e08f      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 80079b2:	e08a      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 80079bc:	e085      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 80079c6:	e080      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 80079d0:	e07b      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 80079da:	e076      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 80079e4:	e071      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 80079ee:	e06c      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 80079f8:	e067      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	75fb      	strb	r3, [r7, #23]
        break;
 80079fe:	e064      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d15c      	bne.n	8007ac6 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8007a0c:	7afb      	ldrb	r3, [r7, #11]
 8007a0e:	2b0d      	cmp	r3, #13
 8007a10:	d856      	bhi.n	8007ac0 <HAL_TIM_RegisterCallback+0x274>
 8007a12:	a201      	add	r2, pc, #4	; (adr r2, 8007a18 <HAL_TIM_RegisterCallback+0x1cc>)
 8007a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a18:	08007a51 	.word	0x08007a51
 8007a1c:	08007a59 	.word	0x08007a59
 8007a20:	08007a61 	.word	0x08007a61
 8007a24:	08007a69 	.word	0x08007a69
 8007a28:	08007a71 	.word	0x08007a71
 8007a2c:	08007a79 	.word	0x08007a79
 8007a30:	08007a81 	.word	0x08007a81
 8007a34:	08007a89 	.word	0x08007a89
 8007a38:	08007a91 	.word	0x08007a91
 8007a3c:	08007a99 	.word	0x08007a99
 8007a40:	08007aa1 	.word	0x08007aa1
 8007a44:	08007aa9 	.word	0x08007aa9
 8007a48:	08007ab1 	.word	0x08007ab1
 8007a4c:	08007ab9 	.word	0x08007ab9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8007a56:	e038      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8007a5e:	e034      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8007a66:	e030      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007a6e:	e02c      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8007a76:	e028      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8007a7e:	e024      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8007a86:	e020      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8007a8e:	e01c      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8007a96:	e018      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007a9e:	e014      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8007aa6:	e010      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8007aae:	e00c      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8007ab6:	e008      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8007abe:	e004      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	75fb      	strb	r3, [r7, #23]
        break;
 8007ac4:	e001      	b.n	8007aca <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	371c      	adds	r7, #28
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a34      	ldr	r2, [pc, #208]	; (8007bc4 <TIM_Base_SetConfig+0xe4>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d00f      	beq.n	8007b18 <TIM_Base_SetConfig+0x38>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007afe:	d00b      	beq.n	8007b18 <TIM_Base_SetConfig+0x38>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a31      	ldr	r2, [pc, #196]	; (8007bc8 <TIM_Base_SetConfig+0xe8>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d007      	beq.n	8007b18 <TIM_Base_SetConfig+0x38>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a30      	ldr	r2, [pc, #192]	; (8007bcc <TIM_Base_SetConfig+0xec>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d003      	beq.n	8007b18 <TIM_Base_SetConfig+0x38>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a2f      	ldr	r2, [pc, #188]	; (8007bd0 <TIM_Base_SetConfig+0xf0>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d108      	bne.n	8007b2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a25      	ldr	r2, [pc, #148]	; (8007bc4 <TIM_Base_SetConfig+0xe4>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d01b      	beq.n	8007b6a <TIM_Base_SetConfig+0x8a>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b38:	d017      	beq.n	8007b6a <TIM_Base_SetConfig+0x8a>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a22      	ldr	r2, [pc, #136]	; (8007bc8 <TIM_Base_SetConfig+0xe8>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d013      	beq.n	8007b6a <TIM_Base_SetConfig+0x8a>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a21      	ldr	r2, [pc, #132]	; (8007bcc <TIM_Base_SetConfig+0xec>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d00f      	beq.n	8007b6a <TIM_Base_SetConfig+0x8a>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a20      	ldr	r2, [pc, #128]	; (8007bd0 <TIM_Base_SetConfig+0xf0>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d00b      	beq.n	8007b6a <TIM_Base_SetConfig+0x8a>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a1f      	ldr	r2, [pc, #124]	; (8007bd4 <TIM_Base_SetConfig+0xf4>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d007      	beq.n	8007b6a <TIM_Base_SetConfig+0x8a>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a1e      	ldr	r2, [pc, #120]	; (8007bd8 <TIM_Base_SetConfig+0xf8>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d003      	beq.n	8007b6a <TIM_Base_SetConfig+0x8a>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a1d      	ldr	r2, [pc, #116]	; (8007bdc <TIM_Base_SetConfig+0xfc>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d108      	bne.n	8007b7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	689a      	ldr	r2, [r3, #8]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a08      	ldr	r2, [pc, #32]	; (8007bc4 <TIM_Base_SetConfig+0xe4>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d103      	bne.n	8007bb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	691a      	ldr	r2, [r3, #16]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	615a      	str	r2, [r3, #20]
}
 8007bb6:	bf00      	nop
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	40010000 	.word	0x40010000
 8007bc8:	40000400 	.word	0x40000400
 8007bcc:	40000800 	.word	0x40000800
 8007bd0:	40000c00 	.word	0x40000c00
 8007bd4:	40014000 	.word	0x40014000
 8007bd8:	40014400 	.word	0x40014400
 8007bdc:	40014800 	.word	0x40014800

08007be0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b087      	sub	sp, #28
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	f023 0201 	bic.w	r2, r3, #1
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f023 0303 	bic.w	r3, r3, #3
 8007c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	f023 0302 	bic.w	r3, r3, #2
 8007c28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a1c      	ldr	r2, [pc, #112]	; (8007ca8 <TIM_OC1_SetConfig+0xc8>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d10c      	bne.n	8007c56 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	f023 0308 	bic.w	r3, r3, #8
 8007c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	f023 0304 	bic.w	r3, r3, #4
 8007c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a13      	ldr	r2, [pc, #76]	; (8007ca8 <TIM_OC1_SetConfig+0xc8>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d111      	bne.n	8007c82 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	695b      	ldr	r3, [r3, #20]
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	693a      	ldr	r2, [r7, #16]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	685a      	ldr	r2, [r3, #4]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	697a      	ldr	r2, [r7, #20]
 8007c9a:	621a      	str	r2, [r3, #32]
}
 8007c9c:	bf00      	nop
 8007c9e:	371c      	adds	r7, #28
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr
 8007ca8:	40010000 	.word	0x40010000

08007cac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b087      	sub	sp, #28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	f023 0210 	bic.w	r2, r3, #16
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	021b      	lsls	r3, r3, #8
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	f023 0320 	bic.w	r3, r3, #32
 8007cf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	011b      	lsls	r3, r3, #4
 8007cfe:	697a      	ldr	r2, [r7, #20]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a1e      	ldr	r2, [pc, #120]	; (8007d80 <TIM_OC2_SetConfig+0xd4>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d10d      	bne.n	8007d28 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	011b      	lsls	r3, r3, #4
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a15      	ldr	r2, [pc, #84]	; (8007d80 <TIM_OC2_SetConfig+0xd4>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d113      	bne.n	8007d58 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	695b      	ldr	r3, [r3, #20]
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	693a      	ldr	r2, [r7, #16]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	685a      	ldr	r2, [r3, #4]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	621a      	str	r2, [r3, #32]
}
 8007d72:	bf00      	nop
 8007d74:	371c      	adds	r7, #28
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	40010000 	.word	0x40010000

08007d84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b087      	sub	sp, #28
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a1b      	ldr	r3, [r3, #32]
 8007d92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a1b      	ldr	r3, [r3, #32]
 8007d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	69db      	ldr	r3, [r3, #28]
 8007daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f023 0303 	bic.w	r3, r3, #3
 8007dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	021b      	lsls	r3, r3, #8
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a1d      	ldr	r2, [pc, #116]	; (8007e54 <TIM_OC3_SetConfig+0xd0>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d10d      	bne.n	8007dfe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007de8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	021b      	lsls	r3, r3, #8
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007dfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a14      	ldr	r2, [pc, #80]	; (8007e54 <TIM_OC3_SetConfig+0xd0>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d113      	bne.n	8007e2e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	011b      	lsls	r3, r3, #4
 8007e1c:	693a      	ldr	r2, [r7, #16]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	011b      	lsls	r3, r3, #4
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	685a      	ldr	r2, [r3, #4]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	697a      	ldr	r2, [r7, #20]
 8007e46:	621a      	str	r2, [r3, #32]
}
 8007e48:	bf00      	nop
 8007e4a:	371c      	adds	r7, #28
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr
 8007e54:	40010000 	.word	0x40010000

08007e58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b087      	sub	sp, #28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a1b      	ldr	r3, [r3, #32]
 8007e66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	69db      	ldr	r3, [r3, #28]
 8007e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	021b      	lsls	r3, r3, #8
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ea2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	031b      	lsls	r3, r3, #12
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a10      	ldr	r2, [pc, #64]	; (8007ef4 <TIM_OC4_SetConfig+0x9c>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d109      	bne.n	8007ecc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ebe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	695b      	ldr	r3, [r3, #20]
 8007ec4:	019b      	lsls	r3, r3, #6
 8007ec6:	697a      	ldr	r2, [r7, #20]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	697a      	ldr	r2, [r7, #20]
 8007ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	621a      	str	r2, [r3, #32]
}
 8007ee6:	bf00      	nop
 8007ee8:	371c      	adds	r7, #28
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	40010000 	.word	0x40010000

08007ef8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b087      	sub	sp, #28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6a1b      	ldr	r3, [r3, #32]
 8007f08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	f023 0201 	bic.w	r2, r3, #1
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	011b      	lsls	r3, r3, #4
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f023 030a 	bic.w	r3, r3, #10
 8007f34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	621a      	str	r2, [r3, #32]
}
 8007f4a:	bf00      	nop
 8007f4c:	371c      	adds	r7, #28
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b087      	sub	sp, #28
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	60f8      	str	r0, [r7, #12]
 8007f5e:	60b9      	str	r1, [r7, #8]
 8007f60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6a1b      	ldr	r3, [r3, #32]
 8007f66:	f023 0210 	bic.w	r2, r3, #16
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6a1b      	ldr	r3, [r3, #32]
 8007f78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	031b      	lsls	r3, r3, #12
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	011b      	lsls	r3, r3, #4
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	621a      	str	r2, [r3, #32]
}
 8007faa:	bf00      	nop
 8007fac:	371c      	adds	r7, #28
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr

08007fb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b085      	sub	sp, #20
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fce:	683a      	ldr	r2, [r7, #0]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	f043 0307 	orr.w	r3, r3, #7
 8007fd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	609a      	str	r2, [r3, #8]
}
 8007fe0:	bf00      	nop
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
 8007ff8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008006:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	021a      	lsls	r2, r3, #8
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	431a      	orrs	r2, r3
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	4313      	orrs	r3, r2
 8008014:	697a      	ldr	r2, [r7, #20]
 8008016:	4313      	orrs	r3, r2
 8008018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	609a      	str	r2, [r3, #8]
}
 8008020:	bf00      	nop
 8008022:	371c      	adds	r7, #28
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800802c:	b480      	push	{r7}
 800802e:	b087      	sub	sp, #28
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	f003 031f 	and.w	r3, r3, #31
 800803e:	2201      	movs	r2, #1
 8008040:	fa02 f303 	lsl.w	r3, r2, r3
 8008044:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6a1a      	ldr	r2, [r3, #32]
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	43db      	mvns	r3, r3
 800804e:	401a      	ands	r2, r3
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6a1a      	ldr	r2, [r3, #32]
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	f003 031f 	and.w	r3, r3, #31
 800805e:	6879      	ldr	r1, [r7, #4]
 8008060:	fa01 f303 	lsl.w	r3, r1, r3
 8008064:	431a      	orrs	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	621a      	str	r2, [r3, #32]
}
 800806a:	bf00      	nop
 800806c:	371c      	adds	r7, #28
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
	...

08008078 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a1c      	ldr	r2, [pc, #112]	; (80080f4 <TIM_ResetCallback+0x7c>)
 8008084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a1b      	ldr	r2, [pc, #108]	; (80080f8 <TIM_ResetCallback+0x80>)
 800808c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a1a      	ldr	r2, [pc, #104]	; (80080fc <TIM_ResetCallback+0x84>)
 8008094:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a19      	ldr	r2, [pc, #100]	; (8008100 <TIM_ResetCallback+0x88>)
 800809c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a18      	ldr	r2, [pc, #96]	; (8008104 <TIM_ResetCallback+0x8c>)
 80080a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a17      	ldr	r2, [pc, #92]	; (8008108 <TIM_ResetCallback+0x90>)
 80080ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a16      	ldr	r2, [pc, #88]	; (800810c <TIM_ResetCallback+0x94>)
 80080b4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a15      	ldr	r2, [pc, #84]	; (8008110 <TIM_ResetCallback+0x98>)
 80080bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a14      	ldr	r2, [pc, #80]	; (8008114 <TIM_ResetCallback+0x9c>)
 80080c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a13      	ldr	r2, [pc, #76]	; (8008118 <TIM_ResetCallback+0xa0>)
 80080cc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a12      	ldr	r2, [pc, #72]	; (800811c <TIM_ResetCallback+0xa4>)
 80080d4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a11      	ldr	r2, [pc, #68]	; (8008120 <TIM_ResetCallback+0xa8>)
 80080dc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a10      	ldr	r2, [pc, #64]	; (8008124 <TIM_ResetCallback+0xac>)
 80080e4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr
 80080f4:	08003d21 	.word	0x08003d21
 80080f8:	08007797 	.word	0x08007797
 80080fc:	0800780f 	.word	0x0800780f
 8008100:	08007823 	.word	0x08007823
 8008104:	080077bf 	.word	0x080077bf
 8008108:	080077d3 	.word	0x080077d3
 800810c:	080077ab 	.word	0x080077ab
 8008110:	080077e7 	.word	0x080077e7
 8008114:	080077fb 	.word	0x080077fb
 8008118:	08007837 	.word	0x08007837
 800811c:	08008205 	.word	0x08008205
 8008120:	08008219 	.word	0x08008219
 8008124:	0800822d 	.word	0x0800822d

08008128 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008138:	2b01      	cmp	r3, #1
 800813a:	d101      	bne.n	8008140 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800813c:	2302      	movs	r3, #2
 800813e:	e050      	b.n	80081e2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2202      	movs	r2, #2
 800814c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008166:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	4313      	orrs	r3, r2
 8008170:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a1c      	ldr	r2, [pc, #112]	; (80081f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d018      	beq.n	80081b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800818c:	d013      	beq.n	80081b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a18      	ldr	r2, [pc, #96]	; (80081f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d00e      	beq.n	80081b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a16      	ldr	r2, [pc, #88]	; (80081f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d009      	beq.n	80081b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a15      	ldr	r2, [pc, #84]	; (80081fc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d004      	beq.n	80081b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a13      	ldr	r2, [pc, #76]	; (8008200 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d10c      	bne.n	80081d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	40010000 	.word	0x40010000
 80081f4:	40000400 	.word	0x40000400
 80081f8:	40000800 	.word	0x40000800
 80081fc:	40000c00 	.word	0x40000c00
 8008200:	40014000 	.word	0x40014000

08008204 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d101      	bne.n	8008252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e04a      	b.n	80082e8 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	d111      	bne.n	8008282 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fd2c 	bl	8008cc4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008270:	2b00      	cmp	r3, #0
 8008272:	d102      	bne.n	800827a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4a1e      	ldr	r2, [pc, #120]	; (80082f0 <HAL_UART_Init+0xb0>)
 8008278:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2224      	movs	r2, #36	; 0x24
 8008286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68da      	ldr	r2, [r3, #12]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008298:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fff6 	bl	800928c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	691a      	ldr	r2, [r3, #16]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	695a      	ldr	r2, [r3, #20]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082be:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68da      	ldr	r2, [r3, #12]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082ce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2220      	movs	r2, #32
 80082da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2220      	movs	r2, #32
 80082e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	080042dd 	.word	0x080042dd

080082f4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b087      	sub	sp, #28
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	460b      	mov	r3, r1
 80082fe:	607a      	str	r2, [r7, #4]
 8008300:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d107      	bne.n	800831c <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008310:	f043 0220 	orr.w	r2, r3, #32
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	e08c      	b.n	8008436 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008322:	2b01      	cmp	r3, #1
 8008324:	d101      	bne.n	800832a <HAL_UART_RegisterCallback+0x36>
 8008326:	2302      	movs	r3, #2
 8008328:	e085      	b.n	8008436 <HAL_UART_RegisterCallback+0x142>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008338:	b2db      	uxtb	r3, r3
 800833a:	2b20      	cmp	r3, #32
 800833c:	d151      	bne.n	80083e2 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800833e:	7afb      	ldrb	r3, [r7, #11]
 8008340:	2b0c      	cmp	r3, #12
 8008342:	d845      	bhi.n	80083d0 <HAL_UART_RegisterCallback+0xdc>
 8008344:	a201      	add	r2, pc, #4	; (adr r2, 800834c <HAL_UART_RegisterCallback+0x58>)
 8008346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834a:	bf00      	nop
 800834c:	08008381 	.word	0x08008381
 8008350:	08008389 	.word	0x08008389
 8008354:	08008391 	.word	0x08008391
 8008358:	08008399 	.word	0x08008399
 800835c:	080083a1 	.word	0x080083a1
 8008360:	080083a9 	.word	0x080083a9
 8008364:	080083b1 	.word	0x080083b1
 8008368:	080083b9 	.word	0x080083b9
 800836c:	080083d1 	.word	0x080083d1
 8008370:	080083d1 	.word	0x080083d1
 8008374:	080083d1 	.word	0x080083d1
 8008378:	080083c1 	.word	0x080083c1
 800837c:	080083c9 	.word	0x080083c9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8008386:	e051      	b.n	800842c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800838e:	e04d      	b.n	800842c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8008396:	e049      	b.n	800842c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800839e:	e045      	b.n	800842c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80083a6:	e041      	b.n	800842c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80083ae:	e03d      	b.n	800842c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80083b6:	e039      	b.n	800842c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80083be:	e035      	b.n	800842c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80083c6:	e031      	b.n	800842c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80083ce:	e02d      	b.n	800842c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d4:	f043 0220 	orr.w	r2, r3, #32
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	75fb      	strb	r3, [r7, #23]
        break;
 80083e0:	e024      	b.n	800842c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d116      	bne.n	800841c <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 80083ee:	7afb      	ldrb	r3, [r7, #11]
 80083f0:	2b0b      	cmp	r3, #11
 80083f2:	d002      	beq.n	80083fa <HAL_UART_RegisterCallback+0x106>
 80083f4:	2b0c      	cmp	r3, #12
 80083f6:	d004      	beq.n	8008402 <HAL_UART_RegisterCallback+0x10e>
 80083f8:	e007      	b.n	800840a <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008400:	e014      	b.n	800842c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008408:	e010      	b.n	800842c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840e:	f043 0220 	orr.w	r2, r3, #32
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	75fb      	strb	r3, [r7, #23]
        break;
 800841a:	e007      	b.n	800842c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008420:	f043 0220 	orr.w	r2, r3, #32
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008434:	7dfb      	ldrb	r3, [r7, #23]
}
 8008436:	4618      	mov	r0, r3
 8008438:	371c      	adds	r7, #28
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop

08008444 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	4613      	mov	r3, r2
 8008450:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b20      	cmp	r3, #32
 800845c:	d11d      	bne.n	800849a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d002      	beq.n	800846a <HAL_UART_Receive_IT+0x26>
 8008464:	88fb      	ldrh	r3, [r7, #6]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e016      	b.n	800849c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008474:	2b01      	cmp	r3, #1
 8008476:	d101      	bne.n	800847c <HAL_UART_Receive_IT+0x38>
 8008478:	2302      	movs	r3, #2
 800847a:	e00f      	b.n	800849c <HAL_UART_Receive_IT+0x58>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800848a:	88fb      	ldrh	r3, [r7, #6]
 800848c:	461a      	mov	r2, r3
 800848e:	68b9      	ldr	r1, [r7, #8]
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f000 fcf7 	bl	8008e84 <UART_Start_Receive_IT>
 8008496:	4603      	mov	r3, r0
 8008498:	e000      	b.n	800849c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800849a:	2302      	movs	r3, #2
  }
}
 800849c:	4618      	mov	r0, r3
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b08c      	sub	sp, #48	; 0x30
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	4613      	mov	r3, r2
 80084b0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b20      	cmp	r3, #32
 80084bc:	d165      	bne.n	800858a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d002      	beq.n	80084ca <HAL_UART_Transmit_DMA+0x26>
 80084c4:	88fb      	ldrh	r3, [r7, #6]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e05e      	b.n	800858c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d101      	bne.n	80084dc <HAL_UART_Transmit_DMA+0x38>
 80084d8:	2302      	movs	r3, #2
 80084da:	e057      	b.n	800858c <HAL_UART_Transmit_DMA+0xe8>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	88fa      	ldrh	r2, [r7, #6]
 80084ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	88fa      	ldrh	r2, [r7, #6]
 80084f4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2221      	movs	r2, #33	; 0x21
 8008500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008508:	4a22      	ldr	r2, [pc, #136]	; (8008594 <HAL_UART_Transmit_DMA+0xf0>)
 800850a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008510:	4a21      	ldr	r2, [pc, #132]	; (8008598 <HAL_UART_Transmit_DMA+0xf4>)
 8008512:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008518:	4a20      	ldr	r2, [pc, #128]	; (800859c <HAL_UART_Transmit_DMA+0xf8>)
 800851a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008520:	2200      	movs	r2, #0
 8008522:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008524:	f107 0308 	add.w	r3, r7, #8
 8008528:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800852e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008530:	6819      	ldr	r1, [r3, #0]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	3304      	adds	r3, #4
 8008538:	461a      	mov	r2, r3
 800853a:	88fb      	ldrh	r3, [r7, #6]
 800853c:	f7fc fe64 	bl	8005208 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008548:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	3314      	adds	r3, #20
 8008558:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	e853 3f00 	ldrex	r3, [r3]
 8008560:	617b      	str	r3, [r7, #20]
   return(result);
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008568:	62bb      	str	r3, [r7, #40]	; 0x28
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3314      	adds	r3, #20
 8008570:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008572:	627a      	str	r2, [r7, #36]	; 0x24
 8008574:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008576:	6a39      	ldr	r1, [r7, #32]
 8008578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800857a:	e841 2300 	strex	r3, r2, [r1]
 800857e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1e5      	bne.n	8008552 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008586:	2300      	movs	r3, #0
 8008588:	e000      	b.n	800858c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800858a:	2302      	movs	r3, #2
  }
}
 800858c:	4618      	mov	r0, r3
 800858e:	3730      	adds	r7, #48	; 0x30
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	08008d35 	.word	0x08008d35
 8008598:	08008dd1 	.word	0x08008dd1
 800859c:	08008def 	.word	0x08008def

080085a0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b09a      	sub	sp, #104	; 0x68
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	330c      	adds	r3, #12
 80085ae:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085b2:	e853 3f00 	ldrex	r3, [r3]
 80085b6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80085b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085be:	667b      	str	r3, [r7, #100]	; 0x64
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	330c      	adds	r3, #12
 80085c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80085c8:	657a      	str	r2, [r7, #84]	; 0x54
 80085ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80085ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80085d0:	e841 2300 	strex	r3, r2, [r1]
 80085d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80085d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1e5      	bne.n	80085a8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3314      	adds	r3, #20
 80085e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e6:	e853 3f00 	ldrex	r3, [r3]
 80085ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ee:	f023 0301 	bic.w	r3, r3, #1
 80085f2:	663b      	str	r3, [r7, #96]	; 0x60
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3314      	adds	r3, #20
 80085fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80085fc:	643a      	str	r2, [r7, #64]	; 0x40
 80085fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008600:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008602:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008604:	e841 2300 	strex	r3, r2, [r1]
 8008608:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800860a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1e5      	bne.n	80085dc <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008614:	2b01      	cmp	r3, #1
 8008616:	d119      	bne.n	800864c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	330c      	adds	r3, #12
 800861e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008620:	6a3b      	ldr	r3, [r7, #32]
 8008622:	e853 3f00 	ldrex	r3, [r3]
 8008626:	61fb      	str	r3, [r7, #28]
   return(result);
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	f023 0310 	bic.w	r3, r3, #16
 800862e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	330c      	adds	r3, #12
 8008636:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008638:	62fa      	str	r2, [r7, #44]	; 0x2c
 800863a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800863e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008640:	e841 2300 	strex	r3, r2, [r1]
 8008644:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1e5      	bne.n	8008618 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	695b      	ldr	r3, [r3, #20]
 8008652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008656:	2b40      	cmp	r3, #64	; 0x40
 8008658:	d136      	bne.n	80086c8 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	3314      	adds	r3, #20
 8008660:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	e853 3f00 	ldrex	r3, [r3]
 8008668:	60bb      	str	r3, [r7, #8]
   return(result);
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008670:	65bb      	str	r3, [r7, #88]	; 0x58
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	3314      	adds	r3, #20
 8008678:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800867a:	61ba      	str	r2, [r7, #24]
 800867c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867e:	6979      	ldr	r1, [r7, #20]
 8008680:	69ba      	ldr	r2, [r7, #24]
 8008682:	e841 2300 	strex	r3, r2, [r1]
 8008686:	613b      	str	r3, [r7, #16]
   return(result);
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1e5      	bne.n	800865a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008692:	2b00      	cmp	r3, #0
 8008694:	d018      	beq.n	80086c8 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869a:	2200      	movs	r2, #0
 800869c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7fc fe08 	bl	80052b8 <HAL_DMA_Abort>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00c      	beq.n	80086c8 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fd f81c 	bl	80056f0 <HAL_DMA_GetError>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b20      	cmp	r3, #32
 80086bc:	d104      	bne.n	80086c8 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2210      	movs	r2, #16
 80086c2:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e00a      	b.n	80086de <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2220      	movs	r2, #32
 80086d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3768      	adds	r7, #104	; 0x68
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
	...

080086e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b0ba      	sub	sp, #232	; 0xe8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	695b      	ldr	r3, [r3, #20]
 800870a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800870e:	2300      	movs	r3, #0
 8008710:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008714:	2300      	movs	r3, #0
 8008716:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800871a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800871e:	f003 030f 	and.w	r3, r3, #15
 8008722:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008726:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10f      	bne.n	800874e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800872e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008732:	f003 0320 	and.w	r3, r3, #32
 8008736:	2b00      	cmp	r3, #0
 8008738:	d009      	beq.n	800874e <HAL_UART_IRQHandler+0x66>
 800873a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800873e:	f003 0320 	and.w	r3, r3, #32
 8008742:	2b00      	cmp	r3, #0
 8008744:	d003      	beq.n	800874e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fce3 	bl	8009112 <UART_Receive_IT>
      return;
 800874c:	e25b      	b.n	8008c06 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800874e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008752:	2b00      	cmp	r3, #0
 8008754:	f000 80e1 	beq.w	800891a <HAL_UART_IRQHandler+0x232>
 8008758:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800875c:	f003 0301 	and.w	r3, r3, #1
 8008760:	2b00      	cmp	r3, #0
 8008762:	d106      	bne.n	8008772 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008768:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800876c:	2b00      	cmp	r3, #0
 800876e:	f000 80d4 	beq.w	800891a <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008776:	f003 0301 	and.w	r3, r3, #1
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00b      	beq.n	8008796 <HAL_UART_IRQHandler+0xae>
 800877e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008786:	2b00      	cmp	r3, #0
 8008788:	d005      	beq.n	8008796 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878e:	f043 0201 	orr.w	r2, r3, #1
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800879a:	f003 0304 	and.w	r3, r3, #4
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00b      	beq.n	80087ba <HAL_UART_IRQHandler+0xd2>
 80087a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087a6:	f003 0301 	and.w	r3, r3, #1
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d005      	beq.n	80087ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b2:	f043 0202 	orr.w	r2, r3, #2
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087be:	f003 0302 	and.w	r3, r3, #2
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00b      	beq.n	80087de <HAL_UART_IRQHandler+0xf6>
 80087c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d005      	beq.n	80087de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d6:	f043 0204 	orr.w	r2, r3, #4
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80087de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087e2:	f003 0308 	and.w	r3, r3, #8
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d011      	beq.n	800880e <HAL_UART_IRQHandler+0x126>
 80087ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087ee:	f003 0320 	and.w	r3, r3, #32
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d105      	bne.n	8008802 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80087f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d005      	beq.n	800880e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008806:	f043 0208 	orr.w	r2, r3, #8
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008812:	2b00      	cmp	r3, #0
 8008814:	f000 81f2 	beq.w	8008bfc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800881c:	f003 0320 	and.w	r3, r3, #32
 8008820:	2b00      	cmp	r3, #0
 8008822:	d008      	beq.n	8008836 <HAL_UART_IRQHandler+0x14e>
 8008824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008828:	f003 0320 	and.w	r3, r3, #32
 800882c:	2b00      	cmp	r3, #0
 800882e:	d002      	beq.n	8008836 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fc6e 	bl	8009112 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	695b      	ldr	r3, [r3, #20]
 800883c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008840:	2b40      	cmp	r3, #64	; 0x40
 8008842:	bf0c      	ite	eq
 8008844:	2301      	moveq	r3, #1
 8008846:	2300      	movne	r3, #0
 8008848:	b2db      	uxtb	r3, r3
 800884a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008852:	f003 0308 	and.w	r3, r3, #8
 8008856:	2b00      	cmp	r3, #0
 8008858:	d103      	bne.n	8008862 <HAL_UART_IRQHandler+0x17a>
 800885a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800885e:	2b00      	cmp	r3, #0
 8008860:	d051      	beq.n	8008906 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fb74 	bl	8008f50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	695b      	ldr	r3, [r3, #20]
 800886e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008872:	2b40      	cmp	r3, #64	; 0x40
 8008874:	d142      	bne.n	80088fc <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3314      	adds	r3, #20
 800887c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008880:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008884:	e853 3f00 	ldrex	r3, [r3]
 8008888:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800888c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008894:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	3314      	adds	r3, #20
 800889e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80088a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80088a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80088ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80088b2:	e841 2300 	strex	r3, r2, [r1]
 80088b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80088ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1d9      	bne.n	8008876 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d013      	beq.n	80088f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ce:	4a7f      	ldr	r2, [pc, #508]	; (8008acc <HAL_UART_IRQHandler+0x3e4>)
 80088d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fc fd5e 	bl	8005398 <HAL_DMA_Abort_IT>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d019      	beq.n	8008916 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80088ec:	4610      	mov	r0, r2
 80088ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088f0:	e011      	b.n	8008916 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088fa:	e00c      	b.n	8008916 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008904:	e007      	b.n	8008916 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008914:	e172      	b.n	8008bfc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008916:	bf00      	nop
    return;
 8008918:	e170      	b.n	8008bfc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891e:	2b01      	cmp	r3, #1
 8008920:	f040 814c 	bne.w	8008bbc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008928:	f003 0310 	and.w	r3, r3, #16
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 8145 	beq.w	8008bbc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008936:	f003 0310 	and.w	r3, r3, #16
 800893a:	2b00      	cmp	r3, #0
 800893c:	f000 813e 	beq.w	8008bbc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008940:	2300      	movs	r3, #0
 8008942:	60bb      	str	r3, [r7, #8]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	60bb      	str	r3, [r7, #8]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	60bb      	str	r3, [r7, #8]
 8008954:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	695b      	ldr	r3, [r3, #20]
 800895c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008960:	2b40      	cmp	r3, #64	; 0x40
 8008962:	f040 80b5 	bne.w	8008ad0 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008972:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008976:	2b00      	cmp	r3, #0
 8008978:	f000 8142 	beq.w	8008c00 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008980:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008984:	429a      	cmp	r2, r3
 8008986:	f080 813b 	bcs.w	8008c00 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008990:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008996:	69db      	ldr	r3, [r3, #28]
 8008998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800899c:	f000 8088 	beq.w	8008ab0 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	330c      	adds	r3, #12
 80089a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089ae:	e853 3f00 	ldrex	r3, [r3]
 80089b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80089b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	330c      	adds	r3, #12
 80089c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80089cc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80089d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80089d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80089dc:	e841 2300 	strex	r3, r2, [r1]
 80089e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80089e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1d9      	bne.n	80089a0 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	3314      	adds	r3, #20
 80089f2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089f6:	e853 3f00 	ldrex	r3, [r3]
 80089fa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80089fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089fe:	f023 0301 	bic.w	r3, r3, #1
 8008a02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	3314      	adds	r3, #20
 8008a0c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a10:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008a14:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a16:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a1c:	e841 2300 	strex	r3, r2, [r1]
 8008a20:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008a22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1e1      	bne.n	80089ec <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	3314      	adds	r3, #20
 8008a2e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a32:	e853 3f00 	ldrex	r3, [r3]
 8008a36:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008a38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	3314      	adds	r3, #20
 8008a48:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008a4c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008a4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a50:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008a52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008a54:	e841 2300 	strex	r3, r2, [r1]
 8008a58:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008a5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1e3      	bne.n	8008a28 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2220      	movs	r2, #32
 8008a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	330c      	adds	r3, #12
 8008a74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a78:	e853 3f00 	ldrex	r3, [r3]
 8008a7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a80:	f023 0310 	bic.w	r3, r3, #16
 8008a84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	330c      	adds	r3, #12
 8008a8e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008a92:	65ba      	str	r2, [r7, #88]	; 0x58
 8008a94:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a9a:	e841 2300 	strex	r3, r2, [r1]
 8008a9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1e3      	bne.n	8008a6e <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7fc fc04 	bl	80052b8 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8008abc:	b292      	uxth	r2, r2
 8008abe:	1a8a      	subs	r2, r1, r2
 8008ac0:	b292      	uxth	r2, r2
 8008ac2:	4611      	mov	r1, r2
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ac8:	e09a      	b.n	8008c00 <HAL_UART_IRQHandler+0x518>
 8008aca:	bf00      	nop
 8008acc:	08009017 	.word	0x08009017
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	f000 808c 	beq.w	8008c04 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008aec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f000 8087 	beq.w	8008c04 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	330c      	adds	r3, #12
 8008afc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b00:	e853 3f00 	ldrex	r3, [r3]
 8008b04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	330c      	adds	r3, #12
 8008b16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008b1a:	647a      	str	r2, [r7, #68]	; 0x44
 8008b1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b22:	e841 2300 	strex	r3, r2, [r1]
 8008b26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1e3      	bne.n	8008af6 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	3314      	adds	r3, #20
 8008b34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b38:	e853 3f00 	ldrex	r3, [r3]
 8008b3c:	623b      	str	r3, [r7, #32]
   return(result);
 8008b3e:	6a3b      	ldr	r3, [r7, #32]
 8008b40:	f023 0301 	bic.w	r3, r3, #1
 8008b44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	3314      	adds	r3, #20
 8008b4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008b52:	633a      	str	r2, [r7, #48]	; 0x30
 8008b54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b5a:	e841 2300 	strex	r3, r2, [r1]
 8008b5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1e3      	bne.n	8008b2e <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2220      	movs	r2, #32
 8008b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	330c      	adds	r3, #12
 8008b7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	e853 3f00 	ldrex	r3, [r3]
 8008b82:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f023 0310 	bic.w	r3, r3, #16
 8008b8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	330c      	adds	r3, #12
 8008b94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008b98:	61fa      	str	r2, [r7, #28]
 8008b9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9c:	69b9      	ldr	r1, [r7, #24]
 8008b9e:	69fa      	ldr	r2, [r7, #28]
 8008ba0:	e841 2300 	strex	r3, r2, [r1]
 8008ba4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1e3      	bne.n	8008b74 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bb0:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8008bb4:	4611      	mov	r1, r2
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008bba:	e023      	b.n	8008c04 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d009      	beq.n	8008bdc <HAL_UART_IRQHandler+0x4f4>
 8008bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d003      	beq.n	8008bdc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 fa33 	bl	8009040 <UART_Transmit_IT>
    return;
 8008bda:	e014      	b.n	8008c06 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00e      	beq.n	8008c06 <HAL_UART_IRQHandler+0x51e>
 8008be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d008      	beq.n	8008c06 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 fa73 	bl	80090e0 <UART_EndTransmit_IT>
    return;
 8008bfa:	e004      	b.n	8008c06 <HAL_UART_IRQHandler+0x51e>
    return;
 8008bfc:	bf00      	nop
 8008bfe:	e002      	b.n	8008c06 <HAL_UART_IRQHandler+0x51e>
      return;
 8008c00:	bf00      	nop
 8008c02:	e000      	b.n	8008c06 <HAL_UART_IRQHandler+0x51e>
      return;
 8008c04:	bf00      	nop
  }
}
 8008c06:	37e8      	adds	r7, #232	; 0xe8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008c78:	bf00      	nop
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a10      	ldr	r2, [pc, #64]	; (8008d10 <UART_InitCallbacksToDefault+0x4c>)
 8008cd0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a0f      	ldr	r2, [pc, #60]	; (8008d14 <UART_InitCallbacksToDefault+0x50>)
 8008cd6:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a0f      	ldr	r2, [pc, #60]	; (8008d18 <UART_InitCallbacksToDefault+0x54>)
 8008cdc:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a0e      	ldr	r2, [pc, #56]	; (8008d1c <UART_InitCallbacksToDefault+0x58>)
 8008ce2:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a0e      	ldr	r2, [pc, #56]	; (8008d20 <UART_InitCallbacksToDefault+0x5c>)
 8008ce8:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a0d      	ldr	r2, [pc, #52]	; (8008d24 <UART_InitCallbacksToDefault+0x60>)
 8008cee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a0d      	ldr	r2, [pc, #52]	; (8008d28 <UART_InitCallbacksToDefault+0x64>)
 8008cf4:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a0c      	ldr	r2, [pc, #48]	; (8008d2c <UART_InitCallbacksToDefault+0x68>)
 8008cfa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a0c      	ldr	r2, [pc, #48]	; (8008d30 <UART_InitCallbacksToDefault+0x6c>)
 8008d00:	669a      	str	r2, [r3, #104]	; 0x68

}
 8008d02:	bf00      	nop
 8008d04:	370c      	adds	r7, #12
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	08008c21 	.word	0x08008c21
 8008d14:	08008c0d 	.word	0x08008c0d
 8008d18:	08008c49 	.word	0x08008c49
 8008d1c:	08008c35 	.word	0x08008c35
 8008d20:	08008c5d 	.word	0x08008c5d
 8008d24:	08008c71 	.word	0x08008c71
 8008d28:	08008c85 	.word	0x08008c85
 8008d2c:	08008c99 	.word	0x08008c99
 8008d30:	08008cad 	.word	0x08008cad

08008d34 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b090      	sub	sp, #64	; 0x40
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d40:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d137      	bne.n	8008dc0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d52:	2200      	movs	r2, #0
 8008d54:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	3314      	adds	r3, #20
 8008d5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d60:	e853 3f00 	ldrex	r3, [r3]
 8008d64:	623b      	str	r3, [r7, #32]
   return(result);
 8008d66:	6a3b      	ldr	r3, [r7, #32]
 8008d68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	3314      	adds	r3, #20
 8008d74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d76:	633a      	str	r2, [r7, #48]	; 0x30
 8008d78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d7e:	e841 2300 	strex	r3, r2, [r1]
 8008d82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1e5      	bne.n	8008d56 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	330c      	adds	r3, #12
 8008d90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	e853 3f00 	ldrex	r3, [r3]
 8008d98:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008da0:	637b      	str	r3, [r7, #52]	; 0x34
 8008da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	330c      	adds	r3, #12
 8008da8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008daa:	61fa      	str	r2, [r7, #28]
 8008dac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dae:	69b9      	ldr	r1, [r7, #24]
 8008db0:	69fa      	ldr	r2, [r7, #28]
 8008db2:	e841 2300 	strex	r3, r2, [r1]
 8008db6:	617b      	str	r3, [r7, #20]
   return(result);
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1e5      	bne.n	8008d8a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008dbe:	e003      	b.n	8008dc8 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8008dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dc4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008dc6:	4798      	blx	r3
}
 8008dc8:	bf00      	nop
 8008dca:	3740      	adds	r7, #64	; 0x40
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ddc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008de6:	bf00      	nop
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b084      	sub	sp, #16
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008df6:	2300      	movs	r3, #0
 8008df8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	695b      	ldr	r3, [r3, #20]
 8008e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e0a:	2b80      	cmp	r3, #128	; 0x80
 8008e0c:	bf0c      	ite	eq
 8008e0e:	2301      	moveq	r3, #1
 8008e10:	2300      	movne	r3, #0
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	2b21      	cmp	r3, #33	; 0x21
 8008e20:	d108      	bne.n	8008e34 <UART_DMAError+0x46>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d005      	beq.n	8008e34 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008e2e:	68b8      	ldr	r0, [r7, #8]
 8008e30:	f000 f866 	bl	8008f00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e3e:	2b40      	cmp	r3, #64	; 0x40
 8008e40:	bf0c      	ite	eq
 8008e42:	2301      	moveq	r3, #1
 8008e44:	2300      	movne	r3, #0
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	2b22      	cmp	r3, #34	; 0x22
 8008e54:	d108      	bne.n	8008e68 <UART_DMAError+0x7a>
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d005      	beq.n	8008e68 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008e62:	68b8      	ldr	r0, [r7, #8]
 8008e64:	f000 f874 	bl	8008f50 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6c:	f043 0210 	orr.w	r2, r3, #16
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e78:	68b8      	ldr	r0, [r7, #8]
 8008e7a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e7c:	bf00      	nop
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	88fa      	ldrh	r2, [r7, #6]
 8008e9c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	88fa      	ldrh	r2, [r7, #6]
 8008ea2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2222      	movs	r2, #34	; 0x22
 8008eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d007      	beq.n	8008ed2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68da      	ldr	r2, [r3, #12]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ed0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	695a      	ldr	r2, [r3, #20]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f042 0201 	orr.w	r2, r2, #1
 8008ee0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	68da      	ldr	r2, [r3, #12]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f042 0220 	orr.w	r2, r2, #32
 8008ef0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3714      	adds	r7, #20
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b089      	sub	sp, #36	; 0x24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	330c      	adds	r3, #12
 8008f0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	e853 3f00 	ldrex	r3, [r3]
 8008f16:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008f1e:	61fb      	str	r3, [r7, #28]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	330c      	adds	r3, #12
 8008f26:	69fa      	ldr	r2, [r7, #28]
 8008f28:	61ba      	str	r2, [r7, #24]
 8008f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2c:	6979      	ldr	r1, [r7, #20]
 8008f2e:	69ba      	ldr	r2, [r7, #24]
 8008f30:	e841 2300 	strex	r3, r2, [r1]
 8008f34:	613b      	str	r3, [r7, #16]
   return(result);
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1e5      	bne.n	8008f08 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2220      	movs	r2, #32
 8008f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008f44:	bf00      	nop
 8008f46:	3724      	adds	r7, #36	; 0x24
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b095      	sub	sp, #84	; 0x54
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	330c      	adds	r3, #12
 8008f5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f62:	e853 3f00 	ldrex	r3, [r3]
 8008f66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	330c      	adds	r3, #12
 8008f76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f78:	643a      	str	r2, [r7, #64]	; 0x40
 8008f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f80:	e841 2300 	strex	r3, r2, [r1]
 8008f84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1e5      	bne.n	8008f58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	3314      	adds	r3, #20
 8008f92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f94:	6a3b      	ldr	r3, [r7, #32]
 8008f96:	e853 3f00 	ldrex	r3, [r3]
 8008f9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	f023 0301 	bic.w	r3, r3, #1
 8008fa2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	3314      	adds	r3, #20
 8008faa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008fae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fb4:	e841 2300 	strex	r3, r2, [r1]
 8008fb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1e5      	bne.n	8008f8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d119      	bne.n	8008ffc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	330c      	adds	r3, #12
 8008fce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	e853 3f00 	ldrex	r3, [r3]
 8008fd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	f023 0310 	bic.w	r3, r3, #16
 8008fde:	647b      	str	r3, [r7, #68]	; 0x44
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	330c      	adds	r3, #12
 8008fe6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fe8:	61ba      	str	r2, [r7, #24]
 8008fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fec:	6979      	ldr	r1, [r7, #20]
 8008fee:	69ba      	ldr	r2, [r7, #24]
 8008ff0:	e841 2300 	strex	r3, r2, [r1]
 8008ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1e5      	bne.n	8008fc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2220      	movs	r2, #32
 8009000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	631a      	str	r2, [r3, #48]	; 0x30
}
 800900a:	bf00      	nop
 800900c:	3754      	adds	r7, #84	; 0x54
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b084      	sub	sp, #16
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009022:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2200      	movs	r2, #0
 8009028:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2200      	movs	r2, #0
 800902e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009038:	bf00      	nop
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800904e:	b2db      	uxtb	r3, r3
 8009050:	2b21      	cmp	r3, #33	; 0x21
 8009052:	d13e      	bne.n	80090d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800905c:	d114      	bne.n	8009088 <UART_Transmit_IT+0x48>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d110      	bne.n	8009088 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	881b      	ldrh	r3, [r3, #0]
 8009070:	461a      	mov	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800907a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6a1b      	ldr	r3, [r3, #32]
 8009080:	1c9a      	adds	r2, r3, #2
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	621a      	str	r2, [r3, #32]
 8009086:	e008      	b.n	800909a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6a1b      	ldr	r3, [r3, #32]
 800908c:	1c59      	adds	r1, r3, #1
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	6211      	str	r1, [r2, #32]
 8009092:	781a      	ldrb	r2, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800909e:	b29b      	uxth	r3, r3
 80090a0:	3b01      	subs	r3, #1
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	4619      	mov	r1, r3
 80090a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d10f      	bne.n	80090ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	68da      	ldr	r2, [r3, #12]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68da      	ldr	r2, [r3, #12]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80090ce:	2300      	movs	r3, #0
 80090d0:	e000      	b.n	80090d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80090d2:	2302      	movs	r3, #2
  }
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3714      	adds	r7, #20
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68da      	ldr	r2, [r3, #12]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2220      	movs	r2, #32
 80090fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3708      	adds	r7, #8
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b08c      	sub	sp, #48	; 0x30
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009120:	b2db      	uxtb	r3, r3
 8009122:	2b22      	cmp	r3, #34	; 0x22
 8009124:	f040 80ad 	bne.w	8009282 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009130:	d117      	bne.n	8009162 <UART_Receive_IT+0x50>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	691b      	ldr	r3, [r3, #16]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d113      	bne.n	8009162 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800913a:	2300      	movs	r3, #0
 800913c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009142:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	b29b      	uxth	r3, r3
 800914c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009150:	b29a      	uxth	r2, r3
 8009152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009154:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915a:	1c9a      	adds	r2, r3, #2
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	629a      	str	r2, [r3, #40]	; 0x28
 8009160:	e026      	b.n	80091b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009166:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009168:	2300      	movs	r3, #0
 800916a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009174:	d007      	beq.n	8009186 <UART_Receive_IT+0x74>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10a      	bne.n	8009194 <UART_Receive_IT+0x82>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d106      	bne.n	8009194 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	b2da      	uxtb	r2, r3
 800918e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009190:	701a      	strb	r2, [r3, #0]
 8009192:	e008      	b.n	80091a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	b2db      	uxtb	r3, r3
 800919c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091aa:	1c5a      	adds	r2, r3, #1
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	3b01      	subs	r3, #1
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	4619      	mov	r1, r3
 80091be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d15c      	bne.n	800927e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68da      	ldr	r2, [r3, #12]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f022 0220 	bic.w	r2, r2, #32
 80091d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68da      	ldr	r2, [r3, #12]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80091e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	695a      	ldr	r2, [r3, #20]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f022 0201 	bic.w	r2, r2, #1
 80091f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2220      	movs	r2, #32
 80091f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009200:	2b01      	cmp	r3, #1
 8009202:	d136      	bne.n	8009272 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	330c      	adds	r3, #12
 8009210:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	e853 3f00 	ldrex	r3, [r3]
 8009218:	613b      	str	r3, [r7, #16]
   return(result);
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	f023 0310 	bic.w	r3, r3, #16
 8009220:	627b      	str	r3, [r7, #36]	; 0x24
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	330c      	adds	r3, #12
 8009228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800922a:	623a      	str	r2, [r7, #32]
 800922c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922e:	69f9      	ldr	r1, [r7, #28]
 8009230:	6a3a      	ldr	r2, [r7, #32]
 8009232:	e841 2300 	strex	r3, r2, [r1]
 8009236:	61bb      	str	r3, [r7, #24]
   return(result);
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1e5      	bne.n	800920a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f003 0310 	and.w	r3, r3, #16
 8009248:	2b10      	cmp	r3, #16
 800924a:	d10a      	bne.n	8009262 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800924c:	2300      	movs	r3, #0
 800924e:	60fb      	str	r3, [r7, #12]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	60fb      	str	r3, [r7, #12]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	60fb      	str	r3, [r7, #12]
 8009260:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800926a:	4611      	mov	r1, r2
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	4798      	blx	r3
 8009270:	e003      	b.n	800927a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	e002      	b.n	8009284 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800927e:	2300      	movs	r3, #0
 8009280:	e000      	b.n	8009284 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8009282:	2302      	movs	r3, #2
  }
}
 8009284:	4618      	mov	r0, r3
 8009286:	3730      	adds	r7, #48	; 0x30
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800928c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009290:	b0c0      	sub	sp, #256	; 0x100
 8009292:	af00      	add	r7, sp, #0
 8009294:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	691b      	ldr	r3, [r3, #16]
 80092a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80092a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092a8:	68d9      	ldr	r1, [r3, #12]
 80092aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	ea40 0301 	orr.w	r3, r0, r1
 80092b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80092b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092ba:	689a      	ldr	r2, [r3, #8]
 80092bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	431a      	orrs	r2, r3
 80092c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	431a      	orrs	r2, r3
 80092cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092d0:	69db      	ldr	r3, [r3, #28]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80092d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80092e4:	f021 010c 	bic.w	r1, r1, #12
 80092e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80092f2:	430b      	orrs	r3, r1
 80092f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80092f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	695b      	ldr	r3, [r3, #20]
 80092fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009306:	6999      	ldr	r1, [r3, #24]
 8009308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	ea40 0301 	orr.w	r3, r0, r1
 8009312:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	4b8f      	ldr	r3, [pc, #572]	; (8009558 <UART_SetConfig+0x2cc>)
 800931c:	429a      	cmp	r2, r3
 800931e:	d005      	beq.n	800932c <UART_SetConfig+0xa0>
 8009320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	4b8d      	ldr	r3, [pc, #564]	; (800955c <UART_SetConfig+0x2d0>)
 8009328:	429a      	cmp	r2, r3
 800932a:	d104      	bne.n	8009336 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800932c:	f7fd fa6e 	bl	800680c <HAL_RCC_GetPCLK2Freq>
 8009330:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009334:	e003      	b.n	800933e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009336:	f7fd fa55 	bl	80067e4 <HAL_RCC_GetPCLK1Freq>
 800933a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800933e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009342:	69db      	ldr	r3, [r3, #28]
 8009344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009348:	f040 810c 	bne.w	8009564 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800934c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009350:	2200      	movs	r2, #0
 8009352:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009356:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800935a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800935e:	4622      	mov	r2, r4
 8009360:	462b      	mov	r3, r5
 8009362:	1891      	adds	r1, r2, r2
 8009364:	65b9      	str	r1, [r7, #88]	; 0x58
 8009366:	415b      	adcs	r3, r3
 8009368:	65fb      	str	r3, [r7, #92]	; 0x5c
 800936a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800936e:	4621      	mov	r1, r4
 8009370:	eb12 0801 	adds.w	r8, r2, r1
 8009374:	4629      	mov	r1, r5
 8009376:	eb43 0901 	adc.w	r9, r3, r1
 800937a:	f04f 0200 	mov.w	r2, #0
 800937e:	f04f 0300 	mov.w	r3, #0
 8009382:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009386:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800938a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800938e:	4690      	mov	r8, r2
 8009390:	4699      	mov	r9, r3
 8009392:	4623      	mov	r3, r4
 8009394:	eb18 0303 	adds.w	r3, r8, r3
 8009398:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800939c:	462b      	mov	r3, r5
 800939e:	eb49 0303 	adc.w	r3, r9, r3
 80093a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80093a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80093b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80093b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80093ba:	460b      	mov	r3, r1
 80093bc:	18db      	adds	r3, r3, r3
 80093be:	653b      	str	r3, [r7, #80]	; 0x50
 80093c0:	4613      	mov	r3, r2
 80093c2:	eb42 0303 	adc.w	r3, r2, r3
 80093c6:	657b      	str	r3, [r7, #84]	; 0x54
 80093c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80093cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80093d0:	f7f7 fc06 	bl	8000be0 <__aeabi_uldivmod>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	4b61      	ldr	r3, [pc, #388]	; (8009560 <UART_SetConfig+0x2d4>)
 80093da:	fba3 2302 	umull	r2, r3, r3, r2
 80093de:	095b      	lsrs	r3, r3, #5
 80093e0:	011c      	lsls	r4, r3, #4
 80093e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093e6:	2200      	movs	r2, #0
 80093e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80093ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80093f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80093f4:	4642      	mov	r2, r8
 80093f6:	464b      	mov	r3, r9
 80093f8:	1891      	adds	r1, r2, r2
 80093fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80093fc:	415b      	adcs	r3, r3
 80093fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009400:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009404:	4641      	mov	r1, r8
 8009406:	eb12 0a01 	adds.w	sl, r2, r1
 800940a:	4649      	mov	r1, r9
 800940c:	eb43 0b01 	adc.w	fp, r3, r1
 8009410:	f04f 0200 	mov.w	r2, #0
 8009414:	f04f 0300 	mov.w	r3, #0
 8009418:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800941c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009420:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009424:	4692      	mov	sl, r2
 8009426:	469b      	mov	fp, r3
 8009428:	4643      	mov	r3, r8
 800942a:	eb1a 0303 	adds.w	r3, sl, r3
 800942e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009432:	464b      	mov	r3, r9
 8009434:	eb4b 0303 	adc.w	r3, fp, r3
 8009438:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800943c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009448:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800944c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009450:	460b      	mov	r3, r1
 8009452:	18db      	adds	r3, r3, r3
 8009454:	643b      	str	r3, [r7, #64]	; 0x40
 8009456:	4613      	mov	r3, r2
 8009458:	eb42 0303 	adc.w	r3, r2, r3
 800945c:	647b      	str	r3, [r7, #68]	; 0x44
 800945e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009462:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009466:	f7f7 fbbb 	bl	8000be0 <__aeabi_uldivmod>
 800946a:	4602      	mov	r2, r0
 800946c:	460b      	mov	r3, r1
 800946e:	4611      	mov	r1, r2
 8009470:	4b3b      	ldr	r3, [pc, #236]	; (8009560 <UART_SetConfig+0x2d4>)
 8009472:	fba3 2301 	umull	r2, r3, r3, r1
 8009476:	095b      	lsrs	r3, r3, #5
 8009478:	2264      	movs	r2, #100	; 0x64
 800947a:	fb02 f303 	mul.w	r3, r2, r3
 800947e:	1acb      	subs	r3, r1, r3
 8009480:	00db      	lsls	r3, r3, #3
 8009482:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009486:	4b36      	ldr	r3, [pc, #216]	; (8009560 <UART_SetConfig+0x2d4>)
 8009488:	fba3 2302 	umull	r2, r3, r3, r2
 800948c:	095b      	lsrs	r3, r3, #5
 800948e:	005b      	lsls	r3, r3, #1
 8009490:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009494:	441c      	add	r4, r3
 8009496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800949a:	2200      	movs	r2, #0
 800949c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80094a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80094a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80094a8:	4642      	mov	r2, r8
 80094aa:	464b      	mov	r3, r9
 80094ac:	1891      	adds	r1, r2, r2
 80094ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80094b0:	415b      	adcs	r3, r3
 80094b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80094b8:	4641      	mov	r1, r8
 80094ba:	1851      	adds	r1, r2, r1
 80094bc:	6339      	str	r1, [r7, #48]	; 0x30
 80094be:	4649      	mov	r1, r9
 80094c0:	414b      	adcs	r3, r1
 80094c2:	637b      	str	r3, [r7, #52]	; 0x34
 80094c4:	f04f 0200 	mov.w	r2, #0
 80094c8:	f04f 0300 	mov.w	r3, #0
 80094cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80094d0:	4659      	mov	r1, fp
 80094d2:	00cb      	lsls	r3, r1, #3
 80094d4:	4651      	mov	r1, sl
 80094d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094da:	4651      	mov	r1, sl
 80094dc:	00ca      	lsls	r2, r1, #3
 80094de:	4610      	mov	r0, r2
 80094e0:	4619      	mov	r1, r3
 80094e2:	4603      	mov	r3, r0
 80094e4:	4642      	mov	r2, r8
 80094e6:	189b      	adds	r3, r3, r2
 80094e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80094ec:	464b      	mov	r3, r9
 80094ee:	460a      	mov	r2, r1
 80094f0:	eb42 0303 	adc.w	r3, r2, r3
 80094f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80094f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009504:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009508:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800950c:	460b      	mov	r3, r1
 800950e:	18db      	adds	r3, r3, r3
 8009510:	62bb      	str	r3, [r7, #40]	; 0x28
 8009512:	4613      	mov	r3, r2
 8009514:	eb42 0303 	adc.w	r3, r2, r3
 8009518:	62fb      	str	r3, [r7, #44]	; 0x2c
 800951a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800951e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009522:	f7f7 fb5d 	bl	8000be0 <__aeabi_uldivmod>
 8009526:	4602      	mov	r2, r0
 8009528:	460b      	mov	r3, r1
 800952a:	4b0d      	ldr	r3, [pc, #52]	; (8009560 <UART_SetConfig+0x2d4>)
 800952c:	fba3 1302 	umull	r1, r3, r3, r2
 8009530:	095b      	lsrs	r3, r3, #5
 8009532:	2164      	movs	r1, #100	; 0x64
 8009534:	fb01 f303 	mul.w	r3, r1, r3
 8009538:	1ad3      	subs	r3, r2, r3
 800953a:	00db      	lsls	r3, r3, #3
 800953c:	3332      	adds	r3, #50	; 0x32
 800953e:	4a08      	ldr	r2, [pc, #32]	; (8009560 <UART_SetConfig+0x2d4>)
 8009540:	fba2 2303 	umull	r2, r3, r2, r3
 8009544:	095b      	lsrs	r3, r3, #5
 8009546:	f003 0207 	and.w	r2, r3, #7
 800954a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4422      	add	r2, r4
 8009552:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009554:	e105      	b.n	8009762 <UART_SetConfig+0x4d6>
 8009556:	bf00      	nop
 8009558:	40011000 	.word	0x40011000
 800955c:	40011400 	.word	0x40011400
 8009560:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009564:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009568:	2200      	movs	r2, #0
 800956a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800956e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009572:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009576:	4642      	mov	r2, r8
 8009578:	464b      	mov	r3, r9
 800957a:	1891      	adds	r1, r2, r2
 800957c:	6239      	str	r1, [r7, #32]
 800957e:	415b      	adcs	r3, r3
 8009580:	627b      	str	r3, [r7, #36]	; 0x24
 8009582:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009586:	4641      	mov	r1, r8
 8009588:	1854      	adds	r4, r2, r1
 800958a:	4649      	mov	r1, r9
 800958c:	eb43 0501 	adc.w	r5, r3, r1
 8009590:	f04f 0200 	mov.w	r2, #0
 8009594:	f04f 0300 	mov.w	r3, #0
 8009598:	00eb      	lsls	r3, r5, #3
 800959a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800959e:	00e2      	lsls	r2, r4, #3
 80095a0:	4614      	mov	r4, r2
 80095a2:	461d      	mov	r5, r3
 80095a4:	4643      	mov	r3, r8
 80095a6:	18e3      	adds	r3, r4, r3
 80095a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80095ac:	464b      	mov	r3, r9
 80095ae:	eb45 0303 	adc.w	r3, r5, r3
 80095b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80095b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80095c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80095c6:	f04f 0200 	mov.w	r2, #0
 80095ca:	f04f 0300 	mov.w	r3, #0
 80095ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80095d2:	4629      	mov	r1, r5
 80095d4:	008b      	lsls	r3, r1, #2
 80095d6:	4621      	mov	r1, r4
 80095d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095dc:	4621      	mov	r1, r4
 80095de:	008a      	lsls	r2, r1, #2
 80095e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80095e4:	f7f7 fafc 	bl	8000be0 <__aeabi_uldivmod>
 80095e8:	4602      	mov	r2, r0
 80095ea:	460b      	mov	r3, r1
 80095ec:	4b60      	ldr	r3, [pc, #384]	; (8009770 <UART_SetConfig+0x4e4>)
 80095ee:	fba3 2302 	umull	r2, r3, r3, r2
 80095f2:	095b      	lsrs	r3, r3, #5
 80095f4:	011c      	lsls	r4, r3, #4
 80095f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095fa:	2200      	movs	r2, #0
 80095fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009600:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009604:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009608:	4642      	mov	r2, r8
 800960a:	464b      	mov	r3, r9
 800960c:	1891      	adds	r1, r2, r2
 800960e:	61b9      	str	r1, [r7, #24]
 8009610:	415b      	adcs	r3, r3
 8009612:	61fb      	str	r3, [r7, #28]
 8009614:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009618:	4641      	mov	r1, r8
 800961a:	1851      	adds	r1, r2, r1
 800961c:	6139      	str	r1, [r7, #16]
 800961e:	4649      	mov	r1, r9
 8009620:	414b      	adcs	r3, r1
 8009622:	617b      	str	r3, [r7, #20]
 8009624:	f04f 0200 	mov.w	r2, #0
 8009628:	f04f 0300 	mov.w	r3, #0
 800962c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009630:	4659      	mov	r1, fp
 8009632:	00cb      	lsls	r3, r1, #3
 8009634:	4651      	mov	r1, sl
 8009636:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800963a:	4651      	mov	r1, sl
 800963c:	00ca      	lsls	r2, r1, #3
 800963e:	4610      	mov	r0, r2
 8009640:	4619      	mov	r1, r3
 8009642:	4603      	mov	r3, r0
 8009644:	4642      	mov	r2, r8
 8009646:	189b      	adds	r3, r3, r2
 8009648:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800964c:	464b      	mov	r3, r9
 800964e:	460a      	mov	r2, r1
 8009650:	eb42 0303 	adc.w	r3, r2, r3
 8009654:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	67bb      	str	r3, [r7, #120]	; 0x78
 8009662:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009664:	f04f 0200 	mov.w	r2, #0
 8009668:	f04f 0300 	mov.w	r3, #0
 800966c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009670:	4649      	mov	r1, r9
 8009672:	008b      	lsls	r3, r1, #2
 8009674:	4641      	mov	r1, r8
 8009676:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800967a:	4641      	mov	r1, r8
 800967c:	008a      	lsls	r2, r1, #2
 800967e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009682:	f7f7 faad 	bl	8000be0 <__aeabi_uldivmod>
 8009686:	4602      	mov	r2, r0
 8009688:	460b      	mov	r3, r1
 800968a:	4b39      	ldr	r3, [pc, #228]	; (8009770 <UART_SetConfig+0x4e4>)
 800968c:	fba3 1302 	umull	r1, r3, r3, r2
 8009690:	095b      	lsrs	r3, r3, #5
 8009692:	2164      	movs	r1, #100	; 0x64
 8009694:	fb01 f303 	mul.w	r3, r1, r3
 8009698:	1ad3      	subs	r3, r2, r3
 800969a:	011b      	lsls	r3, r3, #4
 800969c:	3332      	adds	r3, #50	; 0x32
 800969e:	4a34      	ldr	r2, [pc, #208]	; (8009770 <UART_SetConfig+0x4e4>)
 80096a0:	fba2 2303 	umull	r2, r3, r2, r3
 80096a4:	095b      	lsrs	r3, r3, #5
 80096a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096aa:	441c      	add	r4, r3
 80096ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096b0:	2200      	movs	r2, #0
 80096b2:	673b      	str	r3, [r7, #112]	; 0x70
 80096b4:	677a      	str	r2, [r7, #116]	; 0x74
 80096b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80096ba:	4642      	mov	r2, r8
 80096bc:	464b      	mov	r3, r9
 80096be:	1891      	adds	r1, r2, r2
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	415b      	adcs	r3, r3
 80096c4:	60fb      	str	r3, [r7, #12]
 80096c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80096ca:	4641      	mov	r1, r8
 80096cc:	1851      	adds	r1, r2, r1
 80096ce:	6039      	str	r1, [r7, #0]
 80096d0:	4649      	mov	r1, r9
 80096d2:	414b      	adcs	r3, r1
 80096d4:	607b      	str	r3, [r7, #4]
 80096d6:	f04f 0200 	mov.w	r2, #0
 80096da:	f04f 0300 	mov.w	r3, #0
 80096de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80096e2:	4659      	mov	r1, fp
 80096e4:	00cb      	lsls	r3, r1, #3
 80096e6:	4651      	mov	r1, sl
 80096e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096ec:	4651      	mov	r1, sl
 80096ee:	00ca      	lsls	r2, r1, #3
 80096f0:	4610      	mov	r0, r2
 80096f2:	4619      	mov	r1, r3
 80096f4:	4603      	mov	r3, r0
 80096f6:	4642      	mov	r2, r8
 80096f8:	189b      	adds	r3, r3, r2
 80096fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80096fc:	464b      	mov	r3, r9
 80096fe:	460a      	mov	r2, r1
 8009700:	eb42 0303 	adc.w	r3, r2, r3
 8009704:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	2200      	movs	r2, #0
 800970e:	663b      	str	r3, [r7, #96]	; 0x60
 8009710:	667a      	str	r2, [r7, #100]	; 0x64
 8009712:	f04f 0200 	mov.w	r2, #0
 8009716:	f04f 0300 	mov.w	r3, #0
 800971a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800971e:	4649      	mov	r1, r9
 8009720:	008b      	lsls	r3, r1, #2
 8009722:	4641      	mov	r1, r8
 8009724:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009728:	4641      	mov	r1, r8
 800972a:	008a      	lsls	r2, r1, #2
 800972c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009730:	f7f7 fa56 	bl	8000be0 <__aeabi_uldivmod>
 8009734:	4602      	mov	r2, r0
 8009736:	460b      	mov	r3, r1
 8009738:	4b0d      	ldr	r3, [pc, #52]	; (8009770 <UART_SetConfig+0x4e4>)
 800973a:	fba3 1302 	umull	r1, r3, r3, r2
 800973e:	095b      	lsrs	r3, r3, #5
 8009740:	2164      	movs	r1, #100	; 0x64
 8009742:	fb01 f303 	mul.w	r3, r1, r3
 8009746:	1ad3      	subs	r3, r2, r3
 8009748:	011b      	lsls	r3, r3, #4
 800974a:	3332      	adds	r3, #50	; 0x32
 800974c:	4a08      	ldr	r2, [pc, #32]	; (8009770 <UART_SetConfig+0x4e4>)
 800974e:	fba2 2303 	umull	r2, r3, r2, r3
 8009752:	095b      	lsrs	r3, r3, #5
 8009754:	f003 020f 	and.w	r2, r3, #15
 8009758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4422      	add	r2, r4
 8009760:	609a      	str	r2, [r3, #8]
}
 8009762:	bf00      	nop
 8009764:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009768:	46bd      	mov	sp, r7
 800976a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800976e:	bf00      	nop
 8009770:	51eb851f 	.word	0x51eb851f

08009774 <calloc>:
 8009774:	4b02      	ldr	r3, [pc, #8]	; (8009780 <calloc+0xc>)
 8009776:	460a      	mov	r2, r1
 8009778:	4601      	mov	r1, r0
 800977a:	6818      	ldr	r0, [r3, #0]
 800977c:	f000 b852 	b.w	8009824 <_calloc_r>
 8009780:	200002b4 	.word	0x200002b4

08009784 <__errno>:
 8009784:	4b01      	ldr	r3, [pc, #4]	; (800978c <__errno+0x8>)
 8009786:	6818      	ldr	r0, [r3, #0]
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	200002b4 	.word	0x200002b4

08009790 <__libc_init_array>:
 8009790:	b570      	push	{r4, r5, r6, lr}
 8009792:	4d0d      	ldr	r5, [pc, #52]	; (80097c8 <__libc_init_array+0x38>)
 8009794:	4c0d      	ldr	r4, [pc, #52]	; (80097cc <__libc_init_array+0x3c>)
 8009796:	1b64      	subs	r4, r4, r5
 8009798:	10a4      	asrs	r4, r4, #2
 800979a:	2600      	movs	r6, #0
 800979c:	42a6      	cmp	r6, r4
 800979e:	d109      	bne.n	80097b4 <__libc_init_array+0x24>
 80097a0:	4d0b      	ldr	r5, [pc, #44]	; (80097d0 <__libc_init_array+0x40>)
 80097a2:	4c0c      	ldr	r4, [pc, #48]	; (80097d4 <__libc_init_array+0x44>)
 80097a4:	f002 fb4a 	bl	800be3c <_init>
 80097a8:	1b64      	subs	r4, r4, r5
 80097aa:	10a4      	asrs	r4, r4, #2
 80097ac:	2600      	movs	r6, #0
 80097ae:	42a6      	cmp	r6, r4
 80097b0:	d105      	bne.n	80097be <__libc_init_array+0x2e>
 80097b2:	bd70      	pop	{r4, r5, r6, pc}
 80097b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80097b8:	4798      	blx	r3
 80097ba:	3601      	adds	r6, #1
 80097bc:	e7ee      	b.n	800979c <__libc_init_array+0xc>
 80097be:	f855 3b04 	ldr.w	r3, [r5], #4
 80097c2:	4798      	blx	r3
 80097c4:	3601      	adds	r6, #1
 80097c6:	e7f2      	b.n	80097ae <__libc_init_array+0x1e>
 80097c8:	0800c090 	.word	0x0800c090
 80097cc:	0800c090 	.word	0x0800c090
 80097d0:	0800c090 	.word	0x0800c090
 80097d4:	0800c094 	.word	0x0800c094

080097d8 <malloc>:
 80097d8:	4b02      	ldr	r3, [pc, #8]	; (80097e4 <malloc+0xc>)
 80097da:	4601      	mov	r1, r0
 80097dc:	6818      	ldr	r0, [r3, #0]
 80097de:	f000 b8a3 	b.w	8009928 <_malloc_r>
 80097e2:	bf00      	nop
 80097e4:	200002b4 	.word	0x200002b4

080097e8 <free>:
 80097e8:	4b02      	ldr	r3, [pc, #8]	; (80097f4 <free+0xc>)
 80097ea:	4601      	mov	r1, r0
 80097ec:	6818      	ldr	r0, [r3, #0]
 80097ee:	f000 b82f 	b.w	8009850 <_free_r>
 80097f2:	bf00      	nop
 80097f4:	200002b4 	.word	0x200002b4

080097f8 <memcpy>:
 80097f8:	440a      	add	r2, r1
 80097fa:	4291      	cmp	r1, r2
 80097fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009800:	d100      	bne.n	8009804 <memcpy+0xc>
 8009802:	4770      	bx	lr
 8009804:	b510      	push	{r4, lr}
 8009806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800980a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800980e:	4291      	cmp	r1, r2
 8009810:	d1f9      	bne.n	8009806 <memcpy+0xe>
 8009812:	bd10      	pop	{r4, pc}

08009814 <memset>:
 8009814:	4402      	add	r2, r0
 8009816:	4603      	mov	r3, r0
 8009818:	4293      	cmp	r3, r2
 800981a:	d100      	bne.n	800981e <memset+0xa>
 800981c:	4770      	bx	lr
 800981e:	f803 1b01 	strb.w	r1, [r3], #1
 8009822:	e7f9      	b.n	8009818 <memset+0x4>

08009824 <_calloc_r>:
 8009824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009826:	fba1 2402 	umull	r2, r4, r1, r2
 800982a:	b94c      	cbnz	r4, 8009840 <_calloc_r+0x1c>
 800982c:	4611      	mov	r1, r2
 800982e:	9201      	str	r2, [sp, #4]
 8009830:	f000 f87a 	bl	8009928 <_malloc_r>
 8009834:	9a01      	ldr	r2, [sp, #4]
 8009836:	4605      	mov	r5, r0
 8009838:	b930      	cbnz	r0, 8009848 <_calloc_r+0x24>
 800983a:	4628      	mov	r0, r5
 800983c:	b003      	add	sp, #12
 800983e:	bd30      	pop	{r4, r5, pc}
 8009840:	220c      	movs	r2, #12
 8009842:	6002      	str	r2, [r0, #0]
 8009844:	2500      	movs	r5, #0
 8009846:	e7f8      	b.n	800983a <_calloc_r+0x16>
 8009848:	4621      	mov	r1, r4
 800984a:	f7ff ffe3 	bl	8009814 <memset>
 800984e:	e7f4      	b.n	800983a <_calloc_r+0x16>

08009850 <_free_r>:
 8009850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009852:	2900      	cmp	r1, #0
 8009854:	d044      	beq.n	80098e0 <_free_r+0x90>
 8009856:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800985a:	9001      	str	r0, [sp, #4]
 800985c:	2b00      	cmp	r3, #0
 800985e:	f1a1 0404 	sub.w	r4, r1, #4
 8009862:	bfb8      	it	lt
 8009864:	18e4      	addlt	r4, r4, r3
 8009866:	f000 f8e3 	bl	8009a30 <__malloc_lock>
 800986a:	4a1e      	ldr	r2, [pc, #120]	; (80098e4 <_free_r+0x94>)
 800986c:	9801      	ldr	r0, [sp, #4]
 800986e:	6813      	ldr	r3, [r2, #0]
 8009870:	b933      	cbnz	r3, 8009880 <_free_r+0x30>
 8009872:	6063      	str	r3, [r4, #4]
 8009874:	6014      	str	r4, [r2, #0]
 8009876:	b003      	add	sp, #12
 8009878:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800987c:	f000 b8de 	b.w	8009a3c <__malloc_unlock>
 8009880:	42a3      	cmp	r3, r4
 8009882:	d908      	bls.n	8009896 <_free_r+0x46>
 8009884:	6825      	ldr	r5, [r4, #0]
 8009886:	1961      	adds	r1, r4, r5
 8009888:	428b      	cmp	r3, r1
 800988a:	bf01      	itttt	eq
 800988c:	6819      	ldreq	r1, [r3, #0]
 800988e:	685b      	ldreq	r3, [r3, #4]
 8009890:	1949      	addeq	r1, r1, r5
 8009892:	6021      	streq	r1, [r4, #0]
 8009894:	e7ed      	b.n	8009872 <_free_r+0x22>
 8009896:	461a      	mov	r2, r3
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	b10b      	cbz	r3, 80098a0 <_free_r+0x50>
 800989c:	42a3      	cmp	r3, r4
 800989e:	d9fa      	bls.n	8009896 <_free_r+0x46>
 80098a0:	6811      	ldr	r1, [r2, #0]
 80098a2:	1855      	adds	r5, r2, r1
 80098a4:	42a5      	cmp	r5, r4
 80098a6:	d10b      	bne.n	80098c0 <_free_r+0x70>
 80098a8:	6824      	ldr	r4, [r4, #0]
 80098aa:	4421      	add	r1, r4
 80098ac:	1854      	adds	r4, r2, r1
 80098ae:	42a3      	cmp	r3, r4
 80098b0:	6011      	str	r1, [r2, #0]
 80098b2:	d1e0      	bne.n	8009876 <_free_r+0x26>
 80098b4:	681c      	ldr	r4, [r3, #0]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	6053      	str	r3, [r2, #4]
 80098ba:	4421      	add	r1, r4
 80098bc:	6011      	str	r1, [r2, #0]
 80098be:	e7da      	b.n	8009876 <_free_r+0x26>
 80098c0:	d902      	bls.n	80098c8 <_free_r+0x78>
 80098c2:	230c      	movs	r3, #12
 80098c4:	6003      	str	r3, [r0, #0]
 80098c6:	e7d6      	b.n	8009876 <_free_r+0x26>
 80098c8:	6825      	ldr	r5, [r4, #0]
 80098ca:	1961      	adds	r1, r4, r5
 80098cc:	428b      	cmp	r3, r1
 80098ce:	bf04      	itt	eq
 80098d0:	6819      	ldreq	r1, [r3, #0]
 80098d2:	685b      	ldreq	r3, [r3, #4]
 80098d4:	6063      	str	r3, [r4, #4]
 80098d6:	bf04      	itt	eq
 80098d8:	1949      	addeq	r1, r1, r5
 80098da:	6021      	streq	r1, [r4, #0]
 80098dc:	6054      	str	r4, [r2, #4]
 80098de:	e7ca      	b.n	8009876 <_free_r+0x26>
 80098e0:	b003      	add	sp, #12
 80098e2:	bd30      	pop	{r4, r5, pc}
 80098e4:	20001060 	.word	0x20001060

080098e8 <sbrk_aligned>:
 80098e8:	b570      	push	{r4, r5, r6, lr}
 80098ea:	4e0e      	ldr	r6, [pc, #56]	; (8009924 <sbrk_aligned+0x3c>)
 80098ec:	460c      	mov	r4, r1
 80098ee:	6831      	ldr	r1, [r6, #0]
 80098f0:	4605      	mov	r5, r0
 80098f2:	b911      	cbnz	r1, 80098fa <sbrk_aligned+0x12>
 80098f4:	f000 f88c 	bl	8009a10 <_sbrk_r>
 80098f8:	6030      	str	r0, [r6, #0]
 80098fa:	4621      	mov	r1, r4
 80098fc:	4628      	mov	r0, r5
 80098fe:	f000 f887 	bl	8009a10 <_sbrk_r>
 8009902:	1c43      	adds	r3, r0, #1
 8009904:	d00a      	beq.n	800991c <sbrk_aligned+0x34>
 8009906:	1cc4      	adds	r4, r0, #3
 8009908:	f024 0403 	bic.w	r4, r4, #3
 800990c:	42a0      	cmp	r0, r4
 800990e:	d007      	beq.n	8009920 <sbrk_aligned+0x38>
 8009910:	1a21      	subs	r1, r4, r0
 8009912:	4628      	mov	r0, r5
 8009914:	f000 f87c 	bl	8009a10 <_sbrk_r>
 8009918:	3001      	adds	r0, #1
 800991a:	d101      	bne.n	8009920 <sbrk_aligned+0x38>
 800991c:	f04f 34ff 	mov.w	r4, #4294967295
 8009920:	4620      	mov	r0, r4
 8009922:	bd70      	pop	{r4, r5, r6, pc}
 8009924:	20001064 	.word	0x20001064

08009928 <_malloc_r>:
 8009928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800992c:	1ccd      	adds	r5, r1, #3
 800992e:	f025 0503 	bic.w	r5, r5, #3
 8009932:	3508      	adds	r5, #8
 8009934:	2d0c      	cmp	r5, #12
 8009936:	bf38      	it	cc
 8009938:	250c      	movcc	r5, #12
 800993a:	2d00      	cmp	r5, #0
 800993c:	4607      	mov	r7, r0
 800993e:	db01      	blt.n	8009944 <_malloc_r+0x1c>
 8009940:	42a9      	cmp	r1, r5
 8009942:	d905      	bls.n	8009950 <_malloc_r+0x28>
 8009944:	230c      	movs	r3, #12
 8009946:	603b      	str	r3, [r7, #0]
 8009948:	2600      	movs	r6, #0
 800994a:	4630      	mov	r0, r6
 800994c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009950:	4e2e      	ldr	r6, [pc, #184]	; (8009a0c <_malloc_r+0xe4>)
 8009952:	f000 f86d 	bl	8009a30 <__malloc_lock>
 8009956:	6833      	ldr	r3, [r6, #0]
 8009958:	461c      	mov	r4, r3
 800995a:	bb34      	cbnz	r4, 80099aa <_malloc_r+0x82>
 800995c:	4629      	mov	r1, r5
 800995e:	4638      	mov	r0, r7
 8009960:	f7ff ffc2 	bl	80098e8 <sbrk_aligned>
 8009964:	1c43      	adds	r3, r0, #1
 8009966:	4604      	mov	r4, r0
 8009968:	d14d      	bne.n	8009a06 <_malloc_r+0xde>
 800996a:	6834      	ldr	r4, [r6, #0]
 800996c:	4626      	mov	r6, r4
 800996e:	2e00      	cmp	r6, #0
 8009970:	d140      	bne.n	80099f4 <_malloc_r+0xcc>
 8009972:	6823      	ldr	r3, [r4, #0]
 8009974:	4631      	mov	r1, r6
 8009976:	4638      	mov	r0, r7
 8009978:	eb04 0803 	add.w	r8, r4, r3
 800997c:	f000 f848 	bl	8009a10 <_sbrk_r>
 8009980:	4580      	cmp	r8, r0
 8009982:	d13a      	bne.n	80099fa <_malloc_r+0xd2>
 8009984:	6821      	ldr	r1, [r4, #0]
 8009986:	3503      	adds	r5, #3
 8009988:	1a6d      	subs	r5, r5, r1
 800998a:	f025 0503 	bic.w	r5, r5, #3
 800998e:	3508      	adds	r5, #8
 8009990:	2d0c      	cmp	r5, #12
 8009992:	bf38      	it	cc
 8009994:	250c      	movcc	r5, #12
 8009996:	4629      	mov	r1, r5
 8009998:	4638      	mov	r0, r7
 800999a:	f7ff ffa5 	bl	80098e8 <sbrk_aligned>
 800999e:	3001      	adds	r0, #1
 80099a0:	d02b      	beq.n	80099fa <_malloc_r+0xd2>
 80099a2:	6823      	ldr	r3, [r4, #0]
 80099a4:	442b      	add	r3, r5
 80099a6:	6023      	str	r3, [r4, #0]
 80099a8:	e00e      	b.n	80099c8 <_malloc_r+0xa0>
 80099aa:	6822      	ldr	r2, [r4, #0]
 80099ac:	1b52      	subs	r2, r2, r5
 80099ae:	d41e      	bmi.n	80099ee <_malloc_r+0xc6>
 80099b0:	2a0b      	cmp	r2, #11
 80099b2:	d916      	bls.n	80099e2 <_malloc_r+0xba>
 80099b4:	1961      	adds	r1, r4, r5
 80099b6:	42a3      	cmp	r3, r4
 80099b8:	6025      	str	r5, [r4, #0]
 80099ba:	bf18      	it	ne
 80099bc:	6059      	strne	r1, [r3, #4]
 80099be:	6863      	ldr	r3, [r4, #4]
 80099c0:	bf08      	it	eq
 80099c2:	6031      	streq	r1, [r6, #0]
 80099c4:	5162      	str	r2, [r4, r5]
 80099c6:	604b      	str	r3, [r1, #4]
 80099c8:	4638      	mov	r0, r7
 80099ca:	f104 060b 	add.w	r6, r4, #11
 80099ce:	f000 f835 	bl	8009a3c <__malloc_unlock>
 80099d2:	f026 0607 	bic.w	r6, r6, #7
 80099d6:	1d23      	adds	r3, r4, #4
 80099d8:	1af2      	subs	r2, r6, r3
 80099da:	d0b6      	beq.n	800994a <_malloc_r+0x22>
 80099dc:	1b9b      	subs	r3, r3, r6
 80099de:	50a3      	str	r3, [r4, r2]
 80099e0:	e7b3      	b.n	800994a <_malloc_r+0x22>
 80099e2:	6862      	ldr	r2, [r4, #4]
 80099e4:	42a3      	cmp	r3, r4
 80099e6:	bf0c      	ite	eq
 80099e8:	6032      	streq	r2, [r6, #0]
 80099ea:	605a      	strne	r2, [r3, #4]
 80099ec:	e7ec      	b.n	80099c8 <_malloc_r+0xa0>
 80099ee:	4623      	mov	r3, r4
 80099f0:	6864      	ldr	r4, [r4, #4]
 80099f2:	e7b2      	b.n	800995a <_malloc_r+0x32>
 80099f4:	4634      	mov	r4, r6
 80099f6:	6876      	ldr	r6, [r6, #4]
 80099f8:	e7b9      	b.n	800996e <_malloc_r+0x46>
 80099fa:	230c      	movs	r3, #12
 80099fc:	603b      	str	r3, [r7, #0]
 80099fe:	4638      	mov	r0, r7
 8009a00:	f000 f81c 	bl	8009a3c <__malloc_unlock>
 8009a04:	e7a1      	b.n	800994a <_malloc_r+0x22>
 8009a06:	6025      	str	r5, [r4, #0]
 8009a08:	e7de      	b.n	80099c8 <_malloc_r+0xa0>
 8009a0a:	bf00      	nop
 8009a0c:	20001060 	.word	0x20001060

08009a10 <_sbrk_r>:
 8009a10:	b538      	push	{r3, r4, r5, lr}
 8009a12:	4d06      	ldr	r5, [pc, #24]	; (8009a2c <_sbrk_r+0x1c>)
 8009a14:	2300      	movs	r3, #0
 8009a16:	4604      	mov	r4, r0
 8009a18:	4608      	mov	r0, r1
 8009a1a:	602b      	str	r3, [r5, #0]
 8009a1c:	f7fa fd4e 	bl	80044bc <_sbrk>
 8009a20:	1c43      	adds	r3, r0, #1
 8009a22:	d102      	bne.n	8009a2a <_sbrk_r+0x1a>
 8009a24:	682b      	ldr	r3, [r5, #0]
 8009a26:	b103      	cbz	r3, 8009a2a <_sbrk_r+0x1a>
 8009a28:	6023      	str	r3, [r4, #0]
 8009a2a:	bd38      	pop	{r3, r4, r5, pc}
 8009a2c:	20001068 	.word	0x20001068

08009a30 <__malloc_lock>:
 8009a30:	4801      	ldr	r0, [pc, #4]	; (8009a38 <__malloc_lock+0x8>)
 8009a32:	f000 b809 	b.w	8009a48 <__retarget_lock_acquire_recursive>
 8009a36:	bf00      	nop
 8009a38:	2000106c 	.word	0x2000106c

08009a3c <__malloc_unlock>:
 8009a3c:	4801      	ldr	r0, [pc, #4]	; (8009a44 <__malloc_unlock+0x8>)
 8009a3e:	f000 b804 	b.w	8009a4a <__retarget_lock_release_recursive>
 8009a42:	bf00      	nop
 8009a44:	2000106c 	.word	0x2000106c

08009a48 <__retarget_lock_acquire_recursive>:
 8009a48:	4770      	bx	lr

08009a4a <__retarget_lock_release_recursive>:
 8009a4a:	4770      	bx	lr
 8009a4c:	0000      	movs	r0, r0
	...

08009a50 <cos>:
 8009a50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a52:	ec53 2b10 	vmov	r2, r3, d0
 8009a56:	4826      	ldr	r0, [pc, #152]	; (8009af0 <cos+0xa0>)
 8009a58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009a5c:	4281      	cmp	r1, r0
 8009a5e:	dc06      	bgt.n	8009a6e <cos+0x1e>
 8009a60:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009ae8 <cos+0x98>
 8009a64:	b005      	add	sp, #20
 8009a66:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a6a:	f001 bc3d 	b.w	800b2e8 <__kernel_cos>
 8009a6e:	4821      	ldr	r0, [pc, #132]	; (8009af4 <cos+0xa4>)
 8009a70:	4281      	cmp	r1, r0
 8009a72:	dd09      	ble.n	8009a88 <cos+0x38>
 8009a74:	ee10 0a10 	vmov	r0, s0
 8009a78:	4619      	mov	r1, r3
 8009a7a:	f7f6 fbb1 	bl	80001e0 <__aeabi_dsub>
 8009a7e:	ec41 0b10 	vmov	d0, r0, r1
 8009a82:	b005      	add	sp, #20
 8009a84:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a88:	4668      	mov	r0, sp
 8009a8a:	f001 f96d 	bl	800ad68 <__ieee754_rem_pio2>
 8009a8e:	f000 0003 	and.w	r0, r0, #3
 8009a92:	2801      	cmp	r0, #1
 8009a94:	d00b      	beq.n	8009aae <cos+0x5e>
 8009a96:	2802      	cmp	r0, #2
 8009a98:	d016      	beq.n	8009ac8 <cos+0x78>
 8009a9a:	b9e0      	cbnz	r0, 8009ad6 <cos+0x86>
 8009a9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009aa0:	ed9d 0b00 	vldr	d0, [sp]
 8009aa4:	f001 fc20 	bl	800b2e8 <__kernel_cos>
 8009aa8:	ec51 0b10 	vmov	r0, r1, d0
 8009aac:	e7e7      	b.n	8009a7e <cos+0x2e>
 8009aae:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ab2:	ed9d 0b00 	vldr	d0, [sp]
 8009ab6:	f002 f82f 	bl	800bb18 <__kernel_sin>
 8009aba:	ec53 2b10 	vmov	r2, r3, d0
 8009abe:	ee10 0a10 	vmov	r0, s0
 8009ac2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009ac6:	e7da      	b.n	8009a7e <cos+0x2e>
 8009ac8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009acc:	ed9d 0b00 	vldr	d0, [sp]
 8009ad0:	f001 fc0a 	bl	800b2e8 <__kernel_cos>
 8009ad4:	e7f1      	b.n	8009aba <cos+0x6a>
 8009ad6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ada:	ed9d 0b00 	vldr	d0, [sp]
 8009ade:	2001      	movs	r0, #1
 8009ae0:	f002 f81a 	bl	800bb18 <__kernel_sin>
 8009ae4:	e7e0      	b.n	8009aa8 <cos+0x58>
 8009ae6:	bf00      	nop
	...
 8009af0:	3fe921fb 	.word	0x3fe921fb
 8009af4:	7fefffff 	.word	0x7fefffff

08009af8 <floor>:
 8009af8:	ec51 0b10 	vmov	r0, r1, d0
 8009afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b00:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009b04:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009b08:	2e13      	cmp	r6, #19
 8009b0a:	ee10 5a10 	vmov	r5, s0
 8009b0e:	ee10 8a10 	vmov	r8, s0
 8009b12:	460c      	mov	r4, r1
 8009b14:	dc32      	bgt.n	8009b7c <floor+0x84>
 8009b16:	2e00      	cmp	r6, #0
 8009b18:	da14      	bge.n	8009b44 <floor+0x4c>
 8009b1a:	a333      	add	r3, pc, #204	; (adr r3, 8009be8 <floor+0xf0>)
 8009b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b20:	f7f6 fb60 	bl	80001e4 <__adddf3>
 8009b24:	2200      	movs	r2, #0
 8009b26:	2300      	movs	r3, #0
 8009b28:	f7f6 ffa2 	bl	8000a70 <__aeabi_dcmpgt>
 8009b2c:	b138      	cbz	r0, 8009b3e <floor+0x46>
 8009b2e:	2c00      	cmp	r4, #0
 8009b30:	da57      	bge.n	8009be2 <floor+0xea>
 8009b32:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009b36:	431d      	orrs	r5, r3
 8009b38:	d001      	beq.n	8009b3e <floor+0x46>
 8009b3a:	4c2d      	ldr	r4, [pc, #180]	; (8009bf0 <floor+0xf8>)
 8009b3c:	2500      	movs	r5, #0
 8009b3e:	4621      	mov	r1, r4
 8009b40:	4628      	mov	r0, r5
 8009b42:	e025      	b.n	8009b90 <floor+0x98>
 8009b44:	4f2b      	ldr	r7, [pc, #172]	; (8009bf4 <floor+0xfc>)
 8009b46:	4137      	asrs	r7, r6
 8009b48:	ea01 0307 	and.w	r3, r1, r7
 8009b4c:	4303      	orrs	r3, r0
 8009b4e:	d01f      	beq.n	8009b90 <floor+0x98>
 8009b50:	a325      	add	r3, pc, #148	; (adr r3, 8009be8 <floor+0xf0>)
 8009b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b56:	f7f6 fb45 	bl	80001e4 <__adddf3>
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	f7f6 ff87 	bl	8000a70 <__aeabi_dcmpgt>
 8009b62:	2800      	cmp	r0, #0
 8009b64:	d0eb      	beq.n	8009b3e <floor+0x46>
 8009b66:	2c00      	cmp	r4, #0
 8009b68:	bfbe      	ittt	lt
 8009b6a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009b6e:	fa43 f606 	asrlt.w	r6, r3, r6
 8009b72:	19a4      	addlt	r4, r4, r6
 8009b74:	ea24 0407 	bic.w	r4, r4, r7
 8009b78:	2500      	movs	r5, #0
 8009b7a:	e7e0      	b.n	8009b3e <floor+0x46>
 8009b7c:	2e33      	cmp	r6, #51	; 0x33
 8009b7e:	dd0b      	ble.n	8009b98 <floor+0xa0>
 8009b80:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009b84:	d104      	bne.n	8009b90 <floor+0x98>
 8009b86:	ee10 2a10 	vmov	r2, s0
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	f7f6 fb2a 	bl	80001e4 <__adddf3>
 8009b90:	ec41 0b10 	vmov	d0, r0, r1
 8009b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b98:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba0:	fa23 f707 	lsr.w	r7, r3, r7
 8009ba4:	4207      	tst	r7, r0
 8009ba6:	d0f3      	beq.n	8009b90 <floor+0x98>
 8009ba8:	a30f      	add	r3, pc, #60	; (adr r3, 8009be8 <floor+0xf0>)
 8009baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bae:	f7f6 fb19 	bl	80001e4 <__adddf3>
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	f7f6 ff5b 	bl	8000a70 <__aeabi_dcmpgt>
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	d0bf      	beq.n	8009b3e <floor+0x46>
 8009bbe:	2c00      	cmp	r4, #0
 8009bc0:	da02      	bge.n	8009bc8 <floor+0xd0>
 8009bc2:	2e14      	cmp	r6, #20
 8009bc4:	d103      	bne.n	8009bce <floor+0xd6>
 8009bc6:	3401      	adds	r4, #1
 8009bc8:	ea25 0507 	bic.w	r5, r5, r7
 8009bcc:	e7b7      	b.n	8009b3e <floor+0x46>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009bd4:	fa03 f606 	lsl.w	r6, r3, r6
 8009bd8:	4435      	add	r5, r6
 8009bda:	4545      	cmp	r5, r8
 8009bdc:	bf38      	it	cc
 8009bde:	18e4      	addcc	r4, r4, r3
 8009be0:	e7f2      	b.n	8009bc8 <floor+0xd0>
 8009be2:	2500      	movs	r5, #0
 8009be4:	462c      	mov	r4, r5
 8009be6:	e7aa      	b.n	8009b3e <floor+0x46>
 8009be8:	8800759c 	.word	0x8800759c
 8009bec:	7e37e43c 	.word	0x7e37e43c
 8009bf0:	bff00000 	.word	0xbff00000
 8009bf4:	000fffff 	.word	0x000fffff

08009bf8 <sin>:
 8009bf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bfa:	ec53 2b10 	vmov	r2, r3, d0
 8009bfe:	4828      	ldr	r0, [pc, #160]	; (8009ca0 <sin+0xa8>)
 8009c00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009c04:	4281      	cmp	r1, r0
 8009c06:	dc07      	bgt.n	8009c18 <sin+0x20>
 8009c08:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009c98 <sin+0xa0>
 8009c0c:	2000      	movs	r0, #0
 8009c0e:	b005      	add	sp, #20
 8009c10:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c14:	f001 bf80 	b.w	800bb18 <__kernel_sin>
 8009c18:	4822      	ldr	r0, [pc, #136]	; (8009ca4 <sin+0xac>)
 8009c1a:	4281      	cmp	r1, r0
 8009c1c:	dd09      	ble.n	8009c32 <sin+0x3a>
 8009c1e:	ee10 0a10 	vmov	r0, s0
 8009c22:	4619      	mov	r1, r3
 8009c24:	f7f6 fadc 	bl	80001e0 <__aeabi_dsub>
 8009c28:	ec41 0b10 	vmov	d0, r0, r1
 8009c2c:	b005      	add	sp, #20
 8009c2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c32:	4668      	mov	r0, sp
 8009c34:	f001 f898 	bl	800ad68 <__ieee754_rem_pio2>
 8009c38:	f000 0003 	and.w	r0, r0, #3
 8009c3c:	2801      	cmp	r0, #1
 8009c3e:	d00c      	beq.n	8009c5a <sin+0x62>
 8009c40:	2802      	cmp	r0, #2
 8009c42:	d011      	beq.n	8009c68 <sin+0x70>
 8009c44:	b9f0      	cbnz	r0, 8009c84 <sin+0x8c>
 8009c46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c4a:	ed9d 0b00 	vldr	d0, [sp]
 8009c4e:	2001      	movs	r0, #1
 8009c50:	f001 ff62 	bl	800bb18 <__kernel_sin>
 8009c54:	ec51 0b10 	vmov	r0, r1, d0
 8009c58:	e7e6      	b.n	8009c28 <sin+0x30>
 8009c5a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c5e:	ed9d 0b00 	vldr	d0, [sp]
 8009c62:	f001 fb41 	bl	800b2e8 <__kernel_cos>
 8009c66:	e7f5      	b.n	8009c54 <sin+0x5c>
 8009c68:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c6c:	ed9d 0b00 	vldr	d0, [sp]
 8009c70:	2001      	movs	r0, #1
 8009c72:	f001 ff51 	bl	800bb18 <__kernel_sin>
 8009c76:	ec53 2b10 	vmov	r2, r3, d0
 8009c7a:	ee10 0a10 	vmov	r0, s0
 8009c7e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009c82:	e7d1      	b.n	8009c28 <sin+0x30>
 8009c84:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c88:	ed9d 0b00 	vldr	d0, [sp]
 8009c8c:	f001 fb2c 	bl	800b2e8 <__kernel_cos>
 8009c90:	e7f1      	b.n	8009c76 <sin+0x7e>
 8009c92:	bf00      	nop
 8009c94:	f3af 8000 	nop.w
	...
 8009ca0:	3fe921fb 	.word	0x3fe921fb
 8009ca4:	7fefffff 	.word	0x7fefffff

08009ca8 <acos>:
 8009ca8:	b538      	push	{r3, r4, r5, lr}
 8009caa:	ed2d 8b02 	vpush	{d8}
 8009cae:	ec55 4b10 	vmov	r4, r5, d0
 8009cb2:	f000 f8c9 	bl	8009e48 <__ieee754_acos>
 8009cb6:	4622      	mov	r2, r4
 8009cb8:	462b      	mov	r3, r5
 8009cba:	4620      	mov	r0, r4
 8009cbc:	4629      	mov	r1, r5
 8009cbe:	eeb0 8a40 	vmov.f32	s16, s0
 8009cc2:	eef0 8a60 	vmov.f32	s17, s1
 8009cc6:	f7f6 fedd 	bl	8000a84 <__aeabi_dcmpun>
 8009cca:	b9a8      	cbnz	r0, 8009cf8 <acos+0x50>
 8009ccc:	ec45 4b10 	vmov	d0, r4, r5
 8009cd0:	f002 f810 	bl	800bcf4 <fabs>
 8009cd4:	4b0c      	ldr	r3, [pc, #48]	; (8009d08 <acos+0x60>)
 8009cd6:	ec51 0b10 	vmov	r0, r1, d0
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f7f6 fec8 	bl	8000a70 <__aeabi_dcmpgt>
 8009ce0:	b150      	cbz	r0, 8009cf8 <acos+0x50>
 8009ce2:	f7ff fd4f 	bl	8009784 <__errno>
 8009ce6:	ecbd 8b02 	vpop	{d8}
 8009cea:	2321      	movs	r3, #33	; 0x21
 8009cec:	6003      	str	r3, [r0, #0]
 8009cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cf2:	4806      	ldr	r0, [pc, #24]	; (8009d0c <acos+0x64>)
 8009cf4:	f002 b814 	b.w	800bd20 <nan>
 8009cf8:	eeb0 0a48 	vmov.f32	s0, s16
 8009cfc:	eef0 0a68 	vmov.f32	s1, s17
 8009d00:	ecbd 8b02 	vpop	{d8}
 8009d04:	bd38      	pop	{r3, r4, r5, pc}
 8009d06:	bf00      	nop
 8009d08:	3ff00000 	.word	0x3ff00000
 8009d0c:	0800be78 	.word	0x0800be78

08009d10 <pow>:
 8009d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d12:	ed2d 8b02 	vpush	{d8}
 8009d16:	eeb0 8a40 	vmov.f32	s16, s0
 8009d1a:	eef0 8a60 	vmov.f32	s17, s1
 8009d1e:	ec55 4b11 	vmov	r4, r5, d1
 8009d22:	f000 faf1 	bl	800a308 <__ieee754_pow>
 8009d26:	4622      	mov	r2, r4
 8009d28:	462b      	mov	r3, r5
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	4629      	mov	r1, r5
 8009d2e:	ec57 6b10 	vmov	r6, r7, d0
 8009d32:	f7f6 fea7 	bl	8000a84 <__aeabi_dcmpun>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	d13b      	bne.n	8009db2 <pow+0xa2>
 8009d3a:	ec51 0b18 	vmov	r0, r1, d8
 8009d3e:	2200      	movs	r2, #0
 8009d40:	2300      	movs	r3, #0
 8009d42:	f7f6 fe6d 	bl	8000a20 <__aeabi_dcmpeq>
 8009d46:	b1b8      	cbz	r0, 8009d78 <pow+0x68>
 8009d48:	2200      	movs	r2, #0
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	4629      	mov	r1, r5
 8009d50:	f7f6 fe66 	bl	8000a20 <__aeabi_dcmpeq>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	d146      	bne.n	8009de6 <pow+0xd6>
 8009d58:	ec45 4b10 	vmov	d0, r4, r5
 8009d5c:	f001 ffd3 	bl	800bd06 <finite>
 8009d60:	b338      	cbz	r0, 8009db2 <pow+0xa2>
 8009d62:	2200      	movs	r2, #0
 8009d64:	2300      	movs	r3, #0
 8009d66:	4620      	mov	r0, r4
 8009d68:	4629      	mov	r1, r5
 8009d6a:	f7f6 fe63 	bl	8000a34 <__aeabi_dcmplt>
 8009d6e:	b300      	cbz	r0, 8009db2 <pow+0xa2>
 8009d70:	f7ff fd08 	bl	8009784 <__errno>
 8009d74:	2322      	movs	r3, #34	; 0x22
 8009d76:	e01b      	b.n	8009db0 <pow+0xa0>
 8009d78:	ec47 6b10 	vmov	d0, r6, r7
 8009d7c:	f001 ffc3 	bl	800bd06 <finite>
 8009d80:	b9e0      	cbnz	r0, 8009dbc <pow+0xac>
 8009d82:	eeb0 0a48 	vmov.f32	s0, s16
 8009d86:	eef0 0a68 	vmov.f32	s1, s17
 8009d8a:	f001 ffbc 	bl	800bd06 <finite>
 8009d8e:	b1a8      	cbz	r0, 8009dbc <pow+0xac>
 8009d90:	ec45 4b10 	vmov	d0, r4, r5
 8009d94:	f001 ffb7 	bl	800bd06 <finite>
 8009d98:	b180      	cbz	r0, 8009dbc <pow+0xac>
 8009d9a:	4632      	mov	r2, r6
 8009d9c:	463b      	mov	r3, r7
 8009d9e:	4630      	mov	r0, r6
 8009da0:	4639      	mov	r1, r7
 8009da2:	f7f6 fe6f 	bl	8000a84 <__aeabi_dcmpun>
 8009da6:	2800      	cmp	r0, #0
 8009da8:	d0e2      	beq.n	8009d70 <pow+0x60>
 8009daa:	f7ff fceb 	bl	8009784 <__errno>
 8009dae:	2321      	movs	r3, #33	; 0x21
 8009db0:	6003      	str	r3, [r0, #0]
 8009db2:	ecbd 8b02 	vpop	{d8}
 8009db6:	ec47 6b10 	vmov	d0, r6, r7
 8009dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	4639      	mov	r1, r7
 8009dc4:	f7f6 fe2c 	bl	8000a20 <__aeabi_dcmpeq>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	d0f2      	beq.n	8009db2 <pow+0xa2>
 8009dcc:	eeb0 0a48 	vmov.f32	s0, s16
 8009dd0:	eef0 0a68 	vmov.f32	s1, s17
 8009dd4:	f001 ff97 	bl	800bd06 <finite>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d0ea      	beq.n	8009db2 <pow+0xa2>
 8009ddc:	ec45 4b10 	vmov	d0, r4, r5
 8009de0:	f001 ff91 	bl	800bd06 <finite>
 8009de4:	e7c3      	b.n	8009d6e <pow+0x5e>
 8009de6:	4f01      	ldr	r7, [pc, #4]	; (8009dec <pow+0xdc>)
 8009de8:	2600      	movs	r6, #0
 8009dea:	e7e2      	b.n	8009db2 <pow+0xa2>
 8009dec:	3ff00000 	.word	0x3ff00000

08009df0 <sqrt>:
 8009df0:	b538      	push	{r3, r4, r5, lr}
 8009df2:	ed2d 8b02 	vpush	{d8}
 8009df6:	ec55 4b10 	vmov	r4, r5, d0
 8009dfa:	f001 f9c1 	bl	800b180 <__ieee754_sqrt>
 8009dfe:	4622      	mov	r2, r4
 8009e00:	462b      	mov	r3, r5
 8009e02:	4620      	mov	r0, r4
 8009e04:	4629      	mov	r1, r5
 8009e06:	eeb0 8a40 	vmov.f32	s16, s0
 8009e0a:	eef0 8a60 	vmov.f32	s17, s1
 8009e0e:	f7f6 fe39 	bl	8000a84 <__aeabi_dcmpun>
 8009e12:	b990      	cbnz	r0, 8009e3a <sqrt+0x4a>
 8009e14:	2200      	movs	r2, #0
 8009e16:	2300      	movs	r3, #0
 8009e18:	4620      	mov	r0, r4
 8009e1a:	4629      	mov	r1, r5
 8009e1c:	f7f6 fe0a 	bl	8000a34 <__aeabi_dcmplt>
 8009e20:	b158      	cbz	r0, 8009e3a <sqrt+0x4a>
 8009e22:	f7ff fcaf 	bl	8009784 <__errno>
 8009e26:	2321      	movs	r3, #33	; 0x21
 8009e28:	6003      	str	r3, [r0, #0]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	4610      	mov	r0, r2
 8009e30:	4619      	mov	r1, r3
 8009e32:	f7f6 fcb7 	bl	80007a4 <__aeabi_ddiv>
 8009e36:	ec41 0b18 	vmov	d8, r0, r1
 8009e3a:	eeb0 0a48 	vmov.f32	s0, s16
 8009e3e:	eef0 0a68 	vmov.f32	s1, s17
 8009e42:	ecbd 8b02 	vpop	{d8}
 8009e46:	bd38      	pop	{r3, r4, r5, pc}

08009e48 <__ieee754_acos>:
 8009e48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4c:	ec55 4b10 	vmov	r4, r5, d0
 8009e50:	49b7      	ldr	r1, [pc, #732]	; (800a130 <__ieee754_acos+0x2e8>)
 8009e52:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009e56:	428b      	cmp	r3, r1
 8009e58:	dd1b      	ble.n	8009e92 <__ieee754_acos+0x4a>
 8009e5a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8009e5e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009e62:	4323      	orrs	r3, r4
 8009e64:	d106      	bne.n	8009e74 <__ieee754_acos+0x2c>
 8009e66:	2d00      	cmp	r5, #0
 8009e68:	f300 8211 	bgt.w	800a28e <__ieee754_acos+0x446>
 8009e6c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800a0c8 <__ieee754_acos+0x280>
 8009e70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e74:	ee10 2a10 	vmov	r2, s0
 8009e78:	462b      	mov	r3, r5
 8009e7a:	ee10 0a10 	vmov	r0, s0
 8009e7e:	4629      	mov	r1, r5
 8009e80:	f7f6 f9ae 	bl	80001e0 <__aeabi_dsub>
 8009e84:	4602      	mov	r2, r0
 8009e86:	460b      	mov	r3, r1
 8009e88:	f7f6 fc8c 	bl	80007a4 <__aeabi_ddiv>
 8009e8c:	ec41 0b10 	vmov	d0, r0, r1
 8009e90:	e7ee      	b.n	8009e70 <__ieee754_acos+0x28>
 8009e92:	49a8      	ldr	r1, [pc, #672]	; (800a134 <__ieee754_acos+0x2ec>)
 8009e94:	428b      	cmp	r3, r1
 8009e96:	f300 8087 	bgt.w	8009fa8 <__ieee754_acos+0x160>
 8009e9a:	4aa7      	ldr	r2, [pc, #668]	; (800a138 <__ieee754_acos+0x2f0>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	f340 81f9 	ble.w	800a294 <__ieee754_acos+0x44c>
 8009ea2:	ee10 2a10 	vmov	r2, s0
 8009ea6:	ee10 0a10 	vmov	r0, s0
 8009eaa:	462b      	mov	r3, r5
 8009eac:	4629      	mov	r1, r5
 8009eae:	f7f6 fb4f 	bl	8000550 <__aeabi_dmul>
 8009eb2:	a387      	add	r3, pc, #540	; (adr r3, 800a0d0 <__ieee754_acos+0x288>)
 8009eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb8:	4606      	mov	r6, r0
 8009eba:	460f      	mov	r7, r1
 8009ebc:	f7f6 fb48 	bl	8000550 <__aeabi_dmul>
 8009ec0:	a385      	add	r3, pc, #532	; (adr r3, 800a0d8 <__ieee754_acos+0x290>)
 8009ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec6:	f7f6 f98d 	bl	80001e4 <__adddf3>
 8009eca:	4632      	mov	r2, r6
 8009ecc:	463b      	mov	r3, r7
 8009ece:	f7f6 fb3f 	bl	8000550 <__aeabi_dmul>
 8009ed2:	a383      	add	r3, pc, #524	; (adr r3, 800a0e0 <__ieee754_acos+0x298>)
 8009ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed8:	f7f6 f982 	bl	80001e0 <__aeabi_dsub>
 8009edc:	4632      	mov	r2, r6
 8009ede:	463b      	mov	r3, r7
 8009ee0:	f7f6 fb36 	bl	8000550 <__aeabi_dmul>
 8009ee4:	a380      	add	r3, pc, #512	; (adr r3, 800a0e8 <__ieee754_acos+0x2a0>)
 8009ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eea:	f7f6 f97b 	bl	80001e4 <__adddf3>
 8009eee:	4632      	mov	r2, r6
 8009ef0:	463b      	mov	r3, r7
 8009ef2:	f7f6 fb2d 	bl	8000550 <__aeabi_dmul>
 8009ef6:	a37e      	add	r3, pc, #504	; (adr r3, 800a0f0 <__ieee754_acos+0x2a8>)
 8009ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efc:	f7f6 f970 	bl	80001e0 <__aeabi_dsub>
 8009f00:	4632      	mov	r2, r6
 8009f02:	463b      	mov	r3, r7
 8009f04:	f7f6 fb24 	bl	8000550 <__aeabi_dmul>
 8009f08:	a37b      	add	r3, pc, #492	; (adr r3, 800a0f8 <__ieee754_acos+0x2b0>)
 8009f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0e:	f7f6 f969 	bl	80001e4 <__adddf3>
 8009f12:	4632      	mov	r2, r6
 8009f14:	463b      	mov	r3, r7
 8009f16:	f7f6 fb1b 	bl	8000550 <__aeabi_dmul>
 8009f1a:	a379      	add	r3, pc, #484	; (adr r3, 800a100 <__ieee754_acos+0x2b8>)
 8009f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f20:	4680      	mov	r8, r0
 8009f22:	4689      	mov	r9, r1
 8009f24:	4630      	mov	r0, r6
 8009f26:	4639      	mov	r1, r7
 8009f28:	f7f6 fb12 	bl	8000550 <__aeabi_dmul>
 8009f2c:	a376      	add	r3, pc, #472	; (adr r3, 800a108 <__ieee754_acos+0x2c0>)
 8009f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f32:	f7f6 f955 	bl	80001e0 <__aeabi_dsub>
 8009f36:	4632      	mov	r2, r6
 8009f38:	463b      	mov	r3, r7
 8009f3a:	f7f6 fb09 	bl	8000550 <__aeabi_dmul>
 8009f3e:	a374      	add	r3, pc, #464	; (adr r3, 800a110 <__ieee754_acos+0x2c8>)
 8009f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f44:	f7f6 f94e 	bl	80001e4 <__adddf3>
 8009f48:	4632      	mov	r2, r6
 8009f4a:	463b      	mov	r3, r7
 8009f4c:	f7f6 fb00 	bl	8000550 <__aeabi_dmul>
 8009f50:	a371      	add	r3, pc, #452	; (adr r3, 800a118 <__ieee754_acos+0x2d0>)
 8009f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f56:	f7f6 f943 	bl	80001e0 <__aeabi_dsub>
 8009f5a:	4632      	mov	r2, r6
 8009f5c:	463b      	mov	r3, r7
 8009f5e:	f7f6 faf7 	bl	8000550 <__aeabi_dmul>
 8009f62:	4b76      	ldr	r3, [pc, #472]	; (800a13c <__ieee754_acos+0x2f4>)
 8009f64:	2200      	movs	r2, #0
 8009f66:	f7f6 f93d 	bl	80001e4 <__adddf3>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	4640      	mov	r0, r8
 8009f70:	4649      	mov	r1, r9
 8009f72:	f7f6 fc17 	bl	80007a4 <__aeabi_ddiv>
 8009f76:	4622      	mov	r2, r4
 8009f78:	462b      	mov	r3, r5
 8009f7a:	f7f6 fae9 	bl	8000550 <__aeabi_dmul>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	460b      	mov	r3, r1
 8009f82:	a167      	add	r1, pc, #412	; (adr r1, 800a120 <__ieee754_acos+0x2d8>)
 8009f84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f88:	f7f6 f92a 	bl	80001e0 <__aeabi_dsub>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	460b      	mov	r3, r1
 8009f90:	4620      	mov	r0, r4
 8009f92:	4629      	mov	r1, r5
 8009f94:	f7f6 f924 	bl	80001e0 <__aeabi_dsub>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	a162      	add	r1, pc, #392	; (adr r1, 800a128 <__ieee754_acos+0x2e0>)
 8009f9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fa2:	f7f6 f91d 	bl	80001e0 <__aeabi_dsub>
 8009fa6:	e771      	b.n	8009e8c <__ieee754_acos+0x44>
 8009fa8:	2d00      	cmp	r5, #0
 8009faa:	f280 80cb 	bge.w	800a144 <__ieee754_acos+0x2fc>
 8009fae:	ee10 0a10 	vmov	r0, s0
 8009fb2:	4b62      	ldr	r3, [pc, #392]	; (800a13c <__ieee754_acos+0x2f4>)
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	4629      	mov	r1, r5
 8009fb8:	f7f6 f914 	bl	80001e4 <__adddf3>
 8009fbc:	4b60      	ldr	r3, [pc, #384]	; (800a140 <__ieee754_acos+0x2f8>)
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f7f6 fac6 	bl	8000550 <__aeabi_dmul>
 8009fc4:	a342      	add	r3, pc, #264	; (adr r3, 800a0d0 <__ieee754_acos+0x288>)
 8009fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fca:	4604      	mov	r4, r0
 8009fcc:	460d      	mov	r5, r1
 8009fce:	f7f6 fabf 	bl	8000550 <__aeabi_dmul>
 8009fd2:	a341      	add	r3, pc, #260	; (adr r3, 800a0d8 <__ieee754_acos+0x290>)
 8009fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd8:	f7f6 f904 	bl	80001e4 <__adddf3>
 8009fdc:	4622      	mov	r2, r4
 8009fde:	462b      	mov	r3, r5
 8009fe0:	f7f6 fab6 	bl	8000550 <__aeabi_dmul>
 8009fe4:	a33e      	add	r3, pc, #248	; (adr r3, 800a0e0 <__ieee754_acos+0x298>)
 8009fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fea:	f7f6 f8f9 	bl	80001e0 <__aeabi_dsub>
 8009fee:	4622      	mov	r2, r4
 8009ff0:	462b      	mov	r3, r5
 8009ff2:	f7f6 faad 	bl	8000550 <__aeabi_dmul>
 8009ff6:	a33c      	add	r3, pc, #240	; (adr r3, 800a0e8 <__ieee754_acos+0x2a0>)
 8009ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffc:	f7f6 f8f2 	bl	80001e4 <__adddf3>
 800a000:	4622      	mov	r2, r4
 800a002:	462b      	mov	r3, r5
 800a004:	f7f6 faa4 	bl	8000550 <__aeabi_dmul>
 800a008:	a339      	add	r3, pc, #228	; (adr r3, 800a0f0 <__ieee754_acos+0x2a8>)
 800a00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00e:	f7f6 f8e7 	bl	80001e0 <__aeabi_dsub>
 800a012:	4622      	mov	r2, r4
 800a014:	462b      	mov	r3, r5
 800a016:	f7f6 fa9b 	bl	8000550 <__aeabi_dmul>
 800a01a:	a337      	add	r3, pc, #220	; (adr r3, 800a0f8 <__ieee754_acos+0x2b0>)
 800a01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a020:	f7f6 f8e0 	bl	80001e4 <__adddf3>
 800a024:	4622      	mov	r2, r4
 800a026:	462b      	mov	r3, r5
 800a028:	f7f6 fa92 	bl	8000550 <__aeabi_dmul>
 800a02c:	ec45 4b10 	vmov	d0, r4, r5
 800a030:	4680      	mov	r8, r0
 800a032:	4689      	mov	r9, r1
 800a034:	f001 f8a4 	bl	800b180 <__ieee754_sqrt>
 800a038:	a331      	add	r3, pc, #196	; (adr r3, 800a100 <__ieee754_acos+0x2b8>)
 800a03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03e:	4620      	mov	r0, r4
 800a040:	4629      	mov	r1, r5
 800a042:	ec57 6b10 	vmov	r6, r7, d0
 800a046:	f7f6 fa83 	bl	8000550 <__aeabi_dmul>
 800a04a:	a32f      	add	r3, pc, #188	; (adr r3, 800a108 <__ieee754_acos+0x2c0>)
 800a04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a050:	f7f6 f8c6 	bl	80001e0 <__aeabi_dsub>
 800a054:	4622      	mov	r2, r4
 800a056:	462b      	mov	r3, r5
 800a058:	f7f6 fa7a 	bl	8000550 <__aeabi_dmul>
 800a05c:	a32c      	add	r3, pc, #176	; (adr r3, 800a110 <__ieee754_acos+0x2c8>)
 800a05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a062:	f7f6 f8bf 	bl	80001e4 <__adddf3>
 800a066:	4622      	mov	r2, r4
 800a068:	462b      	mov	r3, r5
 800a06a:	f7f6 fa71 	bl	8000550 <__aeabi_dmul>
 800a06e:	a32a      	add	r3, pc, #168	; (adr r3, 800a118 <__ieee754_acos+0x2d0>)
 800a070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a074:	f7f6 f8b4 	bl	80001e0 <__aeabi_dsub>
 800a078:	4622      	mov	r2, r4
 800a07a:	462b      	mov	r3, r5
 800a07c:	f7f6 fa68 	bl	8000550 <__aeabi_dmul>
 800a080:	4b2e      	ldr	r3, [pc, #184]	; (800a13c <__ieee754_acos+0x2f4>)
 800a082:	2200      	movs	r2, #0
 800a084:	f7f6 f8ae 	bl	80001e4 <__adddf3>
 800a088:	4602      	mov	r2, r0
 800a08a:	460b      	mov	r3, r1
 800a08c:	4640      	mov	r0, r8
 800a08e:	4649      	mov	r1, r9
 800a090:	f7f6 fb88 	bl	80007a4 <__aeabi_ddiv>
 800a094:	4632      	mov	r2, r6
 800a096:	463b      	mov	r3, r7
 800a098:	f7f6 fa5a 	bl	8000550 <__aeabi_dmul>
 800a09c:	a320      	add	r3, pc, #128	; (adr r3, 800a120 <__ieee754_acos+0x2d8>)
 800a09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a2:	f7f6 f89d 	bl	80001e0 <__aeabi_dsub>
 800a0a6:	4632      	mov	r2, r6
 800a0a8:	463b      	mov	r3, r7
 800a0aa:	f7f6 f89b 	bl	80001e4 <__adddf3>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	f7f6 f897 	bl	80001e4 <__adddf3>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	a103      	add	r1, pc, #12	; (adr r1, 800a0c8 <__ieee754_acos+0x280>)
 800a0bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0c0:	e76f      	b.n	8009fa2 <__ieee754_acos+0x15a>
 800a0c2:	bf00      	nop
 800a0c4:	f3af 8000 	nop.w
 800a0c8:	54442d18 	.word	0x54442d18
 800a0cc:	400921fb 	.word	0x400921fb
 800a0d0:	0dfdf709 	.word	0x0dfdf709
 800a0d4:	3f023de1 	.word	0x3f023de1
 800a0d8:	7501b288 	.word	0x7501b288
 800a0dc:	3f49efe0 	.word	0x3f49efe0
 800a0e0:	b5688f3b 	.word	0xb5688f3b
 800a0e4:	3fa48228 	.word	0x3fa48228
 800a0e8:	0e884455 	.word	0x0e884455
 800a0ec:	3fc9c155 	.word	0x3fc9c155
 800a0f0:	03eb6f7d 	.word	0x03eb6f7d
 800a0f4:	3fd4d612 	.word	0x3fd4d612
 800a0f8:	55555555 	.word	0x55555555
 800a0fc:	3fc55555 	.word	0x3fc55555
 800a100:	b12e9282 	.word	0xb12e9282
 800a104:	3fb3b8c5 	.word	0x3fb3b8c5
 800a108:	1b8d0159 	.word	0x1b8d0159
 800a10c:	3fe6066c 	.word	0x3fe6066c
 800a110:	9c598ac8 	.word	0x9c598ac8
 800a114:	40002ae5 	.word	0x40002ae5
 800a118:	1c8a2d4b 	.word	0x1c8a2d4b
 800a11c:	40033a27 	.word	0x40033a27
 800a120:	33145c07 	.word	0x33145c07
 800a124:	3c91a626 	.word	0x3c91a626
 800a128:	54442d18 	.word	0x54442d18
 800a12c:	3ff921fb 	.word	0x3ff921fb
 800a130:	3fefffff 	.word	0x3fefffff
 800a134:	3fdfffff 	.word	0x3fdfffff
 800a138:	3c600000 	.word	0x3c600000
 800a13c:	3ff00000 	.word	0x3ff00000
 800a140:	3fe00000 	.word	0x3fe00000
 800a144:	ee10 2a10 	vmov	r2, s0
 800a148:	462b      	mov	r3, r5
 800a14a:	496d      	ldr	r1, [pc, #436]	; (800a300 <__ieee754_acos+0x4b8>)
 800a14c:	2000      	movs	r0, #0
 800a14e:	f7f6 f847 	bl	80001e0 <__aeabi_dsub>
 800a152:	4b6c      	ldr	r3, [pc, #432]	; (800a304 <__ieee754_acos+0x4bc>)
 800a154:	2200      	movs	r2, #0
 800a156:	f7f6 f9fb 	bl	8000550 <__aeabi_dmul>
 800a15a:	4604      	mov	r4, r0
 800a15c:	460d      	mov	r5, r1
 800a15e:	ec45 4b10 	vmov	d0, r4, r5
 800a162:	f001 f80d 	bl	800b180 <__ieee754_sqrt>
 800a166:	a34e      	add	r3, pc, #312	; (adr r3, 800a2a0 <__ieee754_acos+0x458>)
 800a168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16c:	4620      	mov	r0, r4
 800a16e:	4629      	mov	r1, r5
 800a170:	ec59 8b10 	vmov	r8, r9, d0
 800a174:	f7f6 f9ec 	bl	8000550 <__aeabi_dmul>
 800a178:	a34b      	add	r3, pc, #300	; (adr r3, 800a2a8 <__ieee754_acos+0x460>)
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	f7f6 f831 	bl	80001e4 <__adddf3>
 800a182:	4622      	mov	r2, r4
 800a184:	462b      	mov	r3, r5
 800a186:	f7f6 f9e3 	bl	8000550 <__aeabi_dmul>
 800a18a:	a349      	add	r3, pc, #292	; (adr r3, 800a2b0 <__ieee754_acos+0x468>)
 800a18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a190:	f7f6 f826 	bl	80001e0 <__aeabi_dsub>
 800a194:	4622      	mov	r2, r4
 800a196:	462b      	mov	r3, r5
 800a198:	f7f6 f9da 	bl	8000550 <__aeabi_dmul>
 800a19c:	a346      	add	r3, pc, #280	; (adr r3, 800a2b8 <__ieee754_acos+0x470>)
 800a19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a2:	f7f6 f81f 	bl	80001e4 <__adddf3>
 800a1a6:	4622      	mov	r2, r4
 800a1a8:	462b      	mov	r3, r5
 800a1aa:	f7f6 f9d1 	bl	8000550 <__aeabi_dmul>
 800a1ae:	a344      	add	r3, pc, #272	; (adr r3, 800a2c0 <__ieee754_acos+0x478>)
 800a1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b4:	f7f6 f814 	bl	80001e0 <__aeabi_dsub>
 800a1b8:	4622      	mov	r2, r4
 800a1ba:	462b      	mov	r3, r5
 800a1bc:	f7f6 f9c8 	bl	8000550 <__aeabi_dmul>
 800a1c0:	a341      	add	r3, pc, #260	; (adr r3, 800a2c8 <__ieee754_acos+0x480>)
 800a1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c6:	f7f6 f80d 	bl	80001e4 <__adddf3>
 800a1ca:	4622      	mov	r2, r4
 800a1cc:	462b      	mov	r3, r5
 800a1ce:	f7f6 f9bf 	bl	8000550 <__aeabi_dmul>
 800a1d2:	a33f      	add	r3, pc, #252	; (adr r3, 800a2d0 <__ieee754_acos+0x488>)
 800a1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d8:	4682      	mov	sl, r0
 800a1da:	468b      	mov	fp, r1
 800a1dc:	4620      	mov	r0, r4
 800a1de:	4629      	mov	r1, r5
 800a1e0:	f7f6 f9b6 	bl	8000550 <__aeabi_dmul>
 800a1e4:	a33c      	add	r3, pc, #240	; (adr r3, 800a2d8 <__ieee754_acos+0x490>)
 800a1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ea:	f7f5 fff9 	bl	80001e0 <__aeabi_dsub>
 800a1ee:	4622      	mov	r2, r4
 800a1f0:	462b      	mov	r3, r5
 800a1f2:	f7f6 f9ad 	bl	8000550 <__aeabi_dmul>
 800a1f6:	a33a      	add	r3, pc, #232	; (adr r3, 800a2e0 <__ieee754_acos+0x498>)
 800a1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fc:	f7f5 fff2 	bl	80001e4 <__adddf3>
 800a200:	4622      	mov	r2, r4
 800a202:	462b      	mov	r3, r5
 800a204:	f7f6 f9a4 	bl	8000550 <__aeabi_dmul>
 800a208:	a337      	add	r3, pc, #220	; (adr r3, 800a2e8 <__ieee754_acos+0x4a0>)
 800a20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20e:	f7f5 ffe7 	bl	80001e0 <__aeabi_dsub>
 800a212:	4622      	mov	r2, r4
 800a214:	462b      	mov	r3, r5
 800a216:	f7f6 f99b 	bl	8000550 <__aeabi_dmul>
 800a21a:	4b39      	ldr	r3, [pc, #228]	; (800a300 <__ieee754_acos+0x4b8>)
 800a21c:	2200      	movs	r2, #0
 800a21e:	f7f5 ffe1 	bl	80001e4 <__adddf3>
 800a222:	4602      	mov	r2, r0
 800a224:	460b      	mov	r3, r1
 800a226:	4650      	mov	r0, sl
 800a228:	4659      	mov	r1, fp
 800a22a:	f7f6 fabb 	bl	80007a4 <__aeabi_ddiv>
 800a22e:	4642      	mov	r2, r8
 800a230:	464b      	mov	r3, r9
 800a232:	f7f6 f98d 	bl	8000550 <__aeabi_dmul>
 800a236:	2600      	movs	r6, #0
 800a238:	4682      	mov	sl, r0
 800a23a:	468b      	mov	fp, r1
 800a23c:	4632      	mov	r2, r6
 800a23e:	464b      	mov	r3, r9
 800a240:	4630      	mov	r0, r6
 800a242:	4649      	mov	r1, r9
 800a244:	f7f6 f984 	bl	8000550 <__aeabi_dmul>
 800a248:	4602      	mov	r2, r0
 800a24a:	460b      	mov	r3, r1
 800a24c:	4620      	mov	r0, r4
 800a24e:	4629      	mov	r1, r5
 800a250:	f7f5 ffc6 	bl	80001e0 <__aeabi_dsub>
 800a254:	4632      	mov	r2, r6
 800a256:	4604      	mov	r4, r0
 800a258:	460d      	mov	r5, r1
 800a25a:	464b      	mov	r3, r9
 800a25c:	4640      	mov	r0, r8
 800a25e:	4649      	mov	r1, r9
 800a260:	f7f5 ffc0 	bl	80001e4 <__adddf3>
 800a264:	4602      	mov	r2, r0
 800a266:	460b      	mov	r3, r1
 800a268:	4620      	mov	r0, r4
 800a26a:	4629      	mov	r1, r5
 800a26c:	f7f6 fa9a 	bl	80007a4 <__aeabi_ddiv>
 800a270:	4602      	mov	r2, r0
 800a272:	460b      	mov	r3, r1
 800a274:	4650      	mov	r0, sl
 800a276:	4659      	mov	r1, fp
 800a278:	f7f5 ffb4 	bl	80001e4 <__adddf3>
 800a27c:	4632      	mov	r2, r6
 800a27e:	464b      	mov	r3, r9
 800a280:	f7f5 ffb0 	bl	80001e4 <__adddf3>
 800a284:	4602      	mov	r2, r0
 800a286:	460b      	mov	r3, r1
 800a288:	f7f5 ffac 	bl	80001e4 <__adddf3>
 800a28c:	e5fe      	b.n	8009e8c <__ieee754_acos+0x44>
 800a28e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800a2f0 <__ieee754_acos+0x4a8>
 800a292:	e5ed      	b.n	8009e70 <__ieee754_acos+0x28>
 800a294:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800a2f8 <__ieee754_acos+0x4b0>
 800a298:	e5ea      	b.n	8009e70 <__ieee754_acos+0x28>
 800a29a:	bf00      	nop
 800a29c:	f3af 8000 	nop.w
 800a2a0:	0dfdf709 	.word	0x0dfdf709
 800a2a4:	3f023de1 	.word	0x3f023de1
 800a2a8:	7501b288 	.word	0x7501b288
 800a2ac:	3f49efe0 	.word	0x3f49efe0
 800a2b0:	b5688f3b 	.word	0xb5688f3b
 800a2b4:	3fa48228 	.word	0x3fa48228
 800a2b8:	0e884455 	.word	0x0e884455
 800a2bc:	3fc9c155 	.word	0x3fc9c155
 800a2c0:	03eb6f7d 	.word	0x03eb6f7d
 800a2c4:	3fd4d612 	.word	0x3fd4d612
 800a2c8:	55555555 	.word	0x55555555
 800a2cc:	3fc55555 	.word	0x3fc55555
 800a2d0:	b12e9282 	.word	0xb12e9282
 800a2d4:	3fb3b8c5 	.word	0x3fb3b8c5
 800a2d8:	1b8d0159 	.word	0x1b8d0159
 800a2dc:	3fe6066c 	.word	0x3fe6066c
 800a2e0:	9c598ac8 	.word	0x9c598ac8
 800a2e4:	40002ae5 	.word	0x40002ae5
 800a2e8:	1c8a2d4b 	.word	0x1c8a2d4b
 800a2ec:	40033a27 	.word	0x40033a27
	...
 800a2f8:	54442d18 	.word	0x54442d18
 800a2fc:	3ff921fb 	.word	0x3ff921fb
 800a300:	3ff00000 	.word	0x3ff00000
 800a304:	3fe00000 	.word	0x3fe00000

0800a308 <__ieee754_pow>:
 800a308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30c:	ed2d 8b06 	vpush	{d8-d10}
 800a310:	b089      	sub	sp, #36	; 0x24
 800a312:	ed8d 1b00 	vstr	d1, [sp]
 800a316:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a31a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a31e:	ea58 0102 	orrs.w	r1, r8, r2
 800a322:	ec57 6b10 	vmov	r6, r7, d0
 800a326:	d115      	bne.n	800a354 <__ieee754_pow+0x4c>
 800a328:	19b3      	adds	r3, r6, r6
 800a32a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a32e:	4152      	adcs	r2, r2
 800a330:	4299      	cmp	r1, r3
 800a332:	4b89      	ldr	r3, [pc, #548]	; (800a558 <__ieee754_pow+0x250>)
 800a334:	4193      	sbcs	r3, r2
 800a336:	f080 84d2 	bcs.w	800acde <__ieee754_pow+0x9d6>
 800a33a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a33e:	4630      	mov	r0, r6
 800a340:	4639      	mov	r1, r7
 800a342:	f7f5 ff4f 	bl	80001e4 <__adddf3>
 800a346:	ec41 0b10 	vmov	d0, r0, r1
 800a34a:	b009      	add	sp, #36	; 0x24
 800a34c:	ecbd 8b06 	vpop	{d8-d10}
 800a350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a354:	4b81      	ldr	r3, [pc, #516]	; (800a55c <__ieee754_pow+0x254>)
 800a356:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a35a:	429c      	cmp	r4, r3
 800a35c:	ee10 aa10 	vmov	sl, s0
 800a360:	463d      	mov	r5, r7
 800a362:	dc06      	bgt.n	800a372 <__ieee754_pow+0x6a>
 800a364:	d101      	bne.n	800a36a <__ieee754_pow+0x62>
 800a366:	2e00      	cmp	r6, #0
 800a368:	d1e7      	bne.n	800a33a <__ieee754_pow+0x32>
 800a36a:	4598      	cmp	r8, r3
 800a36c:	dc01      	bgt.n	800a372 <__ieee754_pow+0x6a>
 800a36e:	d10f      	bne.n	800a390 <__ieee754_pow+0x88>
 800a370:	b172      	cbz	r2, 800a390 <__ieee754_pow+0x88>
 800a372:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a376:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a37a:	ea55 050a 	orrs.w	r5, r5, sl
 800a37e:	d1dc      	bne.n	800a33a <__ieee754_pow+0x32>
 800a380:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a384:	18db      	adds	r3, r3, r3
 800a386:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a38a:	4152      	adcs	r2, r2
 800a38c:	429d      	cmp	r5, r3
 800a38e:	e7d0      	b.n	800a332 <__ieee754_pow+0x2a>
 800a390:	2d00      	cmp	r5, #0
 800a392:	da3b      	bge.n	800a40c <__ieee754_pow+0x104>
 800a394:	4b72      	ldr	r3, [pc, #456]	; (800a560 <__ieee754_pow+0x258>)
 800a396:	4598      	cmp	r8, r3
 800a398:	dc51      	bgt.n	800a43e <__ieee754_pow+0x136>
 800a39a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a39e:	4598      	cmp	r8, r3
 800a3a0:	f340 84ac 	ble.w	800acfc <__ieee754_pow+0x9f4>
 800a3a4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a3a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a3ac:	2b14      	cmp	r3, #20
 800a3ae:	dd0f      	ble.n	800a3d0 <__ieee754_pow+0xc8>
 800a3b0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a3b4:	fa22 f103 	lsr.w	r1, r2, r3
 800a3b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	f040 849d 	bne.w	800acfc <__ieee754_pow+0x9f4>
 800a3c2:	f001 0101 	and.w	r1, r1, #1
 800a3c6:	f1c1 0302 	rsb	r3, r1, #2
 800a3ca:	9304      	str	r3, [sp, #16]
 800a3cc:	b182      	cbz	r2, 800a3f0 <__ieee754_pow+0xe8>
 800a3ce:	e05f      	b.n	800a490 <__ieee754_pow+0x188>
 800a3d0:	2a00      	cmp	r2, #0
 800a3d2:	d15b      	bne.n	800a48c <__ieee754_pow+0x184>
 800a3d4:	f1c3 0314 	rsb	r3, r3, #20
 800a3d8:	fa48 f103 	asr.w	r1, r8, r3
 800a3dc:	fa01 f303 	lsl.w	r3, r1, r3
 800a3e0:	4543      	cmp	r3, r8
 800a3e2:	f040 8488 	bne.w	800acf6 <__ieee754_pow+0x9ee>
 800a3e6:	f001 0101 	and.w	r1, r1, #1
 800a3ea:	f1c1 0302 	rsb	r3, r1, #2
 800a3ee:	9304      	str	r3, [sp, #16]
 800a3f0:	4b5c      	ldr	r3, [pc, #368]	; (800a564 <__ieee754_pow+0x25c>)
 800a3f2:	4598      	cmp	r8, r3
 800a3f4:	d132      	bne.n	800a45c <__ieee754_pow+0x154>
 800a3f6:	f1b9 0f00 	cmp.w	r9, #0
 800a3fa:	f280 8478 	bge.w	800acee <__ieee754_pow+0x9e6>
 800a3fe:	4959      	ldr	r1, [pc, #356]	; (800a564 <__ieee754_pow+0x25c>)
 800a400:	4632      	mov	r2, r6
 800a402:	463b      	mov	r3, r7
 800a404:	2000      	movs	r0, #0
 800a406:	f7f6 f9cd 	bl	80007a4 <__aeabi_ddiv>
 800a40a:	e79c      	b.n	800a346 <__ieee754_pow+0x3e>
 800a40c:	2300      	movs	r3, #0
 800a40e:	9304      	str	r3, [sp, #16]
 800a410:	2a00      	cmp	r2, #0
 800a412:	d13d      	bne.n	800a490 <__ieee754_pow+0x188>
 800a414:	4b51      	ldr	r3, [pc, #324]	; (800a55c <__ieee754_pow+0x254>)
 800a416:	4598      	cmp	r8, r3
 800a418:	d1ea      	bne.n	800a3f0 <__ieee754_pow+0xe8>
 800a41a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a41e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a422:	ea53 030a 	orrs.w	r3, r3, sl
 800a426:	f000 845a 	beq.w	800acde <__ieee754_pow+0x9d6>
 800a42a:	4b4f      	ldr	r3, [pc, #316]	; (800a568 <__ieee754_pow+0x260>)
 800a42c:	429c      	cmp	r4, r3
 800a42e:	dd08      	ble.n	800a442 <__ieee754_pow+0x13a>
 800a430:	f1b9 0f00 	cmp.w	r9, #0
 800a434:	f2c0 8457 	blt.w	800ace6 <__ieee754_pow+0x9de>
 800a438:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a43c:	e783      	b.n	800a346 <__ieee754_pow+0x3e>
 800a43e:	2302      	movs	r3, #2
 800a440:	e7e5      	b.n	800a40e <__ieee754_pow+0x106>
 800a442:	f1b9 0f00 	cmp.w	r9, #0
 800a446:	f04f 0000 	mov.w	r0, #0
 800a44a:	f04f 0100 	mov.w	r1, #0
 800a44e:	f6bf af7a 	bge.w	800a346 <__ieee754_pow+0x3e>
 800a452:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a456:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a45a:	e774      	b.n	800a346 <__ieee754_pow+0x3e>
 800a45c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a460:	d106      	bne.n	800a470 <__ieee754_pow+0x168>
 800a462:	4632      	mov	r2, r6
 800a464:	463b      	mov	r3, r7
 800a466:	4630      	mov	r0, r6
 800a468:	4639      	mov	r1, r7
 800a46a:	f7f6 f871 	bl	8000550 <__aeabi_dmul>
 800a46e:	e76a      	b.n	800a346 <__ieee754_pow+0x3e>
 800a470:	4b3e      	ldr	r3, [pc, #248]	; (800a56c <__ieee754_pow+0x264>)
 800a472:	4599      	cmp	r9, r3
 800a474:	d10c      	bne.n	800a490 <__ieee754_pow+0x188>
 800a476:	2d00      	cmp	r5, #0
 800a478:	db0a      	blt.n	800a490 <__ieee754_pow+0x188>
 800a47a:	ec47 6b10 	vmov	d0, r6, r7
 800a47e:	b009      	add	sp, #36	; 0x24
 800a480:	ecbd 8b06 	vpop	{d8-d10}
 800a484:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a488:	f000 be7a 	b.w	800b180 <__ieee754_sqrt>
 800a48c:	2300      	movs	r3, #0
 800a48e:	9304      	str	r3, [sp, #16]
 800a490:	ec47 6b10 	vmov	d0, r6, r7
 800a494:	f001 fc2e 	bl	800bcf4 <fabs>
 800a498:	ec51 0b10 	vmov	r0, r1, d0
 800a49c:	f1ba 0f00 	cmp.w	sl, #0
 800a4a0:	d129      	bne.n	800a4f6 <__ieee754_pow+0x1ee>
 800a4a2:	b124      	cbz	r4, 800a4ae <__ieee754_pow+0x1a6>
 800a4a4:	4b2f      	ldr	r3, [pc, #188]	; (800a564 <__ieee754_pow+0x25c>)
 800a4a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d123      	bne.n	800a4f6 <__ieee754_pow+0x1ee>
 800a4ae:	f1b9 0f00 	cmp.w	r9, #0
 800a4b2:	da05      	bge.n	800a4c0 <__ieee754_pow+0x1b8>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	2000      	movs	r0, #0
 800a4ba:	492a      	ldr	r1, [pc, #168]	; (800a564 <__ieee754_pow+0x25c>)
 800a4bc:	f7f6 f972 	bl	80007a4 <__aeabi_ddiv>
 800a4c0:	2d00      	cmp	r5, #0
 800a4c2:	f6bf af40 	bge.w	800a346 <__ieee754_pow+0x3e>
 800a4c6:	9b04      	ldr	r3, [sp, #16]
 800a4c8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a4cc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a4d0:	4323      	orrs	r3, r4
 800a4d2:	d108      	bne.n	800a4e6 <__ieee754_pow+0x1de>
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	4610      	mov	r0, r2
 800a4da:	4619      	mov	r1, r3
 800a4dc:	f7f5 fe80 	bl	80001e0 <__aeabi_dsub>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	e78f      	b.n	800a406 <__ieee754_pow+0xfe>
 800a4e6:	9b04      	ldr	r3, [sp, #16]
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	f47f af2c 	bne.w	800a346 <__ieee754_pow+0x3e>
 800a4ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	e727      	b.n	800a346 <__ieee754_pow+0x3e>
 800a4f6:	0feb      	lsrs	r3, r5, #31
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	9306      	str	r3, [sp, #24]
 800a4fc:	9a06      	ldr	r2, [sp, #24]
 800a4fe:	9b04      	ldr	r3, [sp, #16]
 800a500:	4313      	orrs	r3, r2
 800a502:	d102      	bne.n	800a50a <__ieee754_pow+0x202>
 800a504:	4632      	mov	r2, r6
 800a506:	463b      	mov	r3, r7
 800a508:	e7e6      	b.n	800a4d8 <__ieee754_pow+0x1d0>
 800a50a:	4b19      	ldr	r3, [pc, #100]	; (800a570 <__ieee754_pow+0x268>)
 800a50c:	4598      	cmp	r8, r3
 800a50e:	f340 80fb 	ble.w	800a708 <__ieee754_pow+0x400>
 800a512:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a516:	4598      	cmp	r8, r3
 800a518:	4b13      	ldr	r3, [pc, #76]	; (800a568 <__ieee754_pow+0x260>)
 800a51a:	dd0c      	ble.n	800a536 <__ieee754_pow+0x22e>
 800a51c:	429c      	cmp	r4, r3
 800a51e:	dc0f      	bgt.n	800a540 <__ieee754_pow+0x238>
 800a520:	f1b9 0f00 	cmp.w	r9, #0
 800a524:	da0f      	bge.n	800a546 <__ieee754_pow+0x23e>
 800a526:	2000      	movs	r0, #0
 800a528:	b009      	add	sp, #36	; 0x24
 800a52a:	ecbd 8b06 	vpop	{d8-d10}
 800a52e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a532:	f001 bbd6 	b.w	800bce2 <__math_oflow>
 800a536:	429c      	cmp	r4, r3
 800a538:	dbf2      	blt.n	800a520 <__ieee754_pow+0x218>
 800a53a:	4b0a      	ldr	r3, [pc, #40]	; (800a564 <__ieee754_pow+0x25c>)
 800a53c:	429c      	cmp	r4, r3
 800a53e:	dd19      	ble.n	800a574 <__ieee754_pow+0x26c>
 800a540:	f1b9 0f00 	cmp.w	r9, #0
 800a544:	dcef      	bgt.n	800a526 <__ieee754_pow+0x21e>
 800a546:	2000      	movs	r0, #0
 800a548:	b009      	add	sp, #36	; 0x24
 800a54a:	ecbd 8b06 	vpop	{d8-d10}
 800a54e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a552:	f001 bbbd 	b.w	800bcd0 <__math_uflow>
 800a556:	bf00      	nop
 800a558:	fff00000 	.word	0xfff00000
 800a55c:	7ff00000 	.word	0x7ff00000
 800a560:	433fffff 	.word	0x433fffff
 800a564:	3ff00000 	.word	0x3ff00000
 800a568:	3fefffff 	.word	0x3fefffff
 800a56c:	3fe00000 	.word	0x3fe00000
 800a570:	41e00000 	.word	0x41e00000
 800a574:	4b60      	ldr	r3, [pc, #384]	; (800a6f8 <__ieee754_pow+0x3f0>)
 800a576:	2200      	movs	r2, #0
 800a578:	f7f5 fe32 	bl	80001e0 <__aeabi_dsub>
 800a57c:	a354      	add	r3, pc, #336	; (adr r3, 800a6d0 <__ieee754_pow+0x3c8>)
 800a57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a582:	4604      	mov	r4, r0
 800a584:	460d      	mov	r5, r1
 800a586:	f7f5 ffe3 	bl	8000550 <__aeabi_dmul>
 800a58a:	a353      	add	r3, pc, #332	; (adr r3, 800a6d8 <__ieee754_pow+0x3d0>)
 800a58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a590:	4606      	mov	r6, r0
 800a592:	460f      	mov	r7, r1
 800a594:	4620      	mov	r0, r4
 800a596:	4629      	mov	r1, r5
 800a598:	f7f5 ffda 	bl	8000550 <__aeabi_dmul>
 800a59c:	4b57      	ldr	r3, [pc, #348]	; (800a6fc <__ieee754_pow+0x3f4>)
 800a59e:	4682      	mov	sl, r0
 800a5a0:	468b      	mov	fp, r1
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	4629      	mov	r1, r5
 800a5a8:	f7f5 ffd2 	bl	8000550 <__aeabi_dmul>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	a14b      	add	r1, pc, #300	; (adr r1, 800a6e0 <__ieee754_pow+0x3d8>)
 800a5b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5b6:	f7f5 fe13 	bl	80001e0 <__aeabi_dsub>
 800a5ba:	4622      	mov	r2, r4
 800a5bc:	462b      	mov	r3, r5
 800a5be:	f7f5 ffc7 	bl	8000550 <__aeabi_dmul>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	494d      	ldr	r1, [pc, #308]	; (800a700 <__ieee754_pow+0x3f8>)
 800a5ca:	f7f5 fe09 	bl	80001e0 <__aeabi_dsub>
 800a5ce:	4622      	mov	r2, r4
 800a5d0:	4680      	mov	r8, r0
 800a5d2:	4689      	mov	r9, r1
 800a5d4:	462b      	mov	r3, r5
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	4629      	mov	r1, r5
 800a5da:	f7f5 ffb9 	bl	8000550 <__aeabi_dmul>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	4640      	mov	r0, r8
 800a5e4:	4649      	mov	r1, r9
 800a5e6:	f7f5 ffb3 	bl	8000550 <__aeabi_dmul>
 800a5ea:	a33f      	add	r3, pc, #252	; (adr r3, 800a6e8 <__ieee754_pow+0x3e0>)
 800a5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f0:	f7f5 ffae 	bl	8000550 <__aeabi_dmul>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	4650      	mov	r0, sl
 800a5fa:	4659      	mov	r1, fp
 800a5fc:	f7f5 fdf0 	bl	80001e0 <__aeabi_dsub>
 800a600:	4602      	mov	r2, r0
 800a602:	460b      	mov	r3, r1
 800a604:	4680      	mov	r8, r0
 800a606:	4689      	mov	r9, r1
 800a608:	4630      	mov	r0, r6
 800a60a:	4639      	mov	r1, r7
 800a60c:	f7f5 fdea 	bl	80001e4 <__adddf3>
 800a610:	2000      	movs	r0, #0
 800a612:	4632      	mov	r2, r6
 800a614:	463b      	mov	r3, r7
 800a616:	4604      	mov	r4, r0
 800a618:	460d      	mov	r5, r1
 800a61a:	f7f5 fde1 	bl	80001e0 <__aeabi_dsub>
 800a61e:	4602      	mov	r2, r0
 800a620:	460b      	mov	r3, r1
 800a622:	4640      	mov	r0, r8
 800a624:	4649      	mov	r1, r9
 800a626:	f7f5 fddb 	bl	80001e0 <__aeabi_dsub>
 800a62a:	9b04      	ldr	r3, [sp, #16]
 800a62c:	9a06      	ldr	r2, [sp, #24]
 800a62e:	3b01      	subs	r3, #1
 800a630:	4313      	orrs	r3, r2
 800a632:	4682      	mov	sl, r0
 800a634:	468b      	mov	fp, r1
 800a636:	f040 81e7 	bne.w	800aa08 <__ieee754_pow+0x700>
 800a63a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a6f0 <__ieee754_pow+0x3e8>
 800a63e:	eeb0 8a47 	vmov.f32	s16, s14
 800a642:	eef0 8a67 	vmov.f32	s17, s15
 800a646:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a64a:	2600      	movs	r6, #0
 800a64c:	4632      	mov	r2, r6
 800a64e:	463b      	mov	r3, r7
 800a650:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a654:	f7f5 fdc4 	bl	80001e0 <__aeabi_dsub>
 800a658:	4622      	mov	r2, r4
 800a65a:	462b      	mov	r3, r5
 800a65c:	f7f5 ff78 	bl	8000550 <__aeabi_dmul>
 800a660:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a664:	4680      	mov	r8, r0
 800a666:	4689      	mov	r9, r1
 800a668:	4650      	mov	r0, sl
 800a66a:	4659      	mov	r1, fp
 800a66c:	f7f5 ff70 	bl	8000550 <__aeabi_dmul>
 800a670:	4602      	mov	r2, r0
 800a672:	460b      	mov	r3, r1
 800a674:	4640      	mov	r0, r8
 800a676:	4649      	mov	r1, r9
 800a678:	f7f5 fdb4 	bl	80001e4 <__adddf3>
 800a67c:	4632      	mov	r2, r6
 800a67e:	463b      	mov	r3, r7
 800a680:	4680      	mov	r8, r0
 800a682:	4689      	mov	r9, r1
 800a684:	4620      	mov	r0, r4
 800a686:	4629      	mov	r1, r5
 800a688:	f7f5 ff62 	bl	8000550 <__aeabi_dmul>
 800a68c:	460b      	mov	r3, r1
 800a68e:	4604      	mov	r4, r0
 800a690:	460d      	mov	r5, r1
 800a692:	4602      	mov	r2, r0
 800a694:	4649      	mov	r1, r9
 800a696:	4640      	mov	r0, r8
 800a698:	f7f5 fda4 	bl	80001e4 <__adddf3>
 800a69c:	4b19      	ldr	r3, [pc, #100]	; (800a704 <__ieee754_pow+0x3fc>)
 800a69e:	4299      	cmp	r1, r3
 800a6a0:	ec45 4b19 	vmov	d9, r4, r5
 800a6a4:	4606      	mov	r6, r0
 800a6a6:	460f      	mov	r7, r1
 800a6a8:	468b      	mov	fp, r1
 800a6aa:	f340 82f1 	ble.w	800ac90 <__ieee754_pow+0x988>
 800a6ae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a6b2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a6b6:	4303      	orrs	r3, r0
 800a6b8:	f000 81e4 	beq.w	800aa84 <__ieee754_pow+0x77c>
 800a6bc:	ec51 0b18 	vmov	r0, r1, d8
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	f7f6 f9b6 	bl	8000a34 <__aeabi_dcmplt>
 800a6c8:	3800      	subs	r0, #0
 800a6ca:	bf18      	it	ne
 800a6cc:	2001      	movne	r0, #1
 800a6ce:	e72b      	b.n	800a528 <__ieee754_pow+0x220>
 800a6d0:	60000000 	.word	0x60000000
 800a6d4:	3ff71547 	.word	0x3ff71547
 800a6d8:	f85ddf44 	.word	0xf85ddf44
 800a6dc:	3e54ae0b 	.word	0x3e54ae0b
 800a6e0:	55555555 	.word	0x55555555
 800a6e4:	3fd55555 	.word	0x3fd55555
 800a6e8:	652b82fe 	.word	0x652b82fe
 800a6ec:	3ff71547 	.word	0x3ff71547
 800a6f0:	00000000 	.word	0x00000000
 800a6f4:	bff00000 	.word	0xbff00000
 800a6f8:	3ff00000 	.word	0x3ff00000
 800a6fc:	3fd00000 	.word	0x3fd00000
 800a700:	3fe00000 	.word	0x3fe00000
 800a704:	408fffff 	.word	0x408fffff
 800a708:	4bd5      	ldr	r3, [pc, #852]	; (800aa60 <__ieee754_pow+0x758>)
 800a70a:	402b      	ands	r3, r5
 800a70c:	2200      	movs	r2, #0
 800a70e:	b92b      	cbnz	r3, 800a71c <__ieee754_pow+0x414>
 800a710:	4bd4      	ldr	r3, [pc, #848]	; (800aa64 <__ieee754_pow+0x75c>)
 800a712:	f7f5 ff1d 	bl	8000550 <__aeabi_dmul>
 800a716:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a71a:	460c      	mov	r4, r1
 800a71c:	1523      	asrs	r3, r4, #20
 800a71e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a722:	4413      	add	r3, r2
 800a724:	9305      	str	r3, [sp, #20]
 800a726:	4bd0      	ldr	r3, [pc, #832]	; (800aa68 <__ieee754_pow+0x760>)
 800a728:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a72c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a730:	429c      	cmp	r4, r3
 800a732:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a736:	dd08      	ble.n	800a74a <__ieee754_pow+0x442>
 800a738:	4bcc      	ldr	r3, [pc, #816]	; (800aa6c <__ieee754_pow+0x764>)
 800a73a:	429c      	cmp	r4, r3
 800a73c:	f340 8162 	ble.w	800aa04 <__ieee754_pow+0x6fc>
 800a740:	9b05      	ldr	r3, [sp, #20]
 800a742:	3301      	adds	r3, #1
 800a744:	9305      	str	r3, [sp, #20]
 800a746:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a74a:	2400      	movs	r4, #0
 800a74c:	00e3      	lsls	r3, r4, #3
 800a74e:	9307      	str	r3, [sp, #28]
 800a750:	4bc7      	ldr	r3, [pc, #796]	; (800aa70 <__ieee754_pow+0x768>)
 800a752:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a756:	ed93 7b00 	vldr	d7, [r3]
 800a75a:	4629      	mov	r1, r5
 800a75c:	ec53 2b17 	vmov	r2, r3, d7
 800a760:	eeb0 9a47 	vmov.f32	s18, s14
 800a764:	eef0 9a67 	vmov.f32	s19, s15
 800a768:	4682      	mov	sl, r0
 800a76a:	f7f5 fd39 	bl	80001e0 <__aeabi_dsub>
 800a76e:	4652      	mov	r2, sl
 800a770:	4606      	mov	r6, r0
 800a772:	460f      	mov	r7, r1
 800a774:	462b      	mov	r3, r5
 800a776:	ec51 0b19 	vmov	r0, r1, d9
 800a77a:	f7f5 fd33 	bl	80001e4 <__adddf3>
 800a77e:	4602      	mov	r2, r0
 800a780:	460b      	mov	r3, r1
 800a782:	2000      	movs	r0, #0
 800a784:	49bb      	ldr	r1, [pc, #748]	; (800aa74 <__ieee754_pow+0x76c>)
 800a786:	f7f6 f80d 	bl	80007a4 <__aeabi_ddiv>
 800a78a:	ec41 0b1a 	vmov	d10, r0, r1
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	4630      	mov	r0, r6
 800a794:	4639      	mov	r1, r7
 800a796:	f7f5 fedb 	bl	8000550 <__aeabi_dmul>
 800a79a:	2300      	movs	r3, #0
 800a79c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7a0:	9302      	str	r3, [sp, #8]
 800a7a2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a7a6:	46ab      	mov	fp, r5
 800a7a8:	106d      	asrs	r5, r5, #1
 800a7aa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a7ae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a7b2:	ec41 0b18 	vmov	d8, r0, r1
 800a7b6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	4640      	mov	r0, r8
 800a7be:	4649      	mov	r1, r9
 800a7c0:	4614      	mov	r4, r2
 800a7c2:	461d      	mov	r5, r3
 800a7c4:	f7f5 fec4 	bl	8000550 <__aeabi_dmul>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	4630      	mov	r0, r6
 800a7ce:	4639      	mov	r1, r7
 800a7d0:	f7f5 fd06 	bl	80001e0 <__aeabi_dsub>
 800a7d4:	ec53 2b19 	vmov	r2, r3, d9
 800a7d8:	4606      	mov	r6, r0
 800a7da:	460f      	mov	r7, r1
 800a7dc:	4620      	mov	r0, r4
 800a7de:	4629      	mov	r1, r5
 800a7e0:	f7f5 fcfe 	bl	80001e0 <__aeabi_dsub>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	4650      	mov	r0, sl
 800a7ea:	4659      	mov	r1, fp
 800a7ec:	f7f5 fcf8 	bl	80001e0 <__aeabi_dsub>
 800a7f0:	4642      	mov	r2, r8
 800a7f2:	464b      	mov	r3, r9
 800a7f4:	f7f5 feac 	bl	8000550 <__aeabi_dmul>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	4639      	mov	r1, r7
 800a800:	f7f5 fcee 	bl	80001e0 <__aeabi_dsub>
 800a804:	ec53 2b1a 	vmov	r2, r3, d10
 800a808:	f7f5 fea2 	bl	8000550 <__aeabi_dmul>
 800a80c:	ec53 2b18 	vmov	r2, r3, d8
 800a810:	ec41 0b19 	vmov	d9, r0, r1
 800a814:	ec51 0b18 	vmov	r0, r1, d8
 800a818:	f7f5 fe9a 	bl	8000550 <__aeabi_dmul>
 800a81c:	a37c      	add	r3, pc, #496	; (adr r3, 800aa10 <__ieee754_pow+0x708>)
 800a81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a822:	4604      	mov	r4, r0
 800a824:	460d      	mov	r5, r1
 800a826:	f7f5 fe93 	bl	8000550 <__aeabi_dmul>
 800a82a:	a37b      	add	r3, pc, #492	; (adr r3, 800aa18 <__ieee754_pow+0x710>)
 800a82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a830:	f7f5 fcd8 	bl	80001e4 <__adddf3>
 800a834:	4622      	mov	r2, r4
 800a836:	462b      	mov	r3, r5
 800a838:	f7f5 fe8a 	bl	8000550 <__aeabi_dmul>
 800a83c:	a378      	add	r3, pc, #480	; (adr r3, 800aa20 <__ieee754_pow+0x718>)
 800a83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a842:	f7f5 fccf 	bl	80001e4 <__adddf3>
 800a846:	4622      	mov	r2, r4
 800a848:	462b      	mov	r3, r5
 800a84a:	f7f5 fe81 	bl	8000550 <__aeabi_dmul>
 800a84e:	a376      	add	r3, pc, #472	; (adr r3, 800aa28 <__ieee754_pow+0x720>)
 800a850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a854:	f7f5 fcc6 	bl	80001e4 <__adddf3>
 800a858:	4622      	mov	r2, r4
 800a85a:	462b      	mov	r3, r5
 800a85c:	f7f5 fe78 	bl	8000550 <__aeabi_dmul>
 800a860:	a373      	add	r3, pc, #460	; (adr r3, 800aa30 <__ieee754_pow+0x728>)
 800a862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a866:	f7f5 fcbd 	bl	80001e4 <__adddf3>
 800a86a:	4622      	mov	r2, r4
 800a86c:	462b      	mov	r3, r5
 800a86e:	f7f5 fe6f 	bl	8000550 <__aeabi_dmul>
 800a872:	a371      	add	r3, pc, #452	; (adr r3, 800aa38 <__ieee754_pow+0x730>)
 800a874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a878:	f7f5 fcb4 	bl	80001e4 <__adddf3>
 800a87c:	4622      	mov	r2, r4
 800a87e:	4606      	mov	r6, r0
 800a880:	460f      	mov	r7, r1
 800a882:	462b      	mov	r3, r5
 800a884:	4620      	mov	r0, r4
 800a886:	4629      	mov	r1, r5
 800a888:	f7f5 fe62 	bl	8000550 <__aeabi_dmul>
 800a88c:	4602      	mov	r2, r0
 800a88e:	460b      	mov	r3, r1
 800a890:	4630      	mov	r0, r6
 800a892:	4639      	mov	r1, r7
 800a894:	f7f5 fe5c 	bl	8000550 <__aeabi_dmul>
 800a898:	4642      	mov	r2, r8
 800a89a:	4604      	mov	r4, r0
 800a89c:	460d      	mov	r5, r1
 800a89e:	464b      	mov	r3, r9
 800a8a0:	ec51 0b18 	vmov	r0, r1, d8
 800a8a4:	f7f5 fc9e 	bl	80001e4 <__adddf3>
 800a8a8:	ec53 2b19 	vmov	r2, r3, d9
 800a8ac:	f7f5 fe50 	bl	8000550 <__aeabi_dmul>
 800a8b0:	4622      	mov	r2, r4
 800a8b2:	462b      	mov	r3, r5
 800a8b4:	f7f5 fc96 	bl	80001e4 <__adddf3>
 800a8b8:	4642      	mov	r2, r8
 800a8ba:	4682      	mov	sl, r0
 800a8bc:	468b      	mov	fp, r1
 800a8be:	464b      	mov	r3, r9
 800a8c0:	4640      	mov	r0, r8
 800a8c2:	4649      	mov	r1, r9
 800a8c4:	f7f5 fe44 	bl	8000550 <__aeabi_dmul>
 800a8c8:	4b6b      	ldr	r3, [pc, #428]	; (800aa78 <__ieee754_pow+0x770>)
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	4606      	mov	r6, r0
 800a8ce:	460f      	mov	r7, r1
 800a8d0:	f7f5 fc88 	bl	80001e4 <__adddf3>
 800a8d4:	4652      	mov	r2, sl
 800a8d6:	465b      	mov	r3, fp
 800a8d8:	f7f5 fc84 	bl	80001e4 <__adddf3>
 800a8dc:	2000      	movs	r0, #0
 800a8de:	4604      	mov	r4, r0
 800a8e0:	460d      	mov	r5, r1
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	4640      	mov	r0, r8
 800a8e8:	4649      	mov	r1, r9
 800a8ea:	f7f5 fe31 	bl	8000550 <__aeabi_dmul>
 800a8ee:	4b62      	ldr	r3, [pc, #392]	; (800aa78 <__ieee754_pow+0x770>)
 800a8f0:	4680      	mov	r8, r0
 800a8f2:	4689      	mov	r9, r1
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	4629      	mov	r1, r5
 800a8fa:	f7f5 fc71 	bl	80001e0 <__aeabi_dsub>
 800a8fe:	4632      	mov	r2, r6
 800a900:	463b      	mov	r3, r7
 800a902:	f7f5 fc6d 	bl	80001e0 <__aeabi_dsub>
 800a906:	4602      	mov	r2, r0
 800a908:	460b      	mov	r3, r1
 800a90a:	4650      	mov	r0, sl
 800a90c:	4659      	mov	r1, fp
 800a90e:	f7f5 fc67 	bl	80001e0 <__aeabi_dsub>
 800a912:	ec53 2b18 	vmov	r2, r3, d8
 800a916:	f7f5 fe1b 	bl	8000550 <__aeabi_dmul>
 800a91a:	4622      	mov	r2, r4
 800a91c:	4606      	mov	r6, r0
 800a91e:	460f      	mov	r7, r1
 800a920:	462b      	mov	r3, r5
 800a922:	ec51 0b19 	vmov	r0, r1, d9
 800a926:	f7f5 fe13 	bl	8000550 <__aeabi_dmul>
 800a92a:	4602      	mov	r2, r0
 800a92c:	460b      	mov	r3, r1
 800a92e:	4630      	mov	r0, r6
 800a930:	4639      	mov	r1, r7
 800a932:	f7f5 fc57 	bl	80001e4 <__adddf3>
 800a936:	4606      	mov	r6, r0
 800a938:	460f      	mov	r7, r1
 800a93a:	4602      	mov	r2, r0
 800a93c:	460b      	mov	r3, r1
 800a93e:	4640      	mov	r0, r8
 800a940:	4649      	mov	r1, r9
 800a942:	f7f5 fc4f 	bl	80001e4 <__adddf3>
 800a946:	a33e      	add	r3, pc, #248	; (adr r3, 800aa40 <__ieee754_pow+0x738>)
 800a948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94c:	2000      	movs	r0, #0
 800a94e:	4604      	mov	r4, r0
 800a950:	460d      	mov	r5, r1
 800a952:	f7f5 fdfd 	bl	8000550 <__aeabi_dmul>
 800a956:	4642      	mov	r2, r8
 800a958:	ec41 0b18 	vmov	d8, r0, r1
 800a95c:	464b      	mov	r3, r9
 800a95e:	4620      	mov	r0, r4
 800a960:	4629      	mov	r1, r5
 800a962:	f7f5 fc3d 	bl	80001e0 <__aeabi_dsub>
 800a966:	4602      	mov	r2, r0
 800a968:	460b      	mov	r3, r1
 800a96a:	4630      	mov	r0, r6
 800a96c:	4639      	mov	r1, r7
 800a96e:	f7f5 fc37 	bl	80001e0 <__aeabi_dsub>
 800a972:	a335      	add	r3, pc, #212	; (adr r3, 800aa48 <__ieee754_pow+0x740>)
 800a974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a978:	f7f5 fdea 	bl	8000550 <__aeabi_dmul>
 800a97c:	a334      	add	r3, pc, #208	; (adr r3, 800aa50 <__ieee754_pow+0x748>)
 800a97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a982:	4606      	mov	r6, r0
 800a984:	460f      	mov	r7, r1
 800a986:	4620      	mov	r0, r4
 800a988:	4629      	mov	r1, r5
 800a98a:	f7f5 fde1 	bl	8000550 <__aeabi_dmul>
 800a98e:	4602      	mov	r2, r0
 800a990:	460b      	mov	r3, r1
 800a992:	4630      	mov	r0, r6
 800a994:	4639      	mov	r1, r7
 800a996:	f7f5 fc25 	bl	80001e4 <__adddf3>
 800a99a:	9a07      	ldr	r2, [sp, #28]
 800a99c:	4b37      	ldr	r3, [pc, #220]	; (800aa7c <__ieee754_pow+0x774>)
 800a99e:	4413      	add	r3, r2
 800a9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a4:	f7f5 fc1e 	bl	80001e4 <__adddf3>
 800a9a8:	4682      	mov	sl, r0
 800a9aa:	9805      	ldr	r0, [sp, #20]
 800a9ac:	468b      	mov	fp, r1
 800a9ae:	f7f5 fd65 	bl	800047c <__aeabi_i2d>
 800a9b2:	9a07      	ldr	r2, [sp, #28]
 800a9b4:	4b32      	ldr	r3, [pc, #200]	; (800aa80 <__ieee754_pow+0x778>)
 800a9b6:	4413      	add	r3, r2
 800a9b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9bc:	4606      	mov	r6, r0
 800a9be:	460f      	mov	r7, r1
 800a9c0:	4652      	mov	r2, sl
 800a9c2:	465b      	mov	r3, fp
 800a9c4:	ec51 0b18 	vmov	r0, r1, d8
 800a9c8:	f7f5 fc0c 	bl	80001e4 <__adddf3>
 800a9cc:	4642      	mov	r2, r8
 800a9ce:	464b      	mov	r3, r9
 800a9d0:	f7f5 fc08 	bl	80001e4 <__adddf3>
 800a9d4:	4632      	mov	r2, r6
 800a9d6:	463b      	mov	r3, r7
 800a9d8:	f7f5 fc04 	bl	80001e4 <__adddf3>
 800a9dc:	2000      	movs	r0, #0
 800a9de:	4632      	mov	r2, r6
 800a9e0:	463b      	mov	r3, r7
 800a9e2:	4604      	mov	r4, r0
 800a9e4:	460d      	mov	r5, r1
 800a9e6:	f7f5 fbfb 	bl	80001e0 <__aeabi_dsub>
 800a9ea:	4642      	mov	r2, r8
 800a9ec:	464b      	mov	r3, r9
 800a9ee:	f7f5 fbf7 	bl	80001e0 <__aeabi_dsub>
 800a9f2:	ec53 2b18 	vmov	r2, r3, d8
 800a9f6:	f7f5 fbf3 	bl	80001e0 <__aeabi_dsub>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	4650      	mov	r0, sl
 800aa00:	4659      	mov	r1, fp
 800aa02:	e610      	b.n	800a626 <__ieee754_pow+0x31e>
 800aa04:	2401      	movs	r4, #1
 800aa06:	e6a1      	b.n	800a74c <__ieee754_pow+0x444>
 800aa08:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800aa58 <__ieee754_pow+0x750>
 800aa0c:	e617      	b.n	800a63e <__ieee754_pow+0x336>
 800aa0e:	bf00      	nop
 800aa10:	4a454eef 	.word	0x4a454eef
 800aa14:	3fca7e28 	.word	0x3fca7e28
 800aa18:	93c9db65 	.word	0x93c9db65
 800aa1c:	3fcd864a 	.word	0x3fcd864a
 800aa20:	a91d4101 	.word	0xa91d4101
 800aa24:	3fd17460 	.word	0x3fd17460
 800aa28:	518f264d 	.word	0x518f264d
 800aa2c:	3fd55555 	.word	0x3fd55555
 800aa30:	db6fabff 	.word	0xdb6fabff
 800aa34:	3fdb6db6 	.word	0x3fdb6db6
 800aa38:	33333303 	.word	0x33333303
 800aa3c:	3fe33333 	.word	0x3fe33333
 800aa40:	e0000000 	.word	0xe0000000
 800aa44:	3feec709 	.word	0x3feec709
 800aa48:	dc3a03fd 	.word	0xdc3a03fd
 800aa4c:	3feec709 	.word	0x3feec709
 800aa50:	145b01f5 	.word	0x145b01f5
 800aa54:	be3e2fe0 	.word	0xbe3e2fe0
 800aa58:	00000000 	.word	0x00000000
 800aa5c:	3ff00000 	.word	0x3ff00000
 800aa60:	7ff00000 	.word	0x7ff00000
 800aa64:	43400000 	.word	0x43400000
 800aa68:	0003988e 	.word	0x0003988e
 800aa6c:	000bb679 	.word	0x000bb679
 800aa70:	0800be80 	.word	0x0800be80
 800aa74:	3ff00000 	.word	0x3ff00000
 800aa78:	40080000 	.word	0x40080000
 800aa7c:	0800bea0 	.word	0x0800bea0
 800aa80:	0800be90 	.word	0x0800be90
 800aa84:	a3b5      	add	r3, pc, #724	; (adr r3, 800ad5c <__ieee754_pow+0xa54>)
 800aa86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8a:	4640      	mov	r0, r8
 800aa8c:	4649      	mov	r1, r9
 800aa8e:	f7f5 fba9 	bl	80001e4 <__adddf3>
 800aa92:	4622      	mov	r2, r4
 800aa94:	ec41 0b1a 	vmov	d10, r0, r1
 800aa98:	462b      	mov	r3, r5
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	4639      	mov	r1, r7
 800aa9e:	f7f5 fb9f 	bl	80001e0 <__aeabi_dsub>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	ec51 0b1a 	vmov	r0, r1, d10
 800aaaa:	f7f5 ffe1 	bl	8000a70 <__aeabi_dcmpgt>
 800aaae:	2800      	cmp	r0, #0
 800aab0:	f47f ae04 	bne.w	800a6bc <__ieee754_pow+0x3b4>
 800aab4:	4aa4      	ldr	r2, [pc, #656]	; (800ad48 <__ieee754_pow+0xa40>)
 800aab6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aaba:	4293      	cmp	r3, r2
 800aabc:	f340 8108 	ble.w	800acd0 <__ieee754_pow+0x9c8>
 800aac0:	151b      	asrs	r3, r3, #20
 800aac2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800aac6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800aaca:	fa4a f303 	asr.w	r3, sl, r3
 800aace:	445b      	add	r3, fp
 800aad0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800aad4:	4e9d      	ldr	r6, [pc, #628]	; (800ad4c <__ieee754_pow+0xa44>)
 800aad6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800aada:	4116      	asrs	r6, r2
 800aadc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800aae0:	2000      	movs	r0, #0
 800aae2:	ea23 0106 	bic.w	r1, r3, r6
 800aae6:	f1c2 0214 	rsb	r2, r2, #20
 800aaea:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800aaee:	fa4a fa02 	asr.w	sl, sl, r2
 800aaf2:	f1bb 0f00 	cmp.w	fp, #0
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	460b      	mov	r3, r1
 800aafa:	4620      	mov	r0, r4
 800aafc:	4629      	mov	r1, r5
 800aafe:	bfb8      	it	lt
 800ab00:	f1ca 0a00 	rsblt	sl, sl, #0
 800ab04:	f7f5 fb6c 	bl	80001e0 <__aeabi_dsub>
 800ab08:	ec41 0b19 	vmov	d9, r0, r1
 800ab0c:	4642      	mov	r2, r8
 800ab0e:	464b      	mov	r3, r9
 800ab10:	ec51 0b19 	vmov	r0, r1, d9
 800ab14:	f7f5 fb66 	bl	80001e4 <__adddf3>
 800ab18:	a37b      	add	r3, pc, #492	; (adr r3, 800ad08 <__ieee754_pow+0xa00>)
 800ab1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab1e:	2000      	movs	r0, #0
 800ab20:	4604      	mov	r4, r0
 800ab22:	460d      	mov	r5, r1
 800ab24:	f7f5 fd14 	bl	8000550 <__aeabi_dmul>
 800ab28:	ec53 2b19 	vmov	r2, r3, d9
 800ab2c:	4606      	mov	r6, r0
 800ab2e:	460f      	mov	r7, r1
 800ab30:	4620      	mov	r0, r4
 800ab32:	4629      	mov	r1, r5
 800ab34:	f7f5 fb54 	bl	80001e0 <__aeabi_dsub>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	460b      	mov	r3, r1
 800ab3c:	4640      	mov	r0, r8
 800ab3e:	4649      	mov	r1, r9
 800ab40:	f7f5 fb4e 	bl	80001e0 <__aeabi_dsub>
 800ab44:	a372      	add	r3, pc, #456	; (adr r3, 800ad10 <__ieee754_pow+0xa08>)
 800ab46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4a:	f7f5 fd01 	bl	8000550 <__aeabi_dmul>
 800ab4e:	a372      	add	r3, pc, #456	; (adr r3, 800ad18 <__ieee754_pow+0xa10>)
 800ab50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab54:	4680      	mov	r8, r0
 800ab56:	4689      	mov	r9, r1
 800ab58:	4620      	mov	r0, r4
 800ab5a:	4629      	mov	r1, r5
 800ab5c:	f7f5 fcf8 	bl	8000550 <__aeabi_dmul>
 800ab60:	4602      	mov	r2, r0
 800ab62:	460b      	mov	r3, r1
 800ab64:	4640      	mov	r0, r8
 800ab66:	4649      	mov	r1, r9
 800ab68:	f7f5 fb3c 	bl	80001e4 <__adddf3>
 800ab6c:	4604      	mov	r4, r0
 800ab6e:	460d      	mov	r5, r1
 800ab70:	4602      	mov	r2, r0
 800ab72:	460b      	mov	r3, r1
 800ab74:	4630      	mov	r0, r6
 800ab76:	4639      	mov	r1, r7
 800ab78:	f7f5 fb34 	bl	80001e4 <__adddf3>
 800ab7c:	4632      	mov	r2, r6
 800ab7e:	463b      	mov	r3, r7
 800ab80:	4680      	mov	r8, r0
 800ab82:	4689      	mov	r9, r1
 800ab84:	f7f5 fb2c 	bl	80001e0 <__aeabi_dsub>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	4629      	mov	r1, r5
 800ab90:	f7f5 fb26 	bl	80001e0 <__aeabi_dsub>
 800ab94:	4642      	mov	r2, r8
 800ab96:	4606      	mov	r6, r0
 800ab98:	460f      	mov	r7, r1
 800ab9a:	464b      	mov	r3, r9
 800ab9c:	4640      	mov	r0, r8
 800ab9e:	4649      	mov	r1, r9
 800aba0:	f7f5 fcd6 	bl	8000550 <__aeabi_dmul>
 800aba4:	a35e      	add	r3, pc, #376	; (adr r3, 800ad20 <__ieee754_pow+0xa18>)
 800aba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abaa:	4604      	mov	r4, r0
 800abac:	460d      	mov	r5, r1
 800abae:	f7f5 fccf 	bl	8000550 <__aeabi_dmul>
 800abb2:	a35d      	add	r3, pc, #372	; (adr r3, 800ad28 <__ieee754_pow+0xa20>)
 800abb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb8:	f7f5 fb12 	bl	80001e0 <__aeabi_dsub>
 800abbc:	4622      	mov	r2, r4
 800abbe:	462b      	mov	r3, r5
 800abc0:	f7f5 fcc6 	bl	8000550 <__aeabi_dmul>
 800abc4:	a35a      	add	r3, pc, #360	; (adr r3, 800ad30 <__ieee754_pow+0xa28>)
 800abc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abca:	f7f5 fb0b 	bl	80001e4 <__adddf3>
 800abce:	4622      	mov	r2, r4
 800abd0:	462b      	mov	r3, r5
 800abd2:	f7f5 fcbd 	bl	8000550 <__aeabi_dmul>
 800abd6:	a358      	add	r3, pc, #352	; (adr r3, 800ad38 <__ieee754_pow+0xa30>)
 800abd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abdc:	f7f5 fb00 	bl	80001e0 <__aeabi_dsub>
 800abe0:	4622      	mov	r2, r4
 800abe2:	462b      	mov	r3, r5
 800abe4:	f7f5 fcb4 	bl	8000550 <__aeabi_dmul>
 800abe8:	a355      	add	r3, pc, #340	; (adr r3, 800ad40 <__ieee754_pow+0xa38>)
 800abea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abee:	f7f5 faf9 	bl	80001e4 <__adddf3>
 800abf2:	4622      	mov	r2, r4
 800abf4:	462b      	mov	r3, r5
 800abf6:	f7f5 fcab 	bl	8000550 <__aeabi_dmul>
 800abfa:	4602      	mov	r2, r0
 800abfc:	460b      	mov	r3, r1
 800abfe:	4640      	mov	r0, r8
 800ac00:	4649      	mov	r1, r9
 800ac02:	f7f5 faed 	bl	80001e0 <__aeabi_dsub>
 800ac06:	4604      	mov	r4, r0
 800ac08:	460d      	mov	r5, r1
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	4640      	mov	r0, r8
 800ac10:	4649      	mov	r1, r9
 800ac12:	f7f5 fc9d 	bl	8000550 <__aeabi_dmul>
 800ac16:	2200      	movs	r2, #0
 800ac18:	ec41 0b19 	vmov	d9, r0, r1
 800ac1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac20:	4620      	mov	r0, r4
 800ac22:	4629      	mov	r1, r5
 800ac24:	f7f5 fadc 	bl	80001e0 <__aeabi_dsub>
 800ac28:	4602      	mov	r2, r0
 800ac2a:	460b      	mov	r3, r1
 800ac2c:	ec51 0b19 	vmov	r0, r1, d9
 800ac30:	f7f5 fdb8 	bl	80007a4 <__aeabi_ddiv>
 800ac34:	4632      	mov	r2, r6
 800ac36:	4604      	mov	r4, r0
 800ac38:	460d      	mov	r5, r1
 800ac3a:	463b      	mov	r3, r7
 800ac3c:	4640      	mov	r0, r8
 800ac3e:	4649      	mov	r1, r9
 800ac40:	f7f5 fc86 	bl	8000550 <__aeabi_dmul>
 800ac44:	4632      	mov	r2, r6
 800ac46:	463b      	mov	r3, r7
 800ac48:	f7f5 facc 	bl	80001e4 <__adddf3>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	460b      	mov	r3, r1
 800ac50:	4620      	mov	r0, r4
 800ac52:	4629      	mov	r1, r5
 800ac54:	f7f5 fac4 	bl	80001e0 <__aeabi_dsub>
 800ac58:	4642      	mov	r2, r8
 800ac5a:	464b      	mov	r3, r9
 800ac5c:	f7f5 fac0 	bl	80001e0 <__aeabi_dsub>
 800ac60:	460b      	mov	r3, r1
 800ac62:	4602      	mov	r2, r0
 800ac64:	493a      	ldr	r1, [pc, #232]	; (800ad50 <__ieee754_pow+0xa48>)
 800ac66:	2000      	movs	r0, #0
 800ac68:	f7f5 faba 	bl	80001e0 <__aeabi_dsub>
 800ac6c:	ec41 0b10 	vmov	d0, r0, r1
 800ac70:	ee10 3a90 	vmov	r3, s1
 800ac74:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ac78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac7c:	da2b      	bge.n	800acd6 <__ieee754_pow+0x9ce>
 800ac7e:	4650      	mov	r0, sl
 800ac80:	f001 f856 	bl	800bd30 <scalbn>
 800ac84:	ec51 0b10 	vmov	r0, r1, d0
 800ac88:	ec53 2b18 	vmov	r2, r3, d8
 800ac8c:	f7ff bbed 	b.w	800a46a <__ieee754_pow+0x162>
 800ac90:	4b30      	ldr	r3, [pc, #192]	; (800ad54 <__ieee754_pow+0xa4c>)
 800ac92:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ac96:	429e      	cmp	r6, r3
 800ac98:	f77f af0c 	ble.w	800aab4 <__ieee754_pow+0x7ac>
 800ac9c:	4b2e      	ldr	r3, [pc, #184]	; (800ad58 <__ieee754_pow+0xa50>)
 800ac9e:	440b      	add	r3, r1
 800aca0:	4303      	orrs	r3, r0
 800aca2:	d009      	beq.n	800acb8 <__ieee754_pow+0x9b0>
 800aca4:	ec51 0b18 	vmov	r0, r1, d8
 800aca8:	2200      	movs	r2, #0
 800acaa:	2300      	movs	r3, #0
 800acac:	f7f5 fec2 	bl	8000a34 <__aeabi_dcmplt>
 800acb0:	3800      	subs	r0, #0
 800acb2:	bf18      	it	ne
 800acb4:	2001      	movne	r0, #1
 800acb6:	e447      	b.n	800a548 <__ieee754_pow+0x240>
 800acb8:	4622      	mov	r2, r4
 800acba:	462b      	mov	r3, r5
 800acbc:	f7f5 fa90 	bl	80001e0 <__aeabi_dsub>
 800acc0:	4642      	mov	r2, r8
 800acc2:	464b      	mov	r3, r9
 800acc4:	f7f5 feca 	bl	8000a5c <__aeabi_dcmpge>
 800acc8:	2800      	cmp	r0, #0
 800acca:	f43f aef3 	beq.w	800aab4 <__ieee754_pow+0x7ac>
 800acce:	e7e9      	b.n	800aca4 <__ieee754_pow+0x99c>
 800acd0:	f04f 0a00 	mov.w	sl, #0
 800acd4:	e71a      	b.n	800ab0c <__ieee754_pow+0x804>
 800acd6:	ec51 0b10 	vmov	r0, r1, d0
 800acda:	4619      	mov	r1, r3
 800acdc:	e7d4      	b.n	800ac88 <__ieee754_pow+0x980>
 800acde:	491c      	ldr	r1, [pc, #112]	; (800ad50 <__ieee754_pow+0xa48>)
 800ace0:	2000      	movs	r0, #0
 800ace2:	f7ff bb30 	b.w	800a346 <__ieee754_pow+0x3e>
 800ace6:	2000      	movs	r0, #0
 800ace8:	2100      	movs	r1, #0
 800acea:	f7ff bb2c 	b.w	800a346 <__ieee754_pow+0x3e>
 800acee:	4630      	mov	r0, r6
 800acf0:	4639      	mov	r1, r7
 800acf2:	f7ff bb28 	b.w	800a346 <__ieee754_pow+0x3e>
 800acf6:	9204      	str	r2, [sp, #16]
 800acf8:	f7ff bb7a 	b.w	800a3f0 <__ieee754_pow+0xe8>
 800acfc:	2300      	movs	r3, #0
 800acfe:	f7ff bb64 	b.w	800a3ca <__ieee754_pow+0xc2>
 800ad02:	bf00      	nop
 800ad04:	f3af 8000 	nop.w
 800ad08:	00000000 	.word	0x00000000
 800ad0c:	3fe62e43 	.word	0x3fe62e43
 800ad10:	fefa39ef 	.word	0xfefa39ef
 800ad14:	3fe62e42 	.word	0x3fe62e42
 800ad18:	0ca86c39 	.word	0x0ca86c39
 800ad1c:	be205c61 	.word	0xbe205c61
 800ad20:	72bea4d0 	.word	0x72bea4d0
 800ad24:	3e663769 	.word	0x3e663769
 800ad28:	c5d26bf1 	.word	0xc5d26bf1
 800ad2c:	3ebbbd41 	.word	0x3ebbbd41
 800ad30:	af25de2c 	.word	0xaf25de2c
 800ad34:	3f11566a 	.word	0x3f11566a
 800ad38:	16bebd93 	.word	0x16bebd93
 800ad3c:	3f66c16c 	.word	0x3f66c16c
 800ad40:	5555553e 	.word	0x5555553e
 800ad44:	3fc55555 	.word	0x3fc55555
 800ad48:	3fe00000 	.word	0x3fe00000
 800ad4c:	000fffff 	.word	0x000fffff
 800ad50:	3ff00000 	.word	0x3ff00000
 800ad54:	4090cbff 	.word	0x4090cbff
 800ad58:	3f6f3400 	.word	0x3f6f3400
 800ad5c:	652b82fe 	.word	0x652b82fe
 800ad60:	3c971547 	.word	0x3c971547
 800ad64:	00000000 	.word	0x00000000

0800ad68 <__ieee754_rem_pio2>:
 800ad68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6c:	ed2d 8b02 	vpush	{d8}
 800ad70:	ec55 4b10 	vmov	r4, r5, d0
 800ad74:	4bca      	ldr	r3, [pc, #808]	; (800b0a0 <__ieee754_rem_pio2+0x338>)
 800ad76:	b08b      	sub	sp, #44	; 0x2c
 800ad78:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ad7c:	4598      	cmp	r8, r3
 800ad7e:	4682      	mov	sl, r0
 800ad80:	9502      	str	r5, [sp, #8]
 800ad82:	dc08      	bgt.n	800ad96 <__ieee754_rem_pio2+0x2e>
 800ad84:	2200      	movs	r2, #0
 800ad86:	2300      	movs	r3, #0
 800ad88:	ed80 0b00 	vstr	d0, [r0]
 800ad8c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ad90:	f04f 0b00 	mov.w	fp, #0
 800ad94:	e028      	b.n	800ade8 <__ieee754_rem_pio2+0x80>
 800ad96:	4bc3      	ldr	r3, [pc, #780]	; (800b0a4 <__ieee754_rem_pio2+0x33c>)
 800ad98:	4598      	cmp	r8, r3
 800ad9a:	dc78      	bgt.n	800ae8e <__ieee754_rem_pio2+0x126>
 800ad9c:	9b02      	ldr	r3, [sp, #8]
 800ad9e:	4ec2      	ldr	r6, [pc, #776]	; (800b0a8 <__ieee754_rem_pio2+0x340>)
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	ee10 0a10 	vmov	r0, s0
 800ada6:	a3b0      	add	r3, pc, #704	; (adr r3, 800b068 <__ieee754_rem_pio2+0x300>)
 800ada8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adac:	4629      	mov	r1, r5
 800adae:	dd39      	ble.n	800ae24 <__ieee754_rem_pio2+0xbc>
 800adb0:	f7f5 fa16 	bl	80001e0 <__aeabi_dsub>
 800adb4:	45b0      	cmp	r8, r6
 800adb6:	4604      	mov	r4, r0
 800adb8:	460d      	mov	r5, r1
 800adba:	d01b      	beq.n	800adf4 <__ieee754_rem_pio2+0x8c>
 800adbc:	a3ac      	add	r3, pc, #688	; (adr r3, 800b070 <__ieee754_rem_pio2+0x308>)
 800adbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc2:	f7f5 fa0d 	bl	80001e0 <__aeabi_dsub>
 800adc6:	4602      	mov	r2, r0
 800adc8:	460b      	mov	r3, r1
 800adca:	e9ca 2300 	strd	r2, r3, [sl]
 800adce:	4620      	mov	r0, r4
 800add0:	4629      	mov	r1, r5
 800add2:	f7f5 fa05 	bl	80001e0 <__aeabi_dsub>
 800add6:	a3a6      	add	r3, pc, #664	; (adr r3, 800b070 <__ieee754_rem_pio2+0x308>)
 800add8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800addc:	f7f5 fa00 	bl	80001e0 <__aeabi_dsub>
 800ade0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ade4:	f04f 0b01 	mov.w	fp, #1
 800ade8:	4658      	mov	r0, fp
 800adea:	b00b      	add	sp, #44	; 0x2c
 800adec:	ecbd 8b02 	vpop	{d8}
 800adf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf4:	a3a0      	add	r3, pc, #640	; (adr r3, 800b078 <__ieee754_rem_pio2+0x310>)
 800adf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfa:	f7f5 f9f1 	bl	80001e0 <__aeabi_dsub>
 800adfe:	a3a0      	add	r3, pc, #640	; (adr r3, 800b080 <__ieee754_rem_pio2+0x318>)
 800ae00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae04:	4604      	mov	r4, r0
 800ae06:	460d      	mov	r5, r1
 800ae08:	f7f5 f9ea 	bl	80001e0 <__aeabi_dsub>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	460b      	mov	r3, r1
 800ae10:	e9ca 2300 	strd	r2, r3, [sl]
 800ae14:	4620      	mov	r0, r4
 800ae16:	4629      	mov	r1, r5
 800ae18:	f7f5 f9e2 	bl	80001e0 <__aeabi_dsub>
 800ae1c:	a398      	add	r3, pc, #608	; (adr r3, 800b080 <__ieee754_rem_pio2+0x318>)
 800ae1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae22:	e7db      	b.n	800addc <__ieee754_rem_pio2+0x74>
 800ae24:	f7f5 f9de 	bl	80001e4 <__adddf3>
 800ae28:	45b0      	cmp	r8, r6
 800ae2a:	4604      	mov	r4, r0
 800ae2c:	460d      	mov	r5, r1
 800ae2e:	d016      	beq.n	800ae5e <__ieee754_rem_pio2+0xf6>
 800ae30:	a38f      	add	r3, pc, #572	; (adr r3, 800b070 <__ieee754_rem_pio2+0x308>)
 800ae32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae36:	f7f5 f9d5 	bl	80001e4 <__adddf3>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	e9ca 2300 	strd	r2, r3, [sl]
 800ae42:	4620      	mov	r0, r4
 800ae44:	4629      	mov	r1, r5
 800ae46:	f7f5 f9cb 	bl	80001e0 <__aeabi_dsub>
 800ae4a:	a389      	add	r3, pc, #548	; (adr r3, 800b070 <__ieee754_rem_pio2+0x308>)
 800ae4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae50:	f7f5 f9c8 	bl	80001e4 <__adddf3>
 800ae54:	f04f 3bff 	mov.w	fp, #4294967295
 800ae58:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ae5c:	e7c4      	b.n	800ade8 <__ieee754_rem_pio2+0x80>
 800ae5e:	a386      	add	r3, pc, #536	; (adr r3, 800b078 <__ieee754_rem_pio2+0x310>)
 800ae60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae64:	f7f5 f9be 	bl	80001e4 <__adddf3>
 800ae68:	a385      	add	r3, pc, #532	; (adr r3, 800b080 <__ieee754_rem_pio2+0x318>)
 800ae6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6e:	4604      	mov	r4, r0
 800ae70:	460d      	mov	r5, r1
 800ae72:	f7f5 f9b7 	bl	80001e4 <__adddf3>
 800ae76:	4602      	mov	r2, r0
 800ae78:	460b      	mov	r3, r1
 800ae7a:	e9ca 2300 	strd	r2, r3, [sl]
 800ae7e:	4620      	mov	r0, r4
 800ae80:	4629      	mov	r1, r5
 800ae82:	f7f5 f9ad 	bl	80001e0 <__aeabi_dsub>
 800ae86:	a37e      	add	r3, pc, #504	; (adr r3, 800b080 <__ieee754_rem_pio2+0x318>)
 800ae88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8c:	e7e0      	b.n	800ae50 <__ieee754_rem_pio2+0xe8>
 800ae8e:	4b87      	ldr	r3, [pc, #540]	; (800b0ac <__ieee754_rem_pio2+0x344>)
 800ae90:	4598      	cmp	r8, r3
 800ae92:	f300 80d9 	bgt.w	800b048 <__ieee754_rem_pio2+0x2e0>
 800ae96:	f000 ff2d 	bl	800bcf4 <fabs>
 800ae9a:	ec55 4b10 	vmov	r4, r5, d0
 800ae9e:	ee10 0a10 	vmov	r0, s0
 800aea2:	a379      	add	r3, pc, #484	; (adr r3, 800b088 <__ieee754_rem_pio2+0x320>)
 800aea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea8:	4629      	mov	r1, r5
 800aeaa:	f7f5 fb51 	bl	8000550 <__aeabi_dmul>
 800aeae:	4b80      	ldr	r3, [pc, #512]	; (800b0b0 <__ieee754_rem_pio2+0x348>)
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f7f5 f997 	bl	80001e4 <__adddf3>
 800aeb6:	f7f5 fdfb 	bl	8000ab0 <__aeabi_d2iz>
 800aeba:	4683      	mov	fp, r0
 800aebc:	f7f5 fade 	bl	800047c <__aeabi_i2d>
 800aec0:	4602      	mov	r2, r0
 800aec2:	460b      	mov	r3, r1
 800aec4:	ec43 2b18 	vmov	d8, r2, r3
 800aec8:	a367      	add	r3, pc, #412	; (adr r3, 800b068 <__ieee754_rem_pio2+0x300>)
 800aeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aece:	f7f5 fb3f 	bl	8000550 <__aeabi_dmul>
 800aed2:	4602      	mov	r2, r0
 800aed4:	460b      	mov	r3, r1
 800aed6:	4620      	mov	r0, r4
 800aed8:	4629      	mov	r1, r5
 800aeda:	f7f5 f981 	bl	80001e0 <__aeabi_dsub>
 800aede:	a364      	add	r3, pc, #400	; (adr r3, 800b070 <__ieee754_rem_pio2+0x308>)
 800aee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee4:	4606      	mov	r6, r0
 800aee6:	460f      	mov	r7, r1
 800aee8:	ec51 0b18 	vmov	r0, r1, d8
 800aeec:	f7f5 fb30 	bl	8000550 <__aeabi_dmul>
 800aef0:	f1bb 0f1f 	cmp.w	fp, #31
 800aef4:	4604      	mov	r4, r0
 800aef6:	460d      	mov	r5, r1
 800aef8:	dc0d      	bgt.n	800af16 <__ieee754_rem_pio2+0x1ae>
 800aefa:	4b6e      	ldr	r3, [pc, #440]	; (800b0b4 <__ieee754_rem_pio2+0x34c>)
 800aefc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800af00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af04:	4543      	cmp	r3, r8
 800af06:	d006      	beq.n	800af16 <__ieee754_rem_pio2+0x1ae>
 800af08:	4622      	mov	r2, r4
 800af0a:	462b      	mov	r3, r5
 800af0c:	4630      	mov	r0, r6
 800af0e:	4639      	mov	r1, r7
 800af10:	f7f5 f966 	bl	80001e0 <__aeabi_dsub>
 800af14:	e00f      	b.n	800af36 <__ieee754_rem_pio2+0x1ce>
 800af16:	462b      	mov	r3, r5
 800af18:	4622      	mov	r2, r4
 800af1a:	4630      	mov	r0, r6
 800af1c:	4639      	mov	r1, r7
 800af1e:	f7f5 f95f 	bl	80001e0 <__aeabi_dsub>
 800af22:	ea4f 5328 	mov.w	r3, r8, asr #20
 800af26:	9303      	str	r3, [sp, #12]
 800af28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800af2c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800af30:	f1b8 0f10 	cmp.w	r8, #16
 800af34:	dc02      	bgt.n	800af3c <__ieee754_rem_pio2+0x1d4>
 800af36:	e9ca 0100 	strd	r0, r1, [sl]
 800af3a:	e039      	b.n	800afb0 <__ieee754_rem_pio2+0x248>
 800af3c:	a34e      	add	r3, pc, #312	; (adr r3, 800b078 <__ieee754_rem_pio2+0x310>)
 800af3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af42:	ec51 0b18 	vmov	r0, r1, d8
 800af46:	f7f5 fb03 	bl	8000550 <__aeabi_dmul>
 800af4a:	4604      	mov	r4, r0
 800af4c:	460d      	mov	r5, r1
 800af4e:	4602      	mov	r2, r0
 800af50:	460b      	mov	r3, r1
 800af52:	4630      	mov	r0, r6
 800af54:	4639      	mov	r1, r7
 800af56:	f7f5 f943 	bl	80001e0 <__aeabi_dsub>
 800af5a:	4602      	mov	r2, r0
 800af5c:	460b      	mov	r3, r1
 800af5e:	4680      	mov	r8, r0
 800af60:	4689      	mov	r9, r1
 800af62:	4630      	mov	r0, r6
 800af64:	4639      	mov	r1, r7
 800af66:	f7f5 f93b 	bl	80001e0 <__aeabi_dsub>
 800af6a:	4622      	mov	r2, r4
 800af6c:	462b      	mov	r3, r5
 800af6e:	f7f5 f937 	bl	80001e0 <__aeabi_dsub>
 800af72:	a343      	add	r3, pc, #268	; (adr r3, 800b080 <__ieee754_rem_pio2+0x318>)
 800af74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af78:	4604      	mov	r4, r0
 800af7a:	460d      	mov	r5, r1
 800af7c:	ec51 0b18 	vmov	r0, r1, d8
 800af80:	f7f5 fae6 	bl	8000550 <__aeabi_dmul>
 800af84:	4622      	mov	r2, r4
 800af86:	462b      	mov	r3, r5
 800af88:	f7f5 f92a 	bl	80001e0 <__aeabi_dsub>
 800af8c:	4602      	mov	r2, r0
 800af8e:	460b      	mov	r3, r1
 800af90:	4604      	mov	r4, r0
 800af92:	460d      	mov	r5, r1
 800af94:	4640      	mov	r0, r8
 800af96:	4649      	mov	r1, r9
 800af98:	f7f5 f922 	bl	80001e0 <__aeabi_dsub>
 800af9c:	9a03      	ldr	r2, [sp, #12]
 800af9e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800afa2:	1ad3      	subs	r3, r2, r3
 800afa4:	2b31      	cmp	r3, #49	; 0x31
 800afa6:	dc24      	bgt.n	800aff2 <__ieee754_rem_pio2+0x28a>
 800afa8:	e9ca 0100 	strd	r0, r1, [sl]
 800afac:	4646      	mov	r6, r8
 800afae:	464f      	mov	r7, r9
 800afb0:	e9da 8900 	ldrd	r8, r9, [sl]
 800afb4:	4630      	mov	r0, r6
 800afb6:	4642      	mov	r2, r8
 800afb8:	464b      	mov	r3, r9
 800afba:	4639      	mov	r1, r7
 800afbc:	f7f5 f910 	bl	80001e0 <__aeabi_dsub>
 800afc0:	462b      	mov	r3, r5
 800afc2:	4622      	mov	r2, r4
 800afc4:	f7f5 f90c 	bl	80001e0 <__aeabi_dsub>
 800afc8:	9b02      	ldr	r3, [sp, #8]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800afd0:	f6bf af0a 	bge.w	800ade8 <__ieee754_rem_pio2+0x80>
 800afd4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800afd8:	f8ca 3004 	str.w	r3, [sl, #4]
 800afdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800afe0:	f8ca 8000 	str.w	r8, [sl]
 800afe4:	f8ca 0008 	str.w	r0, [sl, #8]
 800afe8:	f8ca 300c 	str.w	r3, [sl, #12]
 800afec:	f1cb 0b00 	rsb	fp, fp, #0
 800aff0:	e6fa      	b.n	800ade8 <__ieee754_rem_pio2+0x80>
 800aff2:	a327      	add	r3, pc, #156	; (adr r3, 800b090 <__ieee754_rem_pio2+0x328>)
 800aff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff8:	ec51 0b18 	vmov	r0, r1, d8
 800affc:	f7f5 faa8 	bl	8000550 <__aeabi_dmul>
 800b000:	4604      	mov	r4, r0
 800b002:	460d      	mov	r5, r1
 800b004:	4602      	mov	r2, r0
 800b006:	460b      	mov	r3, r1
 800b008:	4640      	mov	r0, r8
 800b00a:	4649      	mov	r1, r9
 800b00c:	f7f5 f8e8 	bl	80001e0 <__aeabi_dsub>
 800b010:	4602      	mov	r2, r0
 800b012:	460b      	mov	r3, r1
 800b014:	4606      	mov	r6, r0
 800b016:	460f      	mov	r7, r1
 800b018:	4640      	mov	r0, r8
 800b01a:	4649      	mov	r1, r9
 800b01c:	f7f5 f8e0 	bl	80001e0 <__aeabi_dsub>
 800b020:	4622      	mov	r2, r4
 800b022:	462b      	mov	r3, r5
 800b024:	f7f5 f8dc 	bl	80001e0 <__aeabi_dsub>
 800b028:	a31b      	add	r3, pc, #108	; (adr r3, 800b098 <__ieee754_rem_pio2+0x330>)
 800b02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02e:	4604      	mov	r4, r0
 800b030:	460d      	mov	r5, r1
 800b032:	ec51 0b18 	vmov	r0, r1, d8
 800b036:	f7f5 fa8b 	bl	8000550 <__aeabi_dmul>
 800b03a:	4622      	mov	r2, r4
 800b03c:	462b      	mov	r3, r5
 800b03e:	f7f5 f8cf 	bl	80001e0 <__aeabi_dsub>
 800b042:	4604      	mov	r4, r0
 800b044:	460d      	mov	r5, r1
 800b046:	e75f      	b.n	800af08 <__ieee754_rem_pio2+0x1a0>
 800b048:	4b1b      	ldr	r3, [pc, #108]	; (800b0b8 <__ieee754_rem_pio2+0x350>)
 800b04a:	4598      	cmp	r8, r3
 800b04c:	dd36      	ble.n	800b0bc <__ieee754_rem_pio2+0x354>
 800b04e:	ee10 2a10 	vmov	r2, s0
 800b052:	462b      	mov	r3, r5
 800b054:	4620      	mov	r0, r4
 800b056:	4629      	mov	r1, r5
 800b058:	f7f5 f8c2 	bl	80001e0 <__aeabi_dsub>
 800b05c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b060:	e9ca 0100 	strd	r0, r1, [sl]
 800b064:	e694      	b.n	800ad90 <__ieee754_rem_pio2+0x28>
 800b066:	bf00      	nop
 800b068:	54400000 	.word	0x54400000
 800b06c:	3ff921fb 	.word	0x3ff921fb
 800b070:	1a626331 	.word	0x1a626331
 800b074:	3dd0b461 	.word	0x3dd0b461
 800b078:	1a600000 	.word	0x1a600000
 800b07c:	3dd0b461 	.word	0x3dd0b461
 800b080:	2e037073 	.word	0x2e037073
 800b084:	3ba3198a 	.word	0x3ba3198a
 800b088:	6dc9c883 	.word	0x6dc9c883
 800b08c:	3fe45f30 	.word	0x3fe45f30
 800b090:	2e000000 	.word	0x2e000000
 800b094:	3ba3198a 	.word	0x3ba3198a
 800b098:	252049c1 	.word	0x252049c1
 800b09c:	397b839a 	.word	0x397b839a
 800b0a0:	3fe921fb 	.word	0x3fe921fb
 800b0a4:	4002d97b 	.word	0x4002d97b
 800b0a8:	3ff921fb 	.word	0x3ff921fb
 800b0ac:	413921fb 	.word	0x413921fb
 800b0b0:	3fe00000 	.word	0x3fe00000
 800b0b4:	0800beb0 	.word	0x0800beb0
 800b0b8:	7fefffff 	.word	0x7fefffff
 800b0bc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800b0c0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800b0c4:	ee10 0a10 	vmov	r0, s0
 800b0c8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800b0cc:	ee10 6a10 	vmov	r6, s0
 800b0d0:	460f      	mov	r7, r1
 800b0d2:	f7f5 fced 	bl	8000ab0 <__aeabi_d2iz>
 800b0d6:	f7f5 f9d1 	bl	800047c <__aeabi_i2d>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	460b      	mov	r3, r1
 800b0de:	4630      	mov	r0, r6
 800b0e0:	4639      	mov	r1, r7
 800b0e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b0e6:	f7f5 f87b 	bl	80001e0 <__aeabi_dsub>
 800b0ea:	4b23      	ldr	r3, [pc, #140]	; (800b178 <__ieee754_rem_pio2+0x410>)
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	f7f5 fa2f 	bl	8000550 <__aeabi_dmul>
 800b0f2:	460f      	mov	r7, r1
 800b0f4:	4606      	mov	r6, r0
 800b0f6:	f7f5 fcdb 	bl	8000ab0 <__aeabi_d2iz>
 800b0fa:	f7f5 f9bf 	bl	800047c <__aeabi_i2d>
 800b0fe:	4602      	mov	r2, r0
 800b100:	460b      	mov	r3, r1
 800b102:	4630      	mov	r0, r6
 800b104:	4639      	mov	r1, r7
 800b106:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b10a:	f7f5 f869 	bl	80001e0 <__aeabi_dsub>
 800b10e:	4b1a      	ldr	r3, [pc, #104]	; (800b178 <__ieee754_rem_pio2+0x410>)
 800b110:	2200      	movs	r2, #0
 800b112:	f7f5 fa1d 	bl	8000550 <__aeabi_dmul>
 800b116:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b11a:	ad04      	add	r5, sp, #16
 800b11c:	f04f 0803 	mov.w	r8, #3
 800b120:	46a9      	mov	r9, r5
 800b122:	2600      	movs	r6, #0
 800b124:	2700      	movs	r7, #0
 800b126:	4632      	mov	r2, r6
 800b128:	463b      	mov	r3, r7
 800b12a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800b12e:	46c3      	mov	fp, r8
 800b130:	3d08      	subs	r5, #8
 800b132:	f108 38ff 	add.w	r8, r8, #4294967295
 800b136:	f7f5 fc73 	bl	8000a20 <__aeabi_dcmpeq>
 800b13a:	2800      	cmp	r0, #0
 800b13c:	d1f3      	bne.n	800b126 <__ieee754_rem_pio2+0x3be>
 800b13e:	4b0f      	ldr	r3, [pc, #60]	; (800b17c <__ieee754_rem_pio2+0x414>)
 800b140:	9301      	str	r3, [sp, #4]
 800b142:	2302      	movs	r3, #2
 800b144:	9300      	str	r3, [sp, #0]
 800b146:	4622      	mov	r2, r4
 800b148:	465b      	mov	r3, fp
 800b14a:	4651      	mov	r1, sl
 800b14c:	4648      	mov	r0, r9
 800b14e:	f000 f993 	bl	800b478 <__kernel_rem_pio2>
 800b152:	9b02      	ldr	r3, [sp, #8]
 800b154:	2b00      	cmp	r3, #0
 800b156:	4683      	mov	fp, r0
 800b158:	f6bf ae46 	bge.w	800ade8 <__ieee754_rem_pio2+0x80>
 800b15c:	e9da 2100 	ldrd	r2, r1, [sl]
 800b160:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b164:	e9ca 2300 	strd	r2, r3, [sl]
 800b168:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800b16c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b170:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800b174:	e73a      	b.n	800afec <__ieee754_rem_pio2+0x284>
 800b176:	bf00      	nop
 800b178:	41700000 	.word	0x41700000
 800b17c:	0800bf30 	.word	0x0800bf30

0800b180 <__ieee754_sqrt>:
 800b180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b184:	ec55 4b10 	vmov	r4, r5, d0
 800b188:	4e55      	ldr	r6, [pc, #340]	; (800b2e0 <__ieee754_sqrt+0x160>)
 800b18a:	43ae      	bics	r6, r5
 800b18c:	ee10 0a10 	vmov	r0, s0
 800b190:	ee10 3a10 	vmov	r3, s0
 800b194:	462a      	mov	r2, r5
 800b196:	4629      	mov	r1, r5
 800b198:	d110      	bne.n	800b1bc <__ieee754_sqrt+0x3c>
 800b19a:	ee10 2a10 	vmov	r2, s0
 800b19e:	462b      	mov	r3, r5
 800b1a0:	f7f5 f9d6 	bl	8000550 <__aeabi_dmul>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	4629      	mov	r1, r5
 800b1ac:	f7f5 f81a 	bl	80001e4 <__adddf3>
 800b1b0:	4604      	mov	r4, r0
 800b1b2:	460d      	mov	r5, r1
 800b1b4:	ec45 4b10 	vmov	d0, r4, r5
 800b1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1bc:	2d00      	cmp	r5, #0
 800b1be:	dc10      	bgt.n	800b1e2 <__ieee754_sqrt+0x62>
 800b1c0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b1c4:	4330      	orrs	r0, r6
 800b1c6:	d0f5      	beq.n	800b1b4 <__ieee754_sqrt+0x34>
 800b1c8:	b15d      	cbz	r5, 800b1e2 <__ieee754_sqrt+0x62>
 800b1ca:	ee10 2a10 	vmov	r2, s0
 800b1ce:	462b      	mov	r3, r5
 800b1d0:	ee10 0a10 	vmov	r0, s0
 800b1d4:	f7f5 f804 	bl	80001e0 <__aeabi_dsub>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	460b      	mov	r3, r1
 800b1dc:	f7f5 fae2 	bl	80007a4 <__aeabi_ddiv>
 800b1e0:	e7e6      	b.n	800b1b0 <__ieee754_sqrt+0x30>
 800b1e2:	1512      	asrs	r2, r2, #20
 800b1e4:	d074      	beq.n	800b2d0 <__ieee754_sqrt+0x150>
 800b1e6:	07d4      	lsls	r4, r2, #31
 800b1e8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b1ec:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b1f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b1f4:	bf5e      	ittt	pl
 800b1f6:	0fda      	lsrpl	r2, r3, #31
 800b1f8:	005b      	lslpl	r3, r3, #1
 800b1fa:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b1fe:	2400      	movs	r4, #0
 800b200:	0fda      	lsrs	r2, r3, #31
 800b202:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b206:	107f      	asrs	r7, r7, #1
 800b208:	005b      	lsls	r3, r3, #1
 800b20a:	2516      	movs	r5, #22
 800b20c:	4620      	mov	r0, r4
 800b20e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b212:	1886      	adds	r6, r0, r2
 800b214:	428e      	cmp	r6, r1
 800b216:	bfde      	ittt	le
 800b218:	1b89      	suble	r1, r1, r6
 800b21a:	18b0      	addle	r0, r6, r2
 800b21c:	18a4      	addle	r4, r4, r2
 800b21e:	0049      	lsls	r1, r1, #1
 800b220:	3d01      	subs	r5, #1
 800b222:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b226:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b22a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b22e:	d1f0      	bne.n	800b212 <__ieee754_sqrt+0x92>
 800b230:	462a      	mov	r2, r5
 800b232:	f04f 0e20 	mov.w	lr, #32
 800b236:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b23a:	4281      	cmp	r1, r0
 800b23c:	eb06 0c05 	add.w	ip, r6, r5
 800b240:	dc02      	bgt.n	800b248 <__ieee754_sqrt+0xc8>
 800b242:	d113      	bne.n	800b26c <__ieee754_sqrt+0xec>
 800b244:	459c      	cmp	ip, r3
 800b246:	d811      	bhi.n	800b26c <__ieee754_sqrt+0xec>
 800b248:	f1bc 0f00 	cmp.w	ip, #0
 800b24c:	eb0c 0506 	add.w	r5, ip, r6
 800b250:	da43      	bge.n	800b2da <__ieee754_sqrt+0x15a>
 800b252:	2d00      	cmp	r5, #0
 800b254:	db41      	blt.n	800b2da <__ieee754_sqrt+0x15a>
 800b256:	f100 0801 	add.w	r8, r0, #1
 800b25a:	1a09      	subs	r1, r1, r0
 800b25c:	459c      	cmp	ip, r3
 800b25e:	bf88      	it	hi
 800b260:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b264:	eba3 030c 	sub.w	r3, r3, ip
 800b268:	4432      	add	r2, r6
 800b26a:	4640      	mov	r0, r8
 800b26c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b270:	f1be 0e01 	subs.w	lr, lr, #1
 800b274:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b278:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b27c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b280:	d1db      	bne.n	800b23a <__ieee754_sqrt+0xba>
 800b282:	430b      	orrs	r3, r1
 800b284:	d006      	beq.n	800b294 <__ieee754_sqrt+0x114>
 800b286:	1c50      	adds	r0, r2, #1
 800b288:	bf13      	iteet	ne
 800b28a:	3201      	addne	r2, #1
 800b28c:	3401      	addeq	r4, #1
 800b28e:	4672      	moveq	r2, lr
 800b290:	f022 0201 	bicne.w	r2, r2, #1
 800b294:	1063      	asrs	r3, r4, #1
 800b296:	0852      	lsrs	r2, r2, #1
 800b298:	07e1      	lsls	r1, r4, #31
 800b29a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b29e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b2a2:	bf48      	it	mi
 800b2a4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b2a8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b2ac:	4614      	mov	r4, r2
 800b2ae:	e781      	b.n	800b1b4 <__ieee754_sqrt+0x34>
 800b2b0:	0ad9      	lsrs	r1, r3, #11
 800b2b2:	3815      	subs	r0, #21
 800b2b4:	055b      	lsls	r3, r3, #21
 800b2b6:	2900      	cmp	r1, #0
 800b2b8:	d0fa      	beq.n	800b2b0 <__ieee754_sqrt+0x130>
 800b2ba:	02cd      	lsls	r5, r1, #11
 800b2bc:	d50a      	bpl.n	800b2d4 <__ieee754_sqrt+0x154>
 800b2be:	f1c2 0420 	rsb	r4, r2, #32
 800b2c2:	fa23 f404 	lsr.w	r4, r3, r4
 800b2c6:	1e55      	subs	r5, r2, #1
 800b2c8:	4093      	lsls	r3, r2
 800b2ca:	4321      	orrs	r1, r4
 800b2cc:	1b42      	subs	r2, r0, r5
 800b2ce:	e78a      	b.n	800b1e6 <__ieee754_sqrt+0x66>
 800b2d0:	4610      	mov	r0, r2
 800b2d2:	e7f0      	b.n	800b2b6 <__ieee754_sqrt+0x136>
 800b2d4:	0049      	lsls	r1, r1, #1
 800b2d6:	3201      	adds	r2, #1
 800b2d8:	e7ef      	b.n	800b2ba <__ieee754_sqrt+0x13a>
 800b2da:	4680      	mov	r8, r0
 800b2dc:	e7bd      	b.n	800b25a <__ieee754_sqrt+0xda>
 800b2de:	bf00      	nop
 800b2e0:	7ff00000 	.word	0x7ff00000
 800b2e4:	00000000 	.word	0x00000000

0800b2e8 <__kernel_cos>:
 800b2e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ec:	ec57 6b10 	vmov	r6, r7, d0
 800b2f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b2f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b2f8:	ed8d 1b00 	vstr	d1, [sp]
 800b2fc:	da07      	bge.n	800b30e <__kernel_cos+0x26>
 800b2fe:	ee10 0a10 	vmov	r0, s0
 800b302:	4639      	mov	r1, r7
 800b304:	f7f5 fbd4 	bl	8000ab0 <__aeabi_d2iz>
 800b308:	2800      	cmp	r0, #0
 800b30a:	f000 8088 	beq.w	800b41e <__kernel_cos+0x136>
 800b30e:	4632      	mov	r2, r6
 800b310:	463b      	mov	r3, r7
 800b312:	4630      	mov	r0, r6
 800b314:	4639      	mov	r1, r7
 800b316:	f7f5 f91b 	bl	8000550 <__aeabi_dmul>
 800b31a:	4b51      	ldr	r3, [pc, #324]	; (800b460 <__kernel_cos+0x178>)
 800b31c:	2200      	movs	r2, #0
 800b31e:	4604      	mov	r4, r0
 800b320:	460d      	mov	r5, r1
 800b322:	f7f5 f915 	bl	8000550 <__aeabi_dmul>
 800b326:	a340      	add	r3, pc, #256	; (adr r3, 800b428 <__kernel_cos+0x140>)
 800b328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32c:	4682      	mov	sl, r0
 800b32e:	468b      	mov	fp, r1
 800b330:	4620      	mov	r0, r4
 800b332:	4629      	mov	r1, r5
 800b334:	f7f5 f90c 	bl	8000550 <__aeabi_dmul>
 800b338:	a33d      	add	r3, pc, #244	; (adr r3, 800b430 <__kernel_cos+0x148>)
 800b33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33e:	f7f4 ff51 	bl	80001e4 <__adddf3>
 800b342:	4622      	mov	r2, r4
 800b344:	462b      	mov	r3, r5
 800b346:	f7f5 f903 	bl	8000550 <__aeabi_dmul>
 800b34a:	a33b      	add	r3, pc, #236	; (adr r3, 800b438 <__kernel_cos+0x150>)
 800b34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b350:	f7f4 ff46 	bl	80001e0 <__aeabi_dsub>
 800b354:	4622      	mov	r2, r4
 800b356:	462b      	mov	r3, r5
 800b358:	f7f5 f8fa 	bl	8000550 <__aeabi_dmul>
 800b35c:	a338      	add	r3, pc, #224	; (adr r3, 800b440 <__kernel_cos+0x158>)
 800b35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b362:	f7f4 ff3f 	bl	80001e4 <__adddf3>
 800b366:	4622      	mov	r2, r4
 800b368:	462b      	mov	r3, r5
 800b36a:	f7f5 f8f1 	bl	8000550 <__aeabi_dmul>
 800b36e:	a336      	add	r3, pc, #216	; (adr r3, 800b448 <__kernel_cos+0x160>)
 800b370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b374:	f7f4 ff34 	bl	80001e0 <__aeabi_dsub>
 800b378:	4622      	mov	r2, r4
 800b37a:	462b      	mov	r3, r5
 800b37c:	f7f5 f8e8 	bl	8000550 <__aeabi_dmul>
 800b380:	a333      	add	r3, pc, #204	; (adr r3, 800b450 <__kernel_cos+0x168>)
 800b382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b386:	f7f4 ff2d 	bl	80001e4 <__adddf3>
 800b38a:	4622      	mov	r2, r4
 800b38c:	462b      	mov	r3, r5
 800b38e:	f7f5 f8df 	bl	8000550 <__aeabi_dmul>
 800b392:	4622      	mov	r2, r4
 800b394:	462b      	mov	r3, r5
 800b396:	f7f5 f8db 	bl	8000550 <__aeabi_dmul>
 800b39a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b39e:	4604      	mov	r4, r0
 800b3a0:	460d      	mov	r5, r1
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	4639      	mov	r1, r7
 800b3a6:	f7f5 f8d3 	bl	8000550 <__aeabi_dmul>
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	4629      	mov	r1, r5
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	f7f4 ff15 	bl	80001e0 <__aeabi_dsub>
 800b3b6:	4b2b      	ldr	r3, [pc, #172]	; (800b464 <__kernel_cos+0x17c>)
 800b3b8:	4598      	cmp	r8, r3
 800b3ba:	4606      	mov	r6, r0
 800b3bc:	460f      	mov	r7, r1
 800b3be:	dc10      	bgt.n	800b3e2 <__kernel_cos+0xfa>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	4650      	mov	r0, sl
 800b3c6:	4659      	mov	r1, fp
 800b3c8:	f7f4 ff0a 	bl	80001e0 <__aeabi_dsub>
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	4926      	ldr	r1, [pc, #152]	; (800b468 <__kernel_cos+0x180>)
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	2000      	movs	r0, #0
 800b3d4:	f7f4 ff04 	bl	80001e0 <__aeabi_dsub>
 800b3d8:	ec41 0b10 	vmov	d0, r0, r1
 800b3dc:	b003      	add	sp, #12
 800b3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3e2:	4b22      	ldr	r3, [pc, #136]	; (800b46c <__kernel_cos+0x184>)
 800b3e4:	4920      	ldr	r1, [pc, #128]	; (800b468 <__kernel_cos+0x180>)
 800b3e6:	4598      	cmp	r8, r3
 800b3e8:	bfcc      	ite	gt
 800b3ea:	4d21      	ldrgt	r5, [pc, #132]	; (800b470 <__kernel_cos+0x188>)
 800b3ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b3f0:	2400      	movs	r4, #0
 800b3f2:	4622      	mov	r2, r4
 800b3f4:	462b      	mov	r3, r5
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	f7f4 fef2 	bl	80001e0 <__aeabi_dsub>
 800b3fc:	4622      	mov	r2, r4
 800b3fe:	4680      	mov	r8, r0
 800b400:	4689      	mov	r9, r1
 800b402:	462b      	mov	r3, r5
 800b404:	4650      	mov	r0, sl
 800b406:	4659      	mov	r1, fp
 800b408:	f7f4 feea 	bl	80001e0 <__aeabi_dsub>
 800b40c:	4632      	mov	r2, r6
 800b40e:	463b      	mov	r3, r7
 800b410:	f7f4 fee6 	bl	80001e0 <__aeabi_dsub>
 800b414:	4602      	mov	r2, r0
 800b416:	460b      	mov	r3, r1
 800b418:	4640      	mov	r0, r8
 800b41a:	4649      	mov	r1, r9
 800b41c:	e7da      	b.n	800b3d4 <__kernel_cos+0xec>
 800b41e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b458 <__kernel_cos+0x170>
 800b422:	e7db      	b.n	800b3dc <__kernel_cos+0xf4>
 800b424:	f3af 8000 	nop.w
 800b428:	be8838d4 	.word	0xbe8838d4
 800b42c:	bda8fae9 	.word	0xbda8fae9
 800b430:	bdb4b1c4 	.word	0xbdb4b1c4
 800b434:	3e21ee9e 	.word	0x3e21ee9e
 800b438:	809c52ad 	.word	0x809c52ad
 800b43c:	3e927e4f 	.word	0x3e927e4f
 800b440:	19cb1590 	.word	0x19cb1590
 800b444:	3efa01a0 	.word	0x3efa01a0
 800b448:	16c15177 	.word	0x16c15177
 800b44c:	3f56c16c 	.word	0x3f56c16c
 800b450:	5555554c 	.word	0x5555554c
 800b454:	3fa55555 	.word	0x3fa55555
 800b458:	00000000 	.word	0x00000000
 800b45c:	3ff00000 	.word	0x3ff00000
 800b460:	3fe00000 	.word	0x3fe00000
 800b464:	3fd33332 	.word	0x3fd33332
 800b468:	3ff00000 	.word	0x3ff00000
 800b46c:	3fe90000 	.word	0x3fe90000
 800b470:	3fd20000 	.word	0x3fd20000
 800b474:	00000000 	.word	0x00000000

0800b478 <__kernel_rem_pio2>:
 800b478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b47c:	ed2d 8b02 	vpush	{d8}
 800b480:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b484:	f112 0f14 	cmn.w	r2, #20
 800b488:	9308      	str	r3, [sp, #32]
 800b48a:	9101      	str	r1, [sp, #4]
 800b48c:	4bc4      	ldr	r3, [pc, #784]	; (800b7a0 <__kernel_rem_pio2+0x328>)
 800b48e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b490:	900b      	str	r0, [sp, #44]	; 0x2c
 800b492:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b496:	9302      	str	r3, [sp, #8]
 800b498:	9b08      	ldr	r3, [sp, #32]
 800b49a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b49e:	bfa8      	it	ge
 800b4a0:	1ed4      	subge	r4, r2, #3
 800b4a2:	9306      	str	r3, [sp, #24]
 800b4a4:	bfb2      	itee	lt
 800b4a6:	2400      	movlt	r4, #0
 800b4a8:	2318      	movge	r3, #24
 800b4aa:	fb94 f4f3 	sdivge	r4, r4, r3
 800b4ae:	f06f 0317 	mvn.w	r3, #23
 800b4b2:	fb04 3303 	mla	r3, r4, r3, r3
 800b4b6:	eb03 0a02 	add.w	sl, r3, r2
 800b4ba:	9b02      	ldr	r3, [sp, #8]
 800b4bc:	9a06      	ldr	r2, [sp, #24]
 800b4be:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800b790 <__kernel_rem_pio2+0x318>
 800b4c2:	eb03 0802 	add.w	r8, r3, r2
 800b4c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b4c8:	1aa7      	subs	r7, r4, r2
 800b4ca:	ae22      	add	r6, sp, #136	; 0x88
 800b4cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b4d0:	2500      	movs	r5, #0
 800b4d2:	4545      	cmp	r5, r8
 800b4d4:	dd13      	ble.n	800b4fe <__kernel_rem_pio2+0x86>
 800b4d6:	9b08      	ldr	r3, [sp, #32]
 800b4d8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800b790 <__kernel_rem_pio2+0x318>
 800b4dc:	aa22      	add	r2, sp, #136	; 0x88
 800b4de:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b4e2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b4e6:	f04f 0800 	mov.w	r8, #0
 800b4ea:	9b02      	ldr	r3, [sp, #8]
 800b4ec:	4598      	cmp	r8, r3
 800b4ee:	dc2f      	bgt.n	800b550 <__kernel_rem_pio2+0xd8>
 800b4f0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b4f4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800b4f8:	462f      	mov	r7, r5
 800b4fa:	2600      	movs	r6, #0
 800b4fc:	e01b      	b.n	800b536 <__kernel_rem_pio2+0xbe>
 800b4fe:	42ef      	cmn	r7, r5
 800b500:	d407      	bmi.n	800b512 <__kernel_rem_pio2+0x9a>
 800b502:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b506:	f7f4 ffb9 	bl	800047c <__aeabi_i2d>
 800b50a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b50e:	3501      	adds	r5, #1
 800b510:	e7df      	b.n	800b4d2 <__kernel_rem_pio2+0x5a>
 800b512:	ec51 0b18 	vmov	r0, r1, d8
 800b516:	e7f8      	b.n	800b50a <__kernel_rem_pio2+0x92>
 800b518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b51c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b520:	f7f5 f816 	bl	8000550 <__aeabi_dmul>
 800b524:	4602      	mov	r2, r0
 800b526:	460b      	mov	r3, r1
 800b528:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b52c:	f7f4 fe5a 	bl	80001e4 <__adddf3>
 800b530:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b534:	3601      	adds	r6, #1
 800b536:	9b06      	ldr	r3, [sp, #24]
 800b538:	429e      	cmp	r6, r3
 800b53a:	f1a7 0708 	sub.w	r7, r7, #8
 800b53e:	ddeb      	ble.n	800b518 <__kernel_rem_pio2+0xa0>
 800b540:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b544:	f108 0801 	add.w	r8, r8, #1
 800b548:	ecab 7b02 	vstmia	fp!, {d7}
 800b54c:	3508      	adds	r5, #8
 800b54e:	e7cc      	b.n	800b4ea <__kernel_rem_pio2+0x72>
 800b550:	9b02      	ldr	r3, [sp, #8]
 800b552:	aa0e      	add	r2, sp, #56	; 0x38
 800b554:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b558:	930d      	str	r3, [sp, #52]	; 0x34
 800b55a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b55c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b560:	9c02      	ldr	r4, [sp, #8]
 800b562:	930c      	str	r3, [sp, #48]	; 0x30
 800b564:	00e3      	lsls	r3, r4, #3
 800b566:	930a      	str	r3, [sp, #40]	; 0x28
 800b568:	ab9a      	add	r3, sp, #616	; 0x268
 800b56a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b56e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b572:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800b576:	ab72      	add	r3, sp, #456	; 0x1c8
 800b578:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800b57c:	46c3      	mov	fp, r8
 800b57e:	46a1      	mov	r9, r4
 800b580:	f1b9 0f00 	cmp.w	r9, #0
 800b584:	f1a5 0508 	sub.w	r5, r5, #8
 800b588:	dc77      	bgt.n	800b67a <__kernel_rem_pio2+0x202>
 800b58a:	ec47 6b10 	vmov	d0, r6, r7
 800b58e:	4650      	mov	r0, sl
 800b590:	f000 fbce 	bl	800bd30 <scalbn>
 800b594:	ec57 6b10 	vmov	r6, r7, d0
 800b598:	2200      	movs	r2, #0
 800b59a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b59e:	ee10 0a10 	vmov	r0, s0
 800b5a2:	4639      	mov	r1, r7
 800b5a4:	f7f4 ffd4 	bl	8000550 <__aeabi_dmul>
 800b5a8:	ec41 0b10 	vmov	d0, r0, r1
 800b5ac:	f7fe faa4 	bl	8009af8 <floor>
 800b5b0:	4b7c      	ldr	r3, [pc, #496]	; (800b7a4 <__kernel_rem_pio2+0x32c>)
 800b5b2:	ec51 0b10 	vmov	r0, r1, d0
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f7f4 ffca 	bl	8000550 <__aeabi_dmul>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	460b      	mov	r3, r1
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	4639      	mov	r1, r7
 800b5c4:	f7f4 fe0c 	bl	80001e0 <__aeabi_dsub>
 800b5c8:	460f      	mov	r7, r1
 800b5ca:	4606      	mov	r6, r0
 800b5cc:	f7f5 fa70 	bl	8000ab0 <__aeabi_d2iz>
 800b5d0:	9004      	str	r0, [sp, #16]
 800b5d2:	f7f4 ff53 	bl	800047c <__aeabi_i2d>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	460b      	mov	r3, r1
 800b5da:	4630      	mov	r0, r6
 800b5dc:	4639      	mov	r1, r7
 800b5de:	f7f4 fdff 	bl	80001e0 <__aeabi_dsub>
 800b5e2:	f1ba 0f00 	cmp.w	sl, #0
 800b5e6:	4606      	mov	r6, r0
 800b5e8:	460f      	mov	r7, r1
 800b5ea:	dd6d      	ble.n	800b6c8 <__kernel_rem_pio2+0x250>
 800b5ec:	1e62      	subs	r2, r4, #1
 800b5ee:	ab0e      	add	r3, sp, #56	; 0x38
 800b5f0:	9d04      	ldr	r5, [sp, #16]
 800b5f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b5f6:	f1ca 0118 	rsb	r1, sl, #24
 800b5fa:	fa40 f301 	asr.w	r3, r0, r1
 800b5fe:	441d      	add	r5, r3
 800b600:	408b      	lsls	r3, r1
 800b602:	1ac0      	subs	r0, r0, r3
 800b604:	ab0e      	add	r3, sp, #56	; 0x38
 800b606:	9504      	str	r5, [sp, #16]
 800b608:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b60c:	f1ca 0317 	rsb	r3, sl, #23
 800b610:	fa40 fb03 	asr.w	fp, r0, r3
 800b614:	f1bb 0f00 	cmp.w	fp, #0
 800b618:	dd65      	ble.n	800b6e6 <__kernel_rem_pio2+0x26e>
 800b61a:	9b04      	ldr	r3, [sp, #16]
 800b61c:	2200      	movs	r2, #0
 800b61e:	3301      	adds	r3, #1
 800b620:	9304      	str	r3, [sp, #16]
 800b622:	4615      	mov	r5, r2
 800b624:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b628:	4294      	cmp	r4, r2
 800b62a:	f300 809c 	bgt.w	800b766 <__kernel_rem_pio2+0x2ee>
 800b62e:	f1ba 0f00 	cmp.w	sl, #0
 800b632:	dd07      	ble.n	800b644 <__kernel_rem_pio2+0x1cc>
 800b634:	f1ba 0f01 	cmp.w	sl, #1
 800b638:	f000 80c0 	beq.w	800b7bc <__kernel_rem_pio2+0x344>
 800b63c:	f1ba 0f02 	cmp.w	sl, #2
 800b640:	f000 80c6 	beq.w	800b7d0 <__kernel_rem_pio2+0x358>
 800b644:	f1bb 0f02 	cmp.w	fp, #2
 800b648:	d14d      	bne.n	800b6e6 <__kernel_rem_pio2+0x26e>
 800b64a:	4632      	mov	r2, r6
 800b64c:	463b      	mov	r3, r7
 800b64e:	4956      	ldr	r1, [pc, #344]	; (800b7a8 <__kernel_rem_pio2+0x330>)
 800b650:	2000      	movs	r0, #0
 800b652:	f7f4 fdc5 	bl	80001e0 <__aeabi_dsub>
 800b656:	4606      	mov	r6, r0
 800b658:	460f      	mov	r7, r1
 800b65a:	2d00      	cmp	r5, #0
 800b65c:	d043      	beq.n	800b6e6 <__kernel_rem_pio2+0x26e>
 800b65e:	4650      	mov	r0, sl
 800b660:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800b798 <__kernel_rem_pio2+0x320>
 800b664:	f000 fb64 	bl	800bd30 <scalbn>
 800b668:	4630      	mov	r0, r6
 800b66a:	4639      	mov	r1, r7
 800b66c:	ec53 2b10 	vmov	r2, r3, d0
 800b670:	f7f4 fdb6 	bl	80001e0 <__aeabi_dsub>
 800b674:	4606      	mov	r6, r0
 800b676:	460f      	mov	r7, r1
 800b678:	e035      	b.n	800b6e6 <__kernel_rem_pio2+0x26e>
 800b67a:	4b4c      	ldr	r3, [pc, #304]	; (800b7ac <__kernel_rem_pio2+0x334>)
 800b67c:	2200      	movs	r2, #0
 800b67e:	4630      	mov	r0, r6
 800b680:	4639      	mov	r1, r7
 800b682:	f7f4 ff65 	bl	8000550 <__aeabi_dmul>
 800b686:	f7f5 fa13 	bl	8000ab0 <__aeabi_d2iz>
 800b68a:	f7f4 fef7 	bl	800047c <__aeabi_i2d>
 800b68e:	4602      	mov	r2, r0
 800b690:	460b      	mov	r3, r1
 800b692:	ec43 2b18 	vmov	d8, r2, r3
 800b696:	4b46      	ldr	r3, [pc, #280]	; (800b7b0 <__kernel_rem_pio2+0x338>)
 800b698:	2200      	movs	r2, #0
 800b69a:	f7f4 ff59 	bl	8000550 <__aeabi_dmul>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	4630      	mov	r0, r6
 800b6a4:	4639      	mov	r1, r7
 800b6a6:	f7f4 fd9b 	bl	80001e0 <__aeabi_dsub>
 800b6aa:	f7f5 fa01 	bl	8000ab0 <__aeabi_d2iz>
 800b6ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b6b2:	f84b 0b04 	str.w	r0, [fp], #4
 800b6b6:	ec51 0b18 	vmov	r0, r1, d8
 800b6ba:	f7f4 fd93 	bl	80001e4 <__adddf3>
 800b6be:	f109 39ff 	add.w	r9, r9, #4294967295
 800b6c2:	4606      	mov	r6, r0
 800b6c4:	460f      	mov	r7, r1
 800b6c6:	e75b      	b.n	800b580 <__kernel_rem_pio2+0x108>
 800b6c8:	d106      	bne.n	800b6d8 <__kernel_rem_pio2+0x260>
 800b6ca:	1e63      	subs	r3, r4, #1
 800b6cc:	aa0e      	add	r2, sp, #56	; 0x38
 800b6ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b6d2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800b6d6:	e79d      	b.n	800b614 <__kernel_rem_pio2+0x19c>
 800b6d8:	4b36      	ldr	r3, [pc, #216]	; (800b7b4 <__kernel_rem_pio2+0x33c>)
 800b6da:	2200      	movs	r2, #0
 800b6dc:	f7f5 f9be 	bl	8000a5c <__aeabi_dcmpge>
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	d13d      	bne.n	800b760 <__kernel_rem_pio2+0x2e8>
 800b6e4:	4683      	mov	fp, r0
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	4639      	mov	r1, r7
 800b6ee:	f7f5 f997 	bl	8000a20 <__aeabi_dcmpeq>
 800b6f2:	2800      	cmp	r0, #0
 800b6f4:	f000 80c0 	beq.w	800b878 <__kernel_rem_pio2+0x400>
 800b6f8:	1e65      	subs	r5, r4, #1
 800b6fa:	462b      	mov	r3, r5
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	9902      	ldr	r1, [sp, #8]
 800b700:	428b      	cmp	r3, r1
 800b702:	da6c      	bge.n	800b7de <__kernel_rem_pio2+0x366>
 800b704:	2a00      	cmp	r2, #0
 800b706:	f000 8089 	beq.w	800b81c <__kernel_rem_pio2+0x3a4>
 800b70a:	ab0e      	add	r3, sp, #56	; 0x38
 800b70c:	f1aa 0a18 	sub.w	sl, sl, #24
 800b710:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b714:	2b00      	cmp	r3, #0
 800b716:	f000 80ad 	beq.w	800b874 <__kernel_rem_pio2+0x3fc>
 800b71a:	4650      	mov	r0, sl
 800b71c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800b798 <__kernel_rem_pio2+0x320>
 800b720:	f000 fb06 	bl	800bd30 <scalbn>
 800b724:	ab9a      	add	r3, sp, #616	; 0x268
 800b726:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b72a:	ec57 6b10 	vmov	r6, r7, d0
 800b72e:	00ec      	lsls	r4, r5, #3
 800b730:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800b734:	46aa      	mov	sl, r5
 800b736:	f1ba 0f00 	cmp.w	sl, #0
 800b73a:	f280 80d6 	bge.w	800b8ea <__kernel_rem_pio2+0x472>
 800b73e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800b790 <__kernel_rem_pio2+0x318>
 800b742:	462e      	mov	r6, r5
 800b744:	2e00      	cmp	r6, #0
 800b746:	f2c0 8104 	blt.w	800b952 <__kernel_rem_pio2+0x4da>
 800b74a:	ab72      	add	r3, sp, #456	; 0x1c8
 800b74c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b750:	f8df a064 	ldr.w	sl, [pc, #100]	; 800b7b8 <__kernel_rem_pio2+0x340>
 800b754:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b758:	f04f 0800 	mov.w	r8, #0
 800b75c:	1baf      	subs	r7, r5, r6
 800b75e:	e0ea      	b.n	800b936 <__kernel_rem_pio2+0x4be>
 800b760:	f04f 0b02 	mov.w	fp, #2
 800b764:	e759      	b.n	800b61a <__kernel_rem_pio2+0x1a2>
 800b766:	f8d8 3000 	ldr.w	r3, [r8]
 800b76a:	b955      	cbnz	r5, 800b782 <__kernel_rem_pio2+0x30a>
 800b76c:	b123      	cbz	r3, 800b778 <__kernel_rem_pio2+0x300>
 800b76e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b772:	f8c8 3000 	str.w	r3, [r8]
 800b776:	2301      	movs	r3, #1
 800b778:	3201      	adds	r2, #1
 800b77a:	f108 0804 	add.w	r8, r8, #4
 800b77e:	461d      	mov	r5, r3
 800b780:	e752      	b.n	800b628 <__kernel_rem_pio2+0x1b0>
 800b782:	1acb      	subs	r3, r1, r3
 800b784:	f8c8 3000 	str.w	r3, [r8]
 800b788:	462b      	mov	r3, r5
 800b78a:	e7f5      	b.n	800b778 <__kernel_rem_pio2+0x300>
 800b78c:	f3af 8000 	nop.w
	...
 800b79c:	3ff00000 	.word	0x3ff00000
 800b7a0:	0800c078 	.word	0x0800c078
 800b7a4:	40200000 	.word	0x40200000
 800b7a8:	3ff00000 	.word	0x3ff00000
 800b7ac:	3e700000 	.word	0x3e700000
 800b7b0:	41700000 	.word	0x41700000
 800b7b4:	3fe00000 	.word	0x3fe00000
 800b7b8:	0800c038 	.word	0x0800c038
 800b7bc:	1e62      	subs	r2, r4, #1
 800b7be:	ab0e      	add	r3, sp, #56	; 0x38
 800b7c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b7c8:	a90e      	add	r1, sp, #56	; 0x38
 800b7ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b7ce:	e739      	b.n	800b644 <__kernel_rem_pio2+0x1cc>
 800b7d0:	1e62      	subs	r2, r4, #1
 800b7d2:	ab0e      	add	r3, sp, #56	; 0x38
 800b7d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b7dc:	e7f4      	b.n	800b7c8 <__kernel_rem_pio2+0x350>
 800b7de:	a90e      	add	r1, sp, #56	; 0x38
 800b7e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	430a      	orrs	r2, r1
 800b7e8:	e789      	b.n	800b6fe <__kernel_rem_pio2+0x286>
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b7f0:	2900      	cmp	r1, #0
 800b7f2:	d0fa      	beq.n	800b7ea <__kernel_rem_pio2+0x372>
 800b7f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7f6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800b7fa:	446a      	add	r2, sp
 800b7fc:	3a98      	subs	r2, #152	; 0x98
 800b7fe:	920a      	str	r2, [sp, #40]	; 0x28
 800b800:	9a08      	ldr	r2, [sp, #32]
 800b802:	18e3      	adds	r3, r4, r3
 800b804:	18a5      	adds	r5, r4, r2
 800b806:	aa22      	add	r2, sp, #136	; 0x88
 800b808:	f104 0801 	add.w	r8, r4, #1
 800b80c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b810:	9304      	str	r3, [sp, #16]
 800b812:	9b04      	ldr	r3, [sp, #16]
 800b814:	4543      	cmp	r3, r8
 800b816:	da04      	bge.n	800b822 <__kernel_rem_pio2+0x3aa>
 800b818:	461c      	mov	r4, r3
 800b81a:	e6a3      	b.n	800b564 <__kernel_rem_pio2+0xec>
 800b81c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b81e:	2301      	movs	r3, #1
 800b820:	e7e4      	b.n	800b7ec <__kernel_rem_pio2+0x374>
 800b822:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b824:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b828:	f7f4 fe28 	bl	800047c <__aeabi_i2d>
 800b82c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b832:	46ab      	mov	fp, r5
 800b834:	461c      	mov	r4, r3
 800b836:	f04f 0900 	mov.w	r9, #0
 800b83a:	2600      	movs	r6, #0
 800b83c:	2700      	movs	r7, #0
 800b83e:	9b06      	ldr	r3, [sp, #24]
 800b840:	4599      	cmp	r9, r3
 800b842:	dd06      	ble.n	800b852 <__kernel_rem_pio2+0x3da>
 800b844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b846:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b84a:	f108 0801 	add.w	r8, r8, #1
 800b84e:	930a      	str	r3, [sp, #40]	; 0x28
 800b850:	e7df      	b.n	800b812 <__kernel_rem_pio2+0x39a>
 800b852:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b856:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b85a:	f7f4 fe79 	bl	8000550 <__aeabi_dmul>
 800b85e:	4602      	mov	r2, r0
 800b860:	460b      	mov	r3, r1
 800b862:	4630      	mov	r0, r6
 800b864:	4639      	mov	r1, r7
 800b866:	f7f4 fcbd 	bl	80001e4 <__adddf3>
 800b86a:	f109 0901 	add.w	r9, r9, #1
 800b86e:	4606      	mov	r6, r0
 800b870:	460f      	mov	r7, r1
 800b872:	e7e4      	b.n	800b83e <__kernel_rem_pio2+0x3c6>
 800b874:	3d01      	subs	r5, #1
 800b876:	e748      	b.n	800b70a <__kernel_rem_pio2+0x292>
 800b878:	ec47 6b10 	vmov	d0, r6, r7
 800b87c:	f1ca 0000 	rsb	r0, sl, #0
 800b880:	f000 fa56 	bl	800bd30 <scalbn>
 800b884:	ec57 6b10 	vmov	r6, r7, d0
 800b888:	4ba0      	ldr	r3, [pc, #640]	; (800bb0c <__kernel_rem_pio2+0x694>)
 800b88a:	ee10 0a10 	vmov	r0, s0
 800b88e:	2200      	movs	r2, #0
 800b890:	4639      	mov	r1, r7
 800b892:	f7f5 f8e3 	bl	8000a5c <__aeabi_dcmpge>
 800b896:	b1f8      	cbz	r0, 800b8d8 <__kernel_rem_pio2+0x460>
 800b898:	4b9d      	ldr	r3, [pc, #628]	; (800bb10 <__kernel_rem_pio2+0x698>)
 800b89a:	2200      	movs	r2, #0
 800b89c:	4630      	mov	r0, r6
 800b89e:	4639      	mov	r1, r7
 800b8a0:	f7f4 fe56 	bl	8000550 <__aeabi_dmul>
 800b8a4:	f7f5 f904 	bl	8000ab0 <__aeabi_d2iz>
 800b8a8:	4680      	mov	r8, r0
 800b8aa:	f7f4 fde7 	bl	800047c <__aeabi_i2d>
 800b8ae:	4b97      	ldr	r3, [pc, #604]	; (800bb0c <__kernel_rem_pio2+0x694>)
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f7f4 fe4d 	bl	8000550 <__aeabi_dmul>
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	4602      	mov	r2, r0
 800b8ba:	4639      	mov	r1, r7
 800b8bc:	4630      	mov	r0, r6
 800b8be:	f7f4 fc8f 	bl	80001e0 <__aeabi_dsub>
 800b8c2:	f7f5 f8f5 	bl	8000ab0 <__aeabi_d2iz>
 800b8c6:	1c65      	adds	r5, r4, #1
 800b8c8:	ab0e      	add	r3, sp, #56	; 0x38
 800b8ca:	f10a 0a18 	add.w	sl, sl, #24
 800b8ce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b8d2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b8d6:	e720      	b.n	800b71a <__kernel_rem_pio2+0x2a2>
 800b8d8:	4630      	mov	r0, r6
 800b8da:	4639      	mov	r1, r7
 800b8dc:	f7f5 f8e8 	bl	8000ab0 <__aeabi_d2iz>
 800b8e0:	ab0e      	add	r3, sp, #56	; 0x38
 800b8e2:	4625      	mov	r5, r4
 800b8e4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b8e8:	e717      	b.n	800b71a <__kernel_rem_pio2+0x2a2>
 800b8ea:	ab0e      	add	r3, sp, #56	; 0x38
 800b8ec:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b8f0:	f7f4 fdc4 	bl	800047c <__aeabi_i2d>
 800b8f4:	4632      	mov	r2, r6
 800b8f6:	463b      	mov	r3, r7
 800b8f8:	f7f4 fe2a 	bl	8000550 <__aeabi_dmul>
 800b8fc:	4b84      	ldr	r3, [pc, #528]	; (800bb10 <__kernel_rem_pio2+0x698>)
 800b8fe:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b902:	2200      	movs	r2, #0
 800b904:	4630      	mov	r0, r6
 800b906:	4639      	mov	r1, r7
 800b908:	f7f4 fe22 	bl	8000550 <__aeabi_dmul>
 800b90c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b910:	4606      	mov	r6, r0
 800b912:	460f      	mov	r7, r1
 800b914:	e70f      	b.n	800b736 <__kernel_rem_pio2+0x2be>
 800b916:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b91a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b91e:	f7f4 fe17 	bl	8000550 <__aeabi_dmul>
 800b922:	4602      	mov	r2, r0
 800b924:	460b      	mov	r3, r1
 800b926:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b92a:	f7f4 fc5b 	bl	80001e4 <__adddf3>
 800b92e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b932:	f108 0801 	add.w	r8, r8, #1
 800b936:	9b02      	ldr	r3, [sp, #8]
 800b938:	4598      	cmp	r8, r3
 800b93a:	dc01      	bgt.n	800b940 <__kernel_rem_pio2+0x4c8>
 800b93c:	45b8      	cmp	r8, r7
 800b93e:	ddea      	ble.n	800b916 <__kernel_rem_pio2+0x49e>
 800b940:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b944:	ab4a      	add	r3, sp, #296	; 0x128
 800b946:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b94a:	ed87 7b00 	vstr	d7, [r7]
 800b94e:	3e01      	subs	r6, #1
 800b950:	e6f8      	b.n	800b744 <__kernel_rem_pio2+0x2cc>
 800b952:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b954:	2b02      	cmp	r3, #2
 800b956:	dc0b      	bgt.n	800b970 <__kernel_rem_pio2+0x4f8>
 800b958:	2b00      	cmp	r3, #0
 800b95a:	dc35      	bgt.n	800b9c8 <__kernel_rem_pio2+0x550>
 800b95c:	d059      	beq.n	800ba12 <__kernel_rem_pio2+0x59a>
 800b95e:	9b04      	ldr	r3, [sp, #16]
 800b960:	f003 0007 	and.w	r0, r3, #7
 800b964:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b968:	ecbd 8b02 	vpop	{d8}
 800b96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b970:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b972:	2b03      	cmp	r3, #3
 800b974:	d1f3      	bne.n	800b95e <__kernel_rem_pio2+0x4e6>
 800b976:	ab4a      	add	r3, sp, #296	; 0x128
 800b978:	4423      	add	r3, r4
 800b97a:	9306      	str	r3, [sp, #24]
 800b97c:	461c      	mov	r4, r3
 800b97e:	469a      	mov	sl, r3
 800b980:	9502      	str	r5, [sp, #8]
 800b982:	9b02      	ldr	r3, [sp, #8]
 800b984:	2b00      	cmp	r3, #0
 800b986:	f1aa 0a08 	sub.w	sl, sl, #8
 800b98a:	dc6b      	bgt.n	800ba64 <__kernel_rem_pio2+0x5ec>
 800b98c:	46aa      	mov	sl, r5
 800b98e:	f1ba 0f01 	cmp.w	sl, #1
 800b992:	f1a4 0408 	sub.w	r4, r4, #8
 800b996:	f300 8085 	bgt.w	800baa4 <__kernel_rem_pio2+0x62c>
 800b99a:	9c06      	ldr	r4, [sp, #24]
 800b99c:	2000      	movs	r0, #0
 800b99e:	3408      	adds	r4, #8
 800b9a0:	2100      	movs	r1, #0
 800b9a2:	2d01      	cmp	r5, #1
 800b9a4:	f300 809d 	bgt.w	800bae2 <__kernel_rem_pio2+0x66a>
 800b9a8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b9ac:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b9b0:	f1bb 0f00 	cmp.w	fp, #0
 800b9b4:	f040 809b 	bne.w	800baee <__kernel_rem_pio2+0x676>
 800b9b8:	9b01      	ldr	r3, [sp, #4]
 800b9ba:	e9c3 5600 	strd	r5, r6, [r3]
 800b9be:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b9c2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b9c6:	e7ca      	b.n	800b95e <__kernel_rem_pio2+0x4e6>
 800b9c8:	3408      	adds	r4, #8
 800b9ca:	ab4a      	add	r3, sp, #296	; 0x128
 800b9cc:	441c      	add	r4, r3
 800b9ce:	462e      	mov	r6, r5
 800b9d0:	2000      	movs	r0, #0
 800b9d2:	2100      	movs	r1, #0
 800b9d4:	2e00      	cmp	r6, #0
 800b9d6:	da36      	bge.n	800ba46 <__kernel_rem_pio2+0x5ce>
 800b9d8:	f1bb 0f00 	cmp.w	fp, #0
 800b9dc:	d039      	beq.n	800ba52 <__kernel_rem_pio2+0x5da>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9e4:	9c01      	ldr	r4, [sp, #4]
 800b9e6:	e9c4 2300 	strd	r2, r3, [r4]
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b9f2:	f7f4 fbf5 	bl	80001e0 <__aeabi_dsub>
 800b9f6:	ae4c      	add	r6, sp, #304	; 0x130
 800b9f8:	2401      	movs	r4, #1
 800b9fa:	42a5      	cmp	r5, r4
 800b9fc:	da2c      	bge.n	800ba58 <__kernel_rem_pio2+0x5e0>
 800b9fe:	f1bb 0f00 	cmp.w	fp, #0
 800ba02:	d002      	beq.n	800ba0a <__kernel_rem_pio2+0x592>
 800ba04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba08:	4619      	mov	r1, r3
 800ba0a:	9b01      	ldr	r3, [sp, #4]
 800ba0c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ba10:	e7a5      	b.n	800b95e <__kernel_rem_pio2+0x4e6>
 800ba12:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800ba16:	eb0d 0403 	add.w	r4, sp, r3
 800ba1a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ba1e:	2000      	movs	r0, #0
 800ba20:	2100      	movs	r1, #0
 800ba22:	2d00      	cmp	r5, #0
 800ba24:	da09      	bge.n	800ba3a <__kernel_rem_pio2+0x5c2>
 800ba26:	f1bb 0f00 	cmp.w	fp, #0
 800ba2a:	d002      	beq.n	800ba32 <__kernel_rem_pio2+0x5ba>
 800ba2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba30:	4619      	mov	r1, r3
 800ba32:	9b01      	ldr	r3, [sp, #4]
 800ba34:	e9c3 0100 	strd	r0, r1, [r3]
 800ba38:	e791      	b.n	800b95e <__kernel_rem_pio2+0x4e6>
 800ba3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ba3e:	f7f4 fbd1 	bl	80001e4 <__adddf3>
 800ba42:	3d01      	subs	r5, #1
 800ba44:	e7ed      	b.n	800ba22 <__kernel_rem_pio2+0x5aa>
 800ba46:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ba4a:	f7f4 fbcb 	bl	80001e4 <__adddf3>
 800ba4e:	3e01      	subs	r6, #1
 800ba50:	e7c0      	b.n	800b9d4 <__kernel_rem_pio2+0x55c>
 800ba52:	4602      	mov	r2, r0
 800ba54:	460b      	mov	r3, r1
 800ba56:	e7c5      	b.n	800b9e4 <__kernel_rem_pio2+0x56c>
 800ba58:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ba5c:	f7f4 fbc2 	bl	80001e4 <__adddf3>
 800ba60:	3401      	adds	r4, #1
 800ba62:	e7ca      	b.n	800b9fa <__kernel_rem_pio2+0x582>
 800ba64:	e9da 8900 	ldrd	r8, r9, [sl]
 800ba68:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ba6c:	9b02      	ldr	r3, [sp, #8]
 800ba6e:	3b01      	subs	r3, #1
 800ba70:	9302      	str	r3, [sp, #8]
 800ba72:	4632      	mov	r2, r6
 800ba74:	463b      	mov	r3, r7
 800ba76:	4640      	mov	r0, r8
 800ba78:	4649      	mov	r1, r9
 800ba7a:	f7f4 fbb3 	bl	80001e4 <__adddf3>
 800ba7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ba82:	4602      	mov	r2, r0
 800ba84:	460b      	mov	r3, r1
 800ba86:	4640      	mov	r0, r8
 800ba88:	4649      	mov	r1, r9
 800ba8a:	f7f4 fba9 	bl	80001e0 <__aeabi_dsub>
 800ba8e:	4632      	mov	r2, r6
 800ba90:	463b      	mov	r3, r7
 800ba92:	f7f4 fba7 	bl	80001e4 <__adddf3>
 800ba96:	ed9d 7b08 	vldr	d7, [sp, #32]
 800ba9a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ba9e:	ed8a 7b00 	vstr	d7, [sl]
 800baa2:	e76e      	b.n	800b982 <__kernel_rem_pio2+0x50a>
 800baa4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800baa8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800baac:	4640      	mov	r0, r8
 800baae:	4632      	mov	r2, r6
 800bab0:	463b      	mov	r3, r7
 800bab2:	4649      	mov	r1, r9
 800bab4:	f7f4 fb96 	bl	80001e4 <__adddf3>
 800bab8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800babc:	4602      	mov	r2, r0
 800babe:	460b      	mov	r3, r1
 800bac0:	4640      	mov	r0, r8
 800bac2:	4649      	mov	r1, r9
 800bac4:	f7f4 fb8c 	bl	80001e0 <__aeabi_dsub>
 800bac8:	4632      	mov	r2, r6
 800baca:	463b      	mov	r3, r7
 800bacc:	f7f4 fb8a 	bl	80001e4 <__adddf3>
 800bad0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bad4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bad8:	ed84 7b00 	vstr	d7, [r4]
 800badc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bae0:	e755      	b.n	800b98e <__kernel_rem_pio2+0x516>
 800bae2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bae6:	f7f4 fb7d 	bl	80001e4 <__adddf3>
 800baea:	3d01      	subs	r5, #1
 800baec:	e759      	b.n	800b9a2 <__kernel_rem_pio2+0x52a>
 800baee:	9b01      	ldr	r3, [sp, #4]
 800baf0:	9a01      	ldr	r2, [sp, #4]
 800baf2:	601d      	str	r5, [r3, #0]
 800baf4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800baf8:	605c      	str	r4, [r3, #4]
 800bafa:	609f      	str	r7, [r3, #8]
 800bafc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800bb00:	60d3      	str	r3, [r2, #12]
 800bb02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb06:	6110      	str	r0, [r2, #16]
 800bb08:	6153      	str	r3, [r2, #20]
 800bb0a:	e728      	b.n	800b95e <__kernel_rem_pio2+0x4e6>
 800bb0c:	41700000 	.word	0x41700000
 800bb10:	3e700000 	.word	0x3e700000
 800bb14:	00000000 	.word	0x00000000

0800bb18 <__kernel_sin>:
 800bb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb1c:	ed2d 8b04 	vpush	{d8-d9}
 800bb20:	eeb0 8a41 	vmov.f32	s16, s2
 800bb24:	eef0 8a61 	vmov.f32	s17, s3
 800bb28:	ec55 4b10 	vmov	r4, r5, d0
 800bb2c:	b083      	sub	sp, #12
 800bb2e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bb32:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bb36:	9001      	str	r0, [sp, #4]
 800bb38:	da06      	bge.n	800bb48 <__kernel_sin+0x30>
 800bb3a:	ee10 0a10 	vmov	r0, s0
 800bb3e:	4629      	mov	r1, r5
 800bb40:	f7f4 ffb6 	bl	8000ab0 <__aeabi_d2iz>
 800bb44:	2800      	cmp	r0, #0
 800bb46:	d051      	beq.n	800bbec <__kernel_sin+0xd4>
 800bb48:	4622      	mov	r2, r4
 800bb4a:	462b      	mov	r3, r5
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	4629      	mov	r1, r5
 800bb50:	f7f4 fcfe 	bl	8000550 <__aeabi_dmul>
 800bb54:	4682      	mov	sl, r0
 800bb56:	468b      	mov	fp, r1
 800bb58:	4602      	mov	r2, r0
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	4629      	mov	r1, r5
 800bb60:	f7f4 fcf6 	bl	8000550 <__aeabi_dmul>
 800bb64:	a341      	add	r3, pc, #260	; (adr r3, 800bc6c <__kernel_sin+0x154>)
 800bb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6a:	4680      	mov	r8, r0
 800bb6c:	4689      	mov	r9, r1
 800bb6e:	4650      	mov	r0, sl
 800bb70:	4659      	mov	r1, fp
 800bb72:	f7f4 fced 	bl	8000550 <__aeabi_dmul>
 800bb76:	a33f      	add	r3, pc, #252	; (adr r3, 800bc74 <__kernel_sin+0x15c>)
 800bb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7c:	f7f4 fb30 	bl	80001e0 <__aeabi_dsub>
 800bb80:	4652      	mov	r2, sl
 800bb82:	465b      	mov	r3, fp
 800bb84:	f7f4 fce4 	bl	8000550 <__aeabi_dmul>
 800bb88:	a33c      	add	r3, pc, #240	; (adr r3, 800bc7c <__kernel_sin+0x164>)
 800bb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8e:	f7f4 fb29 	bl	80001e4 <__adddf3>
 800bb92:	4652      	mov	r2, sl
 800bb94:	465b      	mov	r3, fp
 800bb96:	f7f4 fcdb 	bl	8000550 <__aeabi_dmul>
 800bb9a:	a33a      	add	r3, pc, #232	; (adr r3, 800bc84 <__kernel_sin+0x16c>)
 800bb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba0:	f7f4 fb1e 	bl	80001e0 <__aeabi_dsub>
 800bba4:	4652      	mov	r2, sl
 800bba6:	465b      	mov	r3, fp
 800bba8:	f7f4 fcd2 	bl	8000550 <__aeabi_dmul>
 800bbac:	a337      	add	r3, pc, #220	; (adr r3, 800bc8c <__kernel_sin+0x174>)
 800bbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb2:	f7f4 fb17 	bl	80001e4 <__adddf3>
 800bbb6:	9b01      	ldr	r3, [sp, #4]
 800bbb8:	4606      	mov	r6, r0
 800bbba:	460f      	mov	r7, r1
 800bbbc:	b9eb      	cbnz	r3, 800bbfa <__kernel_sin+0xe2>
 800bbbe:	4602      	mov	r2, r0
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	4650      	mov	r0, sl
 800bbc4:	4659      	mov	r1, fp
 800bbc6:	f7f4 fcc3 	bl	8000550 <__aeabi_dmul>
 800bbca:	a325      	add	r3, pc, #148	; (adr r3, 800bc60 <__kernel_sin+0x148>)
 800bbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd0:	f7f4 fb06 	bl	80001e0 <__aeabi_dsub>
 800bbd4:	4642      	mov	r2, r8
 800bbd6:	464b      	mov	r3, r9
 800bbd8:	f7f4 fcba 	bl	8000550 <__aeabi_dmul>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	460b      	mov	r3, r1
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	4629      	mov	r1, r5
 800bbe4:	f7f4 fafe 	bl	80001e4 <__adddf3>
 800bbe8:	4604      	mov	r4, r0
 800bbea:	460d      	mov	r5, r1
 800bbec:	ec45 4b10 	vmov	d0, r4, r5
 800bbf0:	b003      	add	sp, #12
 800bbf2:	ecbd 8b04 	vpop	{d8-d9}
 800bbf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbfa:	4b1b      	ldr	r3, [pc, #108]	; (800bc68 <__kernel_sin+0x150>)
 800bbfc:	ec51 0b18 	vmov	r0, r1, d8
 800bc00:	2200      	movs	r2, #0
 800bc02:	f7f4 fca5 	bl	8000550 <__aeabi_dmul>
 800bc06:	4632      	mov	r2, r6
 800bc08:	ec41 0b19 	vmov	d9, r0, r1
 800bc0c:	463b      	mov	r3, r7
 800bc0e:	4640      	mov	r0, r8
 800bc10:	4649      	mov	r1, r9
 800bc12:	f7f4 fc9d 	bl	8000550 <__aeabi_dmul>
 800bc16:	4602      	mov	r2, r0
 800bc18:	460b      	mov	r3, r1
 800bc1a:	ec51 0b19 	vmov	r0, r1, d9
 800bc1e:	f7f4 fadf 	bl	80001e0 <__aeabi_dsub>
 800bc22:	4652      	mov	r2, sl
 800bc24:	465b      	mov	r3, fp
 800bc26:	f7f4 fc93 	bl	8000550 <__aeabi_dmul>
 800bc2a:	ec53 2b18 	vmov	r2, r3, d8
 800bc2e:	f7f4 fad7 	bl	80001e0 <__aeabi_dsub>
 800bc32:	a30b      	add	r3, pc, #44	; (adr r3, 800bc60 <__kernel_sin+0x148>)
 800bc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc38:	4606      	mov	r6, r0
 800bc3a:	460f      	mov	r7, r1
 800bc3c:	4640      	mov	r0, r8
 800bc3e:	4649      	mov	r1, r9
 800bc40:	f7f4 fc86 	bl	8000550 <__aeabi_dmul>
 800bc44:	4602      	mov	r2, r0
 800bc46:	460b      	mov	r3, r1
 800bc48:	4630      	mov	r0, r6
 800bc4a:	4639      	mov	r1, r7
 800bc4c:	f7f4 faca 	bl	80001e4 <__adddf3>
 800bc50:	4602      	mov	r2, r0
 800bc52:	460b      	mov	r3, r1
 800bc54:	4620      	mov	r0, r4
 800bc56:	4629      	mov	r1, r5
 800bc58:	f7f4 fac2 	bl	80001e0 <__aeabi_dsub>
 800bc5c:	e7c4      	b.n	800bbe8 <__kernel_sin+0xd0>
 800bc5e:	bf00      	nop
 800bc60:	55555549 	.word	0x55555549
 800bc64:	3fc55555 	.word	0x3fc55555
 800bc68:	3fe00000 	.word	0x3fe00000
 800bc6c:	5acfd57c 	.word	0x5acfd57c
 800bc70:	3de5d93a 	.word	0x3de5d93a
 800bc74:	8a2b9ceb 	.word	0x8a2b9ceb
 800bc78:	3e5ae5e6 	.word	0x3e5ae5e6
 800bc7c:	57b1fe7d 	.word	0x57b1fe7d
 800bc80:	3ec71de3 	.word	0x3ec71de3
 800bc84:	19c161d5 	.word	0x19c161d5
 800bc88:	3f2a01a0 	.word	0x3f2a01a0
 800bc8c:	1110f8a6 	.word	0x1110f8a6
 800bc90:	3f811111 	.word	0x3f811111

0800bc94 <with_errno>:
 800bc94:	b570      	push	{r4, r5, r6, lr}
 800bc96:	4604      	mov	r4, r0
 800bc98:	460d      	mov	r5, r1
 800bc9a:	4616      	mov	r6, r2
 800bc9c:	f7fd fd72 	bl	8009784 <__errno>
 800bca0:	4629      	mov	r1, r5
 800bca2:	6006      	str	r6, [r0, #0]
 800bca4:	4620      	mov	r0, r4
 800bca6:	bd70      	pop	{r4, r5, r6, pc}

0800bca8 <xflow>:
 800bca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcaa:	4614      	mov	r4, r2
 800bcac:	461d      	mov	r5, r3
 800bcae:	b108      	cbz	r0, 800bcb4 <xflow+0xc>
 800bcb0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bcb4:	e9cd 2300 	strd	r2, r3, [sp]
 800bcb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	4629      	mov	r1, r5
 800bcc0:	f7f4 fc46 	bl	8000550 <__aeabi_dmul>
 800bcc4:	2222      	movs	r2, #34	; 0x22
 800bcc6:	b003      	add	sp, #12
 800bcc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bccc:	f7ff bfe2 	b.w	800bc94 <with_errno>

0800bcd0 <__math_uflow>:
 800bcd0:	b508      	push	{r3, lr}
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bcd8:	f7ff ffe6 	bl	800bca8 <xflow>
 800bcdc:	ec41 0b10 	vmov	d0, r0, r1
 800bce0:	bd08      	pop	{r3, pc}

0800bce2 <__math_oflow>:
 800bce2:	b508      	push	{r3, lr}
 800bce4:	2200      	movs	r2, #0
 800bce6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800bcea:	f7ff ffdd 	bl	800bca8 <xflow>
 800bcee:	ec41 0b10 	vmov	d0, r0, r1
 800bcf2:	bd08      	pop	{r3, pc}

0800bcf4 <fabs>:
 800bcf4:	ec51 0b10 	vmov	r0, r1, d0
 800bcf8:	ee10 2a10 	vmov	r2, s0
 800bcfc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bd00:	ec43 2b10 	vmov	d0, r2, r3
 800bd04:	4770      	bx	lr

0800bd06 <finite>:
 800bd06:	b082      	sub	sp, #8
 800bd08:	ed8d 0b00 	vstr	d0, [sp]
 800bd0c:	9801      	ldr	r0, [sp, #4]
 800bd0e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bd12:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bd16:	0fc0      	lsrs	r0, r0, #31
 800bd18:	b002      	add	sp, #8
 800bd1a:	4770      	bx	lr
 800bd1c:	0000      	movs	r0, r0
	...

0800bd20 <nan>:
 800bd20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bd28 <nan+0x8>
 800bd24:	4770      	bx	lr
 800bd26:	bf00      	nop
 800bd28:	00000000 	.word	0x00000000
 800bd2c:	7ff80000 	.word	0x7ff80000

0800bd30 <scalbn>:
 800bd30:	b570      	push	{r4, r5, r6, lr}
 800bd32:	ec55 4b10 	vmov	r4, r5, d0
 800bd36:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bd3a:	4606      	mov	r6, r0
 800bd3c:	462b      	mov	r3, r5
 800bd3e:	b99a      	cbnz	r2, 800bd68 <scalbn+0x38>
 800bd40:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bd44:	4323      	orrs	r3, r4
 800bd46:	d036      	beq.n	800bdb6 <scalbn+0x86>
 800bd48:	4b39      	ldr	r3, [pc, #228]	; (800be30 <scalbn+0x100>)
 800bd4a:	4629      	mov	r1, r5
 800bd4c:	ee10 0a10 	vmov	r0, s0
 800bd50:	2200      	movs	r2, #0
 800bd52:	f7f4 fbfd 	bl	8000550 <__aeabi_dmul>
 800bd56:	4b37      	ldr	r3, [pc, #220]	; (800be34 <scalbn+0x104>)
 800bd58:	429e      	cmp	r6, r3
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	460d      	mov	r5, r1
 800bd5e:	da10      	bge.n	800bd82 <scalbn+0x52>
 800bd60:	a32b      	add	r3, pc, #172	; (adr r3, 800be10 <scalbn+0xe0>)
 800bd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd66:	e03a      	b.n	800bdde <scalbn+0xae>
 800bd68:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bd6c:	428a      	cmp	r2, r1
 800bd6e:	d10c      	bne.n	800bd8a <scalbn+0x5a>
 800bd70:	ee10 2a10 	vmov	r2, s0
 800bd74:	4620      	mov	r0, r4
 800bd76:	4629      	mov	r1, r5
 800bd78:	f7f4 fa34 	bl	80001e4 <__adddf3>
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	460d      	mov	r5, r1
 800bd80:	e019      	b.n	800bdb6 <scalbn+0x86>
 800bd82:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bd86:	460b      	mov	r3, r1
 800bd88:	3a36      	subs	r2, #54	; 0x36
 800bd8a:	4432      	add	r2, r6
 800bd8c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bd90:	428a      	cmp	r2, r1
 800bd92:	dd08      	ble.n	800bda6 <scalbn+0x76>
 800bd94:	2d00      	cmp	r5, #0
 800bd96:	a120      	add	r1, pc, #128	; (adr r1, 800be18 <scalbn+0xe8>)
 800bd98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd9c:	da1c      	bge.n	800bdd8 <scalbn+0xa8>
 800bd9e:	a120      	add	r1, pc, #128	; (adr r1, 800be20 <scalbn+0xf0>)
 800bda0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bda4:	e018      	b.n	800bdd8 <scalbn+0xa8>
 800bda6:	2a00      	cmp	r2, #0
 800bda8:	dd08      	ble.n	800bdbc <scalbn+0x8c>
 800bdaa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bdae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bdb2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bdb6:	ec45 4b10 	vmov	d0, r4, r5
 800bdba:	bd70      	pop	{r4, r5, r6, pc}
 800bdbc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bdc0:	da19      	bge.n	800bdf6 <scalbn+0xc6>
 800bdc2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bdc6:	429e      	cmp	r6, r3
 800bdc8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bdcc:	dd0a      	ble.n	800bde4 <scalbn+0xb4>
 800bdce:	a112      	add	r1, pc, #72	; (adr r1, 800be18 <scalbn+0xe8>)
 800bdd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d1e2      	bne.n	800bd9e <scalbn+0x6e>
 800bdd8:	a30f      	add	r3, pc, #60	; (adr r3, 800be18 <scalbn+0xe8>)
 800bdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdde:	f7f4 fbb7 	bl	8000550 <__aeabi_dmul>
 800bde2:	e7cb      	b.n	800bd7c <scalbn+0x4c>
 800bde4:	a10a      	add	r1, pc, #40	; (adr r1, 800be10 <scalbn+0xe0>)
 800bde6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d0b8      	beq.n	800bd60 <scalbn+0x30>
 800bdee:	a10e      	add	r1, pc, #56	; (adr r1, 800be28 <scalbn+0xf8>)
 800bdf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdf4:	e7b4      	b.n	800bd60 <scalbn+0x30>
 800bdf6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bdfa:	3236      	adds	r2, #54	; 0x36
 800bdfc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800be00:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800be04:	4620      	mov	r0, r4
 800be06:	4b0c      	ldr	r3, [pc, #48]	; (800be38 <scalbn+0x108>)
 800be08:	2200      	movs	r2, #0
 800be0a:	e7e8      	b.n	800bdde <scalbn+0xae>
 800be0c:	f3af 8000 	nop.w
 800be10:	c2f8f359 	.word	0xc2f8f359
 800be14:	01a56e1f 	.word	0x01a56e1f
 800be18:	8800759c 	.word	0x8800759c
 800be1c:	7e37e43c 	.word	0x7e37e43c
 800be20:	8800759c 	.word	0x8800759c
 800be24:	fe37e43c 	.word	0xfe37e43c
 800be28:	c2f8f359 	.word	0xc2f8f359
 800be2c:	81a56e1f 	.word	0x81a56e1f
 800be30:	43500000 	.word	0x43500000
 800be34:	ffff3cb0 	.word	0xffff3cb0
 800be38:	3c900000 	.word	0x3c900000

0800be3c <_init>:
 800be3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be3e:	bf00      	nop
 800be40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be42:	bc08      	pop	{r3}
 800be44:	469e      	mov	lr, r3
 800be46:	4770      	bx	lr

0800be48 <_fini>:
 800be48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be4a:	bf00      	nop
 800be4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be4e:	bc08      	pop	{r3}
 800be50:	469e      	mov	lr, r3
 800be52:	4770      	bx	lr
