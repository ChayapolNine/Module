
LAB_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c644  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  0800c7e0  0800c7e0  0001c7e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca10  0800ca10  000203c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca10  0800ca10  0001ca10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca18  0800ca18  000203c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca18  0800ca18  0001ca18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca1c  0800ca1c  0001ca1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c8  20000000  0800ca20  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f90  200003c8  0800cde8  000203c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001358  0800cde8  00021358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015da1  00000000  00000000  000203f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a39  00000000  00000000  00036199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  00038bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001148  00000000  00000000  00039e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cbb  00000000  00000000  0003af68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ea6  00000000  00000000  00053c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e945  00000000  00000000  0006aac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010940e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000582c  00000000  00000000  00109460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200003c8 	.word	0x200003c8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c7c4 	.word	0x0800c7c4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200003cc 	.word	0x200003cc
 80001d4:	0800c7c4 	.word	0x0800c7c4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b992 	b.w	8000edc <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f824 	bl	8000c0c <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__aeabi_d2ulz>:
 8000bd0:	b5d0      	push	{r4, r6, r7, lr}
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <__aeabi_d2ulz+0x34>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4606      	mov	r6, r0
 8000bd8:	460f      	mov	r7, r1
 8000bda:	f7ff fcb9 	bl	8000550 <__aeabi_dmul>
 8000bde:	f000 f97f 	bl	8000ee0 <__aeabi_d2uiz>
 8000be2:	4604      	mov	r4, r0
 8000be4:	f7ff fc3a 	bl	800045c <__aeabi_ui2d>
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <__aeabi_d2ulz+0x38>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	f7ff fcb0 	bl	8000550 <__aeabi_dmul>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	4630      	mov	r0, r6
 8000bf6:	4639      	mov	r1, r7
 8000bf8:	f7ff faf2 	bl	80001e0 <__aeabi_dsub>
 8000bfc:	f000 f970 	bl	8000ee0 <__aeabi_d2uiz>
 8000c00:	4621      	mov	r1, r4
 8000c02:	bdd0      	pop	{r4, r6, r7, pc}
 8000c04:	3df00000 	.word	0x3df00000
 8000c08:	41f00000 	.word	0x41f00000

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9d08      	ldr	r5, [sp, #32]
 8000c12:	4604      	mov	r4, r0
 8000c14:	468e      	mov	lr, r1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d14d      	bne.n	8000cb6 <__udivmoddi4+0xaa>
 8000c1a:	428a      	cmp	r2, r1
 8000c1c:	4694      	mov	ip, r2
 8000c1e:	d969      	bls.n	8000cf4 <__udivmoddi4+0xe8>
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	b152      	cbz	r2, 8000c3c <__udivmoddi4+0x30>
 8000c26:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2a:	f1c2 0120 	rsb	r1, r2, #32
 8000c2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c32:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c36:	ea41 0e03 	orr.w	lr, r1, r3
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c40:	0c21      	lsrs	r1, r4, #16
 8000c42:	fbbe f6f8 	udiv	r6, lr, r8
 8000c46:	fa1f f78c 	uxth.w	r7, ip
 8000c4a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c52:	fb06 f107 	mul.w	r1, r6, r7
 8000c56:	4299      	cmp	r1, r3
 8000c58:	d90a      	bls.n	8000c70 <__udivmoddi4+0x64>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c62:	f080 811f 	bcs.w	8000ea4 <__udivmoddi4+0x298>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 811c 	bls.w	8000ea4 <__udivmoddi4+0x298>
 8000c6c:	3e02      	subs	r6, #2
 8000c6e:	4463      	add	r3, ip
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c78:	fb08 3310 	mls	r3, r8, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 f707 	mul.w	r7, r0, r7
 8000c84:	42a7      	cmp	r7, r4
 8000c86:	d90a      	bls.n	8000c9e <__udivmoddi4+0x92>
 8000c88:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c90:	f080 810a 	bcs.w	8000ea8 <__udivmoddi4+0x29c>
 8000c94:	42a7      	cmp	r7, r4
 8000c96:	f240 8107 	bls.w	8000ea8 <__udivmoddi4+0x29c>
 8000c9a:	4464      	add	r4, ip
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca2:	1be4      	subs	r4, r4, r7
 8000ca4:	2600      	movs	r6, #0
 8000ca6:	b11d      	cbz	r5, 8000cb0 <__udivmoddi4+0xa4>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xc2>
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	f000 80ef 	beq.w	8000e9e <__udivmoddi4+0x292>
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc6:	4630      	mov	r0, r6
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f683 	clz	r6, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d14a      	bne.n	8000d6c <__udivmoddi4+0x160>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd4>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80f9 	bhi.w	8000ed2 <__udivmoddi4+0x2c6>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	469e      	mov	lr, r3
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa4>
 8000cee:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa4>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xec>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 8092 	bne.w	8000e26 <__udivmoddi4+0x21a>
 8000d02:	eba1 010c 	sub.w	r1, r1, ip
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f fe8c 	uxth.w	lr, ip
 8000d0e:	2601      	movs	r6, #1
 8000d10:	0c20      	lsrs	r0, r4, #16
 8000d12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d16:	fb07 1113 	mls	r1, r7, r3, r1
 8000d1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1e:	fb0e f003 	mul.w	r0, lr, r3
 8000d22:	4288      	cmp	r0, r1
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x12c>
 8000d26:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x12a>
 8000d30:	4288      	cmp	r0, r1
 8000d32:	f200 80cb 	bhi.w	8000ecc <__udivmoddi4+0x2c0>
 8000d36:	4643      	mov	r3, r8
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d40:	fb07 1110 	mls	r1, r7, r0, r1
 8000d44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d48:	fb0e fe00 	mul.w	lr, lr, r0
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x156>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d58:	d202      	bcs.n	8000d60 <__udivmoddi4+0x154>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f200 80bb 	bhi.w	8000ed6 <__udivmoddi4+0x2ca>
 8000d60:	4608      	mov	r0, r1
 8000d62:	eba4 040e 	sub.w	r4, r4, lr
 8000d66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d6a:	e79c      	b.n	8000ca6 <__udivmoddi4+0x9a>
 8000d6c:	f1c6 0720 	rsb	r7, r6, #32
 8000d70:	40b3      	lsls	r3, r6
 8000d72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d82:	431c      	orrs	r4, r3
 8000d84:	40f9      	lsrs	r1, r7
 8000d86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d92:	0c20      	lsrs	r0, r4, #16
 8000d94:	fa1f fe8c 	uxth.w	lr, ip
 8000d98:	fb09 1118 	mls	r1, r9, r8, r1
 8000d9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000da0:	fb08 f00e 	mul.w	r0, r8, lr
 8000da4:	4288      	cmp	r0, r1
 8000da6:	fa02 f206 	lsl.w	r2, r2, r6
 8000daa:	d90b      	bls.n	8000dc4 <__udivmoddi4+0x1b8>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db4:	f080 8088 	bcs.w	8000ec8 <__udivmoddi4+0x2bc>
 8000db8:	4288      	cmp	r0, r1
 8000dba:	f240 8085 	bls.w	8000ec8 <__udivmoddi4+0x2bc>
 8000dbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc2:	4461      	add	r1, ip
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dcc:	fb09 1110 	mls	r1, r9, r0, r1
 8000dd0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	458e      	cmp	lr, r1
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x1e2>
 8000ddc:	eb1c 0101 	adds.w	r1, ip, r1
 8000de0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de4:	d26c      	bcs.n	8000ec0 <__udivmoddi4+0x2b4>
 8000de6:	458e      	cmp	lr, r1
 8000de8:	d96a      	bls.n	8000ec0 <__udivmoddi4+0x2b4>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4461      	add	r1, ip
 8000dee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000df2:	fba0 9402 	umull	r9, r4, r0, r2
 8000df6:	eba1 010e 	sub.w	r1, r1, lr
 8000dfa:	42a1      	cmp	r1, r4
 8000dfc:	46c8      	mov	r8, r9
 8000dfe:	46a6      	mov	lr, r4
 8000e00:	d356      	bcc.n	8000eb0 <__udivmoddi4+0x2a4>
 8000e02:	d053      	beq.n	8000eac <__udivmoddi4+0x2a0>
 8000e04:	b15d      	cbz	r5, 8000e1e <__udivmoddi4+0x212>
 8000e06:	ebb3 0208 	subs.w	r2, r3, r8
 8000e0a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e12:	fa22 f306 	lsr.w	r3, r2, r6
 8000e16:	40f1      	lsrs	r1, r6
 8000e18:	431f      	orrs	r7, r3
 8000e1a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1e:	2600      	movs	r6, #0
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	f1c2 0320 	rsb	r3, r2, #32
 8000e2a:	40d8      	lsrs	r0, r3
 8000e2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e30:	fa21 f303 	lsr.w	r3, r1, r3
 8000e34:	4091      	lsls	r1, r2
 8000e36:	4301      	orrs	r1, r0
 8000e38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3c:	fa1f fe8c 	uxth.w	lr, ip
 8000e40:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e44:	fb07 3610 	mls	r6, r7, r0, r3
 8000e48:	0c0b      	lsrs	r3, r1, #16
 8000e4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e52:	429e      	cmp	r6, r3
 8000e54:	fa04 f402 	lsl.w	r4, r4, r2
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x260>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e62:	d22f      	bcs.n	8000ec4 <__udivmoddi4+0x2b8>
 8000e64:	429e      	cmp	r6, r3
 8000e66:	d92d      	bls.n	8000ec4 <__udivmoddi4+0x2b8>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4463      	add	r3, ip
 8000e6c:	1b9b      	subs	r3, r3, r6
 8000e6e:	b289      	uxth	r1, r1
 8000e70:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e74:	fb07 3316 	mls	r3, r7, r6, r3
 8000e78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e80:	428b      	cmp	r3, r1
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x28a>
 8000e84:	eb1c 0101 	adds.w	r1, ip, r1
 8000e88:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e8c:	d216      	bcs.n	8000ebc <__udivmoddi4+0x2b0>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d914      	bls.n	8000ebc <__udivmoddi4+0x2b0>
 8000e92:	3e02      	subs	r6, #2
 8000e94:	4461      	add	r1, ip
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e9c:	e738      	b.n	8000d10 <__udivmoddi4+0x104>
 8000e9e:	462e      	mov	r6, r5
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	e705      	b.n	8000cb0 <__udivmoddi4+0xa4>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	e6e3      	b.n	8000c70 <__udivmoddi4+0x64>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6f8      	b.n	8000c9e <__udivmoddi4+0x92>
 8000eac:	454b      	cmp	r3, r9
 8000eae:	d2a9      	bcs.n	8000e04 <__udivmoddi4+0x1f8>
 8000eb0:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb8:	3801      	subs	r0, #1
 8000eba:	e7a3      	b.n	8000e04 <__udivmoddi4+0x1f8>
 8000ebc:	4646      	mov	r6, r8
 8000ebe:	e7ea      	b.n	8000e96 <__udivmoddi4+0x28a>
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	e794      	b.n	8000dee <__udivmoddi4+0x1e2>
 8000ec4:	4640      	mov	r0, r8
 8000ec6:	e7d1      	b.n	8000e6c <__udivmoddi4+0x260>
 8000ec8:	46d0      	mov	r8, sl
 8000eca:	e77b      	b.n	8000dc4 <__udivmoddi4+0x1b8>
 8000ecc:	3b02      	subs	r3, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	e732      	b.n	8000d38 <__udivmoddi4+0x12c>
 8000ed2:	4630      	mov	r0, r6
 8000ed4:	e709      	b.n	8000cea <__udivmoddi4+0xde>
 8000ed6:	4464      	add	r4, ip
 8000ed8:	3802      	subs	r0, #2
 8000eda:	e742      	b.n	8000d62 <__udivmoddi4+0x156>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <__aeabi_d2uiz>:
 8000ee0:	004a      	lsls	r2, r1, #1
 8000ee2:	d211      	bcs.n	8000f08 <__aeabi_d2uiz+0x28>
 8000ee4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ee8:	d211      	bcs.n	8000f0e <__aeabi_d2uiz+0x2e>
 8000eea:	d50d      	bpl.n	8000f08 <__aeabi_d2uiz+0x28>
 8000eec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ef0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ef4:	d40e      	bmi.n	8000f14 <__aeabi_d2uiz+0x34>
 8000ef6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000efa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000efe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f02:	fa23 f002 	lsr.w	r0, r3, r2
 8000f06:	4770      	bx	lr
 8000f08:	f04f 0000 	mov.w	r0, #0
 8000f0c:	4770      	bx	lr
 8000f0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f12:	d102      	bne.n	8000f1a <__aeabi_d2uiz+0x3a>
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	4770      	bx	lr
 8000f1a:	f04f 0000 	mov.w	r0, #0
 8000f1e:	4770      	bx	lr

08000f20 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <modbus_1t5_Timeout+0x1c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	751a      	strb	r2, [r3, #20]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	200003e4 	.word	0x200003e4

08000f40 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <modbus_3t5_Timeout+0x1c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	755a      	strb	r2, [r3, #21]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	200003e4 	.word	0x200003e4

08000f60 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000f72:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8000f7a:	1c59      	adds	r1, r3, #1
 8000f7c:	b289      	uxth	r1, r1
 8000f7e:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8000f82:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f86:	d210      	bcs.n	8000faa <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68d8      	ldr	r0, [r3, #12]
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000f9a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000f9e:	4413      	add	r3, r2
 8000fa0:	3302      	adds	r3, #2
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f007 ff11 	bl	8008dcc <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200003e4 	.word	0x200003e4

08000fc4 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000fce:	4a24      	ldr	r2, [pc, #144]	; (8001060 <Modbus_init+0x9c>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <Modbus_init+0x9c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000fdc:	4b20      	ldr	r3, [pc, #128]	; (8001060 <Modbus_init+0x9c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	691b      	ldr	r3, [r3, #16]
 8000fe2:	4a20      	ldr	r2, [pc, #128]	; (8001064 <Modbus_init+0xa0>)
 8000fe4:	2114      	movs	r1, #20
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f007 f8f4 	bl	80081d4 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000fec:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <Modbus_init+0x9c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	4a1d      	ldr	r2, [pc, #116]	; (8001068 <Modbus_init+0xa4>)
 8000ff4:	210e      	movs	r1, #14
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f007 f8ec 	bl	80081d4 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <Modbus_init+0x9c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	4a1a      	ldr	r2, [pc, #104]	; (800106c <Modbus_init+0xa8>)
 8001004:	2103      	movs	r1, #3
 8001006:	4618      	mov	r0, r3
 8001008:	f007 fe38 	bl	8008c7c <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <Modbus_init+0x9c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	68d8      	ldr	r0, [r3, #12]
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <Modbus_init+0x9c>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <Modbus_init+0x9c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800101e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001022:	4413      	add	r3, r2
 8001024:	3302      	adds	r3, #2
 8001026:	2201      	movs	r2, #1
 8001028:	4619      	mov	r1, r3
 800102a:	f007 fecf 	bl	8008dcc <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <Modbus_init+0x9c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b01      	cmp	r3, #1
 800103c:	d10c      	bne.n	8001058 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <Modbus_init+0x9c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	691b      	ldr	r3, [r3, #16]
 8001044:	4618      	mov	r0, r3
 8001046:	f006 f96f 	bl	8007328 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <Modbus_init+0x9c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f006 fbae 	bl	80077b4 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200003e4 	.word	0x200003e4
 8001064:	08000f21 	.word	0x08000f21
 8001068:	08000f41 	.word	0x08000f41
 800106c:	08000f61 	.word	0x08000f61

08001070 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 800107c:	23ff      	movs	r3, #255	; 0xff
 800107e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001080:	23ff      	movs	r3, #255	; 0xff
 8001082:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001084:	e013      	b.n	80010ae <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	607a      	str	r2, [r7, #4]
 800108c:	781a      	ldrb	r2, [r3, #0]
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	4053      	eors	r3, r2
 8001092:	b2db      	uxtb	r3, r3
 8001094:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <CRC16+0x64>)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4413      	add	r3, r2
 800109c:	781a      	ldrb	r2, [r3, #0]
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	4053      	eors	r3, r2
 80010a2:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80010a4:	4a0c      	ldr	r2, [pc, #48]	; (80010d8 <CRC16+0x68>)
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	4413      	add	r3, r2
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80010ae:	883b      	ldrh	r3, [r7, #0]
 80010b0:	1e5a      	subs	r2, r3, #1
 80010b2:	803a      	strh	r2, [r7, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1e6      	bne.n	8001086 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21a      	sxth	r2, r3
 80010be:	7bbb      	ldrb	r3, [r7, #14]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	b29b      	uxth	r3, r3
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	20000100 	.word	0x20000100
 80010d8:	20000000 	.word	0x20000000

080010dc <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80010e2:	4b81      	ldr	r3, [pc, #516]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	7e1b      	ldrb	r3, [r3, #24]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	2b03      	cmp	r3, #3
 80010ec:	d80a      	bhi.n	8001104 <Modbus_Protocal_Worker+0x28>
 80010ee:	a201      	add	r2, pc, #4	; (adr r2, 80010f4 <Modbus_Protocal_Worker+0x18>)
 80010f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f4:	0800110f 	.word	0x0800110f
 80010f8:	080012af 	.word	0x080012af
 80010fc:	0800119b 	.word	0x0800119b
 8001100:	080011c1 	.word	0x080011c1
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001104:	4b78      	ldr	r3, [pc, #480]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2201      	movs	r2, #1
 800110a:	761a      	strb	r2, [r3, #24]
		break;
 800110c:	e0e8      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800110e:	4b76      	ldr	r3, [pc, #472]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 800111a:	f000 f9dd 	bl	80014d8 <Modbus_Emission>
 800111e:	e01c      	b.n	800115a <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001120:	4b71      	ldr	r3, [pc, #452]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	7d9b      	ldrb	r3, [r3, #22]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d017      	beq.n	800115a <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800112a:	4b6f      	ldr	r3, [pc, #444]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001132:	4b6d      	ldr	r3, [pc, #436]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2200      	movs	r2, #0
 8001138:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 800113a:	4b6b      	ldr	r3, [pc, #428]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b68      	ldr	r3, [pc, #416]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f042 0201 	orr.w	r2, r2, #1
 8001150:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001152:	4b65      	ldr	r3, [pc, #404]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2203      	movs	r2, #3
 8001158:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800115a:	4b63      	ldr	r3, [pc, #396]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b20      	cmp	r3, #32
 8001168:	f040 80b3 	bne.w	80012d2 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800116c:	4b5e      	ldr	r3, [pc, #376]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2200      	movs	r2, #0
 8001172:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001176:	4b5c      	ldr	r3, [pc, #368]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68d8      	ldr	r0, [r3, #12]
 800117c:	4b5a      	ldr	r3, [pc, #360]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b59      	ldr	r3, [pc, #356]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001188:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800118c:	4413      	add	r3, r2
 800118e:	3302      	adds	r3, #2
 8001190:	2201      	movs	r2, #1
 8001192:	4619      	mov	r1, r3
 8001194:	f007 fe1a 	bl	8008dcc <HAL_UART_Receive_IT>
		}
		break;
 8001198:	e09b      	b.n	80012d2 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800119a:	4b53      	ldr	r3, [pc, #332]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	7d1b      	ldrb	r3, [r3, #20]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 8098 	beq.w	80012d6 <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 80011a6:	4b50      	ldr	r3, [pc, #320]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2200      	movs	r2, #0
 80011ac:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80011ae:	4b4e      	ldr	r3, [pc, #312]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	22fe      	movs	r2, #254	; 0xfe
 80011b4:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80011b6:	4b4c      	ldr	r3, [pc, #304]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2204      	movs	r2, #4
 80011bc:	761a      	strb	r2, [r3, #24]
		}
		break;
 80011be:	e08a      	b.n	80012d6 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80011c0:	4b49      	ldr	r3, [pc, #292]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	7d9b      	ldrb	r3, [r3, #22]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d009      	beq.n	80011de <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 80011ca:	4b47      	ldr	r3, [pc, #284]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d103      	bne.n	80011de <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80011d6:	4b44      	ldr	r3, [pc, #272]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	22ff      	movs	r2, #255	; 0xff
 80011dc:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80011de:	4b42      	ldr	r3, [pc, #264]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80011e6:	f113 0f02 	cmn.w	r3, #2
 80011ea:	d150      	bne.n	800128e <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80011ec:	4b3e      	ldr	r3, [pc, #248]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2200      	movs	r2, #0
 80011f2:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80011f4:	4b3c      	ldr	r3, [pc, #240]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f203 2272 	addw	r2, r3, #626	; 0x272
 80011fc:	4b3a      	ldr	r3, [pc, #232]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001204:	3b02      	subs	r3, #2
 8001206:	4619      	mov	r1, r3
 8001208:	4610      	mov	r0, r2
 800120a:	f7ff ff31 	bl	8001070 <CRC16>
 800120e:	4603      	mov	r3, r0
 8001210:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001212:	793a      	ldrb	r2, [r7, #4]
 8001214:	4b34      	ldr	r3, [pc, #208]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001216:	6819      	ldr	r1, [r3, #0]
 8001218:	4b33      	ldr	r3, [pc, #204]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001220:	3b02      	subs	r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001228:	429a      	cmp	r2, r3
 800122a:	d10c      	bne.n	8001246 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 800122c:	797a      	ldrb	r2, [r7, #5]
 800122e:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001230:	6819      	ldr	r1, [r3, #0]
 8001232:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800123a:	3b01      	subs	r3, #1
 800123c:	440b      	add	r3, r1
 800123e:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001242:	429a      	cmp	r2, r3
 8001244:	d004      	beq.n	8001250 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001246:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	22ff      	movs	r2, #255	; 0xff
 800124c:	75da      	strb	r2, [r3, #23]
				break;
 800124e:	e047      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001250:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001258:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	d113      	bne.n	800128a <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001262:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800126a:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 8001272:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800127c:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800127e:	461a      	mov	r2, r3
 8001280:	f008 ff7e 	bl	800a180 <memcpy>

			//execute command
			Modbus_frame_response();
 8001284:	f000 f910 	bl	80014a8 <Modbus_frame_response>
 8001288:	e001      	b.n	800128e <Modbus_Protocal_Worker+0x1b2>
				break;
 800128a:	bf00      	nop
					}
		break;


	}
}
 800128c:	e028      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	7d5b      	ldrb	r3, [r3, #21]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d020      	beq.n	80012da <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2201      	movs	r2, #1
 800129e:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f007 fe3e 	bl	8008f28 <HAL_UART_AbortReceive>
		break;
 80012ac:	e015      	b.n	80012da <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b20      	cmp	r3, #32
 80012bc:	d10f      	bne.n	80012de <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2201      	movs	r2, #1
 80012ce:	761a      	strb	r2, [r3, #24]
		break;
 80012d0:	e005      	b.n	80012de <Modbus_Protocal_Worker+0x202>
		break;
 80012d2:	bf00      	nop
 80012d4:	e004      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
		break;
 80012d6:	bf00      	nop
 80012d8:	e002      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
		break;
 80012da:	bf00      	nop
 80012dc:	e000      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
		break;
 80012de:	bf00      	nop
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200003e4 	.word	0x200003e4

080012ec <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <modbusWrite1Register+0x80>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	7e9b      	ldrb	r3, [r3, #26]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	4b1b      	ldr	r3, [pc, #108]	; (800136c <modbusWrite1Register+0x80>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	7edb      	ldrb	r3, [r3, #27]
 8001304:	b29b      	uxth	r3, r3
 8001306:	4413      	add	r3, r2
 8001308:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800130a:	88fa      	ldrh	r2, [r7, #6]
 800130c:	4b17      	ldr	r3, [pc, #92]	; (800136c <modbusWrite1Register+0x80>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	429a      	cmp	r2, r3
 8001314:	d903      	bls.n	800131e <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001316:	2002      	movs	r0, #2
 8001318:	f000 f8a4 	bl	8001464 <ModbusErrorReply>
			 return;
 800131c:	e023      	b.n	8001366 <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <modbusWrite1Register+0x80>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <modbusWrite1Register+0x80>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6859      	ldr	r1, [r3, #4]
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	440b      	add	r3, r1
 800132e:	7f12      	ldrb	r2, [r2, #28]
 8001330:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <modbusWrite1Register+0x80>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <modbusWrite1Register+0x80>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6859      	ldr	r1, [r3, #4]
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	440b      	add	r3, r1
 8001342:	7f52      	ldrb	r2, [r2, #29]
 8001344:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <modbusWrite1Register+0x80>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <modbusWrite1Register+0x80>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8001354:	2208      	movs	r2, #8
 8001356:	4619      	mov	r1, r3
 8001358:	f008 ff12 	bl	800a180 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <modbusWrite1Register+0x80>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2205      	movs	r2, #5
 8001362:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200003e4 	.word	0x200003e4

08001370 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001376:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <modbusRead1Register+0xf0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	7f1b      	ldrb	r3, [r3, #28]
 800137c:	b29b      	uxth	r3, r3
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	b29a      	uxth	r2, r3
 8001382:	4b37      	ldr	r3, [pc, #220]	; (8001460 <modbusRead1Register+0xf0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	7f5b      	ldrb	r3, [r3, #29]
 8001388:	b29b      	uxth	r3, r3
 800138a:	4413      	add	r3, r2
 800138c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800138e:	4b34      	ldr	r3, [pc, #208]	; (8001460 <modbusRead1Register+0xf0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	7e9b      	ldrb	r3, [r3, #26]
 8001394:	b29b      	uxth	r3, r3
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	b29a      	uxth	r2, r3
 800139a:	4b31      	ldr	r3, [pc, #196]	; (8001460 <modbusRead1Register+0xf0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	7edb      	ldrb	r3, [r3, #27]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	4413      	add	r3, r2
 80013a4:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d002      	beq.n	80013b2 <modbusRead1Register+0x42>
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	2b7d      	cmp	r3, #125	; 0x7d
 80013b0:	d903      	bls.n	80013ba <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80013b2:	2003      	movs	r0, #3
 80013b4:	f000 f856 	bl	8001464 <ModbusErrorReply>
		 return;
 80013b8:	e04e      	b.n	8001458 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80013ba:	88ba      	ldrh	r2, [r7, #4]
 80013bc:	4b28      	ldr	r3, [pc, #160]	; (8001460 <modbusRead1Register+0xf0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d808      	bhi.n	80013d8 <modbusRead1Register+0x68>
 80013c6:	88ba      	ldrh	r2, [r7, #4]
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	4413      	add	r3, r2
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b24      	ldr	r3, [pc, #144]	; (8001460 <modbusRead1Register+0xf0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d903      	bls.n	80013e0 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80013d8:	2002      	movs	r0, #2
 80013da:	f000 f843 	bl	8001464 <ModbusErrorReply>
		 return;
 80013de:	e03b      	b.n	8001458 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80013e0:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <modbusRead1Register+0xf0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2203      	movs	r2, #3
 80013e6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <modbusRead1Register+0xf0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	0052      	lsls	r2, r2, #1
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80013fa:	2400      	movs	r4, #0
 80013fc:	e020      	b.n	8001440 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <modbusRead1Register+0xf0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	88bb      	ldrh	r3, [r7, #4]
 8001406:	4423      	add	r3, r4
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	18d1      	adds	r1, r2, r3
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <modbusRead1Register+0xf0>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	1c63      	adds	r3, r4, #1
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	7849      	ldrb	r1, [r1, #1]
 8001416:	4413      	add	r3, r2
 8001418:	460a      	mov	r2, r1
 800141a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <modbusRead1Register+0xf0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	88bb      	ldrh	r3, [r7, #4]
 8001426:	4423      	add	r3, r4
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	18d1      	adds	r1, r2, r3
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <modbusRead1Register+0xf0>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	0063      	lsls	r3, r4, #1
 8001432:	3303      	adds	r3, #3
 8001434:	7809      	ldrb	r1, [r1, #0]
 8001436:	4413      	add	r3, r2
 8001438:	460a      	mov	r2, r1
 800143a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 800143e:	3401      	adds	r4, #1
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	429c      	cmp	r4, r3
 8001444:	dbdb      	blt.n	80013fe <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	3301      	adds	r3, #1
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <modbusRead1Register+0xf0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	0052      	lsls	r2, r2, #1
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	bd90      	pop	{r4, r7, pc}
 800145e:	bf00      	nop
 8001460:	200003e4 	.word	0x200003e4

08001464 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <ModbusErrorReply+0x40>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	7e5a      	ldrb	r2, [r3, #25]
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <ModbusErrorReply+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <ModbusErrorReply+0x40>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	79fa      	ldrb	r2, [r7, #7]
 8001488:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <ModbusErrorReply+0x40>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2202      	movs	r2, #2
 8001492:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	200003e4 	.word	0x200003e4

080014a8 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <Modbus_frame_response+0x2c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	7e5b      	ldrb	r3, [r3, #25]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d004      	beq.n	80014c0 <Modbus_frame_response+0x18>
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d105      	bne.n	80014c6 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80014ba:	f7ff ff17 	bl	80012ec <modbusWrite1Register>
		break;
 80014be:	e006      	b.n	80014ce <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80014c0:	f7ff ff56 	bl	8001370 <modbusRead1Register>
		break;
 80014c4:	e003      	b.n	80014ce <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80014c6:	2001      	movs	r0, #1
 80014c8:	f7ff ffcc 	bl	8001464 <ModbusErrorReply>
		break;
 80014cc:	bf00      	nop

	}
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200003e4 	.word	0x200003e4

080014d8 <Modbus_Emission>:

void Modbus_Emission()
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80014de:	4b3d      	ldr	r3, [pc, #244]	; (80015d4 <Modbus_Emission+0xfc>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b20      	cmp	r3, #32
 80014ec:	d15e      	bne.n	80015ac <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80014ee:	4b39      	ldr	r3, [pc, #228]	; (80015d4 <Modbus_Emission+0xfc>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <Modbus_Emission+0xfc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	7812      	ldrb	r2, [r2, #0]
 80014f8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80014fc:	4b35      	ldr	r3, [pc, #212]	; (80015d4 <Modbus_Emission+0xfc>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8001504:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001506:	4b33      	ldr	r3, [pc, #204]	; (80015d4 <Modbus_Emission+0xfc>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 800150e:	4b31      	ldr	r3, [pc, #196]	; (80015d4 <Modbus_Emission+0xfc>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 8001516:	461a      	mov	r2, r3
 8001518:	f008 fe32 	bl	800a180 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 800151c:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <Modbus_Emission+0xfc>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001524:	b29a      	uxth	r2, r3
 8001526:	4b2b      	ldr	r3, [pc, #172]	; (80015d4 <Modbus_Emission+0xfc>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	3203      	adds	r2, #3
 800152c:	b292      	uxth	r2, r2
 800152e:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001532:	4b28      	ldr	r3, [pc, #160]	; (80015d4 <Modbus_Emission+0xfc>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <Modbus_Emission+0xfc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001542:	3b02      	subs	r3, #2
 8001544:	4619      	mov	r1, r3
 8001546:	4610      	mov	r0, r2
 8001548:	f7ff fd92 	bl	8001070 <CRC16>
 800154c:	4603      	mov	r3, r0
 800154e:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001550:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <Modbus_Emission+0xfc>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <Modbus_Emission+0xfc>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800155c:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 800155e:	7939      	ldrb	r1, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	460a      	mov	r2, r1
 8001564:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001568:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <Modbus_Emission+0xfc>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <Modbus_Emission+0xfc>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001574:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001576:	7979      	ldrb	r1, [r7, #5]
 8001578:	4413      	add	r3, r2
 800157a:	460a      	mov	r2, r1
 800157c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <Modbus_Emission+0xfc>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b20      	cmp	r3, #32
 800158e:	d10d      	bne.n	80015ac <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <Modbus_Emission+0xfc>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <Modbus_Emission+0xfc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <Modbus_Emission+0xfc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80015a2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80015a6:	461a      	mov	r2, r3
 80015a8:	f007 fc40 	bl	8008e2c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <Modbus_Emission+0xfc>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2200      	movs	r2, #0
 80015b2:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <Modbus_Emission+0xfc>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2200      	movs	r2, #0
 80015ba:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <Modbus_Emission+0xfc>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2200      	movs	r2, #0
 80015c2:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <Modbus_Emission+0xfc>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2202      	movs	r2, #2
 80015ca:	761a      	strb	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200003e4 	.word	0x200003e4

080015d8 <rt_powd_snf>:
 * Arguments    : double u0
 *                double u1
 * Return Type  : double
 */
static double rt_powd_snf(double u0, double u1)
{
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b08c      	sub	sp, #48	; 0x30
 80015dc:	af00      	add	r7, sp, #0
 80015de:	ed87 0b04 	vstr	d0, [r7, #16]
 80015e2:	ed87 1b02 	vstr	d1, [r7, #8]
  double y;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 80015e6:	ed97 0b04 	vldr	d0, [r7, #16]
 80015ea:	f003 f927 	bl	800483c <rtIsNaN>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d106      	bne.n	8001602 <rt_powd_snf+0x2a>
 80015f4:	ed97 0b02 	vldr	d0, [r7, #8]
 80015f8:	f003 f920 	bl	800483c <rtIsNaN>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d005      	beq.n	800160e <rt_powd_snf+0x36>
    y = rtNaN;
 8001602:	4b80      	ldr	r3, [pc, #512]	; (8001804 <rt_powd_snf+0x22c>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800160c:	e0ef      	b.n	80017ee <rt_powd_snf+0x216>
  } else {
    double d;
    double d1;
    d = fabs(u0);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	ed97 7b00 	vldr	d7, [r7]
 800161e:	ed87 7b08 	vstr	d7, [r7, #32]
    d1 = fabs(u1);
 8001622:	68bc      	ldr	r4, [r7, #8]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800162a:	e9c7 4506 	strd	r4, r5, [r7, #24]
    if (rtIsInf(u1)) {
 800162e:	ed97 0b02 	vldr	d0, [r7, #8]
 8001632:	f003 f8d5 	bl	80047e0 <rtIsInf>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d049      	beq.n	80016d0 <rt_powd_snf+0xf8>
      if (d == 1.0) {
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	4b71      	ldr	r3, [pc, #452]	; (8001808 <rt_powd_snf+0x230>)
 8001642:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001646:	f7ff f9eb 	bl	8000a20 <__aeabi_dcmpeq>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <rt_powd_snf+0x84>
        y = 1.0;
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b6c      	ldr	r3, [pc, #432]	; (8001808 <rt_powd_snf+0x230>)
 8001656:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800165a:	e0c8      	b.n	80017ee <rt_powd_snf+0x216>
      } else if (d > 1.0) {
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	4b69      	ldr	r3, [pc, #420]	; (8001808 <rt_powd_snf+0x230>)
 8001662:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001666:	f7ff fa03 	bl	8000a70 <__aeabi_dcmpgt>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d017      	beq.n	80016a0 <rt_powd_snf+0xc8>
        if (u1 > 0.0) {
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800167c:	f7ff f9f8 	bl	8000a70 <__aeabi_dcmpgt>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d005      	beq.n	8001692 <rt_powd_snf+0xba>
          y = rtInf;
 8001686:	4b61      	ldr	r3, [pc, #388]	; (800180c <rt_powd_snf+0x234>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001690:	e0ad      	b.n	80017ee <rt_powd_snf+0x216>
        } else {
          y = 0.0;
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800169e:	e0a6      	b.n	80017ee <rt_powd_snf+0x216>
        }
      } else if (u1 > 0.0) {
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016ac:	f7ff f9e0 	bl	8000a70 <__aeabi_dcmpgt>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d006      	beq.n	80016c4 <rt_powd_snf+0xec>
        y = 0.0;
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	f04f 0300 	mov.w	r3, #0
 80016be:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80016c2:	e094      	b.n	80017ee <rt_powd_snf+0x216>
      } else {
        y = rtInf;
 80016c4:	4b51      	ldr	r3, [pc, #324]	; (800180c <rt_powd_snf+0x234>)
 80016c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80016ce:	e08e      	b.n	80017ee <rt_powd_snf+0x216>
      }
    } else if (d1 == 0.0) {
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016dc:	f7ff f9a0 	bl	8000a20 <__aeabi_dcmpeq>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <rt_powd_snf+0x11a>
      y = 1.0;
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	4b47      	ldr	r3, [pc, #284]	; (8001808 <rt_powd_snf+0x230>)
 80016ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80016f0:	e07d      	b.n	80017ee <rt_powd_snf+0x216>
    } else if (d1 == 1.0) {
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	4b44      	ldr	r3, [pc, #272]	; (8001808 <rt_powd_snf+0x230>)
 80016f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016fc:	f7ff f990 	bl	8000a20 <__aeabi_dcmpeq>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d01b      	beq.n	800173e <rt_powd_snf+0x166>
      if (u1 > 0.0) {
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001712:	f7ff f9ad 	bl	8000a70 <__aeabi_dcmpgt>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d004      	beq.n	8001726 <rt_powd_snf+0x14e>
        y = u0;
 800171c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001720:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001724:	e063      	b.n	80017ee <rt_powd_snf+0x216>
      } else {
        y = 1.0 / u0;
 8001726:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800172a:	f04f 0000 	mov.w	r0, #0
 800172e:	4936      	ldr	r1, [pc, #216]	; (8001808 <rt_powd_snf+0x230>)
 8001730:	f7ff f838 	bl	80007a4 <__aeabi_ddiv>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800173c:	e057      	b.n	80017ee <rt_powd_snf+0x216>
      }
    } else if (u1 == 2.0) {
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001746:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800174a:	f7ff f969 	bl	8000a20 <__aeabi_dcmpeq>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00a      	beq.n	800176a <rt_powd_snf+0x192>
      y = u0 * u0;
 8001754:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001758:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800175c:	f7fe fef8 	bl	8000550 <__aeabi_dmul>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001768:	e041      	b.n	80017ee <rt_powd_snf+0x216>
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	4b28      	ldr	r3, [pc, #160]	; (8001810 <rt_powd_snf+0x238>)
 8001770:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001774:	f7ff f954 	bl	8000a20 <__aeabi_dcmpeq>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d011      	beq.n	80017a2 <rt_powd_snf+0x1ca>
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800178a:	f7ff f967 	bl	8000a5c <__aeabi_dcmpge>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d006      	beq.n	80017a2 <rt_powd_snf+0x1ca>
      y = sqrt(u0);
 8001794:	ed97 0b04 	vldr	d0, [r7, #16]
 8001798:	f008 ffee 	bl	800a778 <sqrt>
 800179c:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80017a0:	e025      	b.n	80017ee <rt_powd_snf+0x216>
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017ae:	f7ff f941 	bl	8000a34 <__aeabi_dcmplt>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d012      	beq.n	80017de <rt_powd_snf+0x206>
 80017b8:	ed97 0b02 	vldr	d0, [r7, #8]
 80017bc:	f008 fe60 	bl	800a480 <floor>
 80017c0:	ec53 2b10 	vmov	r2, r3, d0
 80017c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017c8:	f7ff f952 	bl	8000a70 <__aeabi_dcmpgt>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d005      	beq.n	80017de <rt_powd_snf+0x206>
      y = rtNaN;
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <rt_powd_snf+0x22c>)
 80017d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80017dc:	e007      	b.n	80017ee <rt_powd_snf+0x216>
    } else {
      y = pow(u0, u1);
 80017de:	ed97 1b02 	vldr	d1, [r7, #8]
 80017e2:	ed97 0b04 	vldr	d0, [r7, #16]
 80017e6:	f008 ff57 	bl	800a698 <pow>
 80017ea:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
    }
  }
  return y;
 80017ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80017f6:	eeb0 0a47 	vmov.f32	s0, s14
 80017fa:	eef0 0a67 	vmov.f32	s1, s15
 80017fe:	3730      	adds	r7, #48	; 0x30
 8001800:	46bd      	mov	sp, r7
 8001802:	bdb0      	pop	{r4, r5, r7, pc}
 8001804:	20000348 	.word	0x20000348
 8001808:	3ff00000 	.word	0x3ff00000
 800180c:	20000350 	.word	0x20000350
 8001810:	3fe00000 	.word	0x3fe00000
 8001814:	00000000 	.word	0x00000000

08001818 <Qubic>:
 * Return Type  : void
 */
void Qubic(double q_k1, double q_k2, double qdot_k1, double qdot_k2, double tf,
           emxArray_real_T *q_position, emxArray_real_T *q_velocity,
           emxArray_real_T *q_acc)
{
 8001818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800181c:	b0a1      	sub	sp, #132	; 0x84
 800181e:	af00      	add	r7, sp, #0
 8001820:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 8001824:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 8001828:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 800182c:	ed87 3b08 	vstr	d3, [r7, #32]
 8001830:	ed87 4b06 	vstr	d4, [r7, #24]
 8001834:	6178      	str	r0, [r7, #20]
 8001836:	6139      	str	r1, [r7, #16]
 8001838:	60fa      	str	r2, [r7, #12]
  double *q_position_data;
  double *q_velocity_data;
  int i;
  int k;
  int q_acc_tmp_tmp;
  q_acc_data = q_acc->data;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	67fb      	str	r3, [r7, #124]	; 0x7c
  delta1 = tf * 2000.0;
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	4bac      	ldr	r3, [pc, #688]	; (8001af8 <Qubic+0x2e0>)
 8001846:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800184a:	f7fe fe81 	bl	8000550 <__aeabi_dmul>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  if (!(delta1 >= 0.0)) {
 8001856:	2301      	movs	r3, #1
 8001858:	461e      	mov	r6, r3
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001866:	f7ff f8f9 	bl	8000a5c <__aeabi_dcmpge>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <Qubic+0x5c>
 8001870:	2300      	movs	r3, #0
 8001872:	461e      	mov	r6, r3
 8001874:	b2f3      	uxtb	r3, r6
 8001876:	f083 0301 	eor.w	r3, r3, #1
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	d009      	beq.n	8001894 <Qubic+0x7c>
    q_acc->size[0] = 1;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	601a      	str	r2, [r3, #0]
    q_acc->size[1] = 0;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	3304      	adds	r3, #4
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	e158      	b.n	8001b46 <Qubic+0x32e>
  } else {
    d = floor(delta1);
 8001894:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8001898:	f008 fdf2 	bl	800a480 <floor>
 800189c:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
    i = q_acc->size[0] * q_acc->size[1];
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	6852      	ldr	r2, [r2, #4]
 80018aa:	3204      	adds	r2, #4
 80018ac:	6812      	ldr	r2, [r2, #0]
 80018ae:	fb02 f303 	mul.w	r3, r2, r3
 80018b2:	67bb      	str	r3, [r7, #120]	; 0x78
    q_acc->size[0] = 1;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	601a      	str	r2, [r3, #0]
    q_acc->size[1] = (int)d;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	1d1e      	adds	r6, r3, #4
 80018c2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80018c6:	f7ff f8f3 	bl	8000ab0 <__aeabi_d2iz>
 80018ca:	4603      	mov	r3, r0
 80018cc:	6033      	str	r3, [r6, #0]
    emxEnsureCapacity_real_T(q_acc, i);
 80018ce:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 fb3e 	bl	8001f52 <emxEnsureCapacity_real_T>
    q_acc_data = q_acc->data;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	67fb      	str	r3, [r7, #124]	; 0x7c
    if ((int)d >= 1) {
 80018dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80018e0:	f7ff f8e6 	bl	8000ab0 <__aeabi_d2iz>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f340 812d 	ble.w	8001b46 <Qubic+0x32e>
      q_acc_tmp_tmp = (int)d - 1;
 80018ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80018f0:	f7ff f8de 	bl	8000ab0 <__aeabi_d2iz>
 80018f4:	4603      	mov	r3, r0
 80018f6:	3b01      	subs	r3, #1
 80018f8:	65fb      	str	r3, [r7, #92]	; 0x5c
      q_acc_data[(int)floor(delta1) - 1] = tf;
 80018fa:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 80018fe:	f008 fdbf 	bl	800a480 <floor>
 8001902:	ec53 2b10 	vmov	r2, r3, d0
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	f7ff f8d1 	bl	8000ab0 <__aeabi_d2iz>
 800190e:	4603      	mov	r3, r0
 8001910:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001914:	3b01      	subs	r3, #1
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800191a:	18d1      	adds	r1, r2, r3
 800191c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001920:	e9c1 2300 	strd	r2, r3, [r1]
      if (q_acc->size[1] >= 2) {
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	3304      	adds	r3, #4
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b01      	cmp	r3, #1
 800192e:	f340 810a 	ble.w	8001b46 <Qubic+0x32e>
        q_acc_data[0] = 0.0;
 8001932:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	e9c1 2300 	strd	r2, r3, [r1]
        if (q_acc->size[1] >= 3) {
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	3304      	adds	r3, #4
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b02      	cmp	r3, #2
 800194a:	f340 80fc 	ble.w	8001b46 <Qubic+0x32e>
          if (-tf == 0.0) {
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800195a:	f7ff f861 	bl	8000a20 <__aeabi_dcmpeq>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d051      	beq.n	8001a08 <Qubic+0x1f0>
            delta1 = tf / ((double)q_acc->size[1] - 1.0);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	3304      	adds	r3, #4
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fd85 	bl	800047c <__aeabi_i2d>
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	4b61      	ldr	r3, [pc, #388]	; (8001afc <Qubic+0x2e4>)
 8001978:	f7fe fc32 	bl	80001e0 <__aeabi_dsub>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001984:	f7fe ff0e 	bl	80007a4 <__aeabi_ddiv>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            for (k = 2; k <= q_acc_tmp_tmp; k++) {
 8001990:	2302      	movs	r3, #2
 8001992:	677b      	str	r3, [r7, #116]	; 0x74
 8001994:	e01c      	b.n	80019d0 <Qubic+0x1b8>
              q_acc_data[k - 1] =
                  (double)(((k << 1) - q_acc->size[1]) - 1) * delta1;
 8001996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001998:	005a      	lsls	r2, r3, #1
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	3304      	adds	r3, #4
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	3b01      	subs	r3, #1
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fd68 	bl	800047c <__aeabi_i2d>
              q_acc_data[k - 1] =
 80019ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019ae:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80019b2:	3b01      	subs	r3, #1
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80019b8:	18d6      	adds	r6, r2, r3
                  (double)(((k << 1) - q_acc->size[1]) - 1) * delta1;
 80019ba:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80019be:	f7fe fdc7 	bl	8000550 <__aeabi_dmul>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
              q_acc_data[k - 1] =
 80019c6:	e9c6 2300 	strd	r2, r3, [r6]
            for (k = 2; k <= q_acc_tmp_tmp; k++) {
 80019ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019cc:	3301      	adds	r3, #1
 80019ce:	677b      	str	r3, [r7, #116]	; 0x74
 80019d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80019d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019d4:	429a      	cmp	r2, r3
 80019d6:	ddde      	ble.n	8001996 <Qubic+0x17e>
            }
            if ((q_acc->size[1] & 1) == 1) {
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	3304      	adds	r3, #4
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80ae 	beq.w	8001b46 <Qubic+0x32e>
              q_acc_data[q_acc->size[1] >> 1] = 0.0;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	3304      	adds	r3, #4
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	105b      	asrs	r3, r3, #1
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80019f8:	18d1      	adds	r1, r2, r3
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	e9c1 2300 	strd	r2, r3, [r1]
 8001a06:	e09e      	b.n	8001b46 <Qubic+0x32e>
            }
          } else if ((tf < 0.0) && (fabs(tf) > 8.9884656743115785E+307)) {
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a14:	f7ff f80e 	bl	8000a34 <__aeabi_dcmplt>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d04e      	beq.n	8001abc <Qubic+0x2a4>
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2e:	4b34      	ldr	r3, [pc, #208]	; (8001b00 <Qubic+0x2e8>)
 8001a30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a34:	f7ff f81c 	bl	8000a70 <__aeabi_dcmpgt>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d03e      	beq.n	8001abc <Qubic+0x2a4>
            delta1 = tf / ((double)q_acc->size[1] - 1.0);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	3304      	adds	r3, #4
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fd18 	bl	800047c <__aeabi_i2d>
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <Qubic+0x2e4>)
 8001a52:	f7fe fbc5 	bl	80001e0 <__aeabi_dsub>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a5e:	f7fe fea1 	bl	80007a4 <__aeabi_ddiv>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            i = q_acc->size[1];
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	67bb      	str	r3, [r7, #120]	; 0x78
            for (k = 0; k <= i - 3; k++) {
 8001a72:	2300      	movs	r3, #0
 8001a74:	677b      	str	r3, [r7, #116]	; 0x74
 8001a76:	e01b      	b.n	8001ab0 <Qubic+0x298>
              q_acc_data[k + 1] = delta1 * ((double)k + 1.0);
 8001a78:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001a7a:	f7fe fcff 	bl	800047c <__aeabi_i2d>
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <Qubic+0x2e4>)
 8001a84:	f7fe fbae 	bl	80001e4 <__adddf3>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a92:	3301      	adds	r3, #1
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a98:	18d6      	adds	r6, r2, r3
 8001a9a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001a9e:	f7fe fd57 	bl	8000550 <__aeabi_dmul>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	e9c6 2300 	strd	r2, r3, [r6]
            for (k = 0; k <= i - 3; k++) {
 8001aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001aac:	3301      	adds	r3, #1
 8001aae:	677b      	str	r3, [r7, #116]	; 0x74
 8001ab0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ab2:	3b02      	subs	r3, #2
 8001ab4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	dbde      	blt.n	8001a78 <Qubic+0x260>
          } else if ((tf < 0.0) && (fabs(tf) > 8.9884656743115785E+307)) {
 8001aba:	e044      	b.n	8001b46 <Qubic+0x32e>
            }
          } else {
            delta1 = tf / ((double)q_acc->size[1] - 1.0);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fcd9 	bl	800047c <__aeabi_i2d>
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <Qubic+0x2e4>)
 8001ad0:	f7fe fb86 	bl	80001e0 <__aeabi_dsub>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001adc:	f7fe fe62 	bl	80007a4 <__aeabi_ddiv>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            i = q_acc->size[1];
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	67bb      	str	r3, [r7, #120]	; 0x78
            for (k = 0; k <= i - 3; k++) {
 8001af0:	2300      	movs	r3, #0
 8001af2:	677b      	str	r3, [r7, #116]	; 0x74
 8001af4:	e022      	b.n	8001b3c <Qubic+0x324>
 8001af6:	bf00      	nop
 8001af8:	409f4000 	.word	0x409f4000
 8001afc:	3ff00000 	.word	0x3ff00000
 8001b00:	7fdfffff 	.word	0x7fdfffff
              q_acc_data[k + 1] = ((double)k + 1.0) * delta1;
 8001b04:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001b06:	f7fe fcb9 	bl	800047c <__aeabi_i2d>
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	4b6e      	ldr	r3, [pc, #440]	; (8001cc8 <Qubic+0x4b0>)
 8001b10:	f7fe fb68 	bl	80001e4 <__adddf3>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b1e:	3301      	adds	r3, #1
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001b24:	18d6      	adds	r6, r2, r3
 8001b26:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001b2a:	f7fe fd11 	bl	8000550 <__aeabi_dmul>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	e9c6 2300 	strd	r2, r3, [r6]
            for (k = 0; k <= i - 3; k++) {
 8001b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b38:	3301      	adds	r3, #1
 8001b3a:	677b      	str	r3, [r7, #116]	; 0x74
 8001b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b3e:	3b02      	subs	r3, #2
 8001b40:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001b42:	429a      	cmp	r2, r3
 8001b44:	dbde      	blt.n	8001b04 <Qubic+0x2ec>
          }
        }
      }
    }
  }
  delta1 = q_k2 - q_k1;
 8001b46:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001b4a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001b4e:	f7fe fb47 	bl	80001e0 <__aeabi_dsub>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  C2_tmp = tf * tf;
 8001b5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b62:	f7fe fcf5 	bl	8000550 <__aeabi_dmul>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  C2 = 3.0 * (delta1 / C2_tmp) + (-qdot_k2 - 2.0 * qdot_k1) / tf;
 8001b6e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001b72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001b76:	f7fe fe15 	bl	80007a4 <__aeabi_ddiv>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	4b51      	ldr	r3, [pc, #324]	; (8001ccc <Qubic+0x4b4>)
 8001b88:	f7fe fce2 	bl	8000550 <__aeabi_dmul>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4690      	mov	r8, r2
 8001b92:	4699      	mov	r9, r3
 8001b94:	6a3c      	ldr	r4, [r7, #32]
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b9c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	f7fe fb1e 	bl	80001e4 <__adddf3>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4620      	mov	r0, r4
 8001bae:	4629      	mov	r1, r5
 8001bb0:	f7fe fb16 	bl	80001e0 <__aeabi_dsub>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bc0:	f7fe fdf0 	bl	80007a4 <__aeabi_ddiv>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4640      	mov	r0, r8
 8001bca:	4649      	mov	r1, r9
 8001bcc:	f7fe fb0a 	bl	80001e4 <__adddf3>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  delta1 =
      -2.0 * (delta1 / rt_powd_snf(tf, 3.0)) + (qdot_k2 + qdot_k1) / C2_tmp;
 8001bd8:	ed9f 1b39 	vldr	d1, [pc, #228]	; 8001cc0 <Qubic+0x4a8>
 8001bdc:	ed97 0b06 	vldr	d0, [r7, #24]
 8001be0:	f7ff fcfa 	bl	80015d8 <rt_powd_snf>
 8001be4:	ec53 2b10 	vmov	r2, r3, d0
 8001be8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001bec:	f7fe fdda 	bl	80007a4 <__aeabi_ddiv>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001c00:	f7fe fca6 	bl	8000550 <__aeabi_dmul>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4614      	mov	r4, r2
 8001c0a:	461d      	mov	r5, r3
 8001c0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c10:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c14:	f7fe fae6 	bl	80001e4 <__adddf3>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c24:	f7fe fdbe 	bl	80007a4 <__aeabi_ddiv>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
  delta1 =
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	4629      	mov	r1, r5
 8001c30:	f7fe fad8 	bl	80001e4 <__adddf3>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  i = q_velocity->size[0] * q_velocity->size[1];
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	6852      	ldr	r2, [r2, #4]
 8001c46:	3204      	adds	r2, #4
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	fb02 f303 	mul.w	r3, r2, r3
 8001c4e:	67bb      	str	r3, [r7, #120]	; 0x78
  q_velocity->size[0] = 1;
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
  q_velocity->size[1] = q_acc->size[1];
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	3304      	adds	r3, #4
 8001c62:	6852      	ldr	r2, [r2, #4]
 8001c64:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_velocity, i);
 8001c66:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001c68:	6938      	ldr	r0, [r7, #16]
 8001c6a:	f000 f972 	bl	8001f52 <emxEnsureCapacity_real_T>
  q_velocity_data = q_velocity->data;
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	647b      	str	r3, [r7, #68]	; 0x44
  q_acc_tmp_tmp = q_acc->size[1];
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  i = q_position->size[0] * q_position->size[1];
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	6852      	ldr	r2, [r2, #4]
 8001c86:	3204      	adds	r2, #4
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	fb02 f303 	mul.w	r3, r2, r3
 8001c8e:	67bb      	str	r3, [r7, #120]	; 0x78
  q_position->size[0] = 1;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
  q_position->size[1] = q_acc->size[1];
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	6852      	ldr	r2, [r2, #4]
 8001ca4:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_position, i);
 8001ca6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001ca8:	6978      	ldr	r0, [r7, #20]
 8001caa:	f000 f952 	bl	8001f52 <emxEnsureCapacity_real_T>
  q_position_data = q_position->data;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	643b      	str	r3, [r7, #64]	; 0x40
  for (i = 0; i < q_acc_tmp_tmp; i++) {
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	67bb      	str	r3, [r7, #120]	; 0x78
 8001cb8:	e067      	b.n	8001d8a <Qubic+0x572>
 8001cba:	bf00      	nop
 8001cbc:	f3af 8000 	nop.w
 8001cc0:	00000000 	.word	0x00000000
 8001cc4:	40080000 	.word	0x40080000
 8001cc8:	3ff00000 	.word	0x3ff00000
 8001ccc:	40080000 	.word	0x40080000
    d = q_acc_data[i];
 8001cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001cd6:	4413      	add	r3, r2
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    C2_tmp = d * d;
 8001ce0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ce4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001ce8:	f7fe fc32 	bl	8000550 <__aeabi_dmul>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    q_velocity_data[i] = C2_tmp;
 8001cf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001cfa:	18d1      	adds	r1, r2, r3
 8001cfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d00:	e9c1 2300 	strd	r2, r3, [r1]
    q_position_data[i] =
        ((q_k1 + qdot_k1 * d) + C2 * C2_tmp) + delta1 * rt_powd_snf(d, 3.0);
 8001d04:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001d08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d0c:	f7fe fc20 	bl	8000550 <__aeabi_dmul>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d1c:	f7fe fa62 	bl	80001e4 <__adddf3>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4614      	mov	r4, r2
 8001d26:	461d      	mov	r5, r3
 8001d28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d2c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001d30:	f7fe fc0e 	bl	8000550 <__aeabi_dmul>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4620      	mov	r0, r4
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	f7fe fa52 	bl	80001e4 <__adddf3>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4690      	mov	r8, r2
 8001d46:	4699      	mov	r9, r3
 8001d48:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8001f10 <Qubic+0x6f8>
 8001d4c:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001d50:	f7ff fc42 	bl	80015d8 <rt_powd_snf>
 8001d54:	ec51 0b10 	vmov	r0, r1, d0
 8001d58:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d5c:	f7fe fbf8 	bl	8000550 <__aeabi_dmul>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
    q_position_data[i] =
 8001d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d6e:	18d4      	adds	r4, r2, r3
        ((q_k1 + qdot_k1 * d) + C2 * C2_tmp) + delta1 * rt_powd_snf(d, 3.0);
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4640      	mov	r0, r8
 8001d76:	4649      	mov	r1, r9
 8001d78:	f7fe fa34 	bl	80001e4 <__adddf3>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
    q_position_data[i] =
 8001d80:	e9c4 2300 	strd	r2, r3, [r4]
  for (i = 0; i < q_acc_tmp_tmp; i++) {
 8001d84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d86:	3301      	adds	r3, #1
 8001d88:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d8a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001d8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	db9e      	blt.n	8001cd0 <Qubic+0x4b8>
  }
  i = q_velocity->size[0] * q_velocity->size[1];
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	6852      	ldr	r2, [r2, #4]
 8001d9c:	3204      	adds	r2, #4
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	fb02 f303 	mul.w	r3, r2, r3
 8001da4:	67bb      	str	r3, [r7, #120]	; 0x78
  q_velocity->size[0] = 1;
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	601a      	str	r2, [r3, #0]
  q_velocity->size[1] = q_acc->size[1];
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	3304      	adds	r3, #4
 8001db8:	6852      	ldr	r2, [r2, #4]
 8001dba:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_velocity, i);
 8001dbc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001dbe:	6938      	ldr	r0, [r7, #16]
 8001dc0:	f000 f8c7 	bl	8001f52 <emxEnsureCapacity_real_T>
  q_velocity_data = q_velocity->data;
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	647b      	str	r3, [r7, #68]	; 0x44
  d = 2.0 * C2;
 8001dca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	f7fe fa07 	bl	80001e4 <__adddf3>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  C2_tmp = 3.0 * delta1;
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	4b4d      	ldr	r3, [pc, #308]	; (8001f18 <Qubic+0x700>)
 8001de4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001de8:	f7fe fbb2 	bl	8000550 <__aeabi_dmul>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  q_acc_tmp_tmp = q_acc->size[1] - 1;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001e00:	2300      	movs	r3, #0
 8001e02:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e04:	e034      	b.n	8001e70 <Qubic+0x658>
    q_velocity_data[i] =
        (qdot_k1 + d * q_acc_data[i]) + C2_tmp * q_velocity_data[i];
 8001e06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001e0c:	4413      	add	r3, r2
 8001e0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e12:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001e16:	f7fe fb9b 	bl	8000550 <__aeabi_dmul>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4610      	mov	r0, r2
 8001e20:	4619      	mov	r1, r3
 8001e22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e26:	f7fe f9dd 	bl	80001e4 <__adddf3>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4690      	mov	r8, r2
 8001e30:	4699      	mov	r9, r3
 8001e32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e38:	4413      	add	r3, r2
 8001e3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e3e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e42:	f7fe fb85 	bl	8000550 <__aeabi_dmul>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	4619      	mov	r1, r3
    q_velocity_data[i] =
 8001e4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e54:	18d4      	adds	r4, r2, r3
        (qdot_k1 + d * q_acc_data[i]) + C2_tmp * q_velocity_data[i];
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4640      	mov	r0, r8
 8001e5c:	4649      	mov	r1, r9
 8001e5e:	f7fe f9c1 	bl	80001e4 <__adddf3>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
    q_velocity_data[i] =
 8001e66:	e9c4 2300 	strd	r2, r3, [r4]
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001e6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e74:	429a      	cmp	r2, r3
 8001e76:	ddc6      	ble.n	8001e06 <Qubic+0x5ee>
  }
  i = q_acc->size[0] * q_acc->size[1];
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	6852      	ldr	r2, [r2, #4]
 8001e82:	3204      	adds	r2, #4
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	fb02 f303 	mul.w	r3, r2, r3
 8001e8a:	67bb      	str	r3, [r7, #120]	; 0x78
  q_acc->size[0] = 1;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_acc, i);
 8001e94:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 f85b 	bl	8001f52 <emxEnsureCapacity_real_T>
  q_acc_data = q_acc->data;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	67fb      	str	r3, [r7, #124]	; 0x7c
  C2_tmp = 6.0 * delta1;
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <Qubic+0x704>)
 8001ea8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001eac:	f7fe fb50 	bl	8000550 <__aeabi_dmul>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001eb8:	2300      	movs	r3, #0
 8001eba:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ebc:	e01c      	b.n	8001ef8 <Qubic+0x6e0>
    q_acc_data[i] = d + C2_tmp * q_acc_data[i];
 8001ebe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ec4:	4413      	add	r3, r2
 8001ec6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ece:	f7fe fb3f 	bl	8000550 <__aeabi_dmul>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	4619      	mov	r1, r3
 8001eda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ee0:	18d4      	adds	r4, r2, r3
 8001ee2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ee6:	f7fe f97d 	bl	80001e4 <__adddf3>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	e9c4 2300 	strd	r2, r3, [r4]
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ef8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001efc:	429a      	cmp	r2, r3
 8001efe:	ddde      	ble.n	8001ebe <Qubic+0x6a6>
  }
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	3784      	adds	r7, #132	; 0x84
 8001f06:	46bd      	mov	sp, r7
 8001f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f0c:	f3af 8000 	nop.w
 8001f10:	00000000 	.word	0x00000000
 8001f14:	40080000 	.word	0x40080000
 8001f18:	40080000 	.word	0x40080000
 8001f1c:	40180000 	.word	0x40180000

08001f20 <emxDestroyArray_real_T>:
/*
 * Arguments    : emxArray_real_T *emxArray
 * Return Type  : void
 */
void emxDestroyArray_real_T(emxArray_real_T *emxArray)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  emxFree_real_T(&emxArray);
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 f878 	bl	8002020 <emxFree_real_T>
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <emxInitArray_real_T>:
 * Arguments    : emxArray_real_T **pEmxArray
 *                int numDimensions
 * Return Type  : void
 */
void emxInitArray_real_T(emxArray_real_T **pEmxArray, int numDimensions)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  emxInit_real_T(pEmxArray, numDimensions);
 8001f42:	6839      	ldr	r1, [r7, #0]
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f895 	bl	8002074 <emxInit_real_T>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <emxEnsureCapacity_real_T>:
 * Arguments    : emxArray_real_T *emxArray
 *                int oldNumel
 * Return Type  : void
 */
void emxEnsureCapacity_real_T(emxArray_real_T *emxArray, int oldNumel)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
  int i;
  int newNumel;
  void *newData;
  if (oldNumel < 0) {
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	da01      	bge.n	8001f66 <emxEnsureCapacity_real_T+0x14>
    oldNumel = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	603b      	str	r3, [r7, #0]
  }
  newNumel = 1;
 8001f66:	2301      	movs	r3, #1
 8001f68:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	e00c      	b.n	8001f8a <emxEnsureCapacity_real_T+0x38>
    newNumel *= emxArray->size[i];
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	fb02 f303 	mul.w	r3, r2, r3
 8001f82:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	3301      	adds	r3, #1
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	dbed      	blt.n	8001f70 <emxEnsureCapacity_real_T+0x1e>
  }
  if (newNumel > emxArray->allocatedSize) {
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	dd3c      	ble.n	8002018 <emxEnsureCapacity_real_T+0xc6>
    i = emxArray->allocatedSize;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	617b      	str	r3, [r7, #20]
    if (i < 16) {
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2b0f      	cmp	r3, #15
 8001fa8:	dc0d      	bgt.n	8001fc6 <emxEnsureCapacity_real_T+0x74>
      i = 16;
 8001faa:	2310      	movs	r3, #16
 8001fac:	617b      	str	r3, [r7, #20]
    }
    while (i < newNumel) {
 8001fae:	e00a      	b.n	8001fc6 <emxEnsureCapacity_real_T+0x74>
      if (i > 1073741823) {
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb6:	db03      	blt.n	8001fc0 <emxEnsureCapacity_real_T+0x6e>
        i = MAX_int32_T;
 8001fb8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	e002      	b.n	8001fc6 <emxEnsureCapacity_real_T+0x74>
      } else {
        i *= 2;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	617b      	str	r3, [r7, #20]
    while (i < newNumel) {
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	dbf0      	blt.n	8001fb0 <emxEnsureCapacity_real_T+0x5e>
      }
    }
    newData = calloc((unsigned int)i, sizeof(double));
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2108      	movs	r1, #8
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f008 f892 	bl	800a0fc <calloc>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	60fb      	str	r3, [r7, #12]
    if (emxArray->data != NULL) {
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d010      	beq.n	8002006 <emxEnsureCapacity_real_T+0xb4>
      memcpy(newData, emxArray->data, sizeof(double) * (unsigned int)oldNumel);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6819      	ldr	r1, [r3, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	461a      	mov	r2, r3
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f008 f8c6 	bl	800a180 <memcpy>
      if (emxArray->canFreeData) {
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	7c1b      	ldrb	r3, [r3, #16]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d004      	beq.n	8002006 <emxEnsureCapacity_real_T+0xb4>
        free(emxArray->data);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f008 f8b5 	bl	800a170 <free>
      }
    }
    emxArray->data = (double *)newData;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	601a      	str	r2, [r3, #0]
    emxArray->allocatedSize = i;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	609a      	str	r2, [r3, #8]
    emxArray->canFreeData = true;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	741a      	strb	r2, [r3, #16]
  }
}
 8002018:	bf00      	nop
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <emxFree_real_T>:
/*
 * Arguments    : emxArray_real_T **pEmxArray
 * Return Type  : void
 */
void emxFree_real_T(emxArray_real_T **pEmxArray)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  if (*pEmxArray != (emxArray_real_T *)NULL) {
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d01d      	beq.n	800206c <emxFree_real_T+0x4c>
    if (((*pEmxArray)->data != (double *)NULL) && (*pEmxArray)->canFreeData) {
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <emxFree_real_T+0x30>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	7c1b      	ldrb	r3, [r3, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <emxFree_real_T+0x30>
      free((*pEmxArray)->data);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f008 f890 	bl	800a170 <free>
    }
    free((*pEmxArray)->size);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	4618      	mov	r0, r3
 8002058:	f008 f88a 	bl	800a170 <free>
    free(*pEmxArray);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f008 f885 	bl	800a170 <free>
    *pEmxArray = (emxArray_real_T *)NULL;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
  }
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <emxInit_real_T>:
 * Arguments    : emxArray_real_T **pEmxArray
 *                int numDimensions
 * Return Type  : void
 */
void emxInit_real_T(emxArray_real_T **pEmxArray, int numDimensions)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  emxArray_real_T *emxArray;
  int i;
  *pEmxArray = (emxArray_real_T *)malloc(sizeof(emxArray_real_T));
 800207e:	2014      	movs	r0, #20
 8002080:	f008 f86e 	bl	800a160 <malloc>
 8002084:	4603      	mov	r3, r0
 8002086:	461a      	mov	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	601a      	str	r2, [r3, #0]
  emxArray = *pEmxArray;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	60bb      	str	r3, [r7, #8]
  emxArray->data = (double *)NULL;
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
  emxArray->numDimensions = numDimensions;
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	60da      	str	r2, [r3, #12]
  emxArray->size = (int *)malloc(sizeof(int) * (unsigned int)numDimensions);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f008 f85c 	bl	800a160 <malloc>
 80020a8:	4603      	mov	r3, r0
 80020aa:	461a      	mov	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	605a      	str	r2, [r3, #4]
  emxArray->allocatedSize = 0;
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  emxArray->canFreeData = true;
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2201      	movs	r2, #1
 80020ba:	741a      	strb	r2, [r3, #16]
  for (i = 0; i < numDimensions; i++) {
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	e009      	b.n	80020d6 <emxInit_real_T+0x62>
    emxArray->size[i] = 0;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
  for (i = 0; i < numDimensions; i++) {
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	3301      	adds	r3, #1
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	dbf1      	blt.n	80020c2 <emxInit_real_T+0x4e>
  }
}
 80020de:	bf00      	nop
 80020e0:	bf00      	nop
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80020ec:	f3bf 8f4f 	dsb	sy
}
 80020f0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <__NVIC_SystemReset+0x24>)
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80020fa:	4904      	ldr	r1, [pc, #16]	; (800210c <__NVIC_SystemReset+0x24>)
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <__NVIC_SystemReset+0x28>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002102:	f3bf 8f4f 	dsb	sy
}
 8002106:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002108:	bf00      	nop
 800210a:	e7fd      	b.n	8002108 <__NVIC_SystemReset+0x20>
 800210c:	e000ed00 	.word	0xe000ed00
 8002110:	05fa0004 	.word	0x05fa0004

08002114 <argInit_real_T>:
/* Function Definitions */
/*
 * Arguments    : void
 * Return Type  : double
 */
static double argInit_real_T(void) {
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
	return 0.0;
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	f04f 0300 	mov.w	r3, #0
 8002120:	ec43 2b17 	vmov	d7, r2, r3
}
 8002124:	eeb0 0a47 	vmov.f32	s0, s14
 8002128:	eef0 0a67 	vmov.f32	s1, s15
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	0000      	movs	r0, r0
	...

08002138 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800213c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800213e:	f002 fef3 	bl	8004f28 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002142:	f000 fb27 	bl	8002794 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002146:	f000 fe37 	bl	8002db8 <MX_GPIO_Init>
	MX_DMA_Init();
 800214a:	f000 fdff 	bl	8002d4c <MX_DMA_Init>
	MX_USART2_UART_Init();
 800214e:	f000 fdd1 	bl	8002cf4 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8002152:	f000 fc15 	bl	8002980 <MX_TIM2_Init>
	MX_TIM5_Init();
 8002156:	f000 fd2b 	bl	8002bb0 <MX_TIM5_Init>
	MX_ADC1_Init();
 800215a:	f000 fb83 	bl	8002864 <MX_ADC1_Init>
	MX_I2C1_Init();
 800215e:	f000 fbe1 	bl	8002924 <MX_I2C1_Init>
	MX_TIM11_Init();
 8002162:	f000 fd73 	bl	8002c4c <MX_TIM11_Init>
	MX_TIM4_Init();
 8002166:	f000 fcad 	bl	8002ac4 <MX_TIM4_Init>
	MX_TIM3_Init();
 800216a:	f000 fc5d 	bl	8002a28 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	start_p = 0;
 800216e:	4b25      	ldr	r3, [pc, #148]	; (8002204 <main+0xcc>)
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
	stop_p = 15;
 8002176:	4b24      	ldr	r3, [pc, #144]	; (8002208 <main+0xd0>)
 8002178:	4a24      	ldr	r2, [pc, #144]	; (800220c <main+0xd4>)
 800217a:	601a      	str	r2, [r3, #0]
	start_v = 0;
 800217c:	4b24      	ldr	r3, [pc, #144]	; (8002210 <main+0xd8>)
 800217e:	f04f 0200 	mov.w	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
	stop_v = 0;
 8002184:	4b23      	ldr	r3, [pc, #140]	; (8002214 <main+0xdc>)
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
	timecycle = 2;
 800218c:	4b22      	ldr	r3, [pc, #136]	; (8002218 <main+0xe0>)
 800218e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002192:	601a      	str	r2, [r3, #0]
	main_Qubic();
 8002194:	f002 fa98 	bl	80046c8 <main_Qubic>
	transformRectangleAndPointsPlace();
 8002198:	f001 f92c 	bl	80033f4 <transformRectangleAndPointsPlace>
	HAL_ADC_Start_DMA(&hadc1, Joystick_position, 2);
 800219c:	2202      	movs	r2, #2
 800219e:	491f      	ldr	r1, [pc, #124]	; (800221c <main+0xe4>)
 80021a0:	481f      	ldr	r0, [pc, #124]	; (8002220 <main+0xe8>)
 80021a2:	f002 ff77 	bl	8005094 <HAL_ADC_Start_DMA>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80021a6:	2104      	movs	r1, #4
 80021a8:	481e      	ldr	r0, [pc, #120]	; (8002224 <main+0xec>)
 80021aa:	f005 fc1d 	bl	80079e8 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80021ae:	2100      	movs	r1, #0
 80021b0:	481d      	ldr	r0, [pc, #116]	; (8002228 <main+0xf0>)
 80021b2:	f005 f9e7 	bl	8007584 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim5);
 80021b6:	481d      	ldr	r0, [pc, #116]	; (800222c <main+0xf4>)
 80021b8:	f005 f85c 	bl	8007274 <HAL_TIM_Base_Start>
	hmodbus.huart = &huart2;
 80021bc:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <main+0xf8>)
 80021be:	4a1d      	ldr	r2, [pc, #116]	; (8002234 <main+0xfc>)
 80021c0:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim11;
 80021c2:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <main+0xf8>)
 80021c4:	4a1c      	ldr	r2, [pc, #112]	; (8002238 <main+0x100>)
 80021c6:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 80021c8:	4b19      	ldr	r3, [pc, #100]	; (8002230 <main+0xf8>)
 80021ca:	2215      	movs	r2, #21
 80021cc:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 70;
 80021ce:	4b18      	ldr	r3, [pc, #96]	; (8002230 <main+0xf8>)
 80021d0:	2246      	movs	r2, #70	; 0x46
 80021d2:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 80021d4:	4919      	ldr	r1, [pc, #100]	; (800223c <main+0x104>)
 80021d6:	4816      	ldr	r0, [pc, #88]	; (8002230 <main+0xf8>)
 80021d8:	f7fe fef4 	bl	8000fc4 <Modbus_init>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
//	  limitsensor();
		if (starttray == 1) {
 80021dc:	4b18      	ldr	r3, [pc, #96]	; (8002240 <main+0x108>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d104      	bne.n	80021ee <main+0xb6>
			starttray = 0;
 80021e4:	4b16      	ldr	r3, [pc, #88]	; (8002240 <main+0x108>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
			transformRectangleAndPointsPlace();
 80021ea:	f001 f903 	bl	80033f4 <transformRectangleAndPointsPlace>

		}
		Modbus_Protocal_Worker();
 80021ee:	f7fe ff75 	bl	80010dc <Modbus_Protocal_Worker>
		flowmodbus();
 80021f2:	f001 fb81 	bl	80038f8 <flowmodbus>

		if (SoftReset == 1) {
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <main+0x10c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d124      	bne.n	8002248 <main+0x110>
			NVIC_SystemReset();
 80021fe:	f7ff ff73 	bl	80020e8 <__NVIC_SystemReset>
 8002202:	bf00      	nop
 8002204:	20000948 	.word	0x20000948
 8002208:	2000094c 	.word	0x2000094c
 800220c:	41700000 	.word	0x41700000
 8002210:	20000950 	.word	0x20000950
 8002214:	20000954 	.word	0x20000954
 8002218:	20000958 	.word	0x20000958
 800221c:	2000128c 	.word	0x2000128c
 8002220:	200003e8 	.word	0x200003e8
 8002224:	200004e4 	.word	0x200004e4
 8002228:	2000064c 	.word	0x2000064c
 800222c:	20000700 	.word	0x20000700
 8002230:	20000d0c 	.word	0x20000d0c
 8002234:	20000868 	.word	0x20000868
 8002238:	200007b4 	.word	0x200007b4
 800223c:	200011e4 	.word	0x200011e4
 8002240:	20000944 	.word	0x20000944
 8002244:	20001270 	.word	0x20001270
//	    	  timeI2C = HAL_GetTick() + 10;
//	    	  I2C_read_status(data_read);
//	    	  I2C_all();
//	      }
		//int pos = (int) registerFrame[17].U16;
		if (HAL_GetTick() >= timemodbus) { // heartbeat
 8002248:	f002 fed4 	bl	8004ff4 <HAL_GetTick>
 800224c:	4603      	mov	r3, r0
 800224e:	2200      	movs	r2, #0
 8002250:	461c      	mov	r4, r3
 8002252:	4615      	mov	r5, r2
 8002254:	4bbd      	ldr	r3, [pc, #756]	; (800254c <main+0x414>)
 8002256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225a:	4294      	cmp	r4, r2
 800225c:	eb75 0303 	sbcs.w	r3, r5, r3
 8002260:	d343      	bcc.n	80022ea <main+0x1b2>
			timemodbus = HAL_GetTick() + 0.5;
 8002262:	f002 fec7 	bl	8004ff4 <HAL_GetTick>
 8002266:	4603      	mov	r3, r0
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe f8f7 	bl	800045c <__aeabi_ui2d>
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	4bb7      	ldr	r3, [pc, #732]	; (8002550 <main+0x418>)
 8002274:	f7fd ffb6 	bl	80001e4 <__adddf3>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	f7fe fca6 	bl	8000bd0 <__aeabi_d2ulz>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	49b0      	ldr	r1, [pc, #704]	; (800254c <main+0x414>)
 800228a:	e9c1 2300 	strd	r2, r3, [r1]
			registerFrame[0].U16 = 22881;
 800228e:	4bb1      	ldr	r3, [pc, #708]	; (8002554 <main+0x41c>)
 8002290:	f645 1261 	movw	r2, #22881	; 0x5961
 8002294:	801a      	strh	r2, [r3, #0]
			registerFrame[17].U16 = (int) (ReadDegree - 350) * 10;
 8002296:	4bb0      	ldr	r3, [pc, #704]	; (8002558 <main+0x420>)
 8002298:	edd3 7a00 	vldr	s15, [r3]
 800229c:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800255c <main+0x424>
 80022a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022a8:	ee17 3a90 	vmov	r3, s15
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	0092      	lsls	r2, r2, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	4ba6      	ldr	r3, [pc, #664]	; (8002554 <main+0x41c>)
 80022ba:	845a      	strh	r2, [r3, #34]	; 0x22
			registerFrame[18].U16 = abs(speed);
 80022bc:	4ba8      	ldr	r3, [pc, #672]	; (8002560 <main+0x428>)
 80022be:	edd3 7a00 	vldr	s15, [r3]
 80022c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022c6:	ee17 3a90 	vmov	r3, s15
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	bfb8      	it	lt
 80022ce:	425b      	neglt	r3, r3
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	4ba0      	ldr	r3, [pc, #640]	; (8002554 <main+0x41c>)
 80022d4:	849a      	strh	r2, [r3, #36]	; 0x24
			registerFrame[19].U16 = acceleration;
 80022d6:	4ba3      	ldr	r3, [pc, #652]	; (8002564 <main+0x42c>)
 80022d8:	edd3 7a00 	vldr	s15, [r3]
 80022dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022e0:	ee17 3a90 	vmov	r3, s15
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	4b9b      	ldr	r3, [pc, #620]	; (8002554 <main+0x41c>)
 80022e8:	84da      	strh	r2, [r3, #38]	; 0x26
		}

		if (HAL_GetTick() >= timestampTrajact) {
 80022ea:	f002 fe83 	bl	8004ff4 <HAL_GetTick>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2200      	movs	r2, #0
 80022f2:	4698      	mov	r8, r3
 80022f4:	4691      	mov	r9, r2
 80022f6:	4b9c      	ldr	r3, [pc, #624]	; (8002568 <main+0x430>)
 80022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fc:	4590      	cmp	r8, r2
 80022fe:	eb79 0303 	sbcs.w	r3, r9, r3
 8002302:	d35c      	bcc.n	80023be <main+0x286>
			timestampTrajact = HAL_GetTick() + 0.5;
 8002304:	f002 fe76 	bl	8004ff4 <HAL_GetTick>
 8002308:	4603      	mov	r3, r0
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe f8a6 	bl	800045c <__aeabi_ui2d>
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	4b8e      	ldr	r3, [pc, #568]	; (8002550 <main+0x418>)
 8002316:	f7fd ff65 	bl	80001e4 <__adddf3>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4610      	mov	r0, r2
 8002320:	4619      	mov	r1, r3
 8002322:	f7fe fc55 	bl	8000bd0 <__aeabi_d2ulz>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	498f      	ldr	r1, [pc, #572]	; (8002568 <main+0x430>)
 800232c:	e9c1 2300 	strd	r2, r3, [r1]
			if (indexposition < (timecycle * 2000) - 1 && path == 1) {
 8002330:	4b8e      	ldr	r3, [pc, #568]	; (800256c <main+0x434>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	ee07 3a90 	vmov	s15, r3
 8002338:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800233c:	4b8c      	ldr	r3, [pc, #560]	; (8002570 <main+0x438>)
 800233e:	edd3 7a00 	vldr	s15, [r3]
 8002342:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8002574 <main+0x43c>
 8002346:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800234a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800234e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002352:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800235a:	d530      	bpl.n	80023be <main+0x286>
 800235c:	4b86      	ldr	r3, [pc, #536]	; (8002578 <main+0x440>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d12c      	bne.n	80023be <main+0x286>
				positionTraject = q_positionN->data[indexposition];
 8002364:	4b85      	ldr	r3, [pc, #532]	; (800257c <main+0x444>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	4b80      	ldr	r3, [pc, #512]	; (800256c <main+0x434>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002376:	4610      	mov	r0, r2
 8002378:	4619      	mov	r1, r3
 800237a:	f7fe fbc1 	bl	8000b00 <__aeabi_d2f>
 800237e:	4603      	mov	r3, r0
 8002380:	4a7f      	ldr	r2, [pc, #508]	; (8002580 <main+0x448>)
 8002382:	6013      	str	r3, [r2, #0]
				velocityTraject = q_velocityN->data[indexposition];
 8002384:	4b7f      	ldr	r3, [pc, #508]	; (8002584 <main+0x44c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	4b78      	ldr	r3, [pc, #480]	; (800256c <main+0x434>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4413      	add	r3, r2
 8002392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002396:	4610      	mov	r0, r2
 8002398:	4619      	mov	r1, r3
 800239a:	f7fe fbb1 	bl	8000b00 <__aeabi_d2f>
 800239e:	4603      	mov	r3, r0
 80023a0:	4a79      	ldr	r2, [pc, #484]	; (8002588 <main+0x450>)
 80023a2:	6013      	str	r3, [r2, #0]
				SetDegree = positionTraject;
 80023a4:	4b76      	ldr	r3, [pc, #472]	; (8002580 <main+0x448>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a78      	ldr	r2, [pc, #480]	; (800258c <main+0x454>)
 80023aa:	6013      	str	r3, [r2, #0]
				SetVelocity = velocityTraject;
 80023ac:	4b76      	ldr	r3, [pc, #472]	; (8002588 <main+0x450>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a77      	ldr	r2, [pc, #476]	; (8002590 <main+0x458>)
 80023b2:	6013      	str	r3, [r2, #0]
				indexposition += 1;
 80023b4:	4b6d      	ldr	r3, [pc, #436]	; (800256c <main+0x434>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	3301      	adds	r3, #1
 80023ba:	4a6c      	ldr	r2, [pc, #432]	; (800256c <main+0x434>)
 80023bc:	6013      	str	r3, [r2, #0]
			}
		}
		if(testgo == 1)
 80023be:	4b75      	ldr	r3, [pc, #468]	; (8002594 <main+0x45c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d105      	bne.n	80023d2 <main+0x29a>
		{
			Mobus = Run_TrayMode;
 80023c6:	4b74      	ldr	r3, [pc, #464]	; (8002598 <main+0x460>)
 80023c8:	2205      	movs	r2, #5
 80023ca:	701a      	strb	r2, [r3, #0]
			testgo = 0;
 80023cc:	4b71      	ldr	r3, [pc, #452]	; (8002594 <main+0x45c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
		}
		if (HAL_GetTick() >= timestamp) {
 80023d2:	f002 fe0f 	bl	8004ff4 <HAL_GetTick>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2200      	movs	r2, #0
 80023da:	469a      	mov	sl, r3
 80023dc:	4693      	mov	fp, r2
 80023de:	4b6f      	ldr	r3, [pc, #444]	; (800259c <main+0x464>)
 80023e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e4:	4592      	cmp	sl, r2
 80023e6:	eb7b 0303 	sbcs.w	r3, fp, r3
 80023ea:	f4ff aef7 	bcc.w	80021dc <main+0xa4>
			timestamp = HAL_GetTick() + 0.5;
 80023ee:	f002 fe01 	bl	8004ff4 <HAL_GetTick>
 80023f2:	4603      	mov	r3, r0
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fe f831 	bl	800045c <__aeabi_ui2d>
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	4b54      	ldr	r3, [pc, #336]	; (8002550 <main+0x418>)
 8002400:	f7fd fef0 	bl	80001e4 <__adddf3>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4610      	mov	r0, r2
 800240a:	4619      	mov	r1, r3
 800240c:	f7fe fbe0 	bl	8000bd0 <__aeabi_d2ulz>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4961      	ldr	r1, [pc, #388]	; (800259c <main+0x464>)
 8002416:	e9c1 2300 	strd	r2, r3, [r1]
			//abc++;
			QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2); // Read QEI
 800241a:	4b61      	ldr	r3, [pc, #388]	; (80025a0 <main+0x468>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	4a60      	ldr	r2, [pc, #384]	; (80025a4 <main+0x46c>)
 8002422:	6013      	str	r3, [r2, #0]
			ReadDegree = (QEIReadRaw / 8192.0 * 360) * 160 / 360; // pulse to degree
 8002424:	4b5f      	ldr	r3, [pc, #380]	; (80025a4 <main+0x46c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe f817 	bl	800045c <__aeabi_ui2d>
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	4b5d      	ldr	r3, [pc, #372]	; (80025a8 <main+0x470>)
 8002434:	f7fe f9b6 	bl	80007a4 <__aeabi_ddiv>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4610      	mov	r0, r2
 800243e:	4619      	mov	r1, r3
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	4b59      	ldr	r3, [pc, #356]	; (80025ac <main+0x474>)
 8002446:	f7fe f883 	bl	8000550 <__aeabi_dmul>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	4b56      	ldr	r3, [pc, #344]	; (80025b0 <main+0x478>)
 8002458:	f7fe f87a 	bl	8000550 <__aeabi_dmul>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	4b50      	ldr	r3, [pc, #320]	; (80025ac <main+0x474>)
 800246a:	f7fe f99b 	bl	80007a4 <__aeabi_ddiv>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4610      	mov	r0, r2
 8002474:	4619      	mov	r1, r3
 8002476:	f7fe fb43 	bl	8000b00 <__aeabi_d2f>
 800247a:	4603      	mov	r3, r0
 800247c:	4a36      	ldr	r2, [pc, #216]	; (8002558 <main+0x420>)
 800247e:	6013      	str	r3, [r2, #0]
			error = SetDegree - ReadDegree;
 8002480:	4b42      	ldr	r3, [pc, #264]	; (800258c <main+0x454>)
 8002482:	ed93 7a00 	vldr	s14, [r3]
 8002486:	4b34      	ldr	r3, [pc, #208]	; (8002558 <main+0x420>)
 8002488:	edd3 7a00 	vldr	s15, [r3]
 800248c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002490:	4b48      	ldr	r3, [pc, #288]	; (80025b4 <main+0x47c>)
 8002492:	edc3 7a00 	vstr	s15, [r3]
			velocity();
 8002496:	f002 f831 	bl	80044fc <velocity>
			accelerate();
 800249a:	f002 f897 	bl	80045cc <accelerate>
			speed = ((QEIData.QEIVelocity / 8192.0) * 360.0) * 160 / 360;
 800249e:	4b46      	ldr	r3, [pc, #280]	; (80025b8 <main+0x480>)
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fd fffc 	bl	80004a0 <__aeabi_f2d>
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	4b3e      	ldr	r3, [pc, #248]	; (80025a8 <main+0x470>)
 80024ae:	f7fe f979 	bl	80007a4 <__aeabi_ddiv>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4610      	mov	r0, r2
 80024b8:	4619      	mov	r1, r3
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	4b3b      	ldr	r3, [pc, #236]	; (80025ac <main+0x474>)
 80024c0:	f7fe f846 	bl	8000550 <__aeabi_dmul>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4610      	mov	r0, r2
 80024ca:	4619      	mov	r1, r3
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	4b37      	ldr	r3, [pc, #220]	; (80025b0 <main+0x478>)
 80024d2:	f7fe f83d 	bl	8000550 <__aeabi_dmul>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	4610      	mov	r0, r2
 80024dc:	4619      	mov	r1, r3
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	4b32      	ldr	r3, [pc, #200]	; (80025ac <main+0x474>)
 80024e4:	f7fe f95e 	bl	80007a4 <__aeabi_ddiv>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	4610      	mov	r0, r2
 80024ee:	4619      	mov	r1, r3
 80024f0:	f7fe fb06 	bl	8000b00 <__aeabi_d2f>
 80024f4:	4603      	mov	r3, r0
 80024f6:	4a1a      	ldr	r2, [pc, #104]	; (8002560 <main+0x428>)
 80024f8:	6013      	str	r3, [r2, #0]
			acceleration = QEIAcc.QEIVelocity;
 80024fa:	4b30      	ldr	r3, [pc, #192]	; (80025bc <main+0x484>)
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	4a19      	ldr	r2, [pc, #100]	; (8002564 <main+0x42c>)
 8002500:	6013      	str	r3, [r2, #0]
			DegreeFeedback = control_interrupt(); // PID function
 8002502:	f001 ff27 	bl	8004354 <control_interrupt>
 8002506:	eef0 7a40 	vmov.f32	s15, s0
 800250a:	4b2d      	ldr	r3, [pc, #180]	; (80025c0 <main+0x488>)
 800250c:	edc3 7a00 	vstr	s15, [r3]

			if (velocityTraject == 0) {
 8002510:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <main+0x450>)
 8002512:	edd3 7a00 	vldr	s15, [r3]
 8002516:	eef5 7a40 	vcmp.f32	s15, #0.0
 800251a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251e:	d103      	bne.n	8002528 <main+0x3f0>
				s2 = 0;
 8002520:	4b28      	ldr	r3, [pc, #160]	; (80025c4 <main+0x48c>)
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
			}
			if (Joystick_Control == 1) {
 8002528:	4b27      	ldr	r3, [pc, #156]	; (80025c8 <main+0x490>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b01      	cmp	r3, #1
 800252e:	f040 8081 	bne.w	8002634 <main+0x4fc>
				DegreeFeedback = 0;
 8002532:	4b23      	ldr	r3, [pc, #140]	; (80025c0 <main+0x488>)
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
				s = 0;
 800253a:	4b24      	ldr	r3, [pc, #144]	; (80025cc <main+0x494>)
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
				s2 = 0;
 8002542:	4b20      	ldr	r3, [pc, #128]	; (80025c4 <main+0x48c>)
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	e041      	b.n	80025d0 <main+0x498>
 800254c:	20001328 	.word	0x20001328
 8002550:	3fe00000 	.word	0x3fe00000
 8002554:	200011e4 	.word	0x200011e4
 8002558:	20001308 	.word	0x20001308
 800255c:	43af0000 	.word	0x43af0000
 8002560:	20001274 	.word	0x20001274
 8002564:	20001278 	.word	0x20001278
 8002568:	20001330 	.word	0x20001330
 800256c:	200012dc 	.word	0x200012dc
 8002570:	20000958 	.word	0x20000958
 8002574:	44fa0000 	.word	0x44fa0000
 8002578:	2000127c 	.word	0x2000127c
 800257c:	200012d4 	.word	0x200012d4
 8002580:	20001284 	.word	0x20001284
 8002584:	200012d0 	.word	0x200012d0
 8002588:	20001288 	.word	0x20001288
 800258c:	2000130c 	.word	0x2000130c
 8002590:	20000344 	.word	0x20000344
 8002594:	20001318 	.word	0x20001318
 8002598:	20000d08 	.word	0x20000d08
 800259c:	20001320 	.word	0x20001320
 80025a0:	200004e4 	.word	0x200004e4
 80025a4:	20001280 	.word	0x20001280
 80025a8:	40c00000 	.word	0x40c00000
 80025ac:	40768000 	.word	0x40768000
 80025b0:	40640000 	.word	0x40640000
 80025b4:	20001314 	.word	0x20001314
 80025b8:	20001298 	.word	0x20001298
 80025bc:	200012b0 	.word	0x200012b0
 80025c0:	20001310 	.word	0x20001310
 80025c4:	200012f4 	.word	0x200012f4
 80025c8:	20000330 	.word	0x20000330
 80025cc:	200012e8 	.word	0x200012e8
				error = 0;
 80025d0:	4b63      	ldr	r3, [pc, #396]	; (8002760 <main+0x628>)
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
				error2 = 0;
 80025d8:	4b62      	ldr	r3, [pc, #392]	; (8002764 <main+0x62c>)
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
				if (Joystick_position[0] >= 3150) {
 80025e0:	4b61      	ldr	r3, [pc, #388]	; (8002768 <main+0x630>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f640 424d 	movw	r2, #3149	; 0xc4d
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d90a      	bls.n	8002602 <main+0x4ca>
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 16383); // 20 %
 80025ec:	4b5f      	ldr	r3, [pc, #380]	; (800276c <main+0x634>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80025f4:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80025f6:	2201      	movs	r2, #1
 80025f8:	2180      	movs	r1, #128	; 0x80
 80025fa:	485d      	ldr	r0, [pc, #372]	; (8002770 <main+0x638>)
 80025fc:	f003 ffc4 	bl	8006588 <HAL_GPIO_WritePin>
 8002600:	e5ec      	b.n	80021dc <main+0xa4>
				} else if (Joystick_position[0] <= 100) {
 8002602:	4b59      	ldr	r3, [pc, #356]	; (8002768 <main+0x630>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b64      	cmp	r3, #100	; 0x64
 8002608:	d80a      	bhi.n	8002620 <main+0x4e8>
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 16383); // 20 %
 800260a:	4b58      	ldr	r3, [pc, #352]	; (800276c <main+0x634>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8002612:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8002614:	2200      	movs	r2, #0
 8002616:	2180      	movs	r1, #128	; 0x80
 8002618:	4855      	ldr	r0, [pc, #340]	; (8002770 <main+0x638>)
 800261a:	f003 ffb5 	bl	8006588 <HAL_GPIO_WritePin>
 800261e:	e5dd      	b.n	80021dc <main+0xa4>
				} else {
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8002620:	4b52      	ldr	r3, [pc, #328]	; (800276c <main+0x634>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2200      	movs	r2, #0
 8002626:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8002628:	2200      	movs	r2, #0
 800262a:	2180      	movs	r1, #128	; 0x80
 800262c:	4850      	ldr	r0, [pc, #320]	; (8002770 <main+0x638>)
 800262e:	f003 ffab 	bl	8006588 <HAL_GPIO_WritePin>
 8002632:	e5d3      	b.n	80021dc <main+0xa4>
				}
			} else if (Joystick_Control == 0) {
 8002634:	4b4f      	ldr	r3, [pc, #316]	; (8002774 <main+0x63c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	f47f adcf 	bne.w	80021dc <main+0xa4>
				if (SetDegree < 0) {
 800263e:	4b4e      	ldr	r3, [pc, #312]	; (8002778 <main+0x640>)
 8002640:	edd3 7a00 	vldr	s15, [r3]
 8002644:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264c:	d503      	bpl.n	8002656 <main+0x51e>
					SetDegree = 0; // minimum value
 800264e:	4b4a      	ldr	r3, [pc, #296]	; (8002778 <main+0x640>)
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
				}
				if (SetDegree > 700) {
 8002656:	4b48      	ldr	r3, [pc, #288]	; (8002778 <main+0x640>)
 8002658:	edd3 7a00 	vldr	s15, [r3]
 800265c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800277c <main+0x644>
 8002660:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002668:	dd02      	ble.n	8002670 <main+0x538>
					SetDegree = 700; // maximum value
 800266a:	4b43      	ldr	r3, [pc, #268]	; (8002778 <main+0x640>)
 800266c:	4a44      	ldr	r2, [pc, #272]	; (8002780 <main+0x648>)
 800266e:	601a      	str	r2, [r3, #0]
				}

				if (error > 0) { // setpoint > read_encoder
 8002670:	4b3b      	ldr	r3, [pc, #236]	; (8002760 <main+0x628>)
 8002672:	edd3 7a00 	vldr	s15, [r3]
 8002676:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800267a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267e:	dd2e      	ble.n	80026de <main+0x5a6>
					SetVelocity = abs(SetVelocity);
 8002680:	4b40      	ldr	r3, [pc, #256]	; (8002784 <main+0x64c>)
 8002682:	edd3 7a00 	vldr	s15, [r3]
 8002686:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800268a:	ee17 3a90 	vmov	r3, s15
 800268e:	2b00      	cmp	r3, #0
 8002690:	bfb8      	it	lt
 8002692:	425b      	neglt	r3, r3
 8002694:	ee07 3a90 	vmov	s15, r3
 8002698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800269c:	4b39      	ldr	r3, [pc, #228]	; (8002784 <main+0x64c>)
 800269e:	edc3 7a00 	vstr	s15, [r3]
					if (error < 0.2) {
 80026a2:	4b2f      	ldr	r3, [pc, #188]	; (8002760 <main+0x628>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fd fefa 	bl	80004a0 <__aeabi_f2d>
 80026ac:	a32a      	add	r3, pc, #168	; (adr r3, 8002758 <main+0x620>)
 80026ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b2:	f7fe f9bf 	bl	8000a34 <__aeabi_dcmplt>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00b      	beq.n	80026d4 <main+0x59c>
						DegreeFeedback = 0; // Limit Position
 80026bc:	4b32      	ldr	r3, [pc, #200]	; (8002788 <main+0x650>)
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
						s = 0;
 80026c4:	4b31      	ldr	r3, [pc, #196]	; (800278c <main+0x654>)
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
						s2 = 0;
 80026cc:	4b30      	ldr	r3, [pc, #192]	; (8002790 <main+0x658>)
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
					}
					//__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, DegreeFeedback);
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80026d4:	2200      	movs	r2, #0
 80026d6:	2180      	movs	r1, #128	; 0x80
 80026d8:	4825      	ldr	r0, [pc, #148]	; (8002770 <main+0x638>)
 80026da:	f003 ff55 	bl	8006588 <HAL_GPIO_WritePin>
				}
				if (error < 0) { // setpoint < read_encoder
 80026de:	4b20      	ldr	r3, [pc, #128]	; (8002760 <main+0x628>)
 80026e0:	edd3 7a00 	vldr	s15, [r3]
 80026e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ec:	d532      	bpl.n	8002754 <main+0x61c>
					if (SetVelocity > 0)
 80026ee:	4b25      	ldr	r3, [pc, #148]	; (8002784 <main+0x64c>)
 80026f0:	edd3 7a00 	vldr	s15, [r3]
 80026f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fc:	dd07      	ble.n	800270e <main+0x5d6>
						SetVelocity = -SetVelocity;
 80026fe:	4b21      	ldr	r3, [pc, #132]	; (8002784 <main+0x64c>)
 8002700:	edd3 7a00 	vldr	s15, [r3]
 8002704:	eef1 7a67 	vneg.f32	s15, s15
 8002708:	4b1e      	ldr	r3, [pc, #120]	; (8002784 <main+0x64c>)
 800270a:	edc3 7a00 	vstr	s15, [r3]
					if (error * -1 < 0.2) {
 800270e:	4b14      	ldr	r3, [pc, #80]	; (8002760 <main+0x628>)
 8002710:	edd3 7a00 	vldr	s15, [r3]
 8002714:	eef1 7a67 	vneg.f32	s15, s15
 8002718:	ee17 3a90 	vmov	r3, s15
 800271c:	4618      	mov	r0, r3
 800271e:	f7fd febf 	bl	80004a0 <__aeabi_f2d>
 8002722:	a30d      	add	r3, pc, #52	; (adr r3, 8002758 <main+0x620>)
 8002724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002728:	f7fe f984 	bl	8000a34 <__aeabi_dcmplt>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00b      	beq.n	800274a <main+0x612>
						DegreeFeedback = 0; // Limit Position
 8002732:	4b15      	ldr	r3, [pc, #84]	; (8002788 <main+0x650>)
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
						s = 0;
 800273a:	4b14      	ldr	r3, [pc, #80]	; (800278c <main+0x654>)
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
						s2 = 0;
 8002742:	4b13      	ldr	r3, [pc, #76]	; (8002790 <main+0x658>)
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
					}
					//__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, DegreeFeedback * -1);
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800274a:	2201      	movs	r2, #1
 800274c:	2180      	movs	r1, #128	; 0x80
 800274e:	4808      	ldr	r0, [pc, #32]	; (8002770 <main+0x638>)
 8002750:	f003 ff1a 	bl	8006588 <HAL_GPIO_WritePin>
		if (starttray == 1) {
 8002754:	e542      	b.n	80021dc <main+0xa4>
 8002756:	bf00      	nop
 8002758:	9999999a 	.word	0x9999999a
 800275c:	3fc99999 	.word	0x3fc99999
 8002760:	20001314 	.word	0x20001314
 8002764:	200012f8 	.word	0x200012f8
 8002768:	2000128c 	.word	0x2000128c
 800276c:	2000064c 	.word	0x2000064c
 8002770:	40020000 	.word	0x40020000
 8002774:	20000330 	.word	0x20000330
 8002778:	2000130c 	.word	0x2000130c
 800277c:	442f0000 	.word	0x442f0000
 8002780:	442f0000 	.word	0x442f0000
 8002784:	20000344 	.word	0x20000344
 8002788:	20001310 	.word	0x20001310
 800278c:	200012e8 	.word	0x200012e8
 8002790:	200012f4 	.word	0x200012f4

08002794 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002794:	b580      	push	{r7, lr}
 8002796:	b094      	sub	sp, #80	; 0x50
 8002798:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800279a:	f107 0320 	add.w	r3, r7, #32
 800279e:	2230      	movs	r2, #48	; 0x30
 80027a0:	2100      	movs	r1, #0
 80027a2:	4618      	mov	r0, r3
 80027a4:	f007 fcfa 	bl	800a19c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80027a8:	f107 030c 	add.w	r3, r7, #12
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80027b8:	2300      	movs	r3, #0
 80027ba:	60bb      	str	r3, [r7, #8]
 80027bc:	4b27      	ldr	r3, [pc, #156]	; (800285c <SystemClock_Config+0xc8>)
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	4a26      	ldr	r2, [pc, #152]	; (800285c <SystemClock_Config+0xc8>)
 80027c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c6:	6413      	str	r3, [r2, #64]	; 0x40
 80027c8:	4b24      	ldr	r3, [pc, #144]	; (800285c <SystemClock_Config+0xc8>)
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027d4:	2300      	movs	r3, #0
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	4b21      	ldr	r3, [pc, #132]	; (8002860 <SystemClock_Config+0xcc>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a20      	ldr	r2, [pc, #128]	; (8002860 <SystemClock_Config+0xcc>)
 80027de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	4b1e      	ldr	r3, [pc, #120]	; (8002860 <SystemClock_Config+0xcc>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027ec:	607b      	str	r3, [r7, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027f0:	2302      	movs	r3, #2
 80027f2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027f4:	2301      	movs	r3, #1
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027f8:	2310      	movs	r3, #16
 80027fa:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027fc:	2302      	movs	r3, #2
 80027fe:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002800:	2300      	movs	r3, #0
 8002802:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002804:	2308      	movs	r3, #8
 8002806:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8002808:	2364      	movs	r3, #100	; 0x64
 800280a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800280c:	2302      	movs	r3, #2
 800280e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002810:	2304      	movs	r3, #4
 8002812:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002814:	f107 0320 	add.w	r3, r7, #32
 8002818:	4618      	mov	r0, r3
 800281a:	f004 f837 	bl	800688c <HAL_RCC_OscConfig>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <SystemClock_Config+0x94>
		Error_Handler();
 8002824:	f001 ffd6 	bl	80047d4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002828:	230f      	movs	r3, #15
 800282a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800282c:	2302      	movs	r3, #2
 800282e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002838:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 800283e:	f107 030c 	add.w	r3, r7, #12
 8002842:	2103      	movs	r1, #3
 8002844:	4618      	mov	r0, r3
 8002846:	f004 fa99 	bl	8006d7c <HAL_RCC_ClockConfig>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <SystemClock_Config+0xc0>
		Error_Handler();
 8002850:	f001 ffc0 	bl	80047d4 <Error_Handler>
	}
}
 8002854:	bf00      	nop
 8002856:	3750      	adds	r7, #80	; 0x50
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40023800 	.word	0x40023800
 8002860:	40007000 	.word	0x40007000

08002864 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800286a:	463b      	mov	r3, r7
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8002876:	4b28      	ldr	r3, [pc, #160]	; (8002918 <MX_ADC1_Init+0xb4>)
 8002878:	4a28      	ldr	r2, [pc, #160]	; (800291c <MX_ADC1_Init+0xb8>)
 800287a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800287c:	4b26      	ldr	r3, [pc, #152]	; (8002918 <MX_ADC1_Init+0xb4>)
 800287e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002882:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002884:	4b24      	ldr	r3, [pc, #144]	; (8002918 <MX_ADC1_Init+0xb4>)
 8002886:	2200      	movs	r2, #0
 8002888:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800288a:	4b23      	ldr	r3, [pc, #140]	; (8002918 <MX_ADC1_Init+0xb4>)
 800288c:	2201      	movs	r2, #1
 800288e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8002890:	4b21      	ldr	r3, [pc, #132]	; (8002918 <MX_ADC1_Init+0xb4>)
 8002892:	2201      	movs	r2, #1
 8002894:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002896:	4b20      	ldr	r3, [pc, #128]	; (8002918 <MX_ADC1_Init+0xb4>)
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800289e:	4b1e      	ldr	r3, [pc, #120]	; (8002918 <MX_ADC1_Init+0xb4>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028a4:	4b1c      	ldr	r3, [pc, #112]	; (8002918 <MX_ADC1_Init+0xb4>)
 80028a6:	4a1e      	ldr	r2, [pc, #120]	; (8002920 <MX_ADC1_Init+0xbc>)
 80028a8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028aa:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <MX_ADC1_Init+0xb4>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 80028b0:	4b19      	ldr	r3, [pc, #100]	; (8002918 <MX_ADC1_Init+0xb4>)
 80028b2:	2202      	movs	r2, #2
 80028b4:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80028b6:	4b18      	ldr	r3, [pc, #96]	; (8002918 <MX_ADC1_Init+0xb4>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80028be:	4b16      	ldr	r3, [pc, #88]	; (8002918 <MX_ADC1_Init+0xb4>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80028c4:	4814      	ldr	r0, [pc, #80]	; (8002918 <MX_ADC1_Init+0xb4>)
 80028c6:	f002 fba1 	bl	800500c <HAL_ADC_Init>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_ADC1_Init+0x70>
		Error_Handler();
 80028d0:	f001 ff80 	bl	80047d4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 80028d4:	2308      	movs	r3, #8
 80028d6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80028d8:	2301      	movs	r3, #1
 80028da:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80028dc:	2303      	movs	r3, #3
 80028de:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80028e0:	463b      	mov	r3, r7
 80028e2:	4619      	mov	r1, r3
 80028e4:	480c      	ldr	r0, [pc, #48]	; (8002918 <MX_ADC1_Init+0xb4>)
 80028e6:	f002 fce3 	bl	80052b0 <HAL_ADC_ConfigChannel>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_ADC1_Init+0x90>
		Error_Handler();
 80028f0:	f001 ff70 	bl	80047d4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 80028f4:	2304      	movs	r3, #4
 80028f6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 80028f8:	2302      	movs	r3, #2
 80028fa:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80028fc:	463b      	mov	r3, r7
 80028fe:	4619      	mov	r1, r3
 8002900:	4805      	ldr	r0, [pc, #20]	; (8002918 <MX_ADC1_Init+0xb4>)
 8002902:	f002 fcd5 	bl	80052b0 <HAL_ADC_ConfigChannel>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_ADC1_Init+0xac>
		Error_Handler();
 800290c:	f001 ff62 	bl	80047d4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002910:	bf00      	nop
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	200003e8 	.word	0x200003e8
 800291c:	40012000 	.word	0x40012000
 8002920:	0f000001 	.word	0x0f000001

08002924 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002928:	4b12      	ldr	r3, [pc, #72]	; (8002974 <MX_I2C1_Init+0x50>)
 800292a:	4a13      	ldr	r2, [pc, #76]	; (8002978 <MX_I2C1_Init+0x54>)
 800292c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <MX_I2C1_Init+0x50>)
 8002930:	4a12      	ldr	r2, [pc, #72]	; (800297c <MX_I2C1_Init+0x58>)
 8002932:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002934:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <MX_I2C1_Init+0x50>)
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800293a:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <MX_I2C1_Init+0x50>)
 800293c:	2200      	movs	r2, #0
 800293e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002940:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <MX_I2C1_Init+0x50>)
 8002942:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002946:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <MX_I2C1_Init+0x50>)
 800294a:	2200      	movs	r2, #0
 800294c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800294e:	4b09      	ldr	r3, [pc, #36]	; (8002974 <MX_I2C1_Init+0x50>)
 8002950:	2200      	movs	r2, #0
 8002952:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002954:	4b07      	ldr	r3, [pc, #28]	; (8002974 <MX_I2C1_Init+0x50>)
 8002956:	2200      	movs	r2, #0
 8002958:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800295a:	4b06      	ldr	r3, [pc, #24]	; (8002974 <MX_I2C1_Init+0x50>)
 800295c:	2200      	movs	r2, #0
 800295e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002960:	4804      	ldr	r0, [pc, #16]	; (8002974 <MX_I2C1_Init+0x50>)
 8002962:	f003 fe4f 	bl	8006604 <HAL_I2C_Init>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800296c:	f001 ff32 	bl	80047d4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002970:	bf00      	nop
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20000490 	.word	0x20000490
 8002978:	40005400 	.word	0x40005400
 800297c:	000186a0 	.word	0x000186a0

08002980 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002980:	b580      	push	{r7, lr}
 8002982:	b08c      	sub	sp, #48	; 0x30
 8002984:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8002986:	f107 030c 	add.w	r3, r7, #12
 800298a:	2224      	movs	r2, #36	; 0x24
 800298c:	2100      	movs	r1, #0
 800298e:	4618      	mov	r0, r3
 8002990:	f007 fc04 	bl	800a19c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002994:	1d3b      	adds	r3, r7, #4
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800299c:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <MX_TIM2_Init+0xa4>)
 800299e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029a2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80029a4:	4b1f      	ldr	r3, [pc, #124]	; (8002a24 <MX_TIM2_Init+0xa4>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029aa:	4b1e      	ldr	r3, [pc, #120]	; (8002a24 <MX_TIM2_Init+0xa4>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = QEI_PERIOD - 1;
 80029b0:	4b1c      	ldr	r3, [pc, #112]	; (8002a24 <MX_TIM2_Init+0xa4>)
 80029b2:	f649 72ff 	movw	r2, #40959	; 0x9fff
 80029b6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029b8:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <MX_TIM2_Init+0xa4>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029be:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <MX_TIM2_Init+0xa4>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029c4:	2303      	movs	r3, #3
 80029c6:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029c8:	2300      	movs	r3, #0
 80029ca:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029cc:	2301      	movs	r3, #1
 80029ce:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029d8:	2300      	movs	r3, #0
 80029da:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029dc:	2301      	movs	r3, #1
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029e0:	2300      	movs	r3, #0
 80029e2:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 80029e8:	f107 030c 	add.w	r3, r7, #12
 80029ec:	4619      	mov	r1, r3
 80029ee:	480d      	ldr	r0, [pc, #52]	; (8002a24 <MX_TIM2_Init+0xa4>)
 80029f0:	f004 ff46 	bl	8007880 <HAL_TIM_Encoder_Init>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_TIM2_Init+0x7e>
		Error_Handler();
 80029fa:	f001 feeb 	bl	80047d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029fe:	2300      	movs	r3, #0
 8002a00:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a02:	2300      	movs	r3, #0
 8002a04:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002a06:	1d3b      	adds	r3, r7, #4
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4806      	ldr	r0, [pc, #24]	; (8002a24 <MX_TIM2_Init+0xa4>)
 8002a0c:	f006 f850 	bl	8008ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8002a16:	f001 fedd 	bl	80047d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002a1a:	bf00      	nop
 8002a1c:	3730      	adds	r7, #48	; 0x30
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	200004e4 	.word	0x200004e4

08002a28 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002a2e:	f107 0308 	add.w	r3, r7, #8
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	605a      	str	r2, [r3, #4]
 8002a38:	609a      	str	r2, [r3, #8]
 8002a3a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002a3c:	463b      	mov	r3, r7
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002a44:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <MX_TIM3_Init+0x94>)
 8002a46:	4a1e      	ldr	r2, [pc, #120]	; (8002ac0 <MX_TIM3_Init+0x98>)
 8002a48:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8002a4a:	4b1c      	ldr	r3, [pc, #112]	; (8002abc <MX_TIM3_Init+0x94>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a50:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <MX_TIM3_Init+0x94>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8002a56:	4b19      	ldr	r3, [pc, #100]	; (8002abc <MX_TIM3_Init+0x94>)
 8002a58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a5c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a5e:	4b17      	ldr	r3, [pc, #92]	; (8002abc <MX_TIM3_Init+0x94>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a64:	4b15      	ldr	r3, [pc, #84]	; (8002abc <MX_TIM3_Init+0x94>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8002a6a:	4814      	ldr	r0, [pc, #80]	; (8002abc <MX_TIM3_Init+0x94>)
 8002a6c:	f004 fba6 	bl	80071bc <HAL_TIM_Base_Init>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <MX_TIM3_Init+0x52>
		Error_Handler();
 8002a76:	f001 fead 	bl	80047d4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a7e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002a80:	f107 0308 	add.w	r3, r7, #8
 8002a84:	4619      	mov	r1, r3
 8002a86:	480d      	ldr	r0, [pc, #52]	; (8002abc <MX_TIM3_Init+0x94>)
 8002a88:	f005 fa82 	bl	8007f90 <HAL_TIM_ConfigClockSource>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <MX_TIM3_Init+0x6e>
		Error_Handler();
 8002a92:	f001 fe9f 	bl	80047d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a96:	2300      	movs	r3, #0
 8002a98:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002a9e:	463b      	mov	r3, r7
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4806      	ldr	r0, [pc, #24]	; (8002abc <MX_TIM3_Init+0x94>)
 8002aa4:	f006 f804 	bl	8008ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8002aae:	f001 fe91 	bl	80047d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8002ab2:	bf00      	nop
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20000598 	.word	0x20000598
 8002ac0:	40000400 	.word	0x40000400

08002ac4 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08e      	sub	sp, #56	; 0x38
 8002ac8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002aca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	605a      	str	r2, [r3, #4]
 8002ad4:	609a      	str	r2, [r3, #8]
 8002ad6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002ad8:	f107 0320 	add.w	r3, r7, #32
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002ae2:	1d3b      	adds	r3, r7, #4
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	611a      	str	r2, [r3, #16]
 8002af0:	615a      	str	r2, [r3, #20]
 8002af2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002af4:	4b2c      	ldr	r3, [pc, #176]	; (8002ba8 <MX_TIM4_Init+0xe4>)
 8002af6:	4a2d      	ldr	r2, [pc, #180]	; (8002bac <MX_TIM4_Init+0xe8>)
 8002af8:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8002afa:	4b2b      	ldr	r3, [pc, #172]	; (8002ba8 <MX_TIM4_Init+0xe4>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b00:	4b29      	ldr	r3, [pc, #164]	; (8002ba8 <MX_TIM4_Init+0xe4>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8002b06:	4b28      	ldr	r3, [pc, #160]	; (8002ba8 <MX_TIM4_Init+0xe4>)
 8002b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b0c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b0e:	4b26      	ldr	r3, [pc, #152]	; (8002ba8 <MX_TIM4_Init+0xe4>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b14:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <MX_TIM4_Init+0xe4>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8002b1a:	4823      	ldr	r0, [pc, #140]	; (8002ba8 <MX_TIM4_Init+0xe4>)
 8002b1c:	f004 fb4e 	bl	80071bc <HAL_TIM_Base_Init>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_TIM4_Init+0x66>
		Error_Handler();
 8002b26:	f001 fe55 	bl	80047d4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b2e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8002b30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b34:	4619      	mov	r1, r3
 8002b36:	481c      	ldr	r0, [pc, #112]	; (8002ba8 <MX_TIM4_Init+0xe4>)
 8002b38:	f005 fa2a 	bl	8007f90 <HAL_TIM_ConfigClockSource>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_TIM4_Init+0x82>
		Error_Handler();
 8002b42:	f001 fe47 	bl	80047d4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8002b46:	4818      	ldr	r0, [pc, #96]	; (8002ba8 <MX_TIM4_Init+0xe4>)
 8002b48:	f004 fcb6 	bl	80074b8 <HAL_TIM_PWM_Init>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_TIM4_Init+0x92>
		Error_Handler();
 8002b52:	f001 fe3f 	bl	80047d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b56:	2300      	movs	r3, #0
 8002b58:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8002b5e:	f107 0320 	add.w	r3, r7, #32
 8002b62:	4619      	mov	r1, r3
 8002b64:	4810      	ldr	r0, [pc, #64]	; (8002ba8 <MX_TIM4_Init+0xe4>)
 8002b66:	f005 ffa3 	bl	8008ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <MX_TIM4_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8002b70:	f001 fe30 	bl	80047d4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b74:	2360      	movs	r3, #96	; 0x60
 8002b76:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8002b84:	1d3b      	adds	r3, r7, #4
 8002b86:	2200      	movs	r2, #0
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4807      	ldr	r0, [pc, #28]	; (8002ba8 <MX_TIM4_Init+0xe4>)
 8002b8c:	f005 f93e 	bl	8007e0c <HAL_TIM_PWM_ConfigChannel>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_TIM4_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8002b96:	f001 fe1d 	bl	80047d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8002b9a:	4803      	ldr	r0, [pc, #12]	; (8002ba8 <MX_TIM4_Init+0xe4>)
 8002b9c:	f002 f828 	bl	8004bf0 <HAL_TIM_MspPostInit>

}
 8002ba0:	bf00      	nop
 8002ba2:	3738      	adds	r7, #56	; 0x38
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	2000064c 	.word	0x2000064c
 8002bac:	40000800 	.word	0x40000800

08002bb0 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002bb6:	f107 0308 	add.w	r3, r7, #8
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	605a      	str	r2, [r3, #4]
 8002bc0:	609a      	str	r2, [r3, #8]
 8002bc2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002bc4:	463b      	mov	r3, r7
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8002bcc:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <MX_TIM5_Init+0x94>)
 8002bce:	4a1e      	ldr	r2, [pc, #120]	; (8002c48 <MX_TIM5_Init+0x98>)
 8002bd0:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 83;
 8002bd2:	4b1c      	ldr	r3, [pc, #112]	; (8002c44 <MX_TIM5_Init+0x94>)
 8002bd4:	2253      	movs	r2, #83	; 0x53
 8002bd6:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bd8:	4b1a      	ldr	r3, [pc, #104]	; (8002c44 <MX_TIM5_Init+0x94>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8002bde:	4b19      	ldr	r3, [pc, #100]	; (8002c44 <MX_TIM5_Init+0x94>)
 8002be0:	f04f 32ff 	mov.w	r2, #4294967295
 8002be4:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002be6:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <MX_TIM5_Init+0x94>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bec:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <MX_TIM5_Init+0x94>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8002bf2:	4814      	ldr	r0, [pc, #80]	; (8002c44 <MX_TIM5_Init+0x94>)
 8002bf4:	f004 fae2 	bl	80071bc <HAL_TIM_Base_Init>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_TIM5_Init+0x52>
		Error_Handler();
 8002bfe:	f001 fde9 	bl	80047d4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c06:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8002c08:	f107 0308 	add.w	r3, r7, #8
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	480d      	ldr	r0, [pc, #52]	; (8002c44 <MX_TIM5_Init+0x94>)
 8002c10:	f005 f9be 	bl	8007f90 <HAL_TIM_ConfigClockSource>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_TIM5_Init+0x6e>
		Error_Handler();
 8002c1a:	f001 fddb 	bl	80047d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c22:	2300      	movs	r3, #0
 8002c24:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002c26:	463b      	mov	r3, r7
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4806      	ldr	r0, [pc, #24]	; (8002c44 <MX_TIM5_Init+0x94>)
 8002c2c:	f005 ff40 	bl	8008ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <MX_TIM5_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8002c36:	f001 fdcd 	bl	80047d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8002c3a:	bf00      	nop
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20000700 	.word	0x20000700
 8002c48:	40000c00 	.word	0x40000c00

08002c4c <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002c52:	1d3b      	adds	r3, r7, #4
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	611a      	str	r2, [r3, #16]
 8002c60:	615a      	str	r2, [r3, #20]
 8002c62:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8002c64:	4b21      	ldr	r3, [pc, #132]	; (8002cec <MX_TIM11_Init+0xa0>)
 8002c66:	4a22      	ldr	r2, [pc, #136]	; (8002cf0 <MX_TIM11_Init+0xa4>)
 8002c68:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 99;
 8002c6a:	4b20      	ldr	r3, [pc, #128]	; (8002cec <MX_TIM11_Init+0xa0>)
 8002c6c:	2263      	movs	r2, #99	; 0x63
 8002c6e:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c70:	4b1e      	ldr	r3, [pc, #120]	; (8002cec <MX_TIM11_Init+0xa0>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 2005;
 8002c76:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <MX_TIM11_Init+0xa0>)
 8002c78:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8002c7c:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c7e:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <MX_TIM11_Init+0xa0>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c84:	4b19      	ldr	r3, [pc, #100]	; (8002cec <MX_TIM11_Init+0xa0>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 8002c8a:	4818      	ldr	r0, [pc, #96]	; (8002cec <MX_TIM11_Init+0xa0>)
 8002c8c:	f004 fa96 	bl	80071bc <HAL_TIM_Base_Init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_TIM11_Init+0x4e>
		Error_Handler();
 8002c96:	f001 fd9d 	bl	80047d4 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim11) != HAL_OK) {
 8002c9a:	4814      	ldr	r0, [pc, #80]	; (8002cec <MX_TIM11_Init+0xa0>)
 8002c9c:	f004 fba6 	bl	80073ec <HAL_TIM_OC_Init>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <MX_TIM11_Init+0x5e>
		Error_Handler();
 8002ca6:	f001 fd95 	bl	80047d4 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK) {
 8002caa:	2108      	movs	r1, #8
 8002cac:	480f      	ldr	r0, [pc, #60]	; (8002cec <MX_TIM11_Init+0xa0>)
 8002cae:	f004 fd19 	bl	80076e4 <HAL_TIM_OnePulse_Init>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <MX_TIM11_Init+0x70>
		Error_Handler();
 8002cb8:	f001 fd8c 	bl	80047d4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002cbc:	2310      	movs	r3, #16
 8002cbe:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 1433;
 8002cc0:	f240 5399 	movw	r3, #1433	; 0x599
 8002cc4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1)
 8002cce:	1d3b      	adds	r3, r7, #4
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4805      	ldr	r0, [pc, #20]	; (8002cec <MX_TIM11_Init+0xa0>)
 8002cd6:	f005 f83d 	bl	8007d54 <HAL_TIM_OC_ConfigChannel>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_TIM11_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8002ce0:	f001 fd78 	bl	80047d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 8002ce4:	bf00      	nop
 8002ce6:	3720      	adds	r7, #32
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	200007b4 	.word	0x200007b4
 8002cf0:	40014800 	.word	0x40014800

08002cf4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002cf8:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <MX_USART2_UART_Init+0x50>)
 8002cfa:	4a13      	ldr	r2, [pc, #76]	; (8002d48 <MX_USART2_UART_Init+0x54>)
 8002cfc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 19200;
 8002cfe:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <MX_USART2_UART_Init+0x50>)
 8002d00:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002d04:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <MX_USART2_UART_Init+0x50>)
 8002d08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d0c:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002d0e:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <MX_USART2_UART_Init+0x50>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 8002d14:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <MX_USART2_UART_Init+0x50>)
 8002d16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d1a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002d1c:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <MX_USART2_UART_Init+0x50>)
 8002d1e:	220c      	movs	r2, #12
 8002d20:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d22:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <MX_USART2_UART_Init+0x50>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <MX_USART2_UART_Init+0x50>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002d2e:	4805      	ldr	r0, [pc, #20]	; (8002d44 <MX_USART2_UART_Init+0x50>)
 8002d30:	f005 ff4a 	bl	8008bc8 <HAL_UART_Init>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_USART2_UART_Init+0x4a>
		Error_Handler();
 8002d3a:	f001 fd4b 	bl	80047d4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000868 	.word	0x20000868
 8002d48:	40004400 	.word	0x40004400

08002d4c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	607b      	str	r3, [r7, #4]
 8002d56:	4b17      	ldr	r3, [pc, #92]	; (8002db4 <MX_DMA_Init+0x68>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	4a16      	ldr	r2, [pc, #88]	; (8002db4 <MX_DMA_Init+0x68>)
 8002d5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d60:	6313      	str	r3, [r2, #48]	; 0x30
 8002d62:	4b14      	ldr	r3, [pc, #80]	; (8002db4 <MX_DMA_Init+0x68>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6a:	607b      	str	r3, [r7, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	603b      	str	r3, [r7, #0]
 8002d72:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <MX_DMA_Init+0x68>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	4a0f      	ldr	r2, [pc, #60]	; (8002db4 <MX_DMA_Init+0x68>)
 8002d78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <MX_DMA_Init+0x68>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	2011      	movs	r0, #17
 8002d90:	f002 fe19 	bl	80059c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002d94:	2011      	movs	r0, #17
 8002d96:	f002 fe32 	bl	80059fe <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	2038      	movs	r0, #56	; 0x38
 8002da0:	f002 fe11 	bl	80059c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002da4:	2038      	movs	r0, #56	; 0x38
 8002da6:	f002 fe2a 	bl	80059fe <HAL_NVIC_EnableIRQ>

}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800

08002db8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08a      	sub	sp, #40	; 0x28
 8002dbc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002dbe:	f107 0314 	add.w	r3, r7, #20
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	605a      	str	r2, [r3, #4]
 8002dc8:	609a      	str	r2, [r3, #8]
 8002dca:	60da      	str	r2, [r3, #12]
 8002dcc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
 8002dd2:	4b44      	ldr	r3, [pc, #272]	; (8002ee4 <MX_GPIO_Init+0x12c>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	4a43      	ldr	r2, [pc, #268]	; (8002ee4 <MX_GPIO_Init+0x12c>)
 8002dd8:	f043 0304 	orr.w	r3, r3, #4
 8002ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dde:	4b41      	ldr	r3, [pc, #260]	; (8002ee4 <MX_GPIO_Init+0x12c>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	4b3d      	ldr	r3, [pc, #244]	; (8002ee4 <MX_GPIO_Init+0x12c>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	4a3c      	ldr	r2, [pc, #240]	; (8002ee4 <MX_GPIO_Init+0x12c>)
 8002df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002df8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfa:	4b3a      	ldr	r3, [pc, #232]	; (8002ee4 <MX_GPIO_Init+0x12c>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	4b36      	ldr	r3, [pc, #216]	; (8002ee4 <MX_GPIO_Init+0x12c>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	4a35      	ldr	r2, [pc, #212]	; (8002ee4 <MX_GPIO_Init+0x12c>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6313      	str	r3, [r2, #48]	; 0x30
 8002e16:	4b33      	ldr	r3, [pc, #204]	; (8002ee4 <MX_GPIO_Init+0x12c>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	607b      	str	r3, [r7, #4]
 8002e26:	4b2f      	ldr	r3, [pc, #188]	; (8002ee4 <MX_GPIO_Init+0x12c>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	4a2e      	ldr	r2, [pc, #184]	; (8002ee4 <MX_GPIO_Init+0x12c>)
 8002e2c:	f043 0302 	orr.w	r3, r3, #2
 8002e30:	6313      	str	r3, [r2, #48]	; 0x30
 8002e32:	4b2c      	ldr	r3, [pc, #176]	; (8002ee4 <MX_GPIO_Init+0x12c>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	607b      	str	r3, [r7, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | DIR_Pin, GPIO_PIN_RESET);
 8002e3e:	2200      	movs	r2, #0
 8002e40:	21a0      	movs	r1, #160	; 0xa0
 8002e42:	4829      	ldr	r0, [pc, #164]	; (8002ee8 <MX_GPIO_Init+0x130>)
 8002e44:	f003 fba0 	bl	8006588 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8002e48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e4c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e4e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002e52:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e58:	f107 0314 	add.w	r3, r7, #20
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4823      	ldr	r0, [pc, #140]	; (8002eec <MX_GPIO_Init+0x134>)
 8002e60:	f003 f9f6 	bl	8006250 <HAL_GPIO_Init>

	/*Configure GPIO pins : Sensor_Home_Pin Sensor_1_Pin Set_Tray_Pin Clear_Tray_Pin */
	GPIO_InitStruct.Pin = Sensor_Home_Pin | Sensor_1_Pin | Set_Tray_Pin
 8002e64:	2333      	movs	r3, #51	; 0x33
 8002e66:	617b      	str	r3, [r7, #20]
			| Clear_Tray_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e70:	f107 0314 	add.w	r3, r7, #20
 8002e74:	4619      	mov	r1, r3
 8002e76:	481d      	ldr	r0, [pc, #116]	; (8002eec <MX_GPIO_Init+0x134>)
 8002e78:	f003 f9ea 	bl	8006250 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin DIR_Pin */
	GPIO_InitStruct.Pin = LD2_Pin | DIR_Pin;
 8002e7c:	23a0      	movs	r3, #160	; 0xa0
 8002e7e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e80:	2301      	movs	r3, #1
 8002e82:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8c:	f107 0314 	add.w	r3, r7, #20
 8002e90:	4619      	mov	r1, r3
 8002e92:	4815      	ldr	r0, [pc, #84]	; (8002ee8 <MX_GPIO_Init+0x130>)
 8002e94:	f003 f9dc 	bl	8006250 <HAL_GPIO_Init>

	/*Configure GPIO pin : emergency_Pin */
	GPIO_InitStruct.Pin = emergency_Pin;
 8002e98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e9c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002ea2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(emergency_GPIO_Port, &GPIO_InitStruct);
 8002ea8:	f107 0314 	add.w	r3, r7, #20
 8002eac:	4619      	mov	r1, r3
 8002eae:	480e      	ldr	r0, [pc, #56]	; (8002ee8 <MX_GPIO_Init+0x130>)
 8002eb0:	f003 f9ce 	bl	8006250 <HAL_GPIO_Init>

	/*Configure GPIO pin : Sensor_2_Pin */
	GPIO_InitStruct.Pin = Sensor_2_Pin;
 8002eb4:	2310      	movs	r3, #16
 8002eb6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Sensor_2_GPIO_Port, &GPIO_InitStruct);
 8002ec0:	f107 0314 	add.w	r3, r7, #20
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	480a      	ldr	r0, [pc, #40]	; (8002ef0 <MX_GPIO_Init+0x138>)
 8002ec8:	f003 f9c2 	bl	8006250 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2100      	movs	r1, #0
 8002ed0:	2028      	movs	r0, #40	; 0x28
 8002ed2:	f002 fd78 	bl	80059c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ed6:	2028      	movs	r0, #40	; 0x28
 8002ed8:	f002 fd91 	bl	80059fe <HAL_NVIC_EnableIRQ>

}
 8002edc:	bf00      	nop
 8002ede:	3728      	adds	r7, #40	; 0x28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40020000 	.word	0x40020000
 8002eec:	40020800 	.word	0x40020800
 8002ef0:	40020400 	.word	0x40020400

08002ef4 <transformRectangleAndPointsPick>:
		TIM2->CNT = QEI_PERIOD;
		SetDegree = 0;
	}

}
void transformRectangleAndPointsPick() {
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08a      	sub	sp, #40	; 0x28
 8002ef8:	af00      	add	r7, sp, #0

	translation[0] = bottom_left_jog[0];
 8002efa:	4bac      	ldr	r3, [pc, #688]	; (80031ac <transformRectangleAndPointsPick+0x2b8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4aac      	ldr	r2, [pc, #688]	; (80031b0 <transformRectangleAndPointsPick+0x2bc>)
 8002f00:	6013      	str	r3, [r2, #0]
	translation[1] = bottom_left_jog[1];
 8002f02:	4baa      	ldr	r3, [pc, #680]	; (80031ac <transformRectangleAndPointsPick+0x2b8>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	4aaa      	ldr	r2, [pc, #680]	; (80031b0 <transformRectangleAndPointsPick+0x2bc>)
 8002f08:	6053      	str	r3, [r2, #4]

	bottom_right_jog[0] = bottom_right_jog[0] - translation[0];
 8002f0a:	4baa      	ldr	r3, [pc, #680]	; (80031b4 <transformRectangleAndPointsPick+0x2c0>)
 8002f0c:	ed93 7a00 	vldr	s14, [r3]
 8002f10:	4ba7      	ldr	r3, [pc, #668]	; (80031b0 <transformRectangleAndPointsPick+0x2bc>)
 8002f12:	edd3 7a00 	vldr	s15, [r3]
 8002f16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f1a:	4ba6      	ldr	r3, [pc, #664]	; (80031b4 <transformRectangleAndPointsPick+0x2c0>)
 8002f1c:	edc3 7a00 	vstr	s15, [r3]
	bottom_right_jog[1] = bottom_right_jog[1] - translation[1];
 8002f20:	4ba4      	ldr	r3, [pc, #656]	; (80031b4 <transformRectangleAndPointsPick+0x2c0>)
 8002f22:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f26:	4ba2      	ldr	r3, [pc, #648]	; (80031b0 <transformRectangleAndPointsPick+0x2bc>)
 8002f28:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f30:	4ba0      	ldr	r3, [pc, #640]	; (80031b4 <transformRectangleAndPointsPick+0x2c0>)
 8002f32:	edc3 7a01 	vstr	s15, [r3, #4]

	dot_product = 60 * bottom_right_jog[0] + bottom_right_jog[1] * 0;
 8002f36:	4b9f      	ldr	r3, [pc, #636]	; (80031b4 <transformRectangleAndPointsPick+0x2c0>)
 8002f38:	edd3 7a00 	vldr	s15, [r3]
 8002f3c:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80031b8 <transformRectangleAndPointsPick+0x2c4>
 8002f40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f44:	4b9b      	ldr	r3, [pc, #620]	; (80031b4 <transformRectangleAndPointsPick+0x2c0>)
 8002f46:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f4a:	eddf 6a9c 	vldr	s13, [pc, #624]	; 80031bc <transformRectangleAndPointsPick+0x2c8>
 8002f4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f56:	4b9a      	ldr	r3, [pc, #616]	; (80031c0 <transformRectangleAndPointsPick+0x2cc>)
 8002f58:	edc3 7a00 	vstr	s15, [r3]
	in_theta = dot_product / vectorsize;
 8002f5c:	4b98      	ldr	r3, [pc, #608]	; (80031c0 <transformRectangleAndPointsPick+0x2cc>)
 8002f5e:	edd3 6a00 	vldr	s13, [r3]
 8002f62:	4b98      	ldr	r3, [pc, #608]	; (80031c4 <transformRectangleAndPointsPick+0x2d0>)
 8002f64:	ed93 7a00 	vldr	s14, [r3]
 8002f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f6c:	4b96      	ldr	r3, [pc, #600]	; (80031c8 <transformRectangleAndPointsPick+0x2d4>)
 8002f6e:	edc3 7a00 	vstr	s15, [r3]
	theta = -acos(in_theta);
 8002f72:	4b95      	ldr	r3, [pc, #596]	; (80031c8 <transformRectangleAndPointsPick+0x2d4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fd fa92 	bl	80004a0 <__aeabi_f2d>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	ec43 2b10 	vmov	d0, r2, r3
 8002f84:	f007 fb54 	bl	800a630 <acos>
 8002f88:	ec53 2b10 	vmov	r2, r3, d0
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	4619      	mov	r1, r3
 8002f90:	f7fd fdb6 	bl	8000b00 <__aeabi_d2f>
 8002f94:	4603      	mov	r3, r0
 8002f96:	ee07 3a90 	vmov	s15, r3
 8002f9a:	eef1 7a67 	vneg.f32	s15, s15
 8002f9e:	4b8b      	ldr	r3, [pc, #556]	; (80031cc <transformRectangleAndPointsPick+0x2d8>)
 8002fa0:	edc3 7a00 	vstr	s15, [r3]

	T_rotation[0][0] = cos(theta);
 8002fa4:	4b89      	ldr	r3, [pc, #548]	; (80031cc <transformRectangleAndPointsPick+0x2d8>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fd fa79 	bl	80004a0 <__aeabi_f2d>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	ec43 2b10 	vmov	d0, r2, r3
 8002fb6:	f007 fa0f 	bl	800a3d8 <cos>
 8002fba:	ec53 2b10 	vmov	r2, r3, d0
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f7fd fd9d 	bl	8000b00 <__aeabi_d2f>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	4a81      	ldr	r2, [pc, #516]	; (80031d0 <transformRectangleAndPointsPick+0x2dc>)
 8002fca:	6013      	str	r3, [r2, #0]
	T_rotation[0][1] = -sin(theta);
 8002fcc:	4b7f      	ldr	r3, [pc, #508]	; (80031cc <transformRectangleAndPointsPick+0x2d8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fd fa65 	bl	80004a0 <__aeabi_f2d>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	ec43 2b10 	vmov	d0, r2, r3
 8002fde:	f007 facf 	bl	800a580 <sin>
 8002fe2:	ec53 2b10 	vmov	r2, r3, d0
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	4619      	mov	r1, r3
 8002fea:	f7fd fd89 	bl	8000b00 <__aeabi_d2f>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	ee07 3a90 	vmov	s15, r3
 8002ff4:	eef1 7a67 	vneg.f32	s15, s15
 8002ff8:	4b75      	ldr	r3, [pc, #468]	; (80031d0 <transformRectangleAndPointsPick+0x2dc>)
 8002ffa:	edc3 7a01 	vstr	s15, [r3, #4]
	T_rotation[1][0] = sin(theta);
 8002ffe:	4b73      	ldr	r3, [pc, #460]	; (80031cc <transformRectangleAndPointsPick+0x2d8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7fd fa4c 	bl	80004a0 <__aeabi_f2d>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	ec43 2b10 	vmov	d0, r2, r3
 8003010:	f007 fab6 	bl	800a580 <sin>
 8003014:	ec53 2b10 	vmov	r2, r3, d0
 8003018:	4610      	mov	r0, r2
 800301a:	4619      	mov	r1, r3
 800301c:	f7fd fd70 	bl	8000b00 <__aeabi_d2f>
 8003020:	4603      	mov	r3, r0
 8003022:	4a6b      	ldr	r2, [pc, #428]	; (80031d0 <transformRectangleAndPointsPick+0x2dc>)
 8003024:	6093      	str	r3, [r2, #8]
	T_rotation[1][1] = cos(theta);
 8003026:	4b69      	ldr	r3, [pc, #420]	; (80031cc <transformRectangleAndPointsPick+0x2d8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fd fa38 	bl	80004a0 <__aeabi_f2d>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	ec43 2b10 	vmov	d0, r2, r3
 8003038:	f007 f9ce 	bl	800a3d8 <cos>
 800303c:	ec53 2b10 	vmov	r2, r3, d0
 8003040:	4610      	mov	r0, r2
 8003042:	4619      	mov	r1, r3
 8003044:	f7fd fd5c 	bl	8000b00 <__aeabi_d2f>
 8003048:	4603      	mov	r3, r0
 800304a:	4a61      	ldr	r2, [pc, #388]	; (80031d0 <transformRectangleAndPointsPick+0x2dc>)
 800304c:	60d3      	str	r3, [r2, #12]

	T[0][0] = T_rotation[0][0];
 800304e:	4b60      	ldr	r3, [pc, #384]	; (80031d0 <transformRectangleAndPointsPick+0x2dc>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a60      	ldr	r2, [pc, #384]	; (80031d4 <transformRectangleAndPointsPick+0x2e0>)
 8003054:	6013      	str	r3, [r2, #0]
	T[0][1] = T_rotation[0][1];
 8003056:	4b5e      	ldr	r3, [pc, #376]	; (80031d0 <transformRectangleAndPointsPick+0x2dc>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4a5e      	ldr	r2, [pc, #376]	; (80031d4 <transformRectangleAndPointsPick+0x2e0>)
 800305c:	6053      	str	r3, [r2, #4]
	T[0][2] = translation[0];
 800305e:	4b54      	ldr	r3, [pc, #336]	; (80031b0 <transformRectangleAndPointsPick+0x2bc>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a5c      	ldr	r2, [pc, #368]	; (80031d4 <transformRectangleAndPointsPick+0x2e0>)
 8003064:	6093      	str	r3, [r2, #8]
	T[1][0] = T_rotation[1][0];
 8003066:	4b5a      	ldr	r3, [pc, #360]	; (80031d0 <transformRectangleAndPointsPick+0x2dc>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	4a5a      	ldr	r2, [pc, #360]	; (80031d4 <transformRectangleAndPointsPick+0x2e0>)
 800306c:	60d3      	str	r3, [r2, #12]
	T[1][1] = T_rotation[1][1];
 800306e:	4b58      	ldr	r3, [pc, #352]	; (80031d0 <transformRectangleAndPointsPick+0x2dc>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	4a58      	ldr	r2, [pc, #352]	; (80031d4 <transformRectangleAndPointsPick+0x2e0>)
 8003074:	6113      	str	r3, [r2, #16]
	T[1][2] = translation[1];
 8003076:	4b4e      	ldr	r3, [pc, #312]	; (80031b0 <transformRectangleAndPointsPick+0x2bc>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4a56      	ldr	r2, [pc, #344]	; (80031d4 <transformRectangleAndPointsPick+0x2e0>)
 800307c:	6153      	str	r3, [r2, #20]
	T[2][0] = 0;
 800307e:	4b55      	ldr	r3, [pc, #340]	; (80031d4 <transformRectangleAndPointsPick+0x2e0>)
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	619a      	str	r2, [r3, #24]
	T[2][1] = 0;
 8003086:	4b53      	ldr	r3, [pc, #332]	; (80031d4 <transformRectangleAndPointsPick+0x2e0>)
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	61da      	str	r2, [r3, #28]
	T[2][2] = 1;
 800308e:	4b51      	ldr	r3, [pc, #324]	; (80031d4 <transformRectangleAndPointsPick+0x2e0>)
 8003090:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003094:	621a      	str	r2, [r3, #32]

	// Transform the rectangle
	for (int i = 0; i < 5; i++) {
 8003096:	2300      	movs	r3, #0
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
 800309a:	e029      	b.n	80030f0 <transformRectangleAndPointsPick+0x1fc>
		homogeneousRectangle[i][0] = rectangle[i][0];
 800309c:	4a4e      	ldr	r2, [pc, #312]	; (80031d8 <transformRectangleAndPointsPick+0x2e4>)
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	4413      	add	r3, r2
 80030a4:	6819      	ldr	r1, [r3, #0]
 80030a6:	484d      	ldr	r0, [pc, #308]	; (80031dc <transformRectangleAndPointsPick+0x2e8>)
 80030a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030aa:	4613      	mov	r3, r2
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4403      	add	r3, r0
 80030b4:	6019      	str	r1, [r3, #0]
		homogeneousRectangle[i][1] = rectangle[i][1];
 80030b6:	4a48      	ldr	r2, [pc, #288]	; (80031d8 <transformRectangleAndPointsPick+0x2e4>)
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4413      	add	r3, r2
 80030be:	3304      	adds	r3, #4
 80030c0:	6819      	ldr	r1, [r3, #0]
 80030c2:	4846      	ldr	r0, [pc, #280]	; (80031dc <transformRectangleAndPointsPick+0x2e8>)
 80030c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c6:	4613      	mov	r3, r2
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	4413      	add	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4403      	add	r3, r0
 80030d0:	3304      	adds	r3, #4
 80030d2:	6019      	str	r1, [r3, #0]
		homogeneousRectangle[i][2] = 1;
 80030d4:	4941      	ldr	r1, [pc, #260]	; (80031dc <transformRectangleAndPointsPick+0x2e8>)
 80030d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d8:	4613      	mov	r3, r2
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	3308      	adds	r3, #8
 80030e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80030e8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 5; i++) {
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	3301      	adds	r3, #1
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	ddd2      	ble.n	800309c <transformRectangleAndPointsPick+0x1a8>
	}

	for (int i = 0; i < 5; i++) {
 80030f6:	2300      	movs	r3, #0
 80030f8:	623b      	str	r3, [r7, #32]
 80030fa:	e050      	b.n	800319e <transformRectangleAndPointsPick+0x2aa>
		for (int j = 0; j < 3; j++) {
 80030fc:	2300      	movs	r3, #0
 80030fe:	61fb      	str	r3, [r7, #28]
 8003100:	e047      	b.n	8003192 <transformRectangleAndPointsPick+0x29e>
			transformedRectangle[i][j] = 0;
 8003102:	4937      	ldr	r1, [pc, #220]	; (80031e0 <transformRectangleAndPointsPick+0x2ec>)
 8003104:	6a3a      	ldr	r2, [r7, #32]
 8003106:	4613      	mov	r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	4413      	add	r3, r2
 800310c:	69fa      	ldr	r2, [r7, #28]
 800310e:	4413      	add	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
			for (int k = 0; k < 3; k++) {
 800311a:	2300      	movs	r3, #0
 800311c:	61bb      	str	r3, [r7, #24]
 800311e:	e032      	b.n	8003186 <transformRectangleAndPointsPick+0x292>
				transformedRectangle[i][j] += homogeneousRectangle[i][k]
 8003120:	492f      	ldr	r1, [pc, #188]	; (80031e0 <transformRectangleAndPointsPick+0x2ec>)
 8003122:	6a3a      	ldr	r2, [r7, #32]
 8003124:	4613      	mov	r3, r2
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	4413      	add	r3, r2
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	ed93 7a00 	vldr	s14, [r3]
 8003136:	4929      	ldr	r1, [pc, #164]	; (80031dc <transformRectangleAndPointsPick+0x2e8>)
 8003138:	6a3a      	ldr	r2, [r7, #32]
 800313a:	4613      	mov	r3, r2
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	4413      	add	r3, r2
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	edd3 6a00 	vldr	s13, [r3]
						* T[k][j];
 800314c:	4921      	ldr	r1, [pc, #132]	; (80031d4 <transformRectangleAndPointsPick+0x2e0>)
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4613      	mov	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	4413      	add	r3, r2
 8003156:	69fa      	ldr	r2, [r7, #28]
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	edd3 7a00 	vldr	s15, [r3]
 8003162:	ee66 7aa7 	vmul.f32	s15, s13, s15
				transformedRectangle[i][j] += homogeneousRectangle[i][k]
 8003166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800316a:	491d      	ldr	r1, [pc, #116]	; (80031e0 <transformRectangleAndPointsPick+0x2ec>)
 800316c:	6a3a      	ldr	r2, [r7, #32]
 800316e:	4613      	mov	r3, r2
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	4413      	add	r3, r2
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	edc3 7a00 	vstr	s15, [r3]
			for (int k = 0; k < 3; k++) {
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	3301      	adds	r3, #1
 8003184:	61bb      	str	r3, [r7, #24]
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2b02      	cmp	r3, #2
 800318a:	ddc9      	ble.n	8003120 <transformRectangleAndPointsPick+0x22c>
		for (int j = 0; j < 3; j++) {
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	3301      	adds	r3, #1
 8003190:	61fb      	str	r3, [r7, #28]
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	2b02      	cmp	r3, #2
 8003196:	ddb4      	ble.n	8003102 <transformRectangleAndPointsPick+0x20e>
	for (int i = 0; i < 5; i++) {
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	3301      	adds	r3, #1
 800319c:	623b      	str	r3, [r7, #32]
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	ddab      	ble.n	80030fc <transformRectangleAndPointsPick+0x208>
			}
		}
	}

	// Transform the points
	for (int i = 0; i < 9; i++) {
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	e046      	b.n	8003238 <transformRectangleAndPointsPick+0x344>
 80031aa:	bf00      	nop
 80031ac:	20000b44 	.word	0x20000b44
 80031b0:	200009bc 	.word	0x200009bc
 80031b4:	20000b4c 	.word	0x20000b4c
 80031b8:	42700000 	.word	0x42700000
 80031bc:	00000000 	.word	0x00000000
 80031c0:	20000b38 	.word	0x20000b38
 80031c4:	200002b8 	.word	0x200002b8
 80031c8:	20000b40 	.word	0x20000b40
 80031cc:	20000b3c 	.word	0x20000b3c
 80031d0:	200009ac 	.word	0x200009ac
 80031d4:	200009c4 	.word	0x200009c4
 80031d8:	20000248 	.word	0x20000248
 80031dc:	200009e8 	.word	0x200009e8
 80031e0:	20000a24 	.word	0x20000a24
		homogeneousPoints[i][0] = points[i][0];
 80031e4:	4a7d      	ldr	r2, [pc, #500]	; (80033dc <transformRectangleAndPointsPick+0x4e8>)
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4413      	add	r3, r2
 80031ec:	6819      	ldr	r1, [r3, #0]
 80031ee:	487c      	ldr	r0, [pc, #496]	; (80033e0 <transformRectangleAndPointsPick+0x4ec>)
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	4613      	mov	r3, r2
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4403      	add	r3, r0
 80031fc:	6019      	str	r1, [r3, #0]
		homogeneousPoints[i][1] = points[i][1];
 80031fe:	4a77      	ldr	r2, [pc, #476]	; (80033dc <transformRectangleAndPointsPick+0x4e8>)
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4413      	add	r3, r2
 8003206:	3304      	adds	r3, #4
 8003208:	6819      	ldr	r1, [r3, #0]
 800320a:	4875      	ldr	r0, [pc, #468]	; (80033e0 <transformRectangleAndPointsPick+0x4ec>)
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	4613      	mov	r3, r2
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4403      	add	r3, r0
 8003218:	3304      	adds	r3, #4
 800321a:	6019      	str	r1, [r3, #0]
		homogeneousPoints[i][2] = 1;
 800321c:	4970      	ldr	r1, [pc, #448]	; (80033e0 <transformRectangleAndPointsPick+0x4ec>)
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4613      	mov	r3, r2
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	4413      	add	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	3308      	adds	r3, #8
 800322c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003230:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 9; i++) {
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	3301      	adds	r3, #1
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	2b08      	cmp	r3, #8
 800323c:	ddd2      	ble.n	80031e4 <transformRectangleAndPointsPick+0x2f0>
	}

	for (int i = 0; i < 9; i++) {
 800323e:	2300      	movs	r3, #0
 8003240:	613b      	str	r3, [r7, #16]
 8003242:	e050      	b.n	80032e6 <transformRectangleAndPointsPick+0x3f2>
		for (int j = 0; j < 3; j++) {
 8003244:	2300      	movs	r3, #0
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	e047      	b.n	80032da <transformRectangleAndPointsPick+0x3e6>
			transformedPoints[i][j] = 0;
 800324a:	4966      	ldr	r1, [pc, #408]	; (80033e4 <transformRectangleAndPointsPick+0x4f0>)
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4613      	mov	r3, r2
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	4413      	add	r3, r2
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	440b      	add	r3, r1
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
			for (int k = 0; k < 3; k++) {
 8003262:	2300      	movs	r3, #0
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	e032      	b.n	80032ce <transformRectangleAndPointsPick+0x3da>

				transformedPoints[i][j] += homogeneousPoints[i][k] * T[k][j];
 8003268:	495e      	ldr	r1, [pc, #376]	; (80033e4 <transformRectangleAndPointsPick+0x4f0>)
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4613      	mov	r3, r2
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	4413      	add	r3, r2
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	ed93 7a00 	vldr	s14, [r3]
 800327e:	4958      	ldr	r1, [pc, #352]	; (80033e0 <transformRectangleAndPointsPick+0x4ec>)
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4613      	mov	r3, r2
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4413      	add	r3, r2
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	edd3 6a00 	vldr	s13, [r3]
 8003294:	4954      	ldr	r1, [pc, #336]	; (80033e8 <transformRectangleAndPointsPick+0x4f4>)
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	4613      	mov	r3, r2
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	4413      	add	r3, r2
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	edd3 7a00 	vldr	s15, [r3]
 80032aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b2:	494c      	ldr	r1, [pc, #304]	; (80033e4 <transformRectangleAndPointsPick+0x4f0>)
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4613      	mov	r3, r2
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	4413      	add	r3, r2
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	edc3 7a00 	vstr	s15, [r3]
			for (int k = 0; k < 3; k++) {
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	3301      	adds	r3, #1
 80032cc:	60bb      	str	r3, [r7, #8]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	ddc9      	ble.n	8003268 <transformRectangleAndPointsPick+0x374>
		for (int j = 0; j < 3; j++) {
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	3301      	adds	r3, #1
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	ddb4      	ble.n	800324a <transformRectangleAndPointsPick+0x356>
	for (int i = 0; i < 9; i++) {
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	3301      	adds	r3, #1
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	ddab      	ble.n	8003244 <transformRectangleAndPointsPick+0x350>
			}
		}
	}

	// Translation points
	for (int i = 0; i < 9; i++) {
 80032ec:	2300      	movs	r3, #0
 80032ee:	607b      	str	r3, [r7, #4]
 80032f0:	e032      	b.n	8003358 <transformRectangleAndPointsPick+0x464>
		transformedPoints[i][0] = transformedPoints[i][0] + translation[0];
 80032f2:	493c      	ldr	r1, [pc, #240]	; (80033e4 <transformRectangleAndPointsPick+0x4f0>)
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	ed93 7a00 	vldr	s14, [r3]
 8003304:	4b39      	ldr	r3, [pc, #228]	; (80033ec <transformRectangleAndPointsPick+0x4f8>)
 8003306:	edd3 7a00 	vldr	s15, [r3]
 800330a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800330e:	4935      	ldr	r1, [pc, #212]	; (80033e4 <transformRectangleAndPointsPick+0x4f0>)
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	edc3 7a00 	vstr	s15, [r3]
		transformedPoints[i][1] = transformedPoints[i][1] + translation[1];
 8003320:	4930      	ldr	r1, [pc, #192]	; (80033e4 <transformRectangleAndPointsPick+0x4f0>)
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	3304      	adds	r3, #4
 8003330:	ed93 7a00 	vldr	s14, [r3]
 8003334:	4b2d      	ldr	r3, [pc, #180]	; (80033ec <transformRectangleAndPointsPick+0x4f8>)
 8003336:	edd3 7a01 	vldr	s15, [r3, #4]
 800333a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800333e:	4929      	ldr	r1, [pc, #164]	; (80033e4 <transformRectangleAndPointsPick+0x4f0>)
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	3304      	adds	r3, #4
 800334e:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 9; i++) {
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3301      	adds	r3, #1
 8003356:	607b      	str	r3, [r7, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b08      	cmp	r3, #8
 800335c:	ddc9      	ble.n	80032f2 <transformRectangleAndPointsPick+0x3fe>
		//transformedPoints[i][0] = transformedPoints[i][0] *(-1);

	}

	// Translation rectangle
	for (int i = 0; i < 5; i++) {
 800335e:	2300      	movs	r3, #0
 8003360:	603b      	str	r3, [r7, #0]
 8003362:	e032      	b.n	80033ca <transformRectangleAndPointsPick+0x4d6>
		transformedRectangle[i][0] = transformedRectangle[i][0]
 8003364:	4922      	ldr	r1, [pc, #136]	; (80033f0 <transformRectangleAndPointsPick+0x4fc>)
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	4613      	mov	r3, r2
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	ed93 7a00 	vldr	s14, [r3]
				+ +translation[0];
 8003376:	4b1d      	ldr	r3, [pc, #116]	; (80033ec <transformRectangleAndPointsPick+0x4f8>)
 8003378:	edd3 7a00 	vldr	s15, [r3]
 800337c:	ee77 7a27 	vadd.f32	s15, s14, s15
		transformedRectangle[i][0] = transformedRectangle[i][0]
 8003380:	491b      	ldr	r1, [pc, #108]	; (80033f0 <transformRectangleAndPointsPick+0x4fc>)
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	4613      	mov	r3, r2
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	edc3 7a00 	vstr	s15, [r3]
		transformedRectangle[i][1] = transformedRectangle[i][1]
 8003392:	4917      	ldr	r1, [pc, #92]	; (80033f0 <transformRectangleAndPointsPick+0x4fc>)
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	4613      	mov	r3, r2
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	4413      	add	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	3304      	adds	r3, #4
 80033a2:	ed93 7a00 	vldr	s14, [r3]
				+ translation[1];
 80033a6:	4b11      	ldr	r3, [pc, #68]	; (80033ec <transformRectangleAndPointsPick+0x4f8>)
 80033a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80033ac:	ee77 7a27 	vadd.f32	s15, s14, s15
		transformedRectangle[i][1] = transformedRectangle[i][1]
 80033b0:	490f      	ldr	r1, [pc, #60]	; (80033f0 <transformRectangleAndPointsPick+0x4fc>)
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	4613      	mov	r3, r2
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	4413      	add	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	3304      	adds	r3, #4
 80033c0:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 5; i++) {
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	3301      	adds	r3, #1
 80033c8:	603b      	str	r3, [r7, #0]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	ddc9      	ble.n	8003364 <transformRectangleAndPointsPick+0x470>
	}

}
 80033d0:	bf00      	nop
 80033d2:	bf00      	nop
 80033d4:	3728      	adds	r7, #40	; 0x28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	20000270 	.word	0x20000270
 80033e0:	20000a60 	.word	0x20000a60
 80033e4:	20000acc 	.word	0x20000acc
 80033e8:	200009c4 	.word	0x200009c4
 80033ec:	200009bc 	.word	0x200009bc
 80033f0:	20000a24 	.word	0x20000a24

080033f4 <transformRectangleAndPointsPlace>:
void transformRectangleAndPointsPlace() {
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08a      	sub	sp, #40	; 0x28
 80033f8:	af00      	add	r7, sp, #0

	translation2[0] = bottom_left_jog2[0];
 80033fa:	4bac      	ldr	r3, [pc, #688]	; (80036ac <transformRectangleAndPointsPlace+0x2b8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4aac      	ldr	r2, [pc, #688]	; (80036b0 <transformRectangleAndPointsPlace+0x2bc>)
 8003400:	6013      	str	r3, [r2, #0]
	translation2[1] = bottom_left_jog2[1];
 8003402:	4baa      	ldr	r3, [pc, #680]	; (80036ac <transformRectangleAndPointsPlace+0x2b8>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	4aaa      	ldr	r2, [pc, #680]	; (80036b0 <transformRectangleAndPointsPlace+0x2bc>)
 8003408:	6053      	str	r3, [r2, #4]

	bottom_right_jog2[0] = bottom_right_jog2[0] - translation2[0];
 800340a:	4baa      	ldr	r3, [pc, #680]	; (80036b4 <transformRectangleAndPointsPlace+0x2c0>)
 800340c:	ed93 7a00 	vldr	s14, [r3]
 8003410:	4ba7      	ldr	r3, [pc, #668]	; (80036b0 <transformRectangleAndPointsPlace+0x2bc>)
 8003412:	edd3 7a00 	vldr	s15, [r3]
 8003416:	ee77 7a67 	vsub.f32	s15, s14, s15
 800341a:	4ba6      	ldr	r3, [pc, #664]	; (80036b4 <transformRectangleAndPointsPlace+0x2c0>)
 800341c:	edc3 7a00 	vstr	s15, [r3]
	bottom_right_jog2[1] = bottom_right_jog2[1] - translation2[1];
 8003420:	4ba4      	ldr	r3, [pc, #656]	; (80036b4 <transformRectangleAndPointsPlace+0x2c0>)
 8003422:	ed93 7a01 	vldr	s14, [r3, #4]
 8003426:	4ba2      	ldr	r3, [pc, #648]	; (80036b0 <transformRectangleAndPointsPlace+0x2bc>)
 8003428:	edd3 7a01 	vldr	s15, [r3, #4]
 800342c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003430:	4ba0      	ldr	r3, [pc, #640]	; (80036b4 <transformRectangleAndPointsPlace+0x2c0>)
 8003432:	edc3 7a01 	vstr	s15, [r3, #4]

	dot_product2 = 60 * bottom_right_jog2[0] + bottom_right_jog2[1] * 0;
 8003436:	4b9f      	ldr	r3, [pc, #636]	; (80036b4 <transformRectangleAndPointsPlace+0x2c0>)
 8003438:	edd3 7a00 	vldr	s15, [r3]
 800343c:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80036b8 <transformRectangleAndPointsPlace+0x2c4>
 8003440:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003444:	4b9b      	ldr	r3, [pc, #620]	; (80036b4 <transformRectangleAndPointsPlace+0x2c0>)
 8003446:	edd3 7a01 	vldr	s15, [r3, #4]
 800344a:	eddf 6a9c 	vldr	s13, [pc, #624]	; 80036bc <transformRectangleAndPointsPlace+0x2c8>
 800344e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003456:	4b9a      	ldr	r3, [pc, #616]	; (80036c0 <transformRectangleAndPointsPlace+0x2cc>)
 8003458:	edc3 7a00 	vstr	s15, [r3]
	in_theta2 = dot_product2 / vectorsize2;
 800345c:	4b98      	ldr	r3, [pc, #608]	; (80036c0 <transformRectangleAndPointsPlace+0x2cc>)
 800345e:	edd3 6a00 	vldr	s13, [r3]
 8003462:	4b98      	ldr	r3, [pc, #608]	; (80036c4 <transformRectangleAndPointsPlace+0x2d0>)
 8003464:	ed93 7a00 	vldr	s14, [r3]
 8003468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800346c:	4b96      	ldr	r3, [pc, #600]	; (80036c8 <transformRectangleAndPointsPlace+0x2d4>)
 800346e:	edc3 7a00 	vstr	s15, [r3]
	theta2 = -acos(in_theta2);
 8003472:	4b95      	ldr	r3, [pc, #596]	; (80036c8 <transformRectangleAndPointsPlace+0x2d4>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fd f812 	bl	80004a0 <__aeabi_f2d>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	ec43 2b10 	vmov	d0, r2, r3
 8003484:	f007 f8d4 	bl	800a630 <acos>
 8003488:	ec53 2b10 	vmov	r2, r3, d0
 800348c:	4610      	mov	r0, r2
 800348e:	4619      	mov	r1, r3
 8003490:	f7fd fb36 	bl	8000b00 <__aeabi_d2f>
 8003494:	4603      	mov	r3, r0
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef1 7a67 	vneg.f32	s15, s15
 800349e:	4b8b      	ldr	r3, [pc, #556]	; (80036cc <transformRectangleAndPointsPlace+0x2d8>)
 80034a0:	edc3 7a00 	vstr	s15, [r3]

	T_rotation2[0][0] = cos(theta2);
 80034a4:	4b89      	ldr	r3, [pc, #548]	; (80036cc <transformRectangleAndPointsPlace+0x2d8>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fc fff9 	bl	80004a0 <__aeabi_f2d>
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	ec43 2b10 	vmov	d0, r2, r3
 80034b6:	f006 ff8f 	bl	800a3d8 <cos>
 80034ba:	ec53 2b10 	vmov	r2, r3, d0
 80034be:	4610      	mov	r0, r2
 80034c0:	4619      	mov	r1, r3
 80034c2:	f7fd fb1d 	bl	8000b00 <__aeabi_d2f>
 80034c6:	4603      	mov	r3, r0
 80034c8:	4a81      	ldr	r2, [pc, #516]	; (80036d0 <transformRectangleAndPointsPlace+0x2dc>)
 80034ca:	6013      	str	r3, [r2, #0]
	T_rotation2[0][1] = -sin(theta2);
 80034cc:	4b7f      	ldr	r3, [pc, #508]	; (80036cc <transformRectangleAndPointsPlace+0x2d8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fc ffe5 	bl	80004a0 <__aeabi_f2d>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	ec43 2b10 	vmov	d0, r2, r3
 80034de:	f007 f84f 	bl	800a580 <sin>
 80034e2:	ec53 2b10 	vmov	r2, r3, d0
 80034e6:	4610      	mov	r0, r2
 80034e8:	4619      	mov	r1, r3
 80034ea:	f7fd fb09 	bl	8000b00 <__aeabi_d2f>
 80034ee:	4603      	mov	r3, r0
 80034f0:	ee07 3a90 	vmov	s15, r3
 80034f4:	eef1 7a67 	vneg.f32	s15, s15
 80034f8:	4b75      	ldr	r3, [pc, #468]	; (80036d0 <transformRectangleAndPointsPlace+0x2dc>)
 80034fa:	edc3 7a01 	vstr	s15, [r3, #4]
	T_rotation2[1][0] = sin(theta2);
 80034fe:	4b73      	ldr	r3, [pc, #460]	; (80036cc <transformRectangleAndPointsPlace+0x2d8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f7fc ffcc 	bl	80004a0 <__aeabi_f2d>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	ec43 2b10 	vmov	d0, r2, r3
 8003510:	f007 f836 	bl	800a580 <sin>
 8003514:	ec53 2b10 	vmov	r2, r3, d0
 8003518:	4610      	mov	r0, r2
 800351a:	4619      	mov	r1, r3
 800351c:	f7fd faf0 	bl	8000b00 <__aeabi_d2f>
 8003520:	4603      	mov	r3, r0
 8003522:	4a6b      	ldr	r2, [pc, #428]	; (80036d0 <transformRectangleAndPointsPlace+0x2dc>)
 8003524:	6093      	str	r3, [r2, #8]
	T_rotation2[1][1] = cos(theta2);
 8003526:	4b69      	ldr	r3, [pc, #420]	; (80036cc <transformRectangleAndPointsPlace+0x2d8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7fc ffb8 	bl	80004a0 <__aeabi_f2d>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	ec43 2b10 	vmov	d0, r2, r3
 8003538:	f006 ff4e 	bl	800a3d8 <cos>
 800353c:	ec53 2b10 	vmov	r2, r3, d0
 8003540:	4610      	mov	r0, r2
 8003542:	4619      	mov	r1, r3
 8003544:	f7fd fadc 	bl	8000b00 <__aeabi_d2f>
 8003548:	4603      	mov	r3, r0
 800354a:	4a61      	ldr	r2, [pc, #388]	; (80036d0 <transformRectangleAndPointsPlace+0x2dc>)
 800354c:	60d3      	str	r3, [r2, #12]

	T2[0][0] = T_rotation2[0][0];
 800354e:	4b60      	ldr	r3, [pc, #384]	; (80036d0 <transformRectangleAndPointsPlace+0x2dc>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a60      	ldr	r2, [pc, #384]	; (80036d4 <transformRectangleAndPointsPlace+0x2e0>)
 8003554:	6013      	str	r3, [r2, #0]
	T2[0][1] = T_rotation2[0][1];
 8003556:	4b5e      	ldr	r3, [pc, #376]	; (80036d0 <transformRectangleAndPointsPlace+0x2dc>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	4a5e      	ldr	r2, [pc, #376]	; (80036d4 <transformRectangleAndPointsPlace+0x2e0>)
 800355c:	6053      	str	r3, [r2, #4]
	T2[0][2] = translation2[0];
 800355e:	4b54      	ldr	r3, [pc, #336]	; (80036b0 <transformRectangleAndPointsPlace+0x2bc>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a5c      	ldr	r2, [pc, #368]	; (80036d4 <transformRectangleAndPointsPlace+0x2e0>)
 8003564:	6093      	str	r3, [r2, #8]
	T2[1][0] = T_rotation2[1][0];
 8003566:	4b5a      	ldr	r3, [pc, #360]	; (80036d0 <transformRectangleAndPointsPlace+0x2dc>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	4a5a      	ldr	r2, [pc, #360]	; (80036d4 <transformRectangleAndPointsPlace+0x2e0>)
 800356c:	60d3      	str	r3, [r2, #12]
	T2[1][1] = T_rotation2[1][1];
 800356e:	4b58      	ldr	r3, [pc, #352]	; (80036d0 <transformRectangleAndPointsPlace+0x2dc>)
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	4a58      	ldr	r2, [pc, #352]	; (80036d4 <transformRectangleAndPointsPlace+0x2e0>)
 8003574:	6113      	str	r3, [r2, #16]
	T2[1][2] = translation2[1];
 8003576:	4b4e      	ldr	r3, [pc, #312]	; (80036b0 <transformRectangleAndPointsPlace+0x2bc>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4a56      	ldr	r2, [pc, #344]	; (80036d4 <transformRectangleAndPointsPlace+0x2e0>)
 800357c:	6153      	str	r3, [r2, #20]
	T2[2][0] = 0;
 800357e:	4b55      	ldr	r3, [pc, #340]	; (80036d4 <transformRectangleAndPointsPlace+0x2e0>)
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	619a      	str	r2, [r3, #24]
	T2[2][1] = 0;
 8003586:	4b53      	ldr	r3, [pc, #332]	; (80036d4 <transformRectangleAndPointsPlace+0x2e0>)
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	61da      	str	r2, [r3, #28]
	T2[2][2] = 1;
 800358e:	4b51      	ldr	r3, [pc, #324]	; (80036d4 <transformRectangleAndPointsPlace+0x2e0>)
 8003590:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003594:	621a      	str	r2, [r3, #32]

	// Transform the rectangle
	for (int i = 0; i < 5; i++) {
 8003596:	2300      	movs	r3, #0
 8003598:	627b      	str	r3, [r7, #36]	; 0x24
 800359a:	e029      	b.n	80035f0 <transformRectangleAndPointsPlace+0x1fc>
		homogeneousRectangle2[i][0] = rectangle2[i][0];
 800359c:	4a4e      	ldr	r2, [pc, #312]	; (80036d8 <transformRectangleAndPointsPlace+0x2e4>)
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4413      	add	r3, r2
 80035a4:	6819      	ldr	r1, [r3, #0]
 80035a6:	484d      	ldr	r0, [pc, #308]	; (80036dc <transformRectangleAndPointsPlace+0x2e8>)
 80035a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035aa:	4613      	mov	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4403      	add	r3, r0
 80035b4:	6019      	str	r1, [r3, #0]
		homogeneousRectangle2[i][1] = rectangle2[i][1];
 80035b6:	4a48      	ldr	r2, [pc, #288]	; (80036d8 <transformRectangleAndPointsPlace+0x2e4>)
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	4413      	add	r3, r2
 80035be:	3304      	adds	r3, #4
 80035c0:	6819      	ldr	r1, [r3, #0]
 80035c2:	4846      	ldr	r0, [pc, #280]	; (80036dc <transformRectangleAndPointsPlace+0x2e8>)
 80035c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c6:	4613      	mov	r3, r2
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4403      	add	r3, r0
 80035d0:	3304      	adds	r3, #4
 80035d2:	6019      	str	r1, [r3, #0]
		homogeneousRectangle2[i][2] = 1;
 80035d4:	4941      	ldr	r1, [pc, #260]	; (80036dc <transformRectangleAndPointsPlace+0x2e8>)
 80035d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d8:	4613      	mov	r3, r2
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	3308      	adds	r3, #8
 80035e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80035e8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 5; i++) {
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	3301      	adds	r3, #1
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	ddd2      	ble.n	800359c <transformRectangleAndPointsPlace+0x1a8>
	}

	for (int i = 0; i < 5; i++) {
 80035f6:	2300      	movs	r3, #0
 80035f8:	623b      	str	r3, [r7, #32]
 80035fa:	e050      	b.n	800369e <transformRectangleAndPointsPlace+0x2aa>
		for (int j = 0; j < 3; j++) {
 80035fc:	2300      	movs	r3, #0
 80035fe:	61fb      	str	r3, [r7, #28]
 8003600:	e047      	b.n	8003692 <transformRectangleAndPointsPlace+0x29e>
			transformedRectangle2[i][j] = 0;
 8003602:	4937      	ldr	r1, [pc, #220]	; (80036e0 <transformRectangleAndPointsPlace+0x2ec>)
 8003604:	6a3a      	ldr	r2, [r7, #32]
 8003606:	4613      	mov	r3, r2
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	4413      	add	r3, r2
 800360c:	69fa      	ldr	r2, [r7, #28]
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	440b      	add	r3, r1
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	601a      	str	r2, [r3, #0]
			for (int k = 0; k < 3; k++) {
 800361a:	2300      	movs	r3, #0
 800361c:	61bb      	str	r3, [r7, #24]
 800361e:	e032      	b.n	8003686 <transformRectangleAndPointsPlace+0x292>
				transformedRectangle2[i][j] += homogeneousRectangle2[i][k]
 8003620:	492f      	ldr	r1, [pc, #188]	; (80036e0 <transformRectangleAndPointsPlace+0x2ec>)
 8003622:	6a3a      	ldr	r2, [r7, #32]
 8003624:	4613      	mov	r3, r2
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	4413      	add	r3, r2
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	4413      	add	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	ed93 7a00 	vldr	s14, [r3]
 8003636:	4929      	ldr	r1, [pc, #164]	; (80036dc <transformRectangleAndPointsPlace+0x2e8>)
 8003638:	6a3a      	ldr	r2, [r7, #32]
 800363a:	4613      	mov	r3, r2
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	4413      	add	r3, r2
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4413      	add	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	edd3 6a00 	vldr	s13, [r3]
						* T2[k][j];
 800364c:	4921      	ldr	r1, [pc, #132]	; (80036d4 <transformRectangleAndPointsPlace+0x2e0>)
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4613      	mov	r3, r2
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	4413      	add	r3, r2
 8003656:	69fa      	ldr	r2, [r7, #28]
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	edd3 7a00 	vldr	s15, [r3]
 8003662:	ee66 7aa7 	vmul.f32	s15, s13, s15
				transformedRectangle2[i][j] += homogeneousRectangle2[i][k]
 8003666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800366a:	491d      	ldr	r1, [pc, #116]	; (80036e0 <transformRectangleAndPointsPlace+0x2ec>)
 800366c:	6a3a      	ldr	r2, [r7, #32]
 800366e:	4613      	mov	r3, r2
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	4413      	add	r3, r2
 8003674:	69fa      	ldr	r2, [r7, #28]
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	edc3 7a00 	vstr	s15, [r3]
			for (int k = 0; k < 3; k++) {
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	3301      	adds	r3, #1
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	2b02      	cmp	r3, #2
 800368a:	ddc9      	ble.n	8003620 <transformRectangleAndPointsPlace+0x22c>
		for (int j = 0; j < 3; j++) {
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	3301      	adds	r3, #1
 8003690:	61fb      	str	r3, [r7, #28]
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	2b02      	cmp	r3, #2
 8003696:	ddb4      	ble.n	8003602 <transformRectangleAndPointsPlace+0x20e>
	for (int i = 0; i < 5; i++) {
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	3301      	adds	r3, #1
 800369c:	623b      	str	r3, [r7, #32]
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	ddab      	ble.n	80035fc <transformRectangleAndPointsPlace+0x208>
			}
		}
	}

	// Transform the points
	for (int i = 0; i < 9; i++) {
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	e046      	b.n	8003738 <transformRectangleAndPointsPlace+0x344>
 80036aa:	bf00      	nop
 80036ac:	20000cf8 	.word	0x20000cf8
 80036b0:	20000b70 	.word	0x20000b70
 80036b4:	20000d00 	.word	0x20000d00
 80036b8:	42700000 	.word	0x42700000
 80036bc:	00000000 	.word	0x00000000
 80036c0:	20000cec 	.word	0x20000cec
 80036c4:	2000032c 	.word	0x2000032c
 80036c8:	20000cf4 	.word	0x20000cf4
 80036cc:	20000cf0 	.word	0x20000cf0
 80036d0:	20000b54 	.word	0x20000b54
 80036d4:	20000b78 	.word	0x20000b78
 80036d8:	200002bc 	.word	0x200002bc
 80036dc:	20000b9c 	.word	0x20000b9c
 80036e0:	20000bd8 	.word	0x20000bd8
		homogeneousPoints2[i][0] = points2[i][0];
 80036e4:	4a7d      	ldr	r2, [pc, #500]	; (80038dc <transformRectangleAndPointsPlace+0x4e8>)
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	4413      	add	r3, r2
 80036ec:	6819      	ldr	r1, [r3, #0]
 80036ee:	487c      	ldr	r0, [pc, #496]	; (80038e0 <transformRectangleAndPointsPlace+0x4ec>)
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	4613      	mov	r3, r2
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4403      	add	r3, r0
 80036fc:	6019      	str	r1, [r3, #0]
		homogeneousPoints2[i][1] = points2[i][1];
 80036fe:	4a77      	ldr	r2, [pc, #476]	; (80038dc <transformRectangleAndPointsPlace+0x4e8>)
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	4413      	add	r3, r2
 8003706:	3304      	adds	r3, #4
 8003708:	6819      	ldr	r1, [r3, #0]
 800370a:	4875      	ldr	r0, [pc, #468]	; (80038e0 <transformRectangleAndPointsPlace+0x4ec>)
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	4613      	mov	r3, r2
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4403      	add	r3, r0
 8003718:	3304      	adds	r3, #4
 800371a:	6019      	str	r1, [r3, #0]
		homogeneousPoints2[i][2] = 1;
 800371c:	4970      	ldr	r1, [pc, #448]	; (80038e0 <transformRectangleAndPointsPlace+0x4ec>)
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	4613      	mov	r3, r2
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	3308      	adds	r3, #8
 800372c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003730:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 9; i++) {
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	3301      	adds	r3, #1
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	2b08      	cmp	r3, #8
 800373c:	ddd2      	ble.n	80036e4 <transformRectangleAndPointsPlace+0x2f0>
	}

	for (int i = 0; i < 9; i++) {
 800373e:	2300      	movs	r3, #0
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	e050      	b.n	80037e6 <transformRectangleAndPointsPlace+0x3f2>
		for (int j = 0; j < 3; j++) {
 8003744:	2300      	movs	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	e047      	b.n	80037da <transformRectangleAndPointsPlace+0x3e6>
			transformedPoints2[i][j] = 0;
 800374a:	4966      	ldr	r1, [pc, #408]	; (80038e4 <transformRectangleAndPointsPlace+0x4f0>)
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4613      	mov	r3, r2
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4413      	add	r3, r2
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4413      	add	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
			for (int k = 0; k < 3; k++) {
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	e032      	b.n	80037ce <transformRectangleAndPointsPlace+0x3da>

				transformedPoints2[i][j] += homogeneousPoints2[i][k] * T2[k][j];
 8003768:	495e      	ldr	r1, [pc, #376]	; (80038e4 <transformRectangleAndPointsPlace+0x4f0>)
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4613      	mov	r3, r2
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	4413      	add	r3, r2
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	ed93 7a00 	vldr	s14, [r3]
 800377e:	4958      	ldr	r1, [pc, #352]	; (80038e0 <transformRectangleAndPointsPlace+0x4ec>)
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4613      	mov	r3, r2
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	4413      	add	r3, r2
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	4413      	add	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	edd3 6a00 	vldr	s13, [r3]
 8003794:	4954      	ldr	r1, [pc, #336]	; (80038e8 <transformRectangleAndPointsPlace+0x4f4>)
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	4613      	mov	r3, r2
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	4413      	add	r3, r2
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	edd3 7a00 	vldr	s15, [r3]
 80037aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037b2:	494c      	ldr	r1, [pc, #304]	; (80038e4 <transformRectangleAndPointsPlace+0x4f0>)
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4613      	mov	r3, r2
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	4413      	add	r3, r2
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	edc3 7a00 	vstr	s15, [r3]
			for (int k = 0; k < 3; k++) {
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	3301      	adds	r3, #1
 80037cc:	60bb      	str	r3, [r7, #8]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	ddc9      	ble.n	8003768 <transformRectangleAndPointsPlace+0x374>
		for (int j = 0; j < 3; j++) {
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	3301      	adds	r3, #1
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	ddb4      	ble.n	800374a <transformRectangleAndPointsPlace+0x356>
	for (int i = 0; i < 9; i++) {
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	3301      	adds	r3, #1
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	ddab      	ble.n	8003744 <transformRectangleAndPointsPlace+0x350>
			}
		}
	}

	// Translation points
	for (int i = 0; i < 9; i++) {
 80037ec:	2300      	movs	r3, #0
 80037ee:	607b      	str	r3, [r7, #4]
 80037f0:	e032      	b.n	8003858 <transformRectangleAndPointsPlace+0x464>
		transformedPoints2[i][0] = transformedPoints2[i][0] + translation2[0];
 80037f2:	493c      	ldr	r1, [pc, #240]	; (80038e4 <transformRectangleAndPointsPlace+0x4f0>)
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	ed93 7a00 	vldr	s14, [r3]
 8003804:	4b39      	ldr	r3, [pc, #228]	; (80038ec <transformRectangleAndPointsPlace+0x4f8>)
 8003806:	edd3 7a00 	vldr	s15, [r3]
 800380a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800380e:	4935      	ldr	r1, [pc, #212]	; (80038e4 <transformRectangleAndPointsPlace+0x4f0>)
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	4413      	add	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	edc3 7a00 	vstr	s15, [r3]
		transformedPoints2[i][1] = transformedPoints2[i][1] + translation2[1];
 8003820:	4930      	ldr	r1, [pc, #192]	; (80038e4 <transformRectangleAndPointsPlace+0x4f0>)
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	4613      	mov	r3, r2
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	4413      	add	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	3304      	adds	r3, #4
 8003830:	ed93 7a00 	vldr	s14, [r3]
 8003834:	4b2d      	ldr	r3, [pc, #180]	; (80038ec <transformRectangleAndPointsPlace+0x4f8>)
 8003836:	edd3 7a01 	vldr	s15, [r3, #4]
 800383a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800383e:	4929      	ldr	r1, [pc, #164]	; (80038e4 <transformRectangleAndPointsPlace+0x4f0>)
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	4413      	add	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	3304      	adds	r3, #4
 800384e:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 9; i++) {
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3301      	adds	r3, #1
 8003856:	607b      	str	r3, [r7, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b08      	cmp	r3, #8
 800385c:	ddc9      	ble.n	80037f2 <transformRectangleAndPointsPlace+0x3fe>
		//transformedPoints2[i][0] = transformedPoints2[i][0] *(-1);

	}

	// Translation rectangle
	for (int i = 0; i < 5; i++) {
 800385e:	2300      	movs	r3, #0
 8003860:	603b      	str	r3, [r7, #0]
 8003862:	e032      	b.n	80038ca <transformRectangleAndPointsPlace+0x4d6>
		transformedRectangle2[i][0] = transformedRectangle2[i][0]
 8003864:	4922      	ldr	r1, [pc, #136]	; (80038f0 <transformRectangleAndPointsPlace+0x4fc>)
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	4613      	mov	r3, r2
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	ed93 7a00 	vldr	s14, [r3]
				+ +translation2[0];
 8003876:	4b1d      	ldr	r3, [pc, #116]	; (80038ec <transformRectangleAndPointsPlace+0x4f8>)
 8003878:	edd3 7a00 	vldr	s15, [r3]
 800387c:	ee77 7a27 	vadd.f32	s15, s14, s15
		transformedRectangle2[i][0] = transformedRectangle2[i][0]
 8003880:	491b      	ldr	r1, [pc, #108]	; (80038f0 <transformRectangleAndPointsPlace+0x4fc>)
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	4613      	mov	r3, r2
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	4413      	add	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	edc3 7a00 	vstr	s15, [r3]
		transformedRectangle2[i][1] = transformedRectangle2[i][1]
 8003892:	4917      	ldr	r1, [pc, #92]	; (80038f0 <transformRectangleAndPointsPlace+0x4fc>)
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	4613      	mov	r3, r2
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	3304      	adds	r3, #4
 80038a2:	ed93 7a00 	vldr	s14, [r3]
				+ translation2[1];
 80038a6:	4b11      	ldr	r3, [pc, #68]	; (80038ec <transformRectangleAndPointsPlace+0x4f8>)
 80038a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80038ac:	ee77 7a27 	vadd.f32	s15, s14, s15
		transformedRectangle2[i][1] = transformedRectangle2[i][1]
 80038b0:	490f      	ldr	r1, [pc, #60]	; (80038f0 <transformRectangleAndPointsPlace+0x4fc>)
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	4613      	mov	r3, r2
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	3304      	adds	r3, #4
 80038c0:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 5; i++) {
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	3301      	adds	r3, #1
 80038c8:	603b      	str	r3, [r7, #0]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	ddc9      	ble.n	8003864 <transformRectangleAndPointsPlace+0x470>
	}

}
 80038d0:	bf00      	nop
 80038d2:	bf00      	nop
 80038d4:	3728      	adds	r7, #40	; 0x28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	200002e4 	.word	0x200002e4
 80038e0:	20000c14 	.word	0x20000c14
 80038e4:	20000c80 	.word	0x20000c80
 80038e8:	20000b78 	.word	0x20000b78
 80038ec:	20000b70 	.word	0x20000b70
 80038f0:	20000bd8 	.word	0x20000bd8
 80038f4:	00000000 	.word	0x00000000

080038f8 <flowmodbus>:
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 1) {
			TIM2->CNT = 17920;
		}
	}
}
void flowmodbus() {
 80038f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
	switch (Mobus) {
 8003900:	4b97      	ldr	r3, [pc, #604]	; (8003b60 <flowmodbus+0x268>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b05      	cmp	r3, #5
 8003906:	f200 84ec 	bhi.w	80042e2 <flowmodbus+0x9ea>
 800390a:	a201      	add	r2, pc, #4	; (adr r2, 8003910 <flowmodbus+0x18>)
 800390c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003910:	08003929 	.word	0x08003929
 8003914:	08003a81 	.word	0x08003a81
 8003918:	08003d45 	.word	0x08003d45
 800391c:	08003ff3 	.word	0x08003ff3
 8003920:	08004003 	.word	0x08004003
 8003924:	08004201 	.word	0x08004201
	case Initial:
		//choice = 1;
		if (registerFrame[1].U16 == 0b00010) { // Set Place
 8003928:	4b8e      	ldr	r3, [pc, #568]	; (8003b64 <flowmodbus+0x26c>)
 800392a:	885b      	ldrh	r3, [r3, #2]
 800392c:	2b02      	cmp	r3, #2
 800392e:	d110      	bne.n	8003952 <flowmodbus+0x5a>
			registerFrame[1].U16 = 0; // 0x01 base system reset place tray
 8003930:	4b8c      	ldr	r3, [pc, #560]	; (8003b64 <flowmodbus+0x26c>)
 8003932:	2200      	movs	r2, #0
 8003934:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 2; // 0x10 y-axis Set Place
 8003936:	4b8b      	ldr	r3, [pc, #556]	; (8003b64 <flowmodbus+0x26c>)
 8003938:	2202      	movs	r2, #2
 800393a:	841a      	strh	r2, [r3, #32]
			Joystick_Control = 1;
 800393c:	4b8a      	ldr	r3, [pc, #552]	; (8003b68 <flowmodbus+0x270>)
 800393e:	2201      	movs	r2, #1
 8003940:	601a      	str	r2, [r3, #0]
			choice = 1;
 8003942:	4b8a      	ldr	r3, [pc, #552]	; (8003b6c <flowmodbus+0x274>)
 8003944:	2201      	movs	r2, #1
 8003946:	601a      	str	r2, [r3, #0]
			//I2C_all();
			Mobus = Jogging_Place;
 8003948:	4b85      	ldr	r3, [pc, #532]	; (8003b60 <flowmodbus+0x268>)
 800394a:	2201      	movs	r2, #1
 800394c:	701a      	strb	r2, [r3, #0]
				point_x[b++] = transformedPoints2[j][0];
				point_x[b++] = transformedPoints[j][0];
			}
			Mobus = Run_TrayMode;
		}
		break;
 800394e:	f000 bcc5 	b.w	80042dc <flowmodbus+0x9e4>
		} else if (registerFrame[1].U16 == 0b00001) { //Set Pick
 8003952:	4b84      	ldr	r3, [pc, #528]	; (8003b64 <flowmodbus+0x26c>)
 8003954:	885b      	ldrh	r3, [r3, #2]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d110      	bne.n	800397c <flowmodbus+0x84>
			registerFrame[1].U16 = 0; // 0x01 base system reset place tray
 800395a:	4b82      	ldr	r3, [pc, #520]	; (8003b64 <flowmodbus+0x26c>)
 800395c:	2200      	movs	r2, #0
 800395e:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 1; // 0x10 y-axis Set Pick
 8003960:	4b80      	ldr	r3, [pc, #512]	; (8003b64 <flowmodbus+0x26c>)
 8003962:	2201      	movs	r2, #1
 8003964:	841a      	strh	r2, [r3, #32]
			Joystick_Control = 1;
 8003966:	4b80      	ldr	r3, [pc, #512]	; (8003b68 <flowmodbus+0x270>)
 8003968:	2201      	movs	r2, #1
 800396a:	601a      	str	r2, [r3, #0]
			choice = 1;
 800396c:	4b7f      	ldr	r3, [pc, #508]	; (8003b6c <flowmodbus+0x274>)
 800396e:	2201      	movs	r2, #1
 8003970:	601a      	str	r2, [r3, #0]
			Mobus = Jogging_Pick;
 8003972:	4b7b      	ldr	r3, [pc, #492]	; (8003b60 <flowmodbus+0x268>)
 8003974:	2202      	movs	r2, #2
 8003976:	701a      	strb	r2, [r3, #0]
		break;
 8003978:	f000 bcb0 	b.w	80042dc <flowmodbus+0x9e4>
		} else if (registerFrame[1].U16 == 0b10000) { // Run point Mode
 800397c:	4b79      	ldr	r3, [pc, #484]	; (8003b64 <flowmodbus+0x26c>)
 800397e:	885b      	ldrh	r3, [r3, #2]
 8003980:	2b10      	cmp	r3, #16
 8003982:	d10d      	bne.n	80039a0 <flowmodbus+0xa8>
			registerFrame[1].U16 = 0; // base system run point mode reset
 8003984:	4b77      	ldr	r3, [pc, #476]	; (8003b64 <flowmodbus+0x26c>)
 8003986:	2200      	movs	r2, #0
 8003988:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 16; // y-axis moving status go point x
 800398a:	4b76      	ldr	r3, [pc, #472]	; (8003b64 <flowmodbus+0x26c>)
 800398c:	2210      	movs	r2, #16
 800398e:	841a      	strh	r2, [r3, #32]
			Joystick_Control = 0;
 8003990:	4b75      	ldr	r3, [pc, #468]	; (8003b68 <flowmodbus+0x270>)
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
			Mobus = Run_PointMode;
 8003996:	4b72      	ldr	r3, [pc, #456]	; (8003b60 <flowmodbus+0x268>)
 8003998:	2204      	movs	r2, #4
 800399a:	701a      	strb	r2, [r3, #0]
		break;
 800399c:	f000 bc9e 	b.w	80042dc <flowmodbus+0x9e4>
		} else if (registerFrame[1].U16 == 0b00100) { // Set Home
 80039a0:	4b70      	ldr	r3, [pc, #448]	; (8003b64 <flowmodbus+0x26c>)
 80039a2:	885b      	ldrh	r3, [r3, #2]
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d107      	bne.n	80039b8 <flowmodbus+0xc0>
			registerFrame[1].U16 = 0;
 80039a8:	4b6e      	ldr	r3, [pc, #440]	; (8003b64 <flowmodbus+0x26c>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	805a      	strh	r2, [r3, #2]
			Mobus = Home;
 80039ae:	4b6c      	ldr	r3, [pc, #432]	; (8003b60 <flowmodbus+0x268>)
 80039b0:	2203      	movs	r2, #3
 80039b2:	701a      	strb	r2, [r3, #0]
		break;
 80039b4:	f000 bc92 	b.w	80042dc <flowmodbus+0x9e4>
		} else if (registerFrame[1].U16 == 0b01000) {
 80039b8:	4b6a      	ldr	r3, [pc, #424]	; (8003b64 <flowmodbus+0x26c>)
 80039ba:	885b      	ldrh	r3, [r3, #2]
 80039bc:	2b08      	cmp	r3, #8
 80039be:	f040 848d 	bne.w	80042dc <flowmodbus+0x9e4>
			registerFrame[1].U16 = 0;
 80039c2:	4b68      	ldr	r3, [pc, #416]	; (8003b64 <flowmodbus+0x26c>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	805a      	strh	r2, [r3, #2]
			choice = 2;
 80039c8:	4b68      	ldr	r3, [pc, #416]	; (8003b6c <flowmodbus+0x274>)
 80039ca:	2202      	movs	r2, #2
 80039cc:	601a      	str	r2, [r3, #0]
			k = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	607b      	str	r3, [r7, #4]
			b = 0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	603b      	str	r3, [r7, #0]
			for (i = 0; i < 9; i++) {
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	e022      	b.n	8003a22 <flowmodbus+0x12a>
				point_y[k++] = transformedPoints2[i][1];
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	1c53      	adds	r3, r2, #1
 80039e0:	607b      	str	r3, [r7, #4]
 80039e2:	4863      	ldr	r0, [pc, #396]	; (8003b70 <flowmodbus+0x278>)
 80039e4:	68f9      	ldr	r1, [r7, #12]
 80039e6:	460b      	mov	r3, r1
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	440b      	add	r3, r1
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4403      	add	r3, r0
 80039f0:	3304      	adds	r3, #4
 80039f2:	6819      	ldr	r1, [r3, #0]
 80039f4:	485f      	ldr	r0, [pc, #380]	; (8003b74 <flowmodbus+0x27c>)
 80039f6:	0093      	lsls	r3, r2, #2
 80039f8:	4403      	add	r3, r0
 80039fa:	6019      	str	r1, [r3, #0]
				point_y[k++] = transformedPoints[i][1];
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	1c53      	adds	r3, r2, #1
 8003a00:	607b      	str	r3, [r7, #4]
 8003a02:	485d      	ldr	r0, [pc, #372]	; (8003b78 <flowmodbus+0x280>)
 8003a04:	68f9      	ldr	r1, [r7, #12]
 8003a06:	460b      	mov	r3, r1
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	440b      	add	r3, r1
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4403      	add	r3, r0
 8003a10:	3304      	adds	r3, #4
 8003a12:	6819      	ldr	r1, [r3, #0]
 8003a14:	4857      	ldr	r0, [pc, #348]	; (8003b74 <flowmodbus+0x27c>)
 8003a16:	0093      	lsls	r3, r2, #2
 8003a18:	4403      	add	r3, r0
 8003a1a:	6019      	str	r1, [r3, #0]
			for (i = 0; i < 9; i++) {
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	ddd9      	ble.n	80039dc <flowmodbus+0xe4>
			for (j = 0; j < 9; j++) {
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60bb      	str	r3, [r7, #8]
 8003a2c:	e020      	b.n	8003a70 <flowmodbus+0x178>
				point_x[b++] = transformedPoints2[j][0];
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	1c53      	adds	r3, r2, #1
 8003a32:	603b      	str	r3, [r7, #0]
 8003a34:	484e      	ldr	r0, [pc, #312]	; (8003b70 <flowmodbus+0x278>)
 8003a36:	68b9      	ldr	r1, [r7, #8]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	440b      	add	r3, r1
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4403      	add	r3, r0
 8003a42:	6819      	ldr	r1, [r3, #0]
 8003a44:	484d      	ldr	r0, [pc, #308]	; (8003b7c <flowmodbus+0x284>)
 8003a46:	0093      	lsls	r3, r2, #2
 8003a48:	4403      	add	r3, r0
 8003a4a:	6019      	str	r1, [r3, #0]
				point_x[b++] = transformedPoints[j][0];
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	1c53      	adds	r3, r2, #1
 8003a50:	603b      	str	r3, [r7, #0]
 8003a52:	4849      	ldr	r0, [pc, #292]	; (8003b78 <flowmodbus+0x280>)
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	460b      	mov	r3, r1
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	440b      	add	r3, r1
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4403      	add	r3, r0
 8003a60:	6819      	ldr	r1, [r3, #0]
 8003a62:	4846      	ldr	r0, [pc, #280]	; (8003b7c <flowmodbus+0x284>)
 8003a64:	0093      	lsls	r3, r2, #2
 8003a66:	4403      	add	r3, r0
 8003a68:	6019      	str	r1, [r3, #0]
			for (j = 0; j < 9; j++) {
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	dddb      	ble.n	8003a2e <flowmodbus+0x136>
			Mobus = Run_TrayMode;
 8003a76:	4b3a      	ldr	r3, [pc, #232]	; (8003b60 <flowmodbus+0x268>)
 8003a78:	2205      	movs	r2, #5
 8003a7a:	701a      	strb	r2, [r3, #0]
		break;
 8003a7c:	f000 bc2e 	b.w	80042dc <flowmodbus+0x9e4>
	case Jogging_Place:
		//y-axis jogging
		if (Joystick_position[1] >= 3150) {
 8003a80:	4b3f      	ldr	r3, [pc, #252]	; (8003b80 <flowmodbus+0x288>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f640 424d 	movw	r2, #3149	; 0xc4d
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d90a      	bls.n	8003aa2 <flowmodbus+0x1aa>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, JoystickSpeed);
 8003a8c:	4b3d      	ldr	r3, [pc, #244]	; (8003b84 <flowmodbus+0x28c>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	4b3d      	ldr	r3, [pc, #244]	; (8003b88 <flowmodbus+0x290>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003a96:	2200      	movs	r2, #0
 8003a98:	2180      	movs	r1, #128	; 0x80
 8003a9a:	483c      	ldr	r0, [pc, #240]	; (8003b8c <flowmodbus+0x294>)
 8003a9c:	f002 fd74 	bl	8006588 <HAL_GPIO_WritePin>
 8003aa0:	e017      	b.n	8003ad2 <flowmodbus+0x1da>
		} else if (Joystick_position[1] <= 100) {
 8003aa2:	4b37      	ldr	r3, [pc, #220]	; (8003b80 <flowmodbus+0x288>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b64      	cmp	r3, #100	; 0x64
 8003aa8:	d80a      	bhi.n	8003ac0 <flowmodbus+0x1c8>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, JoystickSpeed);
 8003aaa:	4b36      	ldr	r3, [pc, #216]	; (8003b84 <flowmodbus+0x28c>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	4b36      	ldr	r3, [pc, #216]	; (8003b88 <flowmodbus+0x290>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	2180      	movs	r1, #128	; 0x80
 8003ab8:	4834      	ldr	r0, [pc, #208]	; (8003b8c <flowmodbus+0x294>)
 8003aba:	f002 fd65 	bl	8006588 <HAL_GPIO_WritePin>
 8003abe:	e008      	b.n	8003ad2 <flowmodbus+0x1da>
		} else {
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8003ac0:	4b31      	ldr	r3, [pc, #196]	; (8003b88 <flowmodbus+0x290>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2180      	movs	r1, #128	; 0x80
 8003acc:	482f      	ldr	r0, [pc, #188]	; (8003b8c <flowmodbus+0x294>)
 8003ace:	f002 fd5b 	bl	8006588 <HAL_GPIO_WritePin>
		}
		//x-axis jogging
		if (Joystick_position[0] >= 3150) {
 8003ad2:	4b2b      	ldr	r3, [pc, #172]	; (8003b80 <flowmodbus+0x288>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f640 424d 	movw	r2, #3149	; 0xc4d
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d904      	bls.n	8003ae8 <flowmodbus+0x1f0>
			registerFrame[64].U16 = 8;
 8003ade:	4b21      	ldr	r3, [pc, #132]	; (8003b64 <flowmodbus+0x26c>)
 8003ae0:	2208      	movs	r2, #8
 8003ae2:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8003ae6:	e00c      	b.n	8003b02 <flowmodbus+0x20a>
		} else if (Joystick_position[0] <= 100) {
 8003ae8:	4b25      	ldr	r3, [pc, #148]	; (8003b80 <flowmodbus+0x288>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b64      	cmp	r3, #100	; 0x64
 8003aee:	d804      	bhi.n	8003afa <flowmodbus+0x202>
			registerFrame[64].U16 = 4;
 8003af0:	4b1c      	ldr	r3, [pc, #112]	; (8003b64 <flowmodbus+0x26c>)
 8003af2:	2204      	movs	r2, #4
 8003af4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8003af8:	e003      	b.n	8003b02 <flowmodbus+0x20a>
		} else {
			registerFrame[64].U16 = 0;
 8003afa:	4b1a      	ldr	r3, [pc, #104]	; (8003b64 <flowmodbus+0x26c>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		}

		// Set position
		buttonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8003b02:	2120      	movs	r1, #32
 8003b04:	4822      	ldr	r0, [pc, #136]	; (8003b90 <flowmodbus+0x298>)
 8003b06:	f002 fd27 	bl	8006558 <HAL_GPIO_ReadPin>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	4b21      	ldr	r3, [pc, #132]	; (8003b94 <flowmodbus+0x29c>)
 8003b10:	701a      	strb	r2, [r3, #0]
		if (buttonState != lastButtonState) {
 8003b12:	4b20      	ldr	r3, [pc, #128]	; (8003b94 <flowmodbus+0x29c>)
 8003b14:	781a      	ldrb	r2, [r3, #0]
 8003b16:	4b20      	ldr	r3, [pc, #128]	; (8003b98 <flowmodbus+0x2a0>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	f000 810d 	beq.w	8003d3a <flowmodbus+0x442>
			// Button press is valid, perform desired action
			if (CheckTray == 0) {
 8003b20:	4b1e      	ldr	r3, [pc, #120]	; (8003b9c <flowmodbus+0x2a4>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d17d      	bne.n	8003c24 <flowmodbus+0x32c>
				if (registerFrame[68].U16 > 60000) {
 8003b28:	4b0e      	ldr	r3, [pc, #56]	; (8003b64 <flowmodbus+0x26c>)
 8003b2a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003b2e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d938      	bls.n	8003ba8 <flowmodbus+0x2b0>
					posx = registerFrame[68].U16 - UINT16_MAX - 1;
 8003b36:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <flowmodbus+0x26c>)
 8003b38:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003b3c:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003b40:	4a17      	ldr	r2, [pc, #92]	; (8003ba0 <flowmodbus+0x2a8>)
 8003b42:	6013      	str	r3, [r2, #0]
					bottom_left_jog2[0] = (float) (posx) / 10;
 8003b44:	4b16      	ldr	r3, [pc, #88]	; (8003ba0 <flowmodbus+0x2a8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	ee07 3a90 	vmov	s15, r3
 8003b4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b50:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003b54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b58:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <flowmodbus+0x2ac>)
 8003b5a:	edc3 7a00 	vstr	s15, [r3]
 8003b5e:	e036      	b.n	8003bce <flowmodbus+0x2d6>
 8003b60:	20000d08 	.word	0x20000d08
 8003b64:	200011e4 	.word	0x200011e4
 8003b68:	20000330 	.word	0x20000330
 8003b6c:	20000940 	.word	0x20000940
 8003b70:	20000c80 	.word	0x20000c80
 8003b74:	20000200 	.word	0x20000200
 8003b78:	20000acc 	.word	0x20000acc
 8003b7c:	20000964 	.word	0x20000964
 8003b80:	2000128c 	.word	0x2000128c
 8003b84:	20000334 	.word	0x20000334
 8003b88:	2000064c 	.word	0x2000064c
 8003b8c:	40020000 	.word	0x40020000
 8003b90:	40020800 	.word	0x40020800
 8003b94:	20000946 	.word	0x20000946
 8003b98:	20000945 	.word	0x20000945
 8003b9c:	20001294 	.word	0x20001294
 8003ba0:	2000095c 	.word	0x2000095c
 8003ba4:	20000cf8 	.word	0x20000cf8
				} else {
					posx = registerFrame[68].U16;
 8003ba8:	4ba1      	ldr	r3, [pc, #644]	; (8003e30 <flowmodbus+0x538>)
 8003baa:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003bae:	461a      	mov	r2, r3
 8003bb0:	4ba0      	ldr	r3, [pc, #640]	; (8003e34 <flowmodbus+0x53c>)
 8003bb2:	601a      	str	r2, [r3, #0]
					bottom_left_jog2[0] = (float) (posx) / 10;
 8003bb4:	4b9f      	ldr	r3, [pc, #636]	; (8003e34 <flowmodbus+0x53c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	ee07 3a90 	vmov	s15, r3
 8003bbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bc0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003bc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bc8:	4b9b      	ldr	r3, [pc, #620]	; (8003e38 <flowmodbus+0x540>)
 8003bca:	edc3 7a00 	vstr	s15, [r3]
				} // Calculate Point x-axis
				bottom_left_jog2[1] = (float) (ReadDegree - 350); // Calulate Point y-axis
 8003bce:	4b9b      	ldr	r3, [pc, #620]	; (8003e3c <flowmodbus+0x544>)
 8003bd0:	edd3 7a00 	vldr	s15, [r3]
 8003bd4:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8003e40 <flowmodbus+0x548>
 8003bd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003bdc:	4b96      	ldr	r3, [pc, #600]	; (8003e38 <flowmodbus+0x540>)
 8003bde:	edc3 7a01 	vstr	s15, [r3, #4]
				registerFrame[35].U16 = (int) posx; // Place Tray Origin x
 8003be2:	4b94      	ldr	r3, [pc, #592]	; (8003e34 <flowmodbus+0x53c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	4b91      	ldr	r3, [pc, #580]	; (8003e30 <flowmodbus+0x538>)
 8003bea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				registerFrame[36].U16 = (int) (ReadDegree - 350) * 10; // Place Tray Origin y
 8003bee:	4b93      	ldr	r3, [pc, #588]	; (8003e3c <flowmodbus+0x544>)
 8003bf0:	edd3 7a00 	vldr	s15, [r3]
 8003bf4:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8003e40 <flowmodbus+0x548>
 8003bf8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003bfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c00:	ee17 3a90 	vmov	r3, s15
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	461a      	mov	r2, r3
 8003c08:	0092      	lsls	r2, r2, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	4b87      	ldr	r3, [pc, #540]	; (8003e30 <flowmodbus+0x538>)
 8003c12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
				CheckTray++;
 8003c16:	4b8b      	ldr	r3, [pc, #556]	; (8003e44 <flowmodbus+0x54c>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	4b89      	ldr	r3, [pc, #548]	; (8003e44 <flowmodbus+0x54c>)
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	e08a      	b.n	8003d3a <flowmodbus+0x442>
			} else if (CheckTray == 1) {
 8003c24:	4b87      	ldr	r3, [pc, #540]	; (8003e44 <flowmodbus+0x54c>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d152      	bne.n	8003cd2 <flowmodbus+0x3da>
				if (registerFrame[68].U16 > 60000) {
 8003c2c:	4b80      	ldr	r3, [pc, #512]	; (8003e30 <flowmodbus+0x538>)
 8003c2e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003c32:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d914      	bls.n	8003c64 <flowmodbus+0x36c>
					posx = registerFrame[68].U16 - UINT16_MAX - 1;
 8003c3a:	4b7d      	ldr	r3, [pc, #500]	; (8003e30 <flowmodbus+0x538>)
 8003c3c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003c40:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003c44:	4a7b      	ldr	r2, [pc, #492]	; (8003e34 <flowmodbus+0x53c>)
 8003c46:	6013      	str	r3, [r2, #0]
					bottom_right_jog2[0] = (float) (posx) / 10;
 8003c48:	4b7a      	ldr	r3, [pc, #488]	; (8003e34 <flowmodbus+0x53c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	ee07 3a90 	vmov	s15, r3
 8003c50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c54:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003c58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c5c:	4b7a      	ldr	r3, [pc, #488]	; (8003e48 <flowmodbus+0x550>)
 8003c5e:	edc3 7a00 	vstr	s15, [r3]
 8003c62:	e012      	b.n	8003c8a <flowmodbus+0x392>
				} else {
					posx = registerFrame[68].U16;
 8003c64:	4b72      	ldr	r3, [pc, #456]	; (8003e30 <flowmodbus+0x538>)
 8003c66:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	4b71      	ldr	r3, [pc, #452]	; (8003e34 <flowmodbus+0x53c>)
 8003c6e:	601a      	str	r2, [r3, #0]
					bottom_right_jog2[0] = (float) (posx) / 10;
 8003c70:	4b70      	ldr	r3, [pc, #448]	; (8003e34 <flowmodbus+0x53c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	ee07 3a90 	vmov	s15, r3
 8003c78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c7c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003c80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c84:	4b70      	ldr	r3, [pc, #448]	; (8003e48 <flowmodbus+0x550>)
 8003c86:	edc3 7a00 	vstr	s15, [r3]
				}
				posx = registerFrame[68].U16;
 8003c8a:	4b69      	ldr	r3, [pc, #420]	; (8003e30 <flowmodbus+0x538>)
 8003c8c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003c90:	461a      	mov	r2, r3
 8003c92:	4b68      	ldr	r3, [pc, #416]	; (8003e34 <flowmodbus+0x53c>)
 8003c94:	601a      	str	r2, [r3, #0]
				bottom_right_jog2[0] = (float) (posx) / 10;
 8003c96:	4b67      	ldr	r3, [pc, #412]	; (8003e34 <flowmodbus+0x53c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	ee07 3a90 	vmov	s15, r3
 8003c9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ca2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003ca6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003caa:	4b67      	ldr	r3, [pc, #412]	; (8003e48 <flowmodbus+0x550>)
 8003cac:	edc3 7a00 	vstr	s15, [r3]
				bottom_right_jog2[1] = (float) (ReadDegree - 350); // Calculate Point y-axis
 8003cb0:	4b62      	ldr	r3, [pc, #392]	; (8003e3c <flowmodbus+0x544>)
 8003cb2:	edd3 7a00 	vldr	s15, [r3]
 8003cb6:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8003e40 <flowmodbus+0x548>
 8003cba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003cbe:	4b62      	ldr	r3, [pc, #392]	; (8003e48 <flowmodbus+0x550>)
 8003cc0:	edc3 7a01 	vstr	s15, [r3, #4]
				CheckTray++;
 8003cc4:	4b5f      	ldr	r3, [pc, #380]	; (8003e44 <flowmodbus+0x54c>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	4b5d      	ldr	r3, [pc, #372]	; (8003e44 <flowmodbus+0x54c>)
 8003cce:	701a      	strb	r2, [r3, #0]
 8003cd0:	e033      	b.n	8003d3a <flowmodbus+0x442>
			} else if (CheckTray == 2) {
 8003cd2:	4b5c      	ldr	r3, [pc, #368]	; (8003e44 <flowmodbus+0x54c>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d12f      	bne.n	8003d3a <flowmodbus+0x442>
				transformRectangleAndPointsPlace();
 8003cda:	f7ff fb8b 	bl	80033f4 <transformRectangleAndPointsPlace>
				orenationtray = abs((theta2) * 57.2958 * 100);
 8003cde:	4b5b      	ldr	r3, [pc, #364]	; (8003e4c <flowmodbus+0x554>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fc fbdc 	bl	80004a0 <__aeabi_f2d>
 8003ce8:	a34f      	add	r3, pc, #316	; (adr r3, 8003e28 <flowmodbus+0x530>)
 8003cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cee:	f7fc fc2f 	bl	8000550 <__aeabi_dmul>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	4b54      	ldr	r3, [pc, #336]	; (8003e50 <flowmodbus+0x558>)
 8003d00:	f7fc fc26 	bl	8000550 <__aeabi_dmul>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4610      	mov	r0, r2
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	f7fc fed0 	bl	8000ab0 <__aeabi_d2iz>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	bfb8      	it	lt
 8003d16:	425b      	neglt	r3, r3
 8003d18:	4a4e      	ldr	r2, [pc, #312]	; (8003e54 <flowmodbus+0x55c>)
 8003d1a:	6013      	str	r3, [r2, #0]
				registerFrame[37].U16 = orenationtray;
 8003d1c:	4b4d      	ldr	r3, [pc, #308]	; (8003e54 <flowmodbus+0x55c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	4b43      	ldr	r3, [pc, #268]	; (8003e30 <flowmodbus+0x538>)
 8003d24:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				registerFrame[16].U16 = 0; //0x10 y-status jogging fisnish reset to 0
 8003d28:	4b41      	ldr	r3, [pc, #260]	; (8003e30 <flowmodbus+0x538>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	841a      	strh	r2, [r3, #32]
				CheckTray = 0;
 8003d2e:	4b45      	ldr	r3, [pc, #276]	; (8003e44 <flowmodbus+0x54c>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	701a      	strb	r2, [r3, #0]
				Mobus = Initial;
 8003d34:	4b48      	ldr	r3, [pc, #288]	; (8003e58 <flowmodbus+0x560>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	701a      	strb	r2, [r3, #0]
			}
		}

		// Update the previous state
		lastButtonState = buttonState;
 8003d3a:	4b48      	ldr	r3, [pc, #288]	; (8003e5c <flowmodbus+0x564>)
 8003d3c:	781a      	ldrb	r2, [r3, #0]
 8003d3e:	4b48      	ldr	r3, [pc, #288]	; (8003e60 <flowmodbus+0x568>)
 8003d40:	701a      	strb	r2, [r3, #0]
		break;
 8003d42:	e2ce      	b.n	80042e2 <flowmodbus+0x9ea>
	case Jogging_Pick:
		//y-axis jogging
		if (Joystick_position[1] >= 3150) {
 8003d44:	4b47      	ldr	r3, [pc, #284]	; (8003e64 <flowmodbus+0x56c>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f640 424d 	movw	r2, #3149	; 0xc4d
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d90a      	bls.n	8003d66 <flowmodbus+0x46e>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, JoystickSpeed);
 8003d50:	4b45      	ldr	r3, [pc, #276]	; (8003e68 <flowmodbus+0x570>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	4b45      	ldr	r3, [pc, #276]	; (8003e6c <flowmodbus+0x574>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	2180      	movs	r1, #128	; 0x80
 8003d5e:	4844      	ldr	r0, [pc, #272]	; (8003e70 <flowmodbus+0x578>)
 8003d60:	f002 fc12 	bl	8006588 <HAL_GPIO_WritePin>
 8003d64:	e017      	b.n	8003d96 <flowmodbus+0x49e>
		} else if (Joystick_position[1] <= 100) {
 8003d66:	4b3f      	ldr	r3, [pc, #252]	; (8003e64 <flowmodbus+0x56c>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b64      	cmp	r3, #100	; 0x64
 8003d6c:	d80a      	bhi.n	8003d84 <flowmodbus+0x48c>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, JoystickSpeed);
 8003d6e:	4b3e      	ldr	r3, [pc, #248]	; (8003e68 <flowmodbus+0x570>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	4b3e      	ldr	r3, [pc, #248]	; (8003e6c <flowmodbus+0x574>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8003d78:	2201      	movs	r2, #1
 8003d7a:	2180      	movs	r1, #128	; 0x80
 8003d7c:	483c      	ldr	r0, [pc, #240]	; (8003e70 <flowmodbus+0x578>)
 8003d7e:	f002 fc03 	bl	8006588 <HAL_GPIO_WritePin>
 8003d82:	e008      	b.n	8003d96 <flowmodbus+0x49e>
		} else {
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8003d84:	4b39      	ldr	r3, [pc, #228]	; (8003e6c <flowmodbus+0x574>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	2180      	movs	r1, #128	; 0x80
 8003d90:	4837      	ldr	r0, [pc, #220]	; (8003e70 <flowmodbus+0x578>)
 8003d92:	f002 fbf9 	bl	8006588 <HAL_GPIO_WritePin>
		}
		//x-axis jogging
		if (Joystick_position[0] >= 3150) {
 8003d96:	4b33      	ldr	r3, [pc, #204]	; (8003e64 <flowmodbus+0x56c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f640 424d 	movw	r2, #3149	; 0xc4d
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d904      	bls.n	8003dac <flowmodbus+0x4b4>
			registerFrame[64].U16 = 8;
 8003da2:	4b23      	ldr	r3, [pc, #140]	; (8003e30 <flowmodbus+0x538>)
 8003da4:	2208      	movs	r2, #8
 8003da6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8003daa:	e00c      	b.n	8003dc6 <flowmodbus+0x4ce>
		} else if (Joystick_position[0] <= 100) {
 8003dac:	4b2d      	ldr	r3, [pc, #180]	; (8003e64 <flowmodbus+0x56c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b64      	cmp	r3, #100	; 0x64
 8003db2:	d804      	bhi.n	8003dbe <flowmodbus+0x4c6>
			registerFrame[64].U16 = 4;
 8003db4:	4b1e      	ldr	r3, [pc, #120]	; (8003e30 <flowmodbus+0x538>)
 8003db6:	2204      	movs	r2, #4
 8003db8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8003dbc:	e003      	b.n	8003dc6 <flowmodbus+0x4ce>
		} else {
			registerFrame[64].U16 = 0;
 8003dbe:	4b1c      	ldr	r3, [pc, #112]	; (8003e30 <flowmodbus+0x538>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		}

		// Set position
		buttonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8003dc6:	2120      	movs	r1, #32
 8003dc8:	482a      	ldr	r0, [pc, #168]	; (8003e74 <flowmodbus+0x57c>)
 8003dca:	f002 fbc5 	bl	8006558 <HAL_GPIO_ReadPin>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4b22      	ldr	r3, [pc, #136]	; (8003e5c <flowmodbus+0x564>)
 8003dd4:	701a      	strb	r2, [r3, #0]
		if (buttonState != lastButtonState) {
 8003dd6:	4b21      	ldr	r3, [pc, #132]	; (8003e5c <flowmodbus+0x564>)
 8003dd8:	781a      	ldrb	r2, [r3, #0]
 8003dda:	4b21      	ldr	r3, [pc, #132]	; (8003e60 <flowmodbus+0x568>)
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	f000 8102 	beq.w	8003fe8 <flowmodbus+0x6f0>
			// Button press is valid, perform desired action
			if (CheckTray == 0) {
 8003de4:	4b17      	ldr	r3, [pc, #92]	; (8003e44 <flowmodbus+0x54c>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f040 8085 	bne.w	8003ef8 <flowmodbus+0x600>
				if (registerFrame[68].U16 > 60000) {
 8003dee:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <flowmodbus+0x538>)
 8003df0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003df4:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d93f      	bls.n	8003e7c <flowmodbus+0x584>
					posx = registerFrame[68].U16 - UINT16_MAX - 1;
 8003dfc:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <flowmodbus+0x538>)
 8003dfe:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003e02:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003e06:	4a0b      	ldr	r2, [pc, #44]	; (8003e34 <flowmodbus+0x53c>)
 8003e08:	6013      	str	r3, [r2, #0]
					bottom_left_jog[0] = (float) (posx) / 10;
 8003e0a:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <flowmodbus+0x53c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e16:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003e1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e1e:	4b16      	ldr	r3, [pc, #88]	; (8003e78 <flowmodbus+0x580>)
 8003e20:	edc3 7a00 	vstr	s15, [r3]
 8003e24:	e03d      	b.n	8003ea2 <flowmodbus+0x5aa>
 8003e26:	bf00      	nop
 8003e28:	c63f1412 	.word	0xc63f1412
 8003e2c:	404ca5dc 	.word	0x404ca5dc
 8003e30:	200011e4 	.word	0x200011e4
 8003e34:	2000095c 	.word	0x2000095c
 8003e38:	20000cf8 	.word	0x20000cf8
 8003e3c:	20001308 	.word	0x20001308
 8003e40:	43af0000 	.word	0x43af0000
 8003e44:	20001294 	.word	0x20001294
 8003e48:	20000d00 	.word	0x20000d00
 8003e4c:	20000cf0 	.word	0x20000cf0
 8003e50:	40590000 	.word	0x40590000
 8003e54:	20000960 	.word	0x20000960
 8003e58:	20000d08 	.word	0x20000d08
 8003e5c:	20000946 	.word	0x20000946
 8003e60:	20000945 	.word	0x20000945
 8003e64:	2000128c 	.word	0x2000128c
 8003e68:	20000334 	.word	0x20000334
 8003e6c:	2000064c 	.word	0x2000064c
 8003e70:	40020000 	.word	0x40020000
 8003e74:	40020800 	.word	0x40020800
 8003e78:	20000b44 	.word	0x20000b44
				} else {
					posx = registerFrame[68].U16;
 8003e7c:	4b7c      	ldr	r3, [pc, #496]	; (8004070 <flowmodbus+0x778>)
 8003e7e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003e82:	461a      	mov	r2, r3
 8003e84:	4b7b      	ldr	r3, [pc, #492]	; (8004074 <flowmodbus+0x77c>)
 8003e86:	601a      	str	r2, [r3, #0]
					bottom_left_jog[0] = (float) (posx) / 10;
 8003e88:	4b7a      	ldr	r3, [pc, #488]	; (8004074 <flowmodbus+0x77c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	ee07 3a90 	vmov	s15, r3
 8003e90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e94:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003e98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e9c:	4b76      	ldr	r3, [pc, #472]	; (8004078 <flowmodbus+0x780>)
 8003e9e:	edc3 7a00 	vstr	s15, [r3]
				}
				bottom_left_jog[1] = ((float) ReadDegree - 350); // Calulate Point y-axis
 8003ea2:	4b76      	ldr	r3, [pc, #472]	; (800407c <flowmodbus+0x784>)
 8003ea4:	edd3 7a00 	vldr	s15, [r3]
 8003ea8:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8004080 <flowmodbus+0x788>
 8003eac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003eb0:	4b71      	ldr	r3, [pc, #452]	; (8004078 <flowmodbus+0x780>)
 8003eb2:	edc3 7a01 	vstr	s15, [r3, #4]
				registerFrame[32].U16 = (int) posx; // Place Tray Origin x
 8003eb6:	4b6f      	ldr	r3, [pc, #444]	; (8004074 <flowmodbus+0x77c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	4b6c      	ldr	r3, [pc, #432]	; (8004070 <flowmodbus+0x778>)
 8003ebe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
				registerFrame[33].U16 = (int) (ReadDegree - 350) * 10; // Place Tray Origin y
 8003ec2:	4b6e      	ldr	r3, [pc, #440]	; (800407c <flowmodbus+0x784>)
 8003ec4:	edd3 7a00 	vldr	s15, [r3]
 8003ec8:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8004080 <flowmodbus+0x788>
 8003ecc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ed0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ed4:	ee17 3a90 	vmov	r3, s15
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	461a      	mov	r2, r3
 8003edc:	0092      	lsls	r2, r2, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	4b62      	ldr	r3, [pc, #392]	; (8004070 <flowmodbus+0x778>)
 8003ee6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
				CheckTray++;
 8003eea:	4b66      	ldr	r3, [pc, #408]	; (8004084 <flowmodbus+0x78c>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	4b64      	ldr	r3, [pc, #400]	; (8004084 <flowmodbus+0x78c>)
 8003ef4:	701a      	strb	r2, [r3, #0]
 8003ef6:	e077      	b.n	8003fe8 <flowmodbus+0x6f0>
			} else if (CheckTray == 1) {
 8003ef8:	4b62      	ldr	r3, [pc, #392]	; (8004084 <flowmodbus+0x78c>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d13f      	bne.n	8003f80 <flowmodbus+0x688>
				if (registerFrame[68].U16 > 60000) {
 8003f00:	4b5b      	ldr	r3, [pc, #364]	; (8004070 <flowmodbus+0x778>)
 8003f02:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003f06:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d914      	bls.n	8003f38 <flowmodbus+0x640>
					posx = registerFrame[68].U16 - UINT16_MAX - 1;
 8003f0e:	4b58      	ldr	r3, [pc, #352]	; (8004070 <flowmodbus+0x778>)
 8003f10:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003f14:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003f18:	4a56      	ldr	r2, [pc, #344]	; (8004074 <flowmodbus+0x77c>)
 8003f1a:	6013      	str	r3, [r2, #0]
					bottom_right_jog[0] = (float) (posx) / 10;
 8003f1c:	4b55      	ldr	r3, [pc, #340]	; (8004074 <flowmodbus+0x77c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	ee07 3a90 	vmov	s15, r3
 8003f24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f28:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003f2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f30:	4b55      	ldr	r3, [pc, #340]	; (8004088 <flowmodbus+0x790>)
 8003f32:	edc3 7a00 	vstr	s15, [r3]
 8003f36:	e012      	b.n	8003f5e <flowmodbus+0x666>
				} else {
					posx = registerFrame[68].U16;
 8003f38:	4b4d      	ldr	r3, [pc, #308]	; (8004070 <flowmodbus+0x778>)
 8003f3a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003f3e:	461a      	mov	r2, r3
 8003f40:	4b4c      	ldr	r3, [pc, #304]	; (8004074 <flowmodbus+0x77c>)
 8003f42:	601a      	str	r2, [r3, #0]
					bottom_right_jog[0] = (float) (posx) / 10;
 8003f44:	4b4b      	ldr	r3, [pc, #300]	; (8004074 <flowmodbus+0x77c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	ee07 3a90 	vmov	s15, r3
 8003f4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f50:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003f54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f58:	4b4b      	ldr	r3, [pc, #300]	; (8004088 <flowmodbus+0x790>)
 8003f5a:	edc3 7a00 	vstr	s15, [r3]
				}
				bottom_right_jog[1] = (float) (ReadDegree - (float) 350); // Calculate Point y-axis
 8003f5e:	4b47      	ldr	r3, [pc, #284]	; (800407c <flowmodbus+0x784>)
 8003f60:	edd3 7a00 	vldr	s15, [r3]
 8003f64:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8004080 <flowmodbus+0x788>
 8003f68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f6c:	4b46      	ldr	r3, [pc, #280]	; (8004088 <flowmodbus+0x790>)
 8003f6e:	edc3 7a01 	vstr	s15, [r3, #4]
				CheckTray++;
 8003f72:	4b44      	ldr	r3, [pc, #272]	; (8004084 <flowmodbus+0x78c>)
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	3301      	adds	r3, #1
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	4b42      	ldr	r3, [pc, #264]	; (8004084 <flowmodbus+0x78c>)
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	e033      	b.n	8003fe8 <flowmodbus+0x6f0>
			} else if (CheckTray == 2) {
 8003f80:	4b40      	ldr	r3, [pc, #256]	; (8004084 <flowmodbus+0x78c>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d12f      	bne.n	8003fe8 <flowmodbus+0x6f0>
				transformRectangleAndPointsPick();
 8003f88:	f7fe ffb4 	bl	8002ef4 <transformRectangleAndPointsPick>
				orenationtray = abs((theta) * 57.2958 * 100);
 8003f8c:	4b3f      	ldr	r3, [pc, #252]	; (800408c <flowmodbus+0x794>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fc fa85 	bl	80004a0 <__aeabi_f2d>
 8003f96:	a334      	add	r3, pc, #208	; (adr r3, 8004068 <flowmodbus+0x770>)
 8003f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9c:	f7fc fad8 	bl	8000550 <__aeabi_dmul>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	4b38      	ldr	r3, [pc, #224]	; (8004090 <flowmodbus+0x798>)
 8003fae:	f7fc facf 	bl	8000550 <__aeabi_dmul>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	4619      	mov	r1, r3
 8003fba:	f7fc fd79 	bl	8000ab0 <__aeabi_d2iz>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	bfb8      	it	lt
 8003fc4:	425b      	neglt	r3, r3
 8003fc6:	4a33      	ldr	r2, [pc, #204]	; (8004094 <flowmodbus+0x79c>)
 8003fc8:	6013      	str	r3, [r2, #0]
				registerFrame[34].U16 = orenationtray;
 8003fca:	4b32      	ldr	r3, [pc, #200]	; (8004094 <flowmodbus+0x79c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	4b27      	ldr	r3, [pc, #156]	; (8004070 <flowmodbus+0x778>)
 8003fd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				registerFrame[16].U16 = 0; // 0x10 y-status jogging finish reset to 0
 8003fd6:	4b26      	ldr	r3, [pc, #152]	; (8004070 <flowmodbus+0x778>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	841a      	strh	r2, [r3, #32]
				CheckTray = 0;
 8003fdc:	4b29      	ldr	r3, [pc, #164]	; (8004084 <flowmodbus+0x78c>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	701a      	strb	r2, [r3, #0]
				Mobus = Initial;
 8003fe2:	4b2d      	ldr	r3, [pc, #180]	; (8004098 <flowmodbus+0x7a0>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	701a      	strb	r2, [r3, #0]
			}
		}
		// Update the previous state
		lastButtonState = buttonState;
 8003fe8:	4b2c      	ldr	r3, [pc, #176]	; (800409c <flowmodbus+0x7a4>)
 8003fea:	781a      	ldrb	r2, [r3, #0]
 8003fec:	4b2c      	ldr	r3, [pc, #176]	; (80040a0 <flowmodbus+0x7a8>)
 8003fee:	701a      	strb	r2, [r3, #0]
		break;
 8003ff0:	e177      	b.n	80042e2 <flowmodbus+0x9ea>
	case Home:
		// x axis
		registerFrame[64].U16 = 1; // 0x40 Moving Status x-axis - Home
 8003ff2:	4b1f      	ldr	r3, [pc, #124]	; (8004070 <flowmodbus+0x778>)
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		Mobus = Initial;
 8003ffa:	4b27      	ldr	r3, [pc, #156]	; (8004098 <flowmodbus+0x7a0>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	701a      	strb	r2, [r3, #0]
		// y axis
		break;
 8004000:	e16f      	b.n	80042e2 <flowmodbus+0x9ea>
	case Run_PointMode:
		// x axis
		registerFrame[65].U16 = registerFrame[48].U16; // position Tray pick/place
 8004002:	4b1b      	ldr	r3, [pc, #108]	; (8004070 <flowmodbus+0x778>)
 8004004:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8004008:	4b19      	ldr	r3, [pc, #100]	; (8004070 <flowmodbus+0x778>)
 800400a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		registerFrame[66].U16 = 3000; // speed x-axis 300mm
 800400e:	4b18      	ldr	r3, [pc, #96]	; (8004070 <flowmodbus+0x778>)
 8004010:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004014:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		registerFrame[67].U16 = 1; // Acc time 1mms
 8004018:	4b15      	ldr	r3, [pc, #84]	; (8004070 <flowmodbus+0x778>)
 800401a:	2201      	movs	r2, #1
 800401c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		registerFrame[64].U16 = 2; //0x40 Moving Status x-axis - run mode
 8004020:	4b13      	ldr	r3, [pc, #76]	; (8004070 <flowmodbus+0x778>)
 8004022:	2202      	movs	r2, #2
 8004024:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		// y axis
		if (registerFrame[49].U16 > 60000)
 8004028:	4b11      	ldr	r3, [pc, #68]	; (8004070 <flowmodbus+0x778>)
 800402a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800402e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004032:	4293      	cmp	r3, r2
 8004034:	d93a      	bls.n	80040ac <flowmodbus+0x7b4>
			SetDegree = ((350 - (UINT16_MAX - registerFrame[49].U16) / 10));
 8004036:	4b0e      	ldr	r3, [pc, #56]	; (8004070 <flowmodbus+0x778>)
 8004038:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800403c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004040:	33ff      	adds	r3, #255	; 0xff
 8004042:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <flowmodbus+0x7ac>)
 8004044:	fb82 1203 	smull	r1, r2, r2, r3
 8004048:	1092      	asrs	r2, r2, #2
 800404a:	17db      	asrs	r3, r3, #31
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 8004052:	ee07 3a90 	vmov	s15, r3
 8004056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800405a:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <flowmodbus+0x7b0>)
 800405c:	edc3 7a00 	vstr	s15, [r3]
 8004060:	e03c      	b.n	80040dc <flowmodbus+0x7e4>
 8004062:	bf00      	nop
 8004064:	f3af 8000 	nop.w
 8004068:	c63f1412 	.word	0xc63f1412
 800406c:	404ca5dc 	.word	0x404ca5dc
 8004070:	200011e4 	.word	0x200011e4
 8004074:	2000095c 	.word	0x2000095c
 8004078:	20000b44 	.word	0x20000b44
 800407c:	20001308 	.word	0x20001308
 8004080:	43af0000 	.word	0x43af0000
 8004084:	20001294 	.word	0x20001294
 8004088:	20000b4c 	.word	0x20000b4c
 800408c:	20000b3c 	.word	0x20000b3c
 8004090:	40590000 	.word	0x40590000
 8004094:	20000960 	.word	0x20000960
 8004098:	20000d08 	.word	0x20000d08
 800409c:	20000946 	.word	0x20000946
 80040a0:	20000945 	.word	0x20000945
 80040a4:	66666667 	.word	0x66666667
 80040a8:	2000130c 	.word	0x2000130c
		else if (registerFrame[49].U16 <= 3500) {
 80040ac:	4b92      	ldr	r3, [pc, #584]	; (80042f8 <flowmodbus+0xa00>)
 80040ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80040b2:	f640 52ac 	movw	r2, #3500	; 0xdac
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d810      	bhi.n	80040dc <flowmodbus+0x7e4>
			SetDegree = (registerFrame[49].U16 / 10) + 350;
 80040ba:	4b8f      	ldr	r3, [pc, #572]	; (80042f8 <flowmodbus+0xa00>)
 80040bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80040c0:	4a8e      	ldr	r2, [pc, #568]	; (80042fc <flowmodbus+0xa04>)
 80040c2:	fba2 2303 	umull	r2, r3, r2, r3
 80040c6:	08db      	lsrs	r3, r3, #3
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 80040ce:	ee07 3a90 	vmov	s15, r3
 80040d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040d6:	4b8a      	ldr	r3, [pc, #552]	; (8004300 <flowmodbus+0xa08>)
 80040d8:	edc3 7a00 	vstr	s15, [r3]
		}
		SetVelocity = 400;
 80040dc:	4b89      	ldr	r3, [pc, #548]	; (8004304 <flowmodbus+0xa0c>)
 80040de:	4a8a      	ldr	r2, [pc, #552]	; (8004308 <flowmodbus+0xa10>)
 80040e0:	601a      	str	r2, [r3, #0]
		if (error > 0) { // setpoint > read_encoder
 80040e2:	4b8a      	ldr	r3, [pc, #552]	; (800430c <flowmodbus+0xa14>)
 80040e4:	edd3 7a00 	vldr	s15, [r3]
 80040e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040f0:	dd38      	ble.n	8004164 <flowmodbus+0x86c>
			SetVelocity = abs(SetVelocity);
 80040f2:	4b84      	ldr	r3, [pc, #528]	; (8004304 <flowmodbus+0xa0c>)
 80040f4:	edd3 7a00 	vldr	s15, [r3]
 80040f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040fc:	ee17 3a90 	vmov	r3, s15
 8004100:	2b00      	cmp	r3, #0
 8004102:	bfb8      	it	lt
 8004104:	425b      	neglt	r3, r3
 8004106:	ee07 3a90 	vmov	s15, r3
 800410a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800410e:	4b7d      	ldr	r3, [pc, #500]	; (8004304 <flowmodbus+0xa0c>)
 8004110:	edc3 7a00 	vstr	s15, [r3]
			if (error < 0.2) {
 8004114:	4b7d      	ldr	r3, [pc, #500]	; (800430c <flowmodbus+0xa14>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f7fc f9c1 	bl	80004a0 <__aeabi_f2d>
 800411e:	a374      	add	r3, pc, #464	; (adr r3, 80042f0 <flowmodbus+0x9f8>)
 8004120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004124:	f7fc fc86 	bl	8000a34 <__aeabi_dcmplt>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00b      	beq.n	8004146 <flowmodbus+0x84e>
				DegreeFeedback = 0; // Limit Position
 800412e:	4b78      	ldr	r3, [pc, #480]	; (8004310 <flowmodbus+0xa18>)
 8004130:	f04f 0200 	mov.w	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
				s = 0;
 8004136:	4b77      	ldr	r3, [pc, #476]	; (8004314 <flowmodbus+0xa1c>)
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
				s2 = 0;
 800413e:	4b76      	ldr	r3, [pc, #472]	; (8004318 <flowmodbus+0xa20>)
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, DegreeFeedback);
 8004146:	4b72      	ldr	r3, [pc, #456]	; (8004310 <flowmodbus+0xa18>)
 8004148:	edd3 7a00 	vldr	s15, [r3]
 800414c:	4b73      	ldr	r3, [pc, #460]	; (800431c <flowmodbus+0xa24>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004154:	ee17 2a90 	vmov	r2, s15
 8004158:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800415a:	2200      	movs	r2, #0
 800415c:	2180      	movs	r1, #128	; 0x80
 800415e:	4870      	ldr	r0, [pc, #448]	; (8004320 <flowmodbus+0xa28>)
 8004160:	f002 fa12 	bl	8006588 <HAL_GPIO_WritePin>
		}
		if (error < 0) { // setpoint < read_encoder
 8004164:	4b69      	ldr	r3, [pc, #420]	; (800430c <flowmodbus+0xa14>)
 8004166:	edd3 7a00 	vldr	s15, [r3]
 800416a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800416e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004172:	d53e      	bpl.n	80041f2 <flowmodbus+0x8fa>
			if (SetVelocity > 0)
 8004174:	4b63      	ldr	r3, [pc, #396]	; (8004304 <flowmodbus+0xa0c>)
 8004176:	edd3 7a00 	vldr	s15, [r3]
 800417a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800417e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004182:	dd07      	ble.n	8004194 <flowmodbus+0x89c>
				SetVelocity = -SetVelocity;
 8004184:	4b5f      	ldr	r3, [pc, #380]	; (8004304 <flowmodbus+0xa0c>)
 8004186:	edd3 7a00 	vldr	s15, [r3]
 800418a:	eef1 7a67 	vneg.f32	s15, s15
 800418e:	4b5d      	ldr	r3, [pc, #372]	; (8004304 <flowmodbus+0xa0c>)
 8004190:	edc3 7a00 	vstr	s15, [r3]
			if (error * -1 < 0.2) {
 8004194:	4b5d      	ldr	r3, [pc, #372]	; (800430c <flowmodbus+0xa14>)
 8004196:	edd3 7a00 	vldr	s15, [r3]
 800419a:	eef1 7a67 	vneg.f32	s15, s15
 800419e:	ee17 3a90 	vmov	r3, s15
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fc f97c 	bl	80004a0 <__aeabi_f2d>
 80041a8:	a351      	add	r3, pc, #324	; (adr r3, 80042f0 <flowmodbus+0x9f8>)
 80041aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ae:	f7fc fc41 	bl	8000a34 <__aeabi_dcmplt>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00b      	beq.n	80041d0 <flowmodbus+0x8d8>
				DegreeFeedback = 0; // Limit Position
 80041b8:	4b55      	ldr	r3, [pc, #340]	; (8004310 <flowmodbus+0xa18>)
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
				s = 0;
 80041c0:	4b54      	ldr	r3, [pc, #336]	; (8004314 <flowmodbus+0xa1c>)
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]
				s2 = 0;
 80041c8:	4b53      	ldr	r3, [pc, #332]	; (8004318 <flowmodbus+0xa20>)
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, DegreeFeedback * -1);
 80041d0:	4b4f      	ldr	r3, [pc, #316]	; (8004310 <flowmodbus+0xa18>)
 80041d2:	edd3 7a00 	vldr	s15, [r3]
 80041d6:	eef1 7a67 	vneg.f32	s15, s15
 80041da:	4b50      	ldr	r3, [pc, #320]	; (800431c <flowmodbus+0xa24>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041e2:	ee17 2a90 	vmov	r2, s15
 80041e6:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80041e8:	2201      	movs	r2, #1
 80041ea:	2180      	movs	r1, #128	; 0x80
 80041ec:	484c      	ldr	r0, [pc, #304]	; (8004320 <flowmodbus+0xa28>)
 80041ee:	f002 f9cb 	bl	8006588 <HAL_GPIO_WritePin>
		}
		registerFrame[16].U16 = 0;
 80041f2:	4b41      	ldr	r3, [pc, #260]	; (80042f8 <flowmodbus+0xa00>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	841a      	strh	r2, [r3, #32]
		Mobus = Initial;
 80041f8:	4b4a      	ldr	r3, [pc, #296]	; (8004324 <flowmodbus+0xa2c>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	701a      	strb	r2, [r3, #0]
		break;
 80041fe:	e070      	b.n	80042e2 <flowmodbus+0x9ea>
	case Run_TrayMode:

		registerFrame[1].U16 = 4; // Basesystem reset position
 8004200:	4b3d      	ldr	r3, [pc, #244]	; (80042f8 <flowmodbus+0xa00>)
 8004202:	2204      	movs	r2, #4
 8004204:	805a      	strh	r2, [r3, #2]
		if (HAL_GetTick() >= timestamptray) { // heartbeat
 8004206:	f000 fef5 	bl	8004ff4 <HAL_GetTick>
 800420a:	4603      	mov	r3, r0
 800420c:	2200      	movs	r2, #0
 800420e:	461c      	mov	r4, r3
 8004210:	4615      	mov	r5, r2
 8004212:	4b45      	ldr	r3, [pc, #276]	; (8004328 <flowmodbus+0xa30>)
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	4294      	cmp	r4, r2
 800421a:	eb75 0303 	sbcs.w	r3, r5, r3
 800421e:	d35f      	bcc.n	80042e0 <flowmodbus+0x9e8>
			path = 1;
 8004220:	4b42      	ldr	r3, [pc, #264]	; (800432c <flowmodbus+0xa34>)
 8004222:	2201      	movs	r2, #1
 8004224:	601a      	str	r2, [r3, #0]
			indexposition = 0;
 8004226:	4b42      	ldr	r3, [pc, #264]	; (8004330 <flowmodbus+0xa38>)
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]
			timestamptray = HAL_GetTick() + 3000;
 800422c:	f000 fee2 	bl	8004ff4 <HAL_GetTick>
 8004230:	4603      	mov	r3, r0
 8004232:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8004236:	2200      	movs	r2, #0
 8004238:	4698      	mov	r8, r3
 800423a:	4691      	mov	r9, r2
 800423c:	4b3a      	ldr	r3, [pc, #232]	; (8004328 <flowmodbus+0xa30>)
 800423e:	e9c3 8900 	strd	r8, r9, [r3]
			// y axis
			start_p = point_y[plustray] ;
 8004242:	4b3c      	ldr	r3, [pc, #240]	; (8004334 <flowmodbus+0xa3c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a3c      	ldr	r2, [pc, #240]	; (8004338 <flowmodbus+0xa40>)
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a3b      	ldr	r2, [pc, #236]	; (800433c <flowmodbus+0xa44>)
 8004250:	6013      	str	r3, [r2, #0]
			stop_p = point_y[plustray + 1] ;
 8004252:	4b38      	ldr	r3, [pc, #224]	; (8004334 <flowmodbus+0xa3c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3301      	adds	r3, #1
 8004258:	4a37      	ldr	r2, [pc, #220]	; (8004338 <flowmodbus+0xa40>)
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a37      	ldr	r2, [pc, #220]	; (8004340 <flowmodbus+0xa48>)
 8004262:	6013      	str	r3, [r2, #0]
			start_v = 0; // qk
 8004264:	4b37      	ldr	r3, [pc, #220]	; (8004344 <flowmodbus+0xa4c>)
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	601a      	str	r2, [r3, #0]
			stop_v = 0; // q_dotk+1
 800426c:	4b36      	ldr	r3, [pc, #216]	; (8004348 <flowmodbus+0xa50>)
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
			timecycle = 2;
 8004274:	4b35      	ldr	r3, [pc, #212]	; (800434c <flowmodbus+0xa54>)
 8004276:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800427a:	601a      	str	r2, [r3, #0]
			main_Qubic();
 800427c:	f000 fa24 	bl	80046c8 <main_Qubic>
			//Qubic(start_p, stop_p, start_v, stop_v, timecycle, 0, 0, 0);

			 // x axis
			 registerFrame[65].U16 = point_x[plustray]; // position Tray pick/place
 8004280:	4b2c      	ldr	r3, [pc, #176]	; (8004334 <flowmodbus+0xa3c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a32      	ldr	r2, [pc, #200]	; (8004350 <flowmodbus+0xa58>)
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	edd3 7a00 	vldr	s15, [r3]
 800428e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004292:	ee17 3a90 	vmov	r3, s15
 8004296:	b29a      	uxth	r2, r3
 8004298:	4b17      	ldr	r3, [pc, #92]	; (80042f8 <flowmodbus+0xa00>)
 800429a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
			 registerFrame[66].U16 = 3000; // speed x-axis 300mm
 800429e:	4b16      	ldr	r3, [pc, #88]	; (80042f8 <flowmodbus+0xa00>)
 80042a0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80042a4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
			 registerFrame[67].U16 = 1; // Acc time 1mms
 80042a8:	4b13      	ldr	r3, [pc, #76]	; (80042f8 <flowmodbus+0xa00>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
			 registerFrame[64].U16 = 2; //0x40 Moving Status x-axis - run mode
 80042b0:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <flowmodbus+0xa00>)
 80042b2:	2202      	movs	r2, #2
 80042b4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80


			if (plustray < 18) {
 80042b8:	4b1e      	ldr	r3, [pc, #120]	; (8004334 <flowmodbus+0xa3c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b11      	cmp	r3, #17
 80042be:	dc05      	bgt.n	80042cc <flowmodbus+0x9d4>
				plustray++;
 80042c0:	4b1c      	ldr	r3, [pc, #112]	; (8004334 <flowmodbus+0xa3c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3301      	adds	r3, #1
 80042c6:	4a1b      	ldr	r2, [pc, #108]	; (8004334 <flowmodbus+0xa3c>)
 80042c8:	6013      	str	r3, [r2, #0]
			} else if (plustray == 18) {
				Mobus = Initial;
			}
		}
		break;
 80042ca:	e009      	b.n	80042e0 <flowmodbus+0x9e8>
			} else if (plustray == 18) {
 80042cc:	4b19      	ldr	r3, [pc, #100]	; (8004334 <flowmodbus+0xa3c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b12      	cmp	r3, #18
 80042d2:	d105      	bne.n	80042e0 <flowmodbus+0x9e8>
				Mobus = Initial;
 80042d4:	4b13      	ldr	r3, [pc, #76]	; (8004324 <flowmodbus+0xa2c>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	701a      	strb	r2, [r3, #0]
		break;
 80042da:	e001      	b.n	80042e0 <flowmodbus+0x9e8>
		break;
 80042dc:	bf00      	nop
 80042de:	e000      	b.n	80042e2 <flowmodbus+0x9ea>
		break;
 80042e0:	bf00      	nop
	}
}
 80042e2:	bf00      	nop
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80042ec:	f3af 8000 	nop.w
 80042f0:	9999999a 	.word	0x9999999a
 80042f4:	3fc99999 	.word	0x3fc99999
 80042f8:	200011e4 	.word	0x200011e4
 80042fc:	cccccccd 	.word	0xcccccccd
 8004300:	2000130c 	.word	0x2000130c
 8004304:	20000344 	.word	0x20000344
 8004308:	43c80000 	.word	0x43c80000
 800430c:	20001314 	.word	0x20001314
 8004310:	20001310 	.word	0x20001310
 8004314:	200012e8 	.word	0x200012e8
 8004318:	200012f4 	.word	0x200012f4
 800431c:	2000064c 	.word	0x2000064c
 8004320:	40020000 	.word	0x40020000
 8004324:	20000d08 	.word	0x20000d08
 8004328:	20001338 	.word	0x20001338
 800432c:	2000127c 	.word	0x2000127c
 8004330:	200012dc 	.word	0x200012dc
 8004334:	2000093c 	.word	0x2000093c
 8004338:	20000200 	.word	0x20000200
 800433c:	20000948 	.word	0x20000948
 8004340:	2000094c 	.word	0x2000094c
 8004344:	20000950 	.word	0x20000950
 8004348:	20000954 	.word	0x20000954
 800434c:	20000958 	.word	0x20000958
 8004350:	20000964 	.word	0x20000964

08004354 <control_interrupt>:
float control_interrupt() {
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
//loop 1
	error = SetDegree - ReadDegree;
 8004358:	4b52      	ldr	r3, [pc, #328]	; (80044a4 <control_interrupt+0x150>)
 800435a:	ed93 7a00 	vldr	s14, [r3]
 800435e:	4b52      	ldr	r3, [pc, #328]	; (80044a8 <control_interrupt+0x154>)
 8004360:	edd3 7a00 	vldr	s15, [r3]
 8004364:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004368:	4b50      	ldr	r3, [pc, #320]	; (80044ac <control_interrupt+0x158>)
 800436a:	edc3 7a00 	vstr	s15, [r3]
	s = s + error;
 800436e:	4b50      	ldr	r3, [pc, #320]	; (80044b0 <control_interrupt+0x15c>)
 8004370:	ed93 7a00 	vldr	s14, [r3]
 8004374:	4b4d      	ldr	r3, [pc, #308]	; (80044ac <control_interrupt+0x158>)
 8004376:	edd3 7a00 	vldr	s15, [r3]
 800437a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800437e:	4b4c      	ldr	r3, [pc, #304]	; (80044b0 <control_interrupt+0x15c>)
 8004380:	edc3 7a00 	vstr	s15, [r3]
	u = K_P * error + K_I * s + K_D * (error - p);
 8004384:	4b4b      	ldr	r3, [pc, #300]	; (80044b4 <control_interrupt+0x160>)
 8004386:	ed93 7a00 	vldr	s14, [r3]
 800438a:	4b48      	ldr	r3, [pc, #288]	; (80044ac <control_interrupt+0x158>)
 800438c:	edd3 7a00 	vldr	s15, [r3]
 8004390:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004394:	4b48      	ldr	r3, [pc, #288]	; (80044b8 <control_interrupt+0x164>)
 8004396:	edd3 6a00 	vldr	s13, [r3]
 800439a:	4b45      	ldr	r3, [pc, #276]	; (80044b0 <control_interrupt+0x15c>)
 800439c:	edd3 7a00 	vldr	s15, [r3]
 80043a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043a8:	4b40      	ldr	r3, [pc, #256]	; (80044ac <control_interrupt+0x158>)
 80043aa:	edd3 6a00 	vldr	s13, [r3]
 80043ae:	4b43      	ldr	r3, [pc, #268]	; (80044bc <control_interrupt+0x168>)
 80043b0:	edd3 7a00 	vldr	s15, [r3]
 80043b4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80043b8:	4b41      	ldr	r3, [pc, #260]	; (80044c0 <control_interrupt+0x16c>)
 80043ba:	edd3 7a00 	vldr	s15, [r3]
 80043be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043c6:	4b3f      	ldr	r3, [pc, #252]	; (80044c4 <control_interrupt+0x170>)
 80043c8:	edc3 7a00 	vstr	s15, [r3]
	p = error;
 80043cc:	4b37      	ldr	r3, [pc, #220]	; (80044ac <control_interrupt+0x158>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a3a      	ldr	r2, [pc, #232]	; (80044bc <control_interrupt+0x168>)
 80043d2:	6013      	str	r3, [r2, #0]
// loop 2
	error2 = (u + SetVelocity) - speed;
 80043d4:	4b3b      	ldr	r3, [pc, #236]	; (80044c4 <control_interrupt+0x170>)
 80043d6:	ed93 7a00 	vldr	s14, [r3]
 80043da:	4b3b      	ldr	r3, [pc, #236]	; (80044c8 <control_interrupt+0x174>)
 80043dc:	edd3 7a00 	vldr	s15, [r3]
 80043e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043e4:	4b39      	ldr	r3, [pc, #228]	; (80044cc <control_interrupt+0x178>)
 80043e6:	edd3 7a00 	vldr	s15, [r3]
 80043ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043ee:	4b38      	ldr	r3, [pc, #224]	; (80044d0 <control_interrupt+0x17c>)
 80043f0:	edc3 7a00 	vstr	s15, [r3]
	s2 = s2 + error2;
 80043f4:	4b37      	ldr	r3, [pc, #220]	; (80044d4 <control_interrupt+0x180>)
 80043f6:	ed93 7a00 	vldr	s14, [r3]
 80043fa:	4b35      	ldr	r3, [pc, #212]	; (80044d0 <control_interrupt+0x17c>)
 80043fc:	edd3 7a00 	vldr	s15, [r3]
 8004400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004404:	4b33      	ldr	r3, [pc, #204]	; (80044d4 <control_interrupt+0x180>)
 8004406:	edc3 7a00 	vstr	s15, [r3]
	u2 = K_Pvelo * error2 + K_Ivelo * s2 + K_Dvelo * (error2 - p2);
 800440a:	4b33      	ldr	r3, [pc, #204]	; (80044d8 <control_interrupt+0x184>)
 800440c:	ed93 7a00 	vldr	s14, [r3]
 8004410:	4b2f      	ldr	r3, [pc, #188]	; (80044d0 <control_interrupt+0x17c>)
 8004412:	edd3 7a00 	vldr	s15, [r3]
 8004416:	ee27 7a27 	vmul.f32	s14, s14, s15
 800441a:	4b30      	ldr	r3, [pc, #192]	; (80044dc <control_interrupt+0x188>)
 800441c:	edd3 6a00 	vldr	s13, [r3]
 8004420:	4b2c      	ldr	r3, [pc, #176]	; (80044d4 <control_interrupt+0x180>)
 8004422:	edd3 7a00 	vldr	s15, [r3]
 8004426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800442a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800442e:	4b28      	ldr	r3, [pc, #160]	; (80044d0 <control_interrupt+0x17c>)
 8004430:	edd3 6a00 	vldr	s13, [r3]
 8004434:	4b2a      	ldr	r3, [pc, #168]	; (80044e0 <control_interrupt+0x18c>)
 8004436:	edd3 7a00 	vldr	s15, [r3]
 800443a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800443e:	4b29      	ldr	r3, [pc, #164]	; (80044e4 <control_interrupt+0x190>)
 8004440:	edd3 7a00 	vldr	s15, [r3]
 8004444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800444c:	4b26      	ldr	r3, [pc, #152]	; (80044e8 <control_interrupt+0x194>)
 800444e:	edc3 7a00 	vstr	s15, [r3]
	if (u2 > 65534)
 8004452:	4b25      	ldr	r3, [pc, #148]	; (80044e8 <control_interrupt+0x194>)
 8004454:	edd3 7a00 	vldr	s15, [r3]
 8004458:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80044ec <control_interrupt+0x198>
 800445c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004464:	dd02      	ble.n	800446c <control_interrupt+0x118>
		u2 = 65535;
 8004466:	4b20      	ldr	r3, [pc, #128]	; (80044e8 <control_interrupt+0x194>)
 8004468:	4a21      	ldr	r2, [pc, #132]	; (80044f0 <control_interrupt+0x19c>)
 800446a:	601a      	str	r2, [r3, #0]
	if (u2 < -65534)
 800446c:	4b1e      	ldr	r3, [pc, #120]	; (80044e8 <control_interrupt+0x194>)
 800446e:	edd3 7a00 	vldr	s15, [r3]
 8004472:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80044f4 <control_interrupt+0x1a0>
 8004476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800447a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800447e:	d502      	bpl.n	8004486 <control_interrupt+0x132>
		u2 = -65535;
 8004480:	4b19      	ldr	r3, [pc, #100]	; (80044e8 <control_interrupt+0x194>)
 8004482:	4a1d      	ldr	r2, [pc, #116]	; (80044f8 <control_interrupt+0x1a4>)
 8004484:	601a      	str	r2, [r3, #0]
	p2 = error2;
 8004486:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <control_interrupt+0x17c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a15      	ldr	r2, [pc, #84]	; (80044e0 <control_interrupt+0x18c>)
 800448c:	6013      	str	r3, [r2, #0]
	return u2;
 800448e:	4b16      	ldr	r3, [pc, #88]	; (80044e8 <control_interrupt+0x194>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	ee07 3a90 	vmov	s15, r3
}
 8004496:	eeb0 0a67 	vmov.f32	s0, s15
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	2000130c 	.word	0x2000130c
 80044a8:	20001308 	.word	0x20001308
 80044ac:	20001314 	.word	0x20001314
 80044b0:	200012e8 	.word	0x200012e8
 80044b4:	200012fc 	.word	0x200012fc
 80044b8:	20000338 	.word	0x20000338
 80044bc:	200012e4 	.word	0x200012e4
 80044c0:	20001300 	.word	0x20001300
 80044c4:	200012e0 	.word	0x200012e0
 80044c8:	20000344 	.word	0x20000344
 80044cc:	20001274 	.word	0x20001274
 80044d0:	200012f8 	.word	0x200012f8
 80044d4:	200012f4 	.word	0x200012f4
 80044d8:	2000033c 	.word	0x2000033c
 80044dc:	20000340 	.word	0x20000340
 80044e0:	200012f0 	.word	0x200012f0
 80044e4:	20001304 	.word	0x20001304
 80044e8:	200012ec 	.word	0x200012ec
 80044ec:	477ffe00 	.word	0x477ffe00
 80044f0:	477fff00 	.word	0x477fff00
 80044f4:	c77ffe00 	.word	0xc77ffe00
 80044f8:	c77fff00 	.word	0xc77fff00

080044fc <velocity>:
	if (u2 < -65535)
		u2 = -65535;
	p2 = error2;
	return u2;
}
void velocity() {
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
	QEIData.data[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8004502:	4b2c      	ldr	r3, [pc, #176]	; (80045b4 <velocity+0xb8>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	4a2b      	ldr	r2, [pc, #172]	; (80045b8 <velocity+0xbc>)
 800450a:	6013      	str	r3, [r2, #0]
	QEIData.timestamp[0] = micros();
 800450c:	f000 f8c2 	bl	8004694 <micros>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4b28      	ldr	r3, [pc, #160]	; (80045b8 <velocity+0xbc>)
 8004516:	609a      	str	r2, [r3, #8]

	int32_t diffposition = QEIData.data[0] - QEIData.data[1];
 8004518:	4b27      	ldr	r3, [pc, #156]	; (80045b8 <velocity+0xbc>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	4b26      	ldr	r3, [pc, #152]	; (80045b8 <velocity+0xbc>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	607b      	str	r3, [r7, #4]
	float difftime = QEIData.timestamp[0] - QEIData.timestamp[1];
 8004524:	4b24      	ldr	r3, [pc, #144]	; (80045b8 <velocity+0xbc>)
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	4b23      	ldr	r3, [pc, #140]	; (80045b8 <velocity+0xbc>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004536:	edc7 7a00 	vstr	s15, [r7]

	if (ReadDegree > 750) {
 800453a:	4b20      	ldr	r3, [pc, #128]	; (80045bc <velocity+0xc0>)
 800453c:	edd3 7a00 	vldr	s15, [r3]
 8004540:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80045c0 <velocity+0xc4>
 8004544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454c:	dd03      	ble.n	8004556 <velocity+0x5a>
		SetDegree = 0;
 800454e:	4b1d      	ldr	r3, [pc, #116]	; (80045c4 <velocity+0xc8>)
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
	}
	if (diffposition < -(QEI_PERIOD >> 1)) {
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f513 4fa0 	cmn.w	r3, #20480	; 0x5000
 800455c:	da03      	bge.n	8004566 <velocity+0x6a>
		diffposition += QEI_PERIOD;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8004564:	607b      	str	r3, [r7, #4]
	}

	QEIData.QEIPosition = __HAL_TIM_GET_COUNTER(&htim2) % 8192;
 8004566:	4b13      	ldr	r3, [pc, #76]	; (80045b4 <velocity+0xb8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004570:	ee07 3a90 	vmov	s15, r3
 8004574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004578:	4b0f      	ldr	r3, [pc, #60]	; (80045b8 <velocity+0xbc>)
 800457a:	edc3 7a04 	vstr	s15, [r3, #16]
	QEIData.QEIVelocity = (diffposition * 1000000) / difftime;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a11      	ldr	r2, [pc, #68]	; (80045c8 <velocity+0xcc>)
 8004582:	fb02 f303 	mul.w	r3, r2, r3
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800458e:	ed97 7a00 	vldr	s14, [r7]
 8004592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004596:	4b08      	ldr	r3, [pc, #32]	; (80045b8 <velocity+0xbc>)
 8004598:	edc3 7a05 	vstr	s15, [r3, #20]

	QEIData.data[1] = QEIData.data[0];
 800459c:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <velocity+0xbc>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a05      	ldr	r2, [pc, #20]	; (80045b8 <velocity+0xbc>)
 80045a2:	6053      	str	r3, [r2, #4]
	QEIData.timestamp[1] = QEIData.timestamp[0];
 80045a4:	4b04      	ldr	r3, [pc, #16]	; (80045b8 <velocity+0xbc>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	4a03      	ldr	r2, [pc, #12]	; (80045b8 <velocity+0xbc>)
 80045aa:	60d3      	str	r3, [r2, #12]

}
 80045ac:	bf00      	nop
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	200004e4 	.word	0x200004e4
 80045b8:	20001298 	.word	0x20001298
 80045bc:	20001308 	.word	0x20001308
 80045c0:	443b8000 	.word	0x443b8000
 80045c4:	2000130c 	.word	0x2000130c
 80045c8:	000f4240 	.word	0x000f4240

080045cc <accelerate>:
void accelerate() {
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
	QEIAcc.data[0] = speed;
 80045d2:	4b20      	ldr	r3, [pc, #128]	; (8004654 <accelerate+0x88>)
 80045d4:	edd3 7a00 	vldr	s15, [r3]
 80045d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045dc:	ee17 2a90 	vmov	r2, s15
 80045e0:	4b1d      	ldr	r3, [pc, #116]	; (8004658 <accelerate+0x8c>)
 80045e2:	601a      	str	r2, [r3, #0]
	QEIAcc.timestamp[0] = micros();
 80045e4:	f000 f856 	bl	8004694 <micros>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4b1a      	ldr	r3, [pc, #104]	; (8004658 <accelerate+0x8c>)
 80045ee:	609a      	str	r2, [r3, #8]

	int32_t diffposition = QEIAcc.data[0] - QEIAcc.data[1];
 80045f0:	4b19      	ldr	r3, [pc, #100]	; (8004658 <accelerate+0x8c>)
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	4b18      	ldr	r3, [pc, #96]	; (8004658 <accelerate+0x8c>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	607b      	str	r3, [r7, #4]
	float difftime = QEIAcc.timestamp[0] - QEIAcc.timestamp[1];
 80045fc:	4b16      	ldr	r3, [pc, #88]	; (8004658 <accelerate+0x8c>)
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	4b15      	ldr	r3, [pc, #84]	; (8004658 <accelerate+0x8c>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	ee07 3a90 	vmov	s15, r3
 800460a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460e:	edc7 7a00 	vstr	s15, [r7]
	difftime = difftime / 1000000;
 8004612:	ed97 7a00 	vldr	s14, [r7]
 8004616:	eddf 6a11 	vldr	s13, [pc, #68]	; 800465c <accelerate+0x90>
 800461a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800461e:	edc7 7a00 	vstr	s15, [r7]

	QEIAcc.QEIVelocity = (diffposition / difftime);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	ee07 3a90 	vmov	s15, r3
 8004628:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800462c:	ed97 7a00 	vldr	s14, [r7]
 8004630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004634:	4b08      	ldr	r3, [pc, #32]	; (8004658 <accelerate+0x8c>)
 8004636:	edc3 7a05 	vstr	s15, [r3, #20]

	QEIAcc.data[1] = QEIAcc.data[0];
 800463a:	4b07      	ldr	r3, [pc, #28]	; (8004658 <accelerate+0x8c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a06      	ldr	r2, [pc, #24]	; (8004658 <accelerate+0x8c>)
 8004640:	6053      	str	r3, [r2, #4]
	QEIAcc.timestamp[1] = QEIAcc.timestamp[0];
 8004642:	4b05      	ldr	r3, [pc, #20]	; (8004658 <accelerate+0x8c>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	4a04      	ldr	r2, [pc, #16]	; (8004658 <accelerate+0x8c>)
 8004648:	60d3      	str	r3, [r2, #12]
}
 800464a:	bf00      	nop
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	20001274 	.word	0x20001274
 8004658:	200012b0 	.word	0x200012b0
 800465c:	49742400 	.word	0x49742400

08004660 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004660:	b4b0      	push	{r4, r5, r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a08      	ldr	r2, [pc, #32]	; (800468c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d108      	bne.n	8004682 <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8004670:	4b07      	ldr	r3, [pc, #28]	; (8004690 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004676:	1e54      	subs	r4, r2, #1
 8004678:	f143 0500 	adc.w	r5, r3, #0
 800467c:	4b04      	ldr	r3, [pc, #16]	; (8004690 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800467e:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	bcb0      	pop	{r4, r5, r7}
 800468a:	4770      	bx	lr
 800468c:	20000700 	.word	0x20000700
 8004690:	200012c8 	.word	0x200012c8

08004694 <micros>:
uint64_t micros() {
 8004694:	b4b0      	push	{r4, r5, r7}
 8004696:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8004698:	4b09      	ldr	r3, [pc, #36]	; (80046c0 <micros+0x2c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	2200      	movs	r2, #0
 80046a0:	4618      	mov	r0, r3
 80046a2:	4611      	mov	r1, r2
 80046a4:	4b07      	ldr	r3, [pc, #28]	; (80046c4 <micros+0x30>)
 80046a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046aa:	1884      	adds	r4, r0, r2
 80046ac:	eb41 0503 	adc.w	r5, r1, r3
 80046b0:	4622      	mov	r2, r4
 80046b2:	462b      	mov	r3, r5
}
 80046b4:	4610      	mov	r0, r2
 80046b6:	4619      	mov	r1, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bcb0      	pop	{r4, r5, r7}
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	20000700 	.word	0x20000700
 80046c4:	200012c8 	.word	0x200012c8

080046c8 <main_Qubic>:
void main_Qubic() {
 80046c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046cc:	ed2d 8b02 	vpush	{d8}
 80046d0:	b084      	sub	sp, #16
 80046d2:	af00      	add	r7, sp, #0
	emxArray_real_T *q_acc;
	emxArray_real_T *q_position;
	emxArray_real_T *q_velocity;
	/* Initialize function 'Qubic' input arguments. */
	q_k1_tmp = argInit_real_T();
 80046d4:	f7fd fd1e 	bl	8002114 <argInit_real_T>
 80046d8:	eeb0 7a40 	vmov.f32	s14, s0
 80046dc:	eef0 7a60 	vmov.f32	s15, s1
 80046e0:	4b33      	ldr	r3, [pc, #204]	; (80047b0 <main_Qubic+0xe8>)
 80046e2:	ed83 7b00 	vstr	d7, [r3]
	/* Call the entry-point 'Qubic'. */
	emxInitArray_real_T(&q_position, 2);
 80046e6:	f107 0308 	add.w	r3, r7, #8
 80046ea:	2102      	movs	r1, #2
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fd fc23 	bl	8001f38 <emxInitArray_real_T>
	emxInitArray_real_T(&q_velocity, 2);
 80046f2:	1d3b      	adds	r3, r7, #4
 80046f4:	2102      	movs	r1, #2
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fd fc1e 	bl	8001f38 <emxInitArray_real_T>
	emxInitArray_real_T(&q_acc, 2);
 80046fc:	f107 030c 	add.w	r3, r7, #12
 8004700:	2102      	movs	r1, #2
 8004702:	4618      	mov	r0, r3
 8004704:	f7fd fc18 	bl	8001f38 <emxInitArray_real_T>
	Qubic(start_p, stop_p, start_v, stop_v, timecycle, q_position, q_velocity,
 8004708:	4b2a      	ldr	r3, [pc, #168]	; (80047b4 <main_Qubic+0xec>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4618      	mov	r0, r3
 800470e:	f7fb fec7 	bl	80004a0 <__aeabi_f2d>
 8004712:	4604      	mov	r4, r0
 8004714:	460d      	mov	r5, r1
 8004716:	4b28      	ldr	r3, [pc, #160]	; (80047b8 <main_Qubic+0xf0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f7fb fec0 	bl	80004a0 <__aeabi_f2d>
 8004720:	4680      	mov	r8, r0
 8004722:	4689      	mov	r9, r1
 8004724:	4b25      	ldr	r3, [pc, #148]	; (80047bc <main_Qubic+0xf4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4618      	mov	r0, r3
 800472a:	f7fb feb9 	bl	80004a0 <__aeabi_f2d>
 800472e:	4682      	mov	sl, r0
 8004730:	468b      	mov	fp, r1
 8004732:	4b23      	ldr	r3, [pc, #140]	; (80047c0 <main_Qubic+0xf8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4618      	mov	r0, r3
 8004738:	f7fb feb2 	bl	80004a0 <__aeabi_f2d>
 800473c:	ec41 0b18 	vmov	d8, r0, r1
 8004740:	4b20      	ldr	r3, [pc, #128]	; (80047c4 <main_Qubic+0xfc>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4618      	mov	r0, r3
 8004746:	f7fb feab 	bl	80004a0 <__aeabi_f2d>
 800474a:	ec41 0b17 	vmov	d7, r0, r1
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4618      	mov	r0, r3
 8004756:	eeb0 4a47 	vmov.f32	s8, s14
 800475a:	eef0 4a67 	vmov.f32	s9, s15
 800475e:	eeb0 3a48 	vmov.f32	s6, s16
 8004762:	eef0 3a68 	vmov.f32	s7, s17
 8004766:	ec4b ab12 	vmov	d2, sl, fp
 800476a:	ec49 8b11 	vmov	d1, r8, r9
 800476e:	ec45 4b10 	vmov	d0, r4, r5
 8004772:	f7fd f851 	bl	8001818 <Qubic>
			q_acc);
	q_positionN = q_position;
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	4a13      	ldr	r2, [pc, #76]	; (80047c8 <main_Qubic+0x100>)
 800477a:	6013      	str	r3, [r2, #0]
	q_velocityN = q_velocity;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a13      	ldr	r2, [pc, #76]	; (80047cc <main_Qubic+0x104>)
 8004780:	6013      	str	r3, [r2, #0]
	q_accN = q_acc;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4a12      	ldr	r2, [pc, #72]	; (80047d0 <main_Qubic+0x108>)
 8004786:	6013      	str	r3, [r2, #0]
	emxDestroyArray_real_T(q_position);
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4618      	mov	r0, r3
 800478c:	f7fd fbc8 	bl	8001f20 <emxDestroyArray_real_T>
	emxDestroyArray_real_T(q_velocity);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4618      	mov	r0, r3
 8004794:	f7fd fbc4 	bl	8001f20 <emxDestroyArray_real_T>
	emxDestroyArray_real_T(q_acc);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4618      	mov	r0, r3
 800479c:	f7fd fbc0 	bl	8001f20 <emxDestroyArray_real_T>
}
 80047a0:	bf00      	nop
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	ecbd 8b02 	vpop	{d8}
 80047aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047ae:	bf00      	nop
 80047b0:	20000b68 	.word	0x20000b68
 80047b4:	20000948 	.word	0x20000948
 80047b8:	2000094c 	.word	0x2000094c
 80047bc:	20000950 	.word	0x20000950
 80047c0:	20000954 	.word	0x20000954
 80047c4:	20000958 	.word	0x20000958
 80047c8:	200012d4 	.word	0x200012d4
 80047cc:	200012d0 	.word	0x200012d0
 80047d0:	200012d8 	.word	0x200012d8

080047d4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80047d8:	b672      	cpsid	i
}
 80047da:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80047dc:	e7fe      	b.n	80047dc <Error_Handler+0x8>
	...

080047e0 <rtIsInf>:
 * Function: rtIsInf ==================================================
 *  Abstract:
 *  Test if value is infinite
 */
boolean_T rtIsInf(real_T value)
{
 80047e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	ed87 0b00 	vstr	d0, [r7]
  return (isinf(value) != 0U);
 80047ea:	683c      	ldr	r4, [r7, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80047f2:	2301      	movs	r3, #1
 80047f4:	461e      	mov	r6, r3
 80047f6:	f04f 32ff 	mov.w	r2, #4294967295
 80047fa:	4b0f      	ldr	r3, [pc, #60]	; (8004838 <rtIsInf+0x58>)
 80047fc:	4620      	mov	r0, r4
 80047fe:	4629      	mov	r1, r5
 8004800:	f7fc f940 	bl	8000a84 <__aeabi_dcmpun>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10b      	bne.n	8004822 <rtIsInf+0x42>
 800480a:	f04f 32ff 	mov.w	r2, #4294967295
 800480e:	4b0a      	ldr	r3, [pc, #40]	; (8004838 <rtIsInf+0x58>)
 8004810:	4620      	mov	r0, r4
 8004812:	4629      	mov	r1, r5
 8004814:	f7fc f918 	bl	8000a48 <__aeabi_dcmple>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <rtIsInf+0x42>
 800481e:	2300      	movs	r3, #0
 8004820:	461e      	mov	r6, r3
 8004822:	b2f3      	uxtb	r3, r6
 8004824:	f083 0301 	eor.w	r3, r3, #1
 8004828:	b2db      	uxtb	r3, r3
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	b2db      	uxtb	r3, r3
}
 8004830:	4618      	mov	r0, r3
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004838:	7fefffff 	.word	0x7fefffff

0800483c <rtIsNaN>:
 * Function: rtIsNaN ==================================================
 *  Abstract:
 *  Test if value is not a number
 */
boolean_T rtIsNaN(real_T value)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	ed87 0b00 	vstr	d0, [r7]
  return (isnan(value) != 0U);
 8004846:	e9d7 2300 	ldrd	r2, r3, [r7]
 800484a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800484e:	f7fc f919 	bl	8000a84 <__aeabi_dcmpun>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <rtIsNaN+0x20>
 8004858:	2301      	movs	r3, #1
 800485a:	e000      	b.n	800485e <rtIsNaN+0x22>
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800486e:	2300      	movs	r3, #0
 8004870:	607b      	str	r3, [r7, #4]
 8004872:	4b10      	ldr	r3, [pc, #64]	; (80048b4 <HAL_MspInit+0x4c>)
 8004874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004876:	4a0f      	ldr	r2, [pc, #60]	; (80048b4 <HAL_MspInit+0x4c>)
 8004878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800487c:	6453      	str	r3, [r2, #68]	; 0x44
 800487e:	4b0d      	ldr	r3, [pc, #52]	; (80048b4 <HAL_MspInit+0x4c>)
 8004880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004886:	607b      	str	r3, [r7, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800488a:	2300      	movs	r3, #0
 800488c:	603b      	str	r3, [r7, #0]
 800488e:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <HAL_MspInit+0x4c>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	4a08      	ldr	r2, [pc, #32]	; (80048b4 <HAL_MspInit+0x4c>)
 8004894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004898:	6413      	str	r3, [r2, #64]	; 0x40
 800489a:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <HAL_MspInit+0x4c>)
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a2:	603b      	str	r3, [r7, #0]
 80048a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80048a6:	2007      	movs	r0, #7
 80048a8:	f001 f882 	bl	80059b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048ac:	bf00      	nop
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40023800 	.word	0x40023800

080048b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b08a      	sub	sp, #40	; 0x28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c0:	f107 0314 	add.w	r3, r7, #20
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	605a      	str	r2, [r3, #4]
 80048ca:	609a      	str	r2, [r3, #8]
 80048cc:	60da      	str	r2, [r3, #12]
 80048ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a3c      	ldr	r2, [pc, #240]	; (80049c8 <HAL_ADC_MspInit+0x110>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d171      	bne.n	80049be <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80048da:	2300      	movs	r3, #0
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	4b3b      	ldr	r3, [pc, #236]	; (80049cc <HAL_ADC_MspInit+0x114>)
 80048e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e2:	4a3a      	ldr	r2, [pc, #232]	; (80049cc <HAL_ADC_MspInit+0x114>)
 80048e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e8:	6453      	str	r3, [r2, #68]	; 0x44
 80048ea:	4b38      	ldr	r3, [pc, #224]	; (80049cc <HAL_ADC_MspInit+0x114>)
 80048ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f2:	613b      	str	r3, [r7, #16]
 80048f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	4b34      	ldr	r3, [pc, #208]	; (80049cc <HAL_ADC_MspInit+0x114>)
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	4a33      	ldr	r2, [pc, #204]	; (80049cc <HAL_ADC_MspInit+0x114>)
 8004900:	f043 0301 	orr.w	r3, r3, #1
 8004904:	6313      	str	r3, [r2, #48]	; 0x30
 8004906:	4b31      	ldr	r3, [pc, #196]	; (80049cc <HAL_ADC_MspInit+0x114>)
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004912:	2300      	movs	r3, #0
 8004914:	60bb      	str	r3, [r7, #8]
 8004916:	4b2d      	ldr	r3, [pc, #180]	; (80049cc <HAL_ADC_MspInit+0x114>)
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	4a2c      	ldr	r2, [pc, #176]	; (80049cc <HAL_ADC_MspInit+0x114>)
 800491c:	f043 0302 	orr.w	r3, r3, #2
 8004920:	6313      	str	r3, [r2, #48]	; 0x30
 8004922:	4b2a      	ldr	r3, [pc, #168]	; (80049cc <HAL_ADC_MspInit+0x114>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	60bb      	str	r3, [r7, #8]
 800492c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Joystick_Y_Pin;
 800492e:	2310      	movs	r3, #16
 8004930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004932:	2303      	movs	r3, #3
 8004934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004936:	2300      	movs	r3, #0
 8004938:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Joystick_Y_GPIO_Port, &GPIO_InitStruct);
 800493a:	f107 0314 	add.w	r3, r7, #20
 800493e:	4619      	mov	r1, r3
 8004940:	4823      	ldr	r0, [pc, #140]	; (80049d0 <HAL_ADC_MspInit+0x118>)
 8004942:	f001 fc85 	bl	8006250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Joystick_X_Pin;
 8004946:	2301      	movs	r3, #1
 8004948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800494a:	2303      	movs	r3, #3
 800494c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800494e:	2300      	movs	r3, #0
 8004950:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Joystick_X_GPIO_Port, &GPIO_InitStruct);
 8004952:	f107 0314 	add.w	r3, r7, #20
 8004956:	4619      	mov	r1, r3
 8004958:	481e      	ldr	r0, [pc, #120]	; (80049d4 <HAL_ADC_MspInit+0x11c>)
 800495a:	f001 fc79 	bl	8006250 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800495e:	4b1e      	ldr	r3, [pc, #120]	; (80049d8 <HAL_ADC_MspInit+0x120>)
 8004960:	4a1e      	ldr	r2, [pc, #120]	; (80049dc <HAL_ADC_MspInit+0x124>)
 8004962:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004964:	4b1c      	ldr	r3, [pc, #112]	; (80049d8 <HAL_ADC_MspInit+0x120>)
 8004966:	2200      	movs	r2, #0
 8004968:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800496a:	4b1b      	ldr	r3, [pc, #108]	; (80049d8 <HAL_ADC_MspInit+0x120>)
 800496c:	2200      	movs	r2, #0
 800496e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004970:	4b19      	ldr	r3, [pc, #100]	; (80049d8 <HAL_ADC_MspInit+0x120>)
 8004972:	2200      	movs	r2, #0
 8004974:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004976:	4b18      	ldr	r3, [pc, #96]	; (80049d8 <HAL_ADC_MspInit+0x120>)
 8004978:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800497c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800497e:	4b16      	ldr	r3, [pc, #88]	; (80049d8 <HAL_ADC_MspInit+0x120>)
 8004980:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004984:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004986:	4b14      	ldr	r3, [pc, #80]	; (80049d8 <HAL_ADC_MspInit+0x120>)
 8004988:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800498c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800498e:	4b12      	ldr	r3, [pc, #72]	; (80049d8 <HAL_ADC_MspInit+0x120>)
 8004990:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004994:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004996:	4b10      	ldr	r3, [pc, #64]	; (80049d8 <HAL_ADC_MspInit+0x120>)
 8004998:	2200      	movs	r2, #0
 800499a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800499c:	4b0e      	ldr	r3, [pc, #56]	; (80049d8 <HAL_ADC_MspInit+0x120>)
 800499e:	2200      	movs	r2, #0
 80049a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80049a2:	480d      	ldr	r0, [pc, #52]	; (80049d8 <HAL_ADC_MspInit+0x120>)
 80049a4:	f001 f846 	bl	8005a34 <HAL_DMA_Init>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80049ae:	f7ff ff11 	bl	80047d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a08      	ldr	r2, [pc, #32]	; (80049d8 <HAL_ADC_MspInit+0x120>)
 80049b6:	639a      	str	r2, [r3, #56]	; 0x38
 80049b8:	4a07      	ldr	r2, [pc, #28]	; (80049d8 <HAL_ADC_MspInit+0x120>)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80049be:	bf00      	nop
 80049c0:	3728      	adds	r7, #40	; 0x28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40012000 	.word	0x40012000
 80049cc:	40023800 	.word	0x40023800
 80049d0:	40020000 	.word	0x40020000
 80049d4:	40020400 	.word	0x40020400
 80049d8:	20000430 	.word	0x20000430
 80049dc:	40026410 	.word	0x40026410

080049e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08a      	sub	sp, #40	; 0x28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049e8:	f107 0314 	add.w	r3, r7, #20
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	605a      	str	r2, [r3, #4]
 80049f2:	609a      	str	r2, [r3, #8]
 80049f4:	60da      	str	r2, [r3, #12]
 80049f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a19      	ldr	r2, [pc, #100]	; (8004a64 <HAL_I2C_MspInit+0x84>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d12c      	bne.n	8004a5c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a02:	2300      	movs	r3, #0
 8004a04:	613b      	str	r3, [r7, #16]
 8004a06:	4b18      	ldr	r3, [pc, #96]	; (8004a68 <HAL_I2C_MspInit+0x88>)
 8004a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0a:	4a17      	ldr	r2, [pc, #92]	; (8004a68 <HAL_I2C_MspInit+0x88>)
 8004a0c:	f043 0302 	orr.w	r3, r3, #2
 8004a10:	6313      	str	r3, [r2, #48]	; 0x30
 8004a12:	4b15      	ldr	r3, [pc, #84]	; (8004a68 <HAL_I2C_MspInit+0x88>)
 8004a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	613b      	str	r3, [r7, #16]
 8004a1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004a1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a24:	2312      	movs	r3, #18
 8004a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004a30:	2304      	movs	r3, #4
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a34:	f107 0314 	add.w	r3, r7, #20
 8004a38:	4619      	mov	r1, r3
 8004a3a:	480c      	ldr	r0, [pc, #48]	; (8004a6c <HAL_I2C_MspInit+0x8c>)
 8004a3c:	f001 fc08 	bl	8006250 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004a40:	2300      	movs	r3, #0
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	4b08      	ldr	r3, [pc, #32]	; (8004a68 <HAL_I2C_MspInit+0x88>)
 8004a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a48:	4a07      	ldr	r2, [pc, #28]	; (8004a68 <HAL_I2C_MspInit+0x88>)
 8004a4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8004a50:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <HAL_I2C_MspInit+0x88>)
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004a5c:	bf00      	nop
 8004a5e:	3728      	adds	r7, #40	; 0x28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40005400 	.word	0x40005400
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	40020400 	.word	0x40020400

08004a70 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08a      	sub	sp, #40	; 0x28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a78:	f107 0314 	add.w	r3, r7, #20
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	605a      	str	r2, [r3, #4]
 8004a82:	609a      	str	r2, [r3, #8]
 8004a84:	60da      	str	r2, [r3, #12]
 8004a86:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a90:	d12b      	bne.n	8004aea <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004a92:	2300      	movs	r3, #0
 8004a94:	613b      	str	r3, [r7, #16]
 8004a96:	4b17      	ldr	r3, [pc, #92]	; (8004af4 <HAL_TIM_Encoder_MspInit+0x84>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	4a16      	ldr	r2, [pc, #88]	; (8004af4 <HAL_TIM_Encoder_MspInit+0x84>)
 8004a9c:	f043 0301 	orr.w	r3, r3, #1
 8004aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8004aa2:	4b14      	ldr	r3, [pc, #80]	; (8004af4 <HAL_TIM_Encoder_MspInit+0x84>)
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	613b      	str	r3, [r7, #16]
 8004aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	4b10      	ldr	r3, [pc, #64]	; (8004af4 <HAL_TIM_Encoder_MspInit+0x84>)
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab6:	4a0f      	ldr	r2, [pc, #60]	; (8004af4 <HAL_TIM_Encoder_MspInit+0x84>)
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	6313      	str	r3, [r2, #48]	; 0x30
 8004abe:	4b0d      	ldr	r3, [pc, #52]	; (8004af4 <HAL_TIM_Encoder_MspInit+0x84>)
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Encoder_B_Pin|Encoder_A_Pin;
 8004aca:	2303      	movs	r3, #3
 8004acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ace:	2302      	movs	r3, #2
 8004ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ada:	2301      	movs	r3, #1
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ade:	f107 0314 	add.w	r3, r7, #20
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	4804      	ldr	r0, [pc, #16]	; (8004af8 <HAL_TIM_Encoder_MspInit+0x88>)
 8004ae6:	f001 fbb3 	bl	8006250 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004aea:	bf00      	nop
 8004aec:	3728      	adds	r7, #40	; 0x28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	40023800 	.word	0x40023800
 8004af8:	40020000 	.word	0x40020000

08004afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a34      	ldr	r2, [pc, #208]	; (8004bdc <HAL_TIM_Base_MspInit+0xe0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d116      	bne.n	8004b3c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004b0e:	2300      	movs	r3, #0
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	4b33      	ldr	r3, [pc, #204]	; (8004be0 <HAL_TIM_Base_MspInit+0xe4>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	4a32      	ldr	r2, [pc, #200]	; (8004be0 <HAL_TIM_Base_MspInit+0xe4>)
 8004b18:	f043 0302 	orr.w	r3, r3, #2
 8004b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b1e:	4b30      	ldr	r3, [pc, #192]	; (8004be0 <HAL_TIM_Base_MspInit+0xe4>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	201d      	movs	r0, #29
 8004b30:	f000 ff49 	bl	80059c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004b34:	201d      	movs	r0, #29
 8004b36:	f000 ff62 	bl	80059fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004b3a:	e04a      	b.n	8004bd2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a28      	ldr	r2, [pc, #160]	; (8004be4 <HAL_TIM_Base_MspInit+0xe8>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d116      	bne.n	8004b74 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004b46:	2300      	movs	r3, #0
 8004b48:	613b      	str	r3, [r7, #16]
 8004b4a:	4b25      	ldr	r3, [pc, #148]	; (8004be0 <HAL_TIM_Base_MspInit+0xe4>)
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	4a24      	ldr	r2, [pc, #144]	; (8004be0 <HAL_TIM_Base_MspInit+0xe4>)
 8004b50:	f043 0304 	orr.w	r3, r3, #4
 8004b54:	6413      	str	r3, [r2, #64]	; 0x40
 8004b56:	4b22      	ldr	r3, [pc, #136]	; (8004be0 <HAL_TIM_Base_MspInit+0xe4>)
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	613b      	str	r3, [r7, #16]
 8004b60:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004b62:	2200      	movs	r2, #0
 8004b64:	2100      	movs	r1, #0
 8004b66:	201e      	movs	r0, #30
 8004b68:	f000 ff2d 	bl	80059c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004b6c:	201e      	movs	r0, #30
 8004b6e:	f000 ff46 	bl	80059fe <HAL_NVIC_EnableIRQ>
}
 8004b72:	e02e      	b.n	8004bd2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a1b      	ldr	r2, [pc, #108]	; (8004be8 <HAL_TIM_Base_MspInit+0xec>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d10e      	bne.n	8004b9c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	4b17      	ldr	r3, [pc, #92]	; (8004be0 <HAL_TIM_Base_MspInit+0xe4>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	4a16      	ldr	r2, [pc, #88]	; (8004be0 <HAL_TIM_Base_MspInit+0xe4>)
 8004b88:	f043 0308 	orr.w	r3, r3, #8
 8004b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b8e:	4b14      	ldr	r3, [pc, #80]	; (8004be0 <HAL_TIM_Base_MspInit+0xe4>)
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	68fb      	ldr	r3, [r7, #12]
}
 8004b9a:	e01a      	b.n	8004bd2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM11)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a12      	ldr	r2, [pc, #72]	; (8004bec <HAL_TIM_Base_MspInit+0xf0>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d115      	bne.n	8004bd2 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60bb      	str	r3, [r7, #8]
 8004baa:	4b0d      	ldr	r3, [pc, #52]	; (8004be0 <HAL_TIM_Base_MspInit+0xe4>)
 8004bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bae:	4a0c      	ldr	r2, [pc, #48]	; (8004be0 <HAL_TIM_Base_MspInit+0xe4>)
 8004bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8004bb6:	4b0a      	ldr	r3, [pc, #40]	; (8004be0 <HAL_TIM_Base_MspInit+0xe4>)
 8004bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bbe:	60bb      	str	r3, [r7, #8]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	201a      	movs	r0, #26
 8004bc8:	f000 fefd 	bl	80059c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004bcc:	201a      	movs	r0, #26
 8004bce:	f000 ff16 	bl	80059fe <HAL_NVIC_EnableIRQ>
}
 8004bd2:	bf00      	nop
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	40000400 	.word	0x40000400
 8004be0:	40023800 	.word	0x40023800
 8004be4:	40000800 	.word	0x40000800
 8004be8:	40000c00 	.word	0x40000c00
 8004bec:	40014800 	.word	0x40014800

08004bf0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b088      	sub	sp, #32
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bf8:	f107 030c 	add.w	r3, r7, #12
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	605a      	str	r2, [r3, #4]
 8004c02:	609a      	str	r2, [r3, #8]
 8004c04:	60da      	str	r2, [r3, #12]
 8004c06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a12      	ldr	r2, [pc, #72]	; (8004c58 <HAL_TIM_MspPostInit+0x68>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d11d      	bne.n	8004c4e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c12:	2300      	movs	r3, #0
 8004c14:	60bb      	str	r3, [r7, #8]
 8004c16:	4b11      	ldr	r3, [pc, #68]	; (8004c5c <HAL_TIM_MspPostInit+0x6c>)
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	4a10      	ldr	r2, [pc, #64]	; (8004c5c <HAL_TIM_MspPostInit+0x6c>)
 8004c1c:	f043 0302 	orr.w	r3, r3, #2
 8004c20:	6313      	str	r3, [r2, #48]	; 0x30
 8004c22:	4b0e      	ldr	r3, [pc, #56]	; (8004c5c <HAL_TIM_MspPostInit+0x6c>)
 8004c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	60bb      	str	r3, [r7, #8]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004c2e:	2340      	movs	r3, #64	; 0x40
 8004c30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c32:	2302      	movs	r3, #2
 8004c34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004c3e:	2302      	movs	r3, #2
 8004c40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c42:	f107 030c 	add.w	r3, r7, #12
 8004c46:	4619      	mov	r1, r3
 8004c48:	4805      	ldr	r0, [pc, #20]	; (8004c60 <HAL_TIM_MspPostInit+0x70>)
 8004c4a:	f001 fb01 	bl	8006250 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004c4e:	bf00      	nop
 8004c50:	3720      	adds	r7, #32
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	40000800 	.word	0x40000800
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	40020400 	.word	0x40020400

08004c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08a      	sub	sp, #40	; 0x28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c6c:	f107 0314 	add.w	r3, r7, #20
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	605a      	str	r2, [r3, #4]
 8004c76:	609a      	str	r2, [r3, #8]
 8004c78:	60da      	str	r2, [r3, #12]
 8004c7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a34      	ldr	r2, [pc, #208]	; (8004d54 <HAL_UART_MspInit+0xf0>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d161      	bne.n	8004d4a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c86:	2300      	movs	r3, #0
 8004c88:	613b      	str	r3, [r7, #16]
 8004c8a:	4b33      	ldr	r3, [pc, #204]	; (8004d58 <HAL_UART_MspInit+0xf4>)
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	4a32      	ldr	r2, [pc, #200]	; (8004d58 <HAL_UART_MspInit+0xf4>)
 8004c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c94:	6413      	str	r3, [r2, #64]	; 0x40
 8004c96:	4b30      	ldr	r3, [pc, #192]	; (8004d58 <HAL_UART_MspInit+0xf4>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9e:	613b      	str	r3, [r7, #16]
 8004ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	4b2c      	ldr	r3, [pc, #176]	; (8004d58 <HAL_UART_MspInit+0xf4>)
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004caa:	4a2b      	ldr	r2, [pc, #172]	; (8004d58 <HAL_UART_MspInit+0xf4>)
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8004cb2:	4b29      	ldr	r3, [pc, #164]	; (8004d58 <HAL_UART_MspInit+0xf4>)
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004cbe:	230c      	movs	r3, #12
 8004cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004cce:	2307      	movs	r3, #7
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cd2:	f107 0314 	add.w	r3, r7, #20
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4820      	ldr	r0, [pc, #128]	; (8004d5c <HAL_UART_MspInit+0xf8>)
 8004cda:	f001 fab9 	bl	8006250 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004cde:	4b20      	ldr	r3, [pc, #128]	; (8004d60 <HAL_UART_MspInit+0xfc>)
 8004ce0:	4a20      	ldr	r2, [pc, #128]	; (8004d64 <HAL_UART_MspInit+0x100>)
 8004ce2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004ce4:	4b1e      	ldr	r3, [pc, #120]	; (8004d60 <HAL_UART_MspInit+0xfc>)
 8004ce6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004cea:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cec:	4b1c      	ldr	r3, [pc, #112]	; (8004d60 <HAL_UART_MspInit+0xfc>)
 8004cee:	2240      	movs	r2, #64	; 0x40
 8004cf0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cf2:	4b1b      	ldr	r3, [pc, #108]	; (8004d60 <HAL_UART_MspInit+0xfc>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004cf8:	4b19      	ldr	r3, [pc, #100]	; (8004d60 <HAL_UART_MspInit+0xfc>)
 8004cfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cfe:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d00:	4b17      	ldr	r3, [pc, #92]	; (8004d60 <HAL_UART_MspInit+0xfc>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d06:	4b16      	ldr	r3, [pc, #88]	; (8004d60 <HAL_UART_MspInit+0xfc>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004d0c:	4b14      	ldr	r3, [pc, #80]	; (8004d60 <HAL_UART_MspInit+0xfc>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d12:	4b13      	ldr	r3, [pc, #76]	; (8004d60 <HAL_UART_MspInit+0xfc>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d18:	4b11      	ldr	r3, [pc, #68]	; (8004d60 <HAL_UART_MspInit+0xfc>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004d1e:	4810      	ldr	r0, [pc, #64]	; (8004d60 <HAL_UART_MspInit+0xfc>)
 8004d20:	f000 fe88 	bl	8005a34 <HAL_DMA_Init>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004d2a:	f7ff fd53 	bl	80047d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a0b      	ldr	r2, [pc, #44]	; (8004d60 <HAL_UART_MspInit+0xfc>)
 8004d32:	635a      	str	r2, [r3, #52]	; 0x34
 8004d34:	4a0a      	ldr	r2, [pc, #40]	; (8004d60 <HAL_UART_MspInit+0xfc>)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	2026      	movs	r0, #38	; 0x26
 8004d40:	f000 fe41 	bl	80059c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004d44:	2026      	movs	r0, #38	; 0x26
 8004d46:	f000 fe5a 	bl	80059fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004d4a:	bf00      	nop
 8004d4c:	3728      	adds	r7, #40	; 0x28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	40004400 	.word	0x40004400
 8004d58:	40023800 	.word	0x40023800
 8004d5c:	40020000 	.word	0x40020000
 8004d60:	200008dc 	.word	0x200008dc
 8004d64:	400260a0 	.word	0x400260a0

08004d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d6c:	e7fe      	b.n	8004d6c <NMI_Handler+0x4>

08004d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d72:	e7fe      	b.n	8004d72 <HardFault_Handler+0x4>

08004d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d78:	e7fe      	b.n	8004d78 <MemManage_Handler+0x4>

08004d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d7e:	e7fe      	b.n	8004d7e <BusFault_Handler+0x4>

08004d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d84:	e7fe      	b.n	8004d84 <UsageFault_Handler+0x4>

08004d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d86:	b480      	push	{r7}
 8004d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d8a:	bf00      	nop
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d98:	bf00      	nop
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004da2:	b480      	push	{r7}
 8004da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004da6:	bf00      	nop
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004db4:	f000 f90a 	bl	8004fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004db8:	bf00      	nop
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004dc0:	4802      	ldr	r0, [pc, #8]	; (8004dcc <DMA1_Stream6_IRQHandler+0x10>)
 8004dc2:	f000 ffcf 	bl	8005d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004dc6:	bf00      	nop
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	200008dc 	.word	0x200008dc

08004dd0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8004dd4:	4802      	ldr	r0, [pc, #8]	; (8004de0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004dd6:	f002 fe95 	bl	8007b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004dda:	bf00      	nop
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	200007b4 	.word	0x200007b4

08004de4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004de8:	4802      	ldr	r0, [pc, #8]	; (8004df4 <TIM3_IRQHandler+0x10>)
 8004dea:	f002 fe8b 	bl	8007b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004dee:	bf00      	nop
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20000598 	.word	0x20000598

08004df8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004dfc:	4802      	ldr	r0, [pc, #8]	; (8004e08 <TIM4_IRQHandler+0x10>)
 8004dfe:	f002 fe81 	bl	8007b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004e02:	bf00      	nop
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	2000064c 	.word	0x2000064c

08004e0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004e10:	4802      	ldr	r0, [pc, #8]	; (8004e1c <USART2_IRQHandler+0x10>)
 8004e12:	f004 f92d 	bl	8009070 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004e16:	bf00      	nop
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	20000868 	.word	0x20000868

08004e20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004e24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004e28:	f001 fbc8 	bl	80065bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004e2c:	bf00      	nop
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e34:	4802      	ldr	r0, [pc, #8]	; (8004e40 <DMA2_Stream0_IRQHandler+0x10>)
 8004e36:	f000 ff95 	bl	8005d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004e3a:	bf00      	nop
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000430 	.word	0x20000430

08004e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e4c:	4a14      	ldr	r2, [pc, #80]	; (8004ea0 <_sbrk+0x5c>)
 8004e4e:	4b15      	ldr	r3, [pc, #84]	; (8004ea4 <_sbrk+0x60>)
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e58:	4b13      	ldr	r3, [pc, #76]	; (8004ea8 <_sbrk+0x64>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d102      	bne.n	8004e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e60:	4b11      	ldr	r3, [pc, #68]	; (8004ea8 <_sbrk+0x64>)
 8004e62:	4a12      	ldr	r2, [pc, #72]	; (8004eac <_sbrk+0x68>)
 8004e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e66:	4b10      	ldr	r3, [pc, #64]	; (8004ea8 <_sbrk+0x64>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d207      	bcs.n	8004e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e74:	f005 f94a 	bl	800a10c <__errno>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	220c      	movs	r2, #12
 8004e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e82:	e009      	b.n	8004e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e84:	4b08      	ldr	r3, [pc, #32]	; (8004ea8 <_sbrk+0x64>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e8a:	4b07      	ldr	r3, [pc, #28]	; (8004ea8 <_sbrk+0x64>)
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4413      	add	r3, r2
 8004e92:	4a05      	ldr	r2, [pc, #20]	; (8004ea8 <_sbrk+0x64>)
 8004e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e96:	68fb      	ldr	r3, [r7, #12]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	20020000 	.word	0x20020000
 8004ea4:	00000400 	.word	0x00000400
 8004ea8:	20001340 	.word	0x20001340
 8004eac:	20001358 	.word	0x20001358

08004eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004eb4:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <SystemInit+0x20>)
 8004eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eba:	4a05      	ldr	r2, [pc, #20]	; (8004ed0 <SystemInit+0x20>)
 8004ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ec4:	bf00      	nop
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	e000ed00 	.word	0xe000ed00

08004ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ed8:	480d      	ldr	r0, [pc, #52]	; (8004f10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004eda:	490e      	ldr	r1, [pc, #56]	; (8004f14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004edc:	4a0e      	ldr	r2, [pc, #56]	; (8004f18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ee0:	e002      	b.n	8004ee8 <LoopCopyDataInit>

08004ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ee6:	3304      	adds	r3, #4

08004ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004eec:	d3f9      	bcc.n	8004ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004eee:	4a0b      	ldr	r2, [pc, #44]	; (8004f1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004ef0:	4c0b      	ldr	r4, [pc, #44]	; (8004f20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ef4:	e001      	b.n	8004efa <LoopFillZerobss>

08004ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ef8:	3204      	adds	r2, #4

08004efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004efc:	d3fb      	bcc.n	8004ef6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004efe:	f7ff ffd7 	bl	8004eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f02:	f005 f909 	bl	800a118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f06:	f7fd f917 	bl	8002138 <main>
  bx  lr    
 8004f0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004f0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f14:	200003c8 	.word	0x200003c8
  ldr r2, =_sidata
 8004f18:	0800ca20 	.word	0x0800ca20
  ldr r2, =_sbss
 8004f1c:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 8004f20:	20001358 	.word	0x20001358

08004f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f24:	e7fe      	b.n	8004f24 <ADC_IRQHandler>
	...

08004f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f2c:	4b0e      	ldr	r3, [pc, #56]	; (8004f68 <HAL_Init+0x40>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a0d      	ldr	r2, [pc, #52]	; (8004f68 <HAL_Init+0x40>)
 8004f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f38:	4b0b      	ldr	r3, [pc, #44]	; (8004f68 <HAL_Init+0x40>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a0a      	ldr	r2, [pc, #40]	; (8004f68 <HAL_Init+0x40>)
 8004f3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f44:	4b08      	ldr	r3, [pc, #32]	; (8004f68 <HAL_Init+0x40>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a07      	ldr	r2, [pc, #28]	; (8004f68 <HAL_Init+0x40>)
 8004f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f50:	2003      	movs	r0, #3
 8004f52:	f000 fd2d 	bl	80059b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f56:	2000      	movs	r0, #0
 8004f58:	f000 f808 	bl	8004f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f5c:	f7ff fc84 	bl	8004868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	40023c00 	.word	0x40023c00

08004f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f74:	4b12      	ldr	r3, [pc, #72]	; (8004fc0 <HAL_InitTick+0x54>)
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	4b12      	ldr	r3, [pc, #72]	; (8004fc4 <HAL_InitTick+0x58>)
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fd45 	bl	8005a1a <HAL_SYSTICK_Config>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e00e      	b.n	8004fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b0f      	cmp	r3, #15
 8004f9e:	d80a      	bhi.n	8004fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa8:	f000 fd0d 	bl	80059c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004fac:	4a06      	ldr	r2, [pc, #24]	; (8004fc8 <HAL_InitTick+0x5c>)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	e000      	b.n	8004fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	20000358 	.word	0x20000358
 8004fc4:	20000360 	.word	0x20000360
 8004fc8:	2000035c 	.word	0x2000035c

08004fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004fd0:	4b06      	ldr	r3, [pc, #24]	; (8004fec <HAL_IncTick+0x20>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	4b06      	ldr	r3, [pc, #24]	; (8004ff0 <HAL_IncTick+0x24>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4413      	add	r3, r2
 8004fdc:	4a04      	ldr	r2, [pc, #16]	; (8004ff0 <HAL_IncTick+0x24>)
 8004fde:	6013      	str	r3, [r2, #0]
}
 8004fe0:	bf00      	nop
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	20000360 	.word	0x20000360
 8004ff0:	20001344 	.word	0x20001344

08004ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8004ff8:	4b03      	ldr	r3, [pc, #12]	; (8005008 <HAL_GetTick+0x14>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	20001344 	.word	0x20001344

0800500c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005014:	2300      	movs	r3, #0
 8005016:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e033      	b.n	800508a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	d109      	bne.n	800503e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7ff fc44 	bl	80048b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	f003 0310 	and.w	r3, r3, #16
 8005046:	2b00      	cmp	r3, #0
 8005048:	d118      	bne.n	800507c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005052:	f023 0302 	bic.w	r3, r3, #2
 8005056:	f043 0202 	orr.w	r2, r3, #2
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fa58 	bl	8005514 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	f023 0303 	bic.w	r3, r3, #3
 8005072:	f043 0201 	orr.w	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	641a      	str	r2, [r3, #64]	; 0x40
 800507a:	e001      	b.n	8005080 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005088:	7bfb      	ldrb	r3, [r7, #15]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
	...

08005094 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d101      	bne.n	80050b2 <HAL_ADC_Start_DMA+0x1e>
 80050ae:	2302      	movs	r3, #2
 80050b0:	e0ce      	b.n	8005250 <HAL_ADC_Start_DMA+0x1bc>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d018      	beq.n	80050fa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689a      	ldr	r2, [r3, #8]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0201 	orr.w	r2, r2, #1
 80050d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80050d8:	4b5f      	ldr	r3, [pc, #380]	; (8005258 <HAL_ADC_Start_DMA+0x1c4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a5f      	ldr	r2, [pc, #380]	; (800525c <HAL_ADC_Start_DMA+0x1c8>)
 80050de:	fba2 2303 	umull	r2, r3, r2, r3
 80050e2:	0c9a      	lsrs	r2, r3, #18
 80050e4:	4613      	mov	r3, r2
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	4413      	add	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80050ec:	e002      	b.n	80050f4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	3b01      	subs	r3, #1
 80050f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1f9      	bne.n	80050ee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005108:	d107      	bne.n	800511a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005118:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b01      	cmp	r3, #1
 8005126:	f040 8086 	bne.w	8005236 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005132:	f023 0301 	bic.w	r3, r3, #1
 8005136:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005148:	2b00      	cmp	r3, #0
 800514a:	d007      	beq.n	800515c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005150:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005154:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005168:	d106      	bne.n	8005178 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516e:	f023 0206 	bic.w	r2, r3, #6
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	645a      	str	r2, [r3, #68]	; 0x44
 8005176:	e002      	b.n	800517e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005186:	4b36      	ldr	r3, [pc, #216]	; (8005260 <HAL_ADC_Start_DMA+0x1cc>)
 8005188:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518e:	4a35      	ldr	r2, [pc, #212]	; (8005264 <HAL_ADC_Start_DMA+0x1d0>)
 8005190:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005196:	4a34      	ldr	r2, [pc, #208]	; (8005268 <HAL_ADC_Start_DMA+0x1d4>)
 8005198:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519e:	4a33      	ldr	r2, [pc, #204]	; (800526c <HAL_ADC_Start_DMA+0x1d8>)
 80051a0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80051aa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80051ba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051ca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	334c      	adds	r3, #76	; 0x4c
 80051d6:	4619      	mov	r1, r3
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f000 fcd8 	bl	8005b90 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f003 031f 	and.w	r3, r3, #31
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10f      	bne.n	800520c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d129      	bne.n	800524e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005208:	609a      	str	r2, [r3, #8]
 800520a:	e020      	b.n	800524e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a17      	ldr	r2, [pc, #92]	; (8005270 <HAL_ADC_Start_DMA+0x1dc>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d11b      	bne.n	800524e <HAL_ADC_Start_DMA+0x1ba>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d114      	bne.n	800524e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689a      	ldr	r2, [r3, #8]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005232:	609a      	str	r2, [r3, #8]
 8005234:	e00b      	b.n	800524e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	f043 0210 	orr.w	r2, r3, #16
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005246:	f043 0201 	orr.w	r2, r3, #1
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	20000358 	.word	0x20000358
 800525c:	431bde83 	.word	0x431bde83
 8005260:	40012300 	.word	0x40012300
 8005264:	0800570d 	.word	0x0800570d
 8005268:	080057c7 	.word	0x080057c7
 800526c:	080057e3 	.word	0x080057e3
 8005270:	40012000 	.word	0x40012000

08005274 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <HAL_ADC_ConfigChannel+0x1c>
 80052c8:	2302      	movs	r3, #2
 80052ca:	e113      	b.n	80054f4 <HAL_ADC_ConfigChannel+0x244>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b09      	cmp	r3, #9
 80052da:	d925      	bls.n	8005328 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68d9      	ldr	r1, [r3, #12]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	4613      	mov	r3, r2
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	4413      	add	r3, r2
 80052f0:	3b1e      	subs	r3, #30
 80052f2:	2207      	movs	r2, #7
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	43da      	mvns	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	400a      	ands	r2, r1
 8005300:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68d9      	ldr	r1, [r3, #12]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	b29b      	uxth	r3, r3
 8005312:	4618      	mov	r0, r3
 8005314:	4603      	mov	r3, r0
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	4403      	add	r3, r0
 800531a:	3b1e      	subs	r3, #30
 800531c:	409a      	lsls	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	60da      	str	r2, [r3, #12]
 8005326:	e022      	b.n	800536e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6919      	ldr	r1, [r3, #16]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	b29b      	uxth	r3, r3
 8005334:	461a      	mov	r2, r3
 8005336:	4613      	mov	r3, r2
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	4413      	add	r3, r2
 800533c:	2207      	movs	r2, #7
 800533e:	fa02 f303 	lsl.w	r3, r2, r3
 8005342:	43da      	mvns	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	400a      	ands	r2, r1
 800534a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6919      	ldr	r1, [r3, #16]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	b29b      	uxth	r3, r3
 800535c:	4618      	mov	r0, r3
 800535e:	4603      	mov	r3, r0
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	4403      	add	r3, r0
 8005364:	409a      	lsls	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	2b06      	cmp	r3, #6
 8005374:	d824      	bhi.n	80053c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	3b05      	subs	r3, #5
 8005388:	221f      	movs	r2, #31
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	43da      	mvns	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	400a      	ands	r2, r1
 8005396:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	4618      	mov	r0, r3
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	4613      	mov	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	3b05      	subs	r3, #5
 80053b2:	fa00 f203 	lsl.w	r2, r0, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	635a      	str	r2, [r3, #52]	; 0x34
 80053be:	e04c      	b.n	800545a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	2b0c      	cmp	r3, #12
 80053c6:	d824      	bhi.n	8005412 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	4613      	mov	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	3b23      	subs	r3, #35	; 0x23
 80053da:	221f      	movs	r2, #31
 80053dc:	fa02 f303 	lsl.w	r3, r2, r3
 80053e0:	43da      	mvns	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	400a      	ands	r2, r1
 80053e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	4618      	mov	r0, r3
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	4613      	mov	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4413      	add	r3, r2
 8005402:	3b23      	subs	r3, #35	; 0x23
 8005404:	fa00 f203 	lsl.w	r2, r0, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	631a      	str	r2, [r3, #48]	; 0x30
 8005410:	e023      	b.n	800545a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	4613      	mov	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	3b41      	subs	r3, #65	; 0x41
 8005424:	221f      	movs	r2, #31
 8005426:	fa02 f303 	lsl.w	r3, r2, r3
 800542a:	43da      	mvns	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	400a      	ands	r2, r1
 8005432:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	b29b      	uxth	r3, r3
 8005440:	4618      	mov	r0, r3
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	4613      	mov	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	3b41      	subs	r3, #65	; 0x41
 800544e:	fa00 f203 	lsl.w	r2, r0, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800545a:	4b29      	ldr	r3, [pc, #164]	; (8005500 <HAL_ADC_ConfigChannel+0x250>)
 800545c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a28      	ldr	r2, [pc, #160]	; (8005504 <HAL_ADC_ConfigChannel+0x254>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d10f      	bne.n	8005488 <HAL_ADC_ConfigChannel+0x1d8>
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b12      	cmp	r3, #18
 800546e:	d10b      	bne.n	8005488 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a1d      	ldr	r2, [pc, #116]	; (8005504 <HAL_ADC_ConfigChannel+0x254>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d12b      	bne.n	80054ea <HAL_ADC_ConfigChannel+0x23a>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a1c      	ldr	r2, [pc, #112]	; (8005508 <HAL_ADC_ConfigChannel+0x258>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d003      	beq.n	80054a4 <HAL_ADC_ConfigChannel+0x1f4>
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b11      	cmp	r3, #17
 80054a2:	d122      	bne.n	80054ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a11      	ldr	r2, [pc, #68]	; (8005508 <HAL_ADC_ConfigChannel+0x258>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d111      	bne.n	80054ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80054c6:	4b11      	ldr	r3, [pc, #68]	; (800550c <HAL_ADC_ConfigChannel+0x25c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a11      	ldr	r2, [pc, #68]	; (8005510 <HAL_ADC_ConfigChannel+0x260>)
 80054cc:	fba2 2303 	umull	r2, r3, r2, r3
 80054d0:	0c9a      	lsrs	r2, r3, #18
 80054d2:	4613      	mov	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80054dc:	e002      	b.n	80054e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1f9      	bne.n	80054de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr
 8005500:	40012300 	.word	0x40012300
 8005504:	40012000 	.word	0x40012000
 8005508:	10000012 	.word	0x10000012
 800550c:	20000358 	.word	0x20000358
 8005510:	431bde83 	.word	0x431bde83

08005514 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800551c:	4b79      	ldr	r3, [pc, #484]	; (8005704 <ADC_Init+0x1f0>)
 800551e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	431a      	orrs	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005548:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6859      	ldr	r1, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	021a      	lsls	r2, r3, #8
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800556c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6859      	ldr	r1, [r3, #4]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800558e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6899      	ldr	r1, [r3, #8]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a6:	4a58      	ldr	r2, [pc, #352]	; (8005708 <ADC_Init+0x1f4>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d022      	beq.n	80055f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80055ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6899      	ldr	r1, [r3, #8]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80055dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6899      	ldr	r1, [r3, #8]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	609a      	str	r2, [r3, #8]
 80055f0:	e00f      	b.n	8005612 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005600:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005610:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0202 	bic.w	r2, r2, #2
 8005620:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6899      	ldr	r1, [r3, #8]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	7e1b      	ldrb	r3, [r3, #24]
 800562c:	005a      	lsls	r2, r3, #1
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 3020 	ldrb.w	r3, [r3, #32]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d01b      	beq.n	8005678 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800564e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800565e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6859      	ldr	r1, [r3, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	3b01      	subs	r3, #1
 800566c:	035a      	lsls	r2, r3, #13
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	605a      	str	r2, [r3, #4]
 8005676:	e007      	b.n	8005688 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005686:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005696:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	051a      	lsls	r2, r3, #20
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80056bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6899      	ldr	r1, [r3, #8]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056ca:	025a      	lsls	r2, r3, #9
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689a      	ldr	r2, [r3, #8]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6899      	ldr	r1, [r3, #8]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	029a      	lsls	r2, r3, #10
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	609a      	str	r2, [r3, #8]
}
 80056f8:	bf00      	nop
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	40012300 	.word	0x40012300
 8005708:	0f000001 	.word	0x0f000001

0800570c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005718:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005722:	2b00      	cmp	r3, #0
 8005724:	d13c      	bne.n	80057a0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d12b      	bne.n	8005798 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005744:	2b00      	cmp	r3, #0
 8005746:	d127      	bne.n	8005798 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005752:	2b00      	cmp	r3, #0
 8005754:	d006      	beq.n	8005764 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005760:	2b00      	cmp	r3, #0
 8005762:	d119      	bne.n	8005798 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0220 	bic.w	r2, r2, #32
 8005772:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005778:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005784:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d105      	bne.n	8005798 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005790:	f043 0201 	orr.w	r2, r3, #1
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f7ff fd6b 	bl	8005274 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800579e:	e00e      	b.n	80057be <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a4:	f003 0310 	and.w	r3, r3, #16
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f7ff fd75 	bl	800529c <HAL_ADC_ErrorCallback>
}
 80057b2:	e004      	b.n	80057be <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	4798      	blx	r3
}
 80057be:	bf00      	nop
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b084      	sub	sp, #16
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f7ff fd57 	bl	8005288 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80057da:	bf00      	nop
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b084      	sub	sp, #16
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ee:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2240      	movs	r2, #64	; 0x40
 80057f4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fa:	f043 0204 	orr.w	r2, r3, #4
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f7ff fd4a 	bl	800529c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005808:	bf00      	nop
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <__NVIC_SetPriorityGrouping>:
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f003 0307 	and.w	r3, r3, #7
 800581e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005820:	4b0c      	ldr	r3, [pc, #48]	; (8005854 <__NVIC_SetPriorityGrouping+0x44>)
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800582c:	4013      	ands	r3, r2
 800582e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800583c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005842:	4a04      	ldr	r2, [pc, #16]	; (8005854 <__NVIC_SetPriorityGrouping+0x44>)
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	60d3      	str	r3, [r2, #12]
}
 8005848:	bf00      	nop
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	e000ed00 	.word	0xe000ed00

08005858 <__NVIC_GetPriorityGrouping>:
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800585c:	4b04      	ldr	r3, [pc, #16]	; (8005870 <__NVIC_GetPriorityGrouping+0x18>)
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	0a1b      	lsrs	r3, r3, #8
 8005862:	f003 0307 	and.w	r3, r3, #7
}
 8005866:	4618      	mov	r0, r3
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	e000ed00 	.word	0xe000ed00

08005874 <__NVIC_EnableIRQ>:
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	4603      	mov	r3, r0
 800587c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800587e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005882:	2b00      	cmp	r3, #0
 8005884:	db0b      	blt.n	800589e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005886:	79fb      	ldrb	r3, [r7, #7]
 8005888:	f003 021f 	and.w	r2, r3, #31
 800588c:	4907      	ldr	r1, [pc, #28]	; (80058ac <__NVIC_EnableIRQ+0x38>)
 800588e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005892:	095b      	lsrs	r3, r3, #5
 8005894:	2001      	movs	r0, #1
 8005896:	fa00 f202 	lsl.w	r2, r0, r2
 800589a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800589e:	bf00      	nop
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	e000e100 	.word	0xe000e100

080058b0 <__NVIC_SetPriority>:
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	4603      	mov	r3, r0
 80058b8:	6039      	str	r1, [r7, #0]
 80058ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	db0a      	blt.n	80058da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	490c      	ldr	r1, [pc, #48]	; (80058fc <__NVIC_SetPriority+0x4c>)
 80058ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ce:	0112      	lsls	r2, r2, #4
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	440b      	add	r3, r1
 80058d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80058d8:	e00a      	b.n	80058f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	4908      	ldr	r1, [pc, #32]	; (8005900 <__NVIC_SetPriority+0x50>)
 80058e0:	79fb      	ldrb	r3, [r7, #7]
 80058e2:	f003 030f 	and.w	r3, r3, #15
 80058e6:	3b04      	subs	r3, #4
 80058e8:	0112      	lsls	r2, r2, #4
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	440b      	add	r3, r1
 80058ee:	761a      	strb	r2, [r3, #24]
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	e000e100 	.word	0xe000e100
 8005900:	e000ed00 	.word	0xe000ed00

08005904 <NVIC_EncodePriority>:
{
 8005904:	b480      	push	{r7}
 8005906:	b089      	sub	sp, #36	; 0x24
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	f1c3 0307 	rsb	r3, r3, #7
 800591e:	2b04      	cmp	r3, #4
 8005920:	bf28      	it	cs
 8005922:	2304      	movcs	r3, #4
 8005924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	3304      	adds	r3, #4
 800592a:	2b06      	cmp	r3, #6
 800592c:	d902      	bls.n	8005934 <NVIC_EncodePriority+0x30>
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	3b03      	subs	r3, #3
 8005932:	e000      	b.n	8005936 <NVIC_EncodePriority+0x32>
 8005934:	2300      	movs	r3, #0
 8005936:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005938:	f04f 32ff 	mov.w	r2, #4294967295
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	fa02 f303 	lsl.w	r3, r2, r3
 8005942:	43da      	mvns	r2, r3
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	401a      	ands	r2, r3
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800594c:	f04f 31ff 	mov.w	r1, #4294967295
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	fa01 f303 	lsl.w	r3, r1, r3
 8005956:	43d9      	mvns	r1, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800595c:	4313      	orrs	r3, r2
}
 800595e:	4618      	mov	r0, r3
 8005960:	3724      	adds	r7, #36	; 0x24
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
	...

0800596c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	3b01      	subs	r3, #1
 8005978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800597c:	d301      	bcc.n	8005982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800597e:	2301      	movs	r3, #1
 8005980:	e00f      	b.n	80059a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005982:	4a0a      	ldr	r2, [pc, #40]	; (80059ac <SysTick_Config+0x40>)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	3b01      	subs	r3, #1
 8005988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800598a:	210f      	movs	r1, #15
 800598c:	f04f 30ff 	mov.w	r0, #4294967295
 8005990:	f7ff ff8e 	bl	80058b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005994:	4b05      	ldr	r3, [pc, #20]	; (80059ac <SysTick_Config+0x40>)
 8005996:	2200      	movs	r2, #0
 8005998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800599a:	4b04      	ldr	r3, [pc, #16]	; (80059ac <SysTick_Config+0x40>)
 800599c:	2207      	movs	r2, #7
 800599e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	e000e010 	.word	0xe000e010

080059b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7ff ff29 	bl	8005810 <__NVIC_SetPriorityGrouping>
}
 80059be:	bf00      	nop
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b086      	sub	sp, #24
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	4603      	mov	r3, r0
 80059ce:	60b9      	str	r1, [r7, #8]
 80059d0:	607a      	str	r2, [r7, #4]
 80059d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059d8:	f7ff ff3e 	bl	8005858 <__NVIC_GetPriorityGrouping>
 80059dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	68b9      	ldr	r1, [r7, #8]
 80059e2:	6978      	ldr	r0, [r7, #20]
 80059e4:	f7ff ff8e 	bl	8005904 <NVIC_EncodePriority>
 80059e8:	4602      	mov	r2, r0
 80059ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059ee:	4611      	mov	r1, r2
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7ff ff5d 	bl	80058b0 <__NVIC_SetPriority>
}
 80059f6:	bf00      	nop
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b082      	sub	sp, #8
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	4603      	mov	r3, r0
 8005a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7ff ff31 	bl	8005874 <__NVIC_EnableIRQ>
}
 8005a12:	bf00      	nop
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b082      	sub	sp, #8
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7ff ffa2 	bl	800596c <SysTick_Config>
 8005a28:	4603      	mov	r3, r0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
	...

08005a34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005a40:	f7ff fad8 	bl	8004ff4 <HAL_GetTick>
 8005a44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e099      	b.n	8005b84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0201 	bic.w	r2, r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a70:	e00f      	b.n	8005a92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a72:	f7ff fabf 	bl	8004ff4 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b05      	cmp	r3, #5
 8005a7e:	d908      	bls.n	8005a92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2220      	movs	r2, #32
 8005a84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2203      	movs	r2, #3
 8005a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e078      	b.n	8005b84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1e8      	bne.n	8005a72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	4b38      	ldr	r3, [pc, #224]	; (8005b8c <HAL_DMA_Init+0x158>)
 8005aac:	4013      	ands	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005abe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005aca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ad6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d107      	bne.n	8005afc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af4:	4313      	orrs	r3, r2
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f023 0307 	bic.w	r3, r3, #7
 8005b12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	d117      	bne.n	8005b56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00e      	beq.n	8005b56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fb0d 	bl	8006158 <DMA_CheckFifoParam>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d008      	beq.n	8005b56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2240      	movs	r2, #64	; 0x40
 8005b48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005b52:	2301      	movs	r3, #1
 8005b54:	e016      	b.n	8005b84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fac4 	bl	80060ec <DMA_CalcBaseAndBitshift>
 8005b64:	4603      	mov	r3, r0
 8005b66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b6c:	223f      	movs	r2, #63	; 0x3f
 8005b6e:	409a      	lsls	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	f010803f 	.word	0xf010803f

08005b90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
 8005b9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d101      	bne.n	8005bb6 <HAL_DMA_Start_IT+0x26>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	e040      	b.n	8005c38 <HAL_DMA_Start_IT+0xa8>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d12f      	bne.n	8005c2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2202      	movs	r2, #2
 8005bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	68b9      	ldr	r1, [r7, #8]
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 fa56 	bl	8006090 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be8:	223f      	movs	r2, #63	; 0x3f
 8005bea:	409a      	lsls	r2, r3
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f042 0216 	orr.w	r2, r2, #22
 8005bfe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d007      	beq.n	8005c18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f042 0208 	orr.w	r2, r2, #8
 8005c16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0201 	orr.w	r2, r2, #1
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	e005      	b.n	8005c36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005c32:	2302      	movs	r3, #2
 8005c34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005c4e:	f7ff f9d1 	bl	8004ff4 <HAL_GetTick>
 8005c52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d008      	beq.n	8005c72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2280      	movs	r2, #128	; 0x80
 8005c64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e052      	b.n	8005d18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0216 	bic.w	r2, r2, #22
 8005c80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	695a      	ldr	r2, [r3, #20]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d103      	bne.n	8005ca2 <HAL_DMA_Abort+0x62>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d007      	beq.n	8005cb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 0208 	bic.w	r2, r2, #8
 8005cb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 0201 	bic.w	r2, r2, #1
 8005cc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cc2:	e013      	b.n	8005cec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005cc4:	f7ff f996 	bl	8004ff4 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b05      	cmp	r3, #5
 8005cd0:	d90c      	bls.n	8005cec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2203      	movs	r2, #3
 8005cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e015      	b.n	8005d18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1e4      	bne.n	8005cc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfe:	223f      	movs	r2, #63	; 0x3f
 8005d00:	409a      	lsls	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d004      	beq.n	8005d3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2280      	movs	r2, #128	; 0x80
 8005d38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e00c      	b.n	8005d58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2205      	movs	r2, #5
 8005d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0201 	bic.w	r2, r2, #1
 8005d54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d70:	4b8e      	ldr	r3, [pc, #568]	; (8005fac <HAL_DMA_IRQHandler+0x248>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a8e      	ldr	r2, [pc, #568]	; (8005fb0 <HAL_DMA_IRQHandler+0x24c>)
 8005d76:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7a:	0a9b      	lsrs	r3, r3, #10
 8005d7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d8e:	2208      	movs	r2, #8
 8005d90:	409a      	lsls	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	4013      	ands	r3, r2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d01a      	beq.n	8005dd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d013      	beq.n	8005dd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0204 	bic.w	r2, r2, #4
 8005db6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dbc:	2208      	movs	r2, #8
 8005dbe:	409a      	lsls	r2, r3
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc8:	f043 0201 	orr.w	r2, r3, #1
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	409a      	lsls	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4013      	ands	r3, r2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d012      	beq.n	8005e06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00b      	beq.n	8005e06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df2:	2201      	movs	r2, #1
 8005df4:	409a      	lsls	r2, r3
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dfe:	f043 0202 	orr.w	r2, r3, #2
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e0a:	2204      	movs	r2, #4
 8005e0c:	409a      	lsls	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4013      	ands	r3, r2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d012      	beq.n	8005e3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00b      	beq.n	8005e3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e28:	2204      	movs	r2, #4
 8005e2a:	409a      	lsls	r2, r3
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e34:	f043 0204 	orr.w	r2, r3, #4
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e40:	2210      	movs	r2, #16
 8005e42:	409a      	lsls	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4013      	ands	r3, r2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d043      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0308 	and.w	r3, r3, #8
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d03c      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e5e:	2210      	movs	r2, #16
 8005e60:	409a      	lsls	r2, r3
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d018      	beq.n	8005ea6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d108      	bne.n	8005e94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d024      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	4798      	blx	r3
 8005e92:	e01f      	b.n	8005ed4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d01b      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	4798      	blx	r3
 8005ea4:	e016      	b.n	8005ed4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d107      	bne.n	8005ec4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0208 	bic.w	r2, r2, #8
 8005ec2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed8:	2220      	movs	r2, #32
 8005eda:	409a      	lsls	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 808f 	beq.w	8006004 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0310 	and.w	r3, r3, #16
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 8087 	beq.w	8006004 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005efa:	2220      	movs	r2, #32
 8005efc:	409a      	lsls	r2, r3
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b05      	cmp	r3, #5
 8005f0c:	d136      	bne.n	8005f7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0216 	bic.w	r2, r2, #22
 8005f1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	695a      	ldr	r2, [r3, #20]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d103      	bne.n	8005f3e <HAL_DMA_IRQHandler+0x1da>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d007      	beq.n	8005f4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 0208 	bic.w	r2, r2, #8
 8005f4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f52:	223f      	movs	r2, #63	; 0x3f
 8005f54:	409a      	lsls	r2, r3
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d07e      	beq.n	8006070 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	4798      	blx	r3
        }
        return;
 8005f7a:	e079      	b.n	8006070 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d01d      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10d      	bne.n	8005fb4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d031      	beq.n	8006004 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	4798      	blx	r3
 8005fa8:	e02c      	b.n	8006004 <HAL_DMA_IRQHandler+0x2a0>
 8005faa:	bf00      	nop
 8005fac:	20000358 	.word	0x20000358
 8005fb0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d023      	beq.n	8006004 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	4798      	blx	r3
 8005fc4:	e01e      	b.n	8006004 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10f      	bne.n	8005ff4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0210 	bic.w	r2, r2, #16
 8005fe2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006008:	2b00      	cmp	r3, #0
 800600a:	d032      	beq.n	8006072 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	2b00      	cmp	r3, #0
 8006016:	d022      	beq.n	800605e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2205      	movs	r2, #5
 800601c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0201 	bic.w	r2, r2, #1
 800602e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	3301      	adds	r3, #1
 8006034:	60bb      	str	r3, [r7, #8]
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	429a      	cmp	r2, r3
 800603a:	d307      	bcc.n	800604c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1f2      	bne.n	8006030 <HAL_DMA_IRQHandler+0x2cc>
 800604a:	e000      	b.n	800604e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800604c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006062:	2b00      	cmp	r3, #0
 8006064:	d005      	beq.n	8006072 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	4798      	blx	r3
 800606e:	e000      	b.n	8006072 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006070:	bf00      	nop
    }
  }
}
 8006072:	3718      	adds	r7, #24
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006084:	4618      	mov	r0, r3
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
 800609c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	2b40      	cmp	r3, #64	; 0x40
 80060bc:	d108      	bne.n	80060d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80060ce:	e007      	b.n	80060e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	60da      	str	r2, [r3, #12]
}
 80060e0:	bf00      	nop
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	3b10      	subs	r3, #16
 80060fc:	4a14      	ldr	r2, [pc, #80]	; (8006150 <DMA_CalcBaseAndBitshift+0x64>)
 80060fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006102:	091b      	lsrs	r3, r3, #4
 8006104:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006106:	4a13      	ldr	r2, [pc, #76]	; (8006154 <DMA_CalcBaseAndBitshift+0x68>)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4413      	add	r3, r2
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2b03      	cmp	r3, #3
 8006118:	d909      	bls.n	800612e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006122:	f023 0303 	bic.w	r3, r3, #3
 8006126:	1d1a      	adds	r2, r3, #4
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	659a      	str	r2, [r3, #88]	; 0x58
 800612c:	e007      	b.n	800613e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006136:	f023 0303 	bic.w	r3, r3, #3
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006142:	4618      	mov	r0, r3
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	aaaaaaab 	.word	0xaaaaaaab
 8006154:	0800c7f8 	.word	0x0800c7f8

08006158 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006160:	2300      	movs	r3, #0
 8006162:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006168:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d11f      	bne.n	80061b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b03      	cmp	r3, #3
 8006176:	d856      	bhi.n	8006226 <DMA_CheckFifoParam+0xce>
 8006178:	a201      	add	r2, pc, #4	; (adr r2, 8006180 <DMA_CheckFifoParam+0x28>)
 800617a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617e:	bf00      	nop
 8006180:	08006191 	.word	0x08006191
 8006184:	080061a3 	.word	0x080061a3
 8006188:	08006191 	.word	0x08006191
 800618c:	08006227 	.word	0x08006227
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006194:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d046      	beq.n	800622a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061a0:	e043      	b.n	800622a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061aa:	d140      	bne.n	800622e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061b0:	e03d      	b.n	800622e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061ba:	d121      	bne.n	8006200 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d837      	bhi.n	8006232 <DMA_CheckFifoParam+0xda>
 80061c2:	a201      	add	r2, pc, #4	; (adr r2, 80061c8 <DMA_CheckFifoParam+0x70>)
 80061c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c8:	080061d9 	.word	0x080061d9
 80061cc:	080061df 	.word	0x080061df
 80061d0:	080061d9 	.word	0x080061d9
 80061d4:	080061f1 	.word	0x080061f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	73fb      	strb	r3, [r7, #15]
      break;
 80061dc:	e030      	b.n	8006240 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d025      	beq.n	8006236 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061ee:	e022      	b.n	8006236 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061f8:	d11f      	bne.n	800623a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80061fe:	e01c      	b.n	800623a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2b02      	cmp	r3, #2
 8006204:	d903      	bls.n	800620e <DMA_CheckFifoParam+0xb6>
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	2b03      	cmp	r3, #3
 800620a:	d003      	beq.n	8006214 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800620c:	e018      	b.n	8006240 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	73fb      	strb	r3, [r7, #15]
      break;
 8006212:	e015      	b.n	8006240 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006218:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00e      	beq.n	800623e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	73fb      	strb	r3, [r7, #15]
      break;
 8006224:	e00b      	b.n	800623e <DMA_CheckFifoParam+0xe6>
      break;
 8006226:	bf00      	nop
 8006228:	e00a      	b.n	8006240 <DMA_CheckFifoParam+0xe8>
      break;
 800622a:	bf00      	nop
 800622c:	e008      	b.n	8006240 <DMA_CheckFifoParam+0xe8>
      break;
 800622e:	bf00      	nop
 8006230:	e006      	b.n	8006240 <DMA_CheckFifoParam+0xe8>
      break;
 8006232:	bf00      	nop
 8006234:	e004      	b.n	8006240 <DMA_CheckFifoParam+0xe8>
      break;
 8006236:	bf00      	nop
 8006238:	e002      	b.n	8006240 <DMA_CheckFifoParam+0xe8>
      break;   
 800623a:	bf00      	nop
 800623c:	e000      	b.n	8006240 <DMA_CheckFifoParam+0xe8>
      break;
 800623e:	bf00      	nop
    }
  } 
  
  return status; 
 8006240:	7bfb      	ldrb	r3, [r7, #15]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop

08006250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006250:	b480      	push	{r7}
 8006252:	b089      	sub	sp, #36	; 0x24
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800625a:	2300      	movs	r3, #0
 800625c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800625e:	2300      	movs	r3, #0
 8006260:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006262:	2300      	movs	r3, #0
 8006264:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006266:	2300      	movs	r3, #0
 8006268:	61fb      	str	r3, [r7, #28]
 800626a:	e159      	b.n	8006520 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800626c:	2201      	movs	r2, #1
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	fa02 f303 	lsl.w	r3, r2, r3
 8006274:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	4013      	ands	r3, r2
 800627e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	429a      	cmp	r2, r3
 8006286:	f040 8148 	bne.w	800651a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f003 0303 	and.w	r3, r3, #3
 8006292:	2b01      	cmp	r3, #1
 8006294:	d005      	beq.n	80062a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d130      	bne.n	8006304 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	005b      	lsls	r3, r3, #1
 80062ac:	2203      	movs	r2, #3
 80062ae:	fa02 f303 	lsl.w	r3, r2, r3
 80062b2:	43db      	mvns	r3, r3
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	4013      	ands	r3, r2
 80062b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	68da      	ldr	r2, [r3, #12]
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	005b      	lsls	r3, r3, #1
 80062c2:	fa02 f303 	lsl.w	r3, r2, r3
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80062d8:	2201      	movs	r2, #1
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	fa02 f303 	lsl.w	r3, r2, r3
 80062e0:	43db      	mvns	r3, r3
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	4013      	ands	r3, r2
 80062e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	091b      	lsrs	r3, r3, #4
 80062ee:	f003 0201 	and.w	r2, r3, #1
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	fa02 f303 	lsl.w	r3, r2, r3
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f003 0303 	and.w	r3, r3, #3
 800630c:	2b03      	cmp	r3, #3
 800630e:	d017      	beq.n	8006340 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	2203      	movs	r2, #3
 800631c:	fa02 f303 	lsl.w	r3, r2, r3
 8006320:	43db      	mvns	r3, r3
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	4013      	ands	r3, r2
 8006326:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	689a      	ldr	r2, [r3, #8]
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	005b      	lsls	r3, r3, #1
 8006330:	fa02 f303 	lsl.w	r3, r2, r3
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	4313      	orrs	r3, r2
 8006338:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f003 0303 	and.w	r3, r3, #3
 8006348:	2b02      	cmp	r3, #2
 800634a:	d123      	bne.n	8006394 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	08da      	lsrs	r2, r3, #3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	3208      	adds	r2, #8
 8006354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006358:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	f003 0307 	and.w	r3, r3, #7
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	220f      	movs	r2, #15
 8006364:	fa02 f303 	lsl.w	r3, r2, r3
 8006368:	43db      	mvns	r3, r3
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	4013      	ands	r3, r2
 800636e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	691a      	ldr	r2, [r3, #16]
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	f003 0307 	and.w	r3, r3, #7
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	fa02 f303 	lsl.w	r3, r2, r3
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	4313      	orrs	r3, r2
 8006384:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	08da      	lsrs	r2, r3, #3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	3208      	adds	r2, #8
 800638e:	69b9      	ldr	r1, [r7, #24]
 8006390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	005b      	lsls	r3, r3, #1
 800639e:	2203      	movs	r2, #3
 80063a0:	fa02 f303 	lsl.w	r3, r2, r3
 80063a4:	43db      	mvns	r3, r3
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	4013      	ands	r3, r2
 80063aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f003 0203 	and.w	r2, r3, #3
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	005b      	lsls	r3, r3, #1
 80063b8:	fa02 f303 	lsl.w	r3, r2, r3
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	4313      	orrs	r3, r2
 80063c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 80a2 	beq.w	800651a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063d6:	2300      	movs	r3, #0
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	4b57      	ldr	r3, [pc, #348]	; (8006538 <HAL_GPIO_Init+0x2e8>)
 80063dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063de:	4a56      	ldr	r2, [pc, #344]	; (8006538 <HAL_GPIO_Init+0x2e8>)
 80063e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063e4:	6453      	str	r3, [r2, #68]	; 0x44
 80063e6:	4b54      	ldr	r3, [pc, #336]	; (8006538 <HAL_GPIO_Init+0x2e8>)
 80063e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063ee:	60fb      	str	r3, [r7, #12]
 80063f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063f2:	4a52      	ldr	r2, [pc, #328]	; (800653c <HAL_GPIO_Init+0x2ec>)
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	089b      	lsrs	r3, r3, #2
 80063f8:	3302      	adds	r3, #2
 80063fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	220f      	movs	r2, #15
 800640a:	fa02 f303 	lsl.w	r3, r2, r3
 800640e:	43db      	mvns	r3, r3
 8006410:	69ba      	ldr	r2, [r7, #24]
 8006412:	4013      	ands	r3, r2
 8006414:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a49      	ldr	r2, [pc, #292]	; (8006540 <HAL_GPIO_Init+0x2f0>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d019      	beq.n	8006452 <HAL_GPIO_Init+0x202>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a48      	ldr	r2, [pc, #288]	; (8006544 <HAL_GPIO_Init+0x2f4>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d013      	beq.n	800644e <HAL_GPIO_Init+0x1fe>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a47      	ldr	r2, [pc, #284]	; (8006548 <HAL_GPIO_Init+0x2f8>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d00d      	beq.n	800644a <HAL_GPIO_Init+0x1fa>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a46      	ldr	r2, [pc, #280]	; (800654c <HAL_GPIO_Init+0x2fc>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d007      	beq.n	8006446 <HAL_GPIO_Init+0x1f6>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a45      	ldr	r2, [pc, #276]	; (8006550 <HAL_GPIO_Init+0x300>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d101      	bne.n	8006442 <HAL_GPIO_Init+0x1f2>
 800643e:	2304      	movs	r3, #4
 8006440:	e008      	b.n	8006454 <HAL_GPIO_Init+0x204>
 8006442:	2307      	movs	r3, #7
 8006444:	e006      	b.n	8006454 <HAL_GPIO_Init+0x204>
 8006446:	2303      	movs	r3, #3
 8006448:	e004      	b.n	8006454 <HAL_GPIO_Init+0x204>
 800644a:	2302      	movs	r3, #2
 800644c:	e002      	b.n	8006454 <HAL_GPIO_Init+0x204>
 800644e:	2301      	movs	r3, #1
 8006450:	e000      	b.n	8006454 <HAL_GPIO_Init+0x204>
 8006452:	2300      	movs	r3, #0
 8006454:	69fa      	ldr	r2, [r7, #28]
 8006456:	f002 0203 	and.w	r2, r2, #3
 800645a:	0092      	lsls	r2, r2, #2
 800645c:	4093      	lsls	r3, r2
 800645e:	69ba      	ldr	r2, [r7, #24]
 8006460:	4313      	orrs	r3, r2
 8006462:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006464:	4935      	ldr	r1, [pc, #212]	; (800653c <HAL_GPIO_Init+0x2ec>)
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	089b      	lsrs	r3, r3, #2
 800646a:	3302      	adds	r3, #2
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006472:	4b38      	ldr	r3, [pc, #224]	; (8006554 <HAL_GPIO_Init+0x304>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	43db      	mvns	r3, r3
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	4013      	ands	r3, r2
 8006480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800648e:	69ba      	ldr	r2, [r7, #24]
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	4313      	orrs	r3, r2
 8006494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006496:	4a2f      	ldr	r2, [pc, #188]	; (8006554 <HAL_GPIO_Init+0x304>)
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800649c:	4b2d      	ldr	r3, [pc, #180]	; (8006554 <HAL_GPIO_Init+0x304>)
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	43db      	mvns	r3, r3
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	4013      	ands	r3, r2
 80064aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d003      	beq.n	80064c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	4313      	orrs	r3, r2
 80064be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80064c0:	4a24      	ldr	r2, [pc, #144]	; (8006554 <HAL_GPIO_Init+0x304>)
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80064c6:	4b23      	ldr	r3, [pc, #140]	; (8006554 <HAL_GPIO_Init+0x304>)
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	43db      	mvns	r3, r3
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	4013      	ands	r3, r2
 80064d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80064ea:	4a1a      	ldr	r2, [pc, #104]	; (8006554 <HAL_GPIO_Init+0x304>)
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80064f0:	4b18      	ldr	r3, [pc, #96]	; (8006554 <HAL_GPIO_Init+0x304>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	43db      	mvns	r3, r3
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	4013      	ands	r3, r2
 80064fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	4313      	orrs	r3, r2
 8006512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006514:	4a0f      	ldr	r2, [pc, #60]	; (8006554 <HAL_GPIO_Init+0x304>)
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	3301      	adds	r3, #1
 800651e:	61fb      	str	r3, [r7, #28]
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	2b0f      	cmp	r3, #15
 8006524:	f67f aea2 	bls.w	800626c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006528:	bf00      	nop
 800652a:	bf00      	nop
 800652c:	3724      	adds	r7, #36	; 0x24
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	40023800 	.word	0x40023800
 800653c:	40013800 	.word	0x40013800
 8006540:	40020000 	.word	0x40020000
 8006544:	40020400 	.word	0x40020400
 8006548:	40020800 	.word	0x40020800
 800654c:	40020c00 	.word	0x40020c00
 8006550:	40021000 	.word	0x40021000
 8006554:	40013c00 	.word	0x40013c00

08006558 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691a      	ldr	r2, [r3, #16]
 8006568:	887b      	ldrh	r3, [r7, #2]
 800656a:	4013      	ands	r3, r2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006570:	2301      	movs	r3, #1
 8006572:	73fb      	strb	r3, [r7, #15]
 8006574:	e001      	b.n	800657a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006576:	2300      	movs	r3, #0
 8006578:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800657a:	7bfb      	ldrb	r3, [r7, #15]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	460b      	mov	r3, r1
 8006592:	807b      	strh	r3, [r7, #2]
 8006594:	4613      	mov	r3, r2
 8006596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006598:	787b      	ldrb	r3, [r7, #1]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800659e:	887a      	ldrh	r2, [r7, #2]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80065a4:	e003      	b.n	80065ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80065a6:	887b      	ldrh	r3, [r7, #2]
 80065a8:	041a      	lsls	r2, r3, #16
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	619a      	str	r2, [r3, #24]
}
 80065ae:	bf00      	nop
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
	...

080065bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	4603      	mov	r3, r0
 80065c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80065c6:	4b08      	ldr	r3, [pc, #32]	; (80065e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065c8:	695a      	ldr	r2, [r3, #20]
 80065ca:	88fb      	ldrh	r3, [r7, #6]
 80065cc:	4013      	ands	r3, r2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d006      	beq.n	80065e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80065d2:	4a05      	ldr	r2, [pc, #20]	; (80065e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065d4:	88fb      	ldrh	r3, [r7, #6]
 80065d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80065d8:	88fb      	ldrh	r3, [r7, #6]
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 f806 	bl	80065ec <HAL_GPIO_EXTI_Callback>
  }
}
 80065e0:	bf00      	nop
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	40013c00 	.word	0x40013c00

080065ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	4603      	mov	r3, r0
 80065f4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80065f6:	bf00      	nop
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
	...

08006604 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e12b      	b.n	800686e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d106      	bne.n	8006630 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7fe f9d8 	bl	80049e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2224      	movs	r2, #36	; 0x24
 8006634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0201 	bic.w	r2, r2, #1
 8006646:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006656:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006666:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006668:	f000 fd80 	bl	800716c <HAL_RCC_GetPCLK1Freq>
 800666c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	4a81      	ldr	r2, [pc, #516]	; (8006878 <HAL_I2C_Init+0x274>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d807      	bhi.n	8006688 <HAL_I2C_Init+0x84>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4a80      	ldr	r2, [pc, #512]	; (800687c <HAL_I2C_Init+0x278>)
 800667c:	4293      	cmp	r3, r2
 800667e:	bf94      	ite	ls
 8006680:	2301      	movls	r3, #1
 8006682:	2300      	movhi	r3, #0
 8006684:	b2db      	uxtb	r3, r3
 8006686:	e006      	b.n	8006696 <HAL_I2C_Init+0x92>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4a7d      	ldr	r2, [pc, #500]	; (8006880 <HAL_I2C_Init+0x27c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	bf94      	ite	ls
 8006690:	2301      	movls	r3, #1
 8006692:	2300      	movhi	r3, #0
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e0e7      	b.n	800686e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	4a78      	ldr	r2, [pc, #480]	; (8006884 <HAL_I2C_Init+0x280>)
 80066a2:	fba2 2303 	umull	r2, r3, r2, r3
 80066a6:	0c9b      	lsrs	r3, r3, #18
 80066a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	4a6a      	ldr	r2, [pc, #424]	; (8006878 <HAL_I2C_Init+0x274>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d802      	bhi.n	80066d8 <HAL_I2C_Init+0xd4>
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	3301      	adds	r3, #1
 80066d6:	e009      	b.n	80066ec <HAL_I2C_Init+0xe8>
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80066de:	fb02 f303 	mul.w	r3, r2, r3
 80066e2:	4a69      	ldr	r2, [pc, #420]	; (8006888 <HAL_I2C_Init+0x284>)
 80066e4:	fba2 2303 	umull	r2, r3, r2, r3
 80066e8:	099b      	lsrs	r3, r3, #6
 80066ea:	3301      	adds	r3, #1
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6812      	ldr	r2, [r2, #0]
 80066f0:	430b      	orrs	r3, r1
 80066f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80066fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	495c      	ldr	r1, [pc, #368]	; (8006878 <HAL_I2C_Init+0x274>)
 8006708:	428b      	cmp	r3, r1
 800670a:	d819      	bhi.n	8006740 <HAL_I2C_Init+0x13c>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	1e59      	subs	r1, r3, #1
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	fbb1 f3f3 	udiv	r3, r1, r3
 800671a:	1c59      	adds	r1, r3, #1
 800671c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006720:	400b      	ands	r3, r1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00a      	beq.n	800673c <HAL_I2C_Init+0x138>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	1e59      	subs	r1, r3, #1
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	005b      	lsls	r3, r3, #1
 8006730:	fbb1 f3f3 	udiv	r3, r1, r3
 8006734:	3301      	adds	r3, #1
 8006736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800673a:	e051      	b.n	80067e0 <HAL_I2C_Init+0x1dc>
 800673c:	2304      	movs	r3, #4
 800673e:	e04f      	b.n	80067e0 <HAL_I2C_Init+0x1dc>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d111      	bne.n	800676c <HAL_I2C_Init+0x168>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	1e58      	subs	r0, r3, #1
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6859      	ldr	r1, [r3, #4]
 8006750:	460b      	mov	r3, r1
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	440b      	add	r3, r1
 8006756:	fbb0 f3f3 	udiv	r3, r0, r3
 800675a:	3301      	adds	r3, #1
 800675c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006760:	2b00      	cmp	r3, #0
 8006762:	bf0c      	ite	eq
 8006764:	2301      	moveq	r3, #1
 8006766:	2300      	movne	r3, #0
 8006768:	b2db      	uxtb	r3, r3
 800676a:	e012      	b.n	8006792 <HAL_I2C_Init+0x18e>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	1e58      	subs	r0, r3, #1
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6859      	ldr	r1, [r3, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	440b      	add	r3, r1
 800677a:	0099      	lsls	r1, r3, #2
 800677c:	440b      	add	r3, r1
 800677e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006782:	3301      	adds	r3, #1
 8006784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006788:	2b00      	cmp	r3, #0
 800678a:	bf0c      	ite	eq
 800678c:	2301      	moveq	r3, #1
 800678e:	2300      	movne	r3, #0
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <HAL_I2C_Init+0x196>
 8006796:	2301      	movs	r3, #1
 8006798:	e022      	b.n	80067e0 <HAL_I2C_Init+0x1dc>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10e      	bne.n	80067c0 <HAL_I2C_Init+0x1bc>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	1e58      	subs	r0, r3, #1
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6859      	ldr	r1, [r3, #4]
 80067aa:	460b      	mov	r3, r1
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	440b      	add	r3, r1
 80067b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80067b4:	3301      	adds	r3, #1
 80067b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067be:	e00f      	b.n	80067e0 <HAL_I2C_Init+0x1dc>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	1e58      	subs	r0, r3, #1
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6859      	ldr	r1, [r3, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	440b      	add	r3, r1
 80067ce:	0099      	lsls	r1, r3, #2
 80067d0:	440b      	add	r3, r1
 80067d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80067d6:	3301      	adds	r3, #1
 80067d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067e0:	6879      	ldr	r1, [r7, #4]
 80067e2:	6809      	ldr	r1, [r1, #0]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	69da      	ldr	r2, [r3, #28]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	431a      	orrs	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800680e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	6911      	ldr	r1, [r2, #16]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	68d2      	ldr	r2, [r2, #12]
 800681a:	4311      	orrs	r1, r2
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	6812      	ldr	r2, [r2, #0]
 8006820:	430b      	orrs	r3, r1
 8006822:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	695a      	ldr	r2, [r3, #20]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	431a      	orrs	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	430a      	orrs	r2, r1
 800683e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 0201 	orr.w	r2, r2, #1
 800684e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2220      	movs	r2, #32
 800685a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	000186a0 	.word	0x000186a0
 800687c:	001e847f 	.word	0x001e847f
 8006880:	003d08ff 	.word	0x003d08ff
 8006884:	431bde83 	.word	0x431bde83
 8006888:	10624dd3 	.word	0x10624dd3

0800688c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e267      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d075      	beq.n	8006996 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068aa:	4b88      	ldr	r3, [pc, #544]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f003 030c 	and.w	r3, r3, #12
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	d00c      	beq.n	80068d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068b6:	4b85      	ldr	r3, [pc, #532]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068be:	2b08      	cmp	r3, #8
 80068c0:	d112      	bne.n	80068e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068c2:	4b82      	ldr	r3, [pc, #520]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068ce:	d10b      	bne.n	80068e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d0:	4b7e      	ldr	r3, [pc, #504]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d05b      	beq.n	8006994 <HAL_RCC_OscConfig+0x108>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d157      	bne.n	8006994 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e242      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f0:	d106      	bne.n	8006900 <HAL_RCC_OscConfig+0x74>
 80068f2:	4b76      	ldr	r3, [pc, #472]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a75      	ldr	r2, [pc, #468]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 80068f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068fc:	6013      	str	r3, [r2, #0]
 80068fe:	e01d      	b.n	800693c <HAL_RCC_OscConfig+0xb0>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006908:	d10c      	bne.n	8006924 <HAL_RCC_OscConfig+0x98>
 800690a:	4b70      	ldr	r3, [pc, #448]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a6f      	ldr	r2, [pc, #444]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 8006910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006914:	6013      	str	r3, [r2, #0]
 8006916:	4b6d      	ldr	r3, [pc, #436]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a6c      	ldr	r2, [pc, #432]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 800691c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	e00b      	b.n	800693c <HAL_RCC_OscConfig+0xb0>
 8006924:	4b69      	ldr	r3, [pc, #420]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a68      	ldr	r2, [pc, #416]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 800692a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800692e:	6013      	str	r3, [r2, #0]
 8006930:	4b66      	ldr	r3, [pc, #408]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a65      	ldr	r2, [pc, #404]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 8006936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800693a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d013      	beq.n	800696c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006944:	f7fe fb56 	bl	8004ff4 <HAL_GetTick>
 8006948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800694a:	e008      	b.n	800695e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800694c:	f7fe fb52 	bl	8004ff4 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b64      	cmp	r3, #100	; 0x64
 8006958:	d901      	bls.n	800695e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e207      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800695e:	4b5b      	ldr	r3, [pc, #364]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0f0      	beq.n	800694c <HAL_RCC_OscConfig+0xc0>
 800696a:	e014      	b.n	8006996 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800696c:	f7fe fb42 	bl	8004ff4 <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006972:	e008      	b.n	8006986 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006974:	f7fe fb3e 	bl	8004ff4 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b64      	cmp	r3, #100	; 0x64
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e1f3      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006986:	4b51      	ldr	r3, [pc, #324]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1f0      	bne.n	8006974 <HAL_RCC_OscConfig+0xe8>
 8006992:	e000      	b.n	8006996 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0302 	and.w	r3, r3, #2
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d063      	beq.n	8006a6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069a2:	4b4a      	ldr	r3, [pc, #296]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f003 030c 	and.w	r3, r3, #12
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00b      	beq.n	80069c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069ae:	4b47      	ldr	r3, [pc, #284]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069b6:	2b08      	cmp	r3, #8
 80069b8:	d11c      	bne.n	80069f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069ba:	4b44      	ldr	r3, [pc, #272]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d116      	bne.n	80069f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069c6:	4b41      	ldr	r3, [pc, #260]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d005      	beq.n	80069de <HAL_RCC_OscConfig+0x152>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d001      	beq.n	80069de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e1c7      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069de:	4b3b      	ldr	r3, [pc, #236]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	00db      	lsls	r3, r3, #3
 80069ec:	4937      	ldr	r1, [pc, #220]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069f2:	e03a      	b.n	8006a6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d020      	beq.n	8006a3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069fc:	4b34      	ldr	r3, [pc, #208]	; (8006ad0 <HAL_RCC_OscConfig+0x244>)
 80069fe:	2201      	movs	r2, #1
 8006a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a02:	f7fe faf7 	bl	8004ff4 <HAL_GetTick>
 8006a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a08:	e008      	b.n	8006a1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a0a:	f7fe faf3 	bl	8004ff4 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d901      	bls.n	8006a1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e1a8      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a1c:	4b2b      	ldr	r3, [pc, #172]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d0f0      	beq.n	8006a0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a28:	4b28      	ldr	r3, [pc, #160]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	4925      	ldr	r1, [pc, #148]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	600b      	str	r3, [r1, #0]
 8006a3c:	e015      	b.n	8006a6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a3e:	4b24      	ldr	r3, [pc, #144]	; (8006ad0 <HAL_RCC_OscConfig+0x244>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a44:	f7fe fad6 	bl	8004ff4 <HAL_GetTick>
 8006a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a4a:	e008      	b.n	8006a5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a4c:	f7fe fad2 	bl	8004ff4 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d901      	bls.n	8006a5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e187      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a5e:	4b1b      	ldr	r3, [pc, #108]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0302 	and.w	r3, r3, #2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1f0      	bne.n	8006a4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0308 	and.w	r3, r3, #8
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d036      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d016      	beq.n	8006aac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a7e:	4b15      	ldr	r3, [pc, #84]	; (8006ad4 <HAL_RCC_OscConfig+0x248>)
 8006a80:	2201      	movs	r2, #1
 8006a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a84:	f7fe fab6 	bl	8004ff4 <HAL_GetTick>
 8006a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a8a:	e008      	b.n	8006a9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a8c:	f7fe fab2 	bl	8004ff4 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e167      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a9e:	4b0b      	ldr	r3, [pc, #44]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 8006aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d0f0      	beq.n	8006a8c <HAL_RCC_OscConfig+0x200>
 8006aaa:	e01b      	b.n	8006ae4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006aac:	4b09      	ldr	r3, [pc, #36]	; (8006ad4 <HAL_RCC_OscConfig+0x248>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ab2:	f7fe fa9f 	bl	8004ff4 <HAL_GetTick>
 8006ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ab8:	e00e      	b.n	8006ad8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006aba:	f7fe fa9b 	bl	8004ff4 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d907      	bls.n	8006ad8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e150      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
 8006acc:	40023800 	.word	0x40023800
 8006ad0:	42470000 	.word	0x42470000
 8006ad4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ad8:	4b88      	ldr	r3, [pc, #544]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1ea      	bne.n	8006aba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 8097 	beq.w	8006c20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006af2:	2300      	movs	r3, #0
 8006af4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006af6:	4b81      	ldr	r3, [pc, #516]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10f      	bne.n	8006b22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b02:	2300      	movs	r3, #0
 8006b04:	60bb      	str	r3, [r7, #8]
 8006b06:	4b7d      	ldr	r3, [pc, #500]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0a:	4a7c      	ldr	r2, [pc, #496]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b10:	6413      	str	r3, [r2, #64]	; 0x40
 8006b12:	4b7a      	ldr	r3, [pc, #488]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b1a:	60bb      	str	r3, [r7, #8]
 8006b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b22:	4b77      	ldr	r3, [pc, #476]	; (8006d00 <HAL_RCC_OscConfig+0x474>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d118      	bne.n	8006b60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b2e:	4b74      	ldr	r3, [pc, #464]	; (8006d00 <HAL_RCC_OscConfig+0x474>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a73      	ldr	r2, [pc, #460]	; (8006d00 <HAL_RCC_OscConfig+0x474>)
 8006b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b3a:	f7fe fa5b 	bl	8004ff4 <HAL_GetTick>
 8006b3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b40:	e008      	b.n	8006b54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b42:	f7fe fa57 	bl	8004ff4 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e10c      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b54:	4b6a      	ldr	r3, [pc, #424]	; (8006d00 <HAL_RCC_OscConfig+0x474>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d0f0      	beq.n	8006b42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d106      	bne.n	8006b76 <HAL_RCC_OscConfig+0x2ea>
 8006b68:	4b64      	ldr	r3, [pc, #400]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6c:	4a63      	ldr	r2, [pc, #396]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006b6e:	f043 0301 	orr.w	r3, r3, #1
 8006b72:	6713      	str	r3, [r2, #112]	; 0x70
 8006b74:	e01c      	b.n	8006bb0 <HAL_RCC_OscConfig+0x324>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	2b05      	cmp	r3, #5
 8006b7c:	d10c      	bne.n	8006b98 <HAL_RCC_OscConfig+0x30c>
 8006b7e:	4b5f      	ldr	r3, [pc, #380]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b82:	4a5e      	ldr	r2, [pc, #376]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006b84:	f043 0304 	orr.w	r3, r3, #4
 8006b88:	6713      	str	r3, [r2, #112]	; 0x70
 8006b8a:	4b5c      	ldr	r3, [pc, #368]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8e:	4a5b      	ldr	r2, [pc, #364]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006b90:	f043 0301 	orr.w	r3, r3, #1
 8006b94:	6713      	str	r3, [r2, #112]	; 0x70
 8006b96:	e00b      	b.n	8006bb0 <HAL_RCC_OscConfig+0x324>
 8006b98:	4b58      	ldr	r3, [pc, #352]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9c:	4a57      	ldr	r2, [pc, #348]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006b9e:	f023 0301 	bic.w	r3, r3, #1
 8006ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ba4:	4b55      	ldr	r3, [pc, #340]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba8:	4a54      	ldr	r2, [pc, #336]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006baa:	f023 0304 	bic.w	r3, r3, #4
 8006bae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d015      	beq.n	8006be4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb8:	f7fe fa1c 	bl	8004ff4 <HAL_GetTick>
 8006bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bbe:	e00a      	b.n	8006bd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bc0:	f7fe fa18 	bl	8004ff4 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e0cb      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bd6:	4b49      	ldr	r3, [pc, #292]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d0ee      	beq.n	8006bc0 <HAL_RCC_OscConfig+0x334>
 8006be2:	e014      	b.n	8006c0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006be4:	f7fe fa06 	bl	8004ff4 <HAL_GetTick>
 8006be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bea:	e00a      	b.n	8006c02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bec:	f7fe fa02 	bl	8004ff4 <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d901      	bls.n	8006c02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e0b5      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c02:	4b3e      	ldr	r3, [pc, #248]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1ee      	bne.n	8006bec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c0e:	7dfb      	ldrb	r3, [r7, #23]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d105      	bne.n	8006c20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c14:	4b39      	ldr	r3, [pc, #228]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c18:	4a38      	ldr	r2, [pc, #224]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 80a1 	beq.w	8006d6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c2a:	4b34      	ldr	r3, [pc, #208]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f003 030c 	and.w	r3, r3, #12
 8006c32:	2b08      	cmp	r3, #8
 8006c34:	d05c      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d141      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c3e:	4b31      	ldr	r3, [pc, #196]	; (8006d04 <HAL_RCC_OscConfig+0x478>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c44:	f7fe f9d6 	bl	8004ff4 <HAL_GetTick>
 8006c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c4a:	e008      	b.n	8006c5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c4c:	f7fe f9d2 	bl	8004ff4 <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d901      	bls.n	8006c5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e087      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c5e:	4b27      	ldr	r3, [pc, #156]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1f0      	bne.n	8006c4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	69da      	ldr	r2, [r3, #28]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	431a      	orrs	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c78:	019b      	lsls	r3, r3, #6
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c80:	085b      	lsrs	r3, r3, #1
 8006c82:	3b01      	subs	r3, #1
 8006c84:	041b      	lsls	r3, r3, #16
 8006c86:	431a      	orrs	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8c:	061b      	lsls	r3, r3, #24
 8006c8e:	491b      	ldr	r1, [pc, #108]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006c90:	4313      	orrs	r3, r2
 8006c92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c94:	4b1b      	ldr	r3, [pc, #108]	; (8006d04 <HAL_RCC_OscConfig+0x478>)
 8006c96:	2201      	movs	r2, #1
 8006c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c9a:	f7fe f9ab 	bl	8004ff4 <HAL_GetTick>
 8006c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ca0:	e008      	b.n	8006cb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ca2:	f7fe f9a7 	bl	8004ff4 <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d901      	bls.n	8006cb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e05c      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cb4:	4b11      	ldr	r3, [pc, #68]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d0f0      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x416>
 8006cc0:	e054      	b.n	8006d6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cc2:	4b10      	ldr	r3, [pc, #64]	; (8006d04 <HAL_RCC_OscConfig+0x478>)
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cc8:	f7fe f994 	bl	8004ff4 <HAL_GetTick>
 8006ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cce:	e008      	b.n	8006ce2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cd0:	f7fe f990 	bl	8004ff4 <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d901      	bls.n	8006ce2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e045      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ce2:	4b06      	ldr	r3, [pc, #24]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1f0      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x444>
 8006cee:	e03d      	b.n	8006d6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d107      	bne.n	8006d08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e038      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
 8006cfc:	40023800 	.word	0x40023800
 8006d00:	40007000 	.word	0x40007000
 8006d04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d08:	4b1b      	ldr	r3, [pc, #108]	; (8006d78 <HAL_RCC_OscConfig+0x4ec>)
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d028      	beq.n	8006d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d121      	bne.n	8006d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d11a      	bne.n	8006d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d38:	4013      	ands	r3, r2
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d111      	bne.n	8006d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4e:	085b      	lsrs	r3, r3, #1
 8006d50:	3b01      	subs	r3, #1
 8006d52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d107      	bne.n	8006d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d001      	beq.n	8006d6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e000      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3718      	adds	r7, #24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	40023800 	.word	0x40023800

08006d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e0cc      	b.n	8006f2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d90:	4b68      	ldr	r3, [pc, #416]	; (8006f34 <HAL_RCC_ClockConfig+0x1b8>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0307 	and.w	r3, r3, #7
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d90c      	bls.n	8006db8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d9e:	4b65      	ldr	r3, [pc, #404]	; (8006f34 <HAL_RCC_ClockConfig+0x1b8>)
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	b2d2      	uxtb	r2, r2
 8006da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006da6:	4b63      	ldr	r3, [pc, #396]	; (8006f34 <HAL_RCC_ClockConfig+0x1b8>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0307 	and.w	r3, r3, #7
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d001      	beq.n	8006db8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e0b8      	b.n	8006f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d020      	beq.n	8006e06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0304 	and.w	r3, r3, #4
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d005      	beq.n	8006ddc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006dd0:	4b59      	ldr	r3, [pc, #356]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	4a58      	ldr	r2, [pc, #352]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006dda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0308 	and.w	r3, r3, #8
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d005      	beq.n	8006df4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006de8:	4b53      	ldr	r3, [pc, #332]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	4a52      	ldr	r2, [pc, #328]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006dee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006df2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006df4:	4b50      	ldr	r3, [pc, #320]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	494d      	ldr	r1, [pc, #308]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d044      	beq.n	8006e9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d107      	bne.n	8006e2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e1a:	4b47      	ldr	r3, [pc, #284]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d119      	bne.n	8006e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e07f      	b.n	8006f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d003      	beq.n	8006e3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	d107      	bne.n	8006e4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e3a:	4b3f      	ldr	r3, [pc, #252]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d109      	bne.n	8006e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e06f      	b.n	8006f2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e4a:	4b3b      	ldr	r3, [pc, #236]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0302 	and.w	r3, r3, #2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d101      	bne.n	8006e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e067      	b.n	8006f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e5a:	4b37      	ldr	r3, [pc, #220]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f023 0203 	bic.w	r2, r3, #3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	4934      	ldr	r1, [pc, #208]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e6c:	f7fe f8c2 	bl	8004ff4 <HAL_GetTick>
 8006e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e72:	e00a      	b.n	8006e8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e74:	f7fe f8be 	bl	8004ff4 <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d901      	bls.n	8006e8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e04f      	b.n	8006f2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e8a:	4b2b      	ldr	r3, [pc, #172]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f003 020c 	and.w	r2, r3, #12
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d1eb      	bne.n	8006e74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e9c:	4b25      	ldr	r3, [pc, #148]	; (8006f34 <HAL_RCC_ClockConfig+0x1b8>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0307 	and.w	r3, r3, #7
 8006ea4:	683a      	ldr	r2, [r7, #0]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d20c      	bcs.n	8006ec4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eaa:	4b22      	ldr	r3, [pc, #136]	; (8006f34 <HAL_RCC_ClockConfig+0x1b8>)
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	b2d2      	uxtb	r2, r2
 8006eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eb2:	4b20      	ldr	r3, [pc, #128]	; (8006f34 <HAL_RCC_ClockConfig+0x1b8>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0307 	and.w	r3, r3, #7
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d001      	beq.n	8006ec4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e032      	b.n	8006f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0304 	and.w	r3, r3, #4
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d008      	beq.n	8006ee2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ed0:	4b19      	ldr	r3, [pc, #100]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	4916      	ldr	r1, [pc, #88]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0308 	and.w	r3, r3, #8
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d009      	beq.n	8006f02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006eee:	4b12      	ldr	r3, [pc, #72]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	00db      	lsls	r3, r3, #3
 8006efc:	490e      	ldr	r1, [pc, #56]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f02:	f000 f821 	bl	8006f48 <HAL_RCC_GetSysClockFreq>
 8006f06:	4602      	mov	r2, r0
 8006f08:	4b0b      	ldr	r3, [pc, #44]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	091b      	lsrs	r3, r3, #4
 8006f0e:	f003 030f 	and.w	r3, r3, #15
 8006f12:	490a      	ldr	r1, [pc, #40]	; (8006f3c <HAL_RCC_ClockConfig+0x1c0>)
 8006f14:	5ccb      	ldrb	r3, [r1, r3]
 8006f16:	fa22 f303 	lsr.w	r3, r2, r3
 8006f1a:	4a09      	ldr	r2, [pc, #36]	; (8006f40 <HAL_RCC_ClockConfig+0x1c4>)
 8006f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f1e:	4b09      	ldr	r3, [pc, #36]	; (8006f44 <HAL_RCC_ClockConfig+0x1c8>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fe f822 	bl	8004f6c <HAL_InitTick>

  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	40023c00 	.word	0x40023c00
 8006f38:	40023800 	.word	0x40023800
 8006f3c:	0800c7e0 	.word	0x0800c7e0
 8006f40:	20000358 	.word	0x20000358
 8006f44:	2000035c 	.word	0x2000035c

08006f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f4c:	b094      	sub	sp, #80	; 0x50
 8006f4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f50:	2300      	movs	r3, #0
 8006f52:	647b      	str	r3, [r7, #68]	; 0x44
 8006f54:	2300      	movs	r3, #0
 8006f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f58:	2300      	movs	r3, #0
 8006f5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f60:	4b79      	ldr	r3, [pc, #484]	; (8007148 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f003 030c 	and.w	r3, r3, #12
 8006f68:	2b08      	cmp	r3, #8
 8006f6a:	d00d      	beq.n	8006f88 <HAL_RCC_GetSysClockFreq+0x40>
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	f200 80e1 	bhi.w	8007134 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d002      	beq.n	8006f7c <HAL_RCC_GetSysClockFreq+0x34>
 8006f76:	2b04      	cmp	r3, #4
 8006f78:	d003      	beq.n	8006f82 <HAL_RCC_GetSysClockFreq+0x3a>
 8006f7a:	e0db      	b.n	8007134 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f7c:	4b73      	ldr	r3, [pc, #460]	; (800714c <HAL_RCC_GetSysClockFreq+0x204>)
 8006f7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006f80:	e0db      	b.n	800713a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f82:	4b73      	ldr	r3, [pc, #460]	; (8007150 <HAL_RCC_GetSysClockFreq+0x208>)
 8006f84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f86:	e0d8      	b.n	800713a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f88:	4b6f      	ldr	r3, [pc, #444]	; (8007148 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f92:	4b6d      	ldr	r3, [pc, #436]	; (8007148 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d063      	beq.n	8007066 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f9e:	4b6a      	ldr	r3, [pc, #424]	; (8007148 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	099b      	lsrs	r3, r3, #6
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fa8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb0:	633b      	str	r3, [r7, #48]	; 0x30
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8006fb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006fba:	4622      	mov	r2, r4
 8006fbc:	462b      	mov	r3, r5
 8006fbe:	f04f 0000 	mov.w	r0, #0
 8006fc2:	f04f 0100 	mov.w	r1, #0
 8006fc6:	0159      	lsls	r1, r3, #5
 8006fc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fcc:	0150      	lsls	r0, r2, #5
 8006fce:	4602      	mov	r2, r0
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	1a51      	subs	r1, r2, r1
 8006fd6:	6139      	str	r1, [r7, #16]
 8006fd8:	4629      	mov	r1, r5
 8006fda:	eb63 0301 	sbc.w	r3, r3, r1
 8006fde:	617b      	str	r3, [r7, #20]
 8006fe0:	f04f 0200 	mov.w	r2, #0
 8006fe4:	f04f 0300 	mov.w	r3, #0
 8006fe8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fec:	4659      	mov	r1, fp
 8006fee:	018b      	lsls	r3, r1, #6
 8006ff0:	4651      	mov	r1, sl
 8006ff2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ff6:	4651      	mov	r1, sl
 8006ff8:	018a      	lsls	r2, r1, #6
 8006ffa:	4651      	mov	r1, sl
 8006ffc:	ebb2 0801 	subs.w	r8, r2, r1
 8007000:	4659      	mov	r1, fp
 8007002:	eb63 0901 	sbc.w	r9, r3, r1
 8007006:	f04f 0200 	mov.w	r2, #0
 800700a:	f04f 0300 	mov.w	r3, #0
 800700e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007012:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007016:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800701a:	4690      	mov	r8, r2
 800701c:	4699      	mov	r9, r3
 800701e:	4623      	mov	r3, r4
 8007020:	eb18 0303 	adds.w	r3, r8, r3
 8007024:	60bb      	str	r3, [r7, #8]
 8007026:	462b      	mov	r3, r5
 8007028:	eb49 0303 	adc.w	r3, r9, r3
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	f04f 0200 	mov.w	r2, #0
 8007032:	f04f 0300 	mov.w	r3, #0
 8007036:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800703a:	4629      	mov	r1, r5
 800703c:	024b      	lsls	r3, r1, #9
 800703e:	4621      	mov	r1, r4
 8007040:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007044:	4621      	mov	r1, r4
 8007046:	024a      	lsls	r2, r1, #9
 8007048:	4610      	mov	r0, r2
 800704a:	4619      	mov	r1, r3
 800704c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800704e:	2200      	movs	r2, #0
 8007050:	62bb      	str	r3, [r7, #40]	; 0x28
 8007052:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007054:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007058:	f7f9 fda2 	bl	8000ba0 <__aeabi_uldivmod>
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	4613      	mov	r3, r2
 8007062:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007064:	e058      	b.n	8007118 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007066:	4b38      	ldr	r3, [pc, #224]	; (8007148 <HAL_RCC_GetSysClockFreq+0x200>)
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	099b      	lsrs	r3, r3, #6
 800706c:	2200      	movs	r2, #0
 800706e:	4618      	mov	r0, r3
 8007070:	4611      	mov	r1, r2
 8007072:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007076:	623b      	str	r3, [r7, #32]
 8007078:	2300      	movs	r3, #0
 800707a:	627b      	str	r3, [r7, #36]	; 0x24
 800707c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007080:	4642      	mov	r2, r8
 8007082:	464b      	mov	r3, r9
 8007084:	f04f 0000 	mov.w	r0, #0
 8007088:	f04f 0100 	mov.w	r1, #0
 800708c:	0159      	lsls	r1, r3, #5
 800708e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007092:	0150      	lsls	r0, r2, #5
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	4641      	mov	r1, r8
 800709a:	ebb2 0a01 	subs.w	sl, r2, r1
 800709e:	4649      	mov	r1, r9
 80070a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80070a4:	f04f 0200 	mov.w	r2, #0
 80070a8:	f04f 0300 	mov.w	r3, #0
 80070ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80070b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80070b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80070b8:	ebb2 040a 	subs.w	r4, r2, sl
 80070bc:	eb63 050b 	sbc.w	r5, r3, fp
 80070c0:	f04f 0200 	mov.w	r2, #0
 80070c4:	f04f 0300 	mov.w	r3, #0
 80070c8:	00eb      	lsls	r3, r5, #3
 80070ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070ce:	00e2      	lsls	r2, r4, #3
 80070d0:	4614      	mov	r4, r2
 80070d2:	461d      	mov	r5, r3
 80070d4:	4643      	mov	r3, r8
 80070d6:	18e3      	adds	r3, r4, r3
 80070d8:	603b      	str	r3, [r7, #0]
 80070da:	464b      	mov	r3, r9
 80070dc:	eb45 0303 	adc.w	r3, r5, r3
 80070e0:	607b      	str	r3, [r7, #4]
 80070e2:	f04f 0200 	mov.w	r2, #0
 80070e6:	f04f 0300 	mov.w	r3, #0
 80070ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80070ee:	4629      	mov	r1, r5
 80070f0:	028b      	lsls	r3, r1, #10
 80070f2:	4621      	mov	r1, r4
 80070f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80070f8:	4621      	mov	r1, r4
 80070fa:	028a      	lsls	r2, r1, #10
 80070fc:	4610      	mov	r0, r2
 80070fe:	4619      	mov	r1, r3
 8007100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007102:	2200      	movs	r2, #0
 8007104:	61bb      	str	r3, [r7, #24]
 8007106:	61fa      	str	r2, [r7, #28]
 8007108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800710c:	f7f9 fd48 	bl	8000ba0 <__aeabi_uldivmod>
 8007110:	4602      	mov	r2, r0
 8007112:	460b      	mov	r3, r1
 8007114:	4613      	mov	r3, r2
 8007116:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007118:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <HAL_RCC_GetSysClockFreq+0x200>)
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	0c1b      	lsrs	r3, r3, #16
 800711e:	f003 0303 	and.w	r3, r3, #3
 8007122:	3301      	adds	r3, #1
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007128:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800712a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800712c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007130:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007132:	e002      	b.n	800713a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007134:	4b05      	ldr	r3, [pc, #20]	; (800714c <HAL_RCC_GetSysClockFreq+0x204>)
 8007136:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007138:	bf00      	nop
    }
  }
  return sysclockfreq;
 800713a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800713c:	4618      	mov	r0, r3
 800713e:	3750      	adds	r7, #80	; 0x50
 8007140:	46bd      	mov	sp, r7
 8007142:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007146:	bf00      	nop
 8007148:	40023800 	.word	0x40023800
 800714c:	00f42400 	.word	0x00f42400
 8007150:	007a1200 	.word	0x007a1200

08007154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007154:	b480      	push	{r7}
 8007156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007158:	4b03      	ldr	r3, [pc, #12]	; (8007168 <HAL_RCC_GetHCLKFreq+0x14>)
 800715a:	681b      	ldr	r3, [r3, #0]
}
 800715c:	4618      	mov	r0, r3
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	20000358 	.word	0x20000358

0800716c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007170:	f7ff fff0 	bl	8007154 <HAL_RCC_GetHCLKFreq>
 8007174:	4602      	mov	r2, r0
 8007176:	4b05      	ldr	r3, [pc, #20]	; (800718c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	0a9b      	lsrs	r3, r3, #10
 800717c:	f003 0307 	and.w	r3, r3, #7
 8007180:	4903      	ldr	r1, [pc, #12]	; (8007190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007182:	5ccb      	ldrb	r3, [r1, r3]
 8007184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007188:	4618      	mov	r0, r3
 800718a:	bd80      	pop	{r7, pc}
 800718c:	40023800 	.word	0x40023800
 8007190:	0800c7f0 	.word	0x0800c7f0

08007194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007198:	f7ff ffdc 	bl	8007154 <HAL_RCC_GetHCLKFreq>
 800719c:	4602      	mov	r2, r0
 800719e:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	0b5b      	lsrs	r3, r3, #13
 80071a4:	f003 0307 	and.w	r3, r3, #7
 80071a8:	4903      	ldr	r1, [pc, #12]	; (80071b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071aa:	5ccb      	ldrb	r3, [r1, r3]
 80071ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	40023800 	.word	0x40023800
 80071b8:	0800c7f0 	.word	0x0800c7f0

080071bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e04c      	b.n	8007268 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d111      	bne.n	80071fe <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f001 fc0c 	bl	8008a00 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d102      	bne.n	80071f6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a1f      	ldr	r2, [pc, #124]	; (8007270 <HAL_TIM_Base_Init+0xb4>)
 80071f4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2202      	movs	r2, #2
 8007202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	3304      	adds	r3, #4
 800720e:	4619      	mov	r1, r3
 8007210:	4610      	mov	r0, r2
 8007212:	f001 f929 	bl	8008468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	08004afd 	.word	0x08004afd

08007274 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b01      	cmp	r3, #1
 8007286:	d001      	beq.n	800728c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e03c      	b.n	8007306 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2202      	movs	r2, #2
 8007290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a1e      	ldr	r2, [pc, #120]	; (8007314 <HAL_TIM_Base_Start+0xa0>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d018      	beq.n	80072d0 <HAL_TIM_Base_Start+0x5c>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072a6:	d013      	beq.n	80072d0 <HAL_TIM_Base_Start+0x5c>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a1a      	ldr	r2, [pc, #104]	; (8007318 <HAL_TIM_Base_Start+0xa4>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d00e      	beq.n	80072d0 <HAL_TIM_Base_Start+0x5c>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a19      	ldr	r2, [pc, #100]	; (800731c <HAL_TIM_Base_Start+0xa8>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d009      	beq.n	80072d0 <HAL_TIM_Base_Start+0x5c>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a17      	ldr	r2, [pc, #92]	; (8007320 <HAL_TIM_Base_Start+0xac>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d004      	beq.n	80072d0 <HAL_TIM_Base_Start+0x5c>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a16      	ldr	r2, [pc, #88]	; (8007324 <HAL_TIM_Base_Start+0xb0>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d111      	bne.n	80072f4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f003 0307 	and.w	r3, r3, #7
 80072da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2b06      	cmp	r3, #6
 80072e0:	d010      	beq.n	8007304 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f042 0201 	orr.w	r2, r2, #1
 80072f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072f2:	e007      	b.n	8007304 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f042 0201 	orr.w	r2, r2, #1
 8007302:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	40010000 	.word	0x40010000
 8007318:	40000400 	.word	0x40000400
 800731c:	40000800 	.word	0x40000800
 8007320:	40000c00 	.word	0x40000c00
 8007324:	40014000 	.word	0x40014000

08007328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b01      	cmp	r3, #1
 800733a:	d001      	beq.n	8007340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e044      	b.n	80073ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2202      	movs	r2, #2
 8007344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68da      	ldr	r2, [r3, #12]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f042 0201 	orr.w	r2, r2, #1
 8007356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a1e      	ldr	r2, [pc, #120]	; (80073d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d018      	beq.n	8007394 <HAL_TIM_Base_Start_IT+0x6c>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800736a:	d013      	beq.n	8007394 <HAL_TIM_Base_Start_IT+0x6c>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a1a      	ldr	r2, [pc, #104]	; (80073dc <HAL_TIM_Base_Start_IT+0xb4>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d00e      	beq.n	8007394 <HAL_TIM_Base_Start_IT+0x6c>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a19      	ldr	r2, [pc, #100]	; (80073e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d009      	beq.n	8007394 <HAL_TIM_Base_Start_IT+0x6c>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a17      	ldr	r2, [pc, #92]	; (80073e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d004      	beq.n	8007394 <HAL_TIM_Base_Start_IT+0x6c>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a16      	ldr	r2, [pc, #88]	; (80073e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d111      	bne.n	80073b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f003 0307 	and.w	r3, r3, #7
 800739e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b06      	cmp	r3, #6
 80073a4:	d010      	beq.n	80073c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f042 0201 	orr.w	r2, r2, #1
 80073b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b6:	e007      	b.n	80073c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f042 0201 	orr.w	r2, r2, #1
 80073c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	40010000 	.word	0x40010000
 80073dc:	40000400 	.word	0x40000400
 80073e0:	40000800 	.word	0x40000800
 80073e4:	40000c00 	.word	0x40000c00
 80073e8:	40014000 	.word	0x40014000

080073ec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e04c      	b.n	8007498 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d111      	bne.n	800742e <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f001 faf4 	bl	8008a00 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800741c:	2b00      	cmp	r3, #0
 800741e:	d102      	bne.n	8007426 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a1f      	ldr	r2, [pc, #124]	; (80074a0 <HAL_TIM_OC_Init+0xb4>)
 8007424:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2202      	movs	r2, #2
 8007432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	3304      	adds	r3, #4
 800743e:	4619      	mov	r1, r3
 8007440:	4610      	mov	r0, r2
 8007442:	f001 f811 	bl	8008468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	080074a5 	.word	0x080074a5

080074a4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e04c      	b.n	8007564 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d111      	bne.n	80074fa <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f001 fa8e 	bl	8008a00 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d102      	bne.n	80074f2 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a1f      	ldr	r2, [pc, #124]	; (800756c <HAL_TIM_PWM_Init+0xb4>)
 80074f0:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2202      	movs	r2, #2
 80074fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	3304      	adds	r3, #4
 800750a:	4619      	mov	r1, r3
 800750c:	4610      	mov	r0, r2
 800750e:	f000 ffab 	bl	8008468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	08007571 	.word	0x08007571

08007570 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d109      	bne.n	80075a8 <HAL_TIM_PWM_Start+0x24>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b01      	cmp	r3, #1
 800759e:	bf14      	ite	ne
 80075a0:	2301      	movne	r3, #1
 80075a2:	2300      	moveq	r3, #0
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	e022      	b.n	80075ee <HAL_TIM_PWM_Start+0x6a>
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2b04      	cmp	r3, #4
 80075ac:	d109      	bne.n	80075c2 <HAL_TIM_PWM_Start+0x3e>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	bf14      	ite	ne
 80075ba:	2301      	movne	r3, #1
 80075bc:	2300      	moveq	r3, #0
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	e015      	b.n	80075ee <HAL_TIM_PWM_Start+0x6a>
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b08      	cmp	r3, #8
 80075c6:	d109      	bne.n	80075dc <HAL_TIM_PWM_Start+0x58>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	bf14      	ite	ne
 80075d4:	2301      	movne	r3, #1
 80075d6:	2300      	moveq	r3, #0
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	e008      	b.n	80075ee <HAL_TIM_PWM_Start+0x6a>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	bf14      	ite	ne
 80075e8:	2301      	movne	r3, #1
 80075ea:	2300      	moveq	r3, #0
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d001      	beq.n	80075f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e068      	b.n	80076c8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d104      	bne.n	8007606 <HAL_TIM_PWM_Start+0x82>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2202      	movs	r2, #2
 8007600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007604:	e013      	b.n	800762e <HAL_TIM_PWM_Start+0xaa>
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	2b04      	cmp	r3, #4
 800760a:	d104      	bne.n	8007616 <HAL_TIM_PWM_Start+0x92>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007614:	e00b      	b.n	800762e <HAL_TIM_PWM_Start+0xaa>
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b08      	cmp	r3, #8
 800761a:	d104      	bne.n	8007626 <HAL_TIM_PWM_Start+0xa2>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007624:	e003      	b.n	800762e <HAL_TIM_PWM_Start+0xaa>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2202      	movs	r2, #2
 800762a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2201      	movs	r2, #1
 8007634:	6839      	ldr	r1, [r7, #0]
 8007636:	4618      	mov	r0, r3
 8007638:	f001 f9bc 	bl	80089b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a23      	ldr	r2, [pc, #140]	; (80076d0 <HAL_TIM_PWM_Start+0x14c>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d107      	bne.n	8007656 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007654:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a1d      	ldr	r2, [pc, #116]	; (80076d0 <HAL_TIM_PWM_Start+0x14c>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d018      	beq.n	8007692 <HAL_TIM_PWM_Start+0x10e>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007668:	d013      	beq.n	8007692 <HAL_TIM_PWM_Start+0x10e>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a19      	ldr	r2, [pc, #100]	; (80076d4 <HAL_TIM_PWM_Start+0x150>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d00e      	beq.n	8007692 <HAL_TIM_PWM_Start+0x10e>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a17      	ldr	r2, [pc, #92]	; (80076d8 <HAL_TIM_PWM_Start+0x154>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d009      	beq.n	8007692 <HAL_TIM_PWM_Start+0x10e>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a16      	ldr	r2, [pc, #88]	; (80076dc <HAL_TIM_PWM_Start+0x158>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d004      	beq.n	8007692 <HAL_TIM_PWM_Start+0x10e>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a14      	ldr	r2, [pc, #80]	; (80076e0 <HAL_TIM_PWM_Start+0x15c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d111      	bne.n	80076b6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f003 0307 	and.w	r3, r3, #7
 800769c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2b06      	cmp	r3, #6
 80076a2:	d010      	beq.n	80076c6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f042 0201 	orr.w	r2, r2, #1
 80076b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076b4:	e007      	b.n	80076c6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f042 0201 	orr.w	r2, r2, #1
 80076c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	40010000 	.word	0x40010000
 80076d4:	40000400 	.word	0x40000400
 80076d8:	40000800 	.word	0x40000800
 80076dc:	40000c00 	.word	0x40000c00
 80076e0:	40014000 	.word	0x40014000

080076e4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e04c      	b.n	8007792 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	2b00      	cmp	r3, #0
 8007702:	d111      	bne.n	8007728 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f001 f977 	bl	8008a00 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007716:	2b00      	cmp	r3, #0
 8007718:	d102      	bne.n	8007720 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a1f      	ldr	r2, [pc, #124]	; (800779c <HAL_TIM_OnePulse_Init+0xb8>)
 800771e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2202      	movs	r2, #2
 800772c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	3304      	adds	r3, #4
 8007738:	4619      	mov	r1, r3
 800773a:	4610      	mov	r0, r2
 800773c:	f000 fe94 	bl	8008468 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f022 0208 	bic.w	r2, r2, #8
 800774e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6819      	ldr	r1, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	683a      	ldr	r2, [r7, #0]
 800775c:	430a      	orrs	r2, r1
 800775e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	080077a1 	.word	0x080077a1

080077a0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80077a8:	bf00      	nop
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80077cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80077dc:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80077de:	7bfb      	ldrb	r3, [r7, #15]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d108      	bne.n	80077f6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80077e4:	7bbb      	ldrb	r3, [r7, #14]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d105      	bne.n	80077f6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80077ea:	7b7b      	ldrb	r3, [r7, #13]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d102      	bne.n	80077f6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80077f0:	7b3b      	ldrb	r3, [r7, #12]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d001      	beq.n	80077fa <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e03b      	b.n	8007872 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2202      	movs	r2, #2
 80077fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2202      	movs	r2, #2
 8007806:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2202      	movs	r2, #2
 800780e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2202      	movs	r2, #2
 8007816:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68da      	ldr	r2, [r3, #12]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f042 0202 	orr.w	r2, r2, #2
 8007828:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68da      	ldr	r2, [r3, #12]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f042 0204 	orr.w	r2, r2, #4
 8007838:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2201      	movs	r2, #1
 8007840:	2100      	movs	r1, #0
 8007842:	4618      	mov	r0, r3
 8007844:	f001 f8b6 	bl	80089b4 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2201      	movs	r2, #1
 800784e:	2104      	movs	r1, #4
 8007850:	4618      	mov	r0, r3
 8007852:	f001 f8af 	bl	80089b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a08      	ldr	r2, [pc, #32]	; (800787c <HAL_TIM_OnePulse_Start_IT+0xc8>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d107      	bne.n	8007870 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800786e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	40010000 	.word	0x40010000

08007880 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d101      	bne.n	8007894 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e0a2      	b.n	80079da <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b00      	cmp	r3, #0
 800789e:	d111      	bne.n	80078c4 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f001 f8a9 	bl	8008a00 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d102      	bne.n	80078bc <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a4a      	ldr	r2, [pc, #296]	; (80079e4 <HAL_TIM_Encoder_Init+0x164>)
 80078ba:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2202      	movs	r2, #2
 80078c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	6812      	ldr	r2, [r2, #0]
 80078d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078da:	f023 0307 	bic.w	r3, r3, #7
 80078de:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	3304      	adds	r3, #4
 80078e8:	4619      	mov	r1, r3
 80078ea:	4610      	mov	r0, r2
 80078ec:	f000 fdbc 	bl	8008468 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	4313      	orrs	r3, r2
 8007910:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007918:	f023 0303 	bic.w	r3, r3, #3
 800791c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	689a      	ldr	r2, [r3, #8]
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	021b      	lsls	r3, r3, #8
 8007928:	4313      	orrs	r3, r2
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	4313      	orrs	r3, r2
 800792e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007936:	f023 030c 	bic.w	r3, r3, #12
 800793a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	68da      	ldr	r2, [r3, #12]
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	69db      	ldr	r3, [r3, #28]
 8007950:	021b      	lsls	r3, r3, #8
 8007952:	4313      	orrs	r3, r2
 8007954:	693a      	ldr	r2, [r7, #16]
 8007956:	4313      	orrs	r3, r2
 8007958:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	011a      	lsls	r2, r3, #4
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	6a1b      	ldr	r3, [r3, #32]
 8007964:	031b      	lsls	r3, r3, #12
 8007966:	4313      	orrs	r3, r2
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	4313      	orrs	r3, r2
 800796c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007974:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800797c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	011b      	lsls	r3, r3, #4
 8007988:	4313      	orrs	r3, r2
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	4313      	orrs	r3, r2
 800798e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	697a      	ldr	r2, [r7, #20]
 8007996:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3718      	adds	r7, #24
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	08004a71 	.word	0x08004a71

080079e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007a00:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a08:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007a10:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d110      	bne.n	8007a3a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a18:	7bfb      	ldrb	r3, [r7, #15]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d102      	bne.n	8007a24 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a1e:	7b7b      	ldrb	r3, [r7, #13]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d001      	beq.n	8007a28 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e069      	b.n	8007afc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2202      	movs	r2, #2
 8007a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a38:	e031      	b.n	8007a9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2b04      	cmp	r3, #4
 8007a3e:	d110      	bne.n	8007a62 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a40:	7bbb      	ldrb	r3, [r7, #14]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d102      	bne.n	8007a4c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a46:	7b3b      	ldrb	r3, [r7, #12]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d001      	beq.n	8007a50 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e055      	b.n	8007afc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2202      	movs	r2, #2
 8007a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a60:	e01d      	b.n	8007a9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d108      	bne.n	8007a7a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a68:	7bbb      	ldrb	r3, [r7, #14]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d105      	bne.n	8007a7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a6e:	7b7b      	ldrb	r3, [r7, #13]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d102      	bne.n	8007a7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a74:	7b3b      	ldrb	r3, [r7, #12]
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d001      	beq.n	8007a7e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e03e      	b.n	8007afc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2202      	movs	r2, #2
 8007a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2202      	movs	r2, #2
 8007a8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2202      	movs	r2, #2
 8007a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2202      	movs	r2, #2
 8007a9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d003      	beq.n	8007aac <HAL_TIM_Encoder_Start+0xc4>
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	2b04      	cmp	r3, #4
 8007aa8:	d008      	beq.n	8007abc <HAL_TIM_Encoder_Start+0xd4>
 8007aaa:	e00f      	b.n	8007acc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 ff7d 	bl	80089b4 <TIM_CCxChannelCmd>
      break;
 8007aba:	e016      	b.n	8007aea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	2104      	movs	r1, #4
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f000 ff75 	bl	80089b4 <TIM_CCxChannelCmd>
      break;
 8007aca:	e00e      	b.n	8007aea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f000 ff6d 	bl	80089b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	2104      	movs	r1, #4
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f000 ff66 	bl	80089b4 <TIM_CCxChannelCmd>
      break;
 8007ae8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f042 0201 	orr.w	r2, r2, #1
 8007af8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	f003 0302 	and.w	r3, r3, #2
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d128      	bne.n	8007b6c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	f003 0302 	and.w	r3, r3, #2
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d121      	bne.n	8007b6c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f06f 0202 	mvn.w	r2, #2
 8007b30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	f003 0303 	and.w	r3, r3, #3
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d005      	beq.n	8007b52 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	4798      	blx	r3
 8007b50:	e009      	b.n	8007b66 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	f003 0304 	and.w	r3, r3, #4
 8007b76:	2b04      	cmp	r3, #4
 8007b78:	d128      	bne.n	8007bcc <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	f003 0304 	and.w	r3, r3, #4
 8007b84:	2b04      	cmp	r3, #4
 8007b86:	d121      	bne.n	8007bcc <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f06f 0204 	mvn.w	r2, #4
 8007b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2202      	movs	r2, #2
 8007b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d005      	beq.n	8007bb2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	4798      	blx	r3
 8007bb0:	e009      	b.n	8007bc6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	f003 0308 	and.w	r3, r3, #8
 8007bd6:	2b08      	cmp	r3, #8
 8007bd8:	d128      	bne.n	8007c2c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	f003 0308 	and.w	r3, r3, #8
 8007be4:	2b08      	cmp	r3, #8
 8007be6:	d121      	bne.n	8007c2c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f06f 0208 	mvn.w	r2, #8
 8007bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2204      	movs	r2, #4
 8007bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	69db      	ldr	r3, [r3, #28]
 8007bfe:	f003 0303 	and.w	r3, r3, #3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d005      	beq.n	8007c12 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	4798      	blx	r3
 8007c10:	e009      	b.n	8007c26 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	f003 0310 	and.w	r3, r3, #16
 8007c36:	2b10      	cmp	r3, #16
 8007c38:	d128      	bne.n	8007c8c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	f003 0310 	and.w	r3, r3, #16
 8007c44:	2b10      	cmp	r3, #16
 8007c46:	d121      	bne.n	8007c8c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f06f 0210 	mvn.w	r2, #16
 8007c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2208      	movs	r2, #8
 8007c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d005      	beq.n	8007c72 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	4798      	blx	r3
 8007c70:	e009      	b.n	8007c86 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d110      	bne.n	8007cbc <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d109      	bne.n	8007cbc <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f06f 0201 	mvn.w	r2, #1
 8007cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc6:	2b80      	cmp	r3, #128	; 0x80
 8007cc8:	d110      	bne.n	8007cec <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd4:	2b80      	cmp	r3, #128	; 0x80
 8007cd6:	d109      	bne.n	8007cec <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf6:	2b40      	cmp	r3, #64	; 0x40
 8007cf8:	d110      	bne.n	8007d1c <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d04:	2b40      	cmp	r3, #64	; 0x40
 8007d06:	d109      	bne.n	8007d1c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	f003 0320 	and.w	r3, r3, #32
 8007d26:	2b20      	cmp	r3, #32
 8007d28:	d110      	bne.n	8007d4c <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	f003 0320 	and.w	r3, r3, #32
 8007d34:	2b20      	cmp	r3, #32
 8007d36:	d109      	bne.n	8007d4c <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f06f 0220 	mvn.w	r2, #32
 8007d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d4c:	bf00      	nop
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d101      	bne.n	8007d72 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007d6e:	2302      	movs	r3, #2
 8007d70:	e048      	b.n	8007e04 <HAL_TIM_OC_ConfigChannel+0xb0>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2b0c      	cmp	r3, #12
 8007d7e:	d839      	bhi.n	8007df4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8007d80:	a201      	add	r2, pc, #4	; (adr r2, 8007d88 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d86:	bf00      	nop
 8007d88:	08007dbd 	.word	0x08007dbd
 8007d8c:	08007df5 	.word	0x08007df5
 8007d90:	08007df5 	.word	0x08007df5
 8007d94:	08007df5 	.word	0x08007df5
 8007d98:	08007dcb 	.word	0x08007dcb
 8007d9c:	08007df5 	.word	0x08007df5
 8007da0:	08007df5 	.word	0x08007df5
 8007da4:	08007df5 	.word	0x08007df5
 8007da8:	08007dd9 	.word	0x08007dd9
 8007dac:	08007df5 	.word	0x08007df5
 8007db0:	08007df5 	.word	0x08007df5
 8007db4:	08007df5 	.word	0x08007df5
 8007db8:	08007de7 	.word	0x08007de7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68b9      	ldr	r1, [r7, #8]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 fbd0 	bl	8008568 <TIM_OC1_SetConfig>
      break;
 8007dc8:	e017      	b.n	8007dfa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68b9      	ldr	r1, [r7, #8]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f000 fc2f 	bl	8008634 <TIM_OC2_SetConfig>
      break;
 8007dd6:	e010      	b.n	8007dfa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68b9      	ldr	r1, [r7, #8]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f000 fc94 	bl	800870c <TIM_OC3_SetConfig>
      break;
 8007de4:	e009      	b.n	8007dfa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68b9      	ldr	r1, [r7, #8]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f000 fcf7 	bl	80087e0 <TIM_OC4_SetConfig>
      break;
 8007df2:	e002      	b.n	8007dfa <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	75fb      	strb	r3, [r7, #23]
      break;
 8007df8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3718      	adds	r7, #24
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d101      	bne.n	8007e2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e26:	2302      	movs	r3, #2
 8007e28:	e0ae      	b.n	8007f88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b0c      	cmp	r3, #12
 8007e36:	f200 809f 	bhi.w	8007f78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007e3a:	a201      	add	r2, pc, #4	; (adr r2, 8007e40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e40:	08007e75 	.word	0x08007e75
 8007e44:	08007f79 	.word	0x08007f79
 8007e48:	08007f79 	.word	0x08007f79
 8007e4c:	08007f79 	.word	0x08007f79
 8007e50:	08007eb5 	.word	0x08007eb5
 8007e54:	08007f79 	.word	0x08007f79
 8007e58:	08007f79 	.word	0x08007f79
 8007e5c:	08007f79 	.word	0x08007f79
 8007e60:	08007ef7 	.word	0x08007ef7
 8007e64:	08007f79 	.word	0x08007f79
 8007e68:	08007f79 	.word	0x08007f79
 8007e6c:	08007f79 	.word	0x08007f79
 8007e70:	08007f37 	.word	0x08007f37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68b9      	ldr	r1, [r7, #8]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 fb74 	bl	8008568 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	699a      	ldr	r2, [r3, #24]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f042 0208 	orr.w	r2, r2, #8
 8007e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	699a      	ldr	r2, [r3, #24]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f022 0204 	bic.w	r2, r2, #4
 8007e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6999      	ldr	r1, [r3, #24]
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	691a      	ldr	r2, [r3, #16]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	619a      	str	r2, [r3, #24]
      break;
 8007eb2:	e064      	b.n	8007f7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68b9      	ldr	r1, [r7, #8]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 fbba 	bl	8008634 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	699a      	ldr	r2, [r3, #24]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ece:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	699a      	ldr	r2, [r3, #24]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	6999      	ldr	r1, [r3, #24]
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	021a      	lsls	r2, r3, #8
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	430a      	orrs	r2, r1
 8007ef2:	619a      	str	r2, [r3, #24]
      break;
 8007ef4:	e043      	b.n	8007f7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68b9      	ldr	r1, [r7, #8]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 fc05 	bl	800870c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	69da      	ldr	r2, [r3, #28]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f042 0208 	orr.w	r2, r2, #8
 8007f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	69da      	ldr	r2, [r3, #28]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f022 0204 	bic.w	r2, r2, #4
 8007f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	69d9      	ldr	r1, [r3, #28]
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	691a      	ldr	r2, [r3, #16]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	430a      	orrs	r2, r1
 8007f32:	61da      	str	r2, [r3, #28]
      break;
 8007f34:	e023      	b.n	8007f7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68b9      	ldr	r1, [r7, #8]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f000 fc4f 	bl	80087e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	69da      	ldr	r2, [r3, #28]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	69da      	ldr	r2, [r3, #28]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	69d9      	ldr	r1, [r3, #28]
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	021a      	lsls	r2, r3, #8
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	430a      	orrs	r2, r1
 8007f74:	61da      	str	r2, [r3, #28]
      break;
 8007f76:	e002      	b.n	8007f7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3718      	adds	r7, #24
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d101      	bne.n	8007fac <HAL_TIM_ConfigClockSource+0x1c>
 8007fa8:	2302      	movs	r3, #2
 8007faa:	e0b4      	b.n	8008116 <HAL_TIM_ConfigClockSource+0x186>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007fca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	68ba      	ldr	r2, [r7, #8]
 8007fda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fe4:	d03e      	beq.n	8008064 <HAL_TIM_ConfigClockSource+0xd4>
 8007fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fea:	f200 8087 	bhi.w	80080fc <HAL_TIM_ConfigClockSource+0x16c>
 8007fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ff2:	f000 8086 	beq.w	8008102 <HAL_TIM_ConfigClockSource+0x172>
 8007ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ffa:	d87f      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x16c>
 8007ffc:	2b70      	cmp	r3, #112	; 0x70
 8007ffe:	d01a      	beq.n	8008036 <HAL_TIM_ConfigClockSource+0xa6>
 8008000:	2b70      	cmp	r3, #112	; 0x70
 8008002:	d87b      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x16c>
 8008004:	2b60      	cmp	r3, #96	; 0x60
 8008006:	d050      	beq.n	80080aa <HAL_TIM_ConfigClockSource+0x11a>
 8008008:	2b60      	cmp	r3, #96	; 0x60
 800800a:	d877      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x16c>
 800800c:	2b50      	cmp	r3, #80	; 0x50
 800800e:	d03c      	beq.n	800808a <HAL_TIM_ConfigClockSource+0xfa>
 8008010:	2b50      	cmp	r3, #80	; 0x50
 8008012:	d873      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x16c>
 8008014:	2b40      	cmp	r3, #64	; 0x40
 8008016:	d058      	beq.n	80080ca <HAL_TIM_ConfigClockSource+0x13a>
 8008018:	2b40      	cmp	r3, #64	; 0x40
 800801a:	d86f      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x16c>
 800801c:	2b30      	cmp	r3, #48	; 0x30
 800801e:	d064      	beq.n	80080ea <HAL_TIM_ConfigClockSource+0x15a>
 8008020:	2b30      	cmp	r3, #48	; 0x30
 8008022:	d86b      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x16c>
 8008024:	2b20      	cmp	r3, #32
 8008026:	d060      	beq.n	80080ea <HAL_TIM_ConfigClockSource+0x15a>
 8008028:	2b20      	cmp	r3, #32
 800802a:	d867      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x16c>
 800802c:	2b00      	cmp	r3, #0
 800802e:	d05c      	beq.n	80080ea <HAL_TIM_ConfigClockSource+0x15a>
 8008030:	2b10      	cmp	r3, #16
 8008032:	d05a      	beq.n	80080ea <HAL_TIM_ConfigClockSource+0x15a>
 8008034:	e062      	b.n	80080fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6818      	ldr	r0, [r3, #0]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	6899      	ldr	r1, [r3, #8]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	685a      	ldr	r2, [r3, #4]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	f000 fc95 	bl	8008974 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008058:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	609a      	str	r2, [r3, #8]
      break;
 8008062:	e04f      	b.n	8008104 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6818      	ldr	r0, [r3, #0]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	6899      	ldr	r1, [r3, #8]
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	685a      	ldr	r2, [r3, #4]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	f000 fc7e 	bl	8008974 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689a      	ldr	r2, [r3, #8]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008086:	609a      	str	r2, [r3, #8]
      break;
 8008088:	e03c      	b.n	8008104 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6818      	ldr	r0, [r3, #0]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	6859      	ldr	r1, [r3, #4]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	461a      	mov	r2, r3
 8008098:	f000 fbf2 	bl	8008880 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2150      	movs	r1, #80	; 0x50
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 fc4b 	bl	800893e <TIM_ITRx_SetConfig>
      break;
 80080a8:	e02c      	b.n	8008104 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6818      	ldr	r0, [r3, #0]
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	6859      	ldr	r1, [r3, #4]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	461a      	mov	r2, r3
 80080b8:	f000 fc11 	bl	80088de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2160      	movs	r1, #96	; 0x60
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 fc3b 	bl	800893e <TIM_ITRx_SetConfig>
      break;
 80080c8:	e01c      	b.n	8008104 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6818      	ldr	r0, [r3, #0]
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	6859      	ldr	r1, [r3, #4]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	461a      	mov	r2, r3
 80080d8:	f000 fbd2 	bl	8008880 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2140      	movs	r1, #64	; 0x40
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 fc2b 	bl	800893e <TIM_ITRx_SetConfig>
      break;
 80080e8:	e00c      	b.n	8008104 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4619      	mov	r1, r3
 80080f4:	4610      	mov	r0, r2
 80080f6:	f000 fc22 	bl	800893e <TIM_ITRx_SetConfig>
      break;
 80080fa:	e003      	b.n	8008104 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008100:	e000      	b.n	8008104 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008102:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008114:	7bfb      	ldrb	r3, [r7, #15]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800811e:	b480      	push	{r7}
 8008120:	b083      	sub	sp, #12
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008126:	bf00      	nop
 8008128:	370c      	adds	r7, #12
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr

08008132 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008132:	b480      	push	{r7}
 8008134:	b083      	sub	sp, #12
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800813a:	bf00      	nop
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008146:	b480      	push	{r7}
 8008148:	b083      	sub	sp, #12
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800814e:	bf00      	nop
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr

0800815a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800815a:	b480      	push	{r7}
 800815c:	b083      	sub	sp, #12
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008162:	bf00      	nop
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800816e:	b480      	push	{r7}
 8008170:	b083      	sub	sp, #12
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008176:	bf00      	nop
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008182:	b480      	push	{r7}
 8008184:	b083      	sub	sp, #12
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800818a:	bf00      	nop
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008196:	b480      	push	{r7}
 8008198:	b083      	sub	sp, #12
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800819e:	bf00      	nop
 80081a0:	370c      	adds	r7, #12
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b083      	sub	sp, #12
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80081b2:	bf00      	nop
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80081be:	b480      	push	{r7}
 80081c0:	b083      	sub	sp, #12
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80081c6:	bf00      	nop
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
	...

080081d4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b087      	sub	sp, #28
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	460b      	mov	r3, r1
 80081de:	607a      	str	r2, [r7, #4]
 80081e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80081e2:	2300      	movs	r3, #0
 80081e4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d101      	bne.n	80081f0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e135      	b.n	800845c <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d101      	bne.n	80081fe <HAL_TIM_RegisterCallback+0x2a>
 80081fa:	2302      	movs	r3, #2
 80081fc:	e12e      	b.n	800845c <HAL_TIM_RegisterCallback+0x288>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800820c:	b2db      	uxtb	r3, r3
 800820e:	2b01      	cmp	r3, #1
 8008210:	f040 80ba 	bne.w	8008388 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8008214:	7afb      	ldrb	r3, [r7, #11]
 8008216:	2b1a      	cmp	r3, #26
 8008218:	f200 80b3 	bhi.w	8008382 <HAL_TIM_RegisterCallback+0x1ae>
 800821c:	a201      	add	r2, pc, #4	; (adr r2, 8008224 <HAL_TIM_RegisterCallback+0x50>)
 800821e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008222:	bf00      	nop
 8008224:	08008291 	.word	0x08008291
 8008228:	08008299 	.word	0x08008299
 800822c:	080082a1 	.word	0x080082a1
 8008230:	080082a9 	.word	0x080082a9
 8008234:	080082b1 	.word	0x080082b1
 8008238:	080082b9 	.word	0x080082b9
 800823c:	080082c1 	.word	0x080082c1
 8008240:	080082c9 	.word	0x080082c9
 8008244:	080082d1 	.word	0x080082d1
 8008248:	080082d9 	.word	0x080082d9
 800824c:	080082e1 	.word	0x080082e1
 8008250:	080082e9 	.word	0x080082e9
 8008254:	080082f1 	.word	0x080082f1
 8008258:	080082f9 	.word	0x080082f9
 800825c:	08008301 	.word	0x08008301
 8008260:	0800830b 	.word	0x0800830b
 8008264:	08008315 	.word	0x08008315
 8008268:	0800831f 	.word	0x0800831f
 800826c:	08008329 	.word	0x08008329
 8008270:	08008333 	.word	0x08008333
 8008274:	0800833d 	.word	0x0800833d
 8008278:	08008347 	.word	0x08008347
 800827c:	08008351 	.word	0x08008351
 8008280:	0800835b 	.word	0x0800835b
 8008284:	08008365 	.word	0x08008365
 8008288:	0800836f 	.word	0x0800836f
 800828c:	08008379 	.word	0x08008379
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8008296:	e0dc      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800829e:	e0d8      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80082a6:	e0d4      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80082ae:	e0d0      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80082b6:	e0cc      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80082be:	e0c8      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80082c6:	e0c4      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80082ce:	e0c0      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80082d6:	e0bc      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80082de:	e0b8      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80082e6:	e0b4      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80082ee:	e0b0      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80082f6:	e0ac      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80082fe:	e0a8      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8008308:	e0a3      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8008312:	e09e      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800831c:	e099      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8008326:	e094      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8008330:	e08f      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800833a:	e08a      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8008344:	e085      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800834e:	e080      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8008358:	e07b      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8008362:	e076      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800836c:	e071      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8008376:	e06c      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8008380:	e067      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	75fb      	strb	r3, [r7, #23]
        break;
 8008386:	e064      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b00      	cmp	r3, #0
 8008392:	d15c      	bne.n	800844e <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8008394:	7afb      	ldrb	r3, [r7, #11]
 8008396:	2b0d      	cmp	r3, #13
 8008398:	d856      	bhi.n	8008448 <HAL_TIM_RegisterCallback+0x274>
 800839a:	a201      	add	r2, pc, #4	; (adr r2, 80083a0 <HAL_TIM_RegisterCallback+0x1cc>)
 800839c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a0:	080083d9 	.word	0x080083d9
 80083a4:	080083e1 	.word	0x080083e1
 80083a8:	080083e9 	.word	0x080083e9
 80083ac:	080083f1 	.word	0x080083f1
 80083b0:	080083f9 	.word	0x080083f9
 80083b4:	08008401 	.word	0x08008401
 80083b8:	08008409 	.word	0x08008409
 80083bc:	08008411 	.word	0x08008411
 80083c0:	08008419 	.word	0x08008419
 80083c4:	08008421 	.word	0x08008421
 80083c8:	08008429 	.word	0x08008429
 80083cc:	08008431 	.word	0x08008431
 80083d0:	08008439 	.word	0x08008439
 80083d4:	08008441 	.word	0x08008441
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80083de:	e038      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80083e6:	e034      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80083ee:	e030      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80083f6:	e02c      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80083fe:	e028      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8008406:	e024      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800840e:	e020      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8008416:	e01c      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800841e:	e018      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008426:	e014      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800842e:	e010      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8008436:	e00c      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800843e:	e008      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8008446:	e004      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	75fb      	strb	r3, [r7, #23]
        break;
 800844c:	e001      	b.n	8008452 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800845a:	7dfb      	ldrb	r3, [r7, #23]
}
 800845c:	4618      	mov	r0, r3
 800845e:	371c      	adds	r7, #28
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a34      	ldr	r2, [pc, #208]	; (800854c <TIM_Base_SetConfig+0xe4>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d00f      	beq.n	80084a0 <TIM_Base_SetConfig+0x38>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008486:	d00b      	beq.n	80084a0 <TIM_Base_SetConfig+0x38>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a31      	ldr	r2, [pc, #196]	; (8008550 <TIM_Base_SetConfig+0xe8>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d007      	beq.n	80084a0 <TIM_Base_SetConfig+0x38>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a30      	ldr	r2, [pc, #192]	; (8008554 <TIM_Base_SetConfig+0xec>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d003      	beq.n	80084a0 <TIM_Base_SetConfig+0x38>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a2f      	ldr	r2, [pc, #188]	; (8008558 <TIM_Base_SetConfig+0xf0>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d108      	bne.n	80084b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a25      	ldr	r2, [pc, #148]	; (800854c <TIM_Base_SetConfig+0xe4>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d01b      	beq.n	80084f2 <TIM_Base_SetConfig+0x8a>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084c0:	d017      	beq.n	80084f2 <TIM_Base_SetConfig+0x8a>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a22      	ldr	r2, [pc, #136]	; (8008550 <TIM_Base_SetConfig+0xe8>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d013      	beq.n	80084f2 <TIM_Base_SetConfig+0x8a>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a21      	ldr	r2, [pc, #132]	; (8008554 <TIM_Base_SetConfig+0xec>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d00f      	beq.n	80084f2 <TIM_Base_SetConfig+0x8a>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a20      	ldr	r2, [pc, #128]	; (8008558 <TIM_Base_SetConfig+0xf0>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d00b      	beq.n	80084f2 <TIM_Base_SetConfig+0x8a>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a1f      	ldr	r2, [pc, #124]	; (800855c <TIM_Base_SetConfig+0xf4>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d007      	beq.n	80084f2 <TIM_Base_SetConfig+0x8a>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a1e      	ldr	r2, [pc, #120]	; (8008560 <TIM_Base_SetConfig+0xf8>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d003      	beq.n	80084f2 <TIM_Base_SetConfig+0x8a>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a1d      	ldr	r2, [pc, #116]	; (8008564 <TIM_Base_SetConfig+0xfc>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d108      	bne.n	8008504 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	4313      	orrs	r3, r2
 8008502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	4313      	orrs	r3, r2
 8008510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	689a      	ldr	r2, [r3, #8]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a08      	ldr	r2, [pc, #32]	; (800854c <TIM_Base_SetConfig+0xe4>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d103      	bne.n	8008538 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	691a      	ldr	r2, [r3, #16]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	615a      	str	r2, [r3, #20]
}
 800853e:	bf00      	nop
 8008540:	3714      	adds	r7, #20
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	40010000 	.word	0x40010000
 8008550:	40000400 	.word	0x40000400
 8008554:	40000800 	.word	0x40000800
 8008558:	40000c00 	.word	0x40000c00
 800855c:	40014000 	.word	0x40014000
 8008560:	40014400 	.word	0x40014400
 8008564:	40014800 	.word	0x40014800

08008568 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008568:	b480      	push	{r7}
 800856a:	b087      	sub	sp, #28
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a1b      	ldr	r3, [r3, #32]
 8008576:	f023 0201 	bic.w	r2, r3, #1
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a1b      	ldr	r3, [r3, #32]
 8008582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f023 0303 	bic.w	r3, r3, #3
 800859e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	f023 0302 	bic.w	r3, r3, #2
 80085b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a1c      	ldr	r2, [pc, #112]	; (8008630 <TIM_OC1_SetConfig+0xc8>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d10c      	bne.n	80085de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	f023 0308 	bic.w	r3, r3, #8
 80085ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	697a      	ldr	r2, [r7, #20]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	f023 0304 	bic.w	r3, r3, #4
 80085dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a13      	ldr	r2, [pc, #76]	; (8008630 <TIM_OC1_SetConfig+0xc8>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d111      	bne.n	800860a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	693a      	ldr	r2, [r7, #16]
 8008606:	4313      	orrs	r3, r2
 8008608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	685a      	ldr	r2, [r3, #4]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	697a      	ldr	r2, [r7, #20]
 8008622:	621a      	str	r2, [r3, #32]
}
 8008624:	bf00      	nop
 8008626:	371c      	adds	r7, #28
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr
 8008630:	40010000 	.word	0x40010000

08008634 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008634:	b480      	push	{r7}
 8008636:	b087      	sub	sp, #28
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a1b      	ldr	r3, [r3, #32]
 8008642:	f023 0210 	bic.w	r2, r3, #16
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a1b      	ldr	r3, [r3, #32]
 800864e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800866a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	021b      	lsls	r3, r3, #8
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	4313      	orrs	r3, r2
 8008676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	f023 0320 	bic.w	r3, r3, #32
 800867e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	011b      	lsls	r3, r3, #4
 8008686:	697a      	ldr	r2, [r7, #20]
 8008688:	4313      	orrs	r3, r2
 800868a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a1e      	ldr	r2, [pc, #120]	; (8008708 <TIM_OC2_SetConfig+0xd4>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d10d      	bne.n	80086b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800869a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	011b      	lsls	r3, r3, #4
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a15      	ldr	r2, [pc, #84]	; (8008708 <TIM_OC2_SetConfig+0xd4>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d113      	bne.n	80086e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	693a      	ldr	r2, [r7, #16]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	699b      	ldr	r3, [r3, #24]
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	4313      	orrs	r3, r2
 80086de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	685a      	ldr	r2, [r3, #4]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	621a      	str	r2, [r3, #32]
}
 80086fa:	bf00      	nop
 80086fc:	371c      	adds	r7, #28
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	40010000 	.word	0x40010000

0800870c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800870c:	b480      	push	{r7}
 800870e:	b087      	sub	sp, #28
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a1b      	ldr	r3, [r3, #32]
 800871a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a1b      	ldr	r3, [r3, #32]
 8008726:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	69db      	ldr	r3, [r3, #28]
 8008732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800873a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f023 0303 	bic.w	r3, r3, #3
 8008742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	4313      	orrs	r3, r2
 800874c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	021b      	lsls	r3, r3, #8
 800875c:	697a      	ldr	r2, [r7, #20]
 800875e:	4313      	orrs	r3, r2
 8008760:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a1d      	ldr	r2, [pc, #116]	; (80087dc <TIM_OC3_SetConfig+0xd0>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d10d      	bne.n	8008786 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008770:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	021b      	lsls	r3, r3, #8
 8008778:	697a      	ldr	r2, [r7, #20]
 800877a:	4313      	orrs	r3, r2
 800877c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a14      	ldr	r2, [pc, #80]	; (80087dc <TIM_OC3_SetConfig+0xd0>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d113      	bne.n	80087b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800879c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	011b      	lsls	r3, r3, #4
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	011b      	lsls	r3, r3, #4
 80087b0:	693a      	ldr	r2, [r7, #16]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	693a      	ldr	r2, [r7, #16]
 80087ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	685a      	ldr	r2, [r3, #4]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	621a      	str	r2, [r3, #32]
}
 80087d0:	bf00      	nop
 80087d2:	371c      	adds	r7, #28
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr
 80087dc:	40010000 	.word	0x40010000

080087e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b087      	sub	sp, #28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a1b      	ldr	r3, [r3, #32]
 80087fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800880e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	021b      	lsls	r3, r3, #8
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	4313      	orrs	r3, r2
 8008822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800882a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	031b      	lsls	r3, r3, #12
 8008832:	693a      	ldr	r2, [r7, #16]
 8008834:	4313      	orrs	r3, r2
 8008836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a10      	ldr	r2, [pc, #64]	; (800887c <TIM_OC4_SetConfig+0x9c>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d109      	bne.n	8008854 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008846:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	695b      	ldr	r3, [r3, #20]
 800884c:	019b      	lsls	r3, r3, #6
 800884e:	697a      	ldr	r2, [r7, #20]
 8008850:	4313      	orrs	r3, r2
 8008852:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	685a      	ldr	r2, [r3, #4]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	693a      	ldr	r2, [r7, #16]
 800886c:	621a      	str	r2, [r3, #32]
}
 800886e:	bf00      	nop
 8008870:	371c      	adds	r7, #28
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	40010000 	.word	0x40010000

08008880 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008880:	b480      	push	{r7}
 8008882:	b087      	sub	sp, #28
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6a1b      	ldr	r3, [r3, #32]
 8008890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6a1b      	ldr	r3, [r3, #32]
 8008896:	f023 0201 	bic.w	r2, r3, #1
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	699b      	ldr	r3, [r3, #24]
 80088a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	011b      	lsls	r3, r3, #4
 80088b0:	693a      	ldr	r2, [r7, #16]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	f023 030a 	bic.w	r3, r3, #10
 80088bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088be:	697a      	ldr	r2, [r7, #20]
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	693a      	ldr	r2, [r7, #16]
 80088ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	621a      	str	r2, [r3, #32]
}
 80088d2:	bf00      	nop
 80088d4:	371c      	adds	r7, #28
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088de:	b480      	push	{r7}
 80088e0:	b087      	sub	sp, #28
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	60f8      	str	r0, [r7, #12]
 80088e6:	60b9      	str	r1, [r7, #8]
 80088e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6a1b      	ldr	r3, [r3, #32]
 80088ee:	f023 0210 	bic.w	r2, r3, #16
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6a1b      	ldr	r3, [r3, #32]
 8008900:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008908:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	031b      	lsls	r3, r3, #12
 800890e:	697a      	ldr	r2, [r7, #20]
 8008910:	4313      	orrs	r3, r2
 8008912:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800891a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	011b      	lsls	r3, r3, #4
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	4313      	orrs	r3, r2
 8008924:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	693a      	ldr	r2, [r7, #16]
 8008930:	621a      	str	r2, [r3, #32]
}
 8008932:	bf00      	nop
 8008934:	371c      	adds	r7, #28
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr

0800893e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800893e:	b480      	push	{r7}
 8008940:	b085      	sub	sp, #20
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
 8008946:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008954:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008956:	683a      	ldr	r2, [r7, #0]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	4313      	orrs	r3, r2
 800895c:	f043 0307 	orr.w	r3, r3, #7
 8008960:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	609a      	str	r2, [r3, #8]
}
 8008968:	bf00      	nop
 800896a:	3714      	adds	r7, #20
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008974:	b480      	push	{r7}
 8008976:	b087      	sub	sp, #28
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
 8008980:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800898e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	021a      	lsls	r2, r3, #8
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	431a      	orrs	r2, r3
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	4313      	orrs	r3, r2
 800899c:	697a      	ldr	r2, [r7, #20]
 800899e:	4313      	orrs	r3, r2
 80089a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	609a      	str	r2, [r3, #8]
}
 80089a8:	bf00      	nop
 80089aa:	371c      	adds	r7, #28
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b087      	sub	sp, #28
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	f003 031f 	and.w	r3, r3, #31
 80089c6:	2201      	movs	r2, #1
 80089c8:	fa02 f303 	lsl.w	r3, r2, r3
 80089cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6a1a      	ldr	r2, [r3, #32]
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	43db      	mvns	r3, r3
 80089d6:	401a      	ands	r2, r3
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6a1a      	ldr	r2, [r3, #32]
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	f003 031f 	and.w	r3, r3, #31
 80089e6:	6879      	ldr	r1, [r7, #4]
 80089e8:	fa01 f303 	lsl.w	r3, r1, r3
 80089ec:	431a      	orrs	r2, r3
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	621a      	str	r2, [r3, #32]
}
 80089f2:	bf00      	nop
 80089f4:	371c      	adds	r7, #28
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr
	...

08008a00 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a1c      	ldr	r2, [pc, #112]	; (8008a7c <TIM_ResetCallback+0x7c>)
 8008a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a1b      	ldr	r2, [pc, #108]	; (8008a80 <TIM_ResetCallback+0x80>)
 8008a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a1a      	ldr	r2, [pc, #104]	; (8008a84 <TIM_ResetCallback+0x84>)
 8008a1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4a19      	ldr	r2, [pc, #100]	; (8008a88 <TIM_ResetCallback+0x88>)
 8008a24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4a18      	ldr	r2, [pc, #96]	; (8008a8c <TIM_ResetCallback+0x8c>)
 8008a2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a17      	ldr	r2, [pc, #92]	; (8008a90 <TIM_ResetCallback+0x90>)
 8008a34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a16      	ldr	r2, [pc, #88]	; (8008a94 <TIM_ResetCallback+0x94>)
 8008a3c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a15      	ldr	r2, [pc, #84]	; (8008a98 <TIM_ResetCallback+0x98>)
 8008a44:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a14      	ldr	r2, [pc, #80]	; (8008a9c <TIM_ResetCallback+0x9c>)
 8008a4c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4a13      	ldr	r2, [pc, #76]	; (8008aa0 <TIM_ResetCallback+0xa0>)
 8008a54:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a12      	ldr	r2, [pc, #72]	; (8008aa4 <TIM_ResetCallback+0xa4>)
 8008a5c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a11      	ldr	r2, [pc, #68]	; (8008aa8 <TIM_ResetCallback+0xa8>)
 8008a64:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a10      	ldr	r2, [pc, #64]	; (8008aac <TIM_ResetCallback+0xac>)
 8008a6c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	08004661 	.word	0x08004661
 8008a80:	0800811f 	.word	0x0800811f
 8008a84:	08008197 	.word	0x08008197
 8008a88:	080081ab 	.word	0x080081ab
 8008a8c:	08008147 	.word	0x08008147
 8008a90:	0800815b 	.word	0x0800815b
 8008a94:	08008133 	.word	0x08008133
 8008a98:	0800816f 	.word	0x0800816f
 8008a9c:	08008183 	.word	0x08008183
 8008aa0:	080081bf 	.word	0x080081bf
 8008aa4:	08008b8d 	.word	0x08008b8d
 8008aa8:	08008ba1 	.word	0x08008ba1
 8008aac:	08008bb5 	.word	0x08008bb5

08008ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d101      	bne.n	8008ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ac4:	2302      	movs	r3, #2
 8008ac6:	e050      	b.n	8008b6a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2202      	movs	r2, #2
 8008ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a1c      	ldr	r2, [pc, #112]	; (8008b78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d018      	beq.n	8008b3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b14:	d013      	beq.n	8008b3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a18      	ldr	r2, [pc, #96]	; (8008b7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d00e      	beq.n	8008b3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a16      	ldr	r2, [pc, #88]	; (8008b80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d009      	beq.n	8008b3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a15      	ldr	r2, [pc, #84]	; (8008b84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d004      	beq.n	8008b3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a13      	ldr	r2, [pc, #76]	; (8008b88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d10c      	bne.n	8008b58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3714      	adds	r7, #20
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	40010000 	.word	0x40010000
 8008b7c:	40000400 	.word	0x40000400
 8008b80:	40000800 	.word	0x40000800
 8008b84:	40000c00 	.word	0x40000c00
 8008b88:	40014000 	.word	0x40014000

08008b8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b94:	bf00      	nop
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008ba8:	bf00      	nop
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e04a      	b.n	8008c70 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d111      	bne.n	8008c0a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 fd2c 	bl	800964c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d102      	bne.n	8008c02 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a1e      	ldr	r2, [pc, #120]	; (8008c78 <HAL_UART_Init+0xb0>)
 8008c00:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2224      	movs	r2, #36	; 0x24
 8008c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68da      	ldr	r2, [r3, #12]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c20:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 fff6 	bl	8009c14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	691a      	ldr	r2, [r3, #16]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c36:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	695a      	ldr	r2, [r3, #20]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c46:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	68da      	ldr	r2, [r3, #12]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c56:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2220      	movs	r2, #32
 8008c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2220      	movs	r2, #32
 8008c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	08004c65 	.word	0x08004c65

08008c7c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b087      	sub	sp, #28
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	460b      	mov	r3, r1
 8008c86:	607a      	str	r2, [r7, #4]
 8008c88:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d107      	bne.n	8008ca4 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c98:	f043 0220 	orr.w	r2, r3, #32
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e08c      	b.n	8008dbe <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d101      	bne.n	8008cb2 <HAL_UART_RegisterCallback+0x36>
 8008cae:	2302      	movs	r3, #2
 8008cb0:	e085      	b.n	8008dbe <HAL_UART_RegisterCallback+0x142>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	2b20      	cmp	r3, #32
 8008cc4:	d151      	bne.n	8008d6a <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8008cc6:	7afb      	ldrb	r3, [r7, #11]
 8008cc8:	2b0c      	cmp	r3, #12
 8008cca:	d845      	bhi.n	8008d58 <HAL_UART_RegisterCallback+0xdc>
 8008ccc:	a201      	add	r2, pc, #4	; (adr r2, 8008cd4 <HAL_UART_RegisterCallback+0x58>)
 8008cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd2:	bf00      	nop
 8008cd4:	08008d09 	.word	0x08008d09
 8008cd8:	08008d11 	.word	0x08008d11
 8008cdc:	08008d19 	.word	0x08008d19
 8008ce0:	08008d21 	.word	0x08008d21
 8008ce4:	08008d29 	.word	0x08008d29
 8008ce8:	08008d31 	.word	0x08008d31
 8008cec:	08008d39 	.word	0x08008d39
 8008cf0:	08008d41 	.word	0x08008d41
 8008cf4:	08008d59 	.word	0x08008d59
 8008cf8:	08008d59 	.word	0x08008d59
 8008cfc:	08008d59 	.word	0x08008d59
 8008d00:	08008d49 	.word	0x08008d49
 8008d04:	08008d51 	.word	0x08008d51
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8008d0e:	e051      	b.n	8008db4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8008d16:	e04d      	b.n	8008db4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8008d1e:	e049      	b.n	8008db4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8008d26:	e045      	b.n	8008db4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8008d2e:	e041      	b.n	8008db4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8008d36:	e03d      	b.n	8008db4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8008d3e:	e039      	b.n	8008db4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8008d46:	e035      	b.n	8008db4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008d4e:	e031      	b.n	8008db4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008d56:	e02d      	b.n	8008db4 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5c:	f043 0220 	orr.w	r2, r3, #32
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	75fb      	strb	r3, [r7, #23]
        break;
 8008d68:	e024      	b.n	8008db4 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d116      	bne.n	8008da4 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8008d76:	7afb      	ldrb	r3, [r7, #11]
 8008d78:	2b0b      	cmp	r3, #11
 8008d7a:	d002      	beq.n	8008d82 <HAL_UART_RegisterCallback+0x106>
 8008d7c:	2b0c      	cmp	r3, #12
 8008d7e:	d004      	beq.n	8008d8a <HAL_UART_RegisterCallback+0x10e>
 8008d80:	e007      	b.n	8008d92 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008d88:	e014      	b.n	8008db4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008d90:	e010      	b.n	8008db4 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d96:	f043 0220 	orr.w	r2, r3, #32
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	75fb      	strb	r3, [r7, #23]
        break;
 8008da2:	e007      	b.n	8008db4 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da8:	f043 0220 	orr.w	r2, r3, #32
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	371c      	adds	r7, #28
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop

08008dcc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	2b20      	cmp	r3, #32
 8008de4:	d11d      	bne.n	8008e22 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d002      	beq.n	8008df2 <HAL_UART_Receive_IT+0x26>
 8008dec:	88fb      	ldrh	r3, [r7, #6]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d101      	bne.n	8008df6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	e016      	b.n	8008e24 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d101      	bne.n	8008e04 <HAL_UART_Receive_IT+0x38>
 8008e00:	2302      	movs	r3, #2
 8008e02:	e00f      	b.n	8008e24 <HAL_UART_Receive_IT+0x58>
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008e12:	88fb      	ldrh	r3, [r7, #6]
 8008e14:	461a      	mov	r2, r3
 8008e16:	68b9      	ldr	r1, [r7, #8]
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f000 fcf7 	bl	800980c <UART_Start_Receive_IT>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	e000      	b.n	8008e24 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008e22:	2302      	movs	r3, #2
  }
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b08c      	sub	sp, #48	; 0x30
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	4613      	mov	r3, r2
 8008e38:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	2b20      	cmp	r3, #32
 8008e44:	d165      	bne.n	8008f12 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d002      	beq.n	8008e52 <HAL_UART_Transmit_DMA+0x26>
 8008e4c:	88fb      	ldrh	r3, [r7, #6]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d101      	bne.n	8008e56 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e05e      	b.n	8008f14 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d101      	bne.n	8008e64 <HAL_UART_Transmit_DMA+0x38>
 8008e60:	2302      	movs	r3, #2
 8008e62:	e057      	b.n	8008f14 <HAL_UART_Transmit_DMA+0xe8>
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	88fa      	ldrh	r2, [r7, #6]
 8008e76:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	88fa      	ldrh	r2, [r7, #6]
 8008e7c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2221      	movs	r2, #33	; 0x21
 8008e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e90:	4a22      	ldr	r2, [pc, #136]	; (8008f1c <HAL_UART_Transmit_DMA+0xf0>)
 8008e92:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e98:	4a21      	ldr	r2, [pc, #132]	; (8008f20 <HAL_UART_Transmit_DMA+0xf4>)
 8008e9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea0:	4a20      	ldr	r2, [pc, #128]	; (8008f24 <HAL_UART_Transmit_DMA+0xf8>)
 8008ea2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008eac:	f107 0308 	add.w	r3, r7, #8
 8008eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb8:	6819      	ldr	r1, [r3, #0]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3304      	adds	r3, #4
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	88fb      	ldrh	r3, [r7, #6]
 8008ec4:	f7fc fe64 	bl	8005b90 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ed0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	3314      	adds	r3, #20
 8008ee0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	e853 3f00 	ldrex	r3, [r3]
 8008ee8:	617b      	str	r3, [r7, #20]
   return(result);
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ef0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	3314      	adds	r3, #20
 8008ef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008efa:	627a      	str	r2, [r7, #36]	; 0x24
 8008efc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efe:	6a39      	ldr	r1, [r7, #32]
 8008f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f02:	e841 2300 	strex	r3, r2, [r1]
 8008f06:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1e5      	bne.n	8008eda <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	e000      	b.n	8008f14 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008f12:	2302      	movs	r3, #2
  }
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3730      	adds	r7, #48	; 0x30
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	080096bd 	.word	0x080096bd
 8008f20:	08009759 	.word	0x08009759
 8008f24:	08009777 	.word	0x08009777

08008f28 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b09a      	sub	sp, #104	; 0x68
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	330c      	adds	r3, #12
 8008f36:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f3a:	e853 3f00 	ldrex	r3, [r3]
 8008f3e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f46:	667b      	str	r3, [r7, #100]	; 0x64
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	330c      	adds	r3, #12
 8008f4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008f50:	657a      	str	r2, [r7, #84]	; 0x54
 8008f52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f54:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f58:	e841 2300 	strex	r3, r2, [r1]
 8008f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d1e5      	bne.n	8008f30 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	3314      	adds	r3, #20
 8008f6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f6e:	e853 3f00 	ldrex	r3, [r3]
 8008f72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f76:	f023 0301 	bic.w	r3, r3, #1
 8008f7a:	663b      	str	r3, [r7, #96]	; 0x60
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	3314      	adds	r3, #20
 8008f82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f84:	643a      	str	r2, [r7, #64]	; 0x40
 8008f86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f8c:	e841 2300 	strex	r3, r2, [r1]
 8008f90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1e5      	bne.n	8008f64 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d119      	bne.n	8008fd4 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	330c      	adds	r3, #12
 8008fa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa8:	6a3b      	ldr	r3, [r7, #32]
 8008faa:	e853 3f00 	ldrex	r3, [r3]
 8008fae:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	f023 0310 	bic.w	r3, r3, #16
 8008fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	330c      	adds	r3, #12
 8008fbe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008fc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fc8:	e841 2300 	strex	r3, r2, [r1]
 8008fcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1e5      	bne.n	8008fa0 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fde:	2b40      	cmp	r3, #64	; 0x40
 8008fe0:	d136      	bne.n	8009050 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	3314      	adds	r3, #20
 8008fe8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	e853 3f00 	ldrex	r3, [r3]
 8008ff0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ff8:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	3314      	adds	r3, #20
 8009000:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009002:	61ba      	str	r2, [r7, #24]
 8009004:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009006:	6979      	ldr	r1, [r7, #20]
 8009008:	69ba      	ldr	r2, [r7, #24]
 800900a:	e841 2300 	strex	r3, r2, [r1]
 800900e:	613b      	str	r3, [r7, #16]
   return(result);
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1e5      	bne.n	8008fe2 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901a:	2b00      	cmp	r3, #0
 800901c:	d018      	beq.n	8009050 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009022:	2200      	movs	r2, #0
 8009024:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902a:	4618      	mov	r0, r3
 800902c:	f7fc fe08 	bl	8005c40 <HAL_DMA_Abort>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00c      	beq.n	8009050 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800903a:	4618      	mov	r0, r3
 800903c:	f7fd f81c 	bl	8006078 <HAL_DMA_GetError>
 8009040:	4603      	mov	r3, r0
 8009042:	2b20      	cmp	r3, #32
 8009044:	d104      	bne.n	8009050 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2210      	movs	r2, #16
 800904a:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800904c:	2303      	movs	r3, #3
 800904e:	e00a      	b.n	8009066 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2220      	movs	r2, #32
 800905a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3768      	adds	r7, #104	; 0x68
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
	...

08009070 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b0ba      	sub	sp, #232	; 0xe8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	695b      	ldr	r3, [r3, #20]
 8009092:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009096:	2300      	movs	r3, #0
 8009098:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800909c:	2300      	movs	r3, #0
 800909e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80090a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090a6:	f003 030f 	and.w	r3, r3, #15
 80090aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80090ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d10f      	bne.n	80090d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80090b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ba:	f003 0320 	and.w	r3, r3, #32
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d009      	beq.n	80090d6 <HAL_UART_IRQHandler+0x66>
 80090c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090c6:	f003 0320 	and.w	r3, r3, #32
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d003      	beq.n	80090d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fce3 	bl	8009a9a <UART_Receive_IT>
      return;
 80090d4:	e25b      	b.n	800958e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80090d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f000 80e1 	beq.w	80092a2 <HAL_UART_IRQHandler+0x232>
 80090e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090e4:	f003 0301 	and.w	r3, r3, #1
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d106      	bne.n	80090fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80090ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f000 80d4 	beq.w	80092a2 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80090fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090fe:	f003 0301 	and.w	r3, r3, #1
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00b      	beq.n	800911e <HAL_UART_IRQHandler+0xae>
 8009106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800910a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800910e:	2b00      	cmp	r3, #0
 8009110:	d005      	beq.n	800911e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009116:	f043 0201 	orr.w	r2, r3, #1
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800911e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009122:	f003 0304 	and.w	r3, r3, #4
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00b      	beq.n	8009142 <HAL_UART_IRQHandler+0xd2>
 800912a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800912e:	f003 0301 	and.w	r3, r3, #1
 8009132:	2b00      	cmp	r3, #0
 8009134:	d005      	beq.n	8009142 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913a:	f043 0202 	orr.w	r2, r3, #2
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009146:	f003 0302 	and.w	r3, r3, #2
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00b      	beq.n	8009166 <HAL_UART_IRQHandler+0xf6>
 800914e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009152:	f003 0301 	and.w	r3, r3, #1
 8009156:	2b00      	cmp	r3, #0
 8009158:	d005      	beq.n	8009166 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800915e:	f043 0204 	orr.w	r2, r3, #4
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800916a:	f003 0308 	and.w	r3, r3, #8
 800916e:	2b00      	cmp	r3, #0
 8009170:	d011      	beq.n	8009196 <HAL_UART_IRQHandler+0x126>
 8009172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009176:	f003 0320 	and.w	r3, r3, #32
 800917a:	2b00      	cmp	r3, #0
 800917c:	d105      	bne.n	800918a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800917e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009182:	f003 0301 	and.w	r3, r3, #1
 8009186:	2b00      	cmp	r3, #0
 8009188:	d005      	beq.n	8009196 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918e:	f043 0208 	orr.w	r2, r3, #8
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919a:	2b00      	cmp	r3, #0
 800919c:	f000 81f2 	beq.w	8009584 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80091a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091a4:	f003 0320 	and.w	r3, r3, #32
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d008      	beq.n	80091be <HAL_UART_IRQHandler+0x14e>
 80091ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091b0:	f003 0320 	and.w	r3, r3, #32
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d002      	beq.n	80091be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fc6e 	bl	8009a9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	695b      	ldr	r3, [r3, #20]
 80091c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091c8:	2b40      	cmp	r3, #64	; 0x40
 80091ca:	bf0c      	ite	eq
 80091cc:	2301      	moveq	r3, #1
 80091ce:	2300      	movne	r3, #0
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091da:	f003 0308 	and.w	r3, r3, #8
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d103      	bne.n	80091ea <HAL_UART_IRQHandler+0x17a>
 80091e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d051      	beq.n	800928e <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fb74 	bl	80098d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091fa:	2b40      	cmp	r3, #64	; 0x40
 80091fc:	d142      	bne.n	8009284 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	3314      	adds	r3, #20
 8009204:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009208:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800920c:	e853 3f00 	ldrex	r3, [r3]
 8009210:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009214:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800921c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	3314      	adds	r3, #20
 8009226:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800922a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800922e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009232:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009236:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800923a:	e841 2300 	strex	r3, r2, [r1]
 800923e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009242:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1d9      	bne.n	80091fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800924e:	2b00      	cmp	r3, #0
 8009250:	d013      	beq.n	800927a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009256:	4a7f      	ldr	r2, [pc, #508]	; (8009454 <HAL_UART_IRQHandler+0x3e4>)
 8009258:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800925e:	4618      	mov	r0, r3
 8009260:	f7fc fd5e 	bl	8005d20 <HAL_DMA_Abort_IT>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d019      	beq.n	800929e <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800926e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009274:	4610      	mov	r0, r2
 8009276:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009278:	e011      	b.n	800929e <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009282:	e00c      	b.n	800929e <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800928c:	e007      	b.n	800929e <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800929c:	e172      	b.n	8009584 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800929e:	bf00      	nop
    return;
 80092a0:	e170      	b.n	8009584 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	f040 814c 	bne.w	8009544 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80092ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092b0:	f003 0310 	and.w	r3, r3, #16
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f000 8145 	beq.w	8009544 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80092ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092be:	f003 0310 	and.w	r3, r3, #16
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	f000 813e 	beq.w	8009544 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80092c8:	2300      	movs	r3, #0
 80092ca:	60bb      	str	r3, [r7, #8]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	60bb      	str	r3, [r7, #8]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	60bb      	str	r3, [r7, #8]
 80092dc:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	695b      	ldr	r3, [r3, #20]
 80092e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e8:	2b40      	cmp	r3, #64	; 0x40
 80092ea:	f040 80b5 	bne.w	8009458 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80092fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f000 8142 	beq.w	8009588 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009308:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800930c:	429a      	cmp	r2, r3
 800930e:	f080 813b 	bcs.w	8009588 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009318:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931e:	69db      	ldr	r3, [r3, #28]
 8009320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009324:	f000 8088 	beq.w	8009438 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	330c      	adds	r3, #12
 800932e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009332:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009336:	e853 3f00 	ldrex	r3, [r3]
 800933a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800933e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009342:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009346:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	330c      	adds	r3, #12
 8009350:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009354:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009358:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009360:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009364:	e841 2300 	strex	r3, r2, [r1]
 8009368:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800936c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1d9      	bne.n	8009328 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	3314      	adds	r3, #20
 800937a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800937e:	e853 3f00 	ldrex	r3, [r3]
 8009382:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009384:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009386:	f023 0301 	bic.w	r3, r3, #1
 800938a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	3314      	adds	r3, #20
 8009394:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009398:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800939c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80093a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80093a4:	e841 2300 	strex	r3, r2, [r1]
 80093a8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80093aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d1e1      	bne.n	8009374 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	3314      	adds	r3, #20
 80093b6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093ba:	e853 3f00 	ldrex	r3, [r3]
 80093be:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80093c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	3314      	adds	r3, #20
 80093d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80093d4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80093d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80093da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80093dc:	e841 2300 	strex	r3, r2, [r1]
 80093e0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80093e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1e3      	bne.n	80093b0 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2220      	movs	r2, #32
 80093ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	330c      	adds	r3, #12
 80093fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009400:	e853 3f00 	ldrex	r3, [r3]
 8009404:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009408:	f023 0310 	bic.w	r3, r3, #16
 800940c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	330c      	adds	r3, #12
 8009416:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800941a:	65ba      	str	r2, [r7, #88]	; 0x58
 800941c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009420:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009422:	e841 2300 	strex	r3, r2, [r1]
 8009426:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1e3      	bne.n	80093f6 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009432:	4618      	mov	r0, r3
 8009434:	f7fc fc04 	bl	8005c40 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8009444:	b292      	uxth	r2, r2
 8009446:	1a8a      	subs	r2, r1, r2
 8009448:	b292      	uxth	r2, r2
 800944a:	4611      	mov	r1, r2
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009450:	e09a      	b.n	8009588 <HAL_UART_IRQHandler+0x518>
 8009452:	bf00      	nop
 8009454:	0800999f 	.word	0x0800999f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009460:	b29b      	uxth	r3, r3
 8009462:	1ad3      	subs	r3, r2, r3
 8009464:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800946c:	b29b      	uxth	r3, r3
 800946e:	2b00      	cmp	r3, #0
 8009470:	f000 808c 	beq.w	800958c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009474:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009478:	2b00      	cmp	r3, #0
 800947a:	f000 8087 	beq.w	800958c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	330c      	adds	r3, #12
 8009484:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009488:	e853 3f00 	ldrex	r3, [r3]
 800948c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800948e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009490:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009494:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	330c      	adds	r3, #12
 800949e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80094a2:	647a      	str	r2, [r7, #68]	; 0x44
 80094a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094aa:	e841 2300 	strex	r3, r2, [r1]
 80094ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1e3      	bne.n	800947e <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3314      	adds	r3, #20
 80094bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c0:	e853 3f00 	ldrex	r3, [r3]
 80094c4:	623b      	str	r3, [r7, #32]
   return(result);
 80094c6:	6a3b      	ldr	r3, [r7, #32]
 80094c8:	f023 0301 	bic.w	r3, r3, #1
 80094cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	3314      	adds	r3, #20
 80094d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80094da:	633a      	str	r2, [r7, #48]	; 0x30
 80094dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094e2:	e841 2300 	strex	r3, r2, [r1]
 80094e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d1e3      	bne.n	80094b6 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2220      	movs	r2, #32
 80094f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	330c      	adds	r3, #12
 8009502:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	e853 3f00 	ldrex	r3, [r3]
 800950a:	60fb      	str	r3, [r7, #12]
   return(result);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f023 0310 	bic.w	r3, r3, #16
 8009512:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	330c      	adds	r3, #12
 800951c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009520:	61fa      	str	r2, [r7, #28]
 8009522:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009524:	69b9      	ldr	r1, [r7, #24]
 8009526:	69fa      	ldr	r2, [r7, #28]
 8009528:	e841 2300 	strex	r3, r2, [r1]
 800952c:	617b      	str	r3, [r7, #20]
   return(result);
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1e3      	bne.n	80094fc <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009538:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800953c:	4611      	mov	r1, r2
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009542:	e023      	b.n	800958c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800954c:	2b00      	cmp	r3, #0
 800954e:	d009      	beq.n	8009564 <HAL_UART_IRQHandler+0x4f4>
 8009550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009558:	2b00      	cmp	r3, #0
 800955a:	d003      	beq.n	8009564 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 fa33 	bl	80099c8 <UART_Transmit_IT>
    return;
 8009562:	e014      	b.n	800958e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00e      	beq.n	800958e <HAL_UART_IRQHandler+0x51e>
 8009570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009578:	2b00      	cmp	r3, #0
 800957a:	d008      	beq.n	800958e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 fa73 	bl	8009a68 <UART_EndTransmit_IT>
    return;
 8009582:	e004      	b.n	800958e <HAL_UART_IRQHandler+0x51e>
    return;
 8009584:	bf00      	nop
 8009586:	e002      	b.n	800958e <HAL_UART_IRQHandler+0x51e>
      return;
 8009588:	bf00      	nop
 800958a:	e000      	b.n	800958e <HAL_UART_IRQHandler+0x51e>
      return;
 800958c:	bf00      	nop
  }
}
 800958e:	37e8      	adds	r7, #232	; 0xe8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80095c4:	bf00      	nop
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80095ec:	bf00      	nop
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009600:	bf00      	nop
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009614:	bf00      	nop
 8009616:	370c      	adds	r7, #12
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009628:	bf00      	nop
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	460b      	mov	r3, r1
 800963e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009640:	bf00      	nop
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a10      	ldr	r2, [pc, #64]	; (8009698 <UART_InitCallbacksToDefault+0x4c>)
 8009658:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a0f      	ldr	r2, [pc, #60]	; (800969c <UART_InitCallbacksToDefault+0x50>)
 800965e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a0f      	ldr	r2, [pc, #60]	; (80096a0 <UART_InitCallbacksToDefault+0x54>)
 8009664:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a0e      	ldr	r2, [pc, #56]	; (80096a4 <UART_InitCallbacksToDefault+0x58>)
 800966a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a0e      	ldr	r2, [pc, #56]	; (80096a8 <UART_InitCallbacksToDefault+0x5c>)
 8009670:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a0d      	ldr	r2, [pc, #52]	; (80096ac <UART_InitCallbacksToDefault+0x60>)
 8009676:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4a0d      	ldr	r2, [pc, #52]	; (80096b0 <UART_InitCallbacksToDefault+0x64>)
 800967c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a0c      	ldr	r2, [pc, #48]	; (80096b4 <UART_InitCallbacksToDefault+0x68>)
 8009682:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a0c      	ldr	r2, [pc, #48]	; (80096b8 <UART_InitCallbacksToDefault+0x6c>)
 8009688:	669a      	str	r2, [r3, #104]	; 0x68

}
 800968a:	bf00      	nop
 800968c:	370c      	adds	r7, #12
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	080095a9 	.word	0x080095a9
 800969c:	08009595 	.word	0x08009595
 80096a0:	080095d1 	.word	0x080095d1
 80096a4:	080095bd 	.word	0x080095bd
 80096a8:	080095e5 	.word	0x080095e5
 80096ac:	080095f9 	.word	0x080095f9
 80096b0:	0800960d 	.word	0x0800960d
 80096b4:	08009621 	.word	0x08009621
 80096b8:	08009635 	.word	0x08009635

080096bc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b090      	sub	sp, #64	; 0x40
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d137      	bne.n	8009748 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80096d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096da:	2200      	movs	r2, #0
 80096dc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80096de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	3314      	adds	r3, #20
 80096e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e8:	e853 3f00 	ldrex	r3, [r3]
 80096ec:	623b      	str	r3, [r7, #32]
   return(result);
 80096ee:	6a3b      	ldr	r3, [r7, #32]
 80096f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80096f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	3314      	adds	r3, #20
 80096fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096fe:	633a      	str	r2, [r7, #48]	; 0x30
 8009700:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009702:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009706:	e841 2300 	strex	r3, r2, [r1]
 800970a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800970c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1e5      	bne.n	80096de <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	330c      	adds	r3, #12
 8009718:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	e853 3f00 	ldrex	r3, [r3]
 8009720:	60fb      	str	r3, [r7, #12]
   return(result);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009728:	637b      	str	r3, [r7, #52]	; 0x34
 800972a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	330c      	adds	r3, #12
 8009730:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009732:	61fa      	str	r2, [r7, #28]
 8009734:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009736:	69b9      	ldr	r1, [r7, #24]
 8009738:	69fa      	ldr	r2, [r7, #28]
 800973a:	e841 2300 	strex	r3, r2, [r1]
 800973e:	617b      	str	r3, [r7, #20]
   return(result);
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1e5      	bne.n	8009712 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009746:	e003      	b.n	8009750 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8009748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800974a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800974c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800974e:	4798      	blx	r3
}
 8009750:	bf00      	nop
 8009752:	3740      	adds	r7, #64	; 0x40
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009764:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800976e:	bf00      	nop
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b084      	sub	sp, #16
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800977e:	2300      	movs	r3, #0
 8009780:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009786:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	695b      	ldr	r3, [r3, #20]
 800978e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009792:	2b80      	cmp	r3, #128	; 0x80
 8009794:	bf0c      	ite	eq
 8009796:	2301      	moveq	r3, #1
 8009798:	2300      	movne	r3, #0
 800979a:	b2db      	uxtb	r3, r3
 800979c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	2b21      	cmp	r3, #33	; 0x21
 80097a8:	d108      	bne.n	80097bc <UART_DMAError+0x46>
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d005      	beq.n	80097bc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	2200      	movs	r2, #0
 80097b4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80097b6:	68b8      	ldr	r0, [r7, #8]
 80097b8:	f000 f866 	bl	8009888 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	695b      	ldr	r3, [r3, #20]
 80097c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097c6:	2b40      	cmp	r3, #64	; 0x40
 80097c8:	bf0c      	ite	eq
 80097ca:	2301      	moveq	r3, #1
 80097cc:	2300      	movne	r3, #0
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	2b22      	cmp	r3, #34	; 0x22
 80097dc:	d108      	bne.n	80097f0 <UART_DMAError+0x7a>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d005      	beq.n	80097f0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	2200      	movs	r2, #0
 80097e8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80097ea:	68b8      	ldr	r0, [r7, #8]
 80097ec:	f000 f874 	bl	80098d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f4:	f043 0210 	orr.w	r2, r3, #16
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009800:	68b8      	ldr	r0, [r7, #8]
 8009802:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009804:	bf00      	nop
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800980c:	b480      	push	{r7}
 800980e:	b085      	sub	sp, #20
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	4613      	mov	r3, r2
 8009818:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	88fa      	ldrh	r2, [r7, #6]
 8009824:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	88fa      	ldrh	r2, [r7, #6]
 800982a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2200      	movs	r2, #0
 8009830:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2222      	movs	r2, #34	; 0x22
 8009836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2200      	movs	r2, #0
 800983e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d007      	beq.n	800985a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	68da      	ldr	r2, [r3, #12]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009858:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	695a      	ldr	r2, [r3, #20]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f042 0201 	orr.w	r2, r2, #1
 8009868:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	68da      	ldr	r2, [r3, #12]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f042 0220 	orr.w	r2, r2, #32
 8009878:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3714      	adds	r7, #20
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009888:	b480      	push	{r7}
 800988a:	b089      	sub	sp, #36	; 0x24
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	330c      	adds	r3, #12
 8009896:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	e853 3f00 	ldrex	r3, [r3]
 800989e:	60bb      	str	r3, [r7, #8]
   return(result);
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80098a6:	61fb      	str	r3, [r7, #28]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	330c      	adds	r3, #12
 80098ae:	69fa      	ldr	r2, [r7, #28]
 80098b0:	61ba      	str	r2, [r7, #24]
 80098b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b4:	6979      	ldr	r1, [r7, #20]
 80098b6:	69ba      	ldr	r2, [r7, #24]
 80098b8:	e841 2300 	strex	r3, r2, [r1]
 80098bc:	613b      	str	r3, [r7, #16]
   return(result);
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d1e5      	bne.n	8009890 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2220      	movs	r2, #32
 80098c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80098cc:	bf00      	nop
 80098ce:	3724      	adds	r7, #36	; 0x24
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098d8:	b480      	push	{r7}
 80098da:	b095      	sub	sp, #84	; 0x54
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	330c      	adds	r3, #12
 80098e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ea:	e853 3f00 	ldrex	r3, [r3]
 80098ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80098f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	330c      	adds	r3, #12
 80098fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009900:	643a      	str	r2, [r7, #64]	; 0x40
 8009902:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009904:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009906:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009908:	e841 2300 	strex	r3, r2, [r1]
 800990c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800990e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009910:	2b00      	cmp	r3, #0
 8009912:	d1e5      	bne.n	80098e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	3314      	adds	r3, #20
 800991a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991c:	6a3b      	ldr	r3, [r7, #32]
 800991e:	e853 3f00 	ldrex	r3, [r3]
 8009922:	61fb      	str	r3, [r7, #28]
   return(result);
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	f023 0301 	bic.w	r3, r3, #1
 800992a:	64bb      	str	r3, [r7, #72]	; 0x48
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	3314      	adds	r3, #20
 8009932:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009934:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009936:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009938:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800993a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800993c:	e841 2300 	strex	r3, r2, [r1]
 8009940:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009944:	2b00      	cmp	r3, #0
 8009946:	d1e5      	bne.n	8009914 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800994c:	2b01      	cmp	r3, #1
 800994e:	d119      	bne.n	8009984 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	330c      	adds	r3, #12
 8009956:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	e853 3f00 	ldrex	r3, [r3]
 800995e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	f023 0310 	bic.w	r3, r3, #16
 8009966:	647b      	str	r3, [r7, #68]	; 0x44
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	330c      	adds	r3, #12
 800996e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009970:	61ba      	str	r2, [r7, #24]
 8009972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009974:	6979      	ldr	r1, [r7, #20]
 8009976:	69ba      	ldr	r2, [r7, #24]
 8009978:	e841 2300 	strex	r3, r2, [r1]
 800997c:	613b      	str	r3, [r7, #16]
   return(result);
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1e5      	bne.n	8009950 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2220      	movs	r2, #32
 8009988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009992:	bf00      	nop
 8009994:	3754      	adds	r7, #84	; 0x54
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr

0800999e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b084      	sub	sp, #16
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2200      	movs	r2, #0
 80099b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2200      	movs	r2, #0
 80099b6:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099c0:	bf00      	nop
 80099c2:	3710      	adds	r7, #16
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	2b21      	cmp	r3, #33	; 0x21
 80099da:	d13e      	bne.n	8009a5a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099e4:	d114      	bne.n	8009a10 <UART_Transmit_IT+0x48>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d110      	bne.n	8009a10 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6a1b      	ldr	r3, [r3, #32]
 80099f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	881b      	ldrh	r3, [r3, #0]
 80099f8:	461a      	mov	r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a02:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a1b      	ldr	r3, [r3, #32]
 8009a08:	1c9a      	adds	r2, r3, #2
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	621a      	str	r2, [r3, #32]
 8009a0e:	e008      	b.n	8009a22 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6a1b      	ldr	r3, [r3, #32]
 8009a14:	1c59      	adds	r1, r3, #1
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	6211      	str	r1, [r2, #32]
 8009a1a:	781a      	ldrb	r2, [r3, #0]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	4619      	mov	r1, r3
 8009a30:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d10f      	bne.n	8009a56 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68da      	ldr	r2, [r3, #12]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a44:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68da      	ldr	r2, [r3, #12]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a54:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009a56:	2300      	movs	r3, #0
 8009a58:	e000      	b.n	8009a5c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009a5a:	2302      	movs	r3, #2
  }
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3714      	adds	r7, #20
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68da      	ldr	r2, [r3, #12]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a7e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2220      	movs	r2, #32
 8009a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3708      	adds	r7, #8
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b08c      	sub	sp, #48	; 0x30
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	2b22      	cmp	r3, #34	; 0x22
 8009aac:	f040 80ad 	bne.w	8009c0a <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ab8:	d117      	bne.n	8009aea <UART_Receive_IT+0x50>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d113      	bne.n	8009aea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ad8:	b29a      	uxth	r2, r3
 8009ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009adc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae2:	1c9a      	adds	r2, r3, #2
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	629a      	str	r2, [r3, #40]	; 0x28
 8009ae8:	e026      	b.n	8009b38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009af0:	2300      	movs	r3, #0
 8009af2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009afc:	d007      	beq.n	8009b0e <UART_Receive_IT+0x74>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d10a      	bne.n	8009b1c <UART_Receive_IT+0x82>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	691b      	ldr	r3, [r3, #16]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d106      	bne.n	8009b1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b18:	701a      	strb	r2, [r3, #0]
 8009b1a:	e008      	b.n	8009b2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b28:	b2da      	uxtb	r2, r3
 8009b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b32:	1c5a      	adds	r2, r3, #1
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	4619      	mov	r1, r3
 8009b46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d15c      	bne.n	8009c06 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	68da      	ldr	r2, [r3, #12]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f022 0220 	bic.w	r2, r2, #32
 8009b5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68da      	ldr	r2, [r3, #12]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	695a      	ldr	r2, [r3, #20]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f022 0201 	bic.w	r2, r2, #1
 8009b7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2220      	movs	r2, #32
 8009b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d136      	bne.n	8009bfa <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	330c      	adds	r3, #12
 8009b98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	e853 3f00 	ldrex	r3, [r3]
 8009ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	f023 0310 	bic.w	r3, r3, #16
 8009ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	330c      	adds	r3, #12
 8009bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bb2:	623a      	str	r2, [r7, #32]
 8009bb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb6:	69f9      	ldr	r1, [r7, #28]
 8009bb8:	6a3a      	ldr	r2, [r7, #32]
 8009bba:	e841 2300 	strex	r3, r2, [r1]
 8009bbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1e5      	bne.n	8009b92 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 0310 	and.w	r3, r3, #16
 8009bd0:	2b10      	cmp	r3, #16
 8009bd2:	d10a      	bne.n	8009bea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	60fb      	str	r3, [r7, #12]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	60fb      	str	r3, [r7, #12]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	60fb      	str	r3, [r7, #12]
 8009be8:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8009bf2:	4611      	mov	r1, r2
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	4798      	blx	r3
 8009bf8:	e003      	b.n	8009c02 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009c02:	2300      	movs	r3, #0
 8009c04:	e002      	b.n	8009c0c <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	e000      	b.n	8009c0c <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8009c0a:	2302      	movs	r3, #2
  }
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3730      	adds	r7, #48	; 0x30
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c18:	b0c0      	sub	sp, #256	; 0x100
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c30:	68d9      	ldr	r1, [r3, #12]
 8009c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	ea40 0301 	orr.w	r3, r0, r1
 8009c3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c42:	689a      	ldr	r2, [r3, #8]
 8009c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	431a      	orrs	r2, r3
 8009c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c50:	695b      	ldr	r3, [r3, #20]
 8009c52:	431a      	orrs	r2, r3
 8009c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c58:	69db      	ldr	r3, [r3, #28]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009c6c:	f021 010c 	bic.w	r1, r1, #12
 8009c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009c7a:	430b      	orrs	r3, r1
 8009c7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	695b      	ldr	r3, [r3, #20]
 8009c86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c8e:	6999      	ldr	r1, [r3, #24]
 8009c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	ea40 0301 	orr.w	r3, r0, r1
 8009c9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	4b8f      	ldr	r3, [pc, #572]	; (8009ee0 <UART_SetConfig+0x2cc>)
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d005      	beq.n	8009cb4 <UART_SetConfig+0xa0>
 8009ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	4b8d      	ldr	r3, [pc, #564]	; (8009ee4 <UART_SetConfig+0x2d0>)
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d104      	bne.n	8009cbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009cb4:	f7fd fa6e 	bl	8007194 <HAL_RCC_GetPCLK2Freq>
 8009cb8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009cbc:	e003      	b.n	8009cc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009cbe:	f7fd fa55 	bl	800716c <HAL_RCC_GetPCLK1Freq>
 8009cc2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cca:	69db      	ldr	r3, [r3, #28]
 8009ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cd0:	f040 810c 	bne.w	8009eec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009cde:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009ce2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009ce6:	4622      	mov	r2, r4
 8009ce8:	462b      	mov	r3, r5
 8009cea:	1891      	adds	r1, r2, r2
 8009cec:	65b9      	str	r1, [r7, #88]	; 0x58
 8009cee:	415b      	adcs	r3, r3
 8009cf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cf2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009cf6:	4621      	mov	r1, r4
 8009cf8:	eb12 0801 	adds.w	r8, r2, r1
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	eb43 0901 	adc.w	r9, r3, r1
 8009d02:	f04f 0200 	mov.w	r2, #0
 8009d06:	f04f 0300 	mov.w	r3, #0
 8009d0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009d0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009d12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009d16:	4690      	mov	r8, r2
 8009d18:	4699      	mov	r9, r3
 8009d1a:	4623      	mov	r3, r4
 8009d1c:	eb18 0303 	adds.w	r3, r8, r3
 8009d20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009d24:	462b      	mov	r3, r5
 8009d26:	eb49 0303 	adc.w	r3, r9, r3
 8009d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009d3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009d3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009d42:	460b      	mov	r3, r1
 8009d44:	18db      	adds	r3, r3, r3
 8009d46:	653b      	str	r3, [r7, #80]	; 0x50
 8009d48:	4613      	mov	r3, r2
 8009d4a:	eb42 0303 	adc.w	r3, r2, r3
 8009d4e:	657b      	str	r3, [r7, #84]	; 0x54
 8009d50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009d54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009d58:	f7f6 ff22 	bl	8000ba0 <__aeabi_uldivmod>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	460b      	mov	r3, r1
 8009d60:	4b61      	ldr	r3, [pc, #388]	; (8009ee8 <UART_SetConfig+0x2d4>)
 8009d62:	fba3 2302 	umull	r2, r3, r3, r2
 8009d66:	095b      	lsrs	r3, r3, #5
 8009d68:	011c      	lsls	r4, r3, #4
 8009d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009d78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009d7c:	4642      	mov	r2, r8
 8009d7e:	464b      	mov	r3, r9
 8009d80:	1891      	adds	r1, r2, r2
 8009d82:	64b9      	str	r1, [r7, #72]	; 0x48
 8009d84:	415b      	adcs	r3, r3
 8009d86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009d8c:	4641      	mov	r1, r8
 8009d8e:	eb12 0a01 	adds.w	sl, r2, r1
 8009d92:	4649      	mov	r1, r9
 8009d94:	eb43 0b01 	adc.w	fp, r3, r1
 8009d98:	f04f 0200 	mov.w	r2, #0
 8009d9c:	f04f 0300 	mov.w	r3, #0
 8009da0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009da4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009da8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009dac:	4692      	mov	sl, r2
 8009dae:	469b      	mov	fp, r3
 8009db0:	4643      	mov	r3, r8
 8009db2:	eb1a 0303 	adds.w	r3, sl, r3
 8009db6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009dba:	464b      	mov	r3, r9
 8009dbc:	eb4b 0303 	adc.w	r3, fp, r3
 8009dc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009dd0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009dd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009dd8:	460b      	mov	r3, r1
 8009dda:	18db      	adds	r3, r3, r3
 8009ddc:	643b      	str	r3, [r7, #64]	; 0x40
 8009dde:	4613      	mov	r3, r2
 8009de0:	eb42 0303 	adc.w	r3, r2, r3
 8009de4:	647b      	str	r3, [r7, #68]	; 0x44
 8009de6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009dea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009dee:	f7f6 fed7 	bl	8000ba0 <__aeabi_uldivmod>
 8009df2:	4602      	mov	r2, r0
 8009df4:	460b      	mov	r3, r1
 8009df6:	4611      	mov	r1, r2
 8009df8:	4b3b      	ldr	r3, [pc, #236]	; (8009ee8 <UART_SetConfig+0x2d4>)
 8009dfa:	fba3 2301 	umull	r2, r3, r3, r1
 8009dfe:	095b      	lsrs	r3, r3, #5
 8009e00:	2264      	movs	r2, #100	; 0x64
 8009e02:	fb02 f303 	mul.w	r3, r2, r3
 8009e06:	1acb      	subs	r3, r1, r3
 8009e08:	00db      	lsls	r3, r3, #3
 8009e0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009e0e:	4b36      	ldr	r3, [pc, #216]	; (8009ee8 <UART_SetConfig+0x2d4>)
 8009e10:	fba3 2302 	umull	r2, r3, r3, r2
 8009e14:	095b      	lsrs	r3, r3, #5
 8009e16:	005b      	lsls	r3, r3, #1
 8009e18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009e1c:	441c      	add	r4, r3
 8009e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e22:	2200      	movs	r2, #0
 8009e24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009e2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009e30:	4642      	mov	r2, r8
 8009e32:	464b      	mov	r3, r9
 8009e34:	1891      	adds	r1, r2, r2
 8009e36:	63b9      	str	r1, [r7, #56]	; 0x38
 8009e38:	415b      	adcs	r3, r3
 8009e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009e40:	4641      	mov	r1, r8
 8009e42:	1851      	adds	r1, r2, r1
 8009e44:	6339      	str	r1, [r7, #48]	; 0x30
 8009e46:	4649      	mov	r1, r9
 8009e48:	414b      	adcs	r3, r1
 8009e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8009e4c:	f04f 0200 	mov.w	r2, #0
 8009e50:	f04f 0300 	mov.w	r3, #0
 8009e54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009e58:	4659      	mov	r1, fp
 8009e5a:	00cb      	lsls	r3, r1, #3
 8009e5c:	4651      	mov	r1, sl
 8009e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e62:	4651      	mov	r1, sl
 8009e64:	00ca      	lsls	r2, r1, #3
 8009e66:	4610      	mov	r0, r2
 8009e68:	4619      	mov	r1, r3
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	4642      	mov	r2, r8
 8009e6e:	189b      	adds	r3, r3, r2
 8009e70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e74:	464b      	mov	r3, r9
 8009e76:	460a      	mov	r2, r1
 8009e78:	eb42 0303 	adc.w	r3, r2, r3
 8009e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009e8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009e90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009e94:	460b      	mov	r3, r1
 8009e96:	18db      	adds	r3, r3, r3
 8009e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	eb42 0303 	adc.w	r3, r2, r3
 8009ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ea2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ea6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009eaa:	f7f6 fe79 	bl	8000ba0 <__aeabi_uldivmod>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	4b0d      	ldr	r3, [pc, #52]	; (8009ee8 <UART_SetConfig+0x2d4>)
 8009eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8009eb8:	095b      	lsrs	r3, r3, #5
 8009eba:	2164      	movs	r1, #100	; 0x64
 8009ebc:	fb01 f303 	mul.w	r3, r1, r3
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	00db      	lsls	r3, r3, #3
 8009ec4:	3332      	adds	r3, #50	; 0x32
 8009ec6:	4a08      	ldr	r2, [pc, #32]	; (8009ee8 <UART_SetConfig+0x2d4>)
 8009ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8009ecc:	095b      	lsrs	r3, r3, #5
 8009ece:	f003 0207 	and.w	r2, r3, #7
 8009ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4422      	add	r2, r4
 8009eda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009edc:	e105      	b.n	800a0ea <UART_SetConfig+0x4d6>
 8009ede:	bf00      	nop
 8009ee0:	40011000 	.word	0x40011000
 8009ee4:	40011400 	.word	0x40011400
 8009ee8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009ef6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009efa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009efe:	4642      	mov	r2, r8
 8009f00:	464b      	mov	r3, r9
 8009f02:	1891      	adds	r1, r2, r2
 8009f04:	6239      	str	r1, [r7, #32]
 8009f06:	415b      	adcs	r3, r3
 8009f08:	627b      	str	r3, [r7, #36]	; 0x24
 8009f0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009f0e:	4641      	mov	r1, r8
 8009f10:	1854      	adds	r4, r2, r1
 8009f12:	4649      	mov	r1, r9
 8009f14:	eb43 0501 	adc.w	r5, r3, r1
 8009f18:	f04f 0200 	mov.w	r2, #0
 8009f1c:	f04f 0300 	mov.w	r3, #0
 8009f20:	00eb      	lsls	r3, r5, #3
 8009f22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f26:	00e2      	lsls	r2, r4, #3
 8009f28:	4614      	mov	r4, r2
 8009f2a:	461d      	mov	r5, r3
 8009f2c:	4643      	mov	r3, r8
 8009f2e:	18e3      	adds	r3, r4, r3
 8009f30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009f34:	464b      	mov	r3, r9
 8009f36:	eb45 0303 	adc.w	r3, r5, r3
 8009f3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009f4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009f4e:	f04f 0200 	mov.w	r2, #0
 8009f52:	f04f 0300 	mov.w	r3, #0
 8009f56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009f5a:	4629      	mov	r1, r5
 8009f5c:	008b      	lsls	r3, r1, #2
 8009f5e:	4621      	mov	r1, r4
 8009f60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f64:	4621      	mov	r1, r4
 8009f66:	008a      	lsls	r2, r1, #2
 8009f68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009f6c:	f7f6 fe18 	bl	8000ba0 <__aeabi_uldivmod>
 8009f70:	4602      	mov	r2, r0
 8009f72:	460b      	mov	r3, r1
 8009f74:	4b60      	ldr	r3, [pc, #384]	; (800a0f8 <UART_SetConfig+0x4e4>)
 8009f76:	fba3 2302 	umull	r2, r3, r3, r2
 8009f7a:	095b      	lsrs	r3, r3, #5
 8009f7c:	011c      	lsls	r4, r3, #4
 8009f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f82:	2200      	movs	r2, #0
 8009f84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009f88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009f8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009f90:	4642      	mov	r2, r8
 8009f92:	464b      	mov	r3, r9
 8009f94:	1891      	adds	r1, r2, r2
 8009f96:	61b9      	str	r1, [r7, #24]
 8009f98:	415b      	adcs	r3, r3
 8009f9a:	61fb      	str	r3, [r7, #28]
 8009f9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009fa0:	4641      	mov	r1, r8
 8009fa2:	1851      	adds	r1, r2, r1
 8009fa4:	6139      	str	r1, [r7, #16]
 8009fa6:	4649      	mov	r1, r9
 8009fa8:	414b      	adcs	r3, r1
 8009faa:	617b      	str	r3, [r7, #20]
 8009fac:	f04f 0200 	mov.w	r2, #0
 8009fb0:	f04f 0300 	mov.w	r3, #0
 8009fb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009fb8:	4659      	mov	r1, fp
 8009fba:	00cb      	lsls	r3, r1, #3
 8009fbc:	4651      	mov	r1, sl
 8009fbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009fc2:	4651      	mov	r1, sl
 8009fc4:	00ca      	lsls	r2, r1, #3
 8009fc6:	4610      	mov	r0, r2
 8009fc8:	4619      	mov	r1, r3
 8009fca:	4603      	mov	r3, r0
 8009fcc:	4642      	mov	r2, r8
 8009fce:	189b      	adds	r3, r3, r2
 8009fd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009fd4:	464b      	mov	r3, r9
 8009fd6:	460a      	mov	r2, r1
 8009fd8:	eb42 0303 	adc.w	r3, r2, r3
 8009fdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	67bb      	str	r3, [r7, #120]	; 0x78
 8009fea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009fec:	f04f 0200 	mov.w	r2, #0
 8009ff0:	f04f 0300 	mov.w	r3, #0
 8009ff4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009ff8:	4649      	mov	r1, r9
 8009ffa:	008b      	lsls	r3, r1, #2
 8009ffc:	4641      	mov	r1, r8
 8009ffe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a002:	4641      	mov	r1, r8
 800a004:	008a      	lsls	r2, r1, #2
 800a006:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a00a:	f7f6 fdc9 	bl	8000ba0 <__aeabi_uldivmod>
 800a00e:	4602      	mov	r2, r0
 800a010:	460b      	mov	r3, r1
 800a012:	4b39      	ldr	r3, [pc, #228]	; (800a0f8 <UART_SetConfig+0x4e4>)
 800a014:	fba3 1302 	umull	r1, r3, r3, r2
 800a018:	095b      	lsrs	r3, r3, #5
 800a01a:	2164      	movs	r1, #100	; 0x64
 800a01c:	fb01 f303 	mul.w	r3, r1, r3
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	011b      	lsls	r3, r3, #4
 800a024:	3332      	adds	r3, #50	; 0x32
 800a026:	4a34      	ldr	r2, [pc, #208]	; (800a0f8 <UART_SetConfig+0x4e4>)
 800a028:	fba2 2303 	umull	r2, r3, r2, r3
 800a02c:	095b      	lsrs	r3, r3, #5
 800a02e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a032:	441c      	add	r4, r3
 800a034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a038:	2200      	movs	r2, #0
 800a03a:	673b      	str	r3, [r7, #112]	; 0x70
 800a03c:	677a      	str	r2, [r7, #116]	; 0x74
 800a03e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a042:	4642      	mov	r2, r8
 800a044:	464b      	mov	r3, r9
 800a046:	1891      	adds	r1, r2, r2
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	415b      	adcs	r3, r3
 800a04c:	60fb      	str	r3, [r7, #12]
 800a04e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a052:	4641      	mov	r1, r8
 800a054:	1851      	adds	r1, r2, r1
 800a056:	6039      	str	r1, [r7, #0]
 800a058:	4649      	mov	r1, r9
 800a05a:	414b      	adcs	r3, r1
 800a05c:	607b      	str	r3, [r7, #4]
 800a05e:	f04f 0200 	mov.w	r2, #0
 800a062:	f04f 0300 	mov.w	r3, #0
 800a066:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a06a:	4659      	mov	r1, fp
 800a06c:	00cb      	lsls	r3, r1, #3
 800a06e:	4651      	mov	r1, sl
 800a070:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a074:	4651      	mov	r1, sl
 800a076:	00ca      	lsls	r2, r1, #3
 800a078:	4610      	mov	r0, r2
 800a07a:	4619      	mov	r1, r3
 800a07c:	4603      	mov	r3, r0
 800a07e:	4642      	mov	r2, r8
 800a080:	189b      	adds	r3, r3, r2
 800a082:	66bb      	str	r3, [r7, #104]	; 0x68
 800a084:	464b      	mov	r3, r9
 800a086:	460a      	mov	r2, r1
 800a088:	eb42 0303 	adc.w	r3, r2, r3
 800a08c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a08e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	663b      	str	r3, [r7, #96]	; 0x60
 800a098:	667a      	str	r2, [r7, #100]	; 0x64
 800a09a:	f04f 0200 	mov.w	r2, #0
 800a09e:	f04f 0300 	mov.w	r3, #0
 800a0a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a0a6:	4649      	mov	r1, r9
 800a0a8:	008b      	lsls	r3, r1, #2
 800a0aa:	4641      	mov	r1, r8
 800a0ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0b0:	4641      	mov	r1, r8
 800a0b2:	008a      	lsls	r2, r1, #2
 800a0b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a0b8:	f7f6 fd72 	bl	8000ba0 <__aeabi_uldivmod>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	4b0d      	ldr	r3, [pc, #52]	; (800a0f8 <UART_SetConfig+0x4e4>)
 800a0c2:	fba3 1302 	umull	r1, r3, r3, r2
 800a0c6:	095b      	lsrs	r3, r3, #5
 800a0c8:	2164      	movs	r1, #100	; 0x64
 800a0ca:	fb01 f303 	mul.w	r3, r1, r3
 800a0ce:	1ad3      	subs	r3, r2, r3
 800a0d0:	011b      	lsls	r3, r3, #4
 800a0d2:	3332      	adds	r3, #50	; 0x32
 800a0d4:	4a08      	ldr	r2, [pc, #32]	; (800a0f8 <UART_SetConfig+0x4e4>)
 800a0d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0da:	095b      	lsrs	r3, r3, #5
 800a0dc:	f003 020f 	and.w	r2, r3, #15
 800a0e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4422      	add	r2, r4
 800a0e8:	609a      	str	r2, [r3, #8]
}
 800a0ea:	bf00      	nop
 800a0ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0f6:	bf00      	nop
 800a0f8:	51eb851f 	.word	0x51eb851f

0800a0fc <calloc>:
 800a0fc:	4b02      	ldr	r3, [pc, #8]	; (800a108 <calloc+0xc>)
 800a0fe:	460a      	mov	r2, r1
 800a100:	4601      	mov	r1, r0
 800a102:	6818      	ldr	r0, [r3, #0]
 800a104:	f000 b852 	b.w	800a1ac <_calloc_r>
 800a108:	20000364 	.word	0x20000364

0800a10c <__errno>:
 800a10c:	4b01      	ldr	r3, [pc, #4]	; (800a114 <__errno+0x8>)
 800a10e:	6818      	ldr	r0, [r3, #0]
 800a110:	4770      	bx	lr
 800a112:	bf00      	nop
 800a114:	20000364 	.word	0x20000364

0800a118 <__libc_init_array>:
 800a118:	b570      	push	{r4, r5, r6, lr}
 800a11a:	4d0d      	ldr	r5, [pc, #52]	; (800a150 <__libc_init_array+0x38>)
 800a11c:	4c0d      	ldr	r4, [pc, #52]	; (800a154 <__libc_init_array+0x3c>)
 800a11e:	1b64      	subs	r4, r4, r5
 800a120:	10a4      	asrs	r4, r4, #2
 800a122:	2600      	movs	r6, #0
 800a124:	42a6      	cmp	r6, r4
 800a126:	d109      	bne.n	800a13c <__libc_init_array+0x24>
 800a128:	4d0b      	ldr	r5, [pc, #44]	; (800a158 <__libc_init_array+0x40>)
 800a12a:	4c0c      	ldr	r4, [pc, #48]	; (800a15c <__libc_init_array+0x44>)
 800a12c:	f002 fb4a 	bl	800c7c4 <_init>
 800a130:	1b64      	subs	r4, r4, r5
 800a132:	10a4      	asrs	r4, r4, #2
 800a134:	2600      	movs	r6, #0
 800a136:	42a6      	cmp	r6, r4
 800a138:	d105      	bne.n	800a146 <__libc_init_array+0x2e>
 800a13a:	bd70      	pop	{r4, r5, r6, pc}
 800a13c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a140:	4798      	blx	r3
 800a142:	3601      	adds	r6, #1
 800a144:	e7ee      	b.n	800a124 <__libc_init_array+0xc>
 800a146:	f855 3b04 	ldr.w	r3, [r5], #4
 800a14a:	4798      	blx	r3
 800a14c:	3601      	adds	r6, #1
 800a14e:	e7f2      	b.n	800a136 <__libc_init_array+0x1e>
 800a150:	0800ca18 	.word	0x0800ca18
 800a154:	0800ca18 	.word	0x0800ca18
 800a158:	0800ca18 	.word	0x0800ca18
 800a15c:	0800ca1c 	.word	0x0800ca1c

0800a160 <malloc>:
 800a160:	4b02      	ldr	r3, [pc, #8]	; (800a16c <malloc+0xc>)
 800a162:	4601      	mov	r1, r0
 800a164:	6818      	ldr	r0, [r3, #0]
 800a166:	f000 b8a3 	b.w	800a2b0 <_malloc_r>
 800a16a:	bf00      	nop
 800a16c:	20000364 	.word	0x20000364

0800a170 <free>:
 800a170:	4b02      	ldr	r3, [pc, #8]	; (800a17c <free+0xc>)
 800a172:	4601      	mov	r1, r0
 800a174:	6818      	ldr	r0, [r3, #0]
 800a176:	f000 b82f 	b.w	800a1d8 <_free_r>
 800a17a:	bf00      	nop
 800a17c:	20000364 	.word	0x20000364

0800a180 <memcpy>:
 800a180:	440a      	add	r2, r1
 800a182:	4291      	cmp	r1, r2
 800a184:	f100 33ff 	add.w	r3, r0, #4294967295
 800a188:	d100      	bne.n	800a18c <memcpy+0xc>
 800a18a:	4770      	bx	lr
 800a18c:	b510      	push	{r4, lr}
 800a18e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a192:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a196:	4291      	cmp	r1, r2
 800a198:	d1f9      	bne.n	800a18e <memcpy+0xe>
 800a19a:	bd10      	pop	{r4, pc}

0800a19c <memset>:
 800a19c:	4402      	add	r2, r0
 800a19e:	4603      	mov	r3, r0
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d100      	bne.n	800a1a6 <memset+0xa>
 800a1a4:	4770      	bx	lr
 800a1a6:	f803 1b01 	strb.w	r1, [r3], #1
 800a1aa:	e7f9      	b.n	800a1a0 <memset+0x4>

0800a1ac <_calloc_r>:
 800a1ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1ae:	fba1 2402 	umull	r2, r4, r1, r2
 800a1b2:	b94c      	cbnz	r4, 800a1c8 <_calloc_r+0x1c>
 800a1b4:	4611      	mov	r1, r2
 800a1b6:	9201      	str	r2, [sp, #4]
 800a1b8:	f000 f87a 	bl	800a2b0 <_malloc_r>
 800a1bc:	9a01      	ldr	r2, [sp, #4]
 800a1be:	4605      	mov	r5, r0
 800a1c0:	b930      	cbnz	r0, 800a1d0 <_calloc_r+0x24>
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	b003      	add	sp, #12
 800a1c6:	bd30      	pop	{r4, r5, pc}
 800a1c8:	220c      	movs	r2, #12
 800a1ca:	6002      	str	r2, [r0, #0]
 800a1cc:	2500      	movs	r5, #0
 800a1ce:	e7f8      	b.n	800a1c2 <_calloc_r+0x16>
 800a1d0:	4621      	mov	r1, r4
 800a1d2:	f7ff ffe3 	bl	800a19c <memset>
 800a1d6:	e7f4      	b.n	800a1c2 <_calloc_r+0x16>

0800a1d8 <_free_r>:
 800a1d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1da:	2900      	cmp	r1, #0
 800a1dc:	d044      	beq.n	800a268 <_free_r+0x90>
 800a1de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1e2:	9001      	str	r0, [sp, #4]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f1a1 0404 	sub.w	r4, r1, #4
 800a1ea:	bfb8      	it	lt
 800a1ec:	18e4      	addlt	r4, r4, r3
 800a1ee:	f000 f8e3 	bl	800a3b8 <__malloc_lock>
 800a1f2:	4a1e      	ldr	r2, [pc, #120]	; (800a26c <_free_r+0x94>)
 800a1f4:	9801      	ldr	r0, [sp, #4]
 800a1f6:	6813      	ldr	r3, [r2, #0]
 800a1f8:	b933      	cbnz	r3, 800a208 <_free_r+0x30>
 800a1fa:	6063      	str	r3, [r4, #4]
 800a1fc:	6014      	str	r4, [r2, #0]
 800a1fe:	b003      	add	sp, #12
 800a200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a204:	f000 b8de 	b.w	800a3c4 <__malloc_unlock>
 800a208:	42a3      	cmp	r3, r4
 800a20a:	d908      	bls.n	800a21e <_free_r+0x46>
 800a20c:	6825      	ldr	r5, [r4, #0]
 800a20e:	1961      	adds	r1, r4, r5
 800a210:	428b      	cmp	r3, r1
 800a212:	bf01      	itttt	eq
 800a214:	6819      	ldreq	r1, [r3, #0]
 800a216:	685b      	ldreq	r3, [r3, #4]
 800a218:	1949      	addeq	r1, r1, r5
 800a21a:	6021      	streq	r1, [r4, #0]
 800a21c:	e7ed      	b.n	800a1fa <_free_r+0x22>
 800a21e:	461a      	mov	r2, r3
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	b10b      	cbz	r3, 800a228 <_free_r+0x50>
 800a224:	42a3      	cmp	r3, r4
 800a226:	d9fa      	bls.n	800a21e <_free_r+0x46>
 800a228:	6811      	ldr	r1, [r2, #0]
 800a22a:	1855      	adds	r5, r2, r1
 800a22c:	42a5      	cmp	r5, r4
 800a22e:	d10b      	bne.n	800a248 <_free_r+0x70>
 800a230:	6824      	ldr	r4, [r4, #0]
 800a232:	4421      	add	r1, r4
 800a234:	1854      	adds	r4, r2, r1
 800a236:	42a3      	cmp	r3, r4
 800a238:	6011      	str	r1, [r2, #0]
 800a23a:	d1e0      	bne.n	800a1fe <_free_r+0x26>
 800a23c:	681c      	ldr	r4, [r3, #0]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	6053      	str	r3, [r2, #4]
 800a242:	4421      	add	r1, r4
 800a244:	6011      	str	r1, [r2, #0]
 800a246:	e7da      	b.n	800a1fe <_free_r+0x26>
 800a248:	d902      	bls.n	800a250 <_free_r+0x78>
 800a24a:	230c      	movs	r3, #12
 800a24c:	6003      	str	r3, [r0, #0]
 800a24e:	e7d6      	b.n	800a1fe <_free_r+0x26>
 800a250:	6825      	ldr	r5, [r4, #0]
 800a252:	1961      	adds	r1, r4, r5
 800a254:	428b      	cmp	r3, r1
 800a256:	bf04      	itt	eq
 800a258:	6819      	ldreq	r1, [r3, #0]
 800a25a:	685b      	ldreq	r3, [r3, #4]
 800a25c:	6063      	str	r3, [r4, #4]
 800a25e:	bf04      	itt	eq
 800a260:	1949      	addeq	r1, r1, r5
 800a262:	6021      	streq	r1, [r4, #0]
 800a264:	6054      	str	r4, [r2, #4]
 800a266:	e7ca      	b.n	800a1fe <_free_r+0x26>
 800a268:	b003      	add	sp, #12
 800a26a:	bd30      	pop	{r4, r5, pc}
 800a26c:	20001348 	.word	0x20001348

0800a270 <sbrk_aligned>:
 800a270:	b570      	push	{r4, r5, r6, lr}
 800a272:	4e0e      	ldr	r6, [pc, #56]	; (800a2ac <sbrk_aligned+0x3c>)
 800a274:	460c      	mov	r4, r1
 800a276:	6831      	ldr	r1, [r6, #0]
 800a278:	4605      	mov	r5, r0
 800a27a:	b911      	cbnz	r1, 800a282 <sbrk_aligned+0x12>
 800a27c:	f000 f88c 	bl	800a398 <_sbrk_r>
 800a280:	6030      	str	r0, [r6, #0]
 800a282:	4621      	mov	r1, r4
 800a284:	4628      	mov	r0, r5
 800a286:	f000 f887 	bl	800a398 <_sbrk_r>
 800a28a:	1c43      	adds	r3, r0, #1
 800a28c:	d00a      	beq.n	800a2a4 <sbrk_aligned+0x34>
 800a28e:	1cc4      	adds	r4, r0, #3
 800a290:	f024 0403 	bic.w	r4, r4, #3
 800a294:	42a0      	cmp	r0, r4
 800a296:	d007      	beq.n	800a2a8 <sbrk_aligned+0x38>
 800a298:	1a21      	subs	r1, r4, r0
 800a29a:	4628      	mov	r0, r5
 800a29c:	f000 f87c 	bl	800a398 <_sbrk_r>
 800a2a0:	3001      	adds	r0, #1
 800a2a2:	d101      	bne.n	800a2a8 <sbrk_aligned+0x38>
 800a2a4:	f04f 34ff 	mov.w	r4, #4294967295
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	bd70      	pop	{r4, r5, r6, pc}
 800a2ac:	2000134c 	.word	0x2000134c

0800a2b0 <_malloc_r>:
 800a2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b4:	1ccd      	adds	r5, r1, #3
 800a2b6:	f025 0503 	bic.w	r5, r5, #3
 800a2ba:	3508      	adds	r5, #8
 800a2bc:	2d0c      	cmp	r5, #12
 800a2be:	bf38      	it	cc
 800a2c0:	250c      	movcc	r5, #12
 800a2c2:	2d00      	cmp	r5, #0
 800a2c4:	4607      	mov	r7, r0
 800a2c6:	db01      	blt.n	800a2cc <_malloc_r+0x1c>
 800a2c8:	42a9      	cmp	r1, r5
 800a2ca:	d905      	bls.n	800a2d8 <_malloc_r+0x28>
 800a2cc:	230c      	movs	r3, #12
 800a2ce:	603b      	str	r3, [r7, #0]
 800a2d0:	2600      	movs	r6, #0
 800a2d2:	4630      	mov	r0, r6
 800a2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2d8:	4e2e      	ldr	r6, [pc, #184]	; (800a394 <_malloc_r+0xe4>)
 800a2da:	f000 f86d 	bl	800a3b8 <__malloc_lock>
 800a2de:	6833      	ldr	r3, [r6, #0]
 800a2e0:	461c      	mov	r4, r3
 800a2e2:	bb34      	cbnz	r4, 800a332 <_malloc_r+0x82>
 800a2e4:	4629      	mov	r1, r5
 800a2e6:	4638      	mov	r0, r7
 800a2e8:	f7ff ffc2 	bl	800a270 <sbrk_aligned>
 800a2ec:	1c43      	adds	r3, r0, #1
 800a2ee:	4604      	mov	r4, r0
 800a2f0:	d14d      	bne.n	800a38e <_malloc_r+0xde>
 800a2f2:	6834      	ldr	r4, [r6, #0]
 800a2f4:	4626      	mov	r6, r4
 800a2f6:	2e00      	cmp	r6, #0
 800a2f8:	d140      	bne.n	800a37c <_malloc_r+0xcc>
 800a2fa:	6823      	ldr	r3, [r4, #0]
 800a2fc:	4631      	mov	r1, r6
 800a2fe:	4638      	mov	r0, r7
 800a300:	eb04 0803 	add.w	r8, r4, r3
 800a304:	f000 f848 	bl	800a398 <_sbrk_r>
 800a308:	4580      	cmp	r8, r0
 800a30a:	d13a      	bne.n	800a382 <_malloc_r+0xd2>
 800a30c:	6821      	ldr	r1, [r4, #0]
 800a30e:	3503      	adds	r5, #3
 800a310:	1a6d      	subs	r5, r5, r1
 800a312:	f025 0503 	bic.w	r5, r5, #3
 800a316:	3508      	adds	r5, #8
 800a318:	2d0c      	cmp	r5, #12
 800a31a:	bf38      	it	cc
 800a31c:	250c      	movcc	r5, #12
 800a31e:	4629      	mov	r1, r5
 800a320:	4638      	mov	r0, r7
 800a322:	f7ff ffa5 	bl	800a270 <sbrk_aligned>
 800a326:	3001      	adds	r0, #1
 800a328:	d02b      	beq.n	800a382 <_malloc_r+0xd2>
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	442b      	add	r3, r5
 800a32e:	6023      	str	r3, [r4, #0]
 800a330:	e00e      	b.n	800a350 <_malloc_r+0xa0>
 800a332:	6822      	ldr	r2, [r4, #0]
 800a334:	1b52      	subs	r2, r2, r5
 800a336:	d41e      	bmi.n	800a376 <_malloc_r+0xc6>
 800a338:	2a0b      	cmp	r2, #11
 800a33a:	d916      	bls.n	800a36a <_malloc_r+0xba>
 800a33c:	1961      	adds	r1, r4, r5
 800a33e:	42a3      	cmp	r3, r4
 800a340:	6025      	str	r5, [r4, #0]
 800a342:	bf18      	it	ne
 800a344:	6059      	strne	r1, [r3, #4]
 800a346:	6863      	ldr	r3, [r4, #4]
 800a348:	bf08      	it	eq
 800a34a:	6031      	streq	r1, [r6, #0]
 800a34c:	5162      	str	r2, [r4, r5]
 800a34e:	604b      	str	r3, [r1, #4]
 800a350:	4638      	mov	r0, r7
 800a352:	f104 060b 	add.w	r6, r4, #11
 800a356:	f000 f835 	bl	800a3c4 <__malloc_unlock>
 800a35a:	f026 0607 	bic.w	r6, r6, #7
 800a35e:	1d23      	adds	r3, r4, #4
 800a360:	1af2      	subs	r2, r6, r3
 800a362:	d0b6      	beq.n	800a2d2 <_malloc_r+0x22>
 800a364:	1b9b      	subs	r3, r3, r6
 800a366:	50a3      	str	r3, [r4, r2]
 800a368:	e7b3      	b.n	800a2d2 <_malloc_r+0x22>
 800a36a:	6862      	ldr	r2, [r4, #4]
 800a36c:	42a3      	cmp	r3, r4
 800a36e:	bf0c      	ite	eq
 800a370:	6032      	streq	r2, [r6, #0]
 800a372:	605a      	strne	r2, [r3, #4]
 800a374:	e7ec      	b.n	800a350 <_malloc_r+0xa0>
 800a376:	4623      	mov	r3, r4
 800a378:	6864      	ldr	r4, [r4, #4]
 800a37a:	e7b2      	b.n	800a2e2 <_malloc_r+0x32>
 800a37c:	4634      	mov	r4, r6
 800a37e:	6876      	ldr	r6, [r6, #4]
 800a380:	e7b9      	b.n	800a2f6 <_malloc_r+0x46>
 800a382:	230c      	movs	r3, #12
 800a384:	603b      	str	r3, [r7, #0]
 800a386:	4638      	mov	r0, r7
 800a388:	f000 f81c 	bl	800a3c4 <__malloc_unlock>
 800a38c:	e7a1      	b.n	800a2d2 <_malloc_r+0x22>
 800a38e:	6025      	str	r5, [r4, #0]
 800a390:	e7de      	b.n	800a350 <_malloc_r+0xa0>
 800a392:	bf00      	nop
 800a394:	20001348 	.word	0x20001348

0800a398 <_sbrk_r>:
 800a398:	b538      	push	{r3, r4, r5, lr}
 800a39a:	4d06      	ldr	r5, [pc, #24]	; (800a3b4 <_sbrk_r+0x1c>)
 800a39c:	2300      	movs	r3, #0
 800a39e:	4604      	mov	r4, r0
 800a3a0:	4608      	mov	r0, r1
 800a3a2:	602b      	str	r3, [r5, #0]
 800a3a4:	f7fa fd4e 	bl	8004e44 <_sbrk>
 800a3a8:	1c43      	adds	r3, r0, #1
 800a3aa:	d102      	bne.n	800a3b2 <_sbrk_r+0x1a>
 800a3ac:	682b      	ldr	r3, [r5, #0]
 800a3ae:	b103      	cbz	r3, 800a3b2 <_sbrk_r+0x1a>
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	bd38      	pop	{r3, r4, r5, pc}
 800a3b4:	20001350 	.word	0x20001350

0800a3b8 <__malloc_lock>:
 800a3b8:	4801      	ldr	r0, [pc, #4]	; (800a3c0 <__malloc_lock+0x8>)
 800a3ba:	f000 b809 	b.w	800a3d0 <__retarget_lock_acquire_recursive>
 800a3be:	bf00      	nop
 800a3c0:	20001354 	.word	0x20001354

0800a3c4 <__malloc_unlock>:
 800a3c4:	4801      	ldr	r0, [pc, #4]	; (800a3cc <__malloc_unlock+0x8>)
 800a3c6:	f000 b804 	b.w	800a3d2 <__retarget_lock_release_recursive>
 800a3ca:	bf00      	nop
 800a3cc:	20001354 	.word	0x20001354

0800a3d0 <__retarget_lock_acquire_recursive>:
 800a3d0:	4770      	bx	lr

0800a3d2 <__retarget_lock_release_recursive>:
 800a3d2:	4770      	bx	lr
 800a3d4:	0000      	movs	r0, r0
	...

0800a3d8 <cos>:
 800a3d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3da:	ec53 2b10 	vmov	r2, r3, d0
 800a3de:	4826      	ldr	r0, [pc, #152]	; (800a478 <cos+0xa0>)
 800a3e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a3e4:	4281      	cmp	r1, r0
 800a3e6:	dc06      	bgt.n	800a3f6 <cos+0x1e>
 800a3e8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a470 <cos+0x98>
 800a3ec:	b005      	add	sp, #20
 800a3ee:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3f2:	f001 bc3d 	b.w	800bc70 <__kernel_cos>
 800a3f6:	4821      	ldr	r0, [pc, #132]	; (800a47c <cos+0xa4>)
 800a3f8:	4281      	cmp	r1, r0
 800a3fa:	dd09      	ble.n	800a410 <cos+0x38>
 800a3fc:	ee10 0a10 	vmov	r0, s0
 800a400:	4619      	mov	r1, r3
 800a402:	f7f5 feed 	bl	80001e0 <__aeabi_dsub>
 800a406:	ec41 0b10 	vmov	d0, r0, r1
 800a40a:	b005      	add	sp, #20
 800a40c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a410:	4668      	mov	r0, sp
 800a412:	f001 f96d 	bl	800b6f0 <__ieee754_rem_pio2>
 800a416:	f000 0003 	and.w	r0, r0, #3
 800a41a:	2801      	cmp	r0, #1
 800a41c:	d00b      	beq.n	800a436 <cos+0x5e>
 800a41e:	2802      	cmp	r0, #2
 800a420:	d016      	beq.n	800a450 <cos+0x78>
 800a422:	b9e0      	cbnz	r0, 800a45e <cos+0x86>
 800a424:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a428:	ed9d 0b00 	vldr	d0, [sp]
 800a42c:	f001 fc20 	bl	800bc70 <__kernel_cos>
 800a430:	ec51 0b10 	vmov	r0, r1, d0
 800a434:	e7e7      	b.n	800a406 <cos+0x2e>
 800a436:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a43a:	ed9d 0b00 	vldr	d0, [sp]
 800a43e:	f002 f82f 	bl	800c4a0 <__kernel_sin>
 800a442:	ec53 2b10 	vmov	r2, r3, d0
 800a446:	ee10 0a10 	vmov	r0, s0
 800a44a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a44e:	e7da      	b.n	800a406 <cos+0x2e>
 800a450:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a454:	ed9d 0b00 	vldr	d0, [sp]
 800a458:	f001 fc0a 	bl	800bc70 <__kernel_cos>
 800a45c:	e7f1      	b.n	800a442 <cos+0x6a>
 800a45e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a462:	ed9d 0b00 	vldr	d0, [sp]
 800a466:	2001      	movs	r0, #1
 800a468:	f002 f81a 	bl	800c4a0 <__kernel_sin>
 800a46c:	e7e0      	b.n	800a430 <cos+0x58>
 800a46e:	bf00      	nop
	...
 800a478:	3fe921fb 	.word	0x3fe921fb
 800a47c:	7fefffff 	.word	0x7fefffff

0800a480 <floor>:
 800a480:	ec51 0b10 	vmov	r0, r1, d0
 800a484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a488:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a48c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a490:	2e13      	cmp	r6, #19
 800a492:	ee10 5a10 	vmov	r5, s0
 800a496:	ee10 8a10 	vmov	r8, s0
 800a49a:	460c      	mov	r4, r1
 800a49c:	dc32      	bgt.n	800a504 <floor+0x84>
 800a49e:	2e00      	cmp	r6, #0
 800a4a0:	da14      	bge.n	800a4cc <floor+0x4c>
 800a4a2:	a333      	add	r3, pc, #204	; (adr r3, 800a570 <floor+0xf0>)
 800a4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a8:	f7f5 fe9c 	bl	80001e4 <__adddf3>
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	f7f6 fade 	bl	8000a70 <__aeabi_dcmpgt>
 800a4b4:	b138      	cbz	r0, 800a4c6 <floor+0x46>
 800a4b6:	2c00      	cmp	r4, #0
 800a4b8:	da57      	bge.n	800a56a <floor+0xea>
 800a4ba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a4be:	431d      	orrs	r5, r3
 800a4c0:	d001      	beq.n	800a4c6 <floor+0x46>
 800a4c2:	4c2d      	ldr	r4, [pc, #180]	; (800a578 <floor+0xf8>)
 800a4c4:	2500      	movs	r5, #0
 800a4c6:	4621      	mov	r1, r4
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	e025      	b.n	800a518 <floor+0x98>
 800a4cc:	4f2b      	ldr	r7, [pc, #172]	; (800a57c <floor+0xfc>)
 800a4ce:	4137      	asrs	r7, r6
 800a4d0:	ea01 0307 	and.w	r3, r1, r7
 800a4d4:	4303      	orrs	r3, r0
 800a4d6:	d01f      	beq.n	800a518 <floor+0x98>
 800a4d8:	a325      	add	r3, pc, #148	; (adr r3, 800a570 <floor+0xf0>)
 800a4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4de:	f7f5 fe81 	bl	80001e4 <__adddf3>
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	f7f6 fac3 	bl	8000a70 <__aeabi_dcmpgt>
 800a4ea:	2800      	cmp	r0, #0
 800a4ec:	d0eb      	beq.n	800a4c6 <floor+0x46>
 800a4ee:	2c00      	cmp	r4, #0
 800a4f0:	bfbe      	ittt	lt
 800a4f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a4f6:	fa43 f606 	asrlt.w	r6, r3, r6
 800a4fa:	19a4      	addlt	r4, r4, r6
 800a4fc:	ea24 0407 	bic.w	r4, r4, r7
 800a500:	2500      	movs	r5, #0
 800a502:	e7e0      	b.n	800a4c6 <floor+0x46>
 800a504:	2e33      	cmp	r6, #51	; 0x33
 800a506:	dd0b      	ble.n	800a520 <floor+0xa0>
 800a508:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a50c:	d104      	bne.n	800a518 <floor+0x98>
 800a50e:	ee10 2a10 	vmov	r2, s0
 800a512:	460b      	mov	r3, r1
 800a514:	f7f5 fe66 	bl	80001e4 <__adddf3>
 800a518:	ec41 0b10 	vmov	d0, r0, r1
 800a51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a520:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a524:	f04f 33ff 	mov.w	r3, #4294967295
 800a528:	fa23 f707 	lsr.w	r7, r3, r7
 800a52c:	4207      	tst	r7, r0
 800a52e:	d0f3      	beq.n	800a518 <floor+0x98>
 800a530:	a30f      	add	r3, pc, #60	; (adr r3, 800a570 <floor+0xf0>)
 800a532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a536:	f7f5 fe55 	bl	80001e4 <__adddf3>
 800a53a:	2200      	movs	r2, #0
 800a53c:	2300      	movs	r3, #0
 800a53e:	f7f6 fa97 	bl	8000a70 <__aeabi_dcmpgt>
 800a542:	2800      	cmp	r0, #0
 800a544:	d0bf      	beq.n	800a4c6 <floor+0x46>
 800a546:	2c00      	cmp	r4, #0
 800a548:	da02      	bge.n	800a550 <floor+0xd0>
 800a54a:	2e14      	cmp	r6, #20
 800a54c:	d103      	bne.n	800a556 <floor+0xd6>
 800a54e:	3401      	adds	r4, #1
 800a550:	ea25 0507 	bic.w	r5, r5, r7
 800a554:	e7b7      	b.n	800a4c6 <floor+0x46>
 800a556:	2301      	movs	r3, #1
 800a558:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a55c:	fa03 f606 	lsl.w	r6, r3, r6
 800a560:	4435      	add	r5, r6
 800a562:	4545      	cmp	r5, r8
 800a564:	bf38      	it	cc
 800a566:	18e4      	addcc	r4, r4, r3
 800a568:	e7f2      	b.n	800a550 <floor+0xd0>
 800a56a:	2500      	movs	r5, #0
 800a56c:	462c      	mov	r4, r5
 800a56e:	e7aa      	b.n	800a4c6 <floor+0x46>
 800a570:	8800759c 	.word	0x8800759c
 800a574:	7e37e43c 	.word	0x7e37e43c
 800a578:	bff00000 	.word	0xbff00000
 800a57c:	000fffff 	.word	0x000fffff

0800a580 <sin>:
 800a580:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a582:	ec53 2b10 	vmov	r2, r3, d0
 800a586:	4828      	ldr	r0, [pc, #160]	; (800a628 <sin+0xa8>)
 800a588:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a58c:	4281      	cmp	r1, r0
 800a58e:	dc07      	bgt.n	800a5a0 <sin+0x20>
 800a590:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a620 <sin+0xa0>
 800a594:	2000      	movs	r0, #0
 800a596:	b005      	add	sp, #20
 800a598:	f85d eb04 	ldr.w	lr, [sp], #4
 800a59c:	f001 bf80 	b.w	800c4a0 <__kernel_sin>
 800a5a0:	4822      	ldr	r0, [pc, #136]	; (800a62c <sin+0xac>)
 800a5a2:	4281      	cmp	r1, r0
 800a5a4:	dd09      	ble.n	800a5ba <sin+0x3a>
 800a5a6:	ee10 0a10 	vmov	r0, s0
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	f7f5 fe18 	bl	80001e0 <__aeabi_dsub>
 800a5b0:	ec41 0b10 	vmov	d0, r0, r1
 800a5b4:	b005      	add	sp, #20
 800a5b6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a5ba:	4668      	mov	r0, sp
 800a5bc:	f001 f898 	bl	800b6f0 <__ieee754_rem_pio2>
 800a5c0:	f000 0003 	and.w	r0, r0, #3
 800a5c4:	2801      	cmp	r0, #1
 800a5c6:	d00c      	beq.n	800a5e2 <sin+0x62>
 800a5c8:	2802      	cmp	r0, #2
 800a5ca:	d011      	beq.n	800a5f0 <sin+0x70>
 800a5cc:	b9f0      	cbnz	r0, 800a60c <sin+0x8c>
 800a5ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5d2:	ed9d 0b00 	vldr	d0, [sp]
 800a5d6:	2001      	movs	r0, #1
 800a5d8:	f001 ff62 	bl	800c4a0 <__kernel_sin>
 800a5dc:	ec51 0b10 	vmov	r0, r1, d0
 800a5e0:	e7e6      	b.n	800a5b0 <sin+0x30>
 800a5e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5e6:	ed9d 0b00 	vldr	d0, [sp]
 800a5ea:	f001 fb41 	bl	800bc70 <__kernel_cos>
 800a5ee:	e7f5      	b.n	800a5dc <sin+0x5c>
 800a5f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5f4:	ed9d 0b00 	vldr	d0, [sp]
 800a5f8:	2001      	movs	r0, #1
 800a5fa:	f001 ff51 	bl	800c4a0 <__kernel_sin>
 800a5fe:	ec53 2b10 	vmov	r2, r3, d0
 800a602:	ee10 0a10 	vmov	r0, s0
 800a606:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a60a:	e7d1      	b.n	800a5b0 <sin+0x30>
 800a60c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a610:	ed9d 0b00 	vldr	d0, [sp]
 800a614:	f001 fb2c 	bl	800bc70 <__kernel_cos>
 800a618:	e7f1      	b.n	800a5fe <sin+0x7e>
 800a61a:	bf00      	nop
 800a61c:	f3af 8000 	nop.w
	...
 800a628:	3fe921fb 	.word	0x3fe921fb
 800a62c:	7fefffff 	.word	0x7fefffff

0800a630 <acos>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	ed2d 8b02 	vpush	{d8}
 800a636:	ec55 4b10 	vmov	r4, r5, d0
 800a63a:	f000 f8c9 	bl	800a7d0 <__ieee754_acos>
 800a63e:	4622      	mov	r2, r4
 800a640:	462b      	mov	r3, r5
 800a642:	4620      	mov	r0, r4
 800a644:	4629      	mov	r1, r5
 800a646:	eeb0 8a40 	vmov.f32	s16, s0
 800a64a:	eef0 8a60 	vmov.f32	s17, s1
 800a64e:	f7f6 fa19 	bl	8000a84 <__aeabi_dcmpun>
 800a652:	b9a8      	cbnz	r0, 800a680 <acos+0x50>
 800a654:	ec45 4b10 	vmov	d0, r4, r5
 800a658:	f002 f810 	bl	800c67c <fabs>
 800a65c:	4b0c      	ldr	r3, [pc, #48]	; (800a690 <acos+0x60>)
 800a65e:	ec51 0b10 	vmov	r0, r1, d0
 800a662:	2200      	movs	r2, #0
 800a664:	f7f6 fa04 	bl	8000a70 <__aeabi_dcmpgt>
 800a668:	b150      	cbz	r0, 800a680 <acos+0x50>
 800a66a:	f7ff fd4f 	bl	800a10c <__errno>
 800a66e:	ecbd 8b02 	vpop	{d8}
 800a672:	2321      	movs	r3, #33	; 0x21
 800a674:	6003      	str	r3, [r0, #0]
 800a676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a67a:	4806      	ldr	r0, [pc, #24]	; (800a694 <acos+0x64>)
 800a67c:	f002 b814 	b.w	800c6a8 <nan>
 800a680:	eeb0 0a48 	vmov.f32	s0, s16
 800a684:	eef0 0a68 	vmov.f32	s1, s17
 800a688:	ecbd 8b02 	vpop	{d8}
 800a68c:	bd38      	pop	{r3, r4, r5, pc}
 800a68e:	bf00      	nop
 800a690:	3ff00000 	.word	0x3ff00000
 800a694:	0800c800 	.word	0x0800c800

0800a698 <pow>:
 800a698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69a:	ed2d 8b02 	vpush	{d8}
 800a69e:	eeb0 8a40 	vmov.f32	s16, s0
 800a6a2:	eef0 8a60 	vmov.f32	s17, s1
 800a6a6:	ec55 4b11 	vmov	r4, r5, d1
 800a6aa:	f000 faf1 	bl	800ac90 <__ieee754_pow>
 800a6ae:	4622      	mov	r2, r4
 800a6b0:	462b      	mov	r3, r5
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	4629      	mov	r1, r5
 800a6b6:	ec57 6b10 	vmov	r6, r7, d0
 800a6ba:	f7f6 f9e3 	bl	8000a84 <__aeabi_dcmpun>
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	d13b      	bne.n	800a73a <pow+0xa2>
 800a6c2:	ec51 0b18 	vmov	r0, r1, d8
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	f7f6 f9a9 	bl	8000a20 <__aeabi_dcmpeq>
 800a6ce:	b1b8      	cbz	r0, 800a700 <pow+0x68>
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	4629      	mov	r1, r5
 800a6d8:	f7f6 f9a2 	bl	8000a20 <__aeabi_dcmpeq>
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	d146      	bne.n	800a76e <pow+0xd6>
 800a6e0:	ec45 4b10 	vmov	d0, r4, r5
 800a6e4:	f001 ffd3 	bl	800c68e <finite>
 800a6e8:	b338      	cbz	r0, 800a73a <pow+0xa2>
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	4629      	mov	r1, r5
 800a6f2:	f7f6 f99f 	bl	8000a34 <__aeabi_dcmplt>
 800a6f6:	b300      	cbz	r0, 800a73a <pow+0xa2>
 800a6f8:	f7ff fd08 	bl	800a10c <__errno>
 800a6fc:	2322      	movs	r3, #34	; 0x22
 800a6fe:	e01b      	b.n	800a738 <pow+0xa0>
 800a700:	ec47 6b10 	vmov	d0, r6, r7
 800a704:	f001 ffc3 	bl	800c68e <finite>
 800a708:	b9e0      	cbnz	r0, 800a744 <pow+0xac>
 800a70a:	eeb0 0a48 	vmov.f32	s0, s16
 800a70e:	eef0 0a68 	vmov.f32	s1, s17
 800a712:	f001 ffbc 	bl	800c68e <finite>
 800a716:	b1a8      	cbz	r0, 800a744 <pow+0xac>
 800a718:	ec45 4b10 	vmov	d0, r4, r5
 800a71c:	f001 ffb7 	bl	800c68e <finite>
 800a720:	b180      	cbz	r0, 800a744 <pow+0xac>
 800a722:	4632      	mov	r2, r6
 800a724:	463b      	mov	r3, r7
 800a726:	4630      	mov	r0, r6
 800a728:	4639      	mov	r1, r7
 800a72a:	f7f6 f9ab 	bl	8000a84 <__aeabi_dcmpun>
 800a72e:	2800      	cmp	r0, #0
 800a730:	d0e2      	beq.n	800a6f8 <pow+0x60>
 800a732:	f7ff fceb 	bl	800a10c <__errno>
 800a736:	2321      	movs	r3, #33	; 0x21
 800a738:	6003      	str	r3, [r0, #0]
 800a73a:	ecbd 8b02 	vpop	{d8}
 800a73e:	ec47 6b10 	vmov	d0, r6, r7
 800a742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a744:	2200      	movs	r2, #0
 800a746:	2300      	movs	r3, #0
 800a748:	4630      	mov	r0, r6
 800a74a:	4639      	mov	r1, r7
 800a74c:	f7f6 f968 	bl	8000a20 <__aeabi_dcmpeq>
 800a750:	2800      	cmp	r0, #0
 800a752:	d0f2      	beq.n	800a73a <pow+0xa2>
 800a754:	eeb0 0a48 	vmov.f32	s0, s16
 800a758:	eef0 0a68 	vmov.f32	s1, s17
 800a75c:	f001 ff97 	bl	800c68e <finite>
 800a760:	2800      	cmp	r0, #0
 800a762:	d0ea      	beq.n	800a73a <pow+0xa2>
 800a764:	ec45 4b10 	vmov	d0, r4, r5
 800a768:	f001 ff91 	bl	800c68e <finite>
 800a76c:	e7c3      	b.n	800a6f6 <pow+0x5e>
 800a76e:	4f01      	ldr	r7, [pc, #4]	; (800a774 <pow+0xdc>)
 800a770:	2600      	movs	r6, #0
 800a772:	e7e2      	b.n	800a73a <pow+0xa2>
 800a774:	3ff00000 	.word	0x3ff00000

0800a778 <sqrt>:
 800a778:	b538      	push	{r3, r4, r5, lr}
 800a77a:	ed2d 8b02 	vpush	{d8}
 800a77e:	ec55 4b10 	vmov	r4, r5, d0
 800a782:	f001 f9c1 	bl	800bb08 <__ieee754_sqrt>
 800a786:	4622      	mov	r2, r4
 800a788:	462b      	mov	r3, r5
 800a78a:	4620      	mov	r0, r4
 800a78c:	4629      	mov	r1, r5
 800a78e:	eeb0 8a40 	vmov.f32	s16, s0
 800a792:	eef0 8a60 	vmov.f32	s17, s1
 800a796:	f7f6 f975 	bl	8000a84 <__aeabi_dcmpun>
 800a79a:	b990      	cbnz	r0, 800a7c2 <sqrt+0x4a>
 800a79c:	2200      	movs	r2, #0
 800a79e:	2300      	movs	r3, #0
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	4629      	mov	r1, r5
 800a7a4:	f7f6 f946 	bl	8000a34 <__aeabi_dcmplt>
 800a7a8:	b158      	cbz	r0, 800a7c2 <sqrt+0x4a>
 800a7aa:	f7ff fcaf 	bl	800a10c <__errno>
 800a7ae:	2321      	movs	r3, #33	; 0x21
 800a7b0:	6003      	str	r3, [r0, #0]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	4610      	mov	r0, r2
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	f7f5 fff3 	bl	80007a4 <__aeabi_ddiv>
 800a7be:	ec41 0b18 	vmov	d8, r0, r1
 800a7c2:	eeb0 0a48 	vmov.f32	s0, s16
 800a7c6:	eef0 0a68 	vmov.f32	s1, s17
 800a7ca:	ecbd 8b02 	vpop	{d8}
 800a7ce:	bd38      	pop	{r3, r4, r5, pc}

0800a7d0 <__ieee754_acos>:
 800a7d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d4:	ec55 4b10 	vmov	r4, r5, d0
 800a7d8:	49b7      	ldr	r1, [pc, #732]	; (800aab8 <__ieee754_acos+0x2e8>)
 800a7da:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a7de:	428b      	cmp	r3, r1
 800a7e0:	dd1b      	ble.n	800a81a <__ieee754_acos+0x4a>
 800a7e2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800a7e6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a7ea:	4323      	orrs	r3, r4
 800a7ec:	d106      	bne.n	800a7fc <__ieee754_acos+0x2c>
 800a7ee:	2d00      	cmp	r5, #0
 800a7f0:	f300 8211 	bgt.w	800ac16 <__ieee754_acos+0x446>
 800a7f4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800aa50 <__ieee754_acos+0x280>
 800a7f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7fc:	ee10 2a10 	vmov	r2, s0
 800a800:	462b      	mov	r3, r5
 800a802:	ee10 0a10 	vmov	r0, s0
 800a806:	4629      	mov	r1, r5
 800a808:	f7f5 fcea 	bl	80001e0 <__aeabi_dsub>
 800a80c:	4602      	mov	r2, r0
 800a80e:	460b      	mov	r3, r1
 800a810:	f7f5 ffc8 	bl	80007a4 <__aeabi_ddiv>
 800a814:	ec41 0b10 	vmov	d0, r0, r1
 800a818:	e7ee      	b.n	800a7f8 <__ieee754_acos+0x28>
 800a81a:	49a8      	ldr	r1, [pc, #672]	; (800aabc <__ieee754_acos+0x2ec>)
 800a81c:	428b      	cmp	r3, r1
 800a81e:	f300 8087 	bgt.w	800a930 <__ieee754_acos+0x160>
 800a822:	4aa7      	ldr	r2, [pc, #668]	; (800aac0 <__ieee754_acos+0x2f0>)
 800a824:	4293      	cmp	r3, r2
 800a826:	f340 81f9 	ble.w	800ac1c <__ieee754_acos+0x44c>
 800a82a:	ee10 2a10 	vmov	r2, s0
 800a82e:	ee10 0a10 	vmov	r0, s0
 800a832:	462b      	mov	r3, r5
 800a834:	4629      	mov	r1, r5
 800a836:	f7f5 fe8b 	bl	8000550 <__aeabi_dmul>
 800a83a:	a387      	add	r3, pc, #540	; (adr r3, 800aa58 <__ieee754_acos+0x288>)
 800a83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a840:	4606      	mov	r6, r0
 800a842:	460f      	mov	r7, r1
 800a844:	f7f5 fe84 	bl	8000550 <__aeabi_dmul>
 800a848:	a385      	add	r3, pc, #532	; (adr r3, 800aa60 <__ieee754_acos+0x290>)
 800a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84e:	f7f5 fcc9 	bl	80001e4 <__adddf3>
 800a852:	4632      	mov	r2, r6
 800a854:	463b      	mov	r3, r7
 800a856:	f7f5 fe7b 	bl	8000550 <__aeabi_dmul>
 800a85a:	a383      	add	r3, pc, #524	; (adr r3, 800aa68 <__ieee754_acos+0x298>)
 800a85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a860:	f7f5 fcbe 	bl	80001e0 <__aeabi_dsub>
 800a864:	4632      	mov	r2, r6
 800a866:	463b      	mov	r3, r7
 800a868:	f7f5 fe72 	bl	8000550 <__aeabi_dmul>
 800a86c:	a380      	add	r3, pc, #512	; (adr r3, 800aa70 <__ieee754_acos+0x2a0>)
 800a86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a872:	f7f5 fcb7 	bl	80001e4 <__adddf3>
 800a876:	4632      	mov	r2, r6
 800a878:	463b      	mov	r3, r7
 800a87a:	f7f5 fe69 	bl	8000550 <__aeabi_dmul>
 800a87e:	a37e      	add	r3, pc, #504	; (adr r3, 800aa78 <__ieee754_acos+0x2a8>)
 800a880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a884:	f7f5 fcac 	bl	80001e0 <__aeabi_dsub>
 800a888:	4632      	mov	r2, r6
 800a88a:	463b      	mov	r3, r7
 800a88c:	f7f5 fe60 	bl	8000550 <__aeabi_dmul>
 800a890:	a37b      	add	r3, pc, #492	; (adr r3, 800aa80 <__ieee754_acos+0x2b0>)
 800a892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a896:	f7f5 fca5 	bl	80001e4 <__adddf3>
 800a89a:	4632      	mov	r2, r6
 800a89c:	463b      	mov	r3, r7
 800a89e:	f7f5 fe57 	bl	8000550 <__aeabi_dmul>
 800a8a2:	a379      	add	r3, pc, #484	; (adr r3, 800aa88 <__ieee754_acos+0x2b8>)
 800a8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a8:	4680      	mov	r8, r0
 800a8aa:	4689      	mov	r9, r1
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	4639      	mov	r1, r7
 800a8b0:	f7f5 fe4e 	bl	8000550 <__aeabi_dmul>
 800a8b4:	a376      	add	r3, pc, #472	; (adr r3, 800aa90 <__ieee754_acos+0x2c0>)
 800a8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ba:	f7f5 fc91 	bl	80001e0 <__aeabi_dsub>
 800a8be:	4632      	mov	r2, r6
 800a8c0:	463b      	mov	r3, r7
 800a8c2:	f7f5 fe45 	bl	8000550 <__aeabi_dmul>
 800a8c6:	a374      	add	r3, pc, #464	; (adr r3, 800aa98 <__ieee754_acos+0x2c8>)
 800a8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8cc:	f7f5 fc8a 	bl	80001e4 <__adddf3>
 800a8d0:	4632      	mov	r2, r6
 800a8d2:	463b      	mov	r3, r7
 800a8d4:	f7f5 fe3c 	bl	8000550 <__aeabi_dmul>
 800a8d8:	a371      	add	r3, pc, #452	; (adr r3, 800aaa0 <__ieee754_acos+0x2d0>)
 800a8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8de:	f7f5 fc7f 	bl	80001e0 <__aeabi_dsub>
 800a8e2:	4632      	mov	r2, r6
 800a8e4:	463b      	mov	r3, r7
 800a8e6:	f7f5 fe33 	bl	8000550 <__aeabi_dmul>
 800a8ea:	4b76      	ldr	r3, [pc, #472]	; (800aac4 <__ieee754_acos+0x2f4>)
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f7f5 fc79 	bl	80001e4 <__adddf3>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	4640      	mov	r0, r8
 800a8f8:	4649      	mov	r1, r9
 800a8fa:	f7f5 ff53 	bl	80007a4 <__aeabi_ddiv>
 800a8fe:	4622      	mov	r2, r4
 800a900:	462b      	mov	r3, r5
 800a902:	f7f5 fe25 	bl	8000550 <__aeabi_dmul>
 800a906:	4602      	mov	r2, r0
 800a908:	460b      	mov	r3, r1
 800a90a:	a167      	add	r1, pc, #412	; (adr r1, 800aaa8 <__ieee754_acos+0x2d8>)
 800a90c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a910:	f7f5 fc66 	bl	80001e0 <__aeabi_dsub>
 800a914:	4602      	mov	r2, r0
 800a916:	460b      	mov	r3, r1
 800a918:	4620      	mov	r0, r4
 800a91a:	4629      	mov	r1, r5
 800a91c:	f7f5 fc60 	bl	80001e0 <__aeabi_dsub>
 800a920:	4602      	mov	r2, r0
 800a922:	460b      	mov	r3, r1
 800a924:	a162      	add	r1, pc, #392	; (adr r1, 800aab0 <__ieee754_acos+0x2e0>)
 800a926:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a92a:	f7f5 fc59 	bl	80001e0 <__aeabi_dsub>
 800a92e:	e771      	b.n	800a814 <__ieee754_acos+0x44>
 800a930:	2d00      	cmp	r5, #0
 800a932:	f280 80cb 	bge.w	800aacc <__ieee754_acos+0x2fc>
 800a936:	ee10 0a10 	vmov	r0, s0
 800a93a:	4b62      	ldr	r3, [pc, #392]	; (800aac4 <__ieee754_acos+0x2f4>)
 800a93c:	2200      	movs	r2, #0
 800a93e:	4629      	mov	r1, r5
 800a940:	f7f5 fc50 	bl	80001e4 <__adddf3>
 800a944:	4b60      	ldr	r3, [pc, #384]	; (800aac8 <__ieee754_acos+0x2f8>)
 800a946:	2200      	movs	r2, #0
 800a948:	f7f5 fe02 	bl	8000550 <__aeabi_dmul>
 800a94c:	a342      	add	r3, pc, #264	; (adr r3, 800aa58 <__ieee754_acos+0x288>)
 800a94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a952:	4604      	mov	r4, r0
 800a954:	460d      	mov	r5, r1
 800a956:	f7f5 fdfb 	bl	8000550 <__aeabi_dmul>
 800a95a:	a341      	add	r3, pc, #260	; (adr r3, 800aa60 <__ieee754_acos+0x290>)
 800a95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a960:	f7f5 fc40 	bl	80001e4 <__adddf3>
 800a964:	4622      	mov	r2, r4
 800a966:	462b      	mov	r3, r5
 800a968:	f7f5 fdf2 	bl	8000550 <__aeabi_dmul>
 800a96c:	a33e      	add	r3, pc, #248	; (adr r3, 800aa68 <__ieee754_acos+0x298>)
 800a96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a972:	f7f5 fc35 	bl	80001e0 <__aeabi_dsub>
 800a976:	4622      	mov	r2, r4
 800a978:	462b      	mov	r3, r5
 800a97a:	f7f5 fde9 	bl	8000550 <__aeabi_dmul>
 800a97e:	a33c      	add	r3, pc, #240	; (adr r3, 800aa70 <__ieee754_acos+0x2a0>)
 800a980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a984:	f7f5 fc2e 	bl	80001e4 <__adddf3>
 800a988:	4622      	mov	r2, r4
 800a98a:	462b      	mov	r3, r5
 800a98c:	f7f5 fde0 	bl	8000550 <__aeabi_dmul>
 800a990:	a339      	add	r3, pc, #228	; (adr r3, 800aa78 <__ieee754_acos+0x2a8>)
 800a992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a996:	f7f5 fc23 	bl	80001e0 <__aeabi_dsub>
 800a99a:	4622      	mov	r2, r4
 800a99c:	462b      	mov	r3, r5
 800a99e:	f7f5 fdd7 	bl	8000550 <__aeabi_dmul>
 800a9a2:	a337      	add	r3, pc, #220	; (adr r3, 800aa80 <__ieee754_acos+0x2b0>)
 800a9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a8:	f7f5 fc1c 	bl	80001e4 <__adddf3>
 800a9ac:	4622      	mov	r2, r4
 800a9ae:	462b      	mov	r3, r5
 800a9b0:	f7f5 fdce 	bl	8000550 <__aeabi_dmul>
 800a9b4:	ec45 4b10 	vmov	d0, r4, r5
 800a9b8:	4680      	mov	r8, r0
 800a9ba:	4689      	mov	r9, r1
 800a9bc:	f001 f8a4 	bl	800bb08 <__ieee754_sqrt>
 800a9c0:	a331      	add	r3, pc, #196	; (adr r3, 800aa88 <__ieee754_acos+0x2b8>)
 800a9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	4629      	mov	r1, r5
 800a9ca:	ec57 6b10 	vmov	r6, r7, d0
 800a9ce:	f7f5 fdbf 	bl	8000550 <__aeabi_dmul>
 800a9d2:	a32f      	add	r3, pc, #188	; (adr r3, 800aa90 <__ieee754_acos+0x2c0>)
 800a9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d8:	f7f5 fc02 	bl	80001e0 <__aeabi_dsub>
 800a9dc:	4622      	mov	r2, r4
 800a9de:	462b      	mov	r3, r5
 800a9e0:	f7f5 fdb6 	bl	8000550 <__aeabi_dmul>
 800a9e4:	a32c      	add	r3, pc, #176	; (adr r3, 800aa98 <__ieee754_acos+0x2c8>)
 800a9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ea:	f7f5 fbfb 	bl	80001e4 <__adddf3>
 800a9ee:	4622      	mov	r2, r4
 800a9f0:	462b      	mov	r3, r5
 800a9f2:	f7f5 fdad 	bl	8000550 <__aeabi_dmul>
 800a9f6:	a32a      	add	r3, pc, #168	; (adr r3, 800aaa0 <__ieee754_acos+0x2d0>)
 800a9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fc:	f7f5 fbf0 	bl	80001e0 <__aeabi_dsub>
 800aa00:	4622      	mov	r2, r4
 800aa02:	462b      	mov	r3, r5
 800aa04:	f7f5 fda4 	bl	8000550 <__aeabi_dmul>
 800aa08:	4b2e      	ldr	r3, [pc, #184]	; (800aac4 <__ieee754_acos+0x2f4>)
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f7f5 fbea 	bl	80001e4 <__adddf3>
 800aa10:	4602      	mov	r2, r0
 800aa12:	460b      	mov	r3, r1
 800aa14:	4640      	mov	r0, r8
 800aa16:	4649      	mov	r1, r9
 800aa18:	f7f5 fec4 	bl	80007a4 <__aeabi_ddiv>
 800aa1c:	4632      	mov	r2, r6
 800aa1e:	463b      	mov	r3, r7
 800aa20:	f7f5 fd96 	bl	8000550 <__aeabi_dmul>
 800aa24:	a320      	add	r3, pc, #128	; (adr r3, 800aaa8 <__ieee754_acos+0x2d8>)
 800aa26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2a:	f7f5 fbd9 	bl	80001e0 <__aeabi_dsub>
 800aa2e:	4632      	mov	r2, r6
 800aa30:	463b      	mov	r3, r7
 800aa32:	f7f5 fbd7 	bl	80001e4 <__adddf3>
 800aa36:	4602      	mov	r2, r0
 800aa38:	460b      	mov	r3, r1
 800aa3a:	f7f5 fbd3 	bl	80001e4 <__adddf3>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	460b      	mov	r3, r1
 800aa42:	a103      	add	r1, pc, #12	; (adr r1, 800aa50 <__ieee754_acos+0x280>)
 800aa44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa48:	e76f      	b.n	800a92a <__ieee754_acos+0x15a>
 800aa4a:	bf00      	nop
 800aa4c:	f3af 8000 	nop.w
 800aa50:	54442d18 	.word	0x54442d18
 800aa54:	400921fb 	.word	0x400921fb
 800aa58:	0dfdf709 	.word	0x0dfdf709
 800aa5c:	3f023de1 	.word	0x3f023de1
 800aa60:	7501b288 	.word	0x7501b288
 800aa64:	3f49efe0 	.word	0x3f49efe0
 800aa68:	b5688f3b 	.word	0xb5688f3b
 800aa6c:	3fa48228 	.word	0x3fa48228
 800aa70:	0e884455 	.word	0x0e884455
 800aa74:	3fc9c155 	.word	0x3fc9c155
 800aa78:	03eb6f7d 	.word	0x03eb6f7d
 800aa7c:	3fd4d612 	.word	0x3fd4d612
 800aa80:	55555555 	.word	0x55555555
 800aa84:	3fc55555 	.word	0x3fc55555
 800aa88:	b12e9282 	.word	0xb12e9282
 800aa8c:	3fb3b8c5 	.word	0x3fb3b8c5
 800aa90:	1b8d0159 	.word	0x1b8d0159
 800aa94:	3fe6066c 	.word	0x3fe6066c
 800aa98:	9c598ac8 	.word	0x9c598ac8
 800aa9c:	40002ae5 	.word	0x40002ae5
 800aaa0:	1c8a2d4b 	.word	0x1c8a2d4b
 800aaa4:	40033a27 	.word	0x40033a27
 800aaa8:	33145c07 	.word	0x33145c07
 800aaac:	3c91a626 	.word	0x3c91a626
 800aab0:	54442d18 	.word	0x54442d18
 800aab4:	3ff921fb 	.word	0x3ff921fb
 800aab8:	3fefffff 	.word	0x3fefffff
 800aabc:	3fdfffff 	.word	0x3fdfffff
 800aac0:	3c600000 	.word	0x3c600000
 800aac4:	3ff00000 	.word	0x3ff00000
 800aac8:	3fe00000 	.word	0x3fe00000
 800aacc:	ee10 2a10 	vmov	r2, s0
 800aad0:	462b      	mov	r3, r5
 800aad2:	496d      	ldr	r1, [pc, #436]	; (800ac88 <__ieee754_acos+0x4b8>)
 800aad4:	2000      	movs	r0, #0
 800aad6:	f7f5 fb83 	bl	80001e0 <__aeabi_dsub>
 800aada:	4b6c      	ldr	r3, [pc, #432]	; (800ac8c <__ieee754_acos+0x4bc>)
 800aadc:	2200      	movs	r2, #0
 800aade:	f7f5 fd37 	bl	8000550 <__aeabi_dmul>
 800aae2:	4604      	mov	r4, r0
 800aae4:	460d      	mov	r5, r1
 800aae6:	ec45 4b10 	vmov	d0, r4, r5
 800aaea:	f001 f80d 	bl	800bb08 <__ieee754_sqrt>
 800aaee:	a34e      	add	r3, pc, #312	; (adr r3, 800ac28 <__ieee754_acos+0x458>)
 800aaf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	4629      	mov	r1, r5
 800aaf8:	ec59 8b10 	vmov	r8, r9, d0
 800aafc:	f7f5 fd28 	bl	8000550 <__aeabi_dmul>
 800ab00:	a34b      	add	r3, pc, #300	; (adr r3, 800ac30 <__ieee754_acos+0x460>)
 800ab02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab06:	f7f5 fb6d 	bl	80001e4 <__adddf3>
 800ab0a:	4622      	mov	r2, r4
 800ab0c:	462b      	mov	r3, r5
 800ab0e:	f7f5 fd1f 	bl	8000550 <__aeabi_dmul>
 800ab12:	a349      	add	r3, pc, #292	; (adr r3, 800ac38 <__ieee754_acos+0x468>)
 800ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab18:	f7f5 fb62 	bl	80001e0 <__aeabi_dsub>
 800ab1c:	4622      	mov	r2, r4
 800ab1e:	462b      	mov	r3, r5
 800ab20:	f7f5 fd16 	bl	8000550 <__aeabi_dmul>
 800ab24:	a346      	add	r3, pc, #280	; (adr r3, 800ac40 <__ieee754_acos+0x470>)
 800ab26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2a:	f7f5 fb5b 	bl	80001e4 <__adddf3>
 800ab2e:	4622      	mov	r2, r4
 800ab30:	462b      	mov	r3, r5
 800ab32:	f7f5 fd0d 	bl	8000550 <__aeabi_dmul>
 800ab36:	a344      	add	r3, pc, #272	; (adr r3, 800ac48 <__ieee754_acos+0x478>)
 800ab38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3c:	f7f5 fb50 	bl	80001e0 <__aeabi_dsub>
 800ab40:	4622      	mov	r2, r4
 800ab42:	462b      	mov	r3, r5
 800ab44:	f7f5 fd04 	bl	8000550 <__aeabi_dmul>
 800ab48:	a341      	add	r3, pc, #260	; (adr r3, 800ac50 <__ieee754_acos+0x480>)
 800ab4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4e:	f7f5 fb49 	bl	80001e4 <__adddf3>
 800ab52:	4622      	mov	r2, r4
 800ab54:	462b      	mov	r3, r5
 800ab56:	f7f5 fcfb 	bl	8000550 <__aeabi_dmul>
 800ab5a:	a33f      	add	r3, pc, #252	; (adr r3, 800ac58 <__ieee754_acos+0x488>)
 800ab5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab60:	4682      	mov	sl, r0
 800ab62:	468b      	mov	fp, r1
 800ab64:	4620      	mov	r0, r4
 800ab66:	4629      	mov	r1, r5
 800ab68:	f7f5 fcf2 	bl	8000550 <__aeabi_dmul>
 800ab6c:	a33c      	add	r3, pc, #240	; (adr r3, 800ac60 <__ieee754_acos+0x490>)
 800ab6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab72:	f7f5 fb35 	bl	80001e0 <__aeabi_dsub>
 800ab76:	4622      	mov	r2, r4
 800ab78:	462b      	mov	r3, r5
 800ab7a:	f7f5 fce9 	bl	8000550 <__aeabi_dmul>
 800ab7e:	a33a      	add	r3, pc, #232	; (adr r3, 800ac68 <__ieee754_acos+0x498>)
 800ab80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab84:	f7f5 fb2e 	bl	80001e4 <__adddf3>
 800ab88:	4622      	mov	r2, r4
 800ab8a:	462b      	mov	r3, r5
 800ab8c:	f7f5 fce0 	bl	8000550 <__aeabi_dmul>
 800ab90:	a337      	add	r3, pc, #220	; (adr r3, 800ac70 <__ieee754_acos+0x4a0>)
 800ab92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab96:	f7f5 fb23 	bl	80001e0 <__aeabi_dsub>
 800ab9a:	4622      	mov	r2, r4
 800ab9c:	462b      	mov	r3, r5
 800ab9e:	f7f5 fcd7 	bl	8000550 <__aeabi_dmul>
 800aba2:	4b39      	ldr	r3, [pc, #228]	; (800ac88 <__ieee754_acos+0x4b8>)
 800aba4:	2200      	movs	r2, #0
 800aba6:	f7f5 fb1d 	bl	80001e4 <__adddf3>
 800abaa:	4602      	mov	r2, r0
 800abac:	460b      	mov	r3, r1
 800abae:	4650      	mov	r0, sl
 800abb0:	4659      	mov	r1, fp
 800abb2:	f7f5 fdf7 	bl	80007a4 <__aeabi_ddiv>
 800abb6:	4642      	mov	r2, r8
 800abb8:	464b      	mov	r3, r9
 800abba:	f7f5 fcc9 	bl	8000550 <__aeabi_dmul>
 800abbe:	2600      	movs	r6, #0
 800abc0:	4682      	mov	sl, r0
 800abc2:	468b      	mov	fp, r1
 800abc4:	4632      	mov	r2, r6
 800abc6:	464b      	mov	r3, r9
 800abc8:	4630      	mov	r0, r6
 800abca:	4649      	mov	r1, r9
 800abcc:	f7f5 fcc0 	bl	8000550 <__aeabi_dmul>
 800abd0:	4602      	mov	r2, r0
 800abd2:	460b      	mov	r3, r1
 800abd4:	4620      	mov	r0, r4
 800abd6:	4629      	mov	r1, r5
 800abd8:	f7f5 fb02 	bl	80001e0 <__aeabi_dsub>
 800abdc:	4632      	mov	r2, r6
 800abde:	4604      	mov	r4, r0
 800abe0:	460d      	mov	r5, r1
 800abe2:	464b      	mov	r3, r9
 800abe4:	4640      	mov	r0, r8
 800abe6:	4649      	mov	r1, r9
 800abe8:	f7f5 fafc 	bl	80001e4 <__adddf3>
 800abec:	4602      	mov	r2, r0
 800abee:	460b      	mov	r3, r1
 800abf0:	4620      	mov	r0, r4
 800abf2:	4629      	mov	r1, r5
 800abf4:	f7f5 fdd6 	bl	80007a4 <__aeabi_ddiv>
 800abf8:	4602      	mov	r2, r0
 800abfa:	460b      	mov	r3, r1
 800abfc:	4650      	mov	r0, sl
 800abfe:	4659      	mov	r1, fp
 800ac00:	f7f5 faf0 	bl	80001e4 <__adddf3>
 800ac04:	4632      	mov	r2, r6
 800ac06:	464b      	mov	r3, r9
 800ac08:	f7f5 faec 	bl	80001e4 <__adddf3>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	460b      	mov	r3, r1
 800ac10:	f7f5 fae8 	bl	80001e4 <__adddf3>
 800ac14:	e5fe      	b.n	800a814 <__ieee754_acos+0x44>
 800ac16:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800ac78 <__ieee754_acos+0x4a8>
 800ac1a:	e5ed      	b.n	800a7f8 <__ieee754_acos+0x28>
 800ac1c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800ac80 <__ieee754_acos+0x4b0>
 800ac20:	e5ea      	b.n	800a7f8 <__ieee754_acos+0x28>
 800ac22:	bf00      	nop
 800ac24:	f3af 8000 	nop.w
 800ac28:	0dfdf709 	.word	0x0dfdf709
 800ac2c:	3f023de1 	.word	0x3f023de1
 800ac30:	7501b288 	.word	0x7501b288
 800ac34:	3f49efe0 	.word	0x3f49efe0
 800ac38:	b5688f3b 	.word	0xb5688f3b
 800ac3c:	3fa48228 	.word	0x3fa48228
 800ac40:	0e884455 	.word	0x0e884455
 800ac44:	3fc9c155 	.word	0x3fc9c155
 800ac48:	03eb6f7d 	.word	0x03eb6f7d
 800ac4c:	3fd4d612 	.word	0x3fd4d612
 800ac50:	55555555 	.word	0x55555555
 800ac54:	3fc55555 	.word	0x3fc55555
 800ac58:	b12e9282 	.word	0xb12e9282
 800ac5c:	3fb3b8c5 	.word	0x3fb3b8c5
 800ac60:	1b8d0159 	.word	0x1b8d0159
 800ac64:	3fe6066c 	.word	0x3fe6066c
 800ac68:	9c598ac8 	.word	0x9c598ac8
 800ac6c:	40002ae5 	.word	0x40002ae5
 800ac70:	1c8a2d4b 	.word	0x1c8a2d4b
 800ac74:	40033a27 	.word	0x40033a27
	...
 800ac80:	54442d18 	.word	0x54442d18
 800ac84:	3ff921fb 	.word	0x3ff921fb
 800ac88:	3ff00000 	.word	0x3ff00000
 800ac8c:	3fe00000 	.word	0x3fe00000

0800ac90 <__ieee754_pow>:
 800ac90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac94:	ed2d 8b06 	vpush	{d8-d10}
 800ac98:	b089      	sub	sp, #36	; 0x24
 800ac9a:	ed8d 1b00 	vstr	d1, [sp]
 800ac9e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800aca2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800aca6:	ea58 0102 	orrs.w	r1, r8, r2
 800acaa:	ec57 6b10 	vmov	r6, r7, d0
 800acae:	d115      	bne.n	800acdc <__ieee754_pow+0x4c>
 800acb0:	19b3      	adds	r3, r6, r6
 800acb2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800acb6:	4152      	adcs	r2, r2
 800acb8:	4299      	cmp	r1, r3
 800acba:	4b89      	ldr	r3, [pc, #548]	; (800aee0 <__ieee754_pow+0x250>)
 800acbc:	4193      	sbcs	r3, r2
 800acbe:	f080 84d2 	bcs.w	800b666 <__ieee754_pow+0x9d6>
 800acc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acc6:	4630      	mov	r0, r6
 800acc8:	4639      	mov	r1, r7
 800acca:	f7f5 fa8b 	bl	80001e4 <__adddf3>
 800acce:	ec41 0b10 	vmov	d0, r0, r1
 800acd2:	b009      	add	sp, #36	; 0x24
 800acd4:	ecbd 8b06 	vpop	{d8-d10}
 800acd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acdc:	4b81      	ldr	r3, [pc, #516]	; (800aee4 <__ieee754_pow+0x254>)
 800acde:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ace2:	429c      	cmp	r4, r3
 800ace4:	ee10 aa10 	vmov	sl, s0
 800ace8:	463d      	mov	r5, r7
 800acea:	dc06      	bgt.n	800acfa <__ieee754_pow+0x6a>
 800acec:	d101      	bne.n	800acf2 <__ieee754_pow+0x62>
 800acee:	2e00      	cmp	r6, #0
 800acf0:	d1e7      	bne.n	800acc2 <__ieee754_pow+0x32>
 800acf2:	4598      	cmp	r8, r3
 800acf4:	dc01      	bgt.n	800acfa <__ieee754_pow+0x6a>
 800acf6:	d10f      	bne.n	800ad18 <__ieee754_pow+0x88>
 800acf8:	b172      	cbz	r2, 800ad18 <__ieee754_pow+0x88>
 800acfa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800acfe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ad02:	ea55 050a 	orrs.w	r5, r5, sl
 800ad06:	d1dc      	bne.n	800acc2 <__ieee754_pow+0x32>
 800ad08:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ad0c:	18db      	adds	r3, r3, r3
 800ad0e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ad12:	4152      	adcs	r2, r2
 800ad14:	429d      	cmp	r5, r3
 800ad16:	e7d0      	b.n	800acba <__ieee754_pow+0x2a>
 800ad18:	2d00      	cmp	r5, #0
 800ad1a:	da3b      	bge.n	800ad94 <__ieee754_pow+0x104>
 800ad1c:	4b72      	ldr	r3, [pc, #456]	; (800aee8 <__ieee754_pow+0x258>)
 800ad1e:	4598      	cmp	r8, r3
 800ad20:	dc51      	bgt.n	800adc6 <__ieee754_pow+0x136>
 800ad22:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ad26:	4598      	cmp	r8, r3
 800ad28:	f340 84ac 	ble.w	800b684 <__ieee754_pow+0x9f4>
 800ad2c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ad30:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ad34:	2b14      	cmp	r3, #20
 800ad36:	dd0f      	ble.n	800ad58 <__ieee754_pow+0xc8>
 800ad38:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ad3c:	fa22 f103 	lsr.w	r1, r2, r3
 800ad40:	fa01 f303 	lsl.w	r3, r1, r3
 800ad44:	4293      	cmp	r3, r2
 800ad46:	f040 849d 	bne.w	800b684 <__ieee754_pow+0x9f4>
 800ad4a:	f001 0101 	and.w	r1, r1, #1
 800ad4e:	f1c1 0302 	rsb	r3, r1, #2
 800ad52:	9304      	str	r3, [sp, #16]
 800ad54:	b182      	cbz	r2, 800ad78 <__ieee754_pow+0xe8>
 800ad56:	e05f      	b.n	800ae18 <__ieee754_pow+0x188>
 800ad58:	2a00      	cmp	r2, #0
 800ad5a:	d15b      	bne.n	800ae14 <__ieee754_pow+0x184>
 800ad5c:	f1c3 0314 	rsb	r3, r3, #20
 800ad60:	fa48 f103 	asr.w	r1, r8, r3
 800ad64:	fa01 f303 	lsl.w	r3, r1, r3
 800ad68:	4543      	cmp	r3, r8
 800ad6a:	f040 8488 	bne.w	800b67e <__ieee754_pow+0x9ee>
 800ad6e:	f001 0101 	and.w	r1, r1, #1
 800ad72:	f1c1 0302 	rsb	r3, r1, #2
 800ad76:	9304      	str	r3, [sp, #16]
 800ad78:	4b5c      	ldr	r3, [pc, #368]	; (800aeec <__ieee754_pow+0x25c>)
 800ad7a:	4598      	cmp	r8, r3
 800ad7c:	d132      	bne.n	800ade4 <__ieee754_pow+0x154>
 800ad7e:	f1b9 0f00 	cmp.w	r9, #0
 800ad82:	f280 8478 	bge.w	800b676 <__ieee754_pow+0x9e6>
 800ad86:	4959      	ldr	r1, [pc, #356]	; (800aeec <__ieee754_pow+0x25c>)
 800ad88:	4632      	mov	r2, r6
 800ad8a:	463b      	mov	r3, r7
 800ad8c:	2000      	movs	r0, #0
 800ad8e:	f7f5 fd09 	bl	80007a4 <__aeabi_ddiv>
 800ad92:	e79c      	b.n	800acce <__ieee754_pow+0x3e>
 800ad94:	2300      	movs	r3, #0
 800ad96:	9304      	str	r3, [sp, #16]
 800ad98:	2a00      	cmp	r2, #0
 800ad9a:	d13d      	bne.n	800ae18 <__ieee754_pow+0x188>
 800ad9c:	4b51      	ldr	r3, [pc, #324]	; (800aee4 <__ieee754_pow+0x254>)
 800ad9e:	4598      	cmp	r8, r3
 800ada0:	d1ea      	bne.n	800ad78 <__ieee754_pow+0xe8>
 800ada2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ada6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800adaa:	ea53 030a 	orrs.w	r3, r3, sl
 800adae:	f000 845a 	beq.w	800b666 <__ieee754_pow+0x9d6>
 800adb2:	4b4f      	ldr	r3, [pc, #316]	; (800aef0 <__ieee754_pow+0x260>)
 800adb4:	429c      	cmp	r4, r3
 800adb6:	dd08      	ble.n	800adca <__ieee754_pow+0x13a>
 800adb8:	f1b9 0f00 	cmp.w	r9, #0
 800adbc:	f2c0 8457 	blt.w	800b66e <__ieee754_pow+0x9de>
 800adc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adc4:	e783      	b.n	800acce <__ieee754_pow+0x3e>
 800adc6:	2302      	movs	r3, #2
 800adc8:	e7e5      	b.n	800ad96 <__ieee754_pow+0x106>
 800adca:	f1b9 0f00 	cmp.w	r9, #0
 800adce:	f04f 0000 	mov.w	r0, #0
 800add2:	f04f 0100 	mov.w	r1, #0
 800add6:	f6bf af7a 	bge.w	800acce <__ieee754_pow+0x3e>
 800adda:	e9dd 0300 	ldrd	r0, r3, [sp]
 800adde:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ade2:	e774      	b.n	800acce <__ieee754_pow+0x3e>
 800ade4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ade8:	d106      	bne.n	800adf8 <__ieee754_pow+0x168>
 800adea:	4632      	mov	r2, r6
 800adec:	463b      	mov	r3, r7
 800adee:	4630      	mov	r0, r6
 800adf0:	4639      	mov	r1, r7
 800adf2:	f7f5 fbad 	bl	8000550 <__aeabi_dmul>
 800adf6:	e76a      	b.n	800acce <__ieee754_pow+0x3e>
 800adf8:	4b3e      	ldr	r3, [pc, #248]	; (800aef4 <__ieee754_pow+0x264>)
 800adfa:	4599      	cmp	r9, r3
 800adfc:	d10c      	bne.n	800ae18 <__ieee754_pow+0x188>
 800adfe:	2d00      	cmp	r5, #0
 800ae00:	db0a      	blt.n	800ae18 <__ieee754_pow+0x188>
 800ae02:	ec47 6b10 	vmov	d0, r6, r7
 800ae06:	b009      	add	sp, #36	; 0x24
 800ae08:	ecbd 8b06 	vpop	{d8-d10}
 800ae0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae10:	f000 be7a 	b.w	800bb08 <__ieee754_sqrt>
 800ae14:	2300      	movs	r3, #0
 800ae16:	9304      	str	r3, [sp, #16]
 800ae18:	ec47 6b10 	vmov	d0, r6, r7
 800ae1c:	f001 fc2e 	bl	800c67c <fabs>
 800ae20:	ec51 0b10 	vmov	r0, r1, d0
 800ae24:	f1ba 0f00 	cmp.w	sl, #0
 800ae28:	d129      	bne.n	800ae7e <__ieee754_pow+0x1ee>
 800ae2a:	b124      	cbz	r4, 800ae36 <__ieee754_pow+0x1a6>
 800ae2c:	4b2f      	ldr	r3, [pc, #188]	; (800aeec <__ieee754_pow+0x25c>)
 800ae2e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d123      	bne.n	800ae7e <__ieee754_pow+0x1ee>
 800ae36:	f1b9 0f00 	cmp.w	r9, #0
 800ae3a:	da05      	bge.n	800ae48 <__ieee754_pow+0x1b8>
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	460b      	mov	r3, r1
 800ae40:	2000      	movs	r0, #0
 800ae42:	492a      	ldr	r1, [pc, #168]	; (800aeec <__ieee754_pow+0x25c>)
 800ae44:	f7f5 fcae 	bl	80007a4 <__aeabi_ddiv>
 800ae48:	2d00      	cmp	r5, #0
 800ae4a:	f6bf af40 	bge.w	800acce <__ieee754_pow+0x3e>
 800ae4e:	9b04      	ldr	r3, [sp, #16]
 800ae50:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ae54:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ae58:	4323      	orrs	r3, r4
 800ae5a:	d108      	bne.n	800ae6e <__ieee754_pow+0x1de>
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	460b      	mov	r3, r1
 800ae60:	4610      	mov	r0, r2
 800ae62:	4619      	mov	r1, r3
 800ae64:	f7f5 f9bc 	bl	80001e0 <__aeabi_dsub>
 800ae68:	4602      	mov	r2, r0
 800ae6a:	460b      	mov	r3, r1
 800ae6c:	e78f      	b.n	800ad8e <__ieee754_pow+0xfe>
 800ae6e:	9b04      	ldr	r3, [sp, #16]
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	f47f af2c 	bne.w	800acce <__ieee754_pow+0x3e>
 800ae76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	e727      	b.n	800acce <__ieee754_pow+0x3e>
 800ae7e:	0feb      	lsrs	r3, r5, #31
 800ae80:	3b01      	subs	r3, #1
 800ae82:	9306      	str	r3, [sp, #24]
 800ae84:	9a06      	ldr	r2, [sp, #24]
 800ae86:	9b04      	ldr	r3, [sp, #16]
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	d102      	bne.n	800ae92 <__ieee754_pow+0x202>
 800ae8c:	4632      	mov	r2, r6
 800ae8e:	463b      	mov	r3, r7
 800ae90:	e7e6      	b.n	800ae60 <__ieee754_pow+0x1d0>
 800ae92:	4b19      	ldr	r3, [pc, #100]	; (800aef8 <__ieee754_pow+0x268>)
 800ae94:	4598      	cmp	r8, r3
 800ae96:	f340 80fb 	ble.w	800b090 <__ieee754_pow+0x400>
 800ae9a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ae9e:	4598      	cmp	r8, r3
 800aea0:	4b13      	ldr	r3, [pc, #76]	; (800aef0 <__ieee754_pow+0x260>)
 800aea2:	dd0c      	ble.n	800aebe <__ieee754_pow+0x22e>
 800aea4:	429c      	cmp	r4, r3
 800aea6:	dc0f      	bgt.n	800aec8 <__ieee754_pow+0x238>
 800aea8:	f1b9 0f00 	cmp.w	r9, #0
 800aeac:	da0f      	bge.n	800aece <__ieee754_pow+0x23e>
 800aeae:	2000      	movs	r0, #0
 800aeb0:	b009      	add	sp, #36	; 0x24
 800aeb2:	ecbd 8b06 	vpop	{d8-d10}
 800aeb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeba:	f001 bbd6 	b.w	800c66a <__math_oflow>
 800aebe:	429c      	cmp	r4, r3
 800aec0:	dbf2      	blt.n	800aea8 <__ieee754_pow+0x218>
 800aec2:	4b0a      	ldr	r3, [pc, #40]	; (800aeec <__ieee754_pow+0x25c>)
 800aec4:	429c      	cmp	r4, r3
 800aec6:	dd19      	ble.n	800aefc <__ieee754_pow+0x26c>
 800aec8:	f1b9 0f00 	cmp.w	r9, #0
 800aecc:	dcef      	bgt.n	800aeae <__ieee754_pow+0x21e>
 800aece:	2000      	movs	r0, #0
 800aed0:	b009      	add	sp, #36	; 0x24
 800aed2:	ecbd 8b06 	vpop	{d8-d10}
 800aed6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeda:	f001 bbbd 	b.w	800c658 <__math_uflow>
 800aede:	bf00      	nop
 800aee0:	fff00000 	.word	0xfff00000
 800aee4:	7ff00000 	.word	0x7ff00000
 800aee8:	433fffff 	.word	0x433fffff
 800aeec:	3ff00000 	.word	0x3ff00000
 800aef0:	3fefffff 	.word	0x3fefffff
 800aef4:	3fe00000 	.word	0x3fe00000
 800aef8:	41e00000 	.word	0x41e00000
 800aefc:	4b60      	ldr	r3, [pc, #384]	; (800b080 <__ieee754_pow+0x3f0>)
 800aefe:	2200      	movs	r2, #0
 800af00:	f7f5 f96e 	bl	80001e0 <__aeabi_dsub>
 800af04:	a354      	add	r3, pc, #336	; (adr r3, 800b058 <__ieee754_pow+0x3c8>)
 800af06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0a:	4604      	mov	r4, r0
 800af0c:	460d      	mov	r5, r1
 800af0e:	f7f5 fb1f 	bl	8000550 <__aeabi_dmul>
 800af12:	a353      	add	r3, pc, #332	; (adr r3, 800b060 <__ieee754_pow+0x3d0>)
 800af14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af18:	4606      	mov	r6, r0
 800af1a:	460f      	mov	r7, r1
 800af1c:	4620      	mov	r0, r4
 800af1e:	4629      	mov	r1, r5
 800af20:	f7f5 fb16 	bl	8000550 <__aeabi_dmul>
 800af24:	4b57      	ldr	r3, [pc, #348]	; (800b084 <__ieee754_pow+0x3f4>)
 800af26:	4682      	mov	sl, r0
 800af28:	468b      	mov	fp, r1
 800af2a:	2200      	movs	r2, #0
 800af2c:	4620      	mov	r0, r4
 800af2e:	4629      	mov	r1, r5
 800af30:	f7f5 fb0e 	bl	8000550 <__aeabi_dmul>
 800af34:	4602      	mov	r2, r0
 800af36:	460b      	mov	r3, r1
 800af38:	a14b      	add	r1, pc, #300	; (adr r1, 800b068 <__ieee754_pow+0x3d8>)
 800af3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af3e:	f7f5 f94f 	bl	80001e0 <__aeabi_dsub>
 800af42:	4622      	mov	r2, r4
 800af44:	462b      	mov	r3, r5
 800af46:	f7f5 fb03 	bl	8000550 <__aeabi_dmul>
 800af4a:	4602      	mov	r2, r0
 800af4c:	460b      	mov	r3, r1
 800af4e:	2000      	movs	r0, #0
 800af50:	494d      	ldr	r1, [pc, #308]	; (800b088 <__ieee754_pow+0x3f8>)
 800af52:	f7f5 f945 	bl	80001e0 <__aeabi_dsub>
 800af56:	4622      	mov	r2, r4
 800af58:	4680      	mov	r8, r0
 800af5a:	4689      	mov	r9, r1
 800af5c:	462b      	mov	r3, r5
 800af5e:	4620      	mov	r0, r4
 800af60:	4629      	mov	r1, r5
 800af62:	f7f5 faf5 	bl	8000550 <__aeabi_dmul>
 800af66:	4602      	mov	r2, r0
 800af68:	460b      	mov	r3, r1
 800af6a:	4640      	mov	r0, r8
 800af6c:	4649      	mov	r1, r9
 800af6e:	f7f5 faef 	bl	8000550 <__aeabi_dmul>
 800af72:	a33f      	add	r3, pc, #252	; (adr r3, 800b070 <__ieee754_pow+0x3e0>)
 800af74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af78:	f7f5 faea 	bl	8000550 <__aeabi_dmul>
 800af7c:	4602      	mov	r2, r0
 800af7e:	460b      	mov	r3, r1
 800af80:	4650      	mov	r0, sl
 800af82:	4659      	mov	r1, fp
 800af84:	f7f5 f92c 	bl	80001e0 <__aeabi_dsub>
 800af88:	4602      	mov	r2, r0
 800af8a:	460b      	mov	r3, r1
 800af8c:	4680      	mov	r8, r0
 800af8e:	4689      	mov	r9, r1
 800af90:	4630      	mov	r0, r6
 800af92:	4639      	mov	r1, r7
 800af94:	f7f5 f926 	bl	80001e4 <__adddf3>
 800af98:	2000      	movs	r0, #0
 800af9a:	4632      	mov	r2, r6
 800af9c:	463b      	mov	r3, r7
 800af9e:	4604      	mov	r4, r0
 800afa0:	460d      	mov	r5, r1
 800afa2:	f7f5 f91d 	bl	80001e0 <__aeabi_dsub>
 800afa6:	4602      	mov	r2, r0
 800afa8:	460b      	mov	r3, r1
 800afaa:	4640      	mov	r0, r8
 800afac:	4649      	mov	r1, r9
 800afae:	f7f5 f917 	bl	80001e0 <__aeabi_dsub>
 800afb2:	9b04      	ldr	r3, [sp, #16]
 800afb4:	9a06      	ldr	r2, [sp, #24]
 800afb6:	3b01      	subs	r3, #1
 800afb8:	4313      	orrs	r3, r2
 800afba:	4682      	mov	sl, r0
 800afbc:	468b      	mov	fp, r1
 800afbe:	f040 81e7 	bne.w	800b390 <__ieee754_pow+0x700>
 800afc2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b078 <__ieee754_pow+0x3e8>
 800afc6:	eeb0 8a47 	vmov.f32	s16, s14
 800afca:	eef0 8a67 	vmov.f32	s17, s15
 800afce:	e9dd 6700 	ldrd	r6, r7, [sp]
 800afd2:	2600      	movs	r6, #0
 800afd4:	4632      	mov	r2, r6
 800afd6:	463b      	mov	r3, r7
 800afd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afdc:	f7f5 f900 	bl	80001e0 <__aeabi_dsub>
 800afe0:	4622      	mov	r2, r4
 800afe2:	462b      	mov	r3, r5
 800afe4:	f7f5 fab4 	bl	8000550 <__aeabi_dmul>
 800afe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800afec:	4680      	mov	r8, r0
 800afee:	4689      	mov	r9, r1
 800aff0:	4650      	mov	r0, sl
 800aff2:	4659      	mov	r1, fp
 800aff4:	f7f5 faac 	bl	8000550 <__aeabi_dmul>
 800aff8:	4602      	mov	r2, r0
 800affa:	460b      	mov	r3, r1
 800affc:	4640      	mov	r0, r8
 800affe:	4649      	mov	r1, r9
 800b000:	f7f5 f8f0 	bl	80001e4 <__adddf3>
 800b004:	4632      	mov	r2, r6
 800b006:	463b      	mov	r3, r7
 800b008:	4680      	mov	r8, r0
 800b00a:	4689      	mov	r9, r1
 800b00c:	4620      	mov	r0, r4
 800b00e:	4629      	mov	r1, r5
 800b010:	f7f5 fa9e 	bl	8000550 <__aeabi_dmul>
 800b014:	460b      	mov	r3, r1
 800b016:	4604      	mov	r4, r0
 800b018:	460d      	mov	r5, r1
 800b01a:	4602      	mov	r2, r0
 800b01c:	4649      	mov	r1, r9
 800b01e:	4640      	mov	r0, r8
 800b020:	f7f5 f8e0 	bl	80001e4 <__adddf3>
 800b024:	4b19      	ldr	r3, [pc, #100]	; (800b08c <__ieee754_pow+0x3fc>)
 800b026:	4299      	cmp	r1, r3
 800b028:	ec45 4b19 	vmov	d9, r4, r5
 800b02c:	4606      	mov	r6, r0
 800b02e:	460f      	mov	r7, r1
 800b030:	468b      	mov	fp, r1
 800b032:	f340 82f1 	ble.w	800b618 <__ieee754_pow+0x988>
 800b036:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b03a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b03e:	4303      	orrs	r3, r0
 800b040:	f000 81e4 	beq.w	800b40c <__ieee754_pow+0x77c>
 800b044:	ec51 0b18 	vmov	r0, r1, d8
 800b048:	2200      	movs	r2, #0
 800b04a:	2300      	movs	r3, #0
 800b04c:	f7f5 fcf2 	bl	8000a34 <__aeabi_dcmplt>
 800b050:	3800      	subs	r0, #0
 800b052:	bf18      	it	ne
 800b054:	2001      	movne	r0, #1
 800b056:	e72b      	b.n	800aeb0 <__ieee754_pow+0x220>
 800b058:	60000000 	.word	0x60000000
 800b05c:	3ff71547 	.word	0x3ff71547
 800b060:	f85ddf44 	.word	0xf85ddf44
 800b064:	3e54ae0b 	.word	0x3e54ae0b
 800b068:	55555555 	.word	0x55555555
 800b06c:	3fd55555 	.word	0x3fd55555
 800b070:	652b82fe 	.word	0x652b82fe
 800b074:	3ff71547 	.word	0x3ff71547
 800b078:	00000000 	.word	0x00000000
 800b07c:	bff00000 	.word	0xbff00000
 800b080:	3ff00000 	.word	0x3ff00000
 800b084:	3fd00000 	.word	0x3fd00000
 800b088:	3fe00000 	.word	0x3fe00000
 800b08c:	408fffff 	.word	0x408fffff
 800b090:	4bd5      	ldr	r3, [pc, #852]	; (800b3e8 <__ieee754_pow+0x758>)
 800b092:	402b      	ands	r3, r5
 800b094:	2200      	movs	r2, #0
 800b096:	b92b      	cbnz	r3, 800b0a4 <__ieee754_pow+0x414>
 800b098:	4bd4      	ldr	r3, [pc, #848]	; (800b3ec <__ieee754_pow+0x75c>)
 800b09a:	f7f5 fa59 	bl	8000550 <__aeabi_dmul>
 800b09e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b0a2:	460c      	mov	r4, r1
 800b0a4:	1523      	asrs	r3, r4, #20
 800b0a6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b0aa:	4413      	add	r3, r2
 800b0ac:	9305      	str	r3, [sp, #20]
 800b0ae:	4bd0      	ldr	r3, [pc, #832]	; (800b3f0 <__ieee754_pow+0x760>)
 800b0b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b0b4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b0b8:	429c      	cmp	r4, r3
 800b0ba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b0be:	dd08      	ble.n	800b0d2 <__ieee754_pow+0x442>
 800b0c0:	4bcc      	ldr	r3, [pc, #816]	; (800b3f4 <__ieee754_pow+0x764>)
 800b0c2:	429c      	cmp	r4, r3
 800b0c4:	f340 8162 	ble.w	800b38c <__ieee754_pow+0x6fc>
 800b0c8:	9b05      	ldr	r3, [sp, #20]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	9305      	str	r3, [sp, #20]
 800b0ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b0d2:	2400      	movs	r4, #0
 800b0d4:	00e3      	lsls	r3, r4, #3
 800b0d6:	9307      	str	r3, [sp, #28]
 800b0d8:	4bc7      	ldr	r3, [pc, #796]	; (800b3f8 <__ieee754_pow+0x768>)
 800b0da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b0de:	ed93 7b00 	vldr	d7, [r3]
 800b0e2:	4629      	mov	r1, r5
 800b0e4:	ec53 2b17 	vmov	r2, r3, d7
 800b0e8:	eeb0 9a47 	vmov.f32	s18, s14
 800b0ec:	eef0 9a67 	vmov.f32	s19, s15
 800b0f0:	4682      	mov	sl, r0
 800b0f2:	f7f5 f875 	bl	80001e0 <__aeabi_dsub>
 800b0f6:	4652      	mov	r2, sl
 800b0f8:	4606      	mov	r6, r0
 800b0fa:	460f      	mov	r7, r1
 800b0fc:	462b      	mov	r3, r5
 800b0fe:	ec51 0b19 	vmov	r0, r1, d9
 800b102:	f7f5 f86f 	bl	80001e4 <__adddf3>
 800b106:	4602      	mov	r2, r0
 800b108:	460b      	mov	r3, r1
 800b10a:	2000      	movs	r0, #0
 800b10c:	49bb      	ldr	r1, [pc, #748]	; (800b3fc <__ieee754_pow+0x76c>)
 800b10e:	f7f5 fb49 	bl	80007a4 <__aeabi_ddiv>
 800b112:	ec41 0b1a 	vmov	d10, r0, r1
 800b116:	4602      	mov	r2, r0
 800b118:	460b      	mov	r3, r1
 800b11a:	4630      	mov	r0, r6
 800b11c:	4639      	mov	r1, r7
 800b11e:	f7f5 fa17 	bl	8000550 <__aeabi_dmul>
 800b122:	2300      	movs	r3, #0
 800b124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b128:	9302      	str	r3, [sp, #8]
 800b12a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b12e:	46ab      	mov	fp, r5
 800b130:	106d      	asrs	r5, r5, #1
 800b132:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b136:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b13a:	ec41 0b18 	vmov	d8, r0, r1
 800b13e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b142:	2200      	movs	r2, #0
 800b144:	4640      	mov	r0, r8
 800b146:	4649      	mov	r1, r9
 800b148:	4614      	mov	r4, r2
 800b14a:	461d      	mov	r5, r3
 800b14c:	f7f5 fa00 	bl	8000550 <__aeabi_dmul>
 800b150:	4602      	mov	r2, r0
 800b152:	460b      	mov	r3, r1
 800b154:	4630      	mov	r0, r6
 800b156:	4639      	mov	r1, r7
 800b158:	f7f5 f842 	bl	80001e0 <__aeabi_dsub>
 800b15c:	ec53 2b19 	vmov	r2, r3, d9
 800b160:	4606      	mov	r6, r0
 800b162:	460f      	mov	r7, r1
 800b164:	4620      	mov	r0, r4
 800b166:	4629      	mov	r1, r5
 800b168:	f7f5 f83a 	bl	80001e0 <__aeabi_dsub>
 800b16c:	4602      	mov	r2, r0
 800b16e:	460b      	mov	r3, r1
 800b170:	4650      	mov	r0, sl
 800b172:	4659      	mov	r1, fp
 800b174:	f7f5 f834 	bl	80001e0 <__aeabi_dsub>
 800b178:	4642      	mov	r2, r8
 800b17a:	464b      	mov	r3, r9
 800b17c:	f7f5 f9e8 	bl	8000550 <__aeabi_dmul>
 800b180:	4602      	mov	r2, r0
 800b182:	460b      	mov	r3, r1
 800b184:	4630      	mov	r0, r6
 800b186:	4639      	mov	r1, r7
 800b188:	f7f5 f82a 	bl	80001e0 <__aeabi_dsub>
 800b18c:	ec53 2b1a 	vmov	r2, r3, d10
 800b190:	f7f5 f9de 	bl	8000550 <__aeabi_dmul>
 800b194:	ec53 2b18 	vmov	r2, r3, d8
 800b198:	ec41 0b19 	vmov	d9, r0, r1
 800b19c:	ec51 0b18 	vmov	r0, r1, d8
 800b1a0:	f7f5 f9d6 	bl	8000550 <__aeabi_dmul>
 800b1a4:	a37c      	add	r3, pc, #496	; (adr r3, 800b398 <__ieee754_pow+0x708>)
 800b1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	460d      	mov	r5, r1
 800b1ae:	f7f5 f9cf 	bl	8000550 <__aeabi_dmul>
 800b1b2:	a37b      	add	r3, pc, #492	; (adr r3, 800b3a0 <__ieee754_pow+0x710>)
 800b1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b8:	f7f5 f814 	bl	80001e4 <__adddf3>
 800b1bc:	4622      	mov	r2, r4
 800b1be:	462b      	mov	r3, r5
 800b1c0:	f7f5 f9c6 	bl	8000550 <__aeabi_dmul>
 800b1c4:	a378      	add	r3, pc, #480	; (adr r3, 800b3a8 <__ieee754_pow+0x718>)
 800b1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ca:	f7f5 f80b 	bl	80001e4 <__adddf3>
 800b1ce:	4622      	mov	r2, r4
 800b1d0:	462b      	mov	r3, r5
 800b1d2:	f7f5 f9bd 	bl	8000550 <__aeabi_dmul>
 800b1d6:	a376      	add	r3, pc, #472	; (adr r3, 800b3b0 <__ieee754_pow+0x720>)
 800b1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1dc:	f7f5 f802 	bl	80001e4 <__adddf3>
 800b1e0:	4622      	mov	r2, r4
 800b1e2:	462b      	mov	r3, r5
 800b1e4:	f7f5 f9b4 	bl	8000550 <__aeabi_dmul>
 800b1e8:	a373      	add	r3, pc, #460	; (adr r3, 800b3b8 <__ieee754_pow+0x728>)
 800b1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ee:	f7f4 fff9 	bl	80001e4 <__adddf3>
 800b1f2:	4622      	mov	r2, r4
 800b1f4:	462b      	mov	r3, r5
 800b1f6:	f7f5 f9ab 	bl	8000550 <__aeabi_dmul>
 800b1fa:	a371      	add	r3, pc, #452	; (adr r3, 800b3c0 <__ieee754_pow+0x730>)
 800b1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b200:	f7f4 fff0 	bl	80001e4 <__adddf3>
 800b204:	4622      	mov	r2, r4
 800b206:	4606      	mov	r6, r0
 800b208:	460f      	mov	r7, r1
 800b20a:	462b      	mov	r3, r5
 800b20c:	4620      	mov	r0, r4
 800b20e:	4629      	mov	r1, r5
 800b210:	f7f5 f99e 	bl	8000550 <__aeabi_dmul>
 800b214:	4602      	mov	r2, r0
 800b216:	460b      	mov	r3, r1
 800b218:	4630      	mov	r0, r6
 800b21a:	4639      	mov	r1, r7
 800b21c:	f7f5 f998 	bl	8000550 <__aeabi_dmul>
 800b220:	4642      	mov	r2, r8
 800b222:	4604      	mov	r4, r0
 800b224:	460d      	mov	r5, r1
 800b226:	464b      	mov	r3, r9
 800b228:	ec51 0b18 	vmov	r0, r1, d8
 800b22c:	f7f4 ffda 	bl	80001e4 <__adddf3>
 800b230:	ec53 2b19 	vmov	r2, r3, d9
 800b234:	f7f5 f98c 	bl	8000550 <__aeabi_dmul>
 800b238:	4622      	mov	r2, r4
 800b23a:	462b      	mov	r3, r5
 800b23c:	f7f4 ffd2 	bl	80001e4 <__adddf3>
 800b240:	4642      	mov	r2, r8
 800b242:	4682      	mov	sl, r0
 800b244:	468b      	mov	fp, r1
 800b246:	464b      	mov	r3, r9
 800b248:	4640      	mov	r0, r8
 800b24a:	4649      	mov	r1, r9
 800b24c:	f7f5 f980 	bl	8000550 <__aeabi_dmul>
 800b250:	4b6b      	ldr	r3, [pc, #428]	; (800b400 <__ieee754_pow+0x770>)
 800b252:	2200      	movs	r2, #0
 800b254:	4606      	mov	r6, r0
 800b256:	460f      	mov	r7, r1
 800b258:	f7f4 ffc4 	bl	80001e4 <__adddf3>
 800b25c:	4652      	mov	r2, sl
 800b25e:	465b      	mov	r3, fp
 800b260:	f7f4 ffc0 	bl	80001e4 <__adddf3>
 800b264:	2000      	movs	r0, #0
 800b266:	4604      	mov	r4, r0
 800b268:	460d      	mov	r5, r1
 800b26a:	4602      	mov	r2, r0
 800b26c:	460b      	mov	r3, r1
 800b26e:	4640      	mov	r0, r8
 800b270:	4649      	mov	r1, r9
 800b272:	f7f5 f96d 	bl	8000550 <__aeabi_dmul>
 800b276:	4b62      	ldr	r3, [pc, #392]	; (800b400 <__ieee754_pow+0x770>)
 800b278:	4680      	mov	r8, r0
 800b27a:	4689      	mov	r9, r1
 800b27c:	2200      	movs	r2, #0
 800b27e:	4620      	mov	r0, r4
 800b280:	4629      	mov	r1, r5
 800b282:	f7f4 ffad 	bl	80001e0 <__aeabi_dsub>
 800b286:	4632      	mov	r2, r6
 800b288:	463b      	mov	r3, r7
 800b28a:	f7f4 ffa9 	bl	80001e0 <__aeabi_dsub>
 800b28e:	4602      	mov	r2, r0
 800b290:	460b      	mov	r3, r1
 800b292:	4650      	mov	r0, sl
 800b294:	4659      	mov	r1, fp
 800b296:	f7f4 ffa3 	bl	80001e0 <__aeabi_dsub>
 800b29a:	ec53 2b18 	vmov	r2, r3, d8
 800b29e:	f7f5 f957 	bl	8000550 <__aeabi_dmul>
 800b2a2:	4622      	mov	r2, r4
 800b2a4:	4606      	mov	r6, r0
 800b2a6:	460f      	mov	r7, r1
 800b2a8:	462b      	mov	r3, r5
 800b2aa:	ec51 0b19 	vmov	r0, r1, d9
 800b2ae:	f7f5 f94f 	bl	8000550 <__aeabi_dmul>
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	4639      	mov	r1, r7
 800b2ba:	f7f4 ff93 	bl	80001e4 <__adddf3>
 800b2be:	4606      	mov	r6, r0
 800b2c0:	460f      	mov	r7, r1
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	460b      	mov	r3, r1
 800b2c6:	4640      	mov	r0, r8
 800b2c8:	4649      	mov	r1, r9
 800b2ca:	f7f4 ff8b 	bl	80001e4 <__adddf3>
 800b2ce:	a33e      	add	r3, pc, #248	; (adr r3, 800b3c8 <__ieee754_pow+0x738>)
 800b2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d4:	2000      	movs	r0, #0
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	460d      	mov	r5, r1
 800b2da:	f7f5 f939 	bl	8000550 <__aeabi_dmul>
 800b2de:	4642      	mov	r2, r8
 800b2e0:	ec41 0b18 	vmov	d8, r0, r1
 800b2e4:	464b      	mov	r3, r9
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	4629      	mov	r1, r5
 800b2ea:	f7f4 ff79 	bl	80001e0 <__aeabi_dsub>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	4630      	mov	r0, r6
 800b2f4:	4639      	mov	r1, r7
 800b2f6:	f7f4 ff73 	bl	80001e0 <__aeabi_dsub>
 800b2fa:	a335      	add	r3, pc, #212	; (adr r3, 800b3d0 <__ieee754_pow+0x740>)
 800b2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b300:	f7f5 f926 	bl	8000550 <__aeabi_dmul>
 800b304:	a334      	add	r3, pc, #208	; (adr r3, 800b3d8 <__ieee754_pow+0x748>)
 800b306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30a:	4606      	mov	r6, r0
 800b30c:	460f      	mov	r7, r1
 800b30e:	4620      	mov	r0, r4
 800b310:	4629      	mov	r1, r5
 800b312:	f7f5 f91d 	bl	8000550 <__aeabi_dmul>
 800b316:	4602      	mov	r2, r0
 800b318:	460b      	mov	r3, r1
 800b31a:	4630      	mov	r0, r6
 800b31c:	4639      	mov	r1, r7
 800b31e:	f7f4 ff61 	bl	80001e4 <__adddf3>
 800b322:	9a07      	ldr	r2, [sp, #28]
 800b324:	4b37      	ldr	r3, [pc, #220]	; (800b404 <__ieee754_pow+0x774>)
 800b326:	4413      	add	r3, r2
 800b328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32c:	f7f4 ff5a 	bl	80001e4 <__adddf3>
 800b330:	4682      	mov	sl, r0
 800b332:	9805      	ldr	r0, [sp, #20]
 800b334:	468b      	mov	fp, r1
 800b336:	f7f5 f8a1 	bl	800047c <__aeabi_i2d>
 800b33a:	9a07      	ldr	r2, [sp, #28]
 800b33c:	4b32      	ldr	r3, [pc, #200]	; (800b408 <__ieee754_pow+0x778>)
 800b33e:	4413      	add	r3, r2
 800b340:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b344:	4606      	mov	r6, r0
 800b346:	460f      	mov	r7, r1
 800b348:	4652      	mov	r2, sl
 800b34a:	465b      	mov	r3, fp
 800b34c:	ec51 0b18 	vmov	r0, r1, d8
 800b350:	f7f4 ff48 	bl	80001e4 <__adddf3>
 800b354:	4642      	mov	r2, r8
 800b356:	464b      	mov	r3, r9
 800b358:	f7f4 ff44 	bl	80001e4 <__adddf3>
 800b35c:	4632      	mov	r2, r6
 800b35e:	463b      	mov	r3, r7
 800b360:	f7f4 ff40 	bl	80001e4 <__adddf3>
 800b364:	2000      	movs	r0, #0
 800b366:	4632      	mov	r2, r6
 800b368:	463b      	mov	r3, r7
 800b36a:	4604      	mov	r4, r0
 800b36c:	460d      	mov	r5, r1
 800b36e:	f7f4 ff37 	bl	80001e0 <__aeabi_dsub>
 800b372:	4642      	mov	r2, r8
 800b374:	464b      	mov	r3, r9
 800b376:	f7f4 ff33 	bl	80001e0 <__aeabi_dsub>
 800b37a:	ec53 2b18 	vmov	r2, r3, d8
 800b37e:	f7f4 ff2f 	bl	80001e0 <__aeabi_dsub>
 800b382:	4602      	mov	r2, r0
 800b384:	460b      	mov	r3, r1
 800b386:	4650      	mov	r0, sl
 800b388:	4659      	mov	r1, fp
 800b38a:	e610      	b.n	800afae <__ieee754_pow+0x31e>
 800b38c:	2401      	movs	r4, #1
 800b38e:	e6a1      	b.n	800b0d4 <__ieee754_pow+0x444>
 800b390:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b3e0 <__ieee754_pow+0x750>
 800b394:	e617      	b.n	800afc6 <__ieee754_pow+0x336>
 800b396:	bf00      	nop
 800b398:	4a454eef 	.word	0x4a454eef
 800b39c:	3fca7e28 	.word	0x3fca7e28
 800b3a0:	93c9db65 	.word	0x93c9db65
 800b3a4:	3fcd864a 	.word	0x3fcd864a
 800b3a8:	a91d4101 	.word	0xa91d4101
 800b3ac:	3fd17460 	.word	0x3fd17460
 800b3b0:	518f264d 	.word	0x518f264d
 800b3b4:	3fd55555 	.word	0x3fd55555
 800b3b8:	db6fabff 	.word	0xdb6fabff
 800b3bc:	3fdb6db6 	.word	0x3fdb6db6
 800b3c0:	33333303 	.word	0x33333303
 800b3c4:	3fe33333 	.word	0x3fe33333
 800b3c8:	e0000000 	.word	0xe0000000
 800b3cc:	3feec709 	.word	0x3feec709
 800b3d0:	dc3a03fd 	.word	0xdc3a03fd
 800b3d4:	3feec709 	.word	0x3feec709
 800b3d8:	145b01f5 	.word	0x145b01f5
 800b3dc:	be3e2fe0 	.word	0xbe3e2fe0
 800b3e0:	00000000 	.word	0x00000000
 800b3e4:	3ff00000 	.word	0x3ff00000
 800b3e8:	7ff00000 	.word	0x7ff00000
 800b3ec:	43400000 	.word	0x43400000
 800b3f0:	0003988e 	.word	0x0003988e
 800b3f4:	000bb679 	.word	0x000bb679
 800b3f8:	0800c808 	.word	0x0800c808
 800b3fc:	3ff00000 	.word	0x3ff00000
 800b400:	40080000 	.word	0x40080000
 800b404:	0800c828 	.word	0x0800c828
 800b408:	0800c818 	.word	0x0800c818
 800b40c:	a3b5      	add	r3, pc, #724	; (adr r3, 800b6e4 <__ieee754_pow+0xa54>)
 800b40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b412:	4640      	mov	r0, r8
 800b414:	4649      	mov	r1, r9
 800b416:	f7f4 fee5 	bl	80001e4 <__adddf3>
 800b41a:	4622      	mov	r2, r4
 800b41c:	ec41 0b1a 	vmov	d10, r0, r1
 800b420:	462b      	mov	r3, r5
 800b422:	4630      	mov	r0, r6
 800b424:	4639      	mov	r1, r7
 800b426:	f7f4 fedb 	bl	80001e0 <__aeabi_dsub>
 800b42a:	4602      	mov	r2, r0
 800b42c:	460b      	mov	r3, r1
 800b42e:	ec51 0b1a 	vmov	r0, r1, d10
 800b432:	f7f5 fb1d 	bl	8000a70 <__aeabi_dcmpgt>
 800b436:	2800      	cmp	r0, #0
 800b438:	f47f ae04 	bne.w	800b044 <__ieee754_pow+0x3b4>
 800b43c:	4aa4      	ldr	r2, [pc, #656]	; (800b6d0 <__ieee754_pow+0xa40>)
 800b43e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b442:	4293      	cmp	r3, r2
 800b444:	f340 8108 	ble.w	800b658 <__ieee754_pow+0x9c8>
 800b448:	151b      	asrs	r3, r3, #20
 800b44a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b44e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b452:	fa4a f303 	asr.w	r3, sl, r3
 800b456:	445b      	add	r3, fp
 800b458:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b45c:	4e9d      	ldr	r6, [pc, #628]	; (800b6d4 <__ieee754_pow+0xa44>)
 800b45e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b462:	4116      	asrs	r6, r2
 800b464:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b468:	2000      	movs	r0, #0
 800b46a:	ea23 0106 	bic.w	r1, r3, r6
 800b46e:	f1c2 0214 	rsb	r2, r2, #20
 800b472:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b476:	fa4a fa02 	asr.w	sl, sl, r2
 800b47a:	f1bb 0f00 	cmp.w	fp, #0
 800b47e:	4602      	mov	r2, r0
 800b480:	460b      	mov	r3, r1
 800b482:	4620      	mov	r0, r4
 800b484:	4629      	mov	r1, r5
 800b486:	bfb8      	it	lt
 800b488:	f1ca 0a00 	rsblt	sl, sl, #0
 800b48c:	f7f4 fea8 	bl	80001e0 <__aeabi_dsub>
 800b490:	ec41 0b19 	vmov	d9, r0, r1
 800b494:	4642      	mov	r2, r8
 800b496:	464b      	mov	r3, r9
 800b498:	ec51 0b19 	vmov	r0, r1, d9
 800b49c:	f7f4 fea2 	bl	80001e4 <__adddf3>
 800b4a0:	a37b      	add	r3, pc, #492	; (adr r3, 800b690 <__ieee754_pow+0xa00>)
 800b4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a6:	2000      	movs	r0, #0
 800b4a8:	4604      	mov	r4, r0
 800b4aa:	460d      	mov	r5, r1
 800b4ac:	f7f5 f850 	bl	8000550 <__aeabi_dmul>
 800b4b0:	ec53 2b19 	vmov	r2, r3, d9
 800b4b4:	4606      	mov	r6, r0
 800b4b6:	460f      	mov	r7, r1
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	4629      	mov	r1, r5
 800b4bc:	f7f4 fe90 	bl	80001e0 <__aeabi_dsub>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	4640      	mov	r0, r8
 800b4c6:	4649      	mov	r1, r9
 800b4c8:	f7f4 fe8a 	bl	80001e0 <__aeabi_dsub>
 800b4cc:	a372      	add	r3, pc, #456	; (adr r3, 800b698 <__ieee754_pow+0xa08>)
 800b4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d2:	f7f5 f83d 	bl	8000550 <__aeabi_dmul>
 800b4d6:	a372      	add	r3, pc, #456	; (adr r3, 800b6a0 <__ieee754_pow+0xa10>)
 800b4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4dc:	4680      	mov	r8, r0
 800b4de:	4689      	mov	r9, r1
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	4629      	mov	r1, r5
 800b4e4:	f7f5 f834 	bl	8000550 <__aeabi_dmul>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	4640      	mov	r0, r8
 800b4ee:	4649      	mov	r1, r9
 800b4f0:	f7f4 fe78 	bl	80001e4 <__adddf3>
 800b4f4:	4604      	mov	r4, r0
 800b4f6:	460d      	mov	r5, r1
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	4639      	mov	r1, r7
 800b500:	f7f4 fe70 	bl	80001e4 <__adddf3>
 800b504:	4632      	mov	r2, r6
 800b506:	463b      	mov	r3, r7
 800b508:	4680      	mov	r8, r0
 800b50a:	4689      	mov	r9, r1
 800b50c:	f7f4 fe68 	bl	80001e0 <__aeabi_dsub>
 800b510:	4602      	mov	r2, r0
 800b512:	460b      	mov	r3, r1
 800b514:	4620      	mov	r0, r4
 800b516:	4629      	mov	r1, r5
 800b518:	f7f4 fe62 	bl	80001e0 <__aeabi_dsub>
 800b51c:	4642      	mov	r2, r8
 800b51e:	4606      	mov	r6, r0
 800b520:	460f      	mov	r7, r1
 800b522:	464b      	mov	r3, r9
 800b524:	4640      	mov	r0, r8
 800b526:	4649      	mov	r1, r9
 800b528:	f7f5 f812 	bl	8000550 <__aeabi_dmul>
 800b52c:	a35e      	add	r3, pc, #376	; (adr r3, 800b6a8 <__ieee754_pow+0xa18>)
 800b52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b532:	4604      	mov	r4, r0
 800b534:	460d      	mov	r5, r1
 800b536:	f7f5 f80b 	bl	8000550 <__aeabi_dmul>
 800b53a:	a35d      	add	r3, pc, #372	; (adr r3, 800b6b0 <__ieee754_pow+0xa20>)
 800b53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b540:	f7f4 fe4e 	bl	80001e0 <__aeabi_dsub>
 800b544:	4622      	mov	r2, r4
 800b546:	462b      	mov	r3, r5
 800b548:	f7f5 f802 	bl	8000550 <__aeabi_dmul>
 800b54c:	a35a      	add	r3, pc, #360	; (adr r3, 800b6b8 <__ieee754_pow+0xa28>)
 800b54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b552:	f7f4 fe47 	bl	80001e4 <__adddf3>
 800b556:	4622      	mov	r2, r4
 800b558:	462b      	mov	r3, r5
 800b55a:	f7f4 fff9 	bl	8000550 <__aeabi_dmul>
 800b55e:	a358      	add	r3, pc, #352	; (adr r3, 800b6c0 <__ieee754_pow+0xa30>)
 800b560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b564:	f7f4 fe3c 	bl	80001e0 <__aeabi_dsub>
 800b568:	4622      	mov	r2, r4
 800b56a:	462b      	mov	r3, r5
 800b56c:	f7f4 fff0 	bl	8000550 <__aeabi_dmul>
 800b570:	a355      	add	r3, pc, #340	; (adr r3, 800b6c8 <__ieee754_pow+0xa38>)
 800b572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b576:	f7f4 fe35 	bl	80001e4 <__adddf3>
 800b57a:	4622      	mov	r2, r4
 800b57c:	462b      	mov	r3, r5
 800b57e:	f7f4 ffe7 	bl	8000550 <__aeabi_dmul>
 800b582:	4602      	mov	r2, r0
 800b584:	460b      	mov	r3, r1
 800b586:	4640      	mov	r0, r8
 800b588:	4649      	mov	r1, r9
 800b58a:	f7f4 fe29 	bl	80001e0 <__aeabi_dsub>
 800b58e:	4604      	mov	r4, r0
 800b590:	460d      	mov	r5, r1
 800b592:	4602      	mov	r2, r0
 800b594:	460b      	mov	r3, r1
 800b596:	4640      	mov	r0, r8
 800b598:	4649      	mov	r1, r9
 800b59a:	f7f4 ffd9 	bl	8000550 <__aeabi_dmul>
 800b59e:	2200      	movs	r2, #0
 800b5a0:	ec41 0b19 	vmov	d9, r0, r1
 800b5a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	4629      	mov	r1, r5
 800b5ac:	f7f4 fe18 	bl	80001e0 <__aeabi_dsub>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	ec51 0b19 	vmov	r0, r1, d9
 800b5b8:	f7f5 f8f4 	bl	80007a4 <__aeabi_ddiv>
 800b5bc:	4632      	mov	r2, r6
 800b5be:	4604      	mov	r4, r0
 800b5c0:	460d      	mov	r5, r1
 800b5c2:	463b      	mov	r3, r7
 800b5c4:	4640      	mov	r0, r8
 800b5c6:	4649      	mov	r1, r9
 800b5c8:	f7f4 ffc2 	bl	8000550 <__aeabi_dmul>
 800b5cc:	4632      	mov	r2, r6
 800b5ce:	463b      	mov	r3, r7
 800b5d0:	f7f4 fe08 	bl	80001e4 <__adddf3>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	4620      	mov	r0, r4
 800b5da:	4629      	mov	r1, r5
 800b5dc:	f7f4 fe00 	bl	80001e0 <__aeabi_dsub>
 800b5e0:	4642      	mov	r2, r8
 800b5e2:	464b      	mov	r3, r9
 800b5e4:	f7f4 fdfc 	bl	80001e0 <__aeabi_dsub>
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	493a      	ldr	r1, [pc, #232]	; (800b6d8 <__ieee754_pow+0xa48>)
 800b5ee:	2000      	movs	r0, #0
 800b5f0:	f7f4 fdf6 	bl	80001e0 <__aeabi_dsub>
 800b5f4:	ec41 0b10 	vmov	d0, r0, r1
 800b5f8:	ee10 3a90 	vmov	r3, s1
 800b5fc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b600:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b604:	da2b      	bge.n	800b65e <__ieee754_pow+0x9ce>
 800b606:	4650      	mov	r0, sl
 800b608:	f001 f856 	bl	800c6b8 <scalbn>
 800b60c:	ec51 0b10 	vmov	r0, r1, d0
 800b610:	ec53 2b18 	vmov	r2, r3, d8
 800b614:	f7ff bbed 	b.w	800adf2 <__ieee754_pow+0x162>
 800b618:	4b30      	ldr	r3, [pc, #192]	; (800b6dc <__ieee754_pow+0xa4c>)
 800b61a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b61e:	429e      	cmp	r6, r3
 800b620:	f77f af0c 	ble.w	800b43c <__ieee754_pow+0x7ac>
 800b624:	4b2e      	ldr	r3, [pc, #184]	; (800b6e0 <__ieee754_pow+0xa50>)
 800b626:	440b      	add	r3, r1
 800b628:	4303      	orrs	r3, r0
 800b62a:	d009      	beq.n	800b640 <__ieee754_pow+0x9b0>
 800b62c:	ec51 0b18 	vmov	r0, r1, d8
 800b630:	2200      	movs	r2, #0
 800b632:	2300      	movs	r3, #0
 800b634:	f7f5 f9fe 	bl	8000a34 <__aeabi_dcmplt>
 800b638:	3800      	subs	r0, #0
 800b63a:	bf18      	it	ne
 800b63c:	2001      	movne	r0, #1
 800b63e:	e447      	b.n	800aed0 <__ieee754_pow+0x240>
 800b640:	4622      	mov	r2, r4
 800b642:	462b      	mov	r3, r5
 800b644:	f7f4 fdcc 	bl	80001e0 <__aeabi_dsub>
 800b648:	4642      	mov	r2, r8
 800b64a:	464b      	mov	r3, r9
 800b64c:	f7f5 fa06 	bl	8000a5c <__aeabi_dcmpge>
 800b650:	2800      	cmp	r0, #0
 800b652:	f43f aef3 	beq.w	800b43c <__ieee754_pow+0x7ac>
 800b656:	e7e9      	b.n	800b62c <__ieee754_pow+0x99c>
 800b658:	f04f 0a00 	mov.w	sl, #0
 800b65c:	e71a      	b.n	800b494 <__ieee754_pow+0x804>
 800b65e:	ec51 0b10 	vmov	r0, r1, d0
 800b662:	4619      	mov	r1, r3
 800b664:	e7d4      	b.n	800b610 <__ieee754_pow+0x980>
 800b666:	491c      	ldr	r1, [pc, #112]	; (800b6d8 <__ieee754_pow+0xa48>)
 800b668:	2000      	movs	r0, #0
 800b66a:	f7ff bb30 	b.w	800acce <__ieee754_pow+0x3e>
 800b66e:	2000      	movs	r0, #0
 800b670:	2100      	movs	r1, #0
 800b672:	f7ff bb2c 	b.w	800acce <__ieee754_pow+0x3e>
 800b676:	4630      	mov	r0, r6
 800b678:	4639      	mov	r1, r7
 800b67a:	f7ff bb28 	b.w	800acce <__ieee754_pow+0x3e>
 800b67e:	9204      	str	r2, [sp, #16]
 800b680:	f7ff bb7a 	b.w	800ad78 <__ieee754_pow+0xe8>
 800b684:	2300      	movs	r3, #0
 800b686:	f7ff bb64 	b.w	800ad52 <__ieee754_pow+0xc2>
 800b68a:	bf00      	nop
 800b68c:	f3af 8000 	nop.w
 800b690:	00000000 	.word	0x00000000
 800b694:	3fe62e43 	.word	0x3fe62e43
 800b698:	fefa39ef 	.word	0xfefa39ef
 800b69c:	3fe62e42 	.word	0x3fe62e42
 800b6a0:	0ca86c39 	.word	0x0ca86c39
 800b6a4:	be205c61 	.word	0xbe205c61
 800b6a8:	72bea4d0 	.word	0x72bea4d0
 800b6ac:	3e663769 	.word	0x3e663769
 800b6b0:	c5d26bf1 	.word	0xc5d26bf1
 800b6b4:	3ebbbd41 	.word	0x3ebbbd41
 800b6b8:	af25de2c 	.word	0xaf25de2c
 800b6bc:	3f11566a 	.word	0x3f11566a
 800b6c0:	16bebd93 	.word	0x16bebd93
 800b6c4:	3f66c16c 	.word	0x3f66c16c
 800b6c8:	5555553e 	.word	0x5555553e
 800b6cc:	3fc55555 	.word	0x3fc55555
 800b6d0:	3fe00000 	.word	0x3fe00000
 800b6d4:	000fffff 	.word	0x000fffff
 800b6d8:	3ff00000 	.word	0x3ff00000
 800b6dc:	4090cbff 	.word	0x4090cbff
 800b6e0:	3f6f3400 	.word	0x3f6f3400
 800b6e4:	652b82fe 	.word	0x652b82fe
 800b6e8:	3c971547 	.word	0x3c971547
 800b6ec:	00000000 	.word	0x00000000

0800b6f0 <__ieee754_rem_pio2>:
 800b6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f4:	ed2d 8b02 	vpush	{d8}
 800b6f8:	ec55 4b10 	vmov	r4, r5, d0
 800b6fc:	4bca      	ldr	r3, [pc, #808]	; (800ba28 <__ieee754_rem_pio2+0x338>)
 800b6fe:	b08b      	sub	sp, #44	; 0x2c
 800b700:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b704:	4598      	cmp	r8, r3
 800b706:	4682      	mov	sl, r0
 800b708:	9502      	str	r5, [sp, #8]
 800b70a:	dc08      	bgt.n	800b71e <__ieee754_rem_pio2+0x2e>
 800b70c:	2200      	movs	r2, #0
 800b70e:	2300      	movs	r3, #0
 800b710:	ed80 0b00 	vstr	d0, [r0]
 800b714:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b718:	f04f 0b00 	mov.w	fp, #0
 800b71c:	e028      	b.n	800b770 <__ieee754_rem_pio2+0x80>
 800b71e:	4bc3      	ldr	r3, [pc, #780]	; (800ba2c <__ieee754_rem_pio2+0x33c>)
 800b720:	4598      	cmp	r8, r3
 800b722:	dc78      	bgt.n	800b816 <__ieee754_rem_pio2+0x126>
 800b724:	9b02      	ldr	r3, [sp, #8]
 800b726:	4ec2      	ldr	r6, [pc, #776]	; (800ba30 <__ieee754_rem_pio2+0x340>)
 800b728:	2b00      	cmp	r3, #0
 800b72a:	ee10 0a10 	vmov	r0, s0
 800b72e:	a3b0      	add	r3, pc, #704	; (adr r3, 800b9f0 <__ieee754_rem_pio2+0x300>)
 800b730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b734:	4629      	mov	r1, r5
 800b736:	dd39      	ble.n	800b7ac <__ieee754_rem_pio2+0xbc>
 800b738:	f7f4 fd52 	bl	80001e0 <__aeabi_dsub>
 800b73c:	45b0      	cmp	r8, r6
 800b73e:	4604      	mov	r4, r0
 800b740:	460d      	mov	r5, r1
 800b742:	d01b      	beq.n	800b77c <__ieee754_rem_pio2+0x8c>
 800b744:	a3ac      	add	r3, pc, #688	; (adr r3, 800b9f8 <__ieee754_rem_pio2+0x308>)
 800b746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74a:	f7f4 fd49 	bl	80001e0 <__aeabi_dsub>
 800b74e:	4602      	mov	r2, r0
 800b750:	460b      	mov	r3, r1
 800b752:	e9ca 2300 	strd	r2, r3, [sl]
 800b756:	4620      	mov	r0, r4
 800b758:	4629      	mov	r1, r5
 800b75a:	f7f4 fd41 	bl	80001e0 <__aeabi_dsub>
 800b75e:	a3a6      	add	r3, pc, #664	; (adr r3, 800b9f8 <__ieee754_rem_pio2+0x308>)
 800b760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b764:	f7f4 fd3c 	bl	80001e0 <__aeabi_dsub>
 800b768:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b76c:	f04f 0b01 	mov.w	fp, #1
 800b770:	4658      	mov	r0, fp
 800b772:	b00b      	add	sp, #44	; 0x2c
 800b774:	ecbd 8b02 	vpop	{d8}
 800b778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b77c:	a3a0      	add	r3, pc, #640	; (adr r3, 800ba00 <__ieee754_rem_pio2+0x310>)
 800b77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b782:	f7f4 fd2d 	bl	80001e0 <__aeabi_dsub>
 800b786:	a3a0      	add	r3, pc, #640	; (adr r3, 800ba08 <__ieee754_rem_pio2+0x318>)
 800b788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78c:	4604      	mov	r4, r0
 800b78e:	460d      	mov	r5, r1
 800b790:	f7f4 fd26 	bl	80001e0 <__aeabi_dsub>
 800b794:	4602      	mov	r2, r0
 800b796:	460b      	mov	r3, r1
 800b798:	e9ca 2300 	strd	r2, r3, [sl]
 800b79c:	4620      	mov	r0, r4
 800b79e:	4629      	mov	r1, r5
 800b7a0:	f7f4 fd1e 	bl	80001e0 <__aeabi_dsub>
 800b7a4:	a398      	add	r3, pc, #608	; (adr r3, 800ba08 <__ieee754_rem_pio2+0x318>)
 800b7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7aa:	e7db      	b.n	800b764 <__ieee754_rem_pio2+0x74>
 800b7ac:	f7f4 fd1a 	bl	80001e4 <__adddf3>
 800b7b0:	45b0      	cmp	r8, r6
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	460d      	mov	r5, r1
 800b7b6:	d016      	beq.n	800b7e6 <__ieee754_rem_pio2+0xf6>
 800b7b8:	a38f      	add	r3, pc, #572	; (adr r3, 800b9f8 <__ieee754_rem_pio2+0x308>)
 800b7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7be:	f7f4 fd11 	bl	80001e4 <__adddf3>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	e9ca 2300 	strd	r2, r3, [sl]
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	4629      	mov	r1, r5
 800b7ce:	f7f4 fd07 	bl	80001e0 <__aeabi_dsub>
 800b7d2:	a389      	add	r3, pc, #548	; (adr r3, 800b9f8 <__ieee754_rem_pio2+0x308>)
 800b7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d8:	f7f4 fd04 	bl	80001e4 <__adddf3>
 800b7dc:	f04f 3bff 	mov.w	fp, #4294967295
 800b7e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b7e4:	e7c4      	b.n	800b770 <__ieee754_rem_pio2+0x80>
 800b7e6:	a386      	add	r3, pc, #536	; (adr r3, 800ba00 <__ieee754_rem_pio2+0x310>)
 800b7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ec:	f7f4 fcfa 	bl	80001e4 <__adddf3>
 800b7f0:	a385      	add	r3, pc, #532	; (adr r3, 800ba08 <__ieee754_rem_pio2+0x318>)
 800b7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	460d      	mov	r5, r1
 800b7fa:	f7f4 fcf3 	bl	80001e4 <__adddf3>
 800b7fe:	4602      	mov	r2, r0
 800b800:	460b      	mov	r3, r1
 800b802:	e9ca 2300 	strd	r2, r3, [sl]
 800b806:	4620      	mov	r0, r4
 800b808:	4629      	mov	r1, r5
 800b80a:	f7f4 fce9 	bl	80001e0 <__aeabi_dsub>
 800b80e:	a37e      	add	r3, pc, #504	; (adr r3, 800ba08 <__ieee754_rem_pio2+0x318>)
 800b810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b814:	e7e0      	b.n	800b7d8 <__ieee754_rem_pio2+0xe8>
 800b816:	4b87      	ldr	r3, [pc, #540]	; (800ba34 <__ieee754_rem_pio2+0x344>)
 800b818:	4598      	cmp	r8, r3
 800b81a:	f300 80d9 	bgt.w	800b9d0 <__ieee754_rem_pio2+0x2e0>
 800b81e:	f000 ff2d 	bl	800c67c <fabs>
 800b822:	ec55 4b10 	vmov	r4, r5, d0
 800b826:	ee10 0a10 	vmov	r0, s0
 800b82a:	a379      	add	r3, pc, #484	; (adr r3, 800ba10 <__ieee754_rem_pio2+0x320>)
 800b82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b830:	4629      	mov	r1, r5
 800b832:	f7f4 fe8d 	bl	8000550 <__aeabi_dmul>
 800b836:	4b80      	ldr	r3, [pc, #512]	; (800ba38 <__ieee754_rem_pio2+0x348>)
 800b838:	2200      	movs	r2, #0
 800b83a:	f7f4 fcd3 	bl	80001e4 <__adddf3>
 800b83e:	f7f5 f937 	bl	8000ab0 <__aeabi_d2iz>
 800b842:	4683      	mov	fp, r0
 800b844:	f7f4 fe1a 	bl	800047c <__aeabi_i2d>
 800b848:	4602      	mov	r2, r0
 800b84a:	460b      	mov	r3, r1
 800b84c:	ec43 2b18 	vmov	d8, r2, r3
 800b850:	a367      	add	r3, pc, #412	; (adr r3, 800b9f0 <__ieee754_rem_pio2+0x300>)
 800b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b856:	f7f4 fe7b 	bl	8000550 <__aeabi_dmul>
 800b85a:	4602      	mov	r2, r0
 800b85c:	460b      	mov	r3, r1
 800b85e:	4620      	mov	r0, r4
 800b860:	4629      	mov	r1, r5
 800b862:	f7f4 fcbd 	bl	80001e0 <__aeabi_dsub>
 800b866:	a364      	add	r3, pc, #400	; (adr r3, 800b9f8 <__ieee754_rem_pio2+0x308>)
 800b868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86c:	4606      	mov	r6, r0
 800b86e:	460f      	mov	r7, r1
 800b870:	ec51 0b18 	vmov	r0, r1, d8
 800b874:	f7f4 fe6c 	bl	8000550 <__aeabi_dmul>
 800b878:	f1bb 0f1f 	cmp.w	fp, #31
 800b87c:	4604      	mov	r4, r0
 800b87e:	460d      	mov	r5, r1
 800b880:	dc0d      	bgt.n	800b89e <__ieee754_rem_pio2+0x1ae>
 800b882:	4b6e      	ldr	r3, [pc, #440]	; (800ba3c <__ieee754_rem_pio2+0x34c>)
 800b884:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b88c:	4543      	cmp	r3, r8
 800b88e:	d006      	beq.n	800b89e <__ieee754_rem_pio2+0x1ae>
 800b890:	4622      	mov	r2, r4
 800b892:	462b      	mov	r3, r5
 800b894:	4630      	mov	r0, r6
 800b896:	4639      	mov	r1, r7
 800b898:	f7f4 fca2 	bl	80001e0 <__aeabi_dsub>
 800b89c:	e00f      	b.n	800b8be <__ieee754_rem_pio2+0x1ce>
 800b89e:	462b      	mov	r3, r5
 800b8a0:	4622      	mov	r2, r4
 800b8a2:	4630      	mov	r0, r6
 800b8a4:	4639      	mov	r1, r7
 800b8a6:	f7f4 fc9b 	bl	80001e0 <__aeabi_dsub>
 800b8aa:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b8ae:	9303      	str	r3, [sp, #12]
 800b8b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b8b4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b8b8:	f1b8 0f10 	cmp.w	r8, #16
 800b8bc:	dc02      	bgt.n	800b8c4 <__ieee754_rem_pio2+0x1d4>
 800b8be:	e9ca 0100 	strd	r0, r1, [sl]
 800b8c2:	e039      	b.n	800b938 <__ieee754_rem_pio2+0x248>
 800b8c4:	a34e      	add	r3, pc, #312	; (adr r3, 800ba00 <__ieee754_rem_pio2+0x310>)
 800b8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ca:	ec51 0b18 	vmov	r0, r1, d8
 800b8ce:	f7f4 fe3f 	bl	8000550 <__aeabi_dmul>
 800b8d2:	4604      	mov	r4, r0
 800b8d4:	460d      	mov	r5, r1
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	460b      	mov	r3, r1
 800b8da:	4630      	mov	r0, r6
 800b8dc:	4639      	mov	r1, r7
 800b8de:	f7f4 fc7f 	bl	80001e0 <__aeabi_dsub>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	4680      	mov	r8, r0
 800b8e8:	4689      	mov	r9, r1
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	4639      	mov	r1, r7
 800b8ee:	f7f4 fc77 	bl	80001e0 <__aeabi_dsub>
 800b8f2:	4622      	mov	r2, r4
 800b8f4:	462b      	mov	r3, r5
 800b8f6:	f7f4 fc73 	bl	80001e0 <__aeabi_dsub>
 800b8fa:	a343      	add	r3, pc, #268	; (adr r3, 800ba08 <__ieee754_rem_pio2+0x318>)
 800b8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b900:	4604      	mov	r4, r0
 800b902:	460d      	mov	r5, r1
 800b904:	ec51 0b18 	vmov	r0, r1, d8
 800b908:	f7f4 fe22 	bl	8000550 <__aeabi_dmul>
 800b90c:	4622      	mov	r2, r4
 800b90e:	462b      	mov	r3, r5
 800b910:	f7f4 fc66 	bl	80001e0 <__aeabi_dsub>
 800b914:	4602      	mov	r2, r0
 800b916:	460b      	mov	r3, r1
 800b918:	4604      	mov	r4, r0
 800b91a:	460d      	mov	r5, r1
 800b91c:	4640      	mov	r0, r8
 800b91e:	4649      	mov	r1, r9
 800b920:	f7f4 fc5e 	bl	80001e0 <__aeabi_dsub>
 800b924:	9a03      	ldr	r2, [sp, #12]
 800b926:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b92a:	1ad3      	subs	r3, r2, r3
 800b92c:	2b31      	cmp	r3, #49	; 0x31
 800b92e:	dc24      	bgt.n	800b97a <__ieee754_rem_pio2+0x28a>
 800b930:	e9ca 0100 	strd	r0, r1, [sl]
 800b934:	4646      	mov	r6, r8
 800b936:	464f      	mov	r7, r9
 800b938:	e9da 8900 	ldrd	r8, r9, [sl]
 800b93c:	4630      	mov	r0, r6
 800b93e:	4642      	mov	r2, r8
 800b940:	464b      	mov	r3, r9
 800b942:	4639      	mov	r1, r7
 800b944:	f7f4 fc4c 	bl	80001e0 <__aeabi_dsub>
 800b948:	462b      	mov	r3, r5
 800b94a:	4622      	mov	r2, r4
 800b94c:	f7f4 fc48 	bl	80001e0 <__aeabi_dsub>
 800b950:	9b02      	ldr	r3, [sp, #8]
 800b952:	2b00      	cmp	r3, #0
 800b954:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b958:	f6bf af0a 	bge.w	800b770 <__ieee754_rem_pio2+0x80>
 800b95c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b960:	f8ca 3004 	str.w	r3, [sl, #4]
 800b964:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b968:	f8ca 8000 	str.w	r8, [sl]
 800b96c:	f8ca 0008 	str.w	r0, [sl, #8]
 800b970:	f8ca 300c 	str.w	r3, [sl, #12]
 800b974:	f1cb 0b00 	rsb	fp, fp, #0
 800b978:	e6fa      	b.n	800b770 <__ieee754_rem_pio2+0x80>
 800b97a:	a327      	add	r3, pc, #156	; (adr r3, 800ba18 <__ieee754_rem_pio2+0x328>)
 800b97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b980:	ec51 0b18 	vmov	r0, r1, d8
 800b984:	f7f4 fde4 	bl	8000550 <__aeabi_dmul>
 800b988:	4604      	mov	r4, r0
 800b98a:	460d      	mov	r5, r1
 800b98c:	4602      	mov	r2, r0
 800b98e:	460b      	mov	r3, r1
 800b990:	4640      	mov	r0, r8
 800b992:	4649      	mov	r1, r9
 800b994:	f7f4 fc24 	bl	80001e0 <__aeabi_dsub>
 800b998:	4602      	mov	r2, r0
 800b99a:	460b      	mov	r3, r1
 800b99c:	4606      	mov	r6, r0
 800b99e:	460f      	mov	r7, r1
 800b9a0:	4640      	mov	r0, r8
 800b9a2:	4649      	mov	r1, r9
 800b9a4:	f7f4 fc1c 	bl	80001e0 <__aeabi_dsub>
 800b9a8:	4622      	mov	r2, r4
 800b9aa:	462b      	mov	r3, r5
 800b9ac:	f7f4 fc18 	bl	80001e0 <__aeabi_dsub>
 800b9b0:	a31b      	add	r3, pc, #108	; (adr r3, 800ba20 <__ieee754_rem_pio2+0x330>)
 800b9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	460d      	mov	r5, r1
 800b9ba:	ec51 0b18 	vmov	r0, r1, d8
 800b9be:	f7f4 fdc7 	bl	8000550 <__aeabi_dmul>
 800b9c2:	4622      	mov	r2, r4
 800b9c4:	462b      	mov	r3, r5
 800b9c6:	f7f4 fc0b 	bl	80001e0 <__aeabi_dsub>
 800b9ca:	4604      	mov	r4, r0
 800b9cc:	460d      	mov	r5, r1
 800b9ce:	e75f      	b.n	800b890 <__ieee754_rem_pio2+0x1a0>
 800b9d0:	4b1b      	ldr	r3, [pc, #108]	; (800ba40 <__ieee754_rem_pio2+0x350>)
 800b9d2:	4598      	cmp	r8, r3
 800b9d4:	dd36      	ble.n	800ba44 <__ieee754_rem_pio2+0x354>
 800b9d6:	ee10 2a10 	vmov	r2, s0
 800b9da:	462b      	mov	r3, r5
 800b9dc:	4620      	mov	r0, r4
 800b9de:	4629      	mov	r1, r5
 800b9e0:	f7f4 fbfe 	bl	80001e0 <__aeabi_dsub>
 800b9e4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b9e8:	e9ca 0100 	strd	r0, r1, [sl]
 800b9ec:	e694      	b.n	800b718 <__ieee754_rem_pio2+0x28>
 800b9ee:	bf00      	nop
 800b9f0:	54400000 	.word	0x54400000
 800b9f4:	3ff921fb 	.word	0x3ff921fb
 800b9f8:	1a626331 	.word	0x1a626331
 800b9fc:	3dd0b461 	.word	0x3dd0b461
 800ba00:	1a600000 	.word	0x1a600000
 800ba04:	3dd0b461 	.word	0x3dd0b461
 800ba08:	2e037073 	.word	0x2e037073
 800ba0c:	3ba3198a 	.word	0x3ba3198a
 800ba10:	6dc9c883 	.word	0x6dc9c883
 800ba14:	3fe45f30 	.word	0x3fe45f30
 800ba18:	2e000000 	.word	0x2e000000
 800ba1c:	3ba3198a 	.word	0x3ba3198a
 800ba20:	252049c1 	.word	0x252049c1
 800ba24:	397b839a 	.word	0x397b839a
 800ba28:	3fe921fb 	.word	0x3fe921fb
 800ba2c:	4002d97b 	.word	0x4002d97b
 800ba30:	3ff921fb 	.word	0x3ff921fb
 800ba34:	413921fb 	.word	0x413921fb
 800ba38:	3fe00000 	.word	0x3fe00000
 800ba3c:	0800c838 	.word	0x0800c838
 800ba40:	7fefffff 	.word	0x7fefffff
 800ba44:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ba48:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ba4c:	ee10 0a10 	vmov	r0, s0
 800ba50:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ba54:	ee10 6a10 	vmov	r6, s0
 800ba58:	460f      	mov	r7, r1
 800ba5a:	f7f5 f829 	bl	8000ab0 <__aeabi_d2iz>
 800ba5e:	f7f4 fd0d 	bl	800047c <__aeabi_i2d>
 800ba62:	4602      	mov	r2, r0
 800ba64:	460b      	mov	r3, r1
 800ba66:	4630      	mov	r0, r6
 800ba68:	4639      	mov	r1, r7
 800ba6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ba6e:	f7f4 fbb7 	bl	80001e0 <__aeabi_dsub>
 800ba72:	4b23      	ldr	r3, [pc, #140]	; (800bb00 <__ieee754_rem_pio2+0x410>)
 800ba74:	2200      	movs	r2, #0
 800ba76:	f7f4 fd6b 	bl	8000550 <__aeabi_dmul>
 800ba7a:	460f      	mov	r7, r1
 800ba7c:	4606      	mov	r6, r0
 800ba7e:	f7f5 f817 	bl	8000ab0 <__aeabi_d2iz>
 800ba82:	f7f4 fcfb 	bl	800047c <__aeabi_i2d>
 800ba86:	4602      	mov	r2, r0
 800ba88:	460b      	mov	r3, r1
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	4639      	mov	r1, r7
 800ba8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ba92:	f7f4 fba5 	bl	80001e0 <__aeabi_dsub>
 800ba96:	4b1a      	ldr	r3, [pc, #104]	; (800bb00 <__ieee754_rem_pio2+0x410>)
 800ba98:	2200      	movs	r2, #0
 800ba9a:	f7f4 fd59 	bl	8000550 <__aeabi_dmul>
 800ba9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800baa2:	ad04      	add	r5, sp, #16
 800baa4:	f04f 0803 	mov.w	r8, #3
 800baa8:	46a9      	mov	r9, r5
 800baaa:	2600      	movs	r6, #0
 800baac:	2700      	movs	r7, #0
 800baae:	4632      	mov	r2, r6
 800bab0:	463b      	mov	r3, r7
 800bab2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800bab6:	46c3      	mov	fp, r8
 800bab8:	3d08      	subs	r5, #8
 800baba:	f108 38ff 	add.w	r8, r8, #4294967295
 800babe:	f7f4 ffaf 	bl	8000a20 <__aeabi_dcmpeq>
 800bac2:	2800      	cmp	r0, #0
 800bac4:	d1f3      	bne.n	800baae <__ieee754_rem_pio2+0x3be>
 800bac6:	4b0f      	ldr	r3, [pc, #60]	; (800bb04 <__ieee754_rem_pio2+0x414>)
 800bac8:	9301      	str	r3, [sp, #4]
 800baca:	2302      	movs	r3, #2
 800bacc:	9300      	str	r3, [sp, #0]
 800bace:	4622      	mov	r2, r4
 800bad0:	465b      	mov	r3, fp
 800bad2:	4651      	mov	r1, sl
 800bad4:	4648      	mov	r0, r9
 800bad6:	f000 f993 	bl	800be00 <__kernel_rem_pio2>
 800bada:	9b02      	ldr	r3, [sp, #8]
 800badc:	2b00      	cmp	r3, #0
 800bade:	4683      	mov	fp, r0
 800bae0:	f6bf ae46 	bge.w	800b770 <__ieee754_rem_pio2+0x80>
 800bae4:	e9da 2100 	ldrd	r2, r1, [sl]
 800bae8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800baec:	e9ca 2300 	strd	r2, r3, [sl]
 800baf0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800baf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800baf8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800bafc:	e73a      	b.n	800b974 <__ieee754_rem_pio2+0x284>
 800bafe:	bf00      	nop
 800bb00:	41700000 	.word	0x41700000
 800bb04:	0800c8b8 	.word	0x0800c8b8

0800bb08 <__ieee754_sqrt>:
 800bb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb0c:	ec55 4b10 	vmov	r4, r5, d0
 800bb10:	4e55      	ldr	r6, [pc, #340]	; (800bc68 <__ieee754_sqrt+0x160>)
 800bb12:	43ae      	bics	r6, r5
 800bb14:	ee10 0a10 	vmov	r0, s0
 800bb18:	ee10 3a10 	vmov	r3, s0
 800bb1c:	462a      	mov	r2, r5
 800bb1e:	4629      	mov	r1, r5
 800bb20:	d110      	bne.n	800bb44 <__ieee754_sqrt+0x3c>
 800bb22:	ee10 2a10 	vmov	r2, s0
 800bb26:	462b      	mov	r3, r5
 800bb28:	f7f4 fd12 	bl	8000550 <__aeabi_dmul>
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	460b      	mov	r3, r1
 800bb30:	4620      	mov	r0, r4
 800bb32:	4629      	mov	r1, r5
 800bb34:	f7f4 fb56 	bl	80001e4 <__adddf3>
 800bb38:	4604      	mov	r4, r0
 800bb3a:	460d      	mov	r5, r1
 800bb3c:	ec45 4b10 	vmov	d0, r4, r5
 800bb40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb44:	2d00      	cmp	r5, #0
 800bb46:	dc10      	bgt.n	800bb6a <__ieee754_sqrt+0x62>
 800bb48:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bb4c:	4330      	orrs	r0, r6
 800bb4e:	d0f5      	beq.n	800bb3c <__ieee754_sqrt+0x34>
 800bb50:	b15d      	cbz	r5, 800bb6a <__ieee754_sqrt+0x62>
 800bb52:	ee10 2a10 	vmov	r2, s0
 800bb56:	462b      	mov	r3, r5
 800bb58:	ee10 0a10 	vmov	r0, s0
 800bb5c:	f7f4 fb40 	bl	80001e0 <__aeabi_dsub>
 800bb60:	4602      	mov	r2, r0
 800bb62:	460b      	mov	r3, r1
 800bb64:	f7f4 fe1e 	bl	80007a4 <__aeabi_ddiv>
 800bb68:	e7e6      	b.n	800bb38 <__ieee754_sqrt+0x30>
 800bb6a:	1512      	asrs	r2, r2, #20
 800bb6c:	d074      	beq.n	800bc58 <__ieee754_sqrt+0x150>
 800bb6e:	07d4      	lsls	r4, r2, #31
 800bb70:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800bb74:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800bb78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bb7c:	bf5e      	ittt	pl
 800bb7e:	0fda      	lsrpl	r2, r3, #31
 800bb80:	005b      	lslpl	r3, r3, #1
 800bb82:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800bb86:	2400      	movs	r4, #0
 800bb88:	0fda      	lsrs	r2, r3, #31
 800bb8a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800bb8e:	107f      	asrs	r7, r7, #1
 800bb90:	005b      	lsls	r3, r3, #1
 800bb92:	2516      	movs	r5, #22
 800bb94:	4620      	mov	r0, r4
 800bb96:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800bb9a:	1886      	adds	r6, r0, r2
 800bb9c:	428e      	cmp	r6, r1
 800bb9e:	bfde      	ittt	le
 800bba0:	1b89      	suble	r1, r1, r6
 800bba2:	18b0      	addle	r0, r6, r2
 800bba4:	18a4      	addle	r4, r4, r2
 800bba6:	0049      	lsls	r1, r1, #1
 800bba8:	3d01      	subs	r5, #1
 800bbaa:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800bbae:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800bbb2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bbb6:	d1f0      	bne.n	800bb9a <__ieee754_sqrt+0x92>
 800bbb8:	462a      	mov	r2, r5
 800bbba:	f04f 0e20 	mov.w	lr, #32
 800bbbe:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bbc2:	4281      	cmp	r1, r0
 800bbc4:	eb06 0c05 	add.w	ip, r6, r5
 800bbc8:	dc02      	bgt.n	800bbd0 <__ieee754_sqrt+0xc8>
 800bbca:	d113      	bne.n	800bbf4 <__ieee754_sqrt+0xec>
 800bbcc:	459c      	cmp	ip, r3
 800bbce:	d811      	bhi.n	800bbf4 <__ieee754_sqrt+0xec>
 800bbd0:	f1bc 0f00 	cmp.w	ip, #0
 800bbd4:	eb0c 0506 	add.w	r5, ip, r6
 800bbd8:	da43      	bge.n	800bc62 <__ieee754_sqrt+0x15a>
 800bbda:	2d00      	cmp	r5, #0
 800bbdc:	db41      	blt.n	800bc62 <__ieee754_sqrt+0x15a>
 800bbde:	f100 0801 	add.w	r8, r0, #1
 800bbe2:	1a09      	subs	r1, r1, r0
 800bbe4:	459c      	cmp	ip, r3
 800bbe6:	bf88      	it	hi
 800bbe8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800bbec:	eba3 030c 	sub.w	r3, r3, ip
 800bbf0:	4432      	add	r2, r6
 800bbf2:	4640      	mov	r0, r8
 800bbf4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800bbf8:	f1be 0e01 	subs.w	lr, lr, #1
 800bbfc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800bc00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bc04:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bc08:	d1db      	bne.n	800bbc2 <__ieee754_sqrt+0xba>
 800bc0a:	430b      	orrs	r3, r1
 800bc0c:	d006      	beq.n	800bc1c <__ieee754_sqrt+0x114>
 800bc0e:	1c50      	adds	r0, r2, #1
 800bc10:	bf13      	iteet	ne
 800bc12:	3201      	addne	r2, #1
 800bc14:	3401      	addeq	r4, #1
 800bc16:	4672      	moveq	r2, lr
 800bc18:	f022 0201 	bicne.w	r2, r2, #1
 800bc1c:	1063      	asrs	r3, r4, #1
 800bc1e:	0852      	lsrs	r2, r2, #1
 800bc20:	07e1      	lsls	r1, r4, #31
 800bc22:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bc26:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bc2a:	bf48      	it	mi
 800bc2c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800bc30:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800bc34:	4614      	mov	r4, r2
 800bc36:	e781      	b.n	800bb3c <__ieee754_sqrt+0x34>
 800bc38:	0ad9      	lsrs	r1, r3, #11
 800bc3a:	3815      	subs	r0, #21
 800bc3c:	055b      	lsls	r3, r3, #21
 800bc3e:	2900      	cmp	r1, #0
 800bc40:	d0fa      	beq.n	800bc38 <__ieee754_sqrt+0x130>
 800bc42:	02cd      	lsls	r5, r1, #11
 800bc44:	d50a      	bpl.n	800bc5c <__ieee754_sqrt+0x154>
 800bc46:	f1c2 0420 	rsb	r4, r2, #32
 800bc4a:	fa23 f404 	lsr.w	r4, r3, r4
 800bc4e:	1e55      	subs	r5, r2, #1
 800bc50:	4093      	lsls	r3, r2
 800bc52:	4321      	orrs	r1, r4
 800bc54:	1b42      	subs	r2, r0, r5
 800bc56:	e78a      	b.n	800bb6e <__ieee754_sqrt+0x66>
 800bc58:	4610      	mov	r0, r2
 800bc5a:	e7f0      	b.n	800bc3e <__ieee754_sqrt+0x136>
 800bc5c:	0049      	lsls	r1, r1, #1
 800bc5e:	3201      	adds	r2, #1
 800bc60:	e7ef      	b.n	800bc42 <__ieee754_sqrt+0x13a>
 800bc62:	4680      	mov	r8, r0
 800bc64:	e7bd      	b.n	800bbe2 <__ieee754_sqrt+0xda>
 800bc66:	bf00      	nop
 800bc68:	7ff00000 	.word	0x7ff00000
 800bc6c:	00000000 	.word	0x00000000

0800bc70 <__kernel_cos>:
 800bc70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc74:	ec57 6b10 	vmov	r6, r7, d0
 800bc78:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bc7c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800bc80:	ed8d 1b00 	vstr	d1, [sp]
 800bc84:	da07      	bge.n	800bc96 <__kernel_cos+0x26>
 800bc86:	ee10 0a10 	vmov	r0, s0
 800bc8a:	4639      	mov	r1, r7
 800bc8c:	f7f4 ff10 	bl	8000ab0 <__aeabi_d2iz>
 800bc90:	2800      	cmp	r0, #0
 800bc92:	f000 8088 	beq.w	800bda6 <__kernel_cos+0x136>
 800bc96:	4632      	mov	r2, r6
 800bc98:	463b      	mov	r3, r7
 800bc9a:	4630      	mov	r0, r6
 800bc9c:	4639      	mov	r1, r7
 800bc9e:	f7f4 fc57 	bl	8000550 <__aeabi_dmul>
 800bca2:	4b51      	ldr	r3, [pc, #324]	; (800bde8 <__kernel_cos+0x178>)
 800bca4:	2200      	movs	r2, #0
 800bca6:	4604      	mov	r4, r0
 800bca8:	460d      	mov	r5, r1
 800bcaa:	f7f4 fc51 	bl	8000550 <__aeabi_dmul>
 800bcae:	a340      	add	r3, pc, #256	; (adr r3, 800bdb0 <__kernel_cos+0x140>)
 800bcb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb4:	4682      	mov	sl, r0
 800bcb6:	468b      	mov	fp, r1
 800bcb8:	4620      	mov	r0, r4
 800bcba:	4629      	mov	r1, r5
 800bcbc:	f7f4 fc48 	bl	8000550 <__aeabi_dmul>
 800bcc0:	a33d      	add	r3, pc, #244	; (adr r3, 800bdb8 <__kernel_cos+0x148>)
 800bcc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc6:	f7f4 fa8d 	bl	80001e4 <__adddf3>
 800bcca:	4622      	mov	r2, r4
 800bccc:	462b      	mov	r3, r5
 800bcce:	f7f4 fc3f 	bl	8000550 <__aeabi_dmul>
 800bcd2:	a33b      	add	r3, pc, #236	; (adr r3, 800bdc0 <__kernel_cos+0x150>)
 800bcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd8:	f7f4 fa82 	bl	80001e0 <__aeabi_dsub>
 800bcdc:	4622      	mov	r2, r4
 800bcde:	462b      	mov	r3, r5
 800bce0:	f7f4 fc36 	bl	8000550 <__aeabi_dmul>
 800bce4:	a338      	add	r3, pc, #224	; (adr r3, 800bdc8 <__kernel_cos+0x158>)
 800bce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcea:	f7f4 fa7b 	bl	80001e4 <__adddf3>
 800bcee:	4622      	mov	r2, r4
 800bcf0:	462b      	mov	r3, r5
 800bcf2:	f7f4 fc2d 	bl	8000550 <__aeabi_dmul>
 800bcf6:	a336      	add	r3, pc, #216	; (adr r3, 800bdd0 <__kernel_cos+0x160>)
 800bcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfc:	f7f4 fa70 	bl	80001e0 <__aeabi_dsub>
 800bd00:	4622      	mov	r2, r4
 800bd02:	462b      	mov	r3, r5
 800bd04:	f7f4 fc24 	bl	8000550 <__aeabi_dmul>
 800bd08:	a333      	add	r3, pc, #204	; (adr r3, 800bdd8 <__kernel_cos+0x168>)
 800bd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0e:	f7f4 fa69 	bl	80001e4 <__adddf3>
 800bd12:	4622      	mov	r2, r4
 800bd14:	462b      	mov	r3, r5
 800bd16:	f7f4 fc1b 	bl	8000550 <__aeabi_dmul>
 800bd1a:	4622      	mov	r2, r4
 800bd1c:	462b      	mov	r3, r5
 800bd1e:	f7f4 fc17 	bl	8000550 <__aeabi_dmul>
 800bd22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd26:	4604      	mov	r4, r0
 800bd28:	460d      	mov	r5, r1
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	4639      	mov	r1, r7
 800bd2e:	f7f4 fc0f 	bl	8000550 <__aeabi_dmul>
 800bd32:	460b      	mov	r3, r1
 800bd34:	4602      	mov	r2, r0
 800bd36:	4629      	mov	r1, r5
 800bd38:	4620      	mov	r0, r4
 800bd3a:	f7f4 fa51 	bl	80001e0 <__aeabi_dsub>
 800bd3e:	4b2b      	ldr	r3, [pc, #172]	; (800bdec <__kernel_cos+0x17c>)
 800bd40:	4598      	cmp	r8, r3
 800bd42:	4606      	mov	r6, r0
 800bd44:	460f      	mov	r7, r1
 800bd46:	dc10      	bgt.n	800bd6a <__kernel_cos+0xfa>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	4650      	mov	r0, sl
 800bd4e:	4659      	mov	r1, fp
 800bd50:	f7f4 fa46 	bl	80001e0 <__aeabi_dsub>
 800bd54:	460b      	mov	r3, r1
 800bd56:	4926      	ldr	r1, [pc, #152]	; (800bdf0 <__kernel_cos+0x180>)
 800bd58:	4602      	mov	r2, r0
 800bd5a:	2000      	movs	r0, #0
 800bd5c:	f7f4 fa40 	bl	80001e0 <__aeabi_dsub>
 800bd60:	ec41 0b10 	vmov	d0, r0, r1
 800bd64:	b003      	add	sp, #12
 800bd66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd6a:	4b22      	ldr	r3, [pc, #136]	; (800bdf4 <__kernel_cos+0x184>)
 800bd6c:	4920      	ldr	r1, [pc, #128]	; (800bdf0 <__kernel_cos+0x180>)
 800bd6e:	4598      	cmp	r8, r3
 800bd70:	bfcc      	ite	gt
 800bd72:	4d21      	ldrgt	r5, [pc, #132]	; (800bdf8 <__kernel_cos+0x188>)
 800bd74:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800bd78:	2400      	movs	r4, #0
 800bd7a:	4622      	mov	r2, r4
 800bd7c:	462b      	mov	r3, r5
 800bd7e:	2000      	movs	r0, #0
 800bd80:	f7f4 fa2e 	bl	80001e0 <__aeabi_dsub>
 800bd84:	4622      	mov	r2, r4
 800bd86:	4680      	mov	r8, r0
 800bd88:	4689      	mov	r9, r1
 800bd8a:	462b      	mov	r3, r5
 800bd8c:	4650      	mov	r0, sl
 800bd8e:	4659      	mov	r1, fp
 800bd90:	f7f4 fa26 	bl	80001e0 <__aeabi_dsub>
 800bd94:	4632      	mov	r2, r6
 800bd96:	463b      	mov	r3, r7
 800bd98:	f7f4 fa22 	bl	80001e0 <__aeabi_dsub>
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	460b      	mov	r3, r1
 800bda0:	4640      	mov	r0, r8
 800bda2:	4649      	mov	r1, r9
 800bda4:	e7da      	b.n	800bd5c <__kernel_cos+0xec>
 800bda6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bde0 <__kernel_cos+0x170>
 800bdaa:	e7db      	b.n	800bd64 <__kernel_cos+0xf4>
 800bdac:	f3af 8000 	nop.w
 800bdb0:	be8838d4 	.word	0xbe8838d4
 800bdb4:	bda8fae9 	.word	0xbda8fae9
 800bdb8:	bdb4b1c4 	.word	0xbdb4b1c4
 800bdbc:	3e21ee9e 	.word	0x3e21ee9e
 800bdc0:	809c52ad 	.word	0x809c52ad
 800bdc4:	3e927e4f 	.word	0x3e927e4f
 800bdc8:	19cb1590 	.word	0x19cb1590
 800bdcc:	3efa01a0 	.word	0x3efa01a0
 800bdd0:	16c15177 	.word	0x16c15177
 800bdd4:	3f56c16c 	.word	0x3f56c16c
 800bdd8:	5555554c 	.word	0x5555554c
 800bddc:	3fa55555 	.word	0x3fa55555
 800bde0:	00000000 	.word	0x00000000
 800bde4:	3ff00000 	.word	0x3ff00000
 800bde8:	3fe00000 	.word	0x3fe00000
 800bdec:	3fd33332 	.word	0x3fd33332
 800bdf0:	3ff00000 	.word	0x3ff00000
 800bdf4:	3fe90000 	.word	0x3fe90000
 800bdf8:	3fd20000 	.word	0x3fd20000
 800bdfc:	00000000 	.word	0x00000000

0800be00 <__kernel_rem_pio2>:
 800be00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be04:	ed2d 8b02 	vpush	{d8}
 800be08:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800be0c:	f112 0f14 	cmn.w	r2, #20
 800be10:	9308      	str	r3, [sp, #32]
 800be12:	9101      	str	r1, [sp, #4]
 800be14:	4bc4      	ldr	r3, [pc, #784]	; (800c128 <__kernel_rem_pio2+0x328>)
 800be16:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800be18:	900b      	str	r0, [sp, #44]	; 0x2c
 800be1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800be1e:	9302      	str	r3, [sp, #8]
 800be20:	9b08      	ldr	r3, [sp, #32]
 800be22:	f103 33ff 	add.w	r3, r3, #4294967295
 800be26:	bfa8      	it	ge
 800be28:	1ed4      	subge	r4, r2, #3
 800be2a:	9306      	str	r3, [sp, #24]
 800be2c:	bfb2      	itee	lt
 800be2e:	2400      	movlt	r4, #0
 800be30:	2318      	movge	r3, #24
 800be32:	fb94 f4f3 	sdivge	r4, r4, r3
 800be36:	f06f 0317 	mvn.w	r3, #23
 800be3a:	fb04 3303 	mla	r3, r4, r3, r3
 800be3e:	eb03 0a02 	add.w	sl, r3, r2
 800be42:	9b02      	ldr	r3, [sp, #8]
 800be44:	9a06      	ldr	r2, [sp, #24]
 800be46:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800c118 <__kernel_rem_pio2+0x318>
 800be4a:	eb03 0802 	add.w	r8, r3, r2
 800be4e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800be50:	1aa7      	subs	r7, r4, r2
 800be52:	ae22      	add	r6, sp, #136	; 0x88
 800be54:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800be58:	2500      	movs	r5, #0
 800be5a:	4545      	cmp	r5, r8
 800be5c:	dd13      	ble.n	800be86 <__kernel_rem_pio2+0x86>
 800be5e:	9b08      	ldr	r3, [sp, #32]
 800be60:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800c118 <__kernel_rem_pio2+0x318>
 800be64:	aa22      	add	r2, sp, #136	; 0x88
 800be66:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800be6a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800be6e:	f04f 0800 	mov.w	r8, #0
 800be72:	9b02      	ldr	r3, [sp, #8]
 800be74:	4598      	cmp	r8, r3
 800be76:	dc2f      	bgt.n	800bed8 <__kernel_rem_pio2+0xd8>
 800be78:	ed8d 8b04 	vstr	d8, [sp, #16]
 800be7c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800be80:	462f      	mov	r7, r5
 800be82:	2600      	movs	r6, #0
 800be84:	e01b      	b.n	800bebe <__kernel_rem_pio2+0xbe>
 800be86:	42ef      	cmn	r7, r5
 800be88:	d407      	bmi.n	800be9a <__kernel_rem_pio2+0x9a>
 800be8a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800be8e:	f7f4 faf5 	bl	800047c <__aeabi_i2d>
 800be92:	e8e6 0102 	strd	r0, r1, [r6], #8
 800be96:	3501      	adds	r5, #1
 800be98:	e7df      	b.n	800be5a <__kernel_rem_pio2+0x5a>
 800be9a:	ec51 0b18 	vmov	r0, r1, d8
 800be9e:	e7f8      	b.n	800be92 <__kernel_rem_pio2+0x92>
 800bea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bea4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bea8:	f7f4 fb52 	bl	8000550 <__aeabi_dmul>
 800beac:	4602      	mov	r2, r0
 800beae:	460b      	mov	r3, r1
 800beb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800beb4:	f7f4 f996 	bl	80001e4 <__adddf3>
 800beb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bebc:	3601      	adds	r6, #1
 800bebe:	9b06      	ldr	r3, [sp, #24]
 800bec0:	429e      	cmp	r6, r3
 800bec2:	f1a7 0708 	sub.w	r7, r7, #8
 800bec6:	ddeb      	ble.n	800bea0 <__kernel_rem_pio2+0xa0>
 800bec8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800becc:	f108 0801 	add.w	r8, r8, #1
 800bed0:	ecab 7b02 	vstmia	fp!, {d7}
 800bed4:	3508      	adds	r5, #8
 800bed6:	e7cc      	b.n	800be72 <__kernel_rem_pio2+0x72>
 800bed8:	9b02      	ldr	r3, [sp, #8]
 800beda:	aa0e      	add	r2, sp, #56	; 0x38
 800bedc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bee0:	930d      	str	r3, [sp, #52]	; 0x34
 800bee2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800bee4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bee8:	9c02      	ldr	r4, [sp, #8]
 800beea:	930c      	str	r3, [sp, #48]	; 0x30
 800beec:	00e3      	lsls	r3, r4, #3
 800beee:	930a      	str	r3, [sp, #40]	; 0x28
 800bef0:	ab9a      	add	r3, sp, #616	; 0x268
 800bef2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bef6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800befa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800befe:	ab72      	add	r3, sp, #456	; 0x1c8
 800bf00:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800bf04:	46c3      	mov	fp, r8
 800bf06:	46a1      	mov	r9, r4
 800bf08:	f1b9 0f00 	cmp.w	r9, #0
 800bf0c:	f1a5 0508 	sub.w	r5, r5, #8
 800bf10:	dc77      	bgt.n	800c002 <__kernel_rem_pio2+0x202>
 800bf12:	ec47 6b10 	vmov	d0, r6, r7
 800bf16:	4650      	mov	r0, sl
 800bf18:	f000 fbce 	bl	800c6b8 <scalbn>
 800bf1c:	ec57 6b10 	vmov	r6, r7, d0
 800bf20:	2200      	movs	r2, #0
 800bf22:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bf26:	ee10 0a10 	vmov	r0, s0
 800bf2a:	4639      	mov	r1, r7
 800bf2c:	f7f4 fb10 	bl	8000550 <__aeabi_dmul>
 800bf30:	ec41 0b10 	vmov	d0, r0, r1
 800bf34:	f7fe faa4 	bl	800a480 <floor>
 800bf38:	4b7c      	ldr	r3, [pc, #496]	; (800c12c <__kernel_rem_pio2+0x32c>)
 800bf3a:	ec51 0b10 	vmov	r0, r1, d0
 800bf3e:	2200      	movs	r2, #0
 800bf40:	f7f4 fb06 	bl	8000550 <__aeabi_dmul>
 800bf44:	4602      	mov	r2, r0
 800bf46:	460b      	mov	r3, r1
 800bf48:	4630      	mov	r0, r6
 800bf4a:	4639      	mov	r1, r7
 800bf4c:	f7f4 f948 	bl	80001e0 <__aeabi_dsub>
 800bf50:	460f      	mov	r7, r1
 800bf52:	4606      	mov	r6, r0
 800bf54:	f7f4 fdac 	bl	8000ab0 <__aeabi_d2iz>
 800bf58:	9004      	str	r0, [sp, #16]
 800bf5a:	f7f4 fa8f 	bl	800047c <__aeabi_i2d>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	460b      	mov	r3, r1
 800bf62:	4630      	mov	r0, r6
 800bf64:	4639      	mov	r1, r7
 800bf66:	f7f4 f93b 	bl	80001e0 <__aeabi_dsub>
 800bf6a:	f1ba 0f00 	cmp.w	sl, #0
 800bf6e:	4606      	mov	r6, r0
 800bf70:	460f      	mov	r7, r1
 800bf72:	dd6d      	ble.n	800c050 <__kernel_rem_pio2+0x250>
 800bf74:	1e62      	subs	r2, r4, #1
 800bf76:	ab0e      	add	r3, sp, #56	; 0x38
 800bf78:	9d04      	ldr	r5, [sp, #16]
 800bf7a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bf7e:	f1ca 0118 	rsb	r1, sl, #24
 800bf82:	fa40 f301 	asr.w	r3, r0, r1
 800bf86:	441d      	add	r5, r3
 800bf88:	408b      	lsls	r3, r1
 800bf8a:	1ac0      	subs	r0, r0, r3
 800bf8c:	ab0e      	add	r3, sp, #56	; 0x38
 800bf8e:	9504      	str	r5, [sp, #16]
 800bf90:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800bf94:	f1ca 0317 	rsb	r3, sl, #23
 800bf98:	fa40 fb03 	asr.w	fp, r0, r3
 800bf9c:	f1bb 0f00 	cmp.w	fp, #0
 800bfa0:	dd65      	ble.n	800c06e <__kernel_rem_pio2+0x26e>
 800bfa2:	9b04      	ldr	r3, [sp, #16]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	9304      	str	r3, [sp, #16]
 800bfaa:	4615      	mov	r5, r2
 800bfac:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bfb0:	4294      	cmp	r4, r2
 800bfb2:	f300 809c 	bgt.w	800c0ee <__kernel_rem_pio2+0x2ee>
 800bfb6:	f1ba 0f00 	cmp.w	sl, #0
 800bfba:	dd07      	ble.n	800bfcc <__kernel_rem_pio2+0x1cc>
 800bfbc:	f1ba 0f01 	cmp.w	sl, #1
 800bfc0:	f000 80c0 	beq.w	800c144 <__kernel_rem_pio2+0x344>
 800bfc4:	f1ba 0f02 	cmp.w	sl, #2
 800bfc8:	f000 80c6 	beq.w	800c158 <__kernel_rem_pio2+0x358>
 800bfcc:	f1bb 0f02 	cmp.w	fp, #2
 800bfd0:	d14d      	bne.n	800c06e <__kernel_rem_pio2+0x26e>
 800bfd2:	4632      	mov	r2, r6
 800bfd4:	463b      	mov	r3, r7
 800bfd6:	4956      	ldr	r1, [pc, #344]	; (800c130 <__kernel_rem_pio2+0x330>)
 800bfd8:	2000      	movs	r0, #0
 800bfda:	f7f4 f901 	bl	80001e0 <__aeabi_dsub>
 800bfde:	4606      	mov	r6, r0
 800bfe0:	460f      	mov	r7, r1
 800bfe2:	2d00      	cmp	r5, #0
 800bfe4:	d043      	beq.n	800c06e <__kernel_rem_pio2+0x26e>
 800bfe6:	4650      	mov	r0, sl
 800bfe8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800c120 <__kernel_rem_pio2+0x320>
 800bfec:	f000 fb64 	bl	800c6b8 <scalbn>
 800bff0:	4630      	mov	r0, r6
 800bff2:	4639      	mov	r1, r7
 800bff4:	ec53 2b10 	vmov	r2, r3, d0
 800bff8:	f7f4 f8f2 	bl	80001e0 <__aeabi_dsub>
 800bffc:	4606      	mov	r6, r0
 800bffe:	460f      	mov	r7, r1
 800c000:	e035      	b.n	800c06e <__kernel_rem_pio2+0x26e>
 800c002:	4b4c      	ldr	r3, [pc, #304]	; (800c134 <__kernel_rem_pio2+0x334>)
 800c004:	2200      	movs	r2, #0
 800c006:	4630      	mov	r0, r6
 800c008:	4639      	mov	r1, r7
 800c00a:	f7f4 faa1 	bl	8000550 <__aeabi_dmul>
 800c00e:	f7f4 fd4f 	bl	8000ab0 <__aeabi_d2iz>
 800c012:	f7f4 fa33 	bl	800047c <__aeabi_i2d>
 800c016:	4602      	mov	r2, r0
 800c018:	460b      	mov	r3, r1
 800c01a:	ec43 2b18 	vmov	d8, r2, r3
 800c01e:	4b46      	ldr	r3, [pc, #280]	; (800c138 <__kernel_rem_pio2+0x338>)
 800c020:	2200      	movs	r2, #0
 800c022:	f7f4 fa95 	bl	8000550 <__aeabi_dmul>
 800c026:	4602      	mov	r2, r0
 800c028:	460b      	mov	r3, r1
 800c02a:	4630      	mov	r0, r6
 800c02c:	4639      	mov	r1, r7
 800c02e:	f7f4 f8d7 	bl	80001e0 <__aeabi_dsub>
 800c032:	f7f4 fd3d 	bl	8000ab0 <__aeabi_d2iz>
 800c036:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c03a:	f84b 0b04 	str.w	r0, [fp], #4
 800c03e:	ec51 0b18 	vmov	r0, r1, d8
 800c042:	f7f4 f8cf 	bl	80001e4 <__adddf3>
 800c046:	f109 39ff 	add.w	r9, r9, #4294967295
 800c04a:	4606      	mov	r6, r0
 800c04c:	460f      	mov	r7, r1
 800c04e:	e75b      	b.n	800bf08 <__kernel_rem_pio2+0x108>
 800c050:	d106      	bne.n	800c060 <__kernel_rem_pio2+0x260>
 800c052:	1e63      	subs	r3, r4, #1
 800c054:	aa0e      	add	r2, sp, #56	; 0x38
 800c056:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c05a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800c05e:	e79d      	b.n	800bf9c <__kernel_rem_pio2+0x19c>
 800c060:	4b36      	ldr	r3, [pc, #216]	; (800c13c <__kernel_rem_pio2+0x33c>)
 800c062:	2200      	movs	r2, #0
 800c064:	f7f4 fcfa 	bl	8000a5c <__aeabi_dcmpge>
 800c068:	2800      	cmp	r0, #0
 800c06a:	d13d      	bne.n	800c0e8 <__kernel_rem_pio2+0x2e8>
 800c06c:	4683      	mov	fp, r0
 800c06e:	2200      	movs	r2, #0
 800c070:	2300      	movs	r3, #0
 800c072:	4630      	mov	r0, r6
 800c074:	4639      	mov	r1, r7
 800c076:	f7f4 fcd3 	bl	8000a20 <__aeabi_dcmpeq>
 800c07a:	2800      	cmp	r0, #0
 800c07c:	f000 80c0 	beq.w	800c200 <__kernel_rem_pio2+0x400>
 800c080:	1e65      	subs	r5, r4, #1
 800c082:	462b      	mov	r3, r5
 800c084:	2200      	movs	r2, #0
 800c086:	9902      	ldr	r1, [sp, #8]
 800c088:	428b      	cmp	r3, r1
 800c08a:	da6c      	bge.n	800c166 <__kernel_rem_pio2+0x366>
 800c08c:	2a00      	cmp	r2, #0
 800c08e:	f000 8089 	beq.w	800c1a4 <__kernel_rem_pio2+0x3a4>
 800c092:	ab0e      	add	r3, sp, #56	; 0x38
 800c094:	f1aa 0a18 	sub.w	sl, sl, #24
 800c098:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	f000 80ad 	beq.w	800c1fc <__kernel_rem_pio2+0x3fc>
 800c0a2:	4650      	mov	r0, sl
 800c0a4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800c120 <__kernel_rem_pio2+0x320>
 800c0a8:	f000 fb06 	bl	800c6b8 <scalbn>
 800c0ac:	ab9a      	add	r3, sp, #616	; 0x268
 800c0ae:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c0b2:	ec57 6b10 	vmov	r6, r7, d0
 800c0b6:	00ec      	lsls	r4, r5, #3
 800c0b8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800c0bc:	46aa      	mov	sl, r5
 800c0be:	f1ba 0f00 	cmp.w	sl, #0
 800c0c2:	f280 80d6 	bge.w	800c272 <__kernel_rem_pio2+0x472>
 800c0c6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800c118 <__kernel_rem_pio2+0x318>
 800c0ca:	462e      	mov	r6, r5
 800c0cc:	2e00      	cmp	r6, #0
 800c0ce:	f2c0 8104 	blt.w	800c2da <__kernel_rem_pio2+0x4da>
 800c0d2:	ab72      	add	r3, sp, #456	; 0x1c8
 800c0d4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800c0d8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800c140 <__kernel_rem_pio2+0x340>
 800c0dc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c0e0:	f04f 0800 	mov.w	r8, #0
 800c0e4:	1baf      	subs	r7, r5, r6
 800c0e6:	e0ea      	b.n	800c2be <__kernel_rem_pio2+0x4be>
 800c0e8:	f04f 0b02 	mov.w	fp, #2
 800c0ec:	e759      	b.n	800bfa2 <__kernel_rem_pio2+0x1a2>
 800c0ee:	f8d8 3000 	ldr.w	r3, [r8]
 800c0f2:	b955      	cbnz	r5, 800c10a <__kernel_rem_pio2+0x30a>
 800c0f4:	b123      	cbz	r3, 800c100 <__kernel_rem_pio2+0x300>
 800c0f6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c0fa:	f8c8 3000 	str.w	r3, [r8]
 800c0fe:	2301      	movs	r3, #1
 800c100:	3201      	adds	r2, #1
 800c102:	f108 0804 	add.w	r8, r8, #4
 800c106:	461d      	mov	r5, r3
 800c108:	e752      	b.n	800bfb0 <__kernel_rem_pio2+0x1b0>
 800c10a:	1acb      	subs	r3, r1, r3
 800c10c:	f8c8 3000 	str.w	r3, [r8]
 800c110:	462b      	mov	r3, r5
 800c112:	e7f5      	b.n	800c100 <__kernel_rem_pio2+0x300>
 800c114:	f3af 8000 	nop.w
	...
 800c124:	3ff00000 	.word	0x3ff00000
 800c128:	0800ca00 	.word	0x0800ca00
 800c12c:	40200000 	.word	0x40200000
 800c130:	3ff00000 	.word	0x3ff00000
 800c134:	3e700000 	.word	0x3e700000
 800c138:	41700000 	.word	0x41700000
 800c13c:	3fe00000 	.word	0x3fe00000
 800c140:	0800c9c0 	.word	0x0800c9c0
 800c144:	1e62      	subs	r2, r4, #1
 800c146:	ab0e      	add	r3, sp, #56	; 0x38
 800c148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c14c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c150:	a90e      	add	r1, sp, #56	; 0x38
 800c152:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c156:	e739      	b.n	800bfcc <__kernel_rem_pio2+0x1cc>
 800c158:	1e62      	subs	r2, r4, #1
 800c15a:	ab0e      	add	r3, sp, #56	; 0x38
 800c15c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c160:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c164:	e7f4      	b.n	800c150 <__kernel_rem_pio2+0x350>
 800c166:	a90e      	add	r1, sp, #56	; 0x38
 800c168:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c16c:	3b01      	subs	r3, #1
 800c16e:	430a      	orrs	r2, r1
 800c170:	e789      	b.n	800c086 <__kernel_rem_pio2+0x286>
 800c172:	3301      	adds	r3, #1
 800c174:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c178:	2900      	cmp	r1, #0
 800c17a:	d0fa      	beq.n	800c172 <__kernel_rem_pio2+0x372>
 800c17c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c17e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800c182:	446a      	add	r2, sp
 800c184:	3a98      	subs	r2, #152	; 0x98
 800c186:	920a      	str	r2, [sp, #40]	; 0x28
 800c188:	9a08      	ldr	r2, [sp, #32]
 800c18a:	18e3      	adds	r3, r4, r3
 800c18c:	18a5      	adds	r5, r4, r2
 800c18e:	aa22      	add	r2, sp, #136	; 0x88
 800c190:	f104 0801 	add.w	r8, r4, #1
 800c194:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800c198:	9304      	str	r3, [sp, #16]
 800c19a:	9b04      	ldr	r3, [sp, #16]
 800c19c:	4543      	cmp	r3, r8
 800c19e:	da04      	bge.n	800c1aa <__kernel_rem_pio2+0x3aa>
 800c1a0:	461c      	mov	r4, r3
 800c1a2:	e6a3      	b.n	800beec <__kernel_rem_pio2+0xec>
 800c1a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	e7e4      	b.n	800c174 <__kernel_rem_pio2+0x374>
 800c1aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1ac:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c1b0:	f7f4 f964 	bl	800047c <__aeabi_i2d>
 800c1b4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800c1b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1ba:	46ab      	mov	fp, r5
 800c1bc:	461c      	mov	r4, r3
 800c1be:	f04f 0900 	mov.w	r9, #0
 800c1c2:	2600      	movs	r6, #0
 800c1c4:	2700      	movs	r7, #0
 800c1c6:	9b06      	ldr	r3, [sp, #24]
 800c1c8:	4599      	cmp	r9, r3
 800c1ca:	dd06      	ble.n	800c1da <__kernel_rem_pio2+0x3da>
 800c1cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1ce:	e8e3 6702 	strd	r6, r7, [r3], #8
 800c1d2:	f108 0801 	add.w	r8, r8, #1
 800c1d6:	930a      	str	r3, [sp, #40]	; 0x28
 800c1d8:	e7df      	b.n	800c19a <__kernel_rem_pio2+0x39a>
 800c1da:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c1de:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c1e2:	f7f4 f9b5 	bl	8000550 <__aeabi_dmul>
 800c1e6:	4602      	mov	r2, r0
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	4630      	mov	r0, r6
 800c1ec:	4639      	mov	r1, r7
 800c1ee:	f7f3 fff9 	bl	80001e4 <__adddf3>
 800c1f2:	f109 0901 	add.w	r9, r9, #1
 800c1f6:	4606      	mov	r6, r0
 800c1f8:	460f      	mov	r7, r1
 800c1fa:	e7e4      	b.n	800c1c6 <__kernel_rem_pio2+0x3c6>
 800c1fc:	3d01      	subs	r5, #1
 800c1fe:	e748      	b.n	800c092 <__kernel_rem_pio2+0x292>
 800c200:	ec47 6b10 	vmov	d0, r6, r7
 800c204:	f1ca 0000 	rsb	r0, sl, #0
 800c208:	f000 fa56 	bl	800c6b8 <scalbn>
 800c20c:	ec57 6b10 	vmov	r6, r7, d0
 800c210:	4ba0      	ldr	r3, [pc, #640]	; (800c494 <__kernel_rem_pio2+0x694>)
 800c212:	ee10 0a10 	vmov	r0, s0
 800c216:	2200      	movs	r2, #0
 800c218:	4639      	mov	r1, r7
 800c21a:	f7f4 fc1f 	bl	8000a5c <__aeabi_dcmpge>
 800c21e:	b1f8      	cbz	r0, 800c260 <__kernel_rem_pio2+0x460>
 800c220:	4b9d      	ldr	r3, [pc, #628]	; (800c498 <__kernel_rem_pio2+0x698>)
 800c222:	2200      	movs	r2, #0
 800c224:	4630      	mov	r0, r6
 800c226:	4639      	mov	r1, r7
 800c228:	f7f4 f992 	bl	8000550 <__aeabi_dmul>
 800c22c:	f7f4 fc40 	bl	8000ab0 <__aeabi_d2iz>
 800c230:	4680      	mov	r8, r0
 800c232:	f7f4 f923 	bl	800047c <__aeabi_i2d>
 800c236:	4b97      	ldr	r3, [pc, #604]	; (800c494 <__kernel_rem_pio2+0x694>)
 800c238:	2200      	movs	r2, #0
 800c23a:	f7f4 f989 	bl	8000550 <__aeabi_dmul>
 800c23e:	460b      	mov	r3, r1
 800c240:	4602      	mov	r2, r0
 800c242:	4639      	mov	r1, r7
 800c244:	4630      	mov	r0, r6
 800c246:	f7f3 ffcb 	bl	80001e0 <__aeabi_dsub>
 800c24a:	f7f4 fc31 	bl	8000ab0 <__aeabi_d2iz>
 800c24e:	1c65      	adds	r5, r4, #1
 800c250:	ab0e      	add	r3, sp, #56	; 0x38
 800c252:	f10a 0a18 	add.w	sl, sl, #24
 800c256:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c25a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c25e:	e720      	b.n	800c0a2 <__kernel_rem_pio2+0x2a2>
 800c260:	4630      	mov	r0, r6
 800c262:	4639      	mov	r1, r7
 800c264:	f7f4 fc24 	bl	8000ab0 <__aeabi_d2iz>
 800c268:	ab0e      	add	r3, sp, #56	; 0x38
 800c26a:	4625      	mov	r5, r4
 800c26c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c270:	e717      	b.n	800c0a2 <__kernel_rem_pio2+0x2a2>
 800c272:	ab0e      	add	r3, sp, #56	; 0x38
 800c274:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c278:	f7f4 f900 	bl	800047c <__aeabi_i2d>
 800c27c:	4632      	mov	r2, r6
 800c27e:	463b      	mov	r3, r7
 800c280:	f7f4 f966 	bl	8000550 <__aeabi_dmul>
 800c284:	4b84      	ldr	r3, [pc, #528]	; (800c498 <__kernel_rem_pio2+0x698>)
 800c286:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800c28a:	2200      	movs	r2, #0
 800c28c:	4630      	mov	r0, r6
 800c28e:	4639      	mov	r1, r7
 800c290:	f7f4 f95e 	bl	8000550 <__aeabi_dmul>
 800c294:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c298:	4606      	mov	r6, r0
 800c29a:	460f      	mov	r7, r1
 800c29c:	e70f      	b.n	800c0be <__kernel_rem_pio2+0x2be>
 800c29e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c2a2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c2a6:	f7f4 f953 	bl	8000550 <__aeabi_dmul>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2b2:	f7f3 ff97 	bl	80001e4 <__adddf3>
 800c2b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c2ba:	f108 0801 	add.w	r8, r8, #1
 800c2be:	9b02      	ldr	r3, [sp, #8]
 800c2c0:	4598      	cmp	r8, r3
 800c2c2:	dc01      	bgt.n	800c2c8 <__kernel_rem_pio2+0x4c8>
 800c2c4:	45b8      	cmp	r8, r7
 800c2c6:	ddea      	ble.n	800c29e <__kernel_rem_pio2+0x49e>
 800c2c8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c2cc:	ab4a      	add	r3, sp, #296	; 0x128
 800c2ce:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c2d2:	ed87 7b00 	vstr	d7, [r7]
 800c2d6:	3e01      	subs	r6, #1
 800c2d8:	e6f8      	b.n	800c0cc <__kernel_rem_pio2+0x2cc>
 800c2da:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c2dc:	2b02      	cmp	r3, #2
 800c2de:	dc0b      	bgt.n	800c2f8 <__kernel_rem_pio2+0x4f8>
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	dc35      	bgt.n	800c350 <__kernel_rem_pio2+0x550>
 800c2e4:	d059      	beq.n	800c39a <__kernel_rem_pio2+0x59a>
 800c2e6:	9b04      	ldr	r3, [sp, #16]
 800c2e8:	f003 0007 	and.w	r0, r3, #7
 800c2ec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800c2f0:	ecbd 8b02 	vpop	{d8}
 800c2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2f8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c2fa:	2b03      	cmp	r3, #3
 800c2fc:	d1f3      	bne.n	800c2e6 <__kernel_rem_pio2+0x4e6>
 800c2fe:	ab4a      	add	r3, sp, #296	; 0x128
 800c300:	4423      	add	r3, r4
 800c302:	9306      	str	r3, [sp, #24]
 800c304:	461c      	mov	r4, r3
 800c306:	469a      	mov	sl, r3
 800c308:	9502      	str	r5, [sp, #8]
 800c30a:	9b02      	ldr	r3, [sp, #8]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	f1aa 0a08 	sub.w	sl, sl, #8
 800c312:	dc6b      	bgt.n	800c3ec <__kernel_rem_pio2+0x5ec>
 800c314:	46aa      	mov	sl, r5
 800c316:	f1ba 0f01 	cmp.w	sl, #1
 800c31a:	f1a4 0408 	sub.w	r4, r4, #8
 800c31e:	f300 8085 	bgt.w	800c42c <__kernel_rem_pio2+0x62c>
 800c322:	9c06      	ldr	r4, [sp, #24]
 800c324:	2000      	movs	r0, #0
 800c326:	3408      	adds	r4, #8
 800c328:	2100      	movs	r1, #0
 800c32a:	2d01      	cmp	r5, #1
 800c32c:	f300 809d 	bgt.w	800c46a <__kernel_rem_pio2+0x66a>
 800c330:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800c334:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800c338:	f1bb 0f00 	cmp.w	fp, #0
 800c33c:	f040 809b 	bne.w	800c476 <__kernel_rem_pio2+0x676>
 800c340:	9b01      	ldr	r3, [sp, #4]
 800c342:	e9c3 5600 	strd	r5, r6, [r3]
 800c346:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c34a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c34e:	e7ca      	b.n	800c2e6 <__kernel_rem_pio2+0x4e6>
 800c350:	3408      	adds	r4, #8
 800c352:	ab4a      	add	r3, sp, #296	; 0x128
 800c354:	441c      	add	r4, r3
 800c356:	462e      	mov	r6, r5
 800c358:	2000      	movs	r0, #0
 800c35a:	2100      	movs	r1, #0
 800c35c:	2e00      	cmp	r6, #0
 800c35e:	da36      	bge.n	800c3ce <__kernel_rem_pio2+0x5ce>
 800c360:	f1bb 0f00 	cmp.w	fp, #0
 800c364:	d039      	beq.n	800c3da <__kernel_rem_pio2+0x5da>
 800c366:	4602      	mov	r2, r0
 800c368:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c36c:	9c01      	ldr	r4, [sp, #4]
 800c36e:	e9c4 2300 	strd	r2, r3, [r4]
 800c372:	4602      	mov	r2, r0
 800c374:	460b      	mov	r3, r1
 800c376:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800c37a:	f7f3 ff31 	bl	80001e0 <__aeabi_dsub>
 800c37e:	ae4c      	add	r6, sp, #304	; 0x130
 800c380:	2401      	movs	r4, #1
 800c382:	42a5      	cmp	r5, r4
 800c384:	da2c      	bge.n	800c3e0 <__kernel_rem_pio2+0x5e0>
 800c386:	f1bb 0f00 	cmp.w	fp, #0
 800c38a:	d002      	beq.n	800c392 <__kernel_rem_pio2+0x592>
 800c38c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c390:	4619      	mov	r1, r3
 800c392:	9b01      	ldr	r3, [sp, #4]
 800c394:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c398:	e7a5      	b.n	800c2e6 <__kernel_rem_pio2+0x4e6>
 800c39a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800c39e:	eb0d 0403 	add.w	r4, sp, r3
 800c3a2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800c3a6:	2000      	movs	r0, #0
 800c3a8:	2100      	movs	r1, #0
 800c3aa:	2d00      	cmp	r5, #0
 800c3ac:	da09      	bge.n	800c3c2 <__kernel_rem_pio2+0x5c2>
 800c3ae:	f1bb 0f00 	cmp.w	fp, #0
 800c3b2:	d002      	beq.n	800c3ba <__kernel_rem_pio2+0x5ba>
 800c3b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	9b01      	ldr	r3, [sp, #4]
 800c3bc:	e9c3 0100 	strd	r0, r1, [r3]
 800c3c0:	e791      	b.n	800c2e6 <__kernel_rem_pio2+0x4e6>
 800c3c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c3c6:	f7f3 ff0d 	bl	80001e4 <__adddf3>
 800c3ca:	3d01      	subs	r5, #1
 800c3cc:	e7ed      	b.n	800c3aa <__kernel_rem_pio2+0x5aa>
 800c3ce:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c3d2:	f7f3 ff07 	bl	80001e4 <__adddf3>
 800c3d6:	3e01      	subs	r6, #1
 800c3d8:	e7c0      	b.n	800c35c <__kernel_rem_pio2+0x55c>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	460b      	mov	r3, r1
 800c3de:	e7c5      	b.n	800c36c <__kernel_rem_pio2+0x56c>
 800c3e0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c3e4:	f7f3 fefe 	bl	80001e4 <__adddf3>
 800c3e8:	3401      	adds	r4, #1
 800c3ea:	e7ca      	b.n	800c382 <__kernel_rem_pio2+0x582>
 800c3ec:	e9da 8900 	ldrd	r8, r9, [sl]
 800c3f0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c3f4:	9b02      	ldr	r3, [sp, #8]
 800c3f6:	3b01      	subs	r3, #1
 800c3f8:	9302      	str	r3, [sp, #8]
 800c3fa:	4632      	mov	r2, r6
 800c3fc:	463b      	mov	r3, r7
 800c3fe:	4640      	mov	r0, r8
 800c400:	4649      	mov	r1, r9
 800c402:	f7f3 feef 	bl	80001e4 <__adddf3>
 800c406:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c40a:	4602      	mov	r2, r0
 800c40c:	460b      	mov	r3, r1
 800c40e:	4640      	mov	r0, r8
 800c410:	4649      	mov	r1, r9
 800c412:	f7f3 fee5 	bl	80001e0 <__aeabi_dsub>
 800c416:	4632      	mov	r2, r6
 800c418:	463b      	mov	r3, r7
 800c41a:	f7f3 fee3 	bl	80001e4 <__adddf3>
 800c41e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800c422:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c426:	ed8a 7b00 	vstr	d7, [sl]
 800c42a:	e76e      	b.n	800c30a <__kernel_rem_pio2+0x50a>
 800c42c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c430:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c434:	4640      	mov	r0, r8
 800c436:	4632      	mov	r2, r6
 800c438:	463b      	mov	r3, r7
 800c43a:	4649      	mov	r1, r9
 800c43c:	f7f3 fed2 	bl	80001e4 <__adddf3>
 800c440:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c444:	4602      	mov	r2, r0
 800c446:	460b      	mov	r3, r1
 800c448:	4640      	mov	r0, r8
 800c44a:	4649      	mov	r1, r9
 800c44c:	f7f3 fec8 	bl	80001e0 <__aeabi_dsub>
 800c450:	4632      	mov	r2, r6
 800c452:	463b      	mov	r3, r7
 800c454:	f7f3 fec6 	bl	80001e4 <__adddf3>
 800c458:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c45c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c460:	ed84 7b00 	vstr	d7, [r4]
 800c464:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c468:	e755      	b.n	800c316 <__kernel_rem_pio2+0x516>
 800c46a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c46e:	f7f3 feb9 	bl	80001e4 <__adddf3>
 800c472:	3d01      	subs	r5, #1
 800c474:	e759      	b.n	800c32a <__kernel_rem_pio2+0x52a>
 800c476:	9b01      	ldr	r3, [sp, #4]
 800c478:	9a01      	ldr	r2, [sp, #4]
 800c47a:	601d      	str	r5, [r3, #0]
 800c47c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c480:	605c      	str	r4, [r3, #4]
 800c482:	609f      	str	r7, [r3, #8]
 800c484:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c488:	60d3      	str	r3, [r2, #12]
 800c48a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c48e:	6110      	str	r0, [r2, #16]
 800c490:	6153      	str	r3, [r2, #20]
 800c492:	e728      	b.n	800c2e6 <__kernel_rem_pio2+0x4e6>
 800c494:	41700000 	.word	0x41700000
 800c498:	3e700000 	.word	0x3e700000
 800c49c:	00000000 	.word	0x00000000

0800c4a0 <__kernel_sin>:
 800c4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4a4:	ed2d 8b04 	vpush	{d8-d9}
 800c4a8:	eeb0 8a41 	vmov.f32	s16, s2
 800c4ac:	eef0 8a61 	vmov.f32	s17, s3
 800c4b0:	ec55 4b10 	vmov	r4, r5, d0
 800c4b4:	b083      	sub	sp, #12
 800c4b6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c4ba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c4be:	9001      	str	r0, [sp, #4]
 800c4c0:	da06      	bge.n	800c4d0 <__kernel_sin+0x30>
 800c4c2:	ee10 0a10 	vmov	r0, s0
 800c4c6:	4629      	mov	r1, r5
 800c4c8:	f7f4 faf2 	bl	8000ab0 <__aeabi_d2iz>
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	d051      	beq.n	800c574 <__kernel_sin+0xd4>
 800c4d0:	4622      	mov	r2, r4
 800c4d2:	462b      	mov	r3, r5
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	4629      	mov	r1, r5
 800c4d8:	f7f4 f83a 	bl	8000550 <__aeabi_dmul>
 800c4dc:	4682      	mov	sl, r0
 800c4de:	468b      	mov	fp, r1
 800c4e0:	4602      	mov	r2, r0
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	4629      	mov	r1, r5
 800c4e8:	f7f4 f832 	bl	8000550 <__aeabi_dmul>
 800c4ec:	a341      	add	r3, pc, #260	; (adr r3, 800c5f4 <__kernel_sin+0x154>)
 800c4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f2:	4680      	mov	r8, r0
 800c4f4:	4689      	mov	r9, r1
 800c4f6:	4650      	mov	r0, sl
 800c4f8:	4659      	mov	r1, fp
 800c4fa:	f7f4 f829 	bl	8000550 <__aeabi_dmul>
 800c4fe:	a33f      	add	r3, pc, #252	; (adr r3, 800c5fc <__kernel_sin+0x15c>)
 800c500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c504:	f7f3 fe6c 	bl	80001e0 <__aeabi_dsub>
 800c508:	4652      	mov	r2, sl
 800c50a:	465b      	mov	r3, fp
 800c50c:	f7f4 f820 	bl	8000550 <__aeabi_dmul>
 800c510:	a33c      	add	r3, pc, #240	; (adr r3, 800c604 <__kernel_sin+0x164>)
 800c512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c516:	f7f3 fe65 	bl	80001e4 <__adddf3>
 800c51a:	4652      	mov	r2, sl
 800c51c:	465b      	mov	r3, fp
 800c51e:	f7f4 f817 	bl	8000550 <__aeabi_dmul>
 800c522:	a33a      	add	r3, pc, #232	; (adr r3, 800c60c <__kernel_sin+0x16c>)
 800c524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c528:	f7f3 fe5a 	bl	80001e0 <__aeabi_dsub>
 800c52c:	4652      	mov	r2, sl
 800c52e:	465b      	mov	r3, fp
 800c530:	f7f4 f80e 	bl	8000550 <__aeabi_dmul>
 800c534:	a337      	add	r3, pc, #220	; (adr r3, 800c614 <__kernel_sin+0x174>)
 800c536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53a:	f7f3 fe53 	bl	80001e4 <__adddf3>
 800c53e:	9b01      	ldr	r3, [sp, #4]
 800c540:	4606      	mov	r6, r0
 800c542:	460f      	mov	r7, r1
 800c544:	b9eb      	cbnz	r3, 800c582 <__kernel_sin+0xe2>
 800c546:	4602      	mov	r2, r0
 800c548:	460b      	mov	r3, r1
 800c54a:	4650      	mov	r0, sl
 800c54c:	4659      	mov	r1, fp
 800c54e:	f7f3 ffff 	bl	8000550 <__aeabi_dmul>
 800c552:	a325      	add	r3, pc, #148	; (adr r3, 800c5e8 <__kernel_sin+0x148>)
 800c554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c558:	f7f3 fe42 	bl	80001e0 <__aeabi_dsub>
 800c55c:	4642      	mov	r2, r8
 800c55e:	464b      	mov	r3, r9
 800c560:	f7f3 fff6 	bl	8000550 <__aeabi_dmul>
 800c564:	4602      	mov	r2, r0
 800c566:	460b      	mov	r3, r1
 800c568:	4620      	mov	r0, r4
 800c56a:	4629      	mov	r1, r5
 800c56c:	f7f3 fe3a 	bl	80001e4 <__adddf3>
 800c570:	4604      	mov	r4, r0
 800c572:	460d      	mov	r5, r1
 800c574:	ec45 4b10 	vmov	d0, r4, r5
 800c578:	b003      	add	sp, #12
 800c57a:	ecbd 8b04 	vpop	{d8-d9}
 800c57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c582:	4b1b      	ldr	r3, [pc, #108]	; (800c5f0 <__kernel_sin+0x150>)
 800c584:	ec51 0b18 	vmov	r0, r1, d8
 800c588:	2200      	movs	r2, #0
 800c58a:	f7f3 ffe1 	bl	8000550 <__aeabi_dmul>
 800c58e:	4632      	mov	r2, r6
 800c590:	ec41 0b19 	vmov	d9, r0, r1
 800c594:	463b      	mov	r3, r7
 800c596:	4640      	mov	r0, r8
 800c598:	4649      	mov	r1, r9
 800c59a:	f7f3 ffd9 	bl	8000550 <__aeabi_dmul>
 800c59e:	4602      	mov	r2, r0
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	ec51 0b19 	vmov	r0, r1, d9
 800c5a6:	f7f3 fe1b 	bl	80001e0 <__aeabi_dsub>
 800c5aa:	4652      	mov	r2, sl
 800c5ac:	465b      	mov	r3, fp
 800c5ae:	f7f3 ffcf 	bl	8000550 <__aeabi_dmul>
 800c5b2:	ec53 2b18 	vmov	r2, r3, d8
 800c5b6:	f7f3 fe13 	bl	80001e0 <__aeabi_dsub>
 800c5ba:	a30b      	add	r3, pc, #44	; (adr r3, 800c5e8 <__kernel_sin+0x148>)
 800c5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c0:	4606      	mov	r6, r0
 800c5c2:	460f      	mov	r7, r1
 800c5c4:	4640      	mov	r0, r8
 800c5c6:	4649      	mov	r1, r9
 800c5c8:	f7f3 ffc2 	bl	8000550 <__aeabi_dmul>
 800c5cc:	4602      	mov	r2, r0
 800c5ce:	460b      	mov	r3, r1
 800c5d0:	4630      	mov	r0, r6
 800c5d2:	4639      	mov	r1, r7
 800c5d4:	f7f3 fe06 	bl	80001e4 <__adddf3>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	460b      	mov	r3, r1
 800c5dc:	4620      	mov	r0, r4
 800c5de:	4629      	mov	r1, r5
 800c5e0:	f7f3 fdfe 	bl	80001e0 <__aeabi_dsub>
 800c5e4:	e7c4      	b.n	800c570 <__kernel_sin+0xd0>
 800c5e6:	bf00      	nop
 800c5e8:	55555549 	.word	0x55555549
 800c5ec:	3fc55555 	.word	0x3fc55555
 800c5f0:	3fe00000 	.word	0x3fe00000
 800c5f4:	5acfd57c 	.word	0x5acfd57c
 800c5f8:	3de5d93a 	.word	0x3de5d93a
 800c5fc:	8a2b9ceb 	.word	0x8a2b9ceb
 800c600:	3e5ae5e6 	.word	0x3e5ae5e6
 800c604:	57b1fe7d 	.word	0x57b1fe7d
 800c608:	3ec71de3 	.word	0x3ec71de3
 800c60c:	19c161d5 	.word	0x19c161d5
 800c610:	3f2a01a0 	.word	0x3f2a01a0
 800c614:	1110f8a6 	.word	0x1110f8a6
 800c618:	3f811111 	.word	0x3f811111

0800c61c <with_errno>:
 800c61c:	b570      	push	{r4, r5, r6, lr}
 800c61e:	4604      	mov	r4, r0
 800c620:	460d      	mov	r5, r1
 800c622:	4616      	mov	r6, r2
 800c624:	f7fd fd72 	bl	800a10c <__errno>
 800c628:	4629      	mov	r1, r5
 800c62a:	6006      	str	r6, [r0, #0]
 800c62c:	4620      	mov	r0, r4
 800c62e:	bd70      	pop	{r4, r5, r6, pc}

0800c630 <xflow>:
 800c630:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c632:	4614      	mov	r4, r2
 800c634:	461d      	mov	r5, r3
 800c636:	b108      	cbz	r0, 800c63c <xflow+0xc>
 800c638:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c63c:	e9cd 2300 	strd	r2, r3, [sp]
 800c640:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c644:	4620      	mov	r0, r4
 800c646:	4629      	mov	r1, r5
 800c648:	f7f3 ff82 	bl	8000550 <__aeabi_dmul>
 800c64c:	2222      	movs	r2, #34	; 0x22
 800c64e:	b003      	add	sp, #12
 800c650:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c654:	f7ff bfe2 	b.w	800c61c <with_errno>

0800c658 <__math_uflow>:
 800c658:	b508      	push	{r3, lr}
 800c65a:	2200      	movs	r2, #0
 800c65c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c660:	f7ff ffe6 	bl	800c630 <xflow>
 800c664:	ec41 0b10 	vmov	d0, r0, r1
 800c668:	bd08      	pop	{r3, pc}

0800c66a <__math_oflow>:
 800c66a:	b508      	push	{r3, lr}
 800c66c:	2200      	movs	r2, #0
 800c66e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c672:	f7ff ffdd 	bl	800c630 <xflow>
 800c676:	ec41 0b10 	vmov	d0, r0, r1
 800c67a:	bd08      	pop	{r3, pc}

0800c67c <fabs>:
 800c67c:	ec51 0b10 	vmov	r0, r1, d0
 800c680:	ee10 2a10 	vmov	r2, s0
 800c684:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c688:	ec43 2b10 	vmov	d0, r2, r3
 800c68c:	4770      	bx	lr

0800c68e <finite>:
 800c68e:	b082      	sub	sp, #8
 800c690:	ed8d 0b00 	vstr	d0, [sp]
 800c694:	9801      	ldr	r0, [sp, #4]
 800c696:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c69a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c69e:	0fc0      	lsrs	r0, r0, #31
 800c6a0:	b002      	add	sp, #8
 800c6a2:	4770      	bx	lr
 800c6a4:	0000      	movs	r0, r0
	...

0800c6a8 <nan>:
 800c6a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c6b0 <nan+0x8>
 800c6ac:	4770      	bx	lr
 800c6ae:	bf00      	nop
 800c6b0:	00000000 	.word	0x00000000
 800c6b4:	7ff80000 	.word	0x7ff80000

0800c6b8 <scalbn>:
 800c6b8:	b570      	push	{r4, r5, r6, lr}
 800c6ba:	ec55 4b10 	vmov	r4, r5, d0
 800c6be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c6c2:	4606      	mov	r6, r0
 800c6c4:	462b      	mov	r3, r5
 800c6c6:	b99a      	cbnz	r2, 800c6f0 <scalbn+0x38>
 800c6c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c6cc:	4323      	orrs	r3, r4
 800c6ce:	d036      	beq.n	800c73e <scalbn+0x86>
 800c6d0:	4b39      	ldr	r3, [pc, #228]	; (800c7b8 <scalbn+0x100>)
 800c6d2:	4629      	mov	r1, r5
 800c6d4:	ee10 0a10 	vmov	r0, s0
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f7f3 ff39 	bl	8000550 <__aeabi_dmul>
 800c6de:	4b37      	ldr	r3, [pc, #220]	; (800c7bc <scalbn+0x104>)
 800c6e0:	429e      	cmp	r6, r3
 800c6e2:	4604      	mov	r4, r0
 800c6e4:	460d      	mov	r5, r1
 800c6e6:	da10      	bge.n	800c70a <scalbn+0x52>
 800c6e8:	a32b      	add	r3, pc, #172	; (adr r3, 800c798 <scalbn+0xe0>)
 800c6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ee:	e03a      	b.n	800c766 <scalbn+0xae>
 800c6f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c6f4:	428a      	cmp	r2, r1
 800c6f6:	d10c      	bne.n	800c712 <scalbn+0x5a>
 800c6f8:	ee10 2a10 	vmov	r2, s0
 800c6fc:	4620      	mov	r0, r4
 800c6fe:	4629      	mov	r1, r5
 800c700:	f7f3 fd70 	bl	80001e4 <__adddf3>
 800c704:	4604      	mov	r4, r0
 800c706:	460d      	mov	r5, r1
 800c708:	e019      	b.n	800c73e <scalbn+0x86>
 800c70a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c70e:	460b      	mov	r3, r1
 800c710:	3a36      	subs	r2, #54	; 0x36
 800c712:	4432      	add	r2, r6
 800c714:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c718:	428a      	cmp	r2, r1
 800c71a:	dd08      	ble.n	800c72e <scalbn+0x76>
 800c71c:	2d00      	cmp	r5, #0
 800c71e:	a120      	add	r1, pc, #128	; (adr r1, 800c7a0 <scalbn+0xe8>)
 800c720:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c724:	da1c      	bge.n	800c760 <scalbn+0xa8>
 800c726:	a120      	add	r1, pc, #128	; (adr r1, 800c7a8 <scalbn+0xf0>)
 800c728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c72c:	e018      	b.n	800c760 <scalbn+0xa8>
 800c72e:	2a00      	cmp	r2, #0
 800c730:	dd08      	ble.n	800c744 <scalbn+0x8c>
 800c732:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c736:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c73a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c73e:	ec45 4b10 	vmov	d0, r4, r5
 800c742:	bd70      	pop	{r4, r5, r6, pc}
 800c744:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c748:	da19      	bge.n	800c77e <scalbn+0xc6>
 800c74a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c74e:	429e      	cmp	r6, r3
 800c750:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c754:	dd0a      	ble.n	800c76c <scalbn+0xb4>
 800c756:	a112      	add	r1, pc, #72	; (adr r1, 800c7a0 <scalbn+0xe8>)
 800c758:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d1e2      	bne.n	800c726 <scalbn+0x6e>
 800c760:	a30f      	add	r3, pc, #60	; (adr r3, 800c7a0 <scalbn+0xe8>)
 800c762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c766:	f7f3 fef3 	bl	8000550 <__aeabi_dmul>
 800c76a:	e7cb      	b.n	800c704 <scalbn+0x4c>
 800c76c:	a10a      	add	r1, pc, #40	; (adr r1, 800c798 <scalbn+0xe0>)
 800c76e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d0b8      	beq.n	800c6e8 <scalbn+0x30>
 800c776:	a10e      	add	r1, pc, #56	; (adr r1, 800c7b0 <scalbn+0xf8>)
 800c778:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c77c:	e7b4      	b.n	800c6e8 <scalbn+0x30>
 800c77e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c782:	3236      	adds	r2, #54	; 0x36
 800c784:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c788:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c78c:	4620      	mov	r0, r4
 800c78e:	4b0c      	ldr	r3, [pc, #48]	; (800c7c0 <scalbn+0x108>)
 800c790:	2200      	movs	r2, #0
 800c792:	e7e8      	b.n	800c766 <scalbn+0xae>
 800c794:	f3af 8000 	nop.w
 800c798:	c2f8f359 	.word	0xc2f8f359
 800c79c:	01a56e1f 	.word	0x01a56e1f
 800c7a0:	8800759c 	.word	0x8800759c
 800c7a4:	7e37e43c 	.word	0x7e37e43c
 800c7a8:	8800759c 	.word	0x8800759c
 800c7ac:	fe37e43c 	.word	0xfe37e43c
 800c7b0:	c2f8f359 	.word	0xc2f8f359
 800c7b4:	81a56e1f 	.word	0x81a56e1f
 800c7b8:	43500000 	.word	0x43500000
 800c7bc:	ffff3cb0 	.word	0xffff3cb0
 800c7c0:	3c900000 	.word	0x3c900000

0800c7c4 <_init>:
 800c7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7c6:	bf00      	nop
 800c7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ca:	bc08      	pop	{r3}
 800c7cc:	469e      	mov	lr, r3
 800c7ce:	4770      	bx	lr

0800c7d0 <_fini>:
 800c7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d2:	bf00      	nop
 800c7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7d6:	bc08      	pop	{r3}
 800c7d8:	469e      	mov	lr, r3
 800c7da:	4770      	bx	lr
