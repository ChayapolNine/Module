
LAB_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c64c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  0800c7e8  0800c7e8  0001c7e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca18  0800ca18  000203d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca18  0800ca18  0001ca18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca20  0800ca20  000203d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca20  0800ca20  0001ca20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca24  0800ca24  0001ca24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003d0  20000000  0800ca28  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f88  200003d0  0800cdf8  000203d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001358  0800cdf8  00021358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d7b  00000000  00000000  00020400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a24  00000000  00000000  0003617b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  00038ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001148  00000000  00000000  00039de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cbb  00000000  00000000  0003af30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ea9  00000000  00000000  00053beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e933  00000000  00000000  0006aa94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001093c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005830  00000000  00000000  00109418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200003d0 	.word	0x200003d0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c7cc 	.word	0x0800c7cc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200003d4 	.word	0x200003d4
 80001d4:	0800c7cc 	.word	0x0800c7cc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b992 	b.w	8000edc <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f824 	bl	8000c0c <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__aeabi_d2ulz>:
 8000bd0:	b5d0      	push	{r4, r6, r7, lr}
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <__aeabi_d2ulz+0x34>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4606      	mov	r6, r0
 8000bd8:	460f      	mov	r7, r1
 8000bda:	f7ff fcb9 	bl	8000550 <__aeabi_dmul>
 8000bde:	f000 f97f 	bl	8000ee0 <__aeabi_d2uiz>
 8000be2:	4604      	mov	r4, r0
 8000be4:	f7ff fc3a 	bl	800045c <__aeabi_ui2d>
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <__aeabi_d2ulz+0x38>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	f7ff fcb0 	bl	8000550 <__aeabi_dmul>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	4630      	mov	r0, r6
 8000bf6:	4639      	mov	r1, r7
 8000bf8:	f7ff faf2 	bl	80001e0 <__aeabi_dsub>
 8000bfc:	f000 f970 	bl	8000ee0 <__aeabi_d2uiz>
 8000c00:	4621      	mov	r1, r4
 8000c02:	bdd0      	pop	{r4, r6, r7, pc}
 8000c04:	3df00000 	.word	0x3df00000
 8000c08:	41f00000 	.word	0x41f00000

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9d08      	ldr	r5, [sp, #32]
 8000c12:	4604      	mov	r4, r0
 8000c14:	468e      	mov	lr, r1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d14d      	bne.n	8000cb6 <__udivmoddi4+0xaa>
 8000c1a:	428a      	cmp	r2, r1
 8000c1c:	4694      	mov	ip, r2
 8000c1e:	d969      	bls.n	8000cf4 <__udivmoddi4+0xe8>
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	b152      	cbz	r2, 8000c3c <__udivmoddi4+0x30>
 8000c26:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2a:	f1c2 0120 	rsb	r1, r2, #32
 8000c2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c32:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c36:	ea41 0e03 	orr.w	lr, r1, r3
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c40:	0c21      	lsrs	r1, r4, #16
 8000c42:	fbbe f6f8 	udiv	r6, lr, r8
 8000c46:	fa1f f78c 	uxth.w	r7, ip
 8000c4a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c52:	fb06 f107 	mul.w	r1, r6, r7
 8000c56:	4299      	cmp	r1, r3
 8000c58:	d90a      	bls.n	8000c70 <__udivmoddi4+0x64>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c62:	f080 811f 	bcs.w	8000ea4 <__udivmoddi4+0x298>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 811c 	bls.w	8000ea4 <__udivmoddi4+0x298>
 8000c6c:	3e02      	subs	r6, #2
 8000c6e:	4463      	add	r3, ip
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c78:	fb08 3310 	mls	r3, r8, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 f707 	mul.w	r7, r0, r7
 8000c84:	42a7      	cmp	r7, r4
 8000c86:	d90a      	bls.n	8000c9e <__udivmoddi4+0x92>
 8000c88:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c90:	f080 810a 	bcs.w	8000ea8 <__udivmoddi4+0x29c>
 8000c94:	42a7      	cmp	r7, r4
 8000c96:	f240 8107 	bls.w	8000ea8 <__udivmoddi4+0x29c>
 8000c9a:	4464      	add	r4, ip
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca2:	1be4      	subs	r4, r4, r7
 8000ca4:	2600      	movs	r6, #0
 8000ca6:	b11d      	cbz	r5, 8000cb0 <__udivmoddi4+0xa4>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xc2>
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	f000 80ef 	beq.w	8000e9e <__udivmoddi4+0x292>
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc6:	4630      	mov	r0, r6
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f683 	clz	r6, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d14a      	bne.n	8000d6c <__udivmoddi4+0x160>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd4>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80f9 	bhi.w	8000ed2 <__udivmoddi4+0x2c6>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	469e      	mov	lr, r3
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa4>
 8000cee:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa4>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xec>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 8092 	bne.w	8000e26 <__udivmoddi4+0x21a>
 8000d02:	eba1 010c 	sub.w	r1, r1, ip
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f fe8c 	uxth.w	lr, ip
 8000d0e:	2601      	movs	r6, #1
 8000d10:	0c20      	lsrs	r0, r4, #16
 8000d12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d16:	fb07 1113 	mls	r1, r7, r3, r1
 8000d1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1e:	fb0e f003 	mul.w	r0, lr, r3
 8000d22:	4288      	cmp	r0, r1
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x12c>
 8000d26:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x12a>
 8000d30:	4288      	cmp	r0, r1
 8000d32:	f200 80cb 	bhi.w	8000ecc <__udivmoddi4+0x2c0>
 8000d36:	4643      	mov	r3, r8
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d40:	fb07 1110 	mls	r1, r7, r0, r1
 8000d44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d48:	fb0e fe00 	mul.w	lr, lr, r0
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x156>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d58:	d202      	bcs.n	8000d60 <__udivmoddi4+0x154>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f200 80bb 	bhi.w	8000ed6 <__udivmoddi4+0x2ca>
 8000d60:	4608      	mov	r0, r1
 8000d62:	eba4 040e 	sub.w	r4, r4, lr
 8000d66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d6a:	e79c      	b.n	8000ca6 <__udivmoddi4+0x9a>
 8000d6c:	f1c6 0720 	rsb	r7, r6, #32
 8000d70:	40b3      	lsls	r3, r6
 8000d72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d82:	431c      	orrs	r4, r3
 8000d84:	40f9      	lsrs	r1, r7
 8000d86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d92:	0c20      	lsrs	r0, r4, #16
 8000d94:	fa1f fe8c 	uxth.w	lr, ip
 8000d98:	fb09 1118 	mls	r1, r9, r8, r1
 8000d9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000da0:	fb08 f00e 	mul.w	r0, r8, lr
 8000da4:	4288      	cmp	r0, r1
 8000da6:	fa02 f206 	lsl.w	r2, r2, r6
 8000daa:	d90b      	bls.n	8000dc4 <__udivmoddi4+0x1b8>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db4:	f080 8088 	bcs.w	8000ec8 <__udivmoddi4+0x2bc>
 8000db8:	4288      	cmp	r0, r1
 8000dba:	f240 8085 	bls.w	8000ec8 <__udivmoddi4+0x2bc>
 8000dbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc2:	4461      	add	r1, ip
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dcc:	fb09 1110 	mls	r1, r9, r0, r1
 8000dd0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	458e      	cmp	lr, r1
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x1e2>
 8000ddc:	eb1c 0101 	adds.w	r1, ip, r1
 8000de0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de4:	d26c      	bcs.n	8000ec0 <__udivmoddi4+0x2b4>
 8000de6:	458e      	cmp	lr, r1
 8000de8:	d96a      	bls.n	8000ec0 <__udivmoddi4+0x2b4>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4461      	add	r1, ip
 8000dee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000df2:	fba0 9402 	umull	r9, r4, r0, r2
 8000df6:	eba1 010e 	sub.w	r1, r1, lr
 8000dfa:	42a1      	cmp	r1, r4
 8000dfc:	46c8      	mov	r8, r9
 8000dfe:	46a6      	mov	lr, r4
 8000e00:	d356      	bcc.n	8000eb0 <__udivmoddi4+0x2a4>
 8000e02:	d053      	beq.n	8000eac <__udivmoddi4+0x2a0>
 8000e04:	b15d      	cbz	r5, 8000e1e <__udivmoddi4+0x212>
 8000e06:	ebb3 0208 	subs.w	r2, r3, r8
 8000e0a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e12:	fa22 f306 	lsr.w	r3, r2, r6
 8000e16:	40f1      	lsrs	r1, r6
 8000e18:	431f      	orrs	r7, r3
 8000e1a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1e:	2600      	movs	r6, #0
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	f1c2 0320 	rsb	r3, r2, #32
 8000e2a:	40d8      	lsrs	r0, r3
 8000e2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e30:	fa21 f303 	lsr.w	r3, r1, r3
 8000e34:	4091      	lsls	r1, r2
 8000e36:	4301      	orrs	r1, r0
 8000e38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3c:	fa1f fe8c 	uxth.w	lr, ip
 8000e40:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e44:	fb07 3610 	mls	r6, r7, r0, r3
 8000e48:	0c0b      	lsrs	r3, r1, #16
 8000e4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e52:	429e      	cmp	r6, r3
 8000e54:	fa04 f402 	lsl.w	r4, r4, r2
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x260>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e62:	d22f      	bcs.n	8000ec4 <__udivmoddi4+0x2b8>
 8000e64:	429e      	cmp	r6, r3
 8000e66:	d92d      	bls.n	8000ec4 <__udivmoddi4+0x2b8>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4463      	add	r3, ip
 8000e6c:	1b9b      	subs	r3, r3, r6
 8000e6e:	b289      	uxth	r1, r1
 8000e70:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e74:	fb07 3316 	mls	r3, r7, r6, r3
 8000e78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e80:	428b      	cmp	r3, r1
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x28a>
 8000e84:	eb1c 0101 	adds.w	r1, ip, r1
 8000e88:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e8c:	d216      	bcs.n	8000ebc <__udivmoddi4+0x2b0>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d914      	bls.n	8000ebc <__udivmoddi4+0x2b0>
 8000e92:	3e02      	subs	r6, #2
 8000e94:	4461      	add	r1, ip
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e9c:	e738      	b.n	8000d10 <__udivmoddi4+0x104>
 8000e9e:	462e      	mov	r6, r5
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	e705      	b.n	8000cb0 <__udivmoddi4+0xa4>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	e6e3      	b.n	8000c70 <__udivmoddi4+0x64>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6f8      	b.n	8000c9e <__udivmoddi4+0x92>
 8000eac:	454b      	cmp	r3, r9
 8000eae:	d2a9      	bcs.n	8000e04 <__udivmoddi4+0x1f8>
 8000eb0:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb8:	3801      	subs	r0, #1
 8000eba:	e7a3      	b.n	8000e04 <__udivmoddi4+0x1f8>
 8000ebc:	4646      	mov	r6, r8
 8000ebe:	e7ea      	b.n	8000e96 <__udivmoddi4+0x28a>
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	e794      	b.n	8000dee <__udivmoddi4+0x1e2>
 8000ec4:	4640      	mov	r0, r8
 8000ec6:	e7d1      	b.n	8000e6c <__udivmoddi4+0x260>
 8000ec8:	46d0      	mov	r8, sl
 8000eca:	e77b      	b.n	8000dc4 <__udivmoddi4+0x1b8>
 8000ecc:	3b02      	subs	r3, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	e732      	b.n	8000d38 <__udivmoddi4+0x12c>
 8000ed2:	4630      	mov	r0, r6
 8000ed4:	e709      	b.n	8000cea <__udivmoddi4+0xde>
 8000ed6:	4464      	add	r4, ip
 8000ed8:	3802      	subs	r0, #2
 8000eda:	e742      	b.n	8000d62 <__udivmoddi4+0x156>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <__aeabi_d2uiz>:
 8000ee0:	004a      	lsls	r2, r1, #1
 8000ee2:	d211      	bcs.n	8000f08 <__aeabi_d2uiz+0x28>
 8000ee4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ee8:	d211      	bcs.n	8000f0e <__aeabi_d2uiz+0x2e>
 8000eea:	d50d      	bpl.n	8000f08 <__aeabi_d2uiz+0x28>
 8000eec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ef0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ef4:	d40e      	bmi.n	8000f14 <__aeabi_d2uiz+0x34>
 8000ef6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000efa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000efe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f02:	fa23 f002 	lsr.w	r0, r3, r2
 8000f06:	4770      	bx	lr
 8000f08:	f04f 0000 	mov.w	r0, #0
 8000f0c:	4770      	bx	lr
 8000f0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f12:	d102      	bne.n	8000f1a <__aeabi_d2uiz+0x3a>
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	4770      	bx	lr
 8000f1a:	f04f 0000 	mov.w	r0, #0
 8000f1e:	4770      	bx	lr

08000f20 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <modbus_1t5_Timeout+0x1c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	751a      	strb	r2, [r3, #20]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	200003ec 	.word	0x200003ec

08000f40 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <modbus_3t5_Timeout+0x1c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	755a      	strb	r2, [r3, #21]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	200003ec 	.word	0x200003ec

08000f60 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000f72:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8000f7a:	1c59      	adds	r1, r3, #1
 8000f7c:	b289      	uxth	r1, r1
 8000f7e:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8000f82:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f86:	d210      	bcs.n	8000faa <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68d8      	ldr	r0, [r3, #12]
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000f9a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000f9e:	4413      	add	r3, r2
 8000fa0:	3302      	adds	r3, #2
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f007 ff15 	bl	8008dd4 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200003ec 	.word	0x200003ec

08000fc4 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000fce:	4a24      	ldr	r2, [pc, #144]	; (8001060 <Modbus_init+0x9c>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <Modbus_init+0x9c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000fdc:	4b20      	ldr	r3, [pc, #128]	; (8001060 <Modbus_init+0x9c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	691b      	ldr	r3, [r3, #16]
 8000fe2:	4a20      	ldr	r2, [pc, #128]	; (8001064 <Modbus_init+0xa0>)
 8000fe4:	2114      	movs	r1, #20
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f007 f8f8 	bl	80081dc <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000fec:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <Modbus_init+0x9c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	4a1d      	ldr	r2, [pc, #116]	; (8001068 <Modbus_init+0xa4>)
 8000ff4:	210e      	movs	r1, #14
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f007 f8f0 	bl	80081dc <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <Modbus_init+0x9c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	4a1a      	ldr	r2, [pc, #104]	; (800106c <Modbus_init+0xa8>)
 8001004:	2103      	movs	r1, #3
 8001006:	4618      	mov	r0, r3
 8001008:	f007 fe3c 	bl	8008c84 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <Modbus_init+0x9c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	68d8      	ldr	r0, [r3, #12]
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <Modbus_init+0x9c>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <Modbus_init+0x9c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800101e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001022:	4413      	add	r3, r2
 8001024:	3302      	adds	r3, #2
 8001026:	2201      	movs	r2, #1
 8001028:	4619      	mov	r1, r3
 800102a:	f007 fed3 	bl	8008dd4 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <Modbus_init+0x9c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b01      	cmp	r3, #1
 800103c:	d10c      	bne.n	8001058 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <Modbus_init+0x9c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	691b      	ldr	r3, [r3, #16]
 8001044:	4618      	mov	r0, r3
 8001046:	f006 f973 	bl	8007330 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <Modbus_init+0x9c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f006 fbb2 	bl	80077bc <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200003ec 	.word	0x200003ec
 8001064:	08000f21 	.word	0x08000f21
 8001068:	08000f41 	.word	0x08000f41
 800106c:	08000f61 	.word	0x08000f61

08001070 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 800107c:	23ff      	movs	r3, #255	; 0xff
 800107e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001080:	23ff      	movs	r3, #255	; 0xff
 8001082:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001084:	e013      	b.n	80010ae <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	607a      	str	r2, [r7, #4]
 800108c:	781a      	ldrb	r2, [r3, #0]
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	4053      	eors	r3, r2
 8001092:	b2db      	uxtb	r3, r3
 8001094:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <CRC16+0x64>)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4413      	add	r3, r2
 800109c:	781a      	ldrb	r2, [r3, #0]
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	4053      	eors	r3, r2
 80010a2:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80010a4:	4a0c      	ldr	r2, [pc, #48]	; (80010d8 <CRC16+0x68>)
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	4413      	add	r3, r2
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80010ae:	883b      	ldrh	r3, [r7, #0]
 80010b0:	1e5a      	subs	r2, r3, #1
 80010b2:	803a      	strh	r2, [r7, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1e6      	bne.n	8001086 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21a      	sxth	r2, r3
 80010be:	7bbb      	ldrb	r3, [r7, #14]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	b29b      	uxth	r3, r3
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	20000100 	.word	0x20000100
 80010d8:	20000000 	.word	0x20000000

080010dc <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80010e2:	4b81      	ldr	r3, [pc, #516]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	7e1b      	ldrb	r3, [r3, #24]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	2b03      	cmp	r3, #3
 80010ec:	d80a      	bhi.n	8001104 <Modbus_Protocal_Worker+0x28>
 80010ee:	a201      	add	r2, pc, #4	; (adr r2, 80010f4 <Modbus_Protocal_Worker+0x18>)
 80010f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f4:	0800110f 	.word	0x0800110f
 80010f8:	080012af 	.word	0x080012af
 80010fc:	0800119b 	.word	0x0800119b
 8001100:	080011c1 	.word	0x080011c1
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001104:	4b78      	ldr	r3, [pc, #480]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2201      	movs	r2, #1
 800110a:	761a      	strb	r2, [r3, #24]
		break;
 800110c:	e0e8      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800110e:	4b76      	ldr	r3, [pc, #472]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 800111a:	f000 f9dd 	bl	80014d8 <Modbus_Emission>
 800111e:	e01c      	b.n	800115a <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001120:	4b71      	ldr	r3, [pc, #452]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	7d9b      	ldrb	r3, [r3, #22]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d017      	beq.n	800115a <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800112a:	4b6f      	ldr	r3, [pc, #444]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001132:	4b6d      	ldr	r3, [pc, #436]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2200      	movs	r2, #0
 8001138:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 800113a:	4b6b      	ldr	r3, [pc, #428]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b68      	ldr	r3, [pc, #416]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f042 0201 	orr.w	r2, r2, #1
 8001150:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001152:	4b65      	ldr	r3, [pc, #404]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2203      	movs	r2, #3
 8001158:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800115a:	4b63      	ldr	r3, [pc, #396]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b20      	cmp	r3, #32
 8001168:	f040 80b3 	bne.w	80012d2 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800116c:	4b5e      	ldr	r3, [pc, #376]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2200      	movs	r2, #0
 8001172:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001176:	4b5c      	ldr	r3, [pc, #368]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68d8      	ldr	r0, [r3, #12]
 800117c:	4b5a      	ldr	r3, [pc, #360]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b59      	ldr	r3, [pc, #356]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001188:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800118c:	4413      	add	r3, r2
 800118e:	3302      	adds	r3, #2
 8001190:	2201      	movs	r2, #1
 8001192:	4619      	mov	r1, r3
 8001194:	f007 fe1e 	bl	8008dd4 <HAL_UART_Receive_IT>
		}
		break;
 8001198:	e09b      	b.n	80012d2 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800119a:	4b53      	ldr	r3, [pc, #332]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	7d1b      	ldrb	r3, [r3, #20]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 8098 	beq.w	80012d6 <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 80011a6:	4b50      	ldr	r3, [pc, #320]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2200      	movs	r2, #0
 80011ac:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80011ae:	4b4e      	ldr	r3, [pc, #312]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	22fe      	movs	r2, #254	; 0xfe
 80011b4:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80011b6:	4b4c      	ldr	r3, [pc, #304]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2204      	movs	r2, #4
 80011bc:	761a      	strb	r2, [r3, #24]
		}
		break;
 80011be:	e08a      	b.n	80012d6 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80011c0:	4b49      	ldr	r3, [pc, #292]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	7d9b      	ldrb	r3, [r3, #22]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d009      	beq.n	80011de <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 80011ca:	4b47      	ldr	r3, [pc, #284]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d103      	bne.n	80011de <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80011d6:	4b44      	ldr	r3, [pc, #272]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	22ff      	movs	r2, #255	; 0xff
 80011dc:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80011de:	4b42      	ldr	r3, [pc, #264]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80011e6:	f113 0f02 	cmn.w	r3, #2
 80011ea:	d150      	bne.n	800128e <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80011ec:	4b3e      	ldr	r3, [pc, #248]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2200      	movs	r2, #0
 80011f2:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80011f4:	4b3c      	ldr	r3, [pc, #240]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f203 2272 	addw	r2, r3, #626	; 0x272
 80011fc:	4b3a      	ldr	r3, [pc, #232]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001204:	3b02      	subs	r3, #2
 8001206:	4619      	mov	r1, r3
 8001208:	4610      	mov	r0, r2
 800120a:	f7ff ff31 	bl	8001070 <CRC16>
 800120e:	4603      	mov	r3, r0
 8001210:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001212:	793a      	ldrb	r2, [r7, #4]
 8001214:	4b34      	ldr	r3, [pc, #208]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001216:	6819      	ldr	r1, [r3, #0]
 8001218:	4b33      	ldr	r3, [pc, #204]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001220:	3b02      	subs	r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001228:	429a      	cmp	r2, r3
 800122a:	d10c      	bne.n	8001246 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 800122c:	797a      	ldrb	r2, [r7, #5]
 800122e:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001230:	6819      	ldr	r1, [r3, #0]
 8001232:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800123a:	3b01      	subs	r3, #1
 800123c:	440b      	add	r3, r1
 800123e:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001242:	429a      	cmp	r2, r3
 8001244:	d004      	beq.n	8001250 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001246:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	22ff      	movs	r2, #255	; 0xff
 800124c:	75da      	strb	r2, [r3, #23]
				break;
 800124e:	e047      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001250:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001258:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	d113      	bne.n	800128a <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001262:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800126a:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 8001272:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800127c:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800127e:	461a      	mov	r2, r3
 8001280:	f008 ff82 	bl	800a188 <memcpy>

			//execute command
			Modbus_frame_response();
 8001284:	f000 f910 	bl	80014a8 <Modbus_frame_response>
 8001288:	e001      	b.n	800128e <Modbus_Protocal_Worker+0x1b2>
				break;
 800128a:	bf00      	nop
					}
		break;


	}
}
 800128c:	e028      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	7d5b      	ldrb	r3, [r3, #21]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d020      	beq.n	80012da <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2201      	movs	r2, #1
 800129e:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f007 fe42 	bl	8008f30 <HAL_UART_AbortReceive>
		break;
 80012ac:	e015      	b.n	80012da <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b20      	cmp	r3, #32
 80012bc:	d10f      	bne.n	80012de <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2201      	movs	r2, #1
 80012ce:	761a      	strb	r2, [r3, #24]
		break;
 80012d0:	e005      	b.n	80012de <Modbus_Protocal_Worker+0x202>
		break;
 80012d2:	bf00      	nop
 80012d4:	e004      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
		break;
 80012d6:	bf00      	nop
 80012d8:	e002      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
		break;
 80012da:	bf00      	nop
 80012dc:	e000      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
		break;
 80012de:	bf00      	nop
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200003ec 	.word	0x200003ec

080012ec <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <modbusWrite1Register+0x80>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	7e9b      	ldrb	r3, [r3, #26]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	4b1b      	ldr	r3, [pc, #108]	; (800136c <modbusWrite1Register+0x80>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	7edb      	ldrb	r3, [r3, #27]
 8001304:	b29b      	uxth	r3, r3
 8001306:	4413      	add	r3, r2
 8001308:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800130a:	88fa      	ldrh	r2, [r7, #6]
 800130c:	4b17      	ldr	r3, [pc, #92]	; (800136c <modbusWrite1Register+0x80>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	429a      	cmp	r2, r3
 8001314:	d903      	bls.n	800131e <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001316:	2002      	movs	r0, #2
 8001318:	f000 f8a4 	bl	8001464 <ModbusErrorReply>
			 return;
 800131c:	e023      	b.n	8001366 <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <modbusWrite1Register+0x80>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <modbusWrite1Register+0x80>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6859      	ldr	r1, [r3, #4]
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	440b      	add	r3, r1
 800132e:	7f12      	ldrb	r2, [r2, #28]
 8001330:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <modbusWrite1Register+0x80>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <modbusWrite1Register+0x80>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6859      	ldr	r1, [r3, #4]
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	440b      	add	r3, r1
 8001342:	7f52      	ldrb	r2, [r2, #29]
 8001344:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <modbusWrite1Register+0x80>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <modbusWrite1Register+0x80>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8001354:	2208      	movs	r2, #8
 8001356:	4619      	mov	r1, r3
 8001358:	f008 ff16 	bl	800a188 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <modbusWrite1Register+0x80>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2205      	movs	r2, #5
 8001362:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200003ec 	.word	0x200003ec

08001370 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001376:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <modbusRead1Register+0xf0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	7f1b      	ldrb	r3, [r3, #28]
 800137c:	b29b      	uxth	r3, r3
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	b29a      	uxth	r2, r3
 8001382:	4b37      	ldr	r3, [pc, #220]	; (8001460 <modbusRead1Register+0xf0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	7f5b      	ldrb	r3, [r3, #29]
 8001388:	b29b      	uxth	r3, r3
 800138a:	4413      	add	r3, r2
 800138c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800138e:	4b34      	ldr	r3, [pc, #208]	; (8001460 <modbusRead1Register+0xf0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	7e9b      	ldrb	r3, [r3, #26]
 8001394:	b29b      	uxth	r3, r3
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	b29a      	uxth	r2, r3
 800139a:	4b31      	ldr	r3, [pc, #196]	; (8001460 <modbusRead1Register+0xf0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	7edb      	ldrb	r3, [r3, #27]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	4413      	add	r3, r2
 80013a4:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d002      	beq.n	80013b2 <modbusRead1Register+0x42>
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	2b7d      	cmp	r3, #125	; 0x7d
 80013b0:	d903      	bls.n	80013ba <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80013b2:	2003      	movs	r0, #3
 80013b4:	f000 f856 	bl	8001464 <ModbusErrorReply>
		 return;
 80013b8:	e04e      	b.n	8001458 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80013ba:	88ba      	ldrh	r2, [r7, #4]
 80013bc:	4b28      	ldr	r3, [pc, #160]	; (8001460 <modbusRead1Register+0xf0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d808      	bhi.n	80013d8 <modbusRead1Register+0x68>
 80013c6:	88ba      	ldrh	r2, [r7, #4]
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	4413      	add	r3, r2
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b24      	ldr	r3, [pc, #144]	; (8001460 <modbusRead1Register+0xf0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d903      	bls.n	80013e0 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80013d8:	2002      	movs	r0, #2
 80013da:	f000 f843 	bl	8001464 <ModbusErrorReply>
		 return;
 80013de:	e03b      	b.n	8001458 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80013e0:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <modbusRead1Register+0xf0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2203      	movs	r2, #3
 80013e6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <modbusRead1Register+0xf0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	0052      	lsls	r2, r2, #1
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80013fa:	2400      	movs	r4, #0
 80013fc:	e020      	b.n	8001440 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <modbusRead1Register+0xf0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	88bb      	ldrh	r3, [r7, #4]
 8001406:	4423      	add	r3, r4
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	18d1      	adds	r1, r2, r3
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <modbusRead1Register+0xf0>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	1c63      	adds	r3, r4, #1
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	7849      	ldrb	r1, [r1, #1]
 8001416:	4413      	add	r3, r2
 8001418:	460a      	mov	r2, r1
 800141a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <modbusRead1Register+0xf0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	88bb      	ldrh	r3, [r7, #4]
 8001426:	4423      	add	r3, r4
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	18d1      	adds	r1, r2, r3
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <modbusRead1Register+0xf0>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	0063      	lsls	r3, r4, #1
 8001432:	3303      	adds	r3, #3
 8001434:	7809      	ldrb	r1, [r1, #0]
 8001436:	4413      	add	r3, r2
 8001438:	460a      	mov	r2, r1
 800143a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 800143e:	3401      	adds	r4, #1
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	429c      	cmp	r4, r3
 8001444:	dbdb      	blt.n	80013fe <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	3301      	adds	r3, #1
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <modbusRead1Register+0xf0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	0052      	lsls	r2, r2, #1
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	bd90      	pop	{r4, r7, pc}
 800145e:	bf00      	nop
 8001460:	200003ec 	.word	0x200003ec

08001464 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <ModbusErrorReply+0x40>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	7e5a      	ldrb	r2, [r3, #25]
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <ModbusErrorReply+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <ModbusErrorReply+0x40>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	79fa      	ldrb	r2, [r7, #7]
 8001488:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <ModbusErrorReply+0x40>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2202      	movs	r2, #2
 8001492:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	200003ec 	.word	0x200003ec

080014a8 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <Modbus_frame_response+0x2c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	7e5b      	ldrb	r3, [r3, #25]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d004      	beq.n	80014c0 <Modbus_frame_response+0x18>
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d105      	bne.n	80014c6 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80014ba:	f7ff ff17 	bl	80012ec <modbusWrite1Register>
		break;
 80014be:	e006      	b.n	80014ce <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80014c0:	f7ff ff56 	bl	8001370 <modbusRead1Register>
		break;
 80014c4:	e003      	b.n	80014ce <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80014c6:	2001      	movs	r0, #1
 80014c8:	f7ff ffcc 	bl	8001464 <ModbusErrorReply>
		break;
 80014cc:	bf00      	nop

	}
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200003ec 	.word	0x200003ec

080014d8 <Modbus_Emission>:

void Modbus_Emission()
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80014de:	4b3d      	ldr	r3, [pc, #244]	; (80015d4 <Modbus_Emission+0xfc>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b20      	cmp	r3, #32
 80014ec:	d15e      	bne.n	80015ac <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80014ee:	4b39      	ldr	r3, [pc, #228]	; (80015d4 <Modbus_Emission+0xfc>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <Modbus_Emission+0xfc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	7812      	ldrb	r2, [r2, #0]
 80014f8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80014fc:	4b35      	ldr	r3, [pc, #212]	; (80015d4 <Modbus_Emission+0xfc>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8001504:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001506:	4b33      	ldr	r3, [pc, #204]	; (80015d4 <Modbus_Emission+0xfc>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 800150e:	4b31      	ldr	r3, [pc, #196]	; (80015d4 <Modbus_Emission+0xfc>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 8001516:	461a      	mov	r2, r3
 8001518:	f008 fe36 	bl	800a188 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 800151c:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <Modbus_Emission+0xfc>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001524:	b29a      	uxth	r2, r3
 8001526:	4b2b      	ldr	r3, [pc, #172]	; (80015d4 <Modbus_Emission+0xfc>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	3203      	adds	r2, #3
 800152c:	b292      	uxth	r2, r2
 800152e:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001532:	4b28      	ldr	r3, [pc, #160]	; (80015d4 <Modbus_Emission+0xfc>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <Modbus_Emission+0xfc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001542:	3b02      	subs	r3, #2
 8001544:	4619      	mov	r1, r3
 8001546:	4610      	mov	r0, r2
 8001548:	f7ff fd92 	bl	8001070 <CRC16>
 800154c:	4603      	mov	r3, r0
 800154e:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001550:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <Modbus_Emission+0xfc>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <Modbus_Emission+0xfc>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800155c:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 800155e:	7939      	ldrb	r1, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	460a      	mov	r2, r1
 8001564:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001568:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <Modbus_Emission+0xfc>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <Modbus_Emission+0xfc>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001574:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001576:	7979      	ldrb	r1, [r7, #5]
 8001578:	4413      	add	r3, r2
 800157a:	460a      	mov	r2, r1
 800157c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <Modbus_Emission+0xfc>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b20      	cmp	r3, #32
 800158e:	d10d      	bne.n	80015ac <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <Modbus_Emission+0xfc>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <Modbus_Emission+0xfc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <Modbus_Emission+0xfc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80015a2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80015a6:	461a      	mov	r2, r3
 80015a8:	f007 fc44 	bl	8008e34 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <Modbus_Emission+0xfc>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2200      	movs	r2, #0
 80015b2:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <Modbus_Emission+0xfc>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2200      	movs	r2, #0
 80015ba:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <Modbus_Emission+0xfc>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2200      	movs	r2, #0
 80015c2:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <Modbus_Emission+0xfc>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2202      	movs	r2, #2
 80015ca:	761a      	strb	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200003ec 	.word	0x200003ec

080015d8 <rt_powd_snf>:
 * Arguments    : double u0
 *                double u1
 * Return Type  : double
 */
static double rt_powd_snf(double u0, double u1)
{
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b08c      	sub	sp, #48	; 0x30
 80015dc:	af00      	add	r7, sp, #0
 80015de:	ed87 0b04 	vstr	d0, [r7, #16]
 80015e2:	ed87 1b02 	vstr	d1, [r7, #8]
  double y;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 80015e6:	ed97 0b04 	vldr	d0, [r7, #16]
 80015ea:	f003 f92b 	bl	8004844 <rtIsNaN>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d106      	bne.n	8001602 <rt_powd_snf+0x2a>
 80015f4:	ed97 0b02 	vldr	d0, [r7, #8]
 80015f8:	f003 f924 	bl	8004844 <rtIsNaN>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d005      	beq.n	800160e <rt_powd_snf+0x36>
    y = rtNaN;
 8001602:	4b80      	ldr	r3, [pc, #512]	; (8001804 <rt_powd_snf+0x22c>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800160c:	e0ef      	b.n	80017ee <rt_powd_snf+0x216>
  } else {
    double d;
    double d1;
    d = fabs(u0);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	ed97 7b00 	vldr	d7, [r7]
 800161e:	ed87 7b08 	vstr	d7, [r7, #32]
    d1 = fabs(u1);
 8001622:	68bc      	ldr	r4, [r7, #8]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800162a:	e9c7 4506 	strd	r4, r5, [r7, #24]
    if (rtIsInf(u1)) {
 800162e:	ed97 0b02 	vldr	d0, [r7, #8]
 8001632:	f003 f8d9 	bl	80047e8 <rtIsInf>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d049      	beq.n	80016d0 <rt_powd_snf+0xf8>
      if (d == 1.0) {
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	4b71      	ldr	r3, [pc, #452]	; (8001808 <rt_powd_snf+0x230>)
 8001642:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001646:	f7ff f9eb 	bl	8000a20 <__aeabi_dcmpeq>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <rt_powd_snf+0x84>
        y = 1.0;
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b6c      	ldr	r3, [pc, #432]	; (8001808 <rt_powd_snf+0x230>)
 8001656:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800165a:	e0c8      	b.n	80017ee <rt_powd_snf+0x216>
      } else if (d > 1.0) {
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	4b69      	ldr	r3, [pc, #420]	; (8001808 <rt_powd_snf+0x230>)
 8001662:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001666:	f7ff fa03 	bl	8000a70 <__aeabi_dcmpgt>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d017      	beq.n	80016a0 <rt_powd_snf+0xc8>
        if (u1 > 0.0) {
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800167c:	f7ff f9f8 	bl	8000a70 <__aeabi_dcmpgt>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d005      	beq.n	8001692 <rt_powd_snf+0xba>
          y = rtInf;
 8001686:	4b61      	ldr	r3, [pc, #388]	; (800180c <rt_powd_snf+0x234>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001690:	e0ad      	b.n	80017ee <rt_powd_snf+0x216>
        } else {
          y = 0.0;
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800169e:	e0a6      	b.n	80017ee <rt_powd_snf+0x216>
        }
      } else if (u1 > 0.0) {
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016ac:	f7ff f9e0 	bl	8000a70 <__aeabi_dcmpgt>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d006      	beq.n	80016c4 <rt_powd_snf+0xec>
        y = 0.0;
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	f04f 0300 	mov.w	r3, #0
 80016be:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80016c2:	e094      	b.n	80017ee <rt_powd_snf+0x216>
      } else {
        y = rtInf;
 80016c4:	4b51      	ldr	r3, [pc, #324]	; (800180c <rt_powd_snf+0x234>)
 80016c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80016ce:	e08e      	b.n	80017ee <rt_powd_snf+0x216>
      }
    } else if (d1 == 0.0) {
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016dc:	f7ff f9a0 	bl	8000a20 <__aeabi_dcmpeq>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <rt_powd_snf+0x11a>
      y = 1.0;
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	4b47      	ldr	r3, [pc, #284]	; (8001808 <rt_powd_snf+0x230>)
 80016ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80016f0:	e07d      	b.n	80017ee <rt_powd_snf+0x216>
    } else if (d1 == 1.0) {
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	4b44      	ldr	r3, [pc, #272]	; (8001808 <rt_powd_snf+0x230>)
 80016f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016fc:	f7ff f990 	bl	8000a20 <__aeabi_dcmpeq>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d01b      	beq.n	800173e <rt_powd_snf+0x166>
      if (u1 > 0.0) {
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001712:	f7ff f9ad 	bl	8000a70 <__aeabi_dcmpgt>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d004      	beq.n	8001726 <rt_powd_snf+0x14e>
        y = u0;
 800171c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001720:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001724:	e063      	b.n	80017ee <rt_powd_snf+0x216>
      } else {
        y = 1.0 / u0;
 8001726:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800172a:	f04f 0000 	mov.w	r0, #0
 800172e:	4936      	ldr	r1, [pc, #216]	; (8001808 <rt_powd_snf+0x230>)
 8001730:	f7ff f838 	bl	80007a4 <__aeabi_ddiv>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800173c:	e057      	b.n	80017ee <rt_powd_snf+0x216>
      }
    } else if (u1 == 2.0) {
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001746:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800174a:	f7ff f969 	bl	8000a20 <__aeabi_dcmpeq>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00a      	beq.n	800176a <rt_powd_snf+0x192>
      y = u0 * u0;
 8001754:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001758:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800175c:	f7fe fef8 	bl	8000550 <__aeabi_dmul>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001768:	e041      	b.n	80017ee <rt_powd_snf+0x216>
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	4b28      	ldr	r3, [pc, #160]	; (8001810 <rt_powd_snf+0x238>)
 8001770:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001774:	f7ff f954 	bl	8000a20 <__aeabi_dcmpeq>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d011      	beq.n	80017a2 <rt_powd_snf+0x1ca>
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800178a:	f7ff f967 	bl	8000a5c <__aeabi_dcmpge>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d006      	beq.n	80017a2 <rt_powd_snf+0x1ca>
      y = sqrt(u0);
 8001794:	ed97 0b04 	vldr	d0, [r7, #16]
 8001798:	f008 fff2 	bl	800a780 <sqrt>
 800179c:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80017a0:	e025      	b.n	80017ee <rt_powd_snf+0x216>
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017ae:	f7ff f941 	bl	8000a34 <__aeabi_dcmplt>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d012      	beq.n	80017de <rt_powd_snf+0x206>
 80017b8:	ed97 0b02 	vldr	d0, [r7, #8]
 80017bc:	f008 fe64 	bl	800a488 <floor>
 80017c0:	ec53 2b10 	vmov	r2, r3, d0
 80017c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017c8:	f7ff f952 	bl	8000a70 <__aeabi_dcmpgt>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d005      	beq.n	80017de <rt_powd_snf+0x206>
      y = rtNaN;
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <rt_powd_snf+0x22c>)
 80017d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80017dc:	e007      	b.n	80017ee <rt_powd_snf+0x216>
    } else {
      y = pow(u0, u1);
 80017de:	ed97 1b02 	vldr	d1, [r7, #8]
 80017e2:	ed97 0b04 	vldr	d0, [r7, #16]
 80017e6:	f008 ff5b 	bl	800a6a0 <pow>
 80017ea:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
    }
  }
  return y;
 80017ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80017f6:	eeb0 0a47 	vmov.f32	s0, s14
 80017fa:	eef0 0a67 	vmov.f32	s1, s15
 80017fe:	3730      	adds	r7, #48	; 0x30
 8001800:	46bd      	mov	sp, r7
 8001802:	bdb0      	pop	{r4, r5, r7, pc}
 8001804:	20000350 	.word	0x20000350
 8001808:	3ff00000 	.word	0x3ff00000
 800180c:	20000358 	.word	0x20000358
 8001810:	3fe00000 	.word	0x3fe00000
 8001814:	00000000 	.word	0x00000000

08001818 <Qubic>:
 * Return Type  : void
 */
void Qubic(double q_k1, double q_k2, double qdot_k1, double qdot_k2, double tf,
           emxArray_real_T *q_position, emxArray_real_T *q_velocity,
           emxArray_real_T *q_acc)
{
 8001818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800181c:	b0a1      	sub	sp, #132	; 0x84
 800181e:	af00      	add	r7, sp, #0
 8001820:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 8001824:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 8001828:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 800182c:	ed87 3b08 	vstr	d3, [r7, #32]
 8001830:	ed87 4b06 	vstr	d4, [r7, #24]
 8001834:	6178      	str	r0, [r7, #20]
 8001836:	6139      	str	r1, [r7, #16]
 8001838:	60fa      	str	r2, [r7, #12]
  double *q_position_data;
  double *q_velocity_data;
  int i;
  int k;
  int q_acc_tmp_tmp;
  q_acc_data = q_acc->data;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	67fb      	str	r3, [r7, #124]	; 0x7c
  delta1 = tf * 100.0;
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	4bac      	ldr	r3, [pc, #688]	; (8001af8 <Qubic+0x2e0>)
 8001846:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800184a:	f7fe fe81 	bl	8000550 <__aeabi_dmul>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  if (!(delta1 >= 0.0)) {
 8001856:	2301      	movs	r3, #1
 8001858:	461e      	mov	r6, r3
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001866:	f7ff f8f9 	bl	8000a5c <__aeabi_dcmpge>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <Qubic+0x5c>
 8001870:	2300      	movs	r3, #0
 8001872:	461e      	mov	r6, r3
 8001874:	b2f3      	uxtb	r3, r6
 8001876:	f083 0301 	eor.w	r3, r3, #1
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	d009      	beq.n	8001894 <Qubic+0x7c>
    q_acc->size[0] = 1;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	601a      	str	r2, [r3, #0]
    q_acc->size[1] = 0;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	3304      	adds	r3, #4
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	e158      	b.n	8001b46 <Qubic+0x32e>
  } else {
    d = floor(delta1);
 8001894:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8001898:	f008 fdf6 	bl	800a488 <floor>
 800189c:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
    i = q_acc->size[0] * q_acc->size[1];
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	6852      	ldr	r2, [r2, #4]
 80018aa:	3204      	adds	r2, #4
 80018ac:	6812      	ldr	r2, [r2, #0]
 80018ae:	fb02 f303 	mul.w	r3, r2, r3
 80018b2:	67bb      	str	r3, [r7, #120]	; 0x78
    q_acc->size[0] = 1;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	601a      	str	r2, [r3, #0]
    q_acc->size[1] = (int)d;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	1d1e      	adds	r6, r3, #4
 80018c2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80018c6:	f7ff f8f3 	bl	8000ab0 <__aeabi_d2iz>
 80018ca:	4603      	mov	r3, r0
 80018cc:	6033      	str	r3, [r6, #0]
    emxEnsureCapacity_real_T(q_acc, i);
 80018ce:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 fb3e 	bl	8001f52 <emxEnsureCapacity_real_T>
    q_acc_data = q_acc->data;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	67fb      	str	r3, [r7, #124]	; 0x7c
    if ((int)d >= 1) {
 80018dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80018e0:	f7ff f8e6 	bl	8000ab0 <__aeabi_d2iz>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f340 812d 	ble.w	8001b46 <Qubic+0x32e>
      q_acc_tmp_tmp = (int)d - 1;
 80018ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80018f0:	f7ff f8de 	bl	8000ab0 <__aeabi_d2iz>
 80018f4:	4603      	mov	r3, r0
 80018f6:	3b01      	subs	r3, #1
 80018f8:	65fb      	str	r3, [r7, #92]	; 0x5c
      q_acc_data[(int)floor(delta1) - 1] = tf;
 80018fa:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 80018fe:	f008 fdc3 	bl	800a488 <floor>
 8001902:	ec53 2b10 	vmov	r2, r3, d0
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	f7ff f8d1 	bl	8000ab0 <__aeabi_d2iz>
 800190e:	4603      	mov	r3, r0
 8001910:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001914:	3b01      	subs	r3, #1
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800191a:	18d1      	adds	r1, r2, r3
 800191c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001920:	e9c1 2300 	strd	r2, r3, [r1]
      if (q_acc->size[1] >= 2) {
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	3304      	adds	r3, #4
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b01      	cmp	r3, #1
 800192e:	f340 810a 	ble.w	8001b46 <Qubic+0x32e>
        q_acc_data[0] = 0.0;
 8001932:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	e9c1 2300 	strd	r2, r3, [r1]
        if (q_acc->size[1] >= 3) {
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	3304      	adds	r3, #4
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b02      	cmp	r3, #2
 800194a:	f340 80fc 	ble.w	8001b46 <Qubic+0x32e>
          if (-tf == 0.0) {
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800195a:	f7ff f861 	bl	8000a20 <__aeabi_dcmpeq>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d051      	beq.n	8001a08 <Qubic+0x1f0>
            delta1 = tf / ((double)q_acc->size[1] - 1.0);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	3304      	adds	r3, #4
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fd85 	bl	800047c <__aeabi_i2d>
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	4b61      	ldr	r3, [pc, #388]	; (8001afc <Qubic+0x2e4>)
 8001978:	f7fe fc32 	bl	80001e0 <__aeabi_dsub>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001984:	f7fe ff0e 	bl	80007a4 <__aeabi_ddiv>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            for (k = 2; k <= q_acc_tmp_tmp; k++) {
 8001990:	2302      	movs	r3, #2
 8001992:	677b      	str	r3, [r7, #116]	; 0x74
 8001994:	e01c      	b.n	80019d0 <Qubic+0x1b8>
              q_acc_data[k - 1] =
                  (double)(((k << 1) - q_acc->size[1]) - 1) * delta1;
 8001996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001998:	005a      	lsls	r2, r3, #1
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	3304      	adds	r3, #4
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	3b01      	subs	r3, #1
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fd68 	bl	800047c <__aeabi_i2d>
              q_acc_data[k - 1] =
 80019ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019ae:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80019b2:	3b01      	subs	r3, #1
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80019b8:	18d6      	adds	r6, r2, r3
                  (double)(((k << 1) - q_acc->size[1]) - 1) * delta1;
 80019ba:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80019be:	f7fe fdc7 	bl	8000550 <__aeabi_dmul>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
              q_acc_data[k - 1] =
 80019c6:	e9c6 2300 	strd	r2, r3, [r6]
            for (k = 2; k <= q_acc_tmp_tmp; k++) {
 80019ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019cc:	3301      	adds	r3, #1
 80019ce:	677b      	str	r3, [r7, #116]	; 0x74
 80019d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80019d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019d4:	429a      	cmp	r2, r3
 80019d6:	ddde      	ble.n	8001996 <Qubic+0x17e>
            }
            if ((q_acc->size[1] & 1) == 1) {
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	3304      	adds	r3, #4
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80ae 	beq.w	8001b46 <Qubic+0x32e>
              q_acc_data[q_acc->size[1] >> 1] = 0.0;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	3304      	adds	r3, #4
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	105b      	asrs	r3, r3, #1
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80019f8:	18d1      	adds	r1, r2, r3
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	e9c1 2300 	strd	r2, r3, [r1]
 8001a06:	e09e      	b.n	8001b46 <Qubic+0x32e>
            }
          } else if ((tf < 0.0) && (fabs(tf) > 8.9884656743115785E+307)) {
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a14:	f7ff f80e 	bl	8000a34 <__aeabi_dcmplt>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d04e      	beq.n	8001abc <Qubic+0x2a4>
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2e:	4b34      	ldr	r3, [pc, #208]	; (8001b00 <Qubic+0x2e8>)
 8001a30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a34:	f7ff f81c 	bl	8000a70 <__aeabi_dcmpgt>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d03e      	beq.n	8001abc <Qubic+0x2a4>
            delta1 = tf / ((double)q_acc->size[1] - 1.0);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	3304      	adds	r3, #4
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fd18 	bl	800047c <__aeabi_i2d>
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <Qubic+0x2e4>)
 8001a52:	f7fe fbc5 	bl	80001e0 <__aeabi_dsub>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a5e:	f7fe fea1 	bl	80007a4 <__aeabi_ddiv>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            i = q_acc->size[1];
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	67bb      	str	r3, [r7, #120]	; 0x78
            for (k = 0; k <= i - 3; k++) {
 8001a72:	2300      	movs	r3, #0
 8001a74:	677b      	str	r3, [r7, #116]	; 0x74
 8001a76:	e01b      	b.n	8001ab0 <Qubic+0x298>
              q_acc_data[k + 1] = delta1 * ((double)k + 1.0);
 8001a78:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001a7a:	f7fe fcff 	bl	800047c <__aeabi_i2d>
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <Qubic+0x2e4>)
 8001a84:	f7fe fbae 	bl	80001e4 <__adddf3>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a92:	3301      	adds	r3, #1
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a98:	18d6      	adds	r6, r2, r3
 8001a9a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001a9e:	f7fe fd57 	bl	8000550 <__aeabi_dmul>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	e9c6 2300 	strd	r2, r3, [r6]
            for (k = 0; k <= i - 3; k++) {
 8001aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001aac:	3301      	adds	r3, #1
 8001aae:	677b      	str	r3, [r7, #116]	; 0x74
 8001ab0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ab2:	3b02      	subs	r3, #2
 8001ab4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	dbde      	blt.n	8001a78 <Qubic+0x260>
          } else if ((tf < 0.0) && (fabs(tf) > 8.9884656743115785E+307)) {
 8001aba:	e044      	b.n	8001b46 <Qubic+0x32e>
            }
          } else {
            delta1 = tf / ((double)q_acc->size[1] - 1.0);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fcd9 	bl	800047c <__aeabi_i2d>
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <Qubic+0x2e4>)
 8001ad0:	f7fe fb86 	bl	80001e0 <__aeabi_dsub>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001adc:	f7fe fe62 	bl	80007a4 <__aeabi_ddiv>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            i = q_acc->size[1];
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	67bb      	str	r3, [r7, #120]	; 0x78
            for (k = 0; k <= i - 3; k++) {
 8001af0:	2300      	movs	r3, #0
 8001af2:	677b      	str	r3, [r7, #116]	; 0x74
 8001af4:	e022      	b.n	8001b3c <Qubic+0x324>
 8001af6:	bf00      	nop
 8001af8:	40590000 	.word	0x40590000
 8001afc:	3ff00000 	.word	0x3ff00000
 8001b00:	7fdfffff 	.word	0x7fdfffff
              q_acc_data[k + 1] = ((double)k + 1.0) * delta1;
 8001b04:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001b06:	f7fe fcb9 	bl	800047c <__aeabi_i2d>
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	4b6e      	ldr	r3, [pc, #440]	; (8001cc8 <Qubic+0x4b0>)
 8001b10:	f7fe fb68 	bl	80001e4 <__adddf3>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b1e:	3301      	adds	r3, #1
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001b24:	18d6      	adds	r6, r2, r3
 8001b26:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001b2a:	f7fe fd11 	bl	8000550 <__aeabi_dmul>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	e9c6 2300 	strd	r2, r3, [r6]
            for (k = 0; k <= i - 3; k++) {
 8001b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b38:	3301      	adds	r3, #1
 8001b3a:	677b      	str	r3, [r7, #116]	; 0x74
 8001b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b3e:	3b02      	subs	r3, #2
 8001b40:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001b42:	429a      	cmp	r2, r3
 8001b44:	dbde      	blt.n	8001b04 <Qubic+0x2ec>
          }
        }
      }
    }
  }
  delta1 = q_k2 - q_k1;
 8001b46:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001b4a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001b4e:	f7fe fb47 	bl	80001e0 <__aeabi_dsub>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  C2_tmp = tf * tf;
 8001b5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b62:	f7fe fcf5 	bl	8000550 <__aeabi_dmul>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  C2 = 3.0 * (delta1 / C2_tmp) + (-qdot_k2 - 2.0 * qdot_k1) / tf;
 8001b6e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001b72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001b76:	f7fe fe15 	bl	80007a4 <__aeabi_ddiv>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	4b51      	ldr	r3, [pc, #324]	; (8001ccc <Qubic+0x4b4>)
 8001b88:	f7fe fce2 	bl	8000550 <__aeabi_dmul>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4690      	mov	r8, r2
 8001b92:	4699      	mov	r9, r3
 8001b94:	6a3c      	ldr	r4, [r7, #32]
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b9c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	f7fe fb1e 	bl	80001e4 <__adddf3>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4620      	mov	r0, r4
 8001bae:	4629      	mov	r1, r5
 8001bb0:	f7fe fb16 	bl	80001e0 <__aeabi_dsub>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bc0:	f7fe fdf0 	bl	80007a4 <__aeabi_ddiv>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4640      	mov	r0, r8
 8001bca:	4649      	mov	r1, r9
 8001bcc:	f7fe fb0a 	bl	80001e4 <__adddf3>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  delta1 =
      -2.0 * (delta1 / rt_powd_snf(tf, 3.0)) + (qdot_k2 + qdot_k1) / C2_tmp;
 8001bd8:	ed9f 1b39 	vldr	d1, [pc, #228]	; 8001cc0 <Qubic+0x4a8>
 8001bdc:	ed97 0b06 	vldr	d0, [r7, #24]
 8001be0:	f7ff fcfa 	bl	80015d8 <rt_powd_snf>
 8001be4:	ec53 2b10 	vmov	r2, r3, d0
 8001be8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001bec:	f7fe fdda 	bl	80007a4 <__aeabi_ddiv>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001c00:	f7fe fca6 	bl	8000550 <__aeabi_dmul>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4614      	mov	r4, r2
 8001c0a:	461d      	mov	r5, r3
 8001c0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c10:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c14:	f7fe fae6 	bl	80001e4 <__adddf3>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c24:	f7fe fdbe 	bl	80007a4 <__aeabi_ddiv>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
  delta1 =
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	4629      	mov	r1, r5
 8001c30:	f7fe fad8 	bl	80001e4 <__adddf3>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  i = q_velocity->size[0] * q_velocity->size[1];
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	6852      	ldr	r2, [r2, #4]
 8001c46:	3204      	adds	r2, #4
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	fb02 f303 	mul.w	r3, r2, r3
 8001c4e:	67bb      	str	r3, [r7, #120]	; 0x78
  q_velocity->size[0] = 1;
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
  q_velocity->size[1] = q_acc->size[1];
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	3304      	adds	r3, #4
 8001c62:	6852      	ldr	r2, [r2, #4]
 8001c64:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_velocity, i);
 8001c66:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001c68:	6938      	ldr	r0, [r7, #16]
 8001c6a:	f000 f972 	bl	8001f52 <emxEnsureCapacity_real_T>
  q_velocity_data = q_velocity->data;
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	647b      	str	r3, [r7, #68]	; 0x44
  q_acc_tmp_tmp = q_acc->size[1];
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  i = q_position->size[0] * q_position->size[1];
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	6852      	ldr	r2, [r2, #4]
 8001c86:	3204      	adds	r2, #4
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	fb02 f303 	mul.w	r3, r2, r3
 8001c8e:	67bb      	str	r3, [r7, #120]	; 0x78
  q_position->size[0] = 1;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
  q_position->size[1] = q_acc->size[1];
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	6852      	ldr	r2, [r2, #4]
 8001ca4:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_position, i);
 8001ca6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001ca8:	6978      	ldr	r0, [r7, #20]
 8001caa:	f000 f952 	bl	8001f52 <emxEnsureCapacity_real_T>
  q_position_data = q_position->data;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	643b      	str	r3, [r7, #64]	; 0x40
  for (i = 0; i < q_acc_tmp_tmp; i++) {
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	67bb      	str	r3, [r7, #120]	; 0x78
 8001cb8:	e067      	b.n	8001d8a <Qubic+0x572>
 8001cba:	bf00      	nop
 8001cbc:	f3af 8000 	nop.w
 8001cc0:	00000000 	.word	0x00000000
 8001cc4:	40080000 	.word	0x40080000
 8001cc8:	3ff00000 	.word	0x3ff00000
 8001ccc:	40080000 	.word	0x40080000
    d = q_acc_data[i];
 8001cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001cd6:	4413      	add	r3, r2
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    C2_tmp = d * d;
 8001ce0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ce4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001ce8:	f7fe fc32 	bl	8000550 <__aeabi_dmul>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    q_velocity_data[i] = C2_tmp;
 8001cf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001cfa:	18d1      	adds	r1, r2, r3
 8001cfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d00:	e9c1 2300 	strd	r2, r3, [r1]
    q_position_data[i] =
        ((q_k1 + qdot_k1 * d) + C2 * C2_tmp) + delta1 * rt_powd_snf(d, 3.0);
 8001d04:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001d08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d0c:	f7fe fc20 	bl	8000550 <__aeabi_dmul>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d1c:	f7fe fa62 	bl	80001e4 <__adddf3>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4614      	mov	r4, r2
 8001d26:	461d      	mov	r5, r3
 8001d28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d2c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001d30:	f7fe fc0e 	bl	8000550 <__aeabi_dmul>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4620      	mov	r0, r4
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	f7fe fa52 	bl	80001e4 <__adddf3>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4690      	mov	r8, r2
 8001d46:	4699      	mov	r9, r3
 8001d48:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8001f10 <Qubic+0x6f8>
 8001d4c:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001d50:	f7ff fc42 	bl	80015d8 <rt_powd_snf>
 8001d54:	ec51 0b10 	vmov	r0, r1, d0
 8001d58:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d5c:	f7fe fbf8 	bl	8000550 <__aeabi_dmul>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
    q_position_data[i] =
 8001d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d6e:	18d4      	adds	r4, r2, r3
        ((q_k1 + qdot_k1 * d) + C2 * C2_tmp) + delta1 * rt_powd_snf(d, 3.0);
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4640      	mov	r0, r8
 8001d76:	4649      	mov	r1, r9
 8001d78:	f7fe fa34 	bl	80001e4 <__adddf3>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
    q_position_data[i] =
 8001d80:	e9c4 2300 	strd	r2, r3, [r4]
  for (i = 0; i < q_acc_tmp_tmp; i++) {
 8001d84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d86:	3301      	adds	r3, #1
 8001d88:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d8a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001d8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	db9e      	blt.n	8001cd0 <Qubic+0x4b8>
  }
  i = q_velocity->size[0] * q_velocity->size[1];
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	6852      	ldr	r2, [r2, #4]
 8001d9c:	3204      	adds	r2, #4
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	fb02 f303 	mul.w	r3, r2, r3
 8001da4:	67bb      	str	r3, [r7, #120]	; 0x78
  q_velocity->size[0] = 1;
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	601a      	str	r2, [r3, #0]
  q_velocity->size[1] = q_acc->size[1];
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	3304      	adds	r3, #4
 8001db8:	6852      	ldr	r2, [r2, #4]
 8001dba:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_velocity, i);
 8001dbc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001dbe:	6938      	ldr	r0, [r7, #16]
 8001dc0:	f000 f8c7 	bl	8001f52 <emxEnsureCapacity_real_T>
  q_velocity_data = q_velocity->data;
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	647b      	str	r3, [r7, #68]	; 0x44
  d = 2.0 * C2;
 8001dca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	f7fe fa07 	bl	80001e4 <__adddf3>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  C2_tmp = 3.0 * delta1;
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	4b4d      	ldr	r3, [pc, #308]	; (8001f18 <Qubic+0x700>)
 8001de4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001de8:	f7fe fbb2 	bl	8000550 <__aeabi_dmul>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  q_acc_tmp_tmp = q_acc->size[1] - 1;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001e00:	2300      	movs	r3, #0
 8001e02:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e04:	e034      	b.n	8001e70 <Qubic+0x658>
    q_velocity_data[i] =
        (qdot_k1 + d * q_acc_data[i]) + C2_tmp * q_velocity_data[i];
 8001e06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001e0c:	4413      	add	r3, r2
 8001e0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e12:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001e16:	f7fe fb9b 	bl	8000550 <__aeabi_dmul>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4610      	mov	r0, r2
 8001e20:	4619      	mov	r1, r3
 8001e22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e26:	f7fe f9dd 	bl	80001e4 <__adddf3>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4690      	mov	r8, r2
 8001e30:	4699      	mov	r9, r3
 8001e32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e38:	4413      	add	r3, r2
 8001e3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e3e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e42:	f7fe fb85 	bl	8000550 <__aeabi_dmul>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	4619      	mov	r1, r3
    q_velocity_data[i] =
 8001e4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e54:	18d4      	adds	r4, r2, r3
        (qdot_k1 + d * q_acc_data[i]) + C2_tmp * q_velocity_data[i];
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4640      	mov	r0, r8
 8001e5c:	4649      	mov	r1, r9
 8001e5e:	f7fe f9c1 	bl	80001e4 <__adddf3>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
    q_velocity_data[i] =
 8001e66:	e9c4 2300 	strd	r2, r3, [r4]
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001e6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e74:	429a      	cmp	r2, r3
 8001e76:	ddc6      	ble.n	8001e06 <Qubic+0x5ee>
  }
  i = q_acc->size[0] * q_acc->size[1];
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	6852      	ldr	r2, [r2, #4]
 8001e82:	3204      	adds	r2, #4
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	fb02 f303 	mul.w	r3, r2, r3
 8001e8a:	67bb      	str	r3, [r7, #120]	; 0x78
  q_acc->size[0] = 1;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_acc, i);
 8001e94:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 f85b 	bl	8001f52 <emxEnsureCapacity_real_T>
  q_acc_data = q_acc->data;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	67fb      	str	r3, [r7, #124]	; 0x7c
  C2_tmp = 6.0 * delta1;
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <Qubic+0x704>)
 8001ea8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001eac:	f7fe fb50 	bl	8000550 <__aeabi_dmul>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001eb8:	2300      	movs	r3, #0
 8001eba:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ebc:	e01c      	b.n	8001ef8 <Qubic+0x6e0>
    q_acc_data[i] = d + C2_tmp * q_acc_data[i];
 8001ebe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ec4:	4413      	add	r3, r2
 8001ec6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ece:	f7fe fb3f 	bl	8000550 <__aeabi_dmul>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	4619      	mov	r1, r3
 8001eda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ee0:	18d4      	adds	r4, r2, r3
 8001ee2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ee6:	f7fe f97d 	bl	80001e4 <__adddf3>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	e9c4 2300 	strd	r2, r3, [r4]
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ef8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001efc:	429a      	cmp	r2, r3
 8001efe:	ddde      	ble.n	8001ebe <Qubic+0x6a6>
  }
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	3784      	adds	r7, #132	; 0x84
 8001f06:	46bd      	mov	sp, r7
 8001f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f0c:	f3af 8000 	nop.w
 8001f10:	00000000 	.word	0x00000000
 8001f14:	40080000 	.word	0x40080000
 8001f18:	40080000 	.word	0x40080000
 8001f1c:	40180000 	.word	0x40180000

08001f20 <emxDestroyArray_real_T>:
/*
 * Arguments    : emxArray_real_T *emxArray
 * Return Type  : void
 */
void emxDestroyArray_real_T(emxArray_real_T *emxArray)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  emxFree_real_T(&emxArray);
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 f878 	bl	8002020 <emxFree_real_T>
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <emxInitArray_real_T>:
 * Arguments    : emxArray_real_T **pEmxArray
 *                int numDimensions
 * Return Type  : void
 */
void emxInitArray_real_T(emxArray_real_T **pEmxArray, int numDimensions)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  emxInit_real_T(pEmxArray, numDimensions);
 8001f42:	6839      	ldr	r1, [r7, #0]
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f895 	bl	8002074 <emxInit_real_T>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <emxEnsureCapacity_real_T>:
 * Arguments    : emxArray_real_T *emxArray
 *                int oldNumel
 * Return Type  : void
 */
void emxEnsureCapacity_real_T(emxArray_real_T *emxArray, int oldNumel)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
  int i;
  int newNumel;
  void *newData;
  if (oldNumel < 0) {
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	da01      	bge.n	8001f66 <emxEnsureCapacity_real_T+0x14>
    oldNumel = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	603b      	str	r3, [r7, #0]
  }
  newNumel = 1;
 8001f66:	2301      	movs	r3, #1
 8001f68:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	e00c      	b.n	8001f8a <emxEnsureCapacity_real_T+0x38>
    newNumel *= emxArray->size[i];
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	fb02 f303 	mul.w	r3, r2, r3
 8001f82:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	3301      	adds	r3, #1
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	dbed      	blt.n	8001f70 <emxEnsureCapacity_real_T+0x1e>
  }
  if (newNumel > emxArray->allocatedSize) {
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	dd3c      	ble.n	8002018 <emxEnsureCapacity_real_T+0xc6>
    i = emxArray->allocatedSize;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	617b      	str	r3, [r7, #20]
    if (i < 16) {
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2b0f      	cmp	r3, #15
 8001fa8:	dc0d      	bgt.n	8001fc6 <emxEnsureCapacity_real_T+0x74>
      i = 16;
 8001faa:	2310      	movs	r3, #16
 8001fac:	617b      	str	r3, [r7, #20]
    }
    while (i < newNumel) {
 8001fae:	e00a      	b.n	8001fc6 <emxEnsureCapacity_real_T+0x74>
      if (i > 1073741823) {
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb6:	db03      	blt.n	8001fc0 <emxEnsureCapacity_real_T+0x6e>
        i = MAX_int32_T;
 8001fb8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	e002      	b.n	8001fc6 <emxEnsureCapacity_real_T+0x74>
      } else {
        i *= 2;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	617b      	str	r3, [r7, #20]
    while (i < newNumel) {
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	dbf0      	blt.n	8001fb0 <emxEnsureCapacity_real_T+0x5e>
      }
    }
    newData = calloc((unsigned int)i, sizeof(double));
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2108      	movs	r1, #8
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f008 f896 	bl	800a104 <calloc>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	60fb      	str	r3, [r7, #12]
    if (emxArray->data != NULL) {
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d010      	beq.n	8002006 <emxEnsureCapacity_real_T+0xb4>
      memcpy(newData, emxArray->data, sizeof(double) * (unsigned int)oldNumel);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6819      	ldr	r1, [r3, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	461a      	mov	r2, r3
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f008 f8ca 	bl	800a188 <memcpy>
      if (emxArray->canFreeData) {
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	7c1b      	ldrb	r3, [r3, #16]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d004      	beq.n	8002006 <emxEnsureCapacity_real_T+0xb4>
        free(emxArray->data);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f008 f8b9 	bl	800a178 <free>
      }
    }
    emxArray->data = (double *)newData;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	601a      	str	r2, [r3, #0]
    emxArray->allocatedSize = i;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	609a      	str	r2, [r3, #8]
    emxArray->canFreeData = true;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	741a      	strb	r2, [r3, #16]
  }
}
 8002018:	bf00      	nop
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <emxFree_real_T>:
/*
 * Arguments    : emxArray_real_T **pEmxArray
 * Return Type  : void
 */
void emxFree_real_T(emxArray_real_T **pEmxArray)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  if (*pEmxArray != (emxArray_real_T *)NULL) {
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d01d      	beq.n	800206c <emxFree_real_T+0x4c>
    if (((*pEmxArray)->data != (double *)NULL) && (*pEmxArray)->canFreeData) {
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <emxFree_real_T+0x30>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	7c1b      	ldrb	r3, [r3, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <emxFree_real_T+0x30>
      free((*pEmxArray)->data);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f008 f894 	bl	800a178 <free>
    }
    free((*pEmxArray)->size);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	4618      	mov	r0, r3
 8002058:	f008 f88e 	bl	800a178 <free>
    free(*pEmxArray);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f008 f889 	bl	800a178 <free>
    *pEmxArray = (emxArray_real_T *)NULL;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
  }
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <emxInit_real_T>:
 * Arguments    : emxArray_real_T **pEmxArray
 *                int numDimensions
 * Return Type  : void
 */
void emxInit_real_T(emxArray_real_T **pEmxArray, int numDimensions)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  emxArray_real_T *emxArray;
  int i;
  *pEmxArray = (emxArray_real_T *)malloc(sizeof(emxArray_real_T));
 800207e:	2014      	movs	r0, #20
 8002080:	f008 f872 	bl	800a168 <malloc>
 8002084:	4603      	mov	r3, r0
 8002086:	461a      	mov	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	601a      	str	r2, [r3, #0]
  emxArray = *pEmxArray;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	60bb      	str	r3, [r7, #8]
  emxArray->data = (double *)NULL;
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
  emxArray->numDimensions = numDimensions;
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	60da      	str	r2, [r3, #12]
  emxArray->size = (int *)malloc(sizeof(int) * (unsigned int)numDimensions);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f008 f860 	bl	800a168 <malloc>
 80020a8:	4603      	mov	r3, r0
 80020aa:	461a      	mov	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	605a      	str	r2, [r3, #4]
  emxArray->allocatedSize = 0;
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  emxArray->canFreeData = true;
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2201      	movs	r2, #1
 80020ba:	741a      	strb	r2, [r3, #16]
  for (i = 0; i < numDimensions; i++) {
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	e009      	b.n	80020d6 <emxInit_real_T+0x62>
    emxArray->size[i] = 0;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
  for (i = 0; i < numDimensions; i++) {
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	3301      	adds	r3, #1
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	dbf1      	blt.n	80020c2 <emxInit_real_T+0x4e>
  }
}
 80020de:	bf00      	nop
 80020e0:	bf00      	nop
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80020ec:	f3bf 8f4f 	dsb	sy
}
 80020f0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <__NVIC_SystemReset+0x24>)
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80020fa:	4904      	ldr	r1, [pc, #16]	; (800210c <__NVIC_SystemReset+0x24>)
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <__NVIC_SystemReset+0x28>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002102:	f3bf 8f4f 	dsb	sy
}
 8002106:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002108:	bf00      	nop
 800210a:	e7fd      	b.n	8002108 <__NVIC_SystemReset+0x20>
 800210c:	e000ed00 	.word	0xe000ed00
 8002110:	05fa0004 	.word	0x05fa0004

08002114 <argInit_real_T>:
/* Function Definitions */
/*
 * Arguments    : void
 * Return Type  : double
 */
static double argInit_real_T(void) {
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
	return 0.0;
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	f04f 0300 	mov.w	r3, #0
 8002120:	ec43 2b17 	vmov	d7, r2, r3
}
 8002124:	eeb0 0a47 	vmov.f32	s0, s14
 8002128:	eef0 0a67 	vmov.f32	s1, s15
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	0000      	movs	r0, r0
	...

08002138 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002140:	f002 fef6 	bl	8004f30 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002144:	f000 fafc 	bl	8002740 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002148:	f000 fe0c 	bl	8002d64 <MX_GPIO_Init>
	MX_DMA_Init();
 800214c:	f000 fdd4 	bl	8002cf8 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8002150:	f000 fda6 	bl	8002ca0 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8002154:	f000 fbea 	bl	800292c <MX_TIM2_Init>
	MX_TIM5_Init();
 8002158:	f000 fd00 	bl	8002b5c <MX_TIM5_Init>
	MX_ADC1_Init();
 800215c:	f000 fb58 	bl	8002810 <MX_ADC1_Init>
	MX_I2C1_Init();
 8002160:	f000 fbb6 	bl	80028d0 <MX_I2C1_Init>
	MX_TIM11_Init();
 8002164:	f000 fd48 	bl	8002bf8 <MX_TIM11_Init>
	MX_TIM4_Init();
 8002168:	f000 fc82 	bl	8002a70 <MX_TIM4_Init>
	MX_TIM3_Init();
 800216c:	f000 fc32 	bl	80029d4 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	start_p = 0;
 8002170:	4b23      	ldr	r3, [pc, #140]	; (8002200 <main+0xc8>)
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
	stop_p = 15;
 8002178:	4b22      	ldr	r3, [pc, #136]	; (8002204 <main+0xcc>)
 800217a:	4a23      	ldr	r2, [pc, #140]	; (8002208 <main+0xd0>)
 800217c:	601a      	str	r2, [r3, #0]
	start_v = 0;
 800217e:	4b23      	ldr	r3, [pc, #140]	; (800220c <main+0xd4>)
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
	stop_v = 0;
 8002186:	4b22      	ldr	r3, [pc, #136]	; (8002210 <main+0xd8>)
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
	timecycle = 2;
 800218e:	4b21      	ldr	r3, [pc, #132]	; (8002214 <main+0xdc>)
 8002190:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002194:	601a      	str	r2, [r3, #0]
	transformRectangleAndPointsPlace();
 8002196:	f001 f903 	bl	80033a0 <transformRectangleAndPointsPlace>
	HAL_ADC_Start_DMA(&hadc1, Joystick_position, 2);
 800219a:	2202      	movs	r2, #2
 800219c:	491e      	ldr	r1, [pc, #120]	; (8002218 <main+0xe0>)
 800219e:	481f      	ldr	r0, [pc, #124]	; (800221c <main+0xe4>)
 80021a0:	f002 ff7c 	bl	800509c <HAL_ADC_Start_DMA>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80021a4:	2104      	movs	r1, #4
 80021a6:	481e      	ldr	r0, [pc, #120]	; (8002220 <main+0xe8>)
 80021a8:	f005 fc22 	bl	80079f0 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80021ac:	2100      	movs	r1, #0
 80021ae:	481d      	ldr	r0, [pc, #116]	; (8002224 <main+0xec>)
 80021b0:	f005 f9ec 	bl	800758c <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim5);
 80021b4:	481c      	ldr	r0, [pc, #112]	; (8002228 <main+0xf0>)
 80021b6:	f005 f861 	bl	800727c <HAL_TIM_Base_Start>
	hmodbus.huart = &huart2;
 80021ba:	4b1c      	ldr	r3, [pc, #112]	; (800222c <main+0xf4>)
 80021bc:	4a1c      	ldr	r2, [pc, #112]	; (8002230 <main+0xf8>)
 80021be:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim11;
 80021c0:	4b1a      	ldr	r3, [pc, #104]	; (800222c <main+0xf4>)
 80021c2:	4a1c      	ldr	r2, [pc, #112]	; (8002234 <main+0xfc>)
 80021c4:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 80021c6:	4b19      	ldr	r3, [pc, #100]	; (800222c <main+0xf4>)
 80021c8:	2215      	movs	r2, #21
 80021ca:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 70;
 80021cc:	4b17      	ldr	r3, [pc, #92]	; (800222c <main+0xf4>)
 80021ce:	2246      	movs	r2, #70	; 0x46
 80021d0:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 80021d2:	4919      	ldr	r1, [pc, #100]	; (8002238 <main+0x100>)
 80021d4:	4815      	ldr	r0, [pc, #84]	; (800222c <main+0xf4>)
 80021d6:	f7fe fef5 	bl	8000fc4 <Modbus_init>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
//	  limitsensor();
		if (starttray == 1) {
 80021da:	4b18      	ldr	r3, [pc, #96]	; (800223c <main+0x104>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d104      	bne.n	80021ec <main+0xb4>
			starttray = 0;
 80021e2:	4b16      	ldr	r3, [pc, #88]	; (800223c <main+0x104>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
			transformRectangleAndPointsPlace();
 80021e8:	f001 f8da 	bl	80033a0 <transformRectangleAndPointsPlace>

		}
		Modbus_Protocal_Worker();
 80021ec:	f7fe ff76 	bl	80010dc <Modbus_Protocal_Worker>
		flowmodbus();
 80021f0:	f001 fb56 	bl	80038a0 <flowmodbus>

		if (SoftReset == 1) {
 80021f4:	4b12      	ldr	r3, [pc, #72]	; (8002240 <main+0x108>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d123      	bne.n	8002244 <main+0x10c>
			NVIC_SystemReset();
 80021fc:	f7ff ff74 	bl	80020e8 <__NVIC_SystemReset>
 8002200:	20000950 	.word	0x20000950
 8002204:	20000954 	.word	0x20000954
 8002208:	41700000 	.word	0x41700000
 800220c:	20000958 	.word	0x20000958
 8002210:	2000095c 	.word	0x2000095c
 8002214:	20000960 	.word	0x20000960
 8002218:	20001294 	.word	0x20001294
 800221c:	200003f0 	.word	0x200003f0
 8002220:	200004ec 	.word	0x200004ec
 8002224:	20000654 	.word	0x20000654
 8002228:	20000708 	.word	0x20000708
 800222c:	20000d14 	.word	0x20000d14
 8002230:	20000870 	.word	0x20000870
 8002234:	200007bc 	.word	0x200007bc
 8002238:	200011ec 	.word	0x200011ec
 800223c:	2000094c 	.word	0x2000094c
 8002240:	20001278 	.word	0x20001278
//	    	  timeI2C = HAL_GetTick() + 10;
//	    	  I2C_read_status(data_read);
//	    	  I2C_all();
//	      }
		//int pos = (int) registerFrame[17].U16;
		if (HAL_GetTick() >= timemodbus) { // heartbeat
 8002244:	f002 feda 	bl	8004ffc <HAL_GetTick>
 8002248:	4603      	mov	r3, r0
 800224a:	2200      	movs	r2, #0
 800224c:	461c      	mov	r4, r3
 800224e:	4615      	mov	r5, r2
 8002250:	4bba      	ldr	r3, [pc, #744]	; (800253c <main+0x404>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	4294      	cmp	r4, r2
 8002258:	eb75 0303 	sbcs.w	r3, r5, r3
 800225c:	d343      	bcc.n	80022e6 <main+0x1ae>
			timemodbus = HAL_GetTick() + 0.5;
 800225e:	f002 fecd 	bl	8004ffc <HAL_GetTick>
 8002262:	4603      	mov	r3, r0
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe f8f9 	bl	800045c <__aeabi_ui2d>
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	4bb4      	ldr	r3, [pc, #720]	; (8002540 <main+0x408>)
 8002270:	f7fd ffb8 	bl	80001e4 <__adddf3>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	f7fe fca8 	bl	8000bd0 <__aeabi_d2ulz>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	49ad      	ldr	r1, [pc, #692]	; (800253c <main+0x404>)
 8002286:	e9c1 2300 	strd	r2, r3, [r1]
			registerFrame[0].U16 = 22881;
 800228a:	4bae      	ldr	r3, [pc, #696]	; (8002544 <main+0x40c>)
 800228c:	f645 1261 	movw	r2, #22881	; 0x5961
 8002290:	801a      	strh	r2, [r3, #0]
			registerFrame[17].U16 = (int) (ReadDegree - 350) * 10;
 8002292:	4bad      	ldr	r3, [pc, #692]	; (8002548 <main+0x410>)
 8002294:	edd3 7a00 	vldr	s15, [r3]
 8002298:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800254c <main+0x414>
 800229c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022a4:	ee17 3a90 	vmov	r3, s15
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	461a      	mov	r2, r3
 80022ac:	0092      	lsls	r2, r2, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	4ba3      	ldr	r3, [pc, #652]	; (8002544 <main+0x40c>)
 80022b6:	845a      	strh	r2, [r3, #34]	; 0x22
			registerFrame[18].U16 = abs(speed);
 80022b8:	4ba5      	ldr	r3, [pc, #660]	; (8002550 <main+0x418>)
 80022ba:	edd3 7a00 	vldr	s15, [r3]
 80022be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022c2:	ee17 3a90 	vmov	r3, s15
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	bfb8      	it	lt
 80022ca:	425b      	neglt	r3, r3
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	4b9d      	ldr	r3, [pc, #628]	; (8002544 <main+0x40c>)
 80022d0:	849a      	strh	r2, [r3, #36]	; 0x24
			registerFrame[19].U16 = acceleration;
 80022d2:	4ba0      	ldr	r3, [pc, #640]	; (8002554 <main+0x41c>)
 80022d4:	edd3 7a00 	vldr	s15, [r3]
 80022d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022dc:	ee17 3a90 	vmov	r3, s15
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	4b98      	ldr	r3, [pc, #608]	; (8002544 <main+0x40c>)
 80022e4:	84da      	strh	r2, [r3, #38]	; 0x26
		}
		if (HAL_GetTick() >= timestampTrajact) {
 80022e6:	f002 fe89 	bl	8004ffc <HAL_GetTick>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2200      	movs	r2, #0
 80022ee:	4698      	mov	r8, r3
 80022f0:	4691      	mov	r9, r2
 80022f2:	4b99      	ldr	r3, [pc, #612]	; (8002558 <main+0x420>)
 80022f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f8:	4590      	cmp	r8, r2
 80022fa:	eb79 0303 	sbcs.w	r3, r9, r3
 80022fe:	d352      	bcc.n	80023a6 <main+0x26e>
			timestampTrajact = HAL_GetTick() + 10;
 8002300:	f002 fe7c 	bl	8004ffc <HAL_GetTick>
 8002304:	4603      	mov	r3, r0
 8002306:	330a      	adds	r3, #10
 8002308:	2200      	movs	r2, #0
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	60fa      	str	r2, [r7, #12]
 800230e:	4b92      	ldr	r3, [pc, #584]	; (8002558 <main+0x420>)
 8002310:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002314:	e9c3 1200 	strd	r1, r2, [r3]
			if (indexposition < (timecycle * 100) - 1 && path == 1) {
 8002318:	4b90      	ldr	r3, [pc, #576]	; (800255c <main+0x424>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	ee07 3a90 	vmov	s15, r3
 8002320:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002324:	4b8e      	ldr	r3, [pc, #568]	; (8002560 <main+0x428>)
 8002326:	edd3 7a00 	vldr	s15, [r3]
 800232a:	eddf 6a8e 	vldr	s13, [pc, #568]	; 8002564 <main+0x42c>
 800232e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002336:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800233a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800233e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002342:	d530      	bpl.n	80023a6 <main+0x26e>
 8002344:	4b88      	ldr	r3, [pc, #544]	; (8002568 <main+0x430>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d12c      	bne.n	80023a6 <main+0x26e>
				positionTraject = q_positionN->data[indexposition];
 800234c:	4b87      	ldr	r3, [pc, #540]	; (800256c <main+0x434>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	4b82      	ldr	r3, [pc, #520]	; (800255c <main+0x424>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4413      	add	r3, r2
 800235a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235e:	4610      	mov	r0, r2
 8002360:	4619      	mov	r1, r3
 8002362:	f7fe fbcd 	bl	8000b00 <__aeabi_d2f>
 8002366:	4603      	mov	r3, r0
 8002368:	4a81      	ldr	r2, [pc, #516]	; (8002570 <main+0x438>)
 800236a:	6013      	str	r3, [r2, #0]
				velocityTraject = q_velocityN->data[indexposition];
 800236c:	4b81      	ldr	r3, [pc, #516]	; (8002574 <main+0x43c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	4b7a      	ldr	r3, [pc, #488]	; (800255c <main+0x424>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4413      	add	r3, r2
 800237a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237e:	4610      	mov	r0, r2
 8002380:	4619      	mov	r1, r3
 8002382:	f7fe fbbd 	bl	8000b00 <__aeabi_d2f>
 8002386:	4603      	mov	r3, r0
 8002388:	4a7b      	ldr	r2, [pc, #492]	; (8002578 <main+0x440>)
 800238a:	6013      	str	r3, [r2, #0]
				SetDegree = positionTraject;
 800238c:	4b78      	ldr	r3, [pc, #480]	; (8002570 <main+0x438>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a7a      	ldr	r2, [pc, #488]	; (800257c <main+0x444>)
 8002392:	6013      	str	r3, [r2, #0]
				SetVelocity = velocityTraject;
 8002394:	4b78      	ldr	r3, [pc, #480]	; (8002578 <main+0x440>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a79      	ldr	r2, [pc, #484]	; (8002580 <main+0x448>)
 800239a:	6013      	str	r3, [r2, #0]
				indexposition += 1;
 800239c:	4b6f      	ldr	r3, [pc, #444]	; (800255c <main+0x424>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	3301      	adds	r3, #1
 80023a2:	4a6e      	ldr	r2, [pc, #440]	; (800255c <main+0x424>)
 80023a4:	6013      	str	r3, [r2, #0]
			}
		}
		if(testgo == 1)
 80023a6:	4b77      	ldr	r3, [pc, #476]	; (8002584 <main+0x44c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d105      	bne.n	80023ba <main+0x282>
		{
			Mobus = Run_TrayMode;
 80023ae:	4b76      	ldr	r3, [pc, #472]	; (8002588 <main+0x450>)
 80023b0:	2205      	movs	r2, #5
 80023b2:	701a      	strb	r2, [r3, #0]
			testgo = 0;
 80023b4:	4b73      	ldr	r3, [pc, #460]	; (8002584 <main+0x44c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
		}
		if (HAL_GetTick() >= timestamp) {
 80023ba:	f002 fe1f 	bl	8004ffc <HAL_GetTick>
 80023be:	4603      	mov	r3, r0
 80023c0:	2200      	movs	r2, #0
 80023c2:	469a      	mov	sl, r3
 80023c4:	4693      	mov	fp, r2
 80023c6:	4b71      	ldr	r3, [pc, #452]	; (800258c <main+0x454>)
 80023c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023cc:	4592      	cmp	sl, r2
 80023ce:	eb7b 0303 	sbcs.w	r3, fp, r3
 80023d2:	f4ff af02 	bcc.w	80021da <main+0xa2>
			timestamp = HAL_GetTick() + 5;
 80023d6:	f002 fe11 	bl	8004ffc <HAL_GetTick>
 80023da:	4603      	mov	r3, r0
 80023dc:	3305      	adds	r3, #5
 80023de:	2200      	movs	r2, #0
 80023e0:	603b      	str	r3, [r7, #0]
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	4b69      	ldr	r3, [pc, #420]	; (800258c <main+0x454>)
 80023e6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80023ea:	e9c3 1200 	strd	r1, r2, [r3]
			//abc++;
			QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2); // Read QEI
 80023ee:	4b68      	ldr	r3, [pc, #416]	; (8002590 <main+0x458>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	4a67      	ldr	r2, [pc, #412]	; (8002594 <main+0x45c>)
 80023f6:	6013      	str	r3, [r2, #0]
			ReadDegree = (QEIReadRaw / 8192.0 * 360) * 160 / 360; // pulse to degree
 80023f8:	4b66      	ldr	r3, [pc, #408]	; (8002594 <main+0x45c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe f82d 	bl	800045c <__aeabi_ui2d>
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	4b64      	ldr	r3, [pc, #400]	; (8002598 <main+0x460>)
 8002408:	f7fe f9cc 	bl	80007a4 <__aeabi_ddiv>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4610      	mov	r0, r2
 8002412:	4619      	mov	r1, r3
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	4b60      	ldr	r3, [pc, #384]	; (800259c <main+0x464>)
 800241a:	f7fe f899 	bl	8000550 <__aeabi_dmul>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4610      	mov	r0, r2
 8002424:	4619      	mov	r1, r3
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	4b5d      	ldr	r3, [pc, #372]	; (80025a0 <main+0x468>)
 800242c:	f7fe f890 	bl	8000550 <__aeabi_dmul>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4610      	mov	r0, r2
 8002436:	4619      	mov	r1, r3
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	4b57      	ldr	r3, [pc, #348]	; (800259c <main+0x464>)
 800243e:	f7fe f9b1 	bl	80007a4 <__aeabi_ddiv>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4610      	mov	r0, r2
 8002448:	4619      	mov	r1, r3
 800244a:	f7fe fb59 	bl	8000b00 <__aeabi_d2f>
 800244e:	4603      	mov	r3, r0
 8002450:	4a3d      	ldr	r2, [pc, #244]	; (8002548 <main+0x410>)
 8002452:	6013      	str	r3, [r2, #0]
			error = SetDegree - ReadDegree;
 8002454:	4b49      	ldr	r3, [pc, #292]	; (800257c <main+0x444>)
 8002456:	ed93 7a00 	vldr	s14, [r3]
 800245a:	4b3b      	ldr	r3, [pc, #236]	; (8002548 <main+0x410>)
 800245c:	edd3 7a00 	vldr	s15, [r3]
 8002460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002464:	4b4f      	ldr	r3, [pc, #316]	; (80025a4 <main+0x46c>)
 8002466:	edc3 7a00 	vstr	s15, [r3]
			velocity();
 800246a:	f002 f84b 	bl	8004504 <velocity>
			accelerate();
 800246e:	f002 f8b1 	bl	80045d4 <accelerate>
			speed = ((QEIData.QEIVelocity / 8192.0) * 360.0) * 160 / 360;
 8002472:	4b4d      	ldr	r3, [pc, #308]	; (80025a8 <main+0x470>)
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe f812 	bl	80004a0 <__aeabi_f2d>
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	4b45      	ldr	r3, [pc, #276]	; (8002598 <main+0x460>)
 8002482:	f7fe f98f 	bl	80007a4 <__aeabi_ddiv>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4610      	mov	r0, r2
 800248c:	4619      	mov	r1, r3
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	4b42      	ldr	r3, [pc, #264]	; (800259c <main+0x464>)
 8002494:	f7fe f85c 	bl	8000550 <__aeabi_dmul>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	4b3e      	ldr	r3, [pc, #248]	; (80025a0 <main+0x468>)
 80024a6:	f7fe f853 	bl	8000550 <__aeabi_dmul>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	4b39      	ldr	r3, [pc, #228]	; (800259c <main+0x464>)
 80024b8:	f7fe f974 	bl	80007a4 <__aeabi_ddiv>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	f7fe fb1c 	bl	8000b00 <__aeabi_d2f>
 80024c8:	4603      	mov	r3, r0
 80024ca:	4a21      	ldr	r2, [pc, #132]	; (8002550 <main+0x418>)
 80024cc:	6013      	str	r3, [r2, #0]
			acceleration = QEIAcc.QEIVelocity;
 80024ce:	4b37      	ldr	r3, [pc, #220]	; (80025ac <main+0x474>)
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	4a20      	ldr	r2, [pc, #128]	; (8002554 <main+0x41c>)
 80024d4:	6013      	str	r3, [r2, #0]
			DegreeFeedback = control_interrupt(); // PID function
 80024d6:	f001 ff41 	bl	800435c <control_interrupt>
 80024da:	eef0 7a40 	vmov.f32	s15, s0
 80024de:	4b34      	ldr	r3, [pc, #208]	; (80025b0 <main+0x478>)
 80024e0:	edc3 7a00 	vstr	s15, [r3]

			if (velocityTraject == 0) {
 80024e4:	4b24      	ldr	r3, [pc, #144]	; (8002578 <main+0x440>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f2:	d103      	bne.n	80024fc <main+0x3c4>
				s2 = 0;
 80024f4:	4b2f      	ldr	r3, [pc, #188]	; (80025b4 <main+0x47c>)
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
			}
			if (Joystick_Control == 1) {
 80024fc:	4b2e      	ldr	r3, [pc, #184]	; (80025b8 <main+0x480>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b01      	cmp	r3, #1
 8002502:	f040 8086 	bne.w	8002612 <main+0x4da>
				DegreeFeedback = 0;
 8002506:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <main+0x478>)
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
				s = 0;
 800250e:	4b2b      	ldr	r3, [pc, #172]	; (80025bc <main+0x484>)
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
				s2 = 0;
 8002516:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <main+0x47c>)
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
				error = 0;
 800251e:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <main+0x46c>)
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
				error2 = 0;
 8002526:	4b26      	ldr	r3, [pc, #152]	; (80025c0 <main+0x488>)
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
				if (Joystick_position[0] >= 3150) {
 800252e:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <main+0x48c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f640 424d 	movw	r2, #3149	; 0xc4d
 8002536:	4293      	cmp	r3, r2
 8002538:	e046      	b.n	80025c8 <main+0x490>
 800253a:	bf00      	nop
 800253c:	20001328 	.word	0x20001328
 8002540:	3fe00000 	.word	0x3fe00000
 8002544:	200011ec 	.word	0x200011ec
 8002548:	2000130c 	.word	0x2000130c
 800254c:	43af0000 	.word	0x43af0000
 8002550:	2000127c 	.word	0x2000127c
 8002554:	20001280 	.word	0x20001280
 8002558:	20001330 	.word	0x20001330
 800255c:	200012e4 	.word	0x200012e4
 8002560:	20000960 	.word	0x20000960
 8002564:	42c80000 	.word	0x42c80000
 8002568:	20001284 	.word	0x20001284
 800256c:	200012dc 	.word	0x200012dc
 8002570:	2000128c 	.word	0x2000128c
 8002574:	200012d8 	.word	0x200012d8
 8002578:	20001290 	.word	0x20001290
 800257c:	20001310 	.word	0x20001310
 8002580:	20000348 	.word	0x20000348
 8002584:	2000131c 	.word	0x2000131c
 8002588:	20000d10 	.word	0x20000d10
 800258c:	20001320 	.word	0x20001320
 8002590:	200004ec 	.word	0x200004ec
 8002594:	20001288 	.word	0x20001288
 8002598:	40c00000 	.word	0x40c00000
 800259c:	40768000 	.word	0x40768000
 80025a0:	40640000 	.word	0x40640000
 80025a4:	20001318 	.word	0x20001318
 80025a8:	200012a0 	.word	0x200012a0
 80025ac:	200012b8 	.word	0x200012b8
 80025b0:	20001314 	.word	0x20001314
 80025b4:	200012fc 	.word	0x200012fc
 80025b8:	20000330 	.word	0x20000330
 80025bc:	200012f0 	.word	0x200012f0
 80025c0:	20001300 	.word	0x20001300
 80025c4:	20001294 	.word	0x20001294
 80025c8:	d90a      	bls.n	80025e0 <main+0x4a8>
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 16383); // 20 %
 80025ca:	4b53      	ldr	r3, [pc, #332]	; (8002718 <main+0x5e0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80025d2:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80025d4:	2201      	movs	r2, #1
 80025d6:	2180      	movs	r1, #128	; 0x80
 80025d8:	4850      	ldr	r0, [pc, #320]	; (800271c <main+0x5e4>)
 80025da:	f003 ffd9 	bl	8006590 <HAL_GPIO_WritePin>
 80025de:	e5fc      	b.n	80021da <main+0xa2>
				} else if (Joystick_position[0] <= 100) {
 80025e0:	4b4f      	ldr	r3, [pc, #316]	; (8002720 <main+0x5e8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b64      	cmp	r3, #100	; 0x64
 80025e6:	d80a      	bhi.n	80025fe <main+0x4c6>
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 16383); // 20 %
 80025e8:	4b4b      	ldr	r3, [pc, #300]	; (8002718 <main+0x5e0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80025f0:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2180      	movs	r1, #128	; 0x80
 80025f6:	4849      	ldr	r0, [pc, #292]	; (800271c <main+0x5e4>)
 80025f8:	f003 ffca 	bl	8006590 <HAL_GPIO_WritePin>
 80025fc:	e5ed      	b.n	80021da <main+0xa2>
				} else {
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80025fe:	4b46      	ldr	r3, [pc, #280]	; (8002718 <main+0x5e0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2200      	movs	r2, #0
 8002604:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8002606:	2200      	movs	r2, #0
 8002608:	2180      	movs	r1, #128	; 0x80
 800260a:	4844      	ldr	r0, [pc, #272]	; (800271c <main+0x5e4>)
 800260c:	f003 ffc0 	bl	8006590 <HAL_GPIO_WritePin>
 8002610:	e5e3      	b.n	80021da <main+0xa2>
				}
			} else if (Joystick_Control == 0) {
 8002612:	4b44      	ldr	r3, [pc, #272]	; (8002724 <main+0x5ec>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f47f addf 	bne.w	80021da <main+0xa2>
				if (SetDegree < 0) {
 800261c:	4b42      	ldr	r3, [pc, #264]	; (8002728 <main+0x5f0>)
 800261e:	edd3 7a00 	vldr	s15, [r3]
 8002622:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800262a:	d503      	bpl.n	8002634 <main+0x4fc>
					SetDegree = 0; // minimum value
 800262c:	4b3e      	ldr	r3, [pc, #248]	; (8002728 <main+0x5f0>)
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
				}
				if (SetDegree > 700) {
 8002634:	4b3c      	ldr	r3, [pc, #240]	; (8002728 <main+0x5f0>)
 8002636:	edd3 7a00 	vldr	s15, [r3]
 800263a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800272c <main+0x5f4>
 800263e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002646:	dd02      	ble.n	800264e <main+0x516>
					SetDegree = 700; // maximum value
 8002648:	4b37      	ldr	r3, [pc, #220]	; (8002728 <main+0x5f0>)
 800264a:	4a39      	ldr	r2, [pc, #228]	; (8002730 <main+0x5f8>)
 800264c:	601a      	str	r2, [r3, #0]
				}

				if (error > 0) { // setpoint > read_encoder
 800264e:	4b39      	ldr	r3, [pc, #228]	; (8002734 <main+0x5fc>)
 8002650:	edd3 7a00 	vldr	s15, [r3]
 8002654:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265c:	dd23      	ble.n	80026a6 <main+0x56e>
					if (error < 0.2) {
 800265e:	4b35      	ldr	r3, [pc, #212]	; (8002734 <main+0x5fc>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7fd ff1c 	bl	80004a0 <__aeabi_f2d>
 8002668:	a329      	add	r3, pc, #164	; (adr r3, 8002710 <main+0x5d8>)
 800266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266e:	f7fe f9e1 	bl	8000a34 <__aeabi_dcmplt>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d007      	beq.n	8002688 <main+0x550>
						DegreeFeedback = 0; // Limit Position
 8002678:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <main+0x600>)
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
						s = 0;
 8002680:	4b2e      	ldr	r3, [pc, #184]	; (800273c <main+0x604>)
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
					}
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, DegreeFeedback);
 8002688:	4b2b      	ldr	r3, [pc, #172]	; (8002738 <main+0x600>)
 800268a:	edd3 7a00 	vldr	s15, [r3]
 800268e:	4b22      	ldr	r3, [pc, #136]	; (8002718 <main+0x5e0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002696:	ee17 2a90 	vmov	r2, s15
 800269a:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800269c:	2200      	movs	r2, #0
 800269e:	2180      	movs	r1, #128	; 0x80
 80026a0:	481e      	ldr	r0, [pc, #120]	; (800271c <main+0x5e4>)
 80026a2:	f003 ff75 	bl	8006590 <HAL_GPIO_WritePin>
				}
				if (error < 0) { // setpoint < read_encoder
 80026a6:	4b23      	ldr	r3, [pc, #140]	; (8002734 <main+0x5fc>)
 80026a8:	edd3 7a00 	vldr	s15, [r3]
 80026ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b4:	d52a      	bpl.n	800270c <main+0x5d4>
					if (error * -1 < 0.2) {
 80026b6:	4b1f      	ldr	r3, [pc, #124]	; (8002734 <main+0x5fc>)
 80026b8:	edd3 7a00 	vldr	s15, [r3]
 80026bc:	eef1 7a67 	vneg.f32	s15, s15
 80026c0:	ee17 3a90 	vmov	r3, s15
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fd feeb 	bl	80004a0 <__aeabi_f2d>
 80026ca:	a311      	add	r3, pc, #68	; (adr r3, 8002710 <main+0x5d8>)
 80026cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d0:	f7fe f9b0 	bl	8000a34 <__aeabi_dcmplt>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d007      	beq.n	80026ea <main+0x5b2>
						DegreeFeedback = 0; // Limit Position
 80026da:	4b17      	ldr	r3, [pc, #92]	; (8002738 <main+0x600>)
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
						s = 0;
 80026e2:	4b16      	ldr	r3, [pc, #88]	; (800273c <main+0x604>)
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
					}
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, DegreeFeedback * -1);
 80026ea:	4b13      	ldr	r3, [pc, #76]	; (8002738 <main+0x600>)
 80026ec:	edd3 7a00 	vldr	s15, [r3]
 80026f0:	eef1 7a67 	vneg.f32	s15, s15
 80026f4:	4b08      	ldr	r3, [pc, #32]	; (8002718 <main+0x5e0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026fc:	ee17 2a90 	vmov	r2, s15
 8002700:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8002702:	2201      	movs	r2, #1
 8002704:	2180      	movs	r1, #128	; 0x80
 8002706:	4805      	ldr	r0, [pc, #20]	; (800271c <main+0x5e4>)
 8002708:	f003 ff42 	bl	8006590 <HAL_GPIO_WritePin>
		if (starttray == 1) {
 800270c:	e565      	b.n	80021da <main+0xa2>
 800270e:	bf00      	nop
 8002710:	9999999a 	.word	0x9999999a
 8002714:	3fc99999 	.word	0x3fc99999
 8002718:	20000654 	.word	0x20000654
 800271c:	40020000 	.word	0x40020000
 8002720:	20001294 	.word	0x20001294
 8002724:	20000330 	.word	0x20000330
 8002728:	20001310 	.word	0x20001310
 800272c:	442f0000 	.word	0x442f0000
 8002730:	442f0000 	.word	0x442f0000
 8002734:	20001318 	.word	0x20001318
 8002738:	20001314 	.word	0x20001314
 800273c:	200012f0 	.word	0x200012f0

08002740 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002740:	b580      	push	{r7, lr}
 8002742:	b094      	sub	sp, #80	; 0x50
 8002744:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002746:	f107 0320 	add.w	r3, r7, #32
 800274a:	2230      	movs	r2, #48	; 0x30
 800274c:	2100      	movs	r1, #0
 800274e:	4618      	mov	r0, r3
 8002750:	f007 fd28 	bl	800a1a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002754:	f107 030c 	add.w	r3, r7, #12
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002764:	2300      	movs	r3, #0
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	4b27      	ldr	r3, [pc, #156]	; (8002808 <SystemClock_Config+0xc8>)
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	4a26      	ldr	r2, [pc, #152]	; (8002808 <SystemClock_Config+0xc8>)
 800276e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002772:	6413      	str	r3, [r2, #64]	; 0x40
 8002774:	4b24      	ldr	r3, [pc, #144]	; (8002808 <SystemClock_Config+0xc8>)
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002780:	2300      	movs	r3, #0
 8002782:	607b      	str	r3, [r7, #4]
 8002784:	4b21      	ldr	r3, [pc, #132]	; (800280c <SystemClock_Config+0xcc>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a20      	ldr	r2, [pc, #128]	; (800280c <SystemClock_Config+0xcc>)
 800278a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4b1e      	ldr	r3, [pc, #120]	; (800280c <SystemClock_Config+0xcc>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800279c:	2302      	movs	r3, #2
 800279e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027a0:	2301      	movs	r3, #1
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027a4:	2310      	movs	r3, #16
 80027a6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027a8:	2302      	movs	r3, #2
 80027aa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027ac:	2300      	movs	r3, #0
 80027ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80027b0:	2308      	movs	r3, #8
 80027b2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 80027b4:	2364      	movs	r3, #100	; 0x64
 80027b6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027b8:	2302      	movs	r3, #2
 80027ba:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80027bc:	2304      	movs	r3, #4
 80027be:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80027c0:	f107 0320 	add.w	r3, r7, #32
 80027c4:	4618      	mov	r0, r3
 80027c6:	f004 f865 	bl	8006894 <HAL_RCC_OscConfig>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <SystemClock_Config+0x94>
		Error_Handler();
 80027d0:	f002 f804 	bl	80047dc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80027d4:	230f      	movs	r3, #15
 80027d6:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027d8:	2302      	movs	r3, #2
 80027da:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80027ea:	f107 030c 	add.w	r3, r7, #12
 80027ee:	2103      	movs	r1, #3
 80027f0:	4618      	mov	r0, r3
 80027f2:	f004 fac7 	bl	8006d84 <HAL_RCC_ClockConfig>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <SystemClock_Config+0xc0>
		Error_Handler();
 80027fc:	f001 ffee 	bl	80047dc <Error_Handler>
	}
}
 8002800:	bf00      	nop
 8002802:	3750      	adds	r7, #80	; 0x50
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40023800 	.word	0x40023800
 800280c:	40007000 	.word	0x40007000

08002810 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002816:	463b      	mov	r3, r7
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8002822:	4b28      	ldr	r3, [pc, #160]	; (80028c4 <MX_ADC1_Init+0xb4>)
 8002824:	4a28      	ldr	r2, [pc, #160]	; (80028c8 <MX_ADC1_Init+0xb8>)
 8002826:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002828:	4b26      	ldr	r3, [pc, #152]	; (80028c4 <MX_ADC1_Init+0xb4>)
 800282a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800282e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002830:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <MX_ADC1_Init+0xb4>)
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8002836:	4b23      	ldr	r3, [pc, #140]	; (80028c4 <MX_ADC1_Init+0xb4>)
 8002838:	2201      	movs	r2, #1
 800283a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800283c:	4b21      	ldr	r3, [pc, #132]	; (80028c4 <MX_ADC1_Init+0xb4>)
 800283e:	2201      	movs	r2, #1
 8002840:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002842:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <MX_ADC1_Init+0xb4>)
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800284a:	4b1e      	ldr	r3, [pc, #120]	; (80028c4 <MX_ADC1_Init+0xb4>)
 800284c:	2200      	movs	r2, #0
 800284e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002850:	4b1c      	ldr	r3, [pc, #112]	; (80028c4 <MX_ADC1_Init+0xb4>)
 8002852:	4a1e      	ldr	r2, [pc, #120]	; (80028cc <MX_ADC1_Init+0xbc>)
 8002854:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002856:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <MX_ADC1_Init+0xb4>)
 8002858:	2200      	movs	r2, #0
 800285a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 800285c:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <MX_ADC1_Init+0xb4>)
 800285e:	2202      	movs	r2, #2
 8002860:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8002862:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <MX_ADC1_Init+0xb4>)
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800286a:	4b16      	ldr	r3, [pc, #88]	; (80028c4 <MX_ADC1_Init+0xb4>)
 800286c:	2200      	movs	r2, #0
 800286e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002870:	4814      	ldr	r0, [pc, #80]	; (80028c4 <MX_ADC1_Init+0xb4>)
 8002872:	f002 fbcf 	bl	8005014 <HAL_ADC_Init>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_ADC1_Init+0x70>
		Error_Handler();
 800287c:	f001 ffae 	bl	80047dc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8002880:	2308      	movs	r3, #8
 8002882:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8002884:	2301      	movs	r3, #1
 8002886:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002888:	2303      	movs	r3, #3
 800288a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800288c:	463b      	mov	r3, r7
 800288e:	4619      	mov	r1, r3
 8002890:	480c      	ldr	r0, [pc, #48]	; (80028c4 <MX_ADC1_Init+0xb4>)
 8002892:	f002 fd11 	bl	80052b8 <HAL_ADC_ConfigChannel>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_ADC1_Init+0x90>
		Error_Handler();
 800289c:	f001 ff9e 	bl	80047dc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 80028a0:	2304      	movs	r3, #4
 80028a2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 80028a4:	2302      	movs	r3, #2
 80028a6:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80028a8:	463b      	mov	r3, r7
 80028aa:	4619      	mov	r1, r3
 80028ac:	4805      	ldr	r0, [pc, #20]	; (80028c4 <MX_ADC1_Init+0xb4>)
 80028ae:	f002 fd03 	bl	80052b8 <HAL_ADC_ConfigChannel>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_ADC1_Init+0xac>
		Error_Handler();
 80028b8:	f001 ff90 	bl	80047dc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80028bc:	bf00      	nop
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	200003f0 	.word	0x200003f0
 80028c8:	40012000 	.word	0x40012000
 80028cc:	0f000001 	.word	0x0f000001

080028d0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80028d4:	4b12      	ldr	r3, [pc, #72]	; (8002920 <MX_I2C1_Init+0x50>)
 80028d6:	4a13      	ldr	r2, [pc, #76]	; (8002924 <MX_I2C1_Init+0x54>)
 80028d8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <MX_I2C1_Init+0x50>)
 80028dc:	4a12      	ldr	r2, [pc, #72]	; (8002928 <MX_I2C1_Init+0x58>)
 80028de:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028e0:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <MX_I2C1_Init+0x50>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <MX_I2C1_Init+0x50>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <MX_I2C1_Init+0x50>)
 80028ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028f2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028f4:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <MX_I2C1_Init+0x50>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80028fa:	4b09      	ldr	r3, [pc, #36]	; (8002920 <MX_I2C1_Init+0x50>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002900:	4b07      	ldr	r3, [pc, #28]	; (8002920 <MX_I2C1_Init+0x50>)
 8002902:	2200      	movs	r2, #0
 8002904:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002906:	4b06      	ldr	r3, [pc, #24]	; (8002920 <MX_I2C1_Init+0x50>)
 8002908:	2200      	movs	r2, #0
 800290a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800290c:	4804      	ldr	r0, [pc, #16]	; (8002920 <MX_I2C1_Init+0x50>)
 800290e:	f003 fe7d 	bl	800660c <HAL_I2C_Init>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8002918:	f001 ff60 	bl	80047dc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20000498 	.word	0x20000498
 8002924:	40005400 	.word	0x40005400
 8002928:	000186a0 	.word	0x000186a0

0800292c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800292c:	b580      	push	{r7, lr}
 800292e:	b08c      	sub	sp, #48	; 0x30
 8002930:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8002932:	f107 030c 	add.w	r3, r7, #12
 8002936:	2224      	movs	r2, #36	; 0x24
 8002938:	2100      	movs	r1, #0
 800293a:	4618      	mov	r0, r3
 800293c:	f007 fc32 	bl	800a1a4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002940:	1d3b      	adds	r3, r7, #4
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002948:	4b21      	ldr	r3, [pc, #132]	; (80029d0 <MX_TIM2_Init+0xa4>)
 800294a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800294e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002950:	4b1f      	ldr	r3, [pc, #124]	; (80029d0 <MX_TIM2_Init+0xa4>)
 8002952:	2200      	movs	r2, #0
 8002954:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002956:	4b1e      	ldr	r3, [pc, #120]	; (80029d0 <MX_TIM2_Init+0xa4>)
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = QEI_PERIOD - 1;
 800295c:	4b1c      	ldr	r3, [pc, #112]	; (80029d0 <MX_TIM2_Init+0xa4>)
 800295e:	f649 72ff 	movw	r2, #40959	; 0x9fff
 8002962:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002964:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <MX_TIM2_Init+0xa4>)
 8002966:	2200      	movs	r2, #0
 8002968:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800296a:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <MX_TIM2_Init+0xa4>)
 800296c:	2200      	movs	r2, #0
 800296e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002970:	2303      	movs	r3, #3
 8002972:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002974:	2300      	movs	r3, #0
 8002976:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002978:	2301      	movs	r3, #1
 800297a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800297c:	2300      	movs	r3, #0
 800297e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002980:	2300      	movs	r3, #0
 8002982:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002984:	2300      	movs	r3, #0
 8002986:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002988:	2301      	movs	r3, #1
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800298c:	2300      	movs	r3, #0
 800298e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8002994:	f107 030c 	add.w	r3, r7, #12
 8002998:	4619      	mov	r1, r3
 800299a:	480d      	ldr	r0, [pc, #52]	; (80029d0 <MX_TIM2_Init+0xa4>)
 800299c:	f004 ff74 	bl	8007888 <HAL_TIM_Encoder_Init>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <MX_TIM2_Init+0x7e>
		Error_Handler();
 80029a6:	f001 ff19 	bl	80047dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029aa:	2300      	movs	r3, #0
 80029ac:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	4619      	mov	r1, r3
 80029b6:	4806      	ldr	r0, [pc, #24]	; (80029d0 <MX_TIM2_Init+0xa4>)
 80029b8:	f006 f87e 	bl	8008ab8 <HAL_TIMEx_MasterConfigSynchronization>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 80029c2:	f001 ff0b 	bl	80047dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80029c6:	bf00      	nop
 80029c8:	3730      	adds	r7, #48	; 0x30
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	200004ec 	.word	0x200004ec

080029d4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80029da:	f107 0308 	add.w	r3, r7, #8
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	609a      	str	r2, [r3, #8]
 80029e6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80029e8:	463b      	mov	r3, r7
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80029f0:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <MX_TIM3_Init+0x94>)
 80029f2:	4a1e      	ldr	r2, [pc, #120]	; (8002a6c <MX_TIM3_Init+0x98>)
 80029f4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80029f6:	4b1c      	ldr	r3, [pc, #112]	; (8002a68 <MX_TIM3_Init+0x94>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029fc:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <MX_TIM3_Init+0x94>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8002a02:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <MX_TIM3_Init+0x94>)
 8002a04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a08:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a0a:	4b17      	ldr	r3, [pc, #92]	; (8002a68 <MX_TIM3_Init+0x94>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a10:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <MX_TIM3_Init+0x94>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8002a16:	4814      	ldr	r0, [pc, #80]	; (8002a68 <MX_TIM3_Init+0x94>)
 8002a18:	f004 fbd4 	bl	80071c4 <HAL_TIM_Base_Init>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <MX_TIM3_Init+0x52>
		Error_Handler();
 8002a22:	f001 fedb 	bl	80047dc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a2a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002a2c:	f107 0308 	add.w	r3, r7, #8
 8002a30:	4619      	mov	r1, r3
 8002a32:	480d      	ldr	r0, [pc, #52]	; (8002a68 <MX_TIM3_Init+0x94>)
 8002a34:	f005 fab0 	bl	8007f98 <HAL_TIM_ConfigClockSource>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_TIM3_Init+0x6e>
		Error_Handler();
 8002a3e:	f001 fecd 	bl	80047dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a42:	2300      	movs	r3, #0
 8002a44:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a46:	2300      	movs	r3, #0
 8002a48:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002a4a:	463b      	mov	r3, r7
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4806      	ldr	r0, [pc, #24]	; (8002a68 <MX_TIM3_Init+0x94>)
 8002a50:	f006 f832 	bl	8008ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8002a5a:	f001 febf 	bl	80047dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8002a5e:	bf00      	nop
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200005a0 	.word	0x200005a0
 8002a6c:	40000400 	.word	0x40000400

08002a70 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08e      	sub	sp, #56	; 0x38
 8002a74:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002a76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	609a      	str	r2, [r3, #8]
 8002a82:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002a84:	f107 0320 	add.w	r3, r7, #32
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002a8e:	1d3b      	adds	r3, r7, #4
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
 8002a9c:	615a      	str	r2, [r3, #20]
 8002a9e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002aa0:	4b2c      	ldr	r3, [pc, #176]	; (8002b54 <MX_TIM4_Init+0xe4>)
 8002aa2:	4a2d      	ldr	r2, [pc, #180]	; (8002b58 <MX_TIM4_Init+0xe8>)
 8002aa4:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8002aa6:	4b2b      	ldr	r3, [pc, #172]	; (8002b54 <MX_TIM4_Init+0xe4>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aac:	4b29      	ldr	r3, [pc, #164]	; (8002b54 <MX_TIM4_Init+0xe4>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8002ab2:	4b28      	ldr	r3, [pc, #160]	; (8002b54 <MX_TIM4_Init+0xe4>)
 8002ab4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ab8:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aba:	4b26      	ldr	r3, [pc, #152]	; (8002b54 <MX_TIM4_Init+0xe4>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac0:	4b24      	ldr	r3, [pc, #144]	; (8002b54 <MX_TIM4_Init+0xe4>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8002ac6:	4823      	ldr	r0, [pc, #140]	; (8002b54 <MX_TIM4_Init+0xe4>)
 8002ac8:	f004 fb7c 	bl	80071c4 <HAL_TIM_Base_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_TIM4_Init+0x66>
		Error_Handler();
 8002ad2:	f001 fe83 	bl	80047dc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8002adc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	481c      	ldr	r0, [pc, #112]	; (8002b54 <MX_TIM4_Init+0xe4>)
 8002ae4:	f005 fa58 	bl	8007f98 <HAL_TIM_ConfigClockSource>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_TIM4_Init+0x82>
		Error_Handler();
 8002aee:	f001 fe75 	bl	80047dc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8002af2:	4818      	ldr	r0, [pc, #96]	; (8002b54 <MX_TIM4_Init+0xe4>)
 8002af4:	f004 fce4 	bl	80074c0 <HAL_TIM_PWM_Init>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <MX_TIM4_Init+0x92>
		Error_Handler();
 8002afe:	f001 fe6d 	bl	80047dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b02:	2300      	movs	r3, #0
 8002b04:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8002b0a:	f107 0320 	add.w	r3, r7, #32
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4810      	ldr	r0, [pc, #64]	; (8002b54 <MX_TIM4_Init+0xe4>)
 8002b12:	f005 ffd1 	bl	8008ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_TIM4_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8002b1c:	f001 fe5e 	bl	80047dc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b20:	2360      	movs	r3, #96	; 0x60
 8002b22:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8002b30:	1d3b      	adds	r3, r7, #4
 8002b32:	2200      	movs	r2, #0
 8002b34:	4619      	mov	r1, r3
 8002b36:	4807      	ldr	r0, [pc, #28]	; (8002b54 <MX_TIM4_Init+0xe4>)
 8002b38:	f005 f96c 	bl	8007e14 <HAL_TIM_PWM_ConfigChannel>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_TIM4_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8002b42:	f001 fe4b 	bl	80047dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8002b46:	4803      	ldr	r0, [pc, #12]	; (8002b54 <MX_TIM4_Init+0xe4>)
 8002b48:	f002 f856 	bl	8004bf8 <HAL_TIM_MspPostInit>

}
 8002b4c:	bf00      	nop
 8002b4e:	3738      	adds	r7, #56	; 0x38
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20000654 	.word	0x20000654
 8002b58:	40000800 	.word	0x40000800

08002b5c <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002b62:	f107 0308 	add.w	r3, r7, #8
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	605a      	str	r2, [r3, #4]
 8002b6c:	609a      	str	r2, [r3, #8]
 8002b6e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002b70:	463b      	mov	r3, r7
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8002b78:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <MX_TIM5_Init+0x94>)
 8002b7a:	4a1e      	ldr	r2, [pc, #120]	; (8002bf4 <MX_TIM5_Init+0x98>)
 8002b7c:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 83;
 8002b7e:	4b1c      	ldr	r3, [pc, #112]	; (8002bf0 <MX_TIM5_Init+0x94>)
 8002b80:	2253      	movs	r2, #83	; 0x53
 8002b82:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b84:	4b1a      	ldr	r3, [pc, #104]	; (8002bf0 <MX_TIM5_Init+0x94>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8002b8a:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <MX_TIM5_Init+0x94>)
 8002b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b90:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b92:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <MX_TIM5_Init+0x94>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b98:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <MX_TIM5_Init+0x94>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8002b9e:	4814      	ldr	r0, [pc, #80]	; (8002bf0 <MX_TIM5_Init+0x94>)
 8002ba0:	f004 fb10 	bl	80071c4 <HAL_TIM_Base_Init>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <MX_TIM5_Init+0x52>
		Error_Handler();
 8002baa:	f001 fe17 	bl	80047dc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bb2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8002bb4:	f107 0308 	add.w	r3, r7, #8
 8002bb8:	4619      	mov	r1, r3
 8002bba:	480d      	ldr	r0, [pc, #52]	; (8002bf0 <MX_TIM5_Init+0x94>)
 8002bbc:	f005 f9ec 	bl	8007f98 <HAL_TIM_ConfigClockSource>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <MX_TIM5_Init+0x6e>
		Error_Handler();
 8002bc6:	f001 fe09 	bl	80047dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002bd2:	463b      	mov	r3, r7
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4806      	ldr	r0, [pc, #24]	; (8002bf0 <MX_TIM5_Init+0x94>)
 8002bd8:	f005 ff6e 	bl	8008ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_TIM5_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8002be2:	f001 fdfb 	bl	80047dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8002be6:	bf00      	nop
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000708 	.word	0x20000708
 8002bf4:	40000c00 	.word	0x40000c00

08002bf8 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002bfe:	1d3b      	adds	r3, r7, #4
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	611a      	str	r2, [r3, #16]
 8002c0c:	615a      	str	r2, [r3, #20]
 8002c0e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8002c10:	4b21      	ldr	r3, [pc, #132]	; (8002c98 <MX_TIM11_Init+0xa0>)
 8002c12:	4a22      	ldr	r2, [pc, #136]	; (8002c9c <MX_TIM11_Init+0xa4>)
 8002c14:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 99;
 8002c16:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <MX_TIM11_Init+0xa0>)
 8002c18:	2263      	movs	r2, #99	; 0x63
 8002c1a:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c1c:	4b1e      	ldr	r3, [pc, #120]	; (8002c98 <MX_TIM11_Init+0xa0>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 2005;
 8002c22:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <MX_TIM11_Init+0xa0>)
 8002c24:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8002c28:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c2a:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <MX_TIM11_Init+0xa0>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c30:	4b19      	ldr	r3, [pc, #100]	; (8002c98 <MX_TIM11_Init+0xa0>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 8002c36:	4818      	ldr	r0, [pc, #96]	; (8002c98 <MX_TIM11_Init+0xa0>)
 8002c38:	f004 fac4 	bl	80071c4 <HAL_TIM_Base_Init>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_TIM11_Init+0x4e>
		Error_Handler();
 8002c42:	f001 fdcb 	bl	80047dc <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim11) != HAL_OK) {
 8002c46:	4814      	ldr	r0, [pc, #80]	; (8002c98 <MX_TIM11_Init+0xa0>)
 8002c48:	f004 fbd4 	bl	80073f4 <HAL_TIM_OC_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_TIM11_Init+0x5e>
		Error_Handler();
 8002c52:	f001 fdc3 	bl	80047dc <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK) {
 8002c56:	2108      	movs	r1, #8
 8002c58:	480f      	ldr	r0, [pc, #60]	; (8002c98 <MX_TIM11_Init+0xa0>)
 8002c5a:	f004 fd47 	bl	80076ec <HAL_TIM_OnePulse_Init>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <MX_TIM11_Init+0x70>
		Error_Handler();
 8002c64:	f001 fdba 	bl	80047dc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002c68:	2310      	movs	r3, #16
 8002c6a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 1433;
 8002c6c:	f240 5399 	movw	r3, #1433	; 0x599
 8002c70:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1)
 8002c7a:	1d3b      	adds	r3, r7, #4
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4805      	ldr	r0, [pc, #20]	; (8002c98 <MX_TIM11_Init+0xa0>)
 8002c82:	f005 f86b 	bl	8007d5c <HAL_TIM_OC_ConfigChannel>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <MX_TIM11_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8002c8c:	f001 fda6 	bl	80047dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 8002c90:	bf00      	nop
 8002c92:	3720      	adds	r7, #32
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	200007bc 	.word	0x200007bc
 8002c9c:	40014800 	.word	0x40014800

08002ca0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002ca4:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <MX_USART2_UART_Init+0x50>)
 8002ca6:	4a13      	ldr	r2, [pc, #76]	; (8002cf4 <MX_USART2_UART_Init+0x54>)
 8002ca8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 19200;
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <MX_USART2_UART_Init+0x50>)
 8002cac:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002cb0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002cb2:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <MX_USART2_UART_Init+0x50>)
 8002cb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cb8:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002cba:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <MX_USART2_UART_Init+0x50>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <MX_USART2_UART_Init+0x50>)
 8002cc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cc6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002cc8:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <MX_USART2_UART_Init+0x50>)
 8002cca:	220c      	movs	r2, #12
 8002ccc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cce:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <MX_USART2_UART_Init+0x50>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <MX_USART2_UART_Init+0x50>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002cda:	4805      	ldr	r0, [pc, #20]	; (8002cf0 <MX_USART2_UART_Init+0x50>)
 8002cdc:	f005 ff78 	bl	8008bd0 <HAL_UART_Init>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <MX_USART2_UART_Init+0x4a>
		Error_Handler();
 8002ce6:	f001 fd79 	bl	80047dc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000870 	.word	0x20000870
 8002cf4:	40004400 	.word	0x40004400

08002cf8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	607b      	str	r3, [r7, #4]
 8002d02:	4b17      	ldr	r3, [pc, #92]	; (8002d60 <MX_DMA_Init+0x68>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	4a16      	ldr	r2, [pc, #88]	; (8002d60 <MX_DMA_Init+0x68>)
 8002d08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0e:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <MX_DMA_Init+0x68>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d16:	607b      	str	r3, [r7, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	603b      	str	r3, [r7, #0]
 8002d1e:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <MX_DMA_Init+0x68>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	4a0f      	ldr	r2, [pc, #60]	; (8002d60 <MX_DMA_Init+0x68>)
 8002d24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d28:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2a:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <MX_DMA_Init+0x68>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002d36:	2200      	movs	r2, #0
 8002d38:	2100      	movs	r1, #0
 8002d3a:	2011      	movs	r0, #17
 8002d3c:	f002 fe47 	bl	80059ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002d40:	2011      	movs	r0, #17
 8002d42:	f002 fe60 	bl	8005a06 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002d46:	2200      	movs	r2, #0
 8002d48:	2100      	movs	r1, #0
 8002d4a:	2038      	movs	r0, #56	; 0x38
 8002d4c:	f002 fe3f 	bl	80059ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002d50:	2038      	movs	r0, #56	; 0x38
 8002d52:	f002 fe58 	bl	8005a06 <HAL_NVIC_EnableIRQ>

}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800

08002d64 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	; 0x28
 8002d68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002d6a:	f107 0314 	add.w	r3, r7, #20
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	605a      	str	r2, [r3, #4]
 8002d74:	609a      	str	r2, [r3, #8]
 8002d76:	60da      	str	r2, [r3, #12]
 8002d78:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	4b44      	ldr	r3, [pc, #272]	; (8002e90 <MX_GPIO_Init+0x12c>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	4a43      	ldr	r2, [pc, #268]	; (8002e90 <MX_GPIO_Init+0x12c>)
 8002d84:	f043 0304 	orr.w	r3, r3, #4
 8002d88:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8a:	4b41      	ldr	r3, [pc, #260]	; (8002e90 <MX_GPIO_Init+0x12c>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	4b3d      	ldr	r3, [pc, #244]	; (8002e90 <MX_GPIO_Init+0x12c>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	4a3c      	ldr	r2, [pc, #240]	; (8002e90 <MX_GPIO_Init+0x12c>)
 8002da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002da4:	6313      	str	r3, [r2, #48]	; 0x30
 8002da6:	4b3a      	ldr	r3, [pc, #232]	; (8002e90 <MX_GPIO_Init+0x12c>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	4b36      	ldr	r3, [pc, #216]	; (8002e90 <MX_GPIO_Init+0x12c>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	4a35      	ldr	r2, [pc, #212]	; (8002e90 <MX_GPIO_Init+0x12c>)
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc2:	4b33      	ldr	r3, [pc, #204]	; (8002e90 <MX_GPIO_Init+0x12c>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	607b      	str	r3, [r7, #4]
 8002dd2:	4b2f      	ldr	r3, [pc, #188]	; (8002e90 <MX_GPIO_Init+0x12c>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	4a2e      	ldr	r2, [pc, #184]	; (8002e90 <MX_GPIO_Init+0x12c>)
 8002dd8:	f043 0302 	orr.w	r3, r3, #2
 8002ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dde:	4b2c      	ldr	r3, [pc, #176]	; (8002e90 <MX_GPIO_Init+0x12c>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	607b      	str	r3, [r7, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | DIR_Pin, GPIO_PIN_RESET);
 8002dea:	2200      	movs	r2, #0
 8002dec:	21a0      	movs	r1, #160	; 0xa0
 8002dee:	4829      	ldr	r0, [pc, #164]	; (8002e94 <MX_GPIO_Init+0x130>)
 8002df0:	f003 fbce 	bl	8006590 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8002df4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002df8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002dfa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002dfe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4823      	ldr	r0, [pc, #140]	; (8002e98 <MX_GPIO_Init+0x134>)
 8002e0c:	f003 fa24 	bl	8006258 <HAL_GPIO_Init>

	/*Configure GPIO pins : Sensor_Home_Pin Sensor_1_Pin Set_Tray_Pin Clear_Tray_Pin */
	GPIO_InitStruct.Pin = Sensor_Home_Pin | Sensor_1_Pin | Set_Tray_Pin
 8002e10:	2333      	movs	r3, #51	; 0x33
 8002e12:	617b      	str	r3, [r7, #20]
			| Clear_Tray_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e1c:	f107 0314 	add.w	r3, r7, #20
 8002e20:	4619      	mov	r1, r3
 8002e22:	481d      	ldr	r0, [pc, #116]	; (8002e98 <MX_GPIO_Init+0x134>)
 8002e24:	f003 fa18 	bl	8006258 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin DIR_Pin */
	GPIO_InitStruct.Pin = LD2_Pin | DIR_Pin;
 8002e28:	23a0      	movs	r3, #160	; 0xa0
 8002e2a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e34:	2300      	movs	r3, #0
 8002e36:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e38:	f107 0314 	add.w	r3, r7, #20
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4815      	ldr	r0, [pc, #84]	; (8002e94 <MX_GPIO_Init+0x130>)
 8002e40:	f003 fa0a 	bl	8006258 <HAL_GPIO_Init>

	/*Configure GPIO pin : emergency_Pin */
	GPIO_InitStruct.Pin = emergency_Pin;
 8002e44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e48:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002e4e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(emergency_GPIO_Port, &GPIO_InitStruct);
 8002e54:	f107 0314 	add.w	r3, r7, #20
 8002e58:	4619      	mov	r1, r3
 8002e5a:	480e      	ldr	r0, [pc, #56]	; (8002e94 <MX_GPIO_Init+0x130>)
 8002e5c:	f003 f9fc 	bl	8006258 <HAL_GPIO_Init>

	/*Configure GPIO pin : Sensor_2_Pin */
	GPIO_InitStruct.Pin = Sensor_2_Pin;
 8002e60:	2310      	movs	r3, #16
 8002e62:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e64:	2300      	movs	r3, #0
 8002e66:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Sensor_2_GPIO_Port, &GPIO_InitStruct);
 8002e6c:	f107 0314 	add.w	r3, r7, #20
 8002e70:	4619      	mov	r1, r3
 8002e72:	480a      	ldr	r0, [pc, #40]	; (8002e9c <MX_GPIO_Init+0x138>)
 8002e74:	f003 f9f0 	bl	8006258 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	2028      	movs	r0, #40	; 0x28
 8002e7e:	f002 fda6 	bl	80059ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e82:	2028      	movs	r0, #40	; 0x28
 8002e84:	f002 fdbf 	bl	8005a06 <HAL_NVIC_EnableIRQ>

}
 8002e88:	bf00      	nop
 8002e8a:	3728      	adds	r7, #40	; 0x28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40023800 	.word	0x40023800
 8002e94:	40020000 	.word	0x40020000
 8002e98:	40020800 	.word	0x40020800
 8002e9c:	40020400 	.word	0x40020400

08002ea0 <transformRectangleAndPointsPick>:
		TIM2->CNT = QEI_PERIOD;
		SetDegree = 0;
	}

}
void transformRectangleAndPointsPick() {
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08a      	sub	sp, #40	; 0x28
 8002ea4:	af00      	add	r7, sp, #0

	translation[0] = bottom_left_jog[0];
 8002ea6:	4bac      	ldr	r3, [pc, #688]	; (8003158 <transformRectangleAndPointsPick+0x2b8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4aac      	ldr	r2, [pc, #688]	; (800315c <transformRectangleAndPointsPick+0x2bc>)
 8002eac:	6013      	str	r3, [r2, #0]
	translation[1] = bottom_left_jog[1];
 8002eae:	4baa      	ldr	r3, [pc, #680]	; (8003158 <transformRectangleAndPointsPick+0x2b8>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4aaa      	ldr	r2, [pc, #680]	; (800315c <transformRectangleAndPointsPick+0x2bc>)
 8002eb4:	6053      	str	r3, [r2, #4]

	bottom_right_jog[0] = bottom_right_jog[0] - translation[0];
 8002eb6:	4baa      	ldr	r3, [pc, #680]	; (8003160 <transformRectangleAndPointsPick+0x2c0>)
 8002eb8:	ed93 7a00 	vldr	s14, [r3]
 8002ebc:	4ba7      	ldr	r3, [pc, #668]	; (800315c <transformRectangleAndPointsPick+0x2bc>)
 8002ebe:	edd3 7a00 	vldr	s15, [r3]
 8002ec2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ec6:	4ba6      	ldr	r3, [pc, #664]	; (8003160 <transformRectangleAndPointsPick+0x2c0>)
 8002ec8:	edc3 7a00 	vstr	s15, [r3]
	bottom_right_jog[1] = bottom_right_jog[1] - translation[1];
 8002ecc:	4ba4      	ldr	r3, [pc, #656]	; (8003160 <transformRectangleAndPointsPick+0x2c0>)
 8002ece:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ed2:	4ba2      	ldr	r3, [pc, #648]	; (800315c <transformRectangleAndPointsPick+0x2bc>)
 8002ed4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ed8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002edc:	4ba0      	ldr	r3, [pc, #640]	; (8003160 <transformRectangleAndPointsPick+0x2c0>)
 8002ede:	edc3 7a01 	vstr	s15, [r3, #4]

	dot_product = 60 * bottom_right_jog[0] + bottom_right_jog[1] * 0;
 8002ee2:	4b9f      	ldr	r3, [pc, #636]	; (8003160 <transformRectangleAndPointsPick+0x2c0>)
 8002ee4:	edd3 7a00 	vldr	s15, [r3]
 8002ee8:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8003164 <transformRectangleAndPointsPick+0x2c4>
 8002eec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ef0:	4b9b      	ldr	r3, [pc, #620]	; (8003160 <transformRectangleAndPointsPick+0x2c0>)
 8002ef2:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ef6:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8003168 <transformRectangleAndPointsPick+0x2c8>
 8002efa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002efe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f02:	4b9a      	ldr	r3, [pc, #616]	; (800316c <transformRectangleAndPointsPick+0x2cc>)
 8002f04:	edc3 7a00 	vstr	s15, [r3]
	in_theta = dot_product / vectorsize;
 8002f08:	4b98      	ldr	r3, [pc, #608]	; (800316c <transformRectangleAndPointsPick+0x2cc>)
 8002f0a:	edd3 6a00 	vldr	s13, [r3]
 8002f0e:	4b98      	ldr	r3, [pc, #608]	; (8003170 <transformRectangleAndPointsPick+0x2d0>)
 8002f10:	ed93 7a00 	vldr	s14, [r3]
 8002f14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f18:	4b96      	ldr	r3, [pc, #600]	; (8003174 <transformRectangleAndPointsPick+0x2d4>)
 8002f1a:	edc3 7a00 	vstr	s15, [r3]
	theta = -acos(in_theta);
 8002f1e:	4b95      	ldr	r3, [pc, #596]	; (8003174 <transformRectangleAndPointsPick+0x2d4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fd fabc 	bl	80004a0 <__aeabi_f2d>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	ec43 2b10 	vmov	d0, r2, r3
 8002f30:	f007 fb82 	bl	800a638 <acos>
 8002f34:	ec53 2b10 	vmov	r2, r3, d0
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	f7fd fde0 	bl	8000b00 <__aeabi_d2f>
 8002f40:	4603      	mov	r3, r0
 8002f42:	ee07 3a90 	vmov	s15, r3
 8002f46:	eef1 7a67 	vneg.f32	s15, s15
 8002f4a:	4b8b      	ldr	r3, [pc, #556]	; (8003178 <transformRectangleAndPointsPick+0x2d8>)
 8002f4c:	edc3 7a00 	vstr	s15, [r3]

	T_rotation[0][0] = cos(theta);
 8002f50:	4b89      	ldr	r3, [pc, #548]	; (8003178 <transformRectangleAndPointsPick+0x2d8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fd faa3 	bl	80004a0 <__aeabi_f2d>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	ec43 2b10 	vmov	d0, r2, r3
 8002f62:	f007 fa3d 	bl	800a3e0 <cos>
 8002f66:	ec53 2b10 	vmov	r2, r3, d0
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	f7fd fdc7 	bl	8000b00 <__aeabi_d2f>
 8002f72:	4603      	mov	r3, r0
 8002f74:	4a81      	ldr	r2, [pc, #516]	; (800317c <transformRectangleAndPointsPick+0x2dc>)
 8002f76:	6013      	str	r3, [r2, #0]
	T_rotation[0][1] = -sin(theta);
 8002f78:	4b7f      	ldr	r3, [pc, #508]	; (8003178 <transformRectangleAndPointsPick+0x2d8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fd fa8f 	bl	80004a0 <__aeabi_f2d>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	ec43 2b10 	vmov	d0, r2, r3
 8002f8a:	f007 fafd 	bl	800a588 <sin>
 8002f8e:	ec53 2b10 	vmov	r2, r3, d0
 8002f92:	4610      	mov	r0, r2
 8002f94:	4619      	mov	r1, r3
 8002f96:	f7fd fdb3 	bl	8000b00 <__aeabi_d2f>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	ee07 3a90 	vmov	s15, r3
 8002fa0:	eef1 7a67 	vneg.f32	s15, s15
 8002fa4:	4b75      	ldr	r3, [pc, #468]	; (800317c <transformRectangleAndPointsPick+0x2dc>)
 8002fa6:	edc3 7a01 	vstr	s15, [r3, #4]
	T_rotation[1][0] = sin(theta);
 8002faa:	4b73      	ldr	r3, [pc, #460]	; (8003178 <transformRectangleAndPointsPick+0x2d8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fd fa76 	bl	80004a0 <__aeabi_f2d>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	ec43 2b10 	vmov	d0, r2, r3
 8002fbc:	f007 fae4 	bl	800a588 <sin>
 8002fc0:	ec53 2b10 	vmov	r2, r3, d0
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	f7fd fd9a 	bl	8000b00 <__aeabi_d2f>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	4a6b      	ldr	r2, [pc, #428]	; (800317c <transformRectangleAndPointsPick+0x2dc>)
 8002fd0:	6093      	str	r3, [r2, #8]
	T_rotation[1][1] = cos(theta);
 8002fd2:	4b69      	ldr	r3, [pc, #420]	; (8003178 <transformRectangleAndPointsPick+0x2d8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fd fa62 	bl	80004a0 <__aeabi_f2d>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	ec43 2b10 	vmov	d0, r2, r3
 8002fe4:	f007 f9fc 	bl	800a3e0 <cos>
 8002fe8:	ec53 2b10 	vmov	r2, r3, d0
 8002fec:	4610      	mov	r0, r2
 8002fee:	4619      	mov	r1, r3
 8002ff0:	f7fd fd86 	bl	8000b00 <__aeabi_d2f>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	4a61      	ldr	r2, [pc, #388]	; (800317c <transformRectangleAndPointsPick+0x2dc>)
 8002ff8:	60d3      	str	r3, [r2, #12]

	T[0][0] = T_rotation[0][0];
 8002ffa:	4b60      	ldr	r3, [pc, #384]	; (800317c <transformRectangleAndPointsPick+0x2dc>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a60      	ldr	r2, [pc, #384]	; (8003180 <transformRectangleAndPointsPick+0x2e0>)
 8003000:	6013      	str	r3, [r2, #0]
	T[0][1] = T_rotation[0][1];
 8003002:	4b5e      	ldr	r3, [pc, #376]	; (800317c <transformRectangleAndPointsPick+0x2dc>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4a5e      	ldr	r2, [pc, #376]	; (8003180 <transformRectangleAndPointsPick+0x2e0>)
 8003008:	6053      	str	r3, [r2, #4]
	T[0][2] = translation[0];
 800300a:	4b54      	ldr	r3, [pc, #336]	; (800315c <transformRectangleAndPointsPick+0x2bc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a5c      	ldr	r2, [pc, #368]	; (8003180 <transformRectangleAndPointsPick+0x2e0>)
 8003010:	6093      	str	r3, [r2, #8]
	T[1][0] = T_rotation[1][0];
 8003012:	4b5a      	ldr	r3, [pc, #360]	; (800317c <transformRectangleAndPointsPick+0x2dc>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	4a5a      	ldr	r2, [pc, #360]	; (8003180 <transformRectangleAndPointsPick+0x2e0>)
 8003018:	60d3      	str	r3, [r2, #12]
	T[1][1] = T_rotation[1][1];
 800301a:	4b58      	ldr	r3, [pc, #352]	; (800317c <transformRectangleAndPointsPick+0x2dc>)
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	4a58      	ldr	r2, [pc, #352]	; (8003180 <transformRectangleAndPointsPick+0x2e0>)
 8003020:	6113      	str	r3, [r2, #16]
	T[1][2] = translation[1];
 8003022:	4b4e      	ldr	r3, [pc, #312]	; (800315c <transformRectangleAndPointsPick+0x2bc>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	4a56      	ldr	r2, [pc, #344]	; (8003180 <transformRectangleAndPointsPick+0x2e0>)
 8003028:	6153      	str	r3, [r2, #20]
	T[2][0] = 0;
 800302a:	4b55      	ldr	r3, [pc, #340]	; (8003180 <transformRectangleAndPointsPick+0x2e0>)
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	619a      	str	r2, [r3, #24]
	T[2][1] = 0;
 8003032:	4b53      	ldr	r3, [pc, #332]	; (8003180 <transformRectangleAndPointsPick+0x2e0>)
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	61da      	str	r2, [r3, #28]
	T[2][2] = 1;
 800303a:	4b51      	ldr	r3, [pc, #324]	; (8003180 <transformRectangleAndPointsPick+0x2e0>)
 800303c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003040:	621a      	str	r2, [r3, #32]

	// Transform the rectangle
	for (int i = 0; i < 5; i++) {
 8003042:	2300      	movs	r3, #0
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
 8003046:	e029      	b.n	800309c <transformRectangleAndPointsPick+0x1fc>
		homogeneousRectangle[i][0] = rectangle[i][0];
 8003048:	4a4e      	ldr	r2, [pc, #312]	; (8003184 <transformRectangleAndPointsPick+0x2e4>)
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	4413      	add	r3, r2
 8003050:	6819      	ldr	r1, [r3, #0]
 8003052:	484d      	ldr	r0, [pc, #308]	; (8003188 <transformRectangleAndPointsPick+0x2e8>)
 8003054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003056:	4613      	mov	r3, r2
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	4413      	add	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4403      	add	r3, r0
 8003060:	6019      	str	r1, [r3, #0]
		homogeneousRectangle[i][1] = rectangle[i][1];
 8003062:	4a48      	ldr	r2, [pc, #288]	; (8003184 <transformRectangleAndPointsPick+0x2e4>)
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4413      	add	r3, r2
 800306a:	3304      	adds	r3, #4
 800306c:	6819      	ldr	r1, [r3, #0]
 800306e:	4846      	ldr	r0, [pc, #280]	; (8003188 <transformRectangleAndPointsPick+0x2e8>)
 8003070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003072:	4613      	mov	r3, r2
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4403      	add	r3, r0
 800307c:	3304      	adds	r3, #4
 800307e:	6019      	str	r1, [r3, #0]
		homogeneousRectangle[i][2] = 1;
 8003080:	4941      	ldr	r1, [pc, #260]	; (8003188 <transformRectangleAndPointsPick+0x2e8>)
 8003082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003084:	4613      	mov	r3, r2
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	3308      	adds	r3, #8
 8003090:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003094:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 5; i++) {
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	3301      	adds	r3, #1
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	2b04      	cmp	r3, #4
 80030a0:	ddd2      	ble.n	8003048 <transformRectangleAndPointsPick+0x1a8>
	}

	for (int i = 0; i < 5; i++) {
 80030a2:	2300      	movs	r3, #0
 80030a4:	623b      	str	r3, [r7, #32]
 80030a6:	e050      	b.n	800314a <transformRectangleAndPointsPick+0x2aa>
		for (int j = 0; j < 3; j++) {
 80030a8:	2300      	movs	r3, #0
 80030aa:	61fb      	str	r3, [r7, #28]
 80030ac:	e047      	b.n	800313e <transformRectangleAndPointsPick+0x29e>
			transformedRectangle[i][j] = 0;
 80030ae:	4937      	ldr	r1, [pc, #220]	; (800318c <transformRectangleAndPointsPick+0x2ec>)
 80030b0:	6a3a      	ldr	r2, [r7, #32]
 80030b2:	4613      	mov	r3, r2
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	4413      	add	r3, r2
 80030b8:	69fa      	ldr	r2, [r7, #28]
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
			for (int k = 0; k < 3; k++) {
 80030c6:	2300      	movs	r3, #0
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	e032      	b.n	8003132 <transformRectangleAndPointsPick+0x292>
				transformedRectangle[i][j] += homogeneousRectangle[i][k]
 80030cc:	492f      	ldr	r1, [pc, #188]	; (800318c <transformRectangleAndPointsPick+0x2ec>)
 80030ce:	6a3a      	ldr	r2, [r7, #32]
 80030d0:	4613      	mov	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4413      	add	r3, r2
 80030d6:	69fa      	ldr	r2, [r7, #28]
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	ed93 7a00 	vldr	s14, [r3]
 80030e2:	4929      	ldr	r1, [pc, #164]	; (8003188 <transformRectangleAndPointsPick+0x2e8>)
 80030e4:	6a3a      	ldr	r2, [r7, #32]
 80030e6:	4613      	mov	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4413      	add	r3, r2
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	edd3 6a00 	vldr	s13, [r3]
						* T[k][j];
 80030f8:	4921      	ldr	r1, [pc, #132]	; (8003180 <transformRectangleAndPointsPick+0x2e0>)
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4613      	mov	r3, r2
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	4413      	add	r3, r2
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	edd3 7a00 	vldr	s15, [r3]
 800310e:	ee66 7aa7 	vmul.f32	s15, s13, s15
				transformedRectangle[i][j] += homogeneousRectangle[i][k]
 8003112:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003116:	491d      	ldr	r1, [pc, #116]	; (800318c <transformRectangleAndPointsPick+0x2ec>)
 8003118:	6a3a      	ldr	r2, [r7, #32]
 800311a:	4613      	mov	r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4413      	add	r3, r2
 8003120:	69fa      	ldr	r2, [r7, #28]
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	edc3 7a00 	vstr	s15, [r3]
			for (int k = 0; k < 3; k++) {
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	3301      	adds	r3, #1
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	2b02      	cmp	r3, #2
 8003136:	ddc9      	ble.n	80030cc <transformRectangleAndPointsPick+0x22c>
		for (int j = 0; j < 3; j++) {
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	3301      	adds	r3, #1
 800313c:	61fb      	str	r3, [r7, #28]
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	2b02      	cmp	r3, #2
 8003142:	ddb4      	ble.n	80030ae <transformRectangleAndPointsPick+0x20e>
	for (int i = 0; i < 5; i++) {
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	3301      	adds	r3, #1
 8003148:	623b      	str	r3, [r7, #32]
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	2b04      	cmp	r3, #4
 800314e:	ddab      	ble.n	80030a8 <transformRectangleAndPointsPick+0x208>
			}
		}
	}

	// Transform the points
	for (int i = 0; i < 9; i++) {
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	e046      	b.n	80031e4 <transformRectangleAndPointsPick+0x344>
 8003156:	bf00      	nop
 8003158:	20000b4c 	.word	0x20000b4c
 800315c:	200009c4 	.word	0x200009c4
 8003160:	20000b54 	.word	0x20000b54
 8003164:	42700000 	.word	0x42700000
 8003168:	00000000 	.word	0x00000000
 800316c:	20000b40 	.word	0x20000b40
 8003170:	200002b8 	.word	0x200002b8
 8003174:	20000b48 	.word	0x20000b48
 8003178:	20000b44 	.word	0x20000b44
 800317c:	200009b4 	.word	0x200009b4
 8003180:	200009cc 	.word	0x200009cc
 8003184:	20000248 	.word	0x20000248
 8003188:	200009f0 	.word	0x200009f0
 800318c:	20000a2c 	.word	0x20000a2c
		homogeneousPoints[i][0] = points[i][0];
 8003190:	4a7d      	ldr	r2, [pc, #500]	; (8003388 <transformRectangleAndPointsPick+0x4e8>)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	6819      	ldr	r1, [r3, #0]
 800319a:	487c      	ldr	r0, [pc, #496]	; (800338c <transformRectangleAndPointsPick+0x4ec>)
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	4613      	mov	r3, r2
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4403      	add	r3, r0
 80031a8:	6019      	str	r1, [r3, #0]
		homogeneousPoints[i][1] = points[i][1];
 80031aa:	4a77      	ldr	r2, [pc, #476]	; (8003388 <transformRectangleAndPointsPick+0x4e8>)
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4413      	add	r3, r2
 80031b2:	3304      	adds	r3, #4
 80031b4:	6819      	ldr	r1, [r3, #0]
 80031b6:	4875      	ldr	r0, [pc, #468]	; (800338c <transformRectangleAndPointsPick+0x4ec>)
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	4613      	mov	r3, r2
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	4413      	add	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4403      	add	r3, r0
 80031c4:	3304      	adds	r3, #4
 80031c6:	6019      	str	r1, [r3, #0]
		homogeneousPoints[i][2] = 1;
 80031c8:	4970      	ldr	r1, [pc, #448]	; (800338c <transformRectangleAndPointsPick+0x4ec>)
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4613      	mov	r3, r2
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	3308      	adds	r3, #8
 80031d8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80031dc:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 9; i++) {
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	3301      	adds	r3, #1
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	ddd2      	ble.n	8003190 <transformRectangleAndPointsPick+0x2f0>
	}

	for (int i = 0; i < 9; i++) {
 80031ea:	2300      	movs	r3, #0
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	e050      	b.n	8003292 <transformRectangleAndPointsPick+0x3f2>
		for (int j = 0; j < 3; j++) {
 80031f0:	2300      	movs	r3, #0
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	e047      	b.n	8003286 <transformRectangleAndPointsPick+0x3e6>
			transformedPoints[i][j] = 0;
 80031f6:	4966      	ldr	r1, [pc, #408]	; (8003390 <transformRectangleAndPointsPick+0x4f0>)
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4613      	mov	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	4413      	add	r3, r2
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
			for (int k = 0; k < 3; k++) {
 800320e:	2300      	movs	r3, #0
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	e032      	b.n	800327a <transformRectangleAndPointsPick+0x3da>

				transformedPoints[i][j] += homogeneousPoints[i][k] * T[k][j];
 8003214:	495e      	ldr	r1, [pc, #376]	; (8003390 <transformRectangleAndPointsPick+0x4f0>)
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4613      	mov	r3, r2
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	4413      	add	r3, r2
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4413      	add	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	ed93 7a00 	vldr	s14, [r3]
 800322a:	4958      	ldr	r1, [pc, #352]	; (800338c <transformRectangleAndPointsPick+0x4ec>)
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4613      	mov	r3, r2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	4413      	add	r3, r2
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	4413      	add	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	edd3 6a00 	vldr	s13, [r3]
 8003240:	4954      	ldr	r1, [pc, #336]	; (8003394 <transformRectangleAndPointsPick+0x4f4>)
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	4613      	mov	r3, r2
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	4413      	add	r3, r2
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	edd3 7a00 	vldr	s15, [r3]
 8003256:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800325a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800325e:	494c      	ldr	r1, [pc, #304]	; (8003390 <transformRectangleAndPointsPick+0x4f0>)
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4613      	mov	r3, r2
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	4413      	add	r3, r2
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	edc3 7a00 	vstr	s15, [r3]
			for (int k = 0; k < 3; k++) {
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	3301      	adds	r3, #1
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b02      	cmp	r3, #2
 800327e:	ddc9      	ble.n	8003214 <transformRectangleAndPointsPick+0x374>
		for (int j = 0; j < 3; j++) {
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3301      	adds	r3, #1
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b02      	cmp	r3, #2
 800328a:	ddb4      	ble.n	80031f6 <transformRectangleAndPointsPick+0x356>
	for (int i = 0; i < 9; i++) {
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	3301      	adds	r3, #1
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	2b08      	cmp	r3, #8
 8003296:	ddab      	ble.n	80031f0 <transformRectangleAndPointsPick+0x350>
			}
		}
	}

	// Translation points
	for (int i = 0; i < 9; i++) {
 8003298:	2300      	movs	r3, #0
 800329a:	607b      	str	r3, [r7, #4]
 800329c:	e032      	b.n	8003304 <transformRectangleAndPointsPick+0x464>
		transformedPoints[i][0] = transformedPoints[i][0] + translation[0];
 800329e:	493c      	ldr	r1, [pc, #240]	; (8003390 <transformRectangleAndPointsPick+0x4f0>)
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	ed93 7a00 	vldr	s14, [r3]
 80032b0:	4b39      	ldr	r3, [pc, #228]	; (8003398 <transformRectangleAndPointsPick+0x4f8>)
 80032b2:	edd3 7a00 	vldr	s15, [r3]
 80032b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ba:	4935      	ldr	r1, [pc, #212]	; (8003390 <transformRectangleAndPointsPick+0x4f0>)
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	edc3 7a00 	vstr	s15, [r3]
		transformedPoints[i][1] = transformedPoints[i][1] + translation[1];
 80032cc:	4930      	ldr	r1, [pc, #192]	; (8003390 <transformRectangleAndPointsPick+0x4f0>)
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	3304      	adds	r3, #4
 80032dc:	ed93 7a00 	vldr	s14, [r3]
 80032e0:	4b2d      	ldr	r3, [pc, #180]	; (8003398 <transformRectangleAndPointsPick+0x4f8>)
 80032e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80032e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ea:	4929      	ldr	r1, [pc, #164]	; (8003390 <transformRectangleAndPointsPick+0x4f0>)
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	3304      	adds	r3, #4
 80032fa:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 9; i++) {
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3301      	adds	r3, #1
 8003302:	607b      	str	r3, [r7, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b08      	cmp	r3, #8
 8003308:	ddc9      	ble.n	800329e <transformRectangleAndPointsPick+0x3fe>
		//transformedPoints[i][0] = transformedPoints[i][0] *(-1);

	}

	// Translation rectangle
	for (int i = 0; i < 5; i++) {
 800330a:	2300      	movs	r3, #0
 800330c:	603b      	str	r3, [r7, #0]
 800330e:	e032      	b.n	8003376 <transformRectangleAndPointsPick+0x4d6>
		transformedRectangle[i][0] = transformedRectangle[i][0]
 8003310:	4922      	ldr	r1, [pc, #136]	; (800339c <transformRectangleAndPointsPick+0x4fc>)
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	4613      	mov	r3, r2
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	ed93 7a00 	vldr	s14, [r3]
				+ +translation[0];
 8003322:	4b1d      	ldr	r3, [pc, #116]	; (8003398 <transformRectangleAndPointsPick+0x4f8>)
 8003324:	edd3 7a00 	vldr	s15, [r3]
 8003328:	ee77 7a27 	vadd.f32	s15, s14, s15
		transformedRectangle[i][0] = transformedRectangle[i][0]
 800332c:	491b      	ldr	r1, [pc, #108]	; (800339c <transformRectangleAndPointsPick+0x4fc>)
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	4613      	mov	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	edc3 7a00 	vstr	s15, [r3]
		transformedRectangle[i][1] = transformedRectangle[i][1]
 800333e:	4917      	ldr	r1, [pc, #92]	; (800339c <transformRectangleAndPointsPick+0x4fc>)
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	4613      	mov	r3, r2
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	3304      	adds	r3, #4
 800334e:	ed93 7a00 	vldr	s14, [r3]
				+ translation[1];
 8003352:	4b11      	ldr	r3, [pc, #68]	; (8003398 <transformRectangleAndPointsPick+0x4f8>)
 8003354:	edd3 7a01 	vldr	s15, [r3, #4]
 8003358:	ee77 7a27 	vadd.f32	s15, s14, s15
		transformedRectangle[i][1] = transformedRectangle[i][1]
 800335c:	490f      	ldr	r1, [pc, #60]	; (800339c <transformRectangleAndPointsPick+0x4fc>)
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	4613      	mov	r3, r2
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	4413      	add	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	3304      	adds	r3, #4
 800336c:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 5; i++) {
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	3301      	adds	r3, #1
 8003374:	603b      	str	r3, [r7, #0]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b04      	cmp	r3, #4
 800337a:	ddc9      	ble.n	8003310 <transformRectangleAndPointsPick+0x470>
	}

}
 800337c:	bf00      	nop
 800337e:	bf00      	nop
 8003380:	3728      	adds	r7, #40	; 0x28
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20000270 	.word	0x20000270
 800338c:	20000a68 	.word	0x20000a68
 8003390:	20000ad4 	.word	0x20000ad4
 8003394:	200009cc 	.word	0x200009cc
 8003398:	200009c4 	.word	0x200009c4
 800339c:	20000a2c 	.word	0x20000a2c

080033a0 <transformRectangleAndPointsPlace>:
void transformRectangleAndPointsPlace() {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08a      	sub	sp, #40	; 0x28
 80033a4:	af00      	add	r7, sp, #0

	translation2[0] = bottom_left_jog2[0];
 80033a6:	4bac      	ldr	r3, [pc, #688]	; (8003658 <transformRectangleAndPointsPlace+0x2b8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4aac      	ldr	r2, [pc, #688]	; (800365c <transformRectangleAndPointsPlace+0x2bc>)
 80033ac:	6013      	str	r3, [r2, #0]
	translation2[1] = bottom_left_jog2[1];
 80033ae:	4baa      	ldr	r3, [pc, #680]	; (8003658 <transformRectangleAndPointsPlace+0x2b8>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4aaa      	ldr	r2, [pc, #680]	; (800365c <transformRectangleAndPointsPlace+0x2bc>)
 80033b4:	6053      	str	r3, [r2, #4]

	bottom_right_jog2[0] = bottom_right_jog2[0] - translation2[0];
 80033b6:	4baa      	ldr	r3, [pc, #680]	; (8003660 <transformRectangleAndPointsPlace+0x2c0>)
 80033b8:	ed93 7a00 	vldr	s14, [r3]
 80033bc:	4ba7      	ldr	r3, [pc, #668]	; (800365c <transformRectangleAndPointsPlace+0x2bc>)
 80033be:	edd3 7a00 	vldr	s15, [r3]
 80033c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033c6:	4ba6      	ldr	r3, [pc, #664]	; (8003660 <transformRectangleAndPointsPlace+0x2c0>)
 80033c8:	edc3 7a00 	vstr	s15, [r3]
	bottom_right_jog2[1] = bottom_right_jog2[1] - translation2[1];
 80033cc:	4ba4      	ldr	r3, [pc, #656]	; (8003660 <transformRectangleAndPointsPlace+0x2c0>)
 80033ce:	ed93 7a01 	vldr	s14, [r3, #4]
 80033d2:	4ba2      	ldr	r3, [pc, #648]	; (800365c <transformRectangleAndPointsPlace+0x2bc>)
 80033d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80033d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033dc:	4ba0      	ldr	r3, [pc, #640]	; (8003660 <transformRectangleAndPointsPlace+0x2c0>)
 80033de:	edc3 7a01 	vstr	s15, [r3, #4]

	dot_product2 = 60 * bottom_right_jog2[0] + bottom_right_jog2[1] * 0;
 80033e2:	4b9f      	ldr	r3, [pc, #636]	; (8003660 <transformRectangleAndPointsPlace+0x2c0>)
 80033e4:	edd3 7a00 	vldr	s15, [r3]
 80033e8:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8003664 <transformRectangleAndPointsPlace+0x2c4>
 80033ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033f0:	4b9b      	ldr	r3, [pc, #620]	; (8003660 <transformRectangleAndPointsPlace+0x2c0>)
 80033f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80033f6:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8003668 <transformRectangleAndPointsPlace+0x2c8>
 80033fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003402:	4b9a      	ldr	r3, [pc, #616]	; (800366c <transformRectangleAndPointsPlace+0x2cc>)
 8003404:	edc3 7a00 	vstr	s15, [r3]
	in_theta2 = dot_product2 / vectorsize2;
 8003408:	4b98      	ldr	r3, [pc, #608]	; (800366c <transformRectangleAndPointsPlace+0x2cc>)
 800340a:	edd3 6a00 	vldr	s13, [r3]
 800340e:	4b98      	ldr	r3, [pc, #608]	; (8003670 <transformRectangleAndPointsPlace+0x2d0>)
 8003410:	ed93 7a00 	vldr	s14, [r3]
 8003414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003418:	4b96      	ldr	r3, [pc, #600]	; (8003674 <transformRectangleAndPointsPlace+0x2d4>)
 800341a:	edc3 7a00 	vstr	s15, [r3]
	theta2 = -acos(in_theta2);
 800341e:	4b95      	ldr	r3, [pc, #596]	; (8003674 <transformRectangleAndPointsPlace+0x2d4>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7fd f83c 	bl	80004a0 <__aeabi_f2d>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	ec43 2b10 	vmov	d0, r2, r3
 8003430:	f007 f902 	bl	800a638 <acos>
 8003434:	ec53 2b10 	vmov	r2, r3, d0
 8003438:	4610      	mov	r0, r2
 800343a:	4619      	mov	r1, r3
 800343c:	f7fd fb60 	bl	8000b00 <__aeabi_d2f>
 8003440:	4603      	mov	r3, r0
 8003442:	ee07 3a90 	vmov	s15, r3
 8003446:	eef1 7a67 	vneg.f32	s15, s15
 800344a:	4b8b      	ldr	r3, [pc, #556]	; (8003678 <transformRectangleAndPointsPlace+0x2d8>)
 800344c:	edc3 7a00 	vstr	s15, [r3]

	T_rotation2[0][0] = cos(theta2);
 8003450:	4b89      	ldr	r3, [pc, #548]	; (8003678 <transformRectangleAndPointsPlace+0x2d8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7fd f823 	bl	80004a0 <__aeabi_f2d>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	ec43 2b10 	vmov	d0, r2, r3
 8003462:	f006 ffbd 	bl	800a3e0 <cos>
 8003466:	ec53 2b10 	vmov	r2, r3, d0
 800346a:	4610      	mov	r0, r2
 800346c:	4619      	mov	r1, r3
 800346e:	f7fd fb47 	bl	8000b00 <__aeabi_d2f>
 8003472:	4603      	mov	r3, r0
 8003474:	4a81      	ldr	r2, [pc, #516]	; (800367c <transformRectangleAndPointsPlace+0x2dc>)
 8003476:	6013      	str	r3, [r2, #0]
	T_rotation2[0][1] = -sin(theta2);
 8003478:	4b7f      	ldr	r3, [pc, #508]	; (8003678 <transformRectangleAndPointsPlace+0x2d8>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f7fd f80f 	bl	80004a0 <__aeabi_f2d>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	ec43 2b10 	vmov	d0, r2, r3
 800348a:	f007 f87d 	bl	800a588 <sin>
 800348e:	ec53 2b10 	vmov	r2, r3, d0
 8003492:	4610      	mov	r0, r2
 8003494:	4619      	mov	r1, r3
 8003496:	f7fd fb33 	bl	8000b00 <__aeabi_d2f>
 800349a:	4603      	mov	r3, r0
 800349c:	ee07 3a90 	vmov	s15, r3
 80034a0:	eef1 7a67 	vneg.f32	s15, s15
 80034a4:	4b75      	ldr	r3, [pc, #468]	; (800367c <transformRectangleAndPointsPlace+0x2dc>)
 80034a6:	edc3 7a01 	vstr	s15, [r3, #4]
	T_rotation2[1][0] = sin(theta2);
 80034aa:	4b73      	ldr	r3, [pc, #460]	; (8003678 <transformRectangleAndPointsPlace+0x2d8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fc fff6 	bl	80004a0 <__aeabi_f2d>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	ec43 2b10 	vmov	d0, r2, r3
 80034bc:	f007 f864 	bl	800a588 <sin>
 80034c0:	ec53 2b10 	vmov	r2, r3, d0
 80034c4:	4610      	mov	r0, r2
 80034c6:	4619      	mov	r1, r3
 80034c8:	f7fd fb1a 	bl	8000b00 <__aeabi_d2f>
 80034cc:	4603      	mov	r3, r0
 80034ce:	4a6b      	ldr	r2, [pc, #428]	; (800367c <transformRectangleAndPointsPlace+0x2dc>)
 80034d0:	6093      	str	r3, [r2, #8]
	T_rotation2[1][1] = cos(theta2);
 80034d2:	4b69      	ldr	r3, [pc, #420]	; (8003678 <transformRectangleAndPointsPlace+0x2d8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fc ffe2 	bl	80004a0 <__aeabi_f2d>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	ec43 2b10 	vmov	d0, r2, r3
 80034e4:	f006 ff7c 	bl	800a3e0 <cos>
 80034e8:	ec53 2b10 	vmov	r2, r3, d0
 80034ec:	4610      	mov	r0, r2
 80034ee:	4619      	mov	r1, r3
 80034f0:	f7fd fb06 	bl	8000b00 <__aeabi_d2f>
 80034f4:	4603      	mov	r3, r0
 80034f6:	4a61      	ldr	r2, [pc, #388]	; (800367c <transformRectangleAndPointsPlace+0x2dc>)
 80034f8:	60d3      	str	r3, [r2, #12]

	T2[0][0] = T_rotation2[0][0];
 80034fa:	4b60      	ldr	r3, [pc, #384]	; (800367c <transformRectangleAndPointsPlace+0x2dc>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a60      	ldr	r2, [pc, #384]	; (8003680 <transformRectangleAndPointsPlace+0x2e0>)
 8003500:	6013      	str	r3, [r2, #0]
	T2[0][1] = T_rotation2[0][1];
 8003502:	4b5e      	ldr	r3, [pc, #376]	; (800367c <transformRectangleAndPointsPlace+0x2dc>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	4a5e      	ldr	r2, [pc, #376]	; (8003680 <transformRectangleAndPointsPlace+0x2e0>)
 8003508:	6053      	str	r3, [r2, #4]
	T2[0][2] = translation2[0];
 800350a:	4b54      	ldr	r3, [pc, #336]	; (800365c <transformRectangleAndPointsPlace+0x2bc>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a5c      	ldr	r2, [pc, #368]	; (8003680 <transformRectangleAndPointsPlace+0x2e0>)
 8003510:	6093      	str	r3, [r2, #8]
	T2[1][0] = T_rotation2[1][0];
 8003512:	4b5a      	ldr	r3, [pc, #360]	; (800367c <transformRectangleAndPointsPlace+0x2dc>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	4a5a      	ldr	r2, [pc, #360]	; (8003680 <transformRectangleAndPointsPlace+0x2e0>)
 8003518:	60d3      	str	r3, [r2, #12]
	T2[1][1] = T_rotation2[1][1];
 800351a:	4b58      	ldr	r3, [pc, #352]	; (800367c <transformRectangleAndPointsPlace+0x2dc>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	4a58      	ldr	r2, [pc, #352]	; (8003680 <transformRectangleAndPointsPlace+0x2e0>)
 8003520:	6113      	str	r3, [r2, #16]
	T2[1][2] = translation2[1];
 8003522:	4b4e      	ldr	r3, [pc, #312]	; (800365c <transformRectangleAndPointsPlace+0x2bc>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	4a56      	ldr	r2, [pc, #344]	; (8003680 <transformRectangleAndPointsPlace+0x2e0>)
 8003528:	6153      	str	r3, [r2, #20]
	T2[2][0] = 0;
 800352a:	4b55      	ldr	r3, [pc, #340]	; (8003680 <transformRectangleAndPointsPlace+0x2e0>)
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	619a      	str	r2, [r3, #24]
	T2[2][1] = 0;
 8003532:	4b53      	ldr	r3, [pc, #332]	; (8003680 <transformRectangleAndPointsPlace+0x2e0>)
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	61da      	str	r2, [r3, #28]
	T2[2][2] = 1;
 800353a:	4b51      	ldr	r3, [pc, #324]	; (8003680 <transformRectangleAndPointsPlace+0x2e0>)
 800353c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003540:	621a      	str	r2, [r3, #32]

	// Transform the rectangle
	for (int i = 0; i < 5; i++) {
 8003542:	2300      	movs	r3, #0
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
 8003546:	e029      	b.n	800359c <transformRectangleAndPointsPlace+0x1fc>
		homogeneousRectangle2[i][0] = rectangle2[i][0];
 8003548:	4a4e      	ldr	r2, [pc, #312]	; (8003684 <transformRectangleAndPointsPlace+0x2e4>)
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	4413      	add	r3, r2
 8003550:	6819      	ldr	r1, [r3, #0]
 8003552:	484d      	ldr	r0, [pc, #308]	; (8003688 <transformRectangleAndPointsPlace+0x2e8>)
 8003554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003556:	4613      	mov	r3, r2
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4403      	add	r3, r0
 8003560:	6019      	str	r1, [r3, #0]
		homogeneousRectangle2[i][1] = rectangle2[i][1];
 8003562:	4a48      	ldr	r2, [pc, #288]	; (8003684 <transformRectangleAndPointsPlace+0x2e4>)
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4413      	add	r3, r2
 800356a:	3304      	adds	r3, #4
 800356c:	6819      	ldr	r1, [r3, #0]
 800356e:	4846      	ldr	r0, [pc, #280]	; (8003688 <transformRectangleAndPointsPlace+0x2e8>)
 8003570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003572:	4613      	mov	r3, r2
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4403      	add	r3, r0
 800357c:	3304      	adds	r3, #4
 800357e:	6019      	str	r1, [r3, #0]
		homogeneousRectangle2[i][2] = 1;
 8003580:	4941      	ldr	r1, [pc, #260]	; (8003688 <transformRectangleAndPointsPlace+0x2e8>)
 8003582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003584:	4613      	mov	r3, r2
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	3308      	adds	r3, #8
 8003590:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003594:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 5; i++) {
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	3301      	adds	r3, #1
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	2b04      	cmp	r3, #4
 80035a0:	ddd2      	ble.n	8003548 <transformRectangleAndPointsPlace+0x1a8>
	}

	for (int i = 0; i < 5; i++) {
 80035a2:	2300      	movs	r3, #0
 80035a4:	623b      	str	r3, [r7, #32]
 80035a6:	e050      	b.n	800364a <transformRectangleAndPointsPlace+0x2aa>
		for (int j = 0; j < 3; j++) {
 80035a8:	2300      	movs	r3, #0
 80035aa:	61fb      	str	r3, [r7, #28]
 80035ac:	e047      	b.n	800363e <transformRectangleAndPointsPlace+0x29e>
			transformedRectangle2[i][j] = 0;
 80035ae:	4937      	ldr	r1, [pc, #220]	; (800368c <transformRectangleAndPointsPlace+0x2ec>)
 80035b0:	6a3a      	ldr	r2, [r7, #32]
 80035b2:	4613      	mov	r3, r2
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	4413      	add	r3, r2
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]
			for (int k = 0; k < 3; k++) {
 80035c6:	2300      	movs	r3, #0
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	e032      	b.n	8003632 <transformRectangleAndPointsPlace+0x292>
				transformedRectangle2[i][j] += homogeneousRectangle2[i][k]
 80035cc:	492f      	ldr	r1, [pc, #188]	; (800368c <transformRectangleAndPointsPlace+0x2ec>)
 80035ce:	6a3a      	ldr	r2, [r7, #32]
 80035d0:	4613      	mov	r3, r2
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	4413      	add	r3, r2
 80035d6:	69fa      	ldr	r2, [r7, #28]
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	ed93 7a00 	vldr	s14, [r3]
 80035e2:	4929      	ldr	r1, [pc, #164]	; (8003688 <transformRectangleAndPointsPlace+0x2e8>)
 80035e4:	6a3a      	ldr	r2, [r7, #32]
 80035e6:	4613      	mov	r3, r2
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4413      	add	r3, r2
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	edd3 6a00 	vldr	s13, [r3]
						* T2[k][j];
 80035f8:	4921      	ldr	r1, [pc, #132]	; (8003680 <transformRectangleAndPointsPlace+0x2e0>)
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4613      	mov	r3, r2
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	4413      	add	r3, r2
 8003602:	69fa      	ldr	r2, [r7, #28]
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	edd3 7a00 	vldr	s15, [r3]
 800360e:	ee66 7aa7 	vmul.f32	s15, s13, s15
				transformedRectangle2[i][j] += homogeneousRectangle2[i][k]
 8003612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003616:	491d      	ldr	r1, [pc, #116]	; (800368c <transformRectangleAndPointsPlace+0x2ec>)
 8003618:	6a3a      	ldr	r2, [r7, #32]
 800361a:	4613      	mov	r3, r2
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	4413      	add	r3, r2
 8003620:	69fa      	ldr	r2, [r7, #28]
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	edc3 7a00 	vstr	s15, [r3]
			for (int k = 0; k < 3; k++) {
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	3301      	adds	r3, #1
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	2b02      	cmp	r3, #2
 8003636:	ddc9      	ble.n	80035cc <transformRectangleAndPointsPlace+0x22c>
		for (int j = 0; j < 3; j++) {
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	3301      	adds	r3, #1
 800363c:	61fb      	str	r3, [r7, #28]
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	2b02      	cmp	r3, #2
 8003642:	ddb4      	ble.n	80035ae <transformRectangleAndPointsPlace+0x20e>
	for (int i = 0; i < 5; i++) {
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	3301      	adds	r3, #1
 8003648:	623b      	str	r3, [r7, #32]
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	2b04      	cmp	r3, #4
 800364e:	ddab      	ble.n	80035a8 <transformRectangleAndPointsPlace+0x208>
			}
		}
	}

	// Transform the points
	for (int i = 0; i < 9; i++) {
 8003650:	2300      	movs	r3, #0
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	e046      	b.n	80036e4 <transformRectangleAndPointsPlace+0x344>
 8003656:	bf00      	nop
 8003658:	20000d00 	.word	0x20000d00
 800365c:	20000b78 	.word	0x20000b78
 8003660:	20000d08 	.word	0x20000d08
 8003664:	42700000 	.word	0x42700000
 8003668:	00000000 	.word	0x00000000
 800366c:	20000cf4 	.word	0x20000cf4
 8003670:	2000032c 	.word	0x2000032c
 8003674:	20000cfc 	.word	0x20000cfc
 8003678:	20000cf8 	.word	0x20000cf8
 800367c:	20000b5c 	.word	0x20000b5c
 8003680:	20000b80 	.word	0x20000b80
 8003684:	200002bc 	.word	0x200002bc
 8003688:	20000ba4 	.word	0x20000ba4
 800368c:	20000be0 	.word	0x20000be0
		homogeneousPoints2[i][0] = points2[i][0];
 8003690:	4a7d      	ldr	r2, [pc, #500]	; (8003888 <transformRectangleAndPointsPlace+0x4e8>)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4413      	add	r3, r2
 8003698:	6819      	ldr	r1, [r3, #0]
 800369a:	487c      	ldr	r0, [pc, #496]	; (800388c <transformRectangleAndPointsPlace+0x4ec>)
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4403      	add	r3, r0
 80036a8:	6019      	str	r1, [r3, #0]
		homogeneousPoints2[i][1] = points2[i][1];
 80036aa:	4a77      	ldr	r2, [pc, #476]	; (8003888 <transformRectangleAndPointsPlace+0x4e8>)
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4413      	add	r3, r2
 80036b2:	3304      	adds	r3, #4
 80036b4:	6819      	ldr	r1, [r3, #0]
 80036b6:	4875      	ldr	r0, [pc, #468]	; (800388c <transformRectangleAndPointsPlace+0x4ec>)
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	4613      	mov	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4403      	add	r3, r0
 80036c4:	3304      	adds	r3, #4
 80036c6:	6019      	str	r1, [r3, #0]
		homogeneousPoints2[i][2] = 1;
 80036c8:	4970      	ldr	r1, [pc, #448]	; (800388c <transformRectangleAndPointsPlace+0x4ec>)
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4613      	mov	r3, r2
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	4413      	add	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	3308      	adds	r3, #8
 80036d8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80036dc:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 9; i++) {
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	3301      	adds	r3, #1
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	ddd2      	ble.n	8003690 <transformRectangleAndPointsPlace+0x2f0>
	}

	for (int i = 0; i < 9; i++) {
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	e050      	b.n	8003792 <transformRectangleAndPointsPlace+0x3f2>
		for (int j = 0; j < 3; j++) {
 80036f0:	2300      	movs	r3, #0
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	e047      	b.n	8003786 <transformRectangleAndPointsPlace+0x3e6>
			transformedPoints2[i][j] = 0;
 80036f6:	4966      	ldr	r1, [pc, #408]	; (8003890 <transformRectangleAndPointsPlace+0x4f0>)
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4613      	mov	r3, r2
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	4413      	add	r3, r2
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
			for (int k = 0; k < 3; k++) {
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	e032      	b.n	800377a <transformRectangleAndPointsPlace+0x3da>

				transformedPoints2[i][j] += homogeneousPoints2[i][k] * T2[k][j];
 8003714:	495e      	ldr	r1, [pc, #376]	; (8003890 <transformRectangleAndPointsPlace+0x4f0>)
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4613      	mov	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	4413      	add	r3, r2
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4413      	add	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	ed93 7a00 	vldr	s14, [r3]
 800372a:	4958      	ldr	r1, [pc, #352]	; (800388c <transformRectangleAndPointsPlace+0x4ec>)
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4613      	mov	r3, r2
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	4413      	add	r3, r2
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	4413      	add	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	edd3 6a00 	vldr	s13, [r3]
 8003740:	4954      	ldr	r1, [pc, #336]	; (8003894 <transformRectangleAndPointsPlace+0x4f4>)
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	4613      	mov	r3, r2
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	4413      	add	r3, r2
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	edd3 7a00 	vldr	s15, [r3]
 8003756:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800375a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800375e:	494c      	ldr	r1, [pc, #304]	; (8003890 <transformRectangleAndPointsPlace+0x4f0>)
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4613      	mov	r3, r2
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	4413      	add	r3, r2
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	edc3 7a00 	vstr	s15, [r3]
			for (int k = 0; k < 3; k++) {
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	3301      	adds	r3, #1
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b02      	cmp	r3, #2
 800377e:	ddc9      	ble.n	8003714 <transformRectangleAndPointsPlace+0x374>
		for (int j = 0; j < 3; j++) {
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	3301      	adds	r3, #1
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2b02      	cmp	r3, #2
 800378a:	ddb4      	ble.n	80036f6 <transformRectangleAndPointsPlace+0x356>
	for (int i = 0; i < 9; i++) {
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	3301      	adds	r3, #1
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	2b08      	cmp	r3, #8
 8003796:	ddab      	ble.n	80036f0 <transformRectangleAndPointsPlace+0x350>
			}
		}
	}

	// Translation points
	for (int i = 0; i < 9; i++) {
 8003798:	2300      	movs	r3, #0
 800379a:	607b      	str	r3, [r7, #4]
 800379c:	e032      	b.n	8003804 <transformRectangleAndPointsPlace+0x464>
		transformedPoints2[i][0] = transformedPoints2[i][0] + translation2[0];
 800379e:	493c      	ldr	r1, [pc, #240]	; (8003890 <transformRectangleAndPointsPlace+0x4f0>)
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	ed93 7a00 	vldr	s14, [r3]
 80037b0:	4b39      	ldr	r3, [pc, #228]	; (8003898 <transformRectangleAndPointsPlace+0x4f8>)
 80037b2:	edd3 7a00 	vldr	s15, [r3]
 80037b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ba:	4935      	ldr	r1, [pc, #212]	; (8003890 <transformRectangleAndPointsPlace+0x4f0>)
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	edc3 7a00 	vstr	s15, [r3]
		transformedPoints2[i][1] = transformedPoints2[i][1] + translation2[1];
 80037cc:	4930      	ldr	r1, [pc, #192]	; (8003890 <transformRectangleAndPointsPlace+0x4f0>)
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	3304      	adds	r3, #4
 80037dc:	ed93 7a00 	vldr	s14, [r3]
 80037e0:	4b2d      	ldr	r3, [pc, #180]	; (8003898 <transformRectangleAndPointsPlace+0x4f8>)
 80037e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80037e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ea:	4929      	ldr	r1, [pc, #164]	; (8003890 <transformRectangleAndPointsPlace+0x4f0>)
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	4413      	add	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	3304      	adds	r3, #4
 80037fa:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 9; i++) {
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3301      	adds	r3, #1
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b08      	cmp	r3, #8
 8003808:	ddc9      	ble.n	800379e <transformRectangleAndPointsPlace+0x3fe>
		//transformedPoints2[i][0] = transformedPoints2[i][0] *(-1);

	}

	// Translation rectangle
	for (int i = 0; i < 5; i++) {
 800380a:	2300      	movs	r3, #0
 800380c:	603b      	str	r3, [r7, #0]
 800380e:	e032      	b.n	8003876 <transformRectangleAndPointsPlace+0x4d6>
		transformedRectangle2[i][0] = transformedRectangle2[i][0]
 8003810:	4922      	ldr	r1, [pc, #136]	; (800389c <transformRectangleAndPointsPlace+0x4fc>)
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	4613      	mov	r3, r2
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	4413      	add	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	ed93 7a00 	vldr	s14, [r3]
				+ +translation2[0];
 8003822:	4b1d      	ldr	r3, [pc, #116]	; (8003898 <transformRectangleAndPointsPlace+0x4f8>)
 8003824:	edd3 7a00 	vldr	s15, [r3]
 8003828:	ee77 7a27 	vadd.f32	s15, s14, s15
		transformedRectangle2[i][0] = transformedRectangle2[i][0]
 800382c:	491b      	ldr	r1, [pc, #108]	; (800389c <transformRectangleAndPointsPlace+0x4fc>)
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	4613      	mov	r3, r2
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	edc3 7a00 	vstr	s15, [r3]
		transformedRectangle2[i][1] = transformedRectangle2[i][1]
 800383e:	4917      	ldr	r1, [pc, #92]	; (800389c <transformRectangleAndPointsPlace+0x4fc>)
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	4613      	mov	r3, r2
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	4413      	add	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	3304      	adds	r3, #4
 800384e:	ed93 7a00 	vldr	s14, [r3]
				+ translation2[1];
 8003852:	4b11      	ldr	r3, [pc, #68]	; (8003898 <transformRectangleAndPointsPlace+0x4f8>)
 8003854:	edd3 7a01 	vldr	s15, [r3, #4]
 8003858:	ee77 7a27 	vadd.f32	s15, s14, s15
		transformedRectangle2[i][1] = transformedRectangle2[i][1]
 800385c:	490f      	ldr	r1, [pc, #60]	; (800389c <transformRectangleAndPointsPlace+0x4fc>)
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	4613      	mov	r3, r2
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	4413      	add	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	3304      	adds	r3, #4
 800386c:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 5; i++) {
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	3301      	adds	r3, #1
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b04      	cmp	r3, #4
 800387a:	ddc9      	ble.n	8003810 <transformRectangleAndPointsPlace+0x470>
	}

}
 800387c:	bf00      	nop
 800387e:	bf00      	nop
 8003880:	3728      	adds	r7, #40	; 0x28
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	200002e4 	.word	0x200002e4
 800388c:	20000c1c 	.word	0x20000c1c
 8003890:	20000c88 	.word	0x20000c88
 8003894:	20000b80 	.word	0x20000b80
 8003898:	20000b78 	.word	0x20000b78
 800389c:	20000be0 	.word	0x20000be0

080038a0 <flowmodbus>:
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 1) {
			TIM2->CNT = 17920;
		}
	}
}
void flowmodbus() {
 80038a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
	switch (Mobus) {
 80038a8:	4b97      	ldr	r3, [pc, #604]	; (8003b08 <flowmodbus+0x268>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b05      	cmp	r3, #5
 80038ae:	f200 8517 	bhi.w	80042e0 <flowmodbus+0xa40>
 80038b2:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <flowmodbus+0x18>)
 80038b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b8:	080038d1 	.word	0x080038d1
 80038bc:	08003a29 	.word	0x08003a29
 80038c0:	08003ced 	.word	0x08003ced
 80038c4:	08003f9b 	.word	0x08003f9b
 80038c8:	08003fab 	.word	0x08003fab
 80038cc:	080041a9 	.word	0x080041a9
	case Initial:
		//choice = 1;
		if (registerFrame[1].U16 == 0b00010) { // Set Place
 80038d0:	4b8e      	ldr	r3, [pc, #568]	; (8003b0c <flowmodbus+0x26c>)
 80038d2:	885b      	ldrh	r3, [r3, #2]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d110      	bne.n	80038fa <flowmodbus+0x5a>
			registerFrame[1].U16 = 0; // 0x01 base system reset place tray
 80038d8:	4b8c      	ldr	r3, [pc, #560]	; (8003b0c <flowmodbus+0x26c>)
 80038da:	2200      	movs	r2, #0
 80038dc:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 2; // 0x10 y-axis Set Place
 80038de:	4b8b      	ldr	r3, [pc, #556]	; (8003b0c <flowmodbus+0x26c>)
 80038e0:	2202      	movs	r2, #2
 80038e2:	841a      	strh	r2, [r3, #32]
			Joystick_Control = 1;
 80038e4:	4b8a      	ldr	r3, [pc, #552]	; (8003b10 <flowmodbus+0x270>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	601a      	str	r2, [r3, #0]
			choice = 1;
 80038ea:	4b8a      	ldr	r3, [pc, #552]	; (8003b14 <flowmodbus+0x274>)
 80038ec:	2201      	movs	r2, #1
 80038ee:	601a      	str	r2, [r3, #0]
			//I2C_all();
			Mobus = Jogging_Place;
 80038f0:	4b85      	ldr	r3, [pc, #532]	; (8003b08 <flowmodbus+0x268>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	701a      	strb	r2, [r3, #0]
				point_x[b++] = transformedPoints2[j][0];
				point_x[b++] = transformedPoints[j][0];
			}
			Mobus = Run_TrayMode;
		}
		break;
 80038f6:	f000 bcf2 	b.w	80042de <flowmodbus+0xa3e>
		} else if (registerFrame[1].U16 == 0b00001) { //Set Pick
 80038fa:	4b84      	ldr	r3, [pc, #528]	; (8003b0c <flowmodbus+0x26c>)
 80038fc:	885b      	ldrh	r3, [r3, #2]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d110      	bne.n	8003924 <flowmodbus+0x84>
			registerFrame[1].U16 = 0; // 0x01 base system reset place tray
 8003902:	4b82      	ldr	r3, [pc, #520]	; (8003b0c <flowmodbus+0x26c>)
 8003904:	2200      	movs	r2, #0
 8003906:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 1; // 0x10 y-axis Set Pick
 8003908:	4b80      	ldr	r3, [pc, #512]	; (8003b0c <flowmodbus+0x26c>)
 800390a:	2201      	movs	r2, #1
 800390c:	841a      	strh	r2, [r3, #32]
			Joystick_Control = 1;
 800390e:	4b80      	ldr	r3, [pc, #512]	; (8003b10 <flowmodbus+0x270>)
 8003910:	2201      	movs	r2, #1
 8003912:	601a      	str	r2, [r3, #0]
			choice = 1;
 8003914:	4b7f      	ldr	r3, [pc, #508]	; (8003b14 <flowmodbus+0x274>)
 8003916:	2201      	movs	r2, #1
 8003918:	601a      	str	r2, [r3, #0]
			Mobus = Jogging_Pick;
 800391a:	4b7b      	ldr	r3, [pc, #492]	; (8003b08 <flowmodbus+0x268>)
 800391c:	2202      	movs	r2, #2
 800391e:	701a      	strb	r2, [r3, #0]
		break;
 8003920:	f000 bcdd 	b.w	80042de <flowmodbus+0xa3e>
		} else if (registerFrame[1].U16 == 0b10000) { // Run point Mode
 8003924:	4b79      	ldr	r3, [pc, #484]	; (8003b0c <flowmodbus+0x26c>)
 8003926:	885b      	ldrh	r3, [r3, #2]
 8003928:	2b10      	cmp	r3, #16
 800392a:	d10d      	bne.n	8003948 <flowmodbus+0xa8>
			registerFrame[1].U16 = 0; // base system run point mode reset
 800392c:	4b77      	ldr	r3, [pc, #476]	; (8003b0c <flowmodbus+0x26c>)
 800392e:	2200      	movs	r2, #0
 8003930:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 16; // y-axis moving status go point x
 8003932:	4b76      	ldr	r3, [pc, #472]	; (8003b0c <flowmodbus+0x26c>)
 8003934:	2210      	movs	r2, #16
 8003936:	841a      	strh	r2, [r3, #32]
			Joystick_Control = 0;
 8003938:	4b75      	ldr	r3, [pc, #468]	; (8003b10 <flowmodbus+0x270>)
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]
			Mobus = Run_PointMode;
 800393e:	4b72      	ldr	r3, [pc, #456]	; (8003b08 <flowmodbus+0x268>)
 8003940:	2204      	movs	r2, #4
 8003942:	701a      	strb	r2, [r3, #0]
		break;
 8003944:	f000 bccb 	b.w	80042de <flowmodbus+0xa3e>
		} else if (registerFrame[1].U16 == 0b00100) { // Set Home
 8003948:	4b70      	ldr	r3, [pc, #448]	; (8003b0c <flowmodbus+0x26c>)
 800394a:	885b      	ldrh	r3, [r3, #2]
 800394c:	2b04      	cmp	r3, #4
 800394e:	d107      	bne.n	8003960 <flowmodbus+0xc0>
			registerFrame[1].U16 = 0;
 8003950:	4b6e      	ldr	r3, [pc, #440]	; (8003b0c <flowmodbus+0x26c>)
 8003952:	2200      	movs	r2, #0
 8003954:	805a      	strh	r2, [r3, #2]
			Mobus = Home;
 8003956:	4b6c      	ldr	r3, [pc, #432]	; (8003b08 <flowmodbus+0x268>)
 8003958:	2203      	movs	r2, #3
 800395a:	701a      	strb	r2, [r3, #0]
		break;
 800395c:	f000 bcbf 	b.w	80042de <flowmodbus+0xa3e>
		} else if (registerFrame[1].U16 == 0b01000) {
 8003960:	4b6a      	ldr	r3, [pc, #424]	; (8003b0c <flowmodbus+0x26c>)
 8003962:	885b      	ldrh	r3, [r3, #2]
 8003964:	2b08      	cmp	r3, #8
 8003966:	f040 84ba 	bne.w	80042de <flowmodbus+0xa3e>
			registerFrame[1].U16 = 0;
 800396a:	4b68      	ldr	r3, [pc, #416]	; (8003b0c <flowmodbus+0x26c>)
 800396c:	2200      	movs	r2, #0
 800396e:	805a      	strh	r2, [r3, #2]
			choice = 2;
 8003970:	4b68      	ldr	r3, [pc, #416]	; (8003b14 <flowmodbus+0x274>)
 8003972:	2202      	movs	r2, #2
 8003974:	601a      	str	r2, [r3, #0]
			k = 0;
 8003976:	2300      	movs	r3, #0
 8003978:	607b      	str	r3, [r7, #4]
			b = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	603b      	str	r3, [r7, #0]
			for (i = 0; i < 9; i++) {
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	e022      	b.n	80039ca <flowmodbus+0x12a>
				point_y[k++] = transformedPoints2[i][1];
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	1c53      	adds	r3, r2, #1
 8003988:	607b      	str	r3, [r7, #4]
 800398a:	4863      	ldr	r0, [pc, #396]	; (8003b18 <flowmodbus+0x278>)
 800398c:	68f9      	ldr	r1, [r7, #12]
 800398e:	460b      	mov	r3, r1
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	440b      	add	r3, r1
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4403      	add	r3, r0
 8003998:	3304      	adds	r3, #4
 800399a:	6819      	ldr	r1, [r3, #0]
 800399c:	485f      	ldr	r0, [pc, #380]	; (8003b1c <flowmodbus+0x27c>)
 800399e:	0093      	lsls	r3, r2, #2
 80039a0:	4403      	add	r3, r0
 80039a2:	6019      	str	r1, [r3, #0]
				point_y[k++] = transformedPoints[i][1];
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	1c53      	adds	r3, r2, #1
 80039a8:	607b      	str	r3, [r7, #4]
 80039aa:	485d      	ldr	r0, [pc, #372]	; (8003b20 <flowmodbus+0x280>)
 80039ac:	68f9      	ldr	r1, [r7, #12]
 80039ae:	460b      	mov	r3, r1
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	440b      	add	r3, r1
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4403      	add	r3, r0
 80039b8:	3304      	adds	r3, #4
 80039ba:	6819      	ldr	r1, [r3, #0]
 80039bc:	4857      	ldr	r0, [pc, #348]	; (8003b1c <flowmodbus+0x27c>)
 80039be:	0093      	lsls	r3, r2, #2
 80039c0:	4403      	add	r3, r0
 80039c2:	6019      	str	r1, [r3, #0]
			for (i = 0; i < 9; i++) {
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	3301      	adds	r3, #1
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	ddd9      	ble.n	8003984 <flowmodbus+0xe4>
			for (j = 0; j < 9; j++) {
 80039d0:	2300      	movs	r3, #0
 80039d2:	60bb      	str	r3, [r7, #8]
 80039d4:	e020      	b.n	8003a18 <flowmodbus+0x178>
				point_x[b++] = transformedPoints2[j][0];
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	1c53      	adds	r3, r2, #1
 80039da:	603b      	str	r3, [r7, #0]
 80039dc:	484e      	ldr	r0, [pc, #312]	; (8003b18 <flowmodbus+0x278>)
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	460b      	mov	r3, r1
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	440b      	add	r3, r1
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4403      	add	r3, r0
 80039ea:	6819      	ldr	r1, [r3, #0]
 80039ec:	484d      	ldr	r0, [pc, #308]	; (8003b24 <flowmodbus+0x284>)
 80039ee:	0093      	lsls	r3, r2, #2
 80039f0:	4403      	add	r3, r0
 80039f2:	6019      	str	r1, [r3, #0]
				point_x[b++] = transformedPoints[j][0];
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	1c53      	adds	r3, r2, #1
 80039f8:	603b      	str	r3, [r7, #0]
 80039fa:	4849      	ldr	r0, [pc, #292]	; (8003b20 <flowmodbus+0x280>)
 80039fc:	68b9      	ldr	r1, [r7, #8]
 80039fe:	460b      	mov	r3, r1
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	440b      	add	r3, r1
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4403      	add	r3, r0
 8003a08:	6819      	ldr	r1, [r3, #0]
 8003a0a:	4846      	ldr	r0, [pc, #280]	; (8003b24 <flowmodbus+0x284>)
 8003a0c:	0093      	lsls	r3, r2, #2
 8003a0e:	4403      	add	r3, r0
 8003a10:	6019      	str	r1, [r3, #0]
			for (j = 0; j < 9; j++) {
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	3301      	adds	r3, #1
 8003a16:	60bb      	str	r3, [r7, #8]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	dddb      	ble.n	80039d6 <flowmodbus+0x136>
			Mobus = Run_TrayMode;
 8003a1e:	4b3a      	ldr	r3, [pc, #232]	; (8003b08 <flowmodbus+0x268>)
 8003a20:	2205      	movs	r2, #5
 8003a22:	701a      	strb	r2, [r3, #0]
		break;
 8003a24:	f000 bc5b 	b.w	80042de <flowmodbus+0xa3e>
	case Jogging_Place:
		//y-axis jogging
		if (Joystick_position[1] >= 3150) {
 8003a28:	4b3f      	ldr	r3, [pc, #252]	; (8003b28 <flowmodbus+0x288>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f640 424d 	movw	r2, #3149	; 0xc4d
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d90a      	bls.n	8003a4a <flowmodbus+0x1aa>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, JoystickSpeed);
 8003a34:	4b3d      	ldr	r3, [pc, #244]	; (8003b2c <flowmodbus+0x28c>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	4b3d      	ldr	r3, [pc, #244]	; (8003b30 <flowmodbus+0x290>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003a3e:	2200      	movs	r2, #0
 8003a40:	2180      	movs	r1, #128	; 0x80
 8003a42:	483c      	ldr	r0, [pc, #240]	; (8003b34 <flowmodbus+0x294>)
 8003a44:	f002 fda4 	bl	8006590 <HAL_GPIO_WritePin>
 8003a48:	e017      	b.n	8003a7a <flowmodbus+0x1da>
		} else if (Joystick_position[1] <= 100) {
 8003a4a:	4b37      	ldr	r3, [pc, #220]	; (8003b28 <flowmodbus+0x288>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b64      	cmp	r3, #100	; 0x64
 8003a50:	d80a      	bhi.n	8003a68 <flowmodbus+0x1c8>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, JoystickSpeed);
 8003a52:	4b36      	ldr	r3, [pc, #216]	; (8003b2c <flowmodbus+0x28c>)
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	4b36      	ldr	r3, [pc, #216]	; (8003b30 <flowmodbus+0x290>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	2180      	movs	r1, #128	; 0x80
 8003a60:	4834      	ldr	r0, [pc, #208]	; (8003b34 <flowmodbus+0x294>)
 8003a62:	f002 fd95 	bl	8006590 <HAL_GPIO_WritePin>
 8003a66:	e008      	b.n	8003a7a <flowmodbus+0x1da>
		} else {
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8003a68:	4b31      	ldr	r3, [pc, #196]	; (8003b30 <flowmodbus+0x290>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003a70:	2200      	movs	r2, #0
 8003a72:	2180      	movs	r1, #128	; 0x80
 8003a74:	482f      	ldr	r0, [pc, #188]	; (8003b34 <flowmodbus+0x294>)
 8003a76:	f002 fd8b 	bl	8006590 <HAL_GPIO_WritePin>
		}
		//x-axis jogging
		if (Joystick_position[0] >= 3150) {
 8003a7a:	4b2b      	ldr	r3, [pc, #172]	; (8003b28 <flowmodbus+0x288>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f640 424d 	movw	r2, #3149	; 0xc4d
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d904      	bls.n	8003a90 <flowmodbus+0x1f0>
			registerFrame[64].U16 = 8;
 8003a86:	4b21      	ldr	r3, [pc, #132]	; (8003b0c <flowmodbus+0x26c>)
 8003a88:	2208      	movs	r2, #8
 8003a8a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8003a8e:	e00c      	b.n	8003aaa <flowmodbus+0x20a>
		} else if (Joystick_position[0] <= 100) {
 8003a90:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <flowmodbus+0x288>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b64      	cmp	r3, #100	; 0x64
 8003a96:	d804      	bhi.n	8003aa2 <flowmodbus+0x202>
			registerFrame[64].U16 = 4;
 8003a98:	4b1c      	ldr	r3, [pc, #112]	; (8003b0c <flowmodbus+0x26c>)
 8003a9a:	2204      	movs	r2, #4
 8003a9c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8003aa0:	e003      	b.n	8003aaa <flowmodbus+0x20a>
		} else {
			registerFrame[64].U16 = 0;
 8003aa2:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <flowmodbus+0x26c>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		}

		// Set position
		buttonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8003aaa:	2120      	movs	r1, #32
 8003aac:	4822      	ldr	r0, [pc, #136]	; (8003b38 <flowmodbus+0x298>)
 8003aae:	f002 fd57 	bl	8006560 <HAL_GPIO_ReadPin>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4b21      	ldr	r3, [pc, #132]	; (8003b3c <flowmodbus+0x29c>)
 8003ab8:	701a      	strb	r2, [r3, #0]
		if (buttonState != lastButtonState) {
 8003aba:	4b20      	ldr	r3, [pc, #128]	; (8003b3c <flowmodbus+0x29c>)
 8003abc:	781a      	ldrb	r2, [r3, #0]
 8003abe:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <flowmodbus+0x2a0>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	f000 810d 	beq.w	8003ce2 <flowmodbus+0x442>
			// Button press is valid, perform desired action
			if (CheckTray == 0) {
 8003ac8:	4b1e      	ldr	r3, [pc, #120]	; (8003b44 <flowmodbus+0x2a4>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d17d      	bne.n	8003bcc <flowmodbus+0x32c>
				if (registerFrame[68].U16 > 60000) {
 8003ad0:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <flowmodbus+0x26c>)
 8003ad2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003ad6:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d938      	bls.n	8003b50 <flowmodbus+0x2b0>
					posx = registerFrame[68].U16 - UINT16_MAX - 1;
 8003ade:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <flowmodbus+0x26c>)
 8003ae0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003ae4:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003ae8:	4a17      	ldr	r2, [pc, #92]	; (8003b48 <flowmodbus+0x2a8>)
 8003aea:	6013      	str	r3, [r2, #0]
					bottom_left_jog2[0] = (float) (posx) / 10;
 8003aec:	4b16      	ldr	r3, [pc, #88]	; (8003b48 <flowmodbus+0x2a8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	ee07 3a90 	vmov	s15, r3
 8003af4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003af8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003afc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b00:	4b12      	ldr	r3, [pc, #72]	; (8003b4c <flowmodbus+0x2ac>)
 8003b02:	edc3 7a00 	vstr	s15, [r3]
 8003b06:	e036      	b.n	8003b76 <flowmodbus+0x2d6>
 8003b08:	20000d10 	.word	0x20000d10
 8003b0c:	200011ec 	.word	0x200011ec
 8003b10:	20000330 	.word	0x20000330
 8003b14:	20000948 	.word	0x20000948
 8003b18:	20000c88 	.word	0x20000c88
 8003b1c:	20000200 	.word	0x20000200
 8003b20:	20000ad4 	.word	0x20000ad4
 8003b24:	2000096c 	.word	0x2000096c
 8003b28:	20001294 	.word	0x20001294
 8003b2c:	20000334 	.word	0x20000334
 8003b30:	20000654 	.word	0x20000654
 8003b34:	40020000 	.word	0x40020000
 8003b38:	40020800 	.word	0x40020800
 8003b3c:	2000094e 	.word	0x2000094e
 8003b40:	2000094d 	.word	0x2000094d
 8003b44:	2000129c 	.word	0x2000129c
 8003b48:	20000964 	.word	0x20000964
 8003b4c:	20000d00 	.word	0x20000d00
				} else {
					posx = registerFrame[68].U16;
 8003b50:	4ba1      	ldr	r3, [pc, #644]	; (8003dd8 <flowmodbus+0x538>)
 8003b52:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003b56:	461a      	mov	r2, r3
 8003b58:	4ba0      	ldr	r3, [pc, #640]	; (8003ddc <flowmodbus+0x53c>)
 8003b5a:	601a      	str	r2, [r3, #0]
					bottom_left_jog2[0] = (float) (posx) / 10;
 8003b5c:	4b9f      	ldr	r3, [pc, #636]	; (8003ddc <flowmodbus+0x53c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	ee07 3a90 	vmov	s15, r3
 8003b64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b68:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003b6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b70:	4b9b      	ldr	r3, [pc, #620]	; (8003de0 <flowmodbus+0x540>)
 8003b72:	edc3 7a00 	vstr	s15, [r3]
				} // Calculate Point x-axis
				bottom_left_jog2[1] = (float) (ReadDegree - 350); // Calulate Point y-axis
 8003b76:	4b9b      	ldr	r3, [pc, #620]	; (8003de4 <flowmodbus+0x544>)
 8003b78:	edd3 7a00 	vldr	s15, [r3]
 8003b7c:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8003de8 <flowmodbus+0x548>
 8003b80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b84:	4b96      	ldr	r3, [pc, #600]	; (8003de0 <flowmodbus+0x540>)
 8003b86:	edc3 7a01 	vstr	s15, [r3, #4]
				registerFrame[35].U16 = (int) posx; // Place Tray Origin x
 8003b8a:	4b94      	ldr	r3, [pc, #592]	; (8003ddc <flowmodbus+0x53c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	4b91      	ldr	r3, [pc, #580]	; (8003dd8 <flowmodbus+0x538>)
 8003b92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				registerFrame[36].U16 = (int) (ReadDegree - 350) * 10; // Place Tray Origin y
 8003b96:	4b93      	ldr	r3, [pc, #588]	; (8003de4 <flowmodbus+0x544>)
 8003b98:	edd3 7a00 	vldr	s15, [r3]
 8003b9c:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8003de8 <flowmodbus+0x548>
 8003ba0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ba4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ba8:	ee17 3a90 	vmov	r3, s15
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	461a      	mov	r2, r3
 8003bb0:	0092      	lsls	r2, r2, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	4b87      	ldr	r3, [pc, #540]	; (8003dd8 <flowmodbus+0x538>)
 8003bba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
				CheckTray++;
 8003bbe:	4b8b      	ldr	r3, [pc, #556]	; (8003dec <flowmodbus+0x54c>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	4b89      	ldr	r3, [pc, #548]	; (8003dec <flowmodbus+0x54c>)
 8003bc8:	701a      	strb	r2, [r3, #0]
 8003bca:	e08a      	b.n	8003ce2 <flowmodbus+0x442>
			} else if (CheckTray == 1) {
 8003bcc:	4b87      	ldr	r3, [pc, #540]	; (8003dec <flowmodbus+0x54c>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d152      	bne.n	8003c7a <flowmodbus+0x3da>
				if (registerFrame[68].U16 > 60000) {
 8003bd4:	4b80      	ldr	r3, [pc, #512]	; (8003dd8 <flowmodbus+0x538>)
 8003bd6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003bda:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d914      	bls.n	8003c0c <flowmodbus+0x36c>
					posx = registerFrame[68].U16 - UINT16_MAX - 1;
 8003be2:	4b7d      	ldr	r3, [pc, #500]	; (8003dd8 <flowmodbus+0x538>)
 8003be4:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003be8:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003bec:	4a7b      	ldr	r2, [pc, #492]	; (8003ddc <flowmodbus+0x53c>)
 8003bee:	6013      	str	r3, [r2, #0]
					bottom_right_jog2[0] = (float) (posx) / 10;
 8003bf0:	4b7a      	ldr	r3, [pc, #488]	; (8003ddc <flowmodbus+0x53c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	ee07 3a90 	vmov	s15, r3
 8003bf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bfc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003c00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c04:	4b7a      	ldr	r3, [pc, #488]	; (8003df0 <flowmodbus+0x550>)
 8003c06:	edc3 7a00 	vstr	s15, [r3]
 8003c0a:	e012      	b.n	8003c32 <flowmodbus+0x392>
				} else {
					posx = registerFrame[68].U16;
 8003c0c:	4b72      	ldr	r3, [pc, #456]	; (8003dd8 <flowmodbus+0x538>)
 8003c0e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003c12:	461a      	mov	r2, r3
 8003c14:	4b71      	ldr	r3, [pc, #452]	; (8003ddc <flowmodbus+0x53c>)
 8003c16:	601a      	str	r2, [r3, #0]
					bottom_right_jog2[0] = (float) (posx) / 10;
 8003c18:	4b70      	ldr	r3, [pc, #448]	; (8003ddc <flowmodbus+0x53c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	ee07 3a90 	vmov	s15, r3
 8003c20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c24:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003c28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c2c:	4b70      	ldr	r3, [pc, #448]	; (8003df0 <flowmodbus+0x550>)
 8003c2e:	edc3 7a00 	vstr	s15, [r3]
				}
				posx = registerFrame[68].U16;
 8003c32:	4b69      	ldr	r3, [pc, #420]	; (8003dd8 <flowmodbus+0x538>)
 8003c34:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4b68      	ldr	r3, [pc, #416]	; (8003ddc <flowmodbus+0x53c>)
 8003c3c:	601a      	str	r2, [r3, #0]
				bottom_right_jog2[0] = (float) (posx) / 10;
 8003c3e:	4b67      	ldr	r3, [pc, #412]	; (8003ddc <flowmodbus+0x53c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	ee07 3a90 	vmov	s15, r3
 8003c46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c4a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003c4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c52:	4b67      	ldr	r3, [pc, #412]	; (8003df0 <flowmodbus+0x550>)
 8003c54:	edc3 7a00 	vstr	s15, [r3]
				bottom_right_jog2[1] = (float) (ReadDegree - 350); // Calculate Point y-axis
 8003c58:	4b62      	ldr	r3, [pc, #392]	; (8003de4 <flowmodbus+0x544>)
 8003c5a:	edd3 7a00 	vldr	s15, [r3]
 8003c5e:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8003de8 <flowmodbus+0x548>
 8003c62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c66:	4b62      	ldr	r3, [pc, #392]	; (8003df0 <flowmodbus+0x550>)
 8003c68:	edc3 7a01 	vstr	s15, [r3, #4]
				CheckTray++;
 8003c6c:	4b5f      	ldr	r3, [pc, #380]	; (8003dec <flowmodbus+0x54c>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	3301      	adds	r3, #1
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	4b5d      	ldr	r3, [pc, #372]	; (8003dec <flowmodbus+0x54c>)
 8003c76:	701a      	strb	r2, [r3, #0]
 8003c78:	e033      	b.n	8003ce2 <flowmodbus+0x442>
			} else if (CheckTray == 2) {
 8003c7a:	4b5c      	ldr	r3, [pc, #368]	; (8003dec <flowmodbus+0x54c>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d12f      	bne.n	8003ce2 <flowmodbus+0x442>
				transformRectangleAndPointsPlace();
 8003c82:	f7ff fb8d 	bl	80033a0 <transformRectangleAndPointsPlace>
				orenationtray = abs((theta2) * 57.2958 * 100);
 8003c86:	4b5b      	ldr	r3, [pc, #364]	; (8003df4 <flowmodbus+0x554>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fc fc08 	bl	80004a0 <__aeabi_f2d>
 8003c90:	a34f      	add	r3, pc, #316	; (adr r3, 8003dd0 <flowmodbus+0x530>)
 8003c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c96:	f7fc fc5b 	bl	8000550 <__aeabi_dmul>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	4b54      	ldr	r3, [pc, #336]	; (8003df8 <flowmodbus+0x558>)
 8003ca8:	f7fc fc52 	bl	8000550 <__aeabi_dmul>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	f7fc fefc 	bl	8000ab0 <__aeabi_d2iz>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	bfb8      	it	lt
 8003cbe:	425b      	neglt	r3, r3
 8003cc0:	4a4e      	ldr	r2, [pc, #312]	; (8003dfc <flowmodbus+0x55c>)
 8003cc2:	6013      	str	r3, [r2, #0]
				registerFrame[37].U16 = orenationtray;
 8003cc4:	4b4d      	ldr	r3, [pc, #308]	; (8003dfc <flowmodbus+0x55c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	4b43      	ldr	r3, [pc, #268]	; (8003dd8 <flowmodbus+0x538>)
 8003ccc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				registerFrame[16].U16 = 0; //0x10 y-status jogging fisnish reset to 0
 8003cd0:	4b41      	ldr	r3, [pc, #260]	; (8003dd8 <flowmodbus+0x538>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	841a      	strh	r2, [r3, #32]
				CheckTray = 0;
 8003cd6:	4b45      	ldr	r3, [pc, #276]	; (8003dec <flowmodbus+0x54c>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	701a      	strb	r2, [r3, #0]
				Mobus = Initial;
 8003cdc:	4b48      	ldr	r3, [pc, #288]	; (8003e00 <flowmodbus+0x560>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	701a      	strb	r2, [r3, #0]
			}
		}

		// Update the previous state
		lastButtonState = buttonState;
 8003ce2:	4b48      	ldr	r3, [pc, #288]	; (8003e04 <flowmodbus+0x564>)
 8003ce4:	781a      	ldrb	r2, [r3, #0]
 8003ce6:	4b48      	ldr	r3, [pc, #288]	; (8003e08 <flowmodbus+0x568>)
 8003ce8:	701a      	strb	r2, [r3, #0]
		break;
 8003cea:	e2f9      	b.n	80042e0 <flowmodbus+0xa40>
	case Jogging_Pick:
		//y-axis jogging
		if (Joystick_position[1] >= 3150) {
 8003cec:	4b47      	ldr	r3, [pc, #284]	; (8003e0c <flowmodbus+0x56c>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f640 424d 	movw	r2, #3149	; 0xc4d
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d90a      	bls.n	8003d0e <flowmodbus+0x46e>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, JoystickSpeed);
 8003cf8:	4b45      	ldr	r3, [pc, #276]	; (8003e10 <flowmodbus+0x570>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	4b45      	ldr	r3, [pc, #276]	; (8003e14 <flowmodbus+0x574>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003d02:	2200      	movs	r2, #0
 8003d04:	2180      	movs	r1, #128	; 0x80
 8003d06:	4844      	ldr	r0, [pc, #272]	; (8003e18 <flowmodbus+0x578>)
 8003d08:	f002 fc42 	bl	8006590 <HAL_GPIO_WritePin>
 8003d0c:	e017      	b.n	8003d3e <flowmodbus+0x49e>
		} else if (Joystick_position[1] <= 100) {
 8003d0e:	4b3f      	ldr	r3, [pc, #252]	; (8003e0c <flowmodbus+0x56c>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b64      	cmp	r3, #100	; 0x64
 8003d14:	d80a      	bhi.n	8003d2c <flowmodbus+0x48c>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, JoystickSpeed);
 8003d16:	4b3e      	ldr	r3, [pc, #248]	; (8003e10 <flowmodbus+0x570>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	4b3e      	ldr	r3, [pc, #248]	; (8003e14 <flowmodbus+0x574>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8003d20:	2201      	movs	r2, #1
 8003d22:	2180      	movs	r1, #128	; 0x80
 8003d24:	483c      	ldr	r0, [pc, #240]	; (8003e18 <flowmodbus+0x578>)
 8003d26:	f002 fc33 	bl	8006590 <HAL_GPIO_WritePin>
 8003d2a:	e008      	b.n	8003d3e <flowmodbus+0x49e>
		} else {
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8003d2c:	4b39      	ldr	r3, [pc, #228]	; (8003e14 <flowmodbus+0x574>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2200      	movs	r2, #0
 8003d32:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003d34:	2200      	movs	r2, #0
 8003d36:	2180      	movs	r1, #128	; 0x80
 8003d38:	4837      	ldr	r0, [pc, #220]	; (8003e18 <flowmodbus+0x578>)
 8003d3a:	f002 fc29 	bl	8006590 <HAL_GPIO_WritePin>
		}
		//x-axis jogging
		if (Joystick_position[0] >= 3150) {
 8003d3e:	4b33      	ldr	r3, [pc, #204]	; (8003e0c <flowmodbus+0x56c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f640 424d 	movw	r2, #3149	; 0xc4d
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d904      	bls.n	8003d54 <flowmodbus+0x4b4>
			registerFrame[64].U16 = 8;
 8003d4a:	4b23      	ldr	r3, [pc, #140]	; (8003dd8 <flowmodbus+0x538>)
 8003d4c:	2208      	movs	r2, #8
 8003d4e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8003d52:	e00c      	b.n	8003d6e <flowmodbus+0x4ce>
		} else if (Joystick_position[0] <= 100) {
 8003d54:	4b2d      	ldr	r3, [pc, #180]	; (8003e0c <flowmodbus+0x56c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b64      	cmp	r3, #100	; 0x64
 8003d5a:	d804      	bhi.n	8003d66 <flowmodbus+0x4c6>
			registerFrame[64].U16 = 4;
 8003d5c:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <flowmodbus+0x538>)
 8003d5e:	2204      	movs	r2, #4
 8003d60:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8003d64:	e003      	b.n	8003d6e <flowmodbus+0x4ce>
		} else {
			registerFrame[64].U16 = 0;
 8003d66:	4b1c      	ldr	r3, [pc, #112]	; (8003dd8 <flowmodbus+0x538>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		}

		// Set position
		buttonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8003d6e:	2120      	movs	r1, #32
 8003d70:	482a      	ldr	r0, [pc, #168]	; (8003e1c <flowmodbus+0x57c>)
 8003d72:	f002 fbf5 	bl	8006560 <HAL_GPIO_ReadPin>
 8003d76:	4603      	mov	r3, r0
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4b22      	ldr	r3, [pc, #136]	; (8003e04 <flowmodbus+0x564>)
 8003d7c:	701a      	strb	r2, [r3, #0]
		if (buttonState != lastButtonState) {
 8003d7e:	4b21      	ldr	r3, [pc, #132]	; (8003e04 <flowmodbus+0x564>)
 8003d80:	781a      	ldrb	r2, [r3, #0]
 8003d82:	4b21      	ldr	r3, [pc, #132]	; (8003e08 <flowmodbus+0x568>)
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	f000 8102 	beq.w	8003f90 <flowmodbus+0x6f0>
			// Button press is valid, perform desired action
			if (CheckTray == 0) {
 8003d8c:	4b17      	ldr	r3, [pc, #92]	; (8003dec <flowmodbus+0x54c>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f040 8085 	bne.w	8003ea0 <flowmodbus+0x600>
				if (registerFrame[68].U16 > 60000) {
 8003d96:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <flowmodbus+0x538>)
 8003d98:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003d9c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d93f      	bls.n	8003e24 <flowmodbus+0x584>
					posx = registerFrame[68].U16 - UINT16_MAX - 1;
 8003da4:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <flowmodbus+0x538>)
 8003da6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003daa:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003dae:	4a0b      	ldr	r2, [pc, #44]	; (8003ddc <flowmodbus+0x53c>)
 8003db0:	6013      	str	r3, [r2, #0]
					bottom_left_jog[0] = (float) (posx) / 10;
 8003db2:	4b0a      	ldr	r3, [pc, #40]	; (8003ddc <flowmodbus+0x53c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	ee07 3a90 	vmov	s15, r3
 8003dba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dbe:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003dc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003dc6:	4b16      	ldr	r3, [pc, #88]	; (8003e20 <flowmodbus+0x580>)
 8003dc8:	edc3 7a00 	vstr	s15, [r3]
 8003dcc:	e03d      	b.n	8003e4a <flowmodbus+0x5aa>
 8003dce:	bf00      	nop
 8003dd0:	c63f1412 	.word	0xc63f1412
 8003dd4:	404ca5dc 	.word	0x404ca5dc
 8003dd8:	200011ec 	.word	0x200011ec
 8003ddc:	20000964 	.word	0x20000964
 8003de0:	20000d00 	.word	0x20000d00
 8003de4:	2000130c 	.word	0x2000130c
 8003de8:	43af0000 	.word	0x43af0000
 8003dec:	2000129c 	.word	0x2000129c
 8003df0:	20000d08 	.word	0x20000d08
 8003df4:	20000cf8 	.word	0x20000cf8
 8003df8:	40590000 	.word	0x40590000
 8003dfc:	20000968 	.word	0x20000968
 8003e00:	20000d10 	.word	0x20000d10
 8003e04:	2000094e 	.word	0x2000094e
 8003e08:	2000094d 	.word	0x2000094d
 8003e0c:	20001294 	.word	0x20001294
 8003e10:	20000334 	.word	0x20000334
 8003e14:	20000654 	.word	0x20000654
 8003e18:	40020000 	.word	0x40020000
 8003e1c:	40020800 	.word	0x40020800
 8003e20:	20000b4c 	.word	0x20000b4c
				} else {
					posx = registerFrame[68].U16;
 8003e24:	4b7c      	ldr	r3, [pc, #496]	; (8004018 <flowmodbus+0x778>)
 8003e26:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	4b7b      	ldr	r3, [pc, #492]	; (800401c <flowmodbus+0x77c>)
 8003e2e:	601a      	str	r2, [r3, #0]
					bottom_left_jog[0] = (float) (posx) / 10;
 8003e30:	4b7a      	ldr	r3, [pc, #488]	; (800401c <flowmodbus+0x77c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	ee07 3a90 	vmov	s15, r3
 8003e38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e3c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003e40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e44:	4b76      	ldr	r3, [pc, #472]	; (8004020 <flowmodbus+0x780>)
 8003e46:	edc3 7a00 	vstr	s15, [r3]
				}
				bottom_left_jog[1] = ((float) ReadDegree - 350); // Calulate Point y-axis
 8003e4a:	4b76      	ldr	r3, [pc, #472]	; (8004024 <flowmodbus+0x784>)
 8003e4c:	edd3 7a00 	vldr	s15, [r3]
 8003e50:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8004028 <flowmodbus+0x788>
 8003e54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e58:	4b71      	ldr	r3, [pc, #452]	; (8004020 <flowmodbus+0x780>)
 8003e5a:	edc3 7a01 	vstr	s15, [r3, #4]
				registerFrame[32].U16 = (int) posx; // Place Tray Origin x
 8003e5e:	4b6f      	ldr	r3, [pc, #444]	; (800401c <flowmodbus+0x77c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	4b6c      	ldr	r3, [pc, #432]	; (8004018 <flowmodbus+0x778>)
 8003e66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
				registerFrame[33].U16 = (int) (ReadDegree - 350) * 10; // Place Tray Origin y
 8003e6a:	4b6e      	ldr	r3, [pc, #440]	; (8004024 <flowmodbus+0x784>)
 8003e6c:	edd3 7a00 	vldr	s15, [r3]
 8003e70:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8004028 <flowmodbus+0x788>
 8003e74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e7c:	ee17 3a90 	vmov	r3, s15
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	461a      	mov	r2, r3
 8003e84:	0092      	lsls	r2, r2, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	4b62      	ldr	r3, [pc, #392]	; (8004018 <flowmodbus+0x778>)
 8003e8e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
				CheckTray++;
 8003e92:	4b66      	ldr	r3, [pc, #408]	; (800402c <flowmodbus+0x78c>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	3301      	adds	r3, #1
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	4b64      	ldr	r3, [pc, #400]	; (800402c <flowmodbus+0x78c>)
 8003e9c:	701a      	strb	r2, [r3, #0]
 8003e9e:	e077      	b.n	8003f90 <flowmodbus+0x6f0>
			} else if (CheckTray == 1) {
 8003ea0:	4b62      	ldr	r3, [pc, #392]	; (800402c <flowmodbus+0x78c>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d13f      	bne.n	8003f28 <flowmodbus+0x688>
				if (registerFrame[68].U16 > 60000) {
 8003ea8:	4b5b      	ldr	r3, [pc, #364]	; (8004018 <flowmodbus+0x778>)
 8003eaa:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003eae:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d914      	bls.n	8003ee0 <flowmodbus+0x640>
					posx = registerFrame[68].U16 - UINT16_MAX - 1;
 8003eb6:	4b58      	ldr	r3, [pc, #352]	; (8004018 <flowmodbus+0x778>)
 8003eb8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003ebc:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003ec0:	4a56      	ldr	r2, [pc, #344]	; (800401c <flowmodbus+0x77c>)
 8003ec2:	6013      	str	r3, [r2, #0]
					bottom_right_jog[0] = (float) (posx) / 10;
 8003ec4:	4b55      	ldr	r3, [pc, #340]	; (800401c <flowmodbus+0x77c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	ee07 3a90 	vmov	s15, r3
 8003ecc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ed0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003ed4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ed8:	4b55      	ldr	r3, [pc, #340]	; (8004030 <flowmodbus+0x790>)
 8003eda:	edc3 7a00 	vstr	s15, [r3]
 8003ede:	e012      	b.n	8003f06 <flowmodbus+0x666>
				} else {
					posx = registerFrame[68].U16;
 8003ee0:	4b4d      	ldr	r3, [pc, #308]	; (8004018 <flowmodbus+0x778>)
 8003ee2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4b4c      	ldr	r3, [pc, #304]	; (800401c <flowmodbus+0x77c>)
 8003eea:	601a      	str	r2, [r3, #0]
					bottom_right_jog[0] = (float) (posx) / 10;
 8003eec:	4b4b      	ldr	r3, [pc, #300]	; (800401c <flowmodbus+0x77c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	ee07 3a90 	vmov	s15, r3
 8003ef4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ef8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003efc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f00:	4b4b      	ldr	r3, [pc, #300]	; (8004030 <flowmodbus+0x790>)
 8003f02:	edc3 7a00 	vstr	s15, [r3]
				}
				bottom_right_jog[1] = (float) (ReadDegree - (float) 350); // Calculate Point y-axis
 8003f06:	4b47      	ldr	r3, [pc, #284]	; (8004024 <flowmodbus+0x784>)
 8003f08:	edd3 7a00 	vldr	s15, [r3]
 8003f0c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8004028 <flowmodbus+0x788>
 8003f10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f14:	4b46      	ldr	r3, [pc, #280]	; (8004030 <flowmodbus+0x790>)
 8003f16:	edc3 7a01 	vstr	s15, [r3, #4]
				CheckTray++;
 8003f1a:	4b44      	ldr	r3, [pc, #272]	; (800402c <flowmodbus+0x78c>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	4b42      	ldr	r3, [pc, #264]	; (800402c <flowmodbus+0x78c>)
 8003f24:	701a      	strb	r2, [r3, #0]
 8003f26:	e033      	b.n	8003f90 <flowmodbus+0x6f0>
			} else if (CheckTray == 2) {
 8003f28:	4b40      	ldr	r3, [pc, #256]	; (800402c <flowmodbus+0x78c>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d12f      	bne.n	8003f90 <flowmodbus+0x6f0>
				transformRectangleAndPointsPick();
 8003f30:	f7fe ffb6 	bl	8002ea0 <transformRectangleAndPointsPick>
				orenationtray = abs((theta) * 57.2958 * 100);
 8003f34:	4b3f      	ldr	r3, [pc, #252]	; (8004034 <flowmodbus+0x794>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7fc fab1 	bl	80004a0 <__aeabi_f2d>
 8003f3e:	a334      	add	r3, pc, #208	; (adr r3, 8004010 <flowmodbus+0x770>)
 8003f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f44:	f7fc fb04 	bl	8000550 <__aeabi_dmul>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	4619      	mov	r1, r3
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	4b38      	ldr	r3, [pc, #224]	; (8004038 <flowmodbus+0x798>)
 8003f56:	f7fc fafb 	bl	8000550 <__aeabi_dmul>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4610      	mov	r0, r2
 8003f60:	4619      	mov	r1, r3
 8003f62:	f7fc fda5 	bl	8000ab0 <__aeabi_d2iz>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	bfb8      	it	lt
 8003f6c:	425b      	neglt	r3, r3
 8003f6e:	4a33      	ldr	r2, [pc, #204]	; (800403c <flowmodbus+0x79c>)
 8003f70:	6013      	str	r3, [r2, #0]
				registerFrame[34].U16 = orenationtray;
 8003f72:	4b32      	ldr	r3, [pc, #200]	; (800403c <flowmodbus+0x79c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	4b27      	ldr	r3, [pc, #156]	; (8004018 <flowmodbus+0x778>)
 8003f7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				registerFrame[16].U16 = 0; // 0x10 y-status jogging finish reset to 0
 8003f7e:	4b26      	ldr	r3, [pc, #152]	; (8004018 <flowmodbus+0x778>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	841a      	strh	r2, [r3, #32]
				CheckTray = 0;
 8003f84:	4b29      	ldr	r3, [pc, #164]	; (800402c <flowmodbus+0x78c>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	701a      	strb	r2, [r3, #0]
				Mobus = Initial;
 8003f8a:	4b2d      	ldr	r3, [pc, #180]	; (8004040 <flowmodbus+0x7a0>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	701a      	strb	r2, [r3, #0]
			}
		}
		// Update the previous state
		lastButtonState = buttonState;
 8003f90:	4b2c      	ldr	r3, [pc, #176]	; (8004044 <flowmodbus+0x7a4>)
 8003f92:	781a      	ldrb	r2, [r3, #0]
 8003f94:	4b2c      	ldr	r3, [pc, #176]	; (8004048 <flowmodbus+0x7a8>)
 8003f96:	701a      	strb	r2, [r3, #0]
		break;
 8003f98:	e1a2      	b.n	80042e0 <flowmodbus+0xa40>
	case Home:
		// x axis
		registerFrame[64].U16 = 1; // 0x40 Moving Status x-axis - Home
 8003f9a:	4b1f      	ldr	r3, [pc, #124]	; (8004018 <flowmodbus+0x778>)
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		Mobus = Initial;
 8003fa2:	4b27      	ldr	r3, [pc, #156]	; (8004040 <flowmodbus+0x7a0>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	701a      	strb	r2, [r3, #0]
		// y axis
		break;
 8003fa8:	e19a      	b.n	80042e0 <flowmodbus+0xa40>
	case Run_PointMode:
		// x axis
		registerFrame[65].U16 = registerFrame[48].U16; // position Tray pick/place
 8003faa:	4b1b      	ldr	r3, [pc, #108]	; (8004018 <flowmodbus+0x778>)
 8003fac:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8003fb0:	4b19      	ldr	r3, [pc, #100]	; (8004018 <flowmodbus+0x778>)
 8003fb2:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		registerFrame[66].U16 = 3000; // speed x-axis 300mm
 8003fb6:	4b18      	ldr	r3, [pc, #96]	; (8004018 <flowmodbus+0x778>)
 8003fb8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003fbc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		registerFrame[67].U16 = 1; // Acc time 1mms
 8003fc0:	4b15      	ldr	r3, [pc, #84]	; (8004018 <flowmodbus+0x778>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		registerFrame[64].U16 = 2; //0x40 Moving Status x-axis - run mode
 8003fc8:	4b13      	ldr	r3, [pc, #76]	; (8004018 <flowmodbus+0x778>)
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		// y axis
		if (registerFrame[49].U16 > 60000)
 8003fd0:	4b11      	ldr	r3, [pc, #68]	; (8004018 <flowmodbus+0x778>)
 8003fd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003fd6:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d93a      	bls.n	8004054 <flowmodbus+0x7b4>
			SetDegree = ((350 - (UINT16_MAX - registerFrame[49].U16) / 10));
 8003fde:	4b0e      	ldr	r3, [pc, #56]	; (8004018 <flowmodbus+0x778>)
 8003fe0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003fe4:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003fe8:	33ff      	adds	r3, #255	; 0xff
 8003fea:	4a18      	ldr	r2, [pc, #96]	; (800404c <flowmodbus+0x7ac>)
 8003fec:	fb82 1203 	smull	r1, r2, r2, r3
 8003ff0:	1092      	asrs	r2, r2, #2
 8003ff2:	17db      	asrs	r3, r3, #31
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 8003ffa:	ee07 3a90 	vmov	s15, r3
 8003ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004002:	4b13      	ldr	r3, [pc, #76]	; (8004050 <flowmodbus+0x7b0>)
 8004004:	edc3 7a00 	vstr	s15, [r3]
 8004008:	e03c      	b.n	8004084 <flowmodbus+0x7e4>
 800400a:	bf00      	nop
 800400c:	f3af 8000 	nop.w
 8004010:	c63f1412 	.word	0xc63f1412
 8004014:	404ca5dc 	.word	0x404ca5dc
 8004018:	200011ec 	.word	0x200011ec
 800401c:	20000964 	.word	0x20000964
 8004020:	20000b4c 	.word	0x20000b4c
 8004024:	2000130c 	.word	0x2000130c
 8004028:	43af0000 	.word	0x43af0000
 800402c:	2000129c 	.word	0x2000129c
 8004030:	20000b54 	.word	0x20000b54
 8004034:	20000b44 	.word	0x20000b44
 8004038:	40590000 	.word	0x40590000
 800403c:	20000968 	.word	0x20000968
 8004040:	20000d10 	.word	0x20000d10
 8004044:	2000094e 	.word	0x2000094e
 8004048:	2000094d 	.word	0x2000094d
 800404c:	66666667 	.word	0x66666667
 8004050:	20001310 	.word	0x20001310
		else if (registerFrame[49].U16 <= 3500) {
 8004054:	4ba8      	ldr	r3, [pc, #672]	; (80042f8 <flowmodbus+0xa58>)
 8004056:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800405a:	f640 52ac 	movw	r2, #3500	; 0xdac
 800405e:	4293      	cmp	r3, r2
 8004060:	d810      	bhi.n	8004084 <flowmodbus+0x7e4>
			SetDegree = (registerFrame[49].U16 / 10) + 350;
 8004062:	4ba5      	ldr	r3, [pc, #660]	; (80042f8 <flowmodbus+0xa58>)
 8004064:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004068:	4aa4      	ldr	r2, [pc, #656]	; (80042fc <flowmodbus+0xa5c>)
 800406a:	fba2 2303 	umull	r2, r3, r2, r3
 800406e:	08db      	lsrs	r3, r3, #3
 8004070:	b29b      	uxth	r3, r3
 8004072:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 8004076:	ee07 3a90 	vmov	s15, r3
 800407a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800407e:	4ba0      	ldr	r3, [pc, #640]	; (8004300 <flowmodbus+0xa60>)
 8004080:	edc3 7a00 	vstr	s15, [r3]
		}
		SetVelocity = 400;
 8004084:	4b9f      	ldr	r3, [pc, #636]	; (8004304 <flowmodbus+0xa64>)
 8004086:	4aa0      	ldr	r2, [pc, #640]	; (8004308 <flowmodbus+0xa68>)
 8004088:	601a      	str	r2, [r3, #0]
		if (error > 0) { // setpoint > read_encoder
 800408a:	4ba0      	ldr	r3, [pc, #640]	; (800430c <flowmodbus+0xa6c>)
 800408c:	edd3 7a00 	vldr	s15, [r3]
 8004090:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004098:	dd38      	ble.n	800410c <flowmodbus+0x86c>
			SetVelocity = abs(SetVelocity);
 800409a:	4b9a      	ldr	r3, [pc, #616]	; (8004304 <flowmodbus+0xa64>)
 800409c:	edd3 7a00 	vldr	s15, [r3]
 80040a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040a4:	ee17 3a90 	vmov	r3, s15
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	bfb8      	it	lt
 80040ac:	425b      	neglt	r3, r3
 80040ae:	ee07 3a90 	vmov	s15, r3
 80040b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040b6:	4b93      	ldr	r3, [pc, #588]	; (8004304 <flowmodbus+0xa64>)
 80040b8:	edc3 7a00 	vstr	s15, [r3]
			if (error < 0.2) {
 80040bc:	4b93      	ldr	r3, [pc, #588]	; (800430c <flowmodbus+0xa6c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fc f9ed 	bl	80004a0 <__aeabi_f2d>
 80040c6:	a38a      	add	r3, pc, #552	; (adr r3, 80042f0 <flowmodbus+0xa50>)
 80040c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040cc:	f7fc fcb2 	bl	8000a34 <__aeabi_dcmplt>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00b      	beq.n	80040ee <flowmodbus+0x84e>
				DegreeFeedback = 0; // Limit Position
 80040d6:	4b8e      	ldr	r3, [pc, #568]	; (8004310 <flowmodbus+0xa70>)
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]
				s = 0;
 80040de:	4b8d      	ldr	r3, [pc, #564]	; (8004314 <flowmodbus+0xa74>)
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
				s2 = 0;
 80040e6:	4b8c      	ldr	r3, [pc, #560]	; (8004318 <flowmodbus+0xa78>)
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, DegreeFeedback);
 80040ee:	4b88      	ldr	r3, [pc, #544]	; (8004310 <flowmodbus+0xa70>)
 80040f0:	edd3 7a00 	vldr	s15, [r3]
 80040f4:	4b89      	ldr	r3, [pc, #548]	; (800431c <flowmodbus+0xa7c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040fc:	ee17 2a90 	vmov	r2, s15
 8004100:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8004102:	2200      	movs	r2, #0
 8004104:	2180      	movs	r1, #128	; 0x80
 8004106:	4886      	ldr	r0, [pc, #536]	; (8004320 <flowmodbus+0xa80>)
 8004108:	f002 fa42 	bl	8006590 <HAL_GPIO_WritePin>
		}
		if (error < 0) { // setpoint < read_encoder
 800410c:	4b7f      	ldr	r3, [pc, #508]	; (800430c <flowmodbus+0xa6c>)
 800410e:	edd3 7a00 	vldr	s15, [r3]
 8004112:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411a:	d53e      	bpl.n	800419a <flowmodbus+0x8fa>
			if (SetVelocity > 0)
 800411c:	4b79      	ldr	r3, [pc, #484]	; (8004304 <flowmodbus+0xa64>)
 800411e:	edd3 7a00 	vldr	s15, [r3]
 8004122:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800412a:	dd07      	ble.n	800413c <flowmodbus+0x89c>
				SetVelocity = -SetVelocity;
 800412c:	4b75      	ldr	r3, [pc, #468]	; (8004304 <flowmodbus+0xa64>)
 800412e:	edd3 7a00 	vldr	s15, [r3]
 8004132:	eef1 7a67 	vneg.f32	s15, s15
 8004136:	4b73      	ldr	r3, [pc, #460]	; (8004304 <flowmodbus+0xa64>)
 8004138:	edc3 7a00 	vstr	s15, [r3]
			if (error * -1 < 0.2) {
 800413c:	4b73      	ldr	r3, [pc, #460]	; (800430c <flowmodbus+0xa6c>)
 800413e:	edd3 7a00 	vldr	s15, [r3]
 8004142:	eef1 7a67 	vneg.f32	s15, s15
 8004146:	ee17 3a90 	vmov	r3, s15
 800414a:	4618      	mov	r0, r3
 800414c:	f7fc f9a8 	bl	80004a0 <__aeabi_f2d>
 8004150:	a367      	add	r3, pc, #412	; (adr r3, 80042f0 <flowmodbus+0xa50>)
 8004152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004156:	f7fc fc6d 	bl	8000a34 <__aeabi_dcmplt>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00b      	beq.n	8004178 <flowmodbus+0x8d8>
				DegreeFeedback = 0; // Limit Position
 8004160:	4b6b      	ldr	r3, [pc, #428]	; (8004310 <flowmodbus+0xa70>)
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
				s = 0;
 8004168:	4b6a      	ldr	r3, [pc, #424]	; (8004314 <flowmodbus+0xa74>)
 800416a:	f04f 0200 	mov.w	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
				s2 = 0;
 8004170:	4b69      	ldr	r3, [pc, #420]	; (8004318 <flowmodbus+0xa78>)
 8004172:	f04f 0200 	mov.w	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, DegreeFeedback * -1);
 8004178:	4b65      	ldr	r3, [pc, #404]	; (8004310 <flowmodbus+0xa70>)
 800417a:	edd3 7a00 	vldr	s15, [r3]
 800417e:	eef1 7a67 	vneg.f32	s15, s15
 8004182:	4b66      	ldr	r3, [pc, #408]	; (800431c <flowmodbus+0xa7c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800418a:	ee17 2a90 	vmov	r2, s15
 800418e:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8004190:	2201      	movs	r2, #1
 8004192:	2180      	movs	r1, #128	; 0x80
 8004194:	4862      	ldr	r0, [pc, #392]	; (8004320 <flowmodbus+0xa80>)
 8004196:	f002 f9fb 	bl	8006590 <HAL_GPIO_WritePin>
		}
		registerFrame[16].U16 = 0;
 800419a:	4b57      	ldr	r3, [pc, #348]	; (80042f8 <flowmodbus+0xa58>)
 800419c:	2200      	movs	r2, #0
 800419e:	841a      	strh	r2, [r3, #32]
		Mobus = Initial;
 80041a0:	4b60      	ldr	r3, [pc, #384]	; (8004324 <flowmodbus+0xa84>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	701a      	strb	r2, [r3, #0]
		break;
 80041a6:	e09b      	b.n	80042e0 <flowmodbus+0xa40>
	case Run_TrayMode:

		registerFrame[1].U16 = 4; // Basesystem reset position
 80041a8:	4b53      	ldr	r3, [pc, #332]	; (80042f8 <flowmodbus+0xa58>)
 80041aa:	2204      	movs	r2, #4
 80041ac:	805a      	strh	r2, [r3, #2]
		if (HAL_GetTick() >= timestamptray) { // heartbeat
 80041ae:	f000 ff25 	bl	8004ffc <HAL_GetTick>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2200      	movs	r2, #0
 80041b6:	461c      	mov	r4, r3
 80041b8:	4615      	mov	r5, r2
 80041ba:	4b5b      	ldr	r3, [pc, #364]	; (8004328 <flowmodbus+0xa88>)
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	4294      	cmp	r4, r2
 80041c2:	eb75 0303 	sbcs.w	r3, r5, r3
 80041c6:	d368      	bcc.n	800429a <flowmodbus+0x9fa>
			path = 1;
 80041c8:	4b58      	ldr	r3, [pc, #352]	; (800432c <flowmodbus+0xa8c>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	601a      	str	r2, [r3, #0]
			indexposition = 0;
 80041ce:	4b58      	ldr	r3, [pc, #352]	; (8004330 <flowmodbus+0xa90>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]
			timestamptray = HAL_GetTick() + 4000;
 80041d4:	f000 ff12 	bl	8004ffc <HAL_GetTick>
 80041d8:	4603      	mov	r3, r0
 80041da:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 80041de:	2200      	movs	r2, #0
 80041e0:	4698      	mov	r8, r3
 80041e2:	4691      	mov	r9, r2
 80041e4:	4b50      	ldr	r3, [pc, #320]	; (8004328 <flowmodbus+0xa88>)
 80041e6:	e9c3 8900 	strd	r8, r9, [r3]
			// y axis
			start_p = point_y[plustray]+350 ;
 80041ea:	4b52      	ldr	r3, [pc, #328]	; (8004334 <flowmodbus+0xa94>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a52      	ldr	r2, [pc, #328]	; (8004338 <flowmodbus+0xa98>)
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	edd3 7a00 	vldr	s15, [r3]
 80041f8:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800433c <flowmodbus+0xa9c>
 80041fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004200:	4b4f      	ldr	r3, [pc, #316]	; (8004340 <flowmodbus+0xaa0>)
 8004202:	edc3 7a00 	vstr	s15, [r3]
			stop_p = point_y[plustray + 1]+350 ;
 8004206:	4b4b      	ldr	r3, [pc, #300]	; (8004334 <flowmodbus+0xa94>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3301      	adds	r3, #1
 800420c:	4a4a      	ldr	r2, [pc, #296]	; (8004338 <flowmodbus+0xa98>)
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	edd3 7a00 	vldr	s15, [r3]
 8004216:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800433c <flowmodbus+0xa9c>
 800421a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800421e:	4b49      	ldr	r3, [pc, #292]	; (8004344 <flowmodbus+0xaa4>)
 8004220:	edc3 7a00 	vstr	s15, [r3]
			start_v = 0; // qk
 8004224:	4b48      	ldr	r3, [pc, #288]	; (8004348 <flowmodbus+0xaa8>)
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	601a      	str	r2, [r3, #0]
			stop_v = 0; // q_dotk+1
 800422c:	4b47      	ldr	r3, [pc, #284]	; (800434c <flowmodbus+0xaac>)
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	601a      	str	r2, [r3, #0]
			timecycle = 1.5;
 8004234:	4b46      	ldr	r3, [pc, #280]	; (8004350 <flowmodbus+0xab0>)
 8004236:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800423a:	601a      	str	r2, [r3, #0]
			main_Qubic();
 800423c:	f000 fa48 	bl	80046d0 <main_Qubic>
			//Qubic(start_p, stop_p, start_v, stop_v, timecycle, 0, 0, 0);

			 // x axis
			 registerFrame[65].U16 = point_x[plustray]; // position Tray pick/place
 8004240:	4b3c      	ldr	r3, [pc, #240]	; (8004334 <flowmodbus+0xa94>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a43      	ldr	r2, [pc, #268]	; (8004354 <flowmodbus+0xab4>)
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	edd3 7a00 	vldr	s15, [r3]
 800424e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004252:	ee17 3a90 	vmov	r3, s15
 8004256:	b29a      	uxth	r2, r3
 8004258:	4b27      	ldr	r3, [pc, #156]	; (80042f8 <flowmodbus+0xa58>)
 800425a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
			 registerFrame[66].U16 = 3000; // speed x-axis 300mm
 800425e:	4b26      	ldr	r3, [pc, #152]	; (80042f8 <flowmodbus+0xa58>)
 8004260:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004264:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
			 registerFrame[67].U16 = 1; // Acc time 1mms
 8004268:	4b23      	ldr	r3, [pc, #140]	; (80042f8 <flowmodbus+0xa58>)
 800426a:	2201      	movs	r2, #1
 800426c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
			 registerFrame[64].U16 = 2; //0x40 Moving Status x-axis - run mode
 8004270:	4b21      	ldr	r3, [pc, #132]	; (80042f8 <flowmodbus+0xa58>)
 8004272:	2202      	movs	r2, #2
 8004274:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80


			if (plustray < 18) {
 8004278:	4b2e      	ldr	r3, [pc, #184]	; (8004334 <flowmodbus+0xa94>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b11      	cmp	r3, #17
 800427e:	dc05      	bgt.n	800428c <flowmodbus+0x9ec>
				plustray++;
 8004280:	4b2c      	ldr	r3, [pc, #176]	; (8004334 <flowmodbus+0xa94>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3301      	adds	r3, #1
 8004286:	4a2b      	ldr	r2, [pc, #172]	; (8004334 <flowmodbus+0xa94>)
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	e006      	b.n	800429a <flowmodbus+0x9fa>
			} else if (plustray == 18) {
 800428c:	4b29      	ldr	r3, [pc, #164]	; (8004334 <flowmodbus+0xa94>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b12      	cmp	r3, #18
 8004292:	d102      	bne.n	800429a <flowmodbus+0x9fa>
				Mobus = Initial;
 8004294:	4b23      	ldr	r3, [pc, #140]	; (8004324 <flowmodbus+0xa84>)
 8004296:	2200      	movs	r2, #0
 8004298:	701a      	strb	r2, [r3, #0]
			}
		}
		if(indexposition >= (timecycle*100)-1){
 800429a:	4b25      	ldr	r3, [pc, #148]	; (8004330 <flowmodbus+0xa90>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	ee07 3a90 	vmov	s15, r3
 80042a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042a6:	4b2a      	ldr	r3, [pc, #168]	; (8004350 <flowmodbus+0xab0>)
 80042a8:	edd3 7a00 	vldr	s15, [r3]
 80042ac:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8004358 <flowmodbus+0xab8>
 80042b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80042b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80042bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c4:	da00      	bge.n	80042c8 <flowmodbus+0xa28>
			s2 = 0;
			indexposition = 0;
			path = 0;
		}
		break;
 80042c6:	e00b      	b.n	80042e0 <flowmodbus+0xa40>
			s2 = 0;
 80042c8:	4b13      	ldr	r3, [pc, #76]	; (8004318 <flowmodbus+0xa78>)
 80042ca:	f04f 0200 	mov.w	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]
			indexposition = 0;
 80042d0:	4b17      	ldr	r3, [pc, #92]	; (8004330 <flowmodbus+0xa90>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
			path = 0;
 80042d6:	4b15      	ldr	r3, [pc, #84]	; (800432c <flowmodbus+0xa8c>)
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
		break;
 80042dc:	e000      	b.n	80042e0 <flowmodbus+0xa40>
		break;
 80042de:	bf00      	nop
	}
}
 80042e0:	bf00      	nop
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80042ea:	bf00      	nop
 80042ec:	f3af 8000 	nop.w
 80042f0:	9999999a 	.word	0x9999999a
 80042f4:	3fc99999 	.word	0x3fc99999
 80042f8:	200011ec 	.word	0x200011ec
 80042fc:	cccccccd 	.word	0xcccccccd
 8004300:	20001310 	.word	0x20001310
 8004304:	20000348 	.word	0x20000348
 8004308:	43c80000 	.word	0x43c80000
 800430c:	20001318 	.word	0x20001318
 8004310:	20001314 	.word	0x20001314
 8004314:	200012f0 	.word	0x200012f0
 8004318:	200012fc 	.word	0x200012fc
 800431c:	20000654 	.word	0x20000654
 8004320:	40020000 	.word	0x40020000
 8004324:	20000d10 	.word	0x20000d10
 8004328:	20001338 	.word	0x20001338
 800432c:	20001284 	.word	0x20001284
 8004330:	200012e4 	.word	0x200012e4
 8004334:	20000944 	.word	0x20000944
 8004338:	20000200 	.word	0x20000200
 800433c:	43af0000 	.word	0x43af0000
 8004340:	20000950 	.word	0x20000950
 8004344:	20000954 	.word	0x20000954
 8004348:	20000958 	.word	0x20000958
 800434c:	2000095c 	.word	0x2000095c
 8004350:	20000960 	.word	0x20000960
 8004354:	2000096c 	.word	0x2000096c
 8004358:	42c80000 	.word	0x42c80000

0800435c <control_interrupt>:
float control_interrupt() {
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
//loop 1
	error = SetDegree - ReadDegree;
 8004360:	4b52      	ldr	r3, [pc, #328]	; (80044ac <control_interrupt+0x150>)
 8004362:	ed93 7a00 	vldr	s14, [r3]
 8004366:	4b52      	ldr	r3, [pc, #328]	; (80044b0 <control_interrupt+0x154>)
 8004368:	edd3 7a00 	vldr	s15, [r3]
 800436c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004370:	4b50      	ldr	r3, [pc, #320]	; (80044b4 <control_interrupt+0x158>)
 8004372:	edc3 7a00 	vstr	s15, [r3]
	s = s + error;
 8004376:	4b50      	ldr	r3, [pc, #320]	; (80044b8 <control_interrupt+0x15c>)
 8004378:	ed93 7a00 	vldr	s14, [r3]
 800437c:	4b4d      	ldr	r3, [pc, #308]	; (80044b4 <control_interrupt+0x158>)
 800437e:	edd3 7a00 	vldr	s15, [r3]
 8004382:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004386:	4b4c      	ldr	r3, [pc, #304]	; (80044b8 <control_interrupt+0x15c>)
 8004388:	edc3 7a00 	vstr	s15, [r3]
	u = K_P * error + K_I * s + K_D * (error - p);
 800438c:	4b4b      	ldr	r3, [pc, #300]	; (80044bc <control_interrupt+0x160>)
 800438e:	ed93 7a00 	vldr	s14, [r3]
 8004392:	4b48      	ldr	r3, [pc, #288]	; (80044b4 <control_interrupt+0x158>)
 8004394:	edd3 7a00 	vldr	s15, [r3]
 8004398:	ee27 7a27 	vmul.f32	s14, s14, s15
 800439c:	4b48      	ldr	r3, [pc, #288]	; (80044c0 <control_interrupt+0x164>)
 800439e:	edd3 6a00 	vldr	s13, [r3]
 80043a2:	4b45      	ldr	r3, [pc, #276]	; (80044b8 <control_interrupt+0x15c>)
 80043a4:	edd3 7a00 	vldr	s15, [r3]
 80043a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043b0:	4b40      	ldr	r3, [pc, #256]	; (80044b4 <control_interrupt+0x158>)
 80043b2:	edd3 6a00 	vldr	s13, [r3]
 80043b6:	4b43      	ldr	r3, [pc, #268]	; (80044c4 <control_interrupt+0x168>)
 80043b8:	edd3 7a00 	vldr	s15, [r3]
 80043bc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80043c0:	4b41      	ldr	r3, [pc, #260]	; (80044c8 <control_interrupt+0x16c>)
 80043c2:	edd3 7a00 	vldr	s15, [r3]
 80043c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043ce:	4b3f      	ldr	r3, [pc, #252]	; (80044cc <control_interrupt+0x170>)
 80043d0:	edc3 7a00 	vstr	s15, [r3]
	p = error;
 80043d4:	4b37      	ldr	r3, [pc, #220]	; (80044b4 <control_interrupt+0x158>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a3a      	ldr	r2, [pc, #232]	; (80044c4 <control_interrupt+0x168>)
 80043da:	6013      	str	r3, [r2, #0]
// loop 2
	error2 = (u + SetVelocity) - speed;
 80043dc:	4b3b      	ldr	r3, [pc, #236]	; (80044cc <control_interrupt+0x170>)
 80043de:	ed93 7a00 	vldr	s14, [r3]
 80043e2:	4b3b      	ldr	r3, [pc, #236]	; (80044d0 <control_interrupt+0x174>)
 80043e4:	edd3 7a00 	vldr	s15, [r3]
 80043e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043ec:	4b39      	ldr	r3, [pc, #228]	; (80044d4 <control_interrupt+0x178>)
 80043ee:	edd3 7a00 	vldr	s15, [r3]
 80043f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043f6:	4b38      	ldr	r3, [pc, #224]	; (80044d8 <control_interrupt+0x17c>)
 80043f8:	edc3 7a00 	vstr	s15, [r3]
	s2 = s2 + error2;
 80043fc:	4b37      	ldr	r3, [pc, #220]	; (80044dc <control_interrupt+0x180>)
 80043fe:	ed93 7a00 	vldr	s14, [r3]
 8004402:	4b35      	ldr	r3, [pc, #212]	; (80044d8 <control_interrupt+0x17c>)
 8004404:	edd3 7a00 	vldr	s15, [r3]
 8004408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800440c:	4b33      	ldr	r3, [pc, #204]	; (80044dc <control_interrupt+0x180>)
 800440e:	edc3 7a00 	vstr	s15, [r3]
	u2 = K_Pvelo * error2 + K_Ivelo * s2 + K_Dvelo * (error2 - p2);
 8004412:	4b33      	ldr	r3, [pc, #204]	; (80044e0 <control_interrupt+0x184>)
 8004414:	ed93 7a00 	vldr	s14, [r3]
 8004418:	4b2f      	ldr	r3, [pc, #188]	; (80044d8 <control_interrupt+0x17c>)
 800441a:	edd3 7a00 	vldr	s15, [r3]
 800441e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004422:	4b30      	ldr	r3, [pc, #192]	; (80044e4 <control_interrupt+0x188>)
 8004424:	edd3 6a00 	vldr	s13, [r3]
 8004428:	4b2c      	ldr	r3, [pc, #176]	; (80044dc <control_interrupt+0x180>)
 800442a:	edd3 7a00 	vldr	s15, [r3]
 800442e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004432:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004436:	4b28      	ldr	r3, [pc, #160]	; (80044d8 <control_interrupt+0x17c>)
 8004438:	edd3 6a00 	vldr	s13, [r3]
 800443c:	4b2a      	ldr	r3, [pc, #168]	; (80044e8 <control_interrupt+0x18c>)
 800443e:	edd3 7a00 	vldr	s15, [r3]
 8004442:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004446:	4b29      	ldr	r3, [pc, #164]	; (80044ec <control_interrupt+0x190>)
 8004448:	edd3 7a00 	vldr	s15, [r3]
 800444c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004454:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <control_interrupt+0x194>)
 8004456:	edc3 7a00 	vstr	s15, [r3]
	if (u2 > 65534)
 800445a:	4b25      	ldr	r3, [pc, #148]	; (80044f0 <control_interrupt+0x194>)
 800445c:	edd3 7a00 	vldr	s15, [r3]
 8004460:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80044f4 <control_interrupt+0x198>
 8004464:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800446c:	dd02      	ble.n	8004474 <control_interrupt+0x118>
		u2 = 65535;
 800446e:	4b20      	ldr	r3, [pc, #128]	; (80044f0 <control_interrupt+0x194>)
 8004470:	4a21      	ldr	r2, [pc, #132]	; (80044f8 <control_interrupt+0x19c>)
 8004472:	601a      	str	r2, [r3, #0]
	if (u2 < -65534)
 8004474:	4b1e      	ldr	r3, [pc, #120]	; (80044f0 <control_interrupt+0x194>)
 8004476:	edd3 7a00 	vldr	s15, [r3]
 800447a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80044fc <control_interrupt+0x1a0>
 800447e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004486:	d502      	bpl.n	800448e <control_interrupt+0x132>
		u2 = -65535;
 8004488:	4b19      	ldr	r3, [pc, #100]	; (80044f0 <control_interrupt+0x194>)
 800448a:	4a1d      	ldr	r2, [pc, #116]	; (8004500 <control_interrupt+0x1a4>)
 800448c:	601a      	str	r2, [r3, #0]
	p2 = error2;
 800448e:	4b12      	ldr	r3, [pc, #72]	; (80044d8 <control_interrupt+0x17c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a15      	ldr	r2, [pc, #84]	; (80044e8 <control_interrupt+0x18c>)
 8004494:	6013      	str	r3, [r2, #0]
	return u2;
 8004496:	4b16      	ldr	r3, [pc, #88]	; (80044f0 <control_interrupt+0x194>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	ee07 3a90 	vmov	s15, r3
}
 800449e:	eeb0 0a67 	vmov.f32	s0, s15
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	20001310 	.word	0x20001310
 80044b0:	2000130c 	.word	0x2000130c
 80044b4:	20001318 	.word	0x20001318
 80044b8:	200012f0 	.word	0x200012f0
 80044bc:	20000338 	.word	0x20000338
 80044c0:	2000033c 	.word	0x2000033c
 80044c4:	200012ec 	.word	0x200012ec
 80044c8:	20001304 	.word	0x20001304
 80044cc:	200012e8 	.word	0x200012e8
 80044d0:	20000348 	.word	0x20000348
 80044d4:	2000127c 	.word	0x2000127c
 80044d8:	20001300 	.word	0x20001300
 80044dc:	200012fc 	.word	0x200012fc
 80044e0:	20000340 	.word	0x20000340
 80044e4:	20000344 	.word	0x20000344
 80044e8:	200012f8 	.word	0x200012f8
 80044ec:	20001308 	.word	0x20001308
 80044f0:	200012f4 	.word	0x200012f4
 80044f4:	477ffe00 	.word	0x477ffe00
 80044f8:	477fff00 	.word	0x477fff00
 80044fc:	c77ffe00 	.word	0xc77ffe00
 8004500:	c77fff00 	.word	0xc77fff00

08004504 <velocity>:
	if (u2 < -65535)
		u2 = -65535;
	p2 = error2;
	return u2;
}
void velocity() {
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
	QEIData.data[0] = __HAL_TIM_GET_COUNTER(&htim2);
 800450a:	4b2c      	ldr	r3, [pc, #176]	; (80045bc <velocity+0xb8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	4a2b      	ldr	r2, [pc, #172]	; (80045c0 <velocity+0xbc>)
 8004512:	6013      	str	r3, [r2, #0]
	QEIData.timestamp[0] = micros();
 8004514:	f000 f8c2 	bl	800469c <micros>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4b28      	ldr	r3, [pc, #160]	; (80045c0 <velocity+0xbc>)
 800451e:	609a      	str	r2, [r3, #8]

	int32_t diffposition = QEIData.data[0] - QEIData.data[1];
 8004520:	4b27      	ldr	r3, [pc, #156]	; (80045c0 <velocity+0xbc>)
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	4b26      	ldr	r3, [pc, #152]	; (80045c0 <velocity+0xbc>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	607b      	str	r3, [r7, #4]
	float difftime = QEIData.timestamp[0] - QEIData.timestamp[1];
 800452c:	4b24      	ldr	r3, [pc, #144]	; (80045c0 <velocity+0xbc>)
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	4b23      	ldr	r3, [pc, #140]	; (80045c0 <velocity+0xbc>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	ee07 3a90 	vmov	s15, r3
 800453a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453e:	edc7 7a00 	vstr	s15, [r7]

	if (ReadDegree > 750) {
 8004542:	4b20      	ldr	r3, [pc, #128]	; (80045c4 <velocity+0xc0>)
 8004544:	edd3 7a00 	vldr	s15, [r3]
 8004548:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80045c8 <velocity+0xc4>
 800454c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004554:	dd03      	ble.n	800455e <velocity+0x5a>
		SetDegree = 0;
 8004556:	4b1d      	ldr	r3, [pc, #116]	; (80045cc <velocity+0xc8>)
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	601a      	str	r2, [r3, #0]
	}
	if (diffposition < -(QEI_PERIOD >> 1)) {
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f513 4fa0 	cmn.w	r3, #20480	; 0x5000
 8004564:	da03      	bge.n	800456e <velocity+0x6a>
		diffposition += QEI_PERIOD;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 800456c:	607b      	str	r3, [r7, #4]
	}

	QEIData.QEIPosition = __HAL_TIM_GET_COUNTER(&htim2) % 8192;
 800456e:	4b13      	ldr	r3, [pc, #76]	; (80045bc <velocity+0xb8>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004578:	ee07 3a90 	vmov	s15, r3
 800457c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004580:	4b0f      	ldr	r3, [pc, #60]	; (80045c0 <velocity+0xbc>)
 8004582:	edc3 7a04 	vstr	s15, [r3, #16]
	QEIData.QEIVelocity = (diffposition * 1000000) / difftime;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a11      	ldr	r2, [pc, #68]	; (80045d0 <velocity+0xcc>)
 800458a:	fb02 f303 	mul.w	r3, r2, r3
 800458e:	ee07 3a90 	vmov	s15, r3
 8004592:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004596:	ed97 7a00 	vldr	s14, [r7]
 800459a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800459e:	4b08      	ldr	r3, [pc, #32]	; (80045c0 <velocity+0xbc>)
 80045a0:	edc3 7a05 	vstr	s15, [r3, #20]

	QEIData.data[1] = QEIData.data[0];
 80045a4:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <velocity+0xbc>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a05      	ldr	r2, [pc, #20]	; (80045c0 <velocity+0xbc>)
 80045aa:	6053      	str	r3, [r2, #4]
	QEIData.timestamp[1] = QEIData.timestamp[0];
 80045ac:	4b04      	ldr	r3, [pc, #16]	; (80045c0 <velocity+0xbc>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	4a03      	ldr	r2, [pc, #12]	; (80045c0 <velocity+0xbc>)
 80045b2:	60d3      	str	r3, [r2, #12]

}
 80045b4:	bf00      	nop
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	200004ec 	.word	0x200004ec
 80045c0:	200012a0 	.word	0x200012a0
 80045c4:	2000130c 	.word	0x2000130c
 80045c8:	443b8000 	.word	0x443b8000
 80045cc:	20001310 	.word	0x20001310
 80045d0:	000f4240 	.word	0x000f4240

080045d4 <accelerate>:
void accelerate() {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
	QEIAcc.data[0] = speed;
 80045da:	4b20      	ldr	r3, [pc, #128]	; (800465c <accelerate+0x88>)
 80045dc:	edd3 7a00 	vldr	s15, [r3]
 80045e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045e4:	ee17 2a90 	vmov	r2, s15
 80045e8:	4b1d      	ldr	r3, [pc, #116]	; (8004660 <accelerate+0x8c>)
 80045ea:	601a      	str	r2, [r3, #0]
	QEIAcc.timestamp[0] = micros();
 80045ec:	f000 f856 	bl	800469c <micros>
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4b1a      	ldr	r3, [pc, #104]	; (8004660 <accelerate+0x8c>)
 80045f6:	609a      	str	r2, [r3, #8]

	int32_t diffposition = QEIAcc.data[0] - QEIAcc.data[1];
 80045f8:	4b19      	ldr	r3, [pc, #100]	; (8004660 <accelerate+0x8c>)
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	4b18      	ldr	r3, [pc, #96]	; (8004660 <accelerate+0x8c>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	607b      	str	r3, [r7, #4]
	float difftime = QEIAcc.timestamp[0] - QEIAcc.timestamp[1];
 8004604:	4b16      	ldr	r3, [pc, #88]	; (8004660 <accelerate+0x8c>)
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	4b15      	ldr	r3, [pc, #84]	; (8004660 <accelerate+0x8c>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004616:	edc7 7a00 	vstr	s15, [r7]
	difftime = difftime / 1000000;
 800461a:	ed97 7a00 	vldr	s14, [r7]
 800461e:	eddf 6a11 	vldr	s13, [pc, #68]	; 8004664 <accelerate+0x90>
 8004622:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004626:	edc7 7a00 	vstr	s15, [r7]

	QEIAcc.QEIVelocity = (diffposition / difftime);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	ee07 3a90 	vmov	s15, r3
 8004630:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004634:	ed97 7a00 	vldr	s14, [r7]
 8004638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800463c:	4b08      	ldr	r3, [pc, #32]	; (8004660 <accelerate+0x8c>)
 800463e:	edc3 7a05 	vstr	s15, [r3, #20]

	QEIAcc.data[1] = QEIAcc.data[0];
 8004642:	4b07      	ldr	r3, [pc, #28]	; (8004660 <accelerate+0x8c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a06      	ldr	r2, [pc, #24]	; (8004660 <accelerate+0x8c>)
 8004648:	6053      	str	r3, [r2, #4]
	QEIAcc.timestamp[1] = QEIAcc.timestamp[0];
 800464a:	4b05      	ldr	r3, [pc, #20]	; (8004660 <accelerate+0x8c>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	4a04      	ldr	r2, [pc, #16]	; (8004660 <accelerate+0x8c>)
 8004650:	60d3      	str	r3, [r2, #12]
}
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	2000127c 	.word	0x2000127c
 8004660:	200012b8 	.word	0x200012b8
 8004664:	49742400 	.word	0x49742400

08004668 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004668:	b4b0      	push	{r4, r5, r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a08      	ldr	r2, [pc, #32]	; (8004694 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d108      	bne.n	800468a <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8004678:	4b07      	ldr	r3, [pc, #28]	; (8004698 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800467a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467e:	1e54      	subs	r4, r2, #1
 8004680:	f143 0500 	adc.w	r5, r3, #0
 8004684:	4b04      	ldr	r3, [pc, #16]	; (8004698 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004686:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	bcb0      	pop	{r4, r5, r7}
 8004692:	4770      	bx	lr
 8004694:	20000708 	.word	0x20000708
 8004698:	200012d0 	.word	0x200012d0

0800469c <micros>:
uint64_t micros() {
 800469c:	b4b0      	push	{r4, r5, r7}
 800469e:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 80046a0:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <micros+0x2c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	2200      	movs	r2, #0
 80046a8:	4618      	mov	r0, r3
 80046aa:	4611      	mov	r1, r2
 80046ac:	4b07      	ldr	r3, [pc, #28]	; (80046cc <micros+0x30>)
 80046ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b2:	1884      	adds	r4, r0, r2
 80046b4:	eb41 0503 	adc.w	r5, r1, r3
 80046b8:	4622      	mov	r2, r4
 80046ba:	462b      	mov	r3, r5
}
 80046bc:	4610      	mov	r0, r2
 80046be:	4619      	mov	r1, r3
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bcb0      	pop	{r4, r5, r7}
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	20000708 	.word	0x20000708
 80046cc:	200012d0 	.word	0x200012d0

080046d0 <main_Qubic>:
void main_Qubic() {
 80046d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d4:	ed2d 8b02 	vpush	{d8}
 80046d8:	b084      	sub	sp, #16
 80046da:	af00      	add	r7, sp, #0
	emxArray_real_T *q_acc;
	emxArray_real_T *q_position;
	emxArray_real_T *q_velocity;
	/* Initialize function 'Qubic' input arguments. */
	q_k1_tmp = argInit_real_T();
 80046dc:	f7fd fd1a 	bl	8002114 <argInit_real_T>
 80046e0:	eeb0 7a40 	vmov.f32	s14, s0
 80046e4:	eef0 7a60 	vmov.f32	s15, s1
 80046e8:	4b33      	ldr	r3, [pc, #204]	; (80047b8 <main_Qubic+0xe8>)
 80046ea:	ed83 7b00 	vstr	d7, [r3]
	/* Call the entry-point 'Qubic'. */
	emxInitArray_real_T(&q_position, 2);
 80046ee:	f107 0308 	add.w	r3, r7, #8
 80046f2:	2102      	movs	r1, #2
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fd fc1f 	bl	8001f38 <emxInitArray_real_T>
	emxInitArray_real_T(&q_velocity, 2);
 80046fa:	1d3b      	adds	r3, r7, #4
 80046fc:	2102      	movs	r1, #2
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fd fc1a 	bl	8001f38 <emxInitArray_real_T>
	emxInitArray_real_T(&q_acc, 2);
 8004704:	f107 030c 	add.w	r3, r7, #12
 8004708:	2102      	movs	r1, #2
 800470a:	4618      	mov	r0, r3
 800470c:	f7fd fc14 	bl	8001f38 <emxInitArray_real_T>
	Qubic(start_p, stop_p, start_v, stop_v, timecycle, q_position, q_velocity,
 8004710:	4b2a      	ldr	r3, [pc, #168]	; (80047bc <main_Qubic+0xec>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4618      	mov	r0, r3
 8004716:	f7fb fec3 	bl	80004a0 <__aeabi_f2d>
 800471a:	4604      	mov	r4, r0
 800471c:	460d      	mov	r5, r1
 800471e:	4b28      	ldr	r3, [pc, #160]	; (80047c0 <main_Qubic+0xf0>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f7fb febc 	bl	80004a0 <__aeabi_f2d>
 8004728:	4680      	mov	r8, r0
 800472a:	4689      	mov	r9, r1
 800472c:	4b25      	ldr	r3, [pc, #148]	; (80047c4 <main_Qubic+0xf4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4618      	mov	r0, r3
 8004732:	f7fb feb5 	bl	80004a0 <__aeabi_f2d>
 8004736:	4682      	mov	sl, r0
 8004738:	468b      	mov	fp, r1
 800473a:	4b23      	ldr	r3, [pc, #140]	; (80047c8 <main_Qubic+0xf8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f7fb feae 	bl	80004a0 <__aeabi_f2d>
 8004744:	ec41 0b18 	vmov	d8, r0, r1
 8004748:	4b20      	ldr	r3, [pc, #128]	; (80047cc <main_Qubic+0xfc>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f7fb fea7 	bl	80004a0 <__aeabi_f2d>
 8004752:	ec41 0b17 	vmov	d7, r0, r1
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	4618      	mov	r0, r3
 800475e:	eeb0 4a47 	vmov.f32	s8, s14
 8004762:	eef0 4a67 	vmov.f32	s9, s15
 8004766:	eeb0 3a48 	vmov.f32	s6, s16
 800476a:	eef0 3a68 	vmov.f32	s7, s17
 800476e:	ec4b ab12 	vmov	d2, sl, fp
 8004772:	ec49 8b11 	vmov	d1, r8, r9
 8004776:	ec45 4b10 	vmov	d0, r4, r5
 800477a:	f7fd f84d 	bl	8001818 <Qubic>
			q_acc);
	q_positionN = q_position;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	4a13      	ldr	r2, [pc, #76]	; (80047d0 <main_Qubic+0x100>)
 8004782:	6013      	str	r3, [r2, #0]
	q_velocityN = q_velocity;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a13      	ldr	r2, [pc, #76]	; (80047d4 <main_Qubic+0x104>)
 8004788:	6013      	str	r3, [r2, #0]
	q_accN = q_acc;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4a12      	ldr	r2, [pc, #72]	; (80047d8 <main_Qubic+0x108>)
 800478e:	6013      	str	r3, [r2, #0]
	emxDestroyArray_real_T(q_position);
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	4618      	mov	r0, r3
 8004794:	f7fd fbc4 	bl	8001f20 <emxDestroyArray_real_T>
	emxDestroyArray_real_T(q_velocity);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4618      	mov	r0, r3
 800479c:	f7fd fbc0 	bl	8001f20 <emxDestroyArray_real_T>
	emxDestroyArray_real_T(q_acc);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fd fbbc 	bl	8001f20 <emxDestroyArray_real_T>
}
 80047a8:	bf00      	nop
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	ecbd 8b02 	vpop	{d8}
 80047b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047b6:	bf00      	nop
 80047b8:	20000b70 	.word	0x20000b70
 80047bc:	20000950 	.word	0x20000950
 80047c0:	20000954 	.word	0x20000954
 80047c4:	20000958 	.word	0x20000958
 80047c8:	2000095c 	.word	0x2000095c
 80047cc:	20000960 	.word	0x20000960
 80047d0:	200012dc 	.word	0x200012dc
 80047d4:	200012d8 	.word	0x200012d8
 80047d8:	200012e0 	.word	0x200012e0

080047dc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80047e0:	b672      	cpsid	i
}
 80047e2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80047e4:	e7fe      	b.n	80047e4 <Error_Handler+0x8>
	...

080047e8 <rtIsInf>:
 * Function: rtIsInf ==================================================
 *  Abstract:
 *  Test if value is infinite
 */
boolean_T rtIsInf(real_T value)
{
 80047e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	ed87 0b00 	vstr	d0, [r7]
  return (isinf(value) != 0U);
 80047f2:	683c      	ldr	r4, [r7, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80047fa:	2301      	movs	r3, #1
 80047fc:	461e      	mov	r6, r3
 80047fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004802:	4b0f      	ldr	r3, [pc, #60]	; (8004840 <rtIsInf+0x58>)
 8004804:	4620      	mov	r0, r4
 8004806:	4629      	mov	r1, r5
 8004808:	f7fc f93c 	bl	8000a84 <__aeabi_dcmpun>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10b      	bne.n	800482a <rtIsInf+0x42>
 8004812:	f04f 32ff 	mov.w	r2, #4294967295
 8004816:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <rtIsInf+0x58>)
 8004818:	4620      	mov	r0, r4
 800481a:	4629      	mov	r1, r5
 800481c:	f7fc f914 	bl	8000a48 <__aeabi_dcmple>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <rtIsInf+0x42>
 8004826:	2300      	movs	r3, #0
 8004828:	461e      	mov	r6, r3
 800482a:	b2f3      	uxtb	r3, r6
 800482c:	f083 0301 	eor.w	r3, r3, #1
 8004830:	b2db      	uxtb	r3, r3
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	b2db      	uxtb	r3, r3
}
 8004838:	4618      	mov	r0, r3
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004840:	7fefffff 	.word	0x7fefffff

08004844 <rtIsNaN>:
 * Function: rtIsNaN ==================================================
 *  Abstract:
 *  Test if value is not a number
 */
boolean_T rtIsNaN(real_T value)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	ed87 0b00 	vstr	d0, [r7]
  return (isnan(value) != 0U);
 800484e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004852:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004856:	f7fc f915 	bl	8000a84 <__aeabi_dcmpun>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <rtIsNaN+0x20>
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <rtIsNaN+0x22>
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004876:	2300      	movs	r3, #0
 8004878:	607b      	str	r3, [r7, #4]
 800487a:	4b10      	ldr	r3, [pc, #64]	; (80048bc <HAL_MspInit+0x4c>)
 800487c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487e:	4a0f      	ldr	r2, [pc, #60]	; (80048bc <HAL_MspInit+0x4c>)
 8004880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004884:	6453      	str	r3, [r2, #68]	; 0x44
 8004886:	4b0d      	ldr	r3, [pc, #52]	; (80048bc <HAL_MspInit+0x4c>)
 8004888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800488e:	607b      	str	r3, [r7, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004892:	2300      	movs	r3, #0
 8004894:	603b      	str	r3, [r7, #0]
 8004896:	4b09      	ldr	r3, [pc, #36]	; (80048bc <HAL_MspInit+0x4c>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	4a08      	ldr	r2, [pc, #32]	; (80048bc <HAL_MspInit+0x4c>)
 800489c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a0:	6413      	str	r3, [r2, #64]	; 0x40
 80048a2:	4b06      	ldr	r3, [pc, #24]	; (80048bc <HAL_MspInit+0x4c>)
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048aa:	603b      	str	r3, [r7, #0]
 80048ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80048ae:	2007      	movs	r0, #7
 80048b0:	f001 f882 	bl	80059b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048b4:	bf00      	nop
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40023800 	.word	0x40023800

080048c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08a      	sub	sp, #40	; 0x28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c8:	f107 0314 	add.w	r3, r7, #20
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	605a      	str	r2, [r3, #4]
 80048d2:	609a      	str	r2, [r3, #8]
 80048d4:	60da      	str	r2, [r3, #12]
 80048d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a3c      	ldr	r2, [pc, #240]	; (80049d0 <HAL_ADC_MspInit+0x110>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d171      	bne.n	80049c6 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80048e2:	2300      	movs	r3, #0
 80048e4:	613b      	str	r3, [r7, #16]
 80048e6:	4b3b      	ldr	r3, [pc, #236]	; (80049d4 <HAL_ADC_MspInit+0x114>)
 80048e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ea:	4a3a      	ldr	r2, [pc, #232]	; (80049d4 <HAL_ADC_MspInit+0x114>)
 80048ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f0:	6453      	str	r3, [r2, #68]	; 0x44
 80048f2:	4b38      	ldr	r3, [pc, #224]	; (80049d4 <HAL_ADC_MspInit+0x114>)
 80048f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	4b34      	ldr	r3, [pc, #208]	; (80049d4 <HAL_ADC_MspInit+0x114>)
 8004904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004906:	4a33      	ldr	r2, [pc, #204]	; (80049d4 <HAL_ADC_MspInit+0x114>)
 8004908:	f043 0301 	orr.w	r3, r3, #1
 800490c:	6313      	str	r3, [r2, #48]	; 0x30
 800490e:	4b31      	ldr	r3, [pc, #196]	; (80049d4 <HAL_ADC_MspInit+0x114>)
 8004910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800491a:	2300      	movs	r3, #0
 800491c:	60bb      	str	r3, [r7, #8]
 800491e:	4b2d      	ldr	r3, [pc, #180]	; (80049d4 <HAL_ADC_MspInit+0x114>)
 8004920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004922:	4a2c      	ldr	r2, [pc, #176]	; (80049d4 <HAL_ADC_MspInit+0x114>)
 8004924:	f043 0302 	orr.w	r3, r3, #2
 8004928:	6313      	str	r3, [r2, #48]	; 0x30
 800492a:	4b2a      	ldr	r3, [pc, #168]	; (80049d4 <HAL_ADC_MspInit+0x114>)
 800492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	60bb      	str	r3, [r7, #8]
 8004934:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Joystick_Y_Pin;
 8004936:	2310      	movs	r3, #16
 8004938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800493a:	2303      	movs	r3, #3
 800493c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800493e:	2300      	movs	r3, #0
 8004940:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Joystick_Y_GPIO_Port, &GPIO_InitStruct);
 8004942:	f107 0314 	add.w	r3, r7, #20
 8004946:	4619      	mov	r1, r3
 8004948:	4823      	ldr	r0, [pc, #140]	; (80049d8 <HAL_ADC_MspInit+0x118>)
 800494a:	f001 fc85 	bl	8006258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Joystick_X_Pin;
 800494e:	2301      	movs	r3, #1
 8004950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004952:	2303      	movs	r3, #3
 8004954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004956:	2300      	movs	r3, #0
 8004958:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Joystick_X_GPIO_Port, &GPIO_InitStruct);
 800495a:	f107 0314 	add.w	r3, r7, #20
 800495e:	4619      	mov	r1, r3
 8004960:	481e      	ldr	r0, [pc, #120]	; (80049dc <HAL_ADC_MspInit+0x11c>)
 8004962:	f001 fc79 	bl	8006258 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004966:	4b1e      	ldr	r3, [pc, #120]	; (80049e0 <HAL_ADC_MspInit+0x120>)
 8004968:	4a1e      	ldr	r2, [pc, #120]	; (80049e4 <HAL_ADC_MspInit+0x124>)
 800496a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800496c:	4b1c      	ldr	r3, [pc, #112]	; (80049e0 <HAL_ADC_MspInit+0x120>)
 800496e:	2200      	movs	r2, #0
 8004970:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004972:	4b1b      	ldr	r3, [pc, #108]	; (80049e0 <HAL_ADC_MspInit+0x120>)
 8004974:	2200      	movs	r2, #0
 8004976:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004978:	4b19      	ldr	r3, [pc, #100]	; (80049e0 <HAL_ADC_MspInit+0x120>)
 800497a:	2200      	movs	r2, #0
 800497c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800497e:	4b18      	ldr	r3, [pc, #96]	; (80049e0 <HAL_ADC_MspInit+0x120>)
 8004980:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004984:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004986:	4b16      	ldr	r3, [pc, #88]	; (80049e0 <HAL_ADC_MspInit+0x120>)
 8004988:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800498c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800498e:	4b14      	ldr	r3, [pc, #80]	; (80049e0 <HAL_ADC_MspInit+0x120>)
 8004990:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004994:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004996:	4b12      	ldr	r3, [pc, #72]	; (80049e0 <HAL_ADC_MspInit+0x120>)
 8004998:	f44f 7280 	mov.w	r2, #256	; 0x100
 800499c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800499e:	4b10      	ldr	r3, [pc, #64]	; (80049e0 <HAL_ADC_MspInit+0x120>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049a4:	4b0e      	ldr	r3, [pc, #56]	; (80049e0 <HAL_ADC_MspInit+0x120>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80049aa:	480d      	ldr	r0, [pc, #52]	; (80049e0 <HAL_ADC_MspInit+0x120>)
 80049ac:	f001 f846 	bl	8005a3c <HAL_DMA_Init>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80049b6:	f7ff ff11 	bl	80047dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a08      	ldr	r2, [pc, #32]	; (80049e0 <HAL_ADC_MspInit+0x120>)
 80049be:	639a      	str	r2, [r3, #56]	; 0x38
 80049c0:	4a07      	ldr	r2, [pc, #28]	; (80049e0 <HAL_ADC_MspInit+0x120>)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80049c6:	bf00      	nop
 80049c8:	3728      	adds	r7, #40	; 0x28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40012000 	.word	0x40012000
 80049d4:	40023800 	.word	0x40023800
 80049d8:	40020000 	.word	0x40020000
 80049dc:	40020400 	.word	0x40020400
 80049e0:	20000438 	.word	0x20000438
 80049e4:	40026410 	.word	0x40026410

080049e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08a      	sub	sp, #40	; 0x28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049f0:	f107 0314 	add.w	r3, r7, #20
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	605a      	str	r2, [r3, #4]
 80049fa:	609a      	str	r2, [r3, #8]
 80049fc:	60da      	str	r2, [r3, #12]
 80049fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a19      	ldr	r2, [pc, #100]	; (8004a6c <HAL_I2C_MspInit+0x84>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d12c      	bne.n	8004a64 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	4b18      	ldr	r3, [pc, #96]	; (8004a70 <HAL_I2C_MspInit+0x88>)
 8004a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a12:	4a17      	ldr	r2, [pc, #92]	; (8004a70 <HAL_I2C_MspInit+0x88>)
 8004a14:	f043 0302 	orr.w	r3, r3, #2
 8004a18:	6313      	str	r3, [r2, #48]	; 0x30
 8004a1a:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <HAL_I2C_MspInit+0x88>)
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	613b      	str	r3, [r7, #16]
 8004a24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004a26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a2c:	2312      	movs	r3, #18
 8004a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a30:	2300      	movs	r3, #0
 8004a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a34:	2303      	movs	r3, #3
 8004a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004a38:	2304      	movs	r3, #4
 8004a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a3c:	f107 0314 	add.w	r3, r7, #20
 8004a40:	4619      	mov	r1, r3
 8004a42:	480c      	ldr	r0, [pc, #48]	; (8004a74 <HAL_I2C_MspInit+0x8c>)
 8004a44:	f001 fc08 	bl	8006258 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	4b08      	ldr	r3, [pc, #32]	; (8004a70 <HAL_I2C_MspInit+0x88>)
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	4a07      	ldr	r2, [pc, #28]	; (8004a70 <HAL_I2C_MspInit+0x88>)
 8004a52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a56:	6413      	str	r3, [r2, #64]	; 0x40
 8004a58:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <HAL_I2C_MspInit+0x88>)
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004a64:	bf00      	nop
 8004a66:	3728      	adds	r7, #40	; 0x28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40005400 	.word	0x40005400
 8004a70:	40023800 	.word	0x40023800
 8004a74:	40020400 	.word	0x40020400

08004a78 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08a      	sub	sp, #40	; 0x28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a80:	f107 0314 	add.w	r3, r7, #20
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	605a      	str	r2, [r3, #4]
 8004a8a:	609a      	str	r2, [r3, #8]
 8004a8c:	60da      	str	r2, [r3, #12]
 8004a8e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a98:	d12b      	bne.n	8004af2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	613b      	str	r3, [r7, #16]
 8004a9e:	4b17      	ldr	r3, [pc, #92]	; (8004afc <HAL_TIM_Encoder_MspInit+0x84>)
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	4a16      	ldr	r2, [pc, #88]	; (8004afc <HAL_TIM_Encoder_MspInit+0x84>)
 8004aa4:	f043 0301 	orr.w	r3, r3, #1
 8004aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8004aaa:	4b14      	ldr	r3, [pc, #80]	; (8004afc <HAL_TIM_Encoder_MspInit+0x84>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	613b      	str	r3, [r7, #16]
 8004ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	4b10      	ldr	r3, [pc, #64]	; (8004afc <HAL_TIM_Encoder_MspInit+0x84>)
 8004abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abe:	4a0f      	ldr	r2, [pc, #60]	; (8004afc <HAL_TIM_Encoder_MspInit+0x84>)
 8004ac0:	f043 0301 	orr.w	r3, r3, #1
 8004ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ac6:	4b0d      	ldr	r3, [pc, #52]	; (8004afc <HAL_TIM_Encoder_MspInit+0x84>)
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Encoder_B_Pin|Encoder_A_Pin;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ae6:	f107 0314 	add.w	r3, r7, #20
 8004aea:	4619      	mov	r1, r3
 8004aec:	4804      	ldr	r0, [pc, #16]	; (8004b00 <HAL_TIM_Encoder_MspInit+0x88>)
 8004aee:	f001 fbb3 	bl	8006258 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004af2:	bf00      	nop
 8004af4:	3728      	adds	r7, #40	; 0x28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	40023800 	.word	0x40023800
 8004b00:	40020000 	.word	0x40020000

08004b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a34      	ldr	r2, [pc, #208]	; (8004be4 <HAL_TIM_Base_MspInit+0xe0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d116      	bne.n	8004b44 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004b16:	2300      	movs	r3, #0
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	4b33      	ldr	r3, [pc, #204]	; (8004be8 <HAL_TIM_Base_MspInit+0xe4>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	4a32      	ldr	r2, [pc, #200]	; (8004be8 <HAL_TIM_Base_MspInit+0xe4>)
 8004b20:	f043 0302 	orr.w	r3, r3, #2
 8004b24:	6413      	str	r3, [r2, #64]	; 0x40
 8004b26:	4b30      	ldr	r3, [pc, #192]	; (8004be8 <HAL_TIM_Base_MspInit+0xe4>)
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004b32:	2200      	movs	r2, #0
 8004b34:	2100      	movs	r1, #0
 8004b36:	201d      	movs	r0, #29
 8004b38:	f000 ff49 	bl	80059ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004b3c:	201d      	movs	r0, #29
 8004b3e:	f000 ff62 	bl	8005a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004b42:	e04a      	b.n	8004bda <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a28      	ldr	r2, [pc, #160]	; (8004bec <HAL_TIM_Base_MspInit+0xe8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d116      	bne.n	8004b7c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004b4e:	2300      	movs	r3, #0
 8004b50:	613b      	str	r3, [r7, #16]
 8004b52:	4b25      	ldr	r3, [pc, #148]	; (8004be8 <HAL_TIM_Base_MspInit+0xe4>)
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	4a24      	ldr	r2, [pc, #144]	; (8004be8 <HAL_TIM_Base_MspInit+0xe4>)
 8004b58:	f043 0304 	orr.w	r3, r3, #4
 8004b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b5e:	4b22      	ldr	r3, [pc, #136]	; (8004be8 <HAL_TIM_Base_MspInit+0xe4>)
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	613b      	str	r3, [r7, #16]
 8004b68:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	201e      	movs	r0, #30
 8004b70:	f000 ff2d 	bl	80059ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004b74:	201e      	movs	r0, #30
 8004b76:	f000 ff46 	bl	8005a06 <HAL_NVIC_EnableIRQ>
}
 8004b7a:	e02e      	b.n	8004bda <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a1b      	ldr	r2, [pc, #108]	; (8004bf0 <HAL_TIM_Base_MspInit+0xec>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d10e      	bne.n	8004ba4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004b86:	2300      	movs	r3, #0
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	4b17      	ldr	r3, [pc, #92]	; (8004be8 <HAL_TIM_Base_MspInit+0xe4>)
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	4a16      	ldr	r2, [pc, #88]	; (8004be8 <HAL_TIM_Base_MspInit+0xe4>)
 8004b90:	f043 0308 	orr.w	r3, r3, #8
 8004b94:	6413      	str	r3, [r2, #64]	; 0x40
 8004b96:	4b14      	ldr	r3, [pc, #80]	; (8004be8 <HAL_TIM_Base_MspInit+0xe4>)
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
}
 8004ba2:	e01a      	b.n	8004bda <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM11)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a12      	ldr	r2, [pc, #72]	; (8004bf4 <HAL_TIM_Base_MspInit+0xf0>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d115      	bne.n	8004bda <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60bb      	str	r3, [r7, #8]
 8004bb2:	4b0d      	ldr	r3, [pc, #52]	; (8004be8 <HAL_TIM_Base_MspInit+0xe4>)
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb6:	4a0c      	ldr	r2, [pc, #48]	; (8004be8 <HAL_TIM_Base_MspInit+0xe4>)
 8004bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8004bbe:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <HAL_TIM_Base_MspInit+0xe4>)
 8004bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bc6:	60bb      	str	r3, [r7, #8]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004bca:	2200      	movs	r2, #0
 8004bcc:	2100      	movs	r1, #0
 8004bce:	201a      	movs	r0, #26
 8004bd0:	f000 fefd 	bl	80059ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004bd4:	201a      	movs	r0, #26
 8004bd6:	f000 ff16 	bl	8005a06 <HAL_NVIC_EnableIRQ>
}
 8004bda:	bf00      	nop
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	40000400 	.word	0x40000400
 8004be8:	40023800 	.word	0x40023800
 8004bec:	40000800 	.word	0x40000800
 8004bf0:	40000c00 	.word	0x40000c00
 8004bf4:	40014800 	.word	0x40014800

08004bf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b088      	sub	sp, #32
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c00:	f107 030c 	add.w	r3, r7, #12
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	605a      	str	r2, [r3, #4]
 8004c0a:	609a      	str	r2, [r3, #8]
 8004c0c:	60da      	str	r2, [r3, #12]
 8004c0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a12      	ldr	r2, [pc, #72]	; (8004c60 <HAL_TIM_MspPostInit+0x68>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d11d      	bne.n	8004c56 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60bb      	str	r3, [r7, #8]
 8004c1e:	4b11      	ldr	r3, [pc, #68]	; (8004c64 <HAL_TIM_MspPostInit+0x6c>)
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	4a10      	ldr	r2, [pc, #64]	; (8004c64 <HAL_TIM_MspPostInit+0x6c>)
 8004c24:	f043 0302 	orr.w	r3, r3, #2
 8004c28:	6313      	str	r3, [r2, #48]	; 0x30
 8004c2a:	4b0e      	ldr	r3, [pc, #56]	; (8004c64 <HAL_TIM_MspPostInit+0x6c>)
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	60bb      	str	r3, [r7, #8]
 8004c34:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004c36:	2340      	movs	r3, #64	; 0x40
 8004c38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c42:	2300      	movs	r3, #0
 8004c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004c46:	2302      	movs	r3, #2
 8004c48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c4a:	f107 030c 	add.w	r3, r7, #12
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4805      	ldr	r0, [pc, #20]	; (8004c68 <HAL_TIM_MspPostInit+0x70>)
 8004c52:	f001 fb01 	bl	8006258 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004c56:	bf00      	nop
 8004c58:	3720      	adds	r7, #32
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	40000800 	.word	0x40000800
 8004c64:	40023800 	.word	0x40023800
 8004c68:	40020400 	.word	0x40020400

08004c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b08a      	sub	sp, #40	; 0x28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c74:	f107 0314 	add.w	r3, r7, #20
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	605a      	str	r2, [r3, #4]
 8004c7e:	609a      	str	r2, [r3, #8]
 8004c80:	60da      	str	r2, [r3, #12]
 8004c82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a34      	ldr	r2, [pc, #208]	; (8004d5c <HAL_UART_MspInit+0xf0>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d161      	bne.n	8004d52 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c8e:	2300      	movs	r3, #0
 8004c90:	613b      	str	r3, [r7, #16]
 8004c92:	4b33      	ldr	r3, [pc, #204]	; (8004d60 <HAL_UART_MspInit+0xf4>)
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	4a32      	ldr	r2, [pc, #200]	; (8004d60 <HAL_UART_MspInit+0xf4>)
 8004c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c9e:	4b30      	ldr	r3, [pc, #192]	; (8004d60 <HAL_UART_MspInit+0xf4>)
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca6:	613b      	str	r3, [r7, #16]
 8004ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004caa:	2300      	movs	r3, #0
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	4b2c      	ldr	r3, [pc, #176]	; (8004d60 <HAL_UART_MspInit+0xf4>)
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb2:	4a2b      	ldr	r2, [pc, #172]	; (8004d60 <HAL_UART_MspInit+0xf4>)
 8004cb4:	f043 0301 	orr.w	r3, r3, #1
 8004cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8004cba:	4b29      	ldr	r3, [pc, #164]	; (8004d60 <HAL_UART_MspInit+0xf4>)
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004cc6:	230c      	movs	r3, #12
 8004cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cca:	2302      	movs	r3, #2
 8004ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004cd6:	2307      	movs	r3, #7
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cda:	f107 0314 	add.w	r3, r7, #20
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4820      	ldr	r0, [pc, #128]	; (8004d64 <HAL_UART_MspInit+0xf8>)
 8004ce2:	f001 fab9 	bl	8006258 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004ce6:	4b20      	ldr	r3, [pc, #128]	; (8004d68 <HAL_UART_MspInit+0xfc>)
 8004ce8:	4a20      	ldr	r2, [pc, #128]	; (8004d6c <HAL_UART_MspInit+0x100>)
 8004cea:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004cec:	4b1e      	ldr	r3, [pc, #120]	; (8004d68 <HAL_UART_MspInit+0xfc>)
 8004cee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004cf2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cf4:	4b1c      	ldr	r3, [pc, #112]	; (8004d68 <HAL_UART_MspInit+0xfc>)
 8004cf6:	2240      	movs	r2, #64	; 0x40
 8004cf8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cfa:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <HAL_UART_MspInit+0xfc>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d00:	4b19      	ldr	r3, [pc, #100]	; (8004d68 <HAL_UART_MspInit+0xfc>)
 8004d02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d06:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d08:	4b17      	ldr	r3, [pc, #92]	; (8004d68 <HAL_UART_MspInit+0xfc>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d0e:	4b16      	ldr	r3, [pc, #88]	; (8004d68 <HAL_UART_MspInit+0xfc>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004d14:	4b14      	ldr	r3, [pc, #80]	; (8004d68 <HAL_UART_MspInit+0xfc>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d1a:	4b13      	ldr	r3, [pc, #76]	; (8004d68 <HAL_UART_MspInit+0xfc>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d20:	4b11      	ldr	r3, [pc, #68]	; (8004d68 <HAL_UART_MspInit+0xfc>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004d26:	4810      	ldr	r0, [pc, #64]	; (8004d68 <HAL_UART_MspInit+0xfc>)
 8004d28:	f000 fe88 	bl	8005a3c <HAL_DMA_Init>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004d32:	f7ff fd53 	bl	80047dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a0b      	ldr	r2, [pc, #44]	; (8004d68 <HAL_UART_MspInit+0xfc>)
 8004d3a:	635a      	str	r2, [r3, #52]	; 0x34
 8004d3c:	4a0a      	ldr	r2, [pc, #40]	; (8004d68 <HAL_UART_MspInit+0xfc>)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004d42:	2200      	movs	r2, #0
 8004d44:	2100      	movs	r1, #0
 8004d46:	2026      	movs	r0, #38	; 0x26
 8004d48:	f000 fe41 	bl	80059ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004d4c:	2026      	movs	r0, #38	; 0x26
 8004d4e:	f000 fe5a 	bl	8005a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004d52:	bf00      	nop
 8004d54:	3728      	adds	r7, #40	; 0x28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	40004400 	.word	0x40004400
 8004d60:	40023800 	.word	0x40023800
 8004d64:	40020000 	.word	0x40020000
 8004d68:	200008e4 	.word	0x200008e4
 8004d6c:	400260a0 	.word	0x400260a0

08004d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d74:	e7fe      	b.n	8004d74 <NMI_Handler+0x4>

08004d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d76:	b480      	push	{r7}
 8004d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d7a:	e7fe      	b.n	8004d7a <HardFault_Handler+0x4>

08004d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d80:	e7fe      	b.n	8004d80 <MemManage_Handler+0x4>

08004d82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d82:	b480      	push	{r7}
 8004d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d86:	e7fe      	b.n	8004d86 <BusFault_Handler+0x4>

08004d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d8c:	e7fe      	b.n	8004d8c <UsageFault_Handler+0x4>

08004d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d92:	bf00      	nop
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004da0:	bf00      	nop
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004daa:	b480      	push	{r7}
 8004dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dae:	bf00      	nop
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004dbc:	f000 f90a 	bl	8004fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004dc0:	bf00      	nop
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004dc8:	4802      	ldr	r0, [pc, #8]	; (8004dd4 <DMA1_Stream6_IRQHandler+0x10>)
 8004dca:	f000 ffcf 	bl	8005d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004dce:	bf00      	nop
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	200008e4 	.word	0x200008e4

08004dd8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8004ddc:	4802      	ldr	r0, [pc, #8]	; (8004de8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004dde:	f002 fe95 	bl	8007b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004de2:	bf00      	nop
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	200007bc 	.word	0x200007bc

08004dec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004df0:	4802      	ldr	r0, [pc, #8]	; (8004dfc <TIM3_IRQHandler+0x10>)
 8004df2:	f002 fe8b 	bl	8007b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004df6:	bf00      	nop
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	200005a0 	.word	0x200005a0

08004e00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004e04:	4802      	ldr	r0, [pc, #8]	; (8004e10 <TIM4_IRQHandler+0x10>)
 8004e06:	f002 fe81 	bl	8007b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004e0a:	bf00      	nop
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	20000654 	.word	0x20000654

08004e14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004e18:	4802      	ldr	r0, [pc, #8]	; (8004e24 <USART2_IRQHandler+0x10>)
 8004e1a:	f004 f92d 	bl	8009078 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004e1e:	bf00      	nop
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	20000870 	.word	0x20000870

08004e28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004e2c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004e30:	f001 fbc8 	bl	80065c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004e34:	bf00      	nop
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e3c:	4802      	ldr	r0, [pc, #8]	; (8004e48 <DMA2_Stream0_IRQHandler+0x10>)
 8004e3e:	f000 ff95 	bl	8005d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004e42:	bf00      	nop
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	20000438 	.word	0x20000438

08004e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e54:	4a14      	ldr	r2, [pc, #80]	; (8004ea8 <_sbrk+0x5c>)
 8004e56:	4b15      	ldr	r3, [pc, #84]	; (8004eac <_sbrk+0x60>)
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e60:	4b13      	ldr	r3, [pc, #76]	; (8004eb0 <_sbrk+0x64>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d102      	bne.n	8004e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e68:	4b11      	ldr	r3, [pc, #68]	; (8004eb0 <_sbrk+0x64>)
 8004e6a:	4a12      	ldr	r2, [pc, #72]	; (8004eb4 <_sbrk+0x68>)
 8004e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e6e:	4b10      	ldr	r3, [pc, #64]	; (8004eb0 <_sbrk+0x64>)
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4413      	add	r3, r2
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d207      	bcs.n	8004e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e7c:	f005 f94a 	bl	800a114 <__errno>
 8004e80:	4603      	mov	r3, r0
 8004e82:	220c      	movs	r2, #12
 8004e84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e86:	f04f 33ff 	mov.w	r3, #4294967295
 8004e8a:	e009      	b.n	8004ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e8c:	4b08      	ldr	r3, [pc, #32]	; (8004eb0 <_sbrk+0x64>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e92:	4b07      	ldr	r3, [pc, #28]	; (8004eb0 <_sbrk+0x64>)
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4413      	add	r3, r2
 8004e9a:	4a05      	ldr	r2, [pc, #20]	; (8004eb0 <_sbrk+0x64>)
 8004e9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	20020000 	.word	0x20020000
 8004eac:	00000400 	.word	0x00000400
 8004eb0:	20001340 	.word	0x20001340
 8004eb4:	20001358 	.word	0x20001358

08004eb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ebc:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <SystemInit+0x20>)
 8004ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec2:	4a05      	ldr	r2, [pc, #20]	; (8004ed8 <SystemInit+0x20>)
 8004ec4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ec8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ecc:	bf00      	nop
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	e000ed00 	.word	0xe000ed00

08004edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ee0:	480d      	ldr	r0, [pc, #52]	; (8004f18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004ee2:	490e      	ldr	r1, [pc, #56]	; (8004f1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004ee4:	4a0e      	ldr	r2, [pc, #56]	; (8004f20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ee8:	e002      	b.n	8004ef0 <LoopCopyDataInit>

08004eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004eee:	3304      	adds	r3, #4

08004ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ef4:	d3f9      	bcc.n	8004eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ef6:	4a0b      	ldr	r2, [pc, #44]	; (8004f24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004ef8:	4c0b      	ldr	r4, [pc, #44]	; (8004f28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004efc:	e001      	b.n	8004f02 <LoopFillZerobss>

08004efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f00:	3204      	adds	r2, #4

08004f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f04:	d3fb      	bcc.n	8004efe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004f06:	f7ff ffd7 	bl	8004eb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f0a:	f005 f909 	bl	800a120 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f0e:	f7fd f913 	bl	8002138 <main>
  bx  lr    
 8004f12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004f14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f1c:	200003d0 	.word	0x200003d0
  ldr r2, =_sidata
 8004f20:	0800ca28 	.word	0x0800ca28
  ldr r2, =_sbss
 8004f24:	200003d0 	.word	0x200003d0
  ldr r4, =_ebss
 8004f28:	20001358 	.word	0x20001358

08004f2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f2c:	e7fe      	b.n	8004f2c <ADC_IRQHandler>
	...

08004f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f34:	4b0e      	ldr	r3, [pc, #56]	; (8004f70 <HAL_Init+0x40>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a0d      	ldr	r2, [pc, #52]	; (8004f70 <HAL_Init+0x40>)
 8004f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f40:	4b0b      	ldr	r3, [pc, #44]	; (8004f70 <HAL_Init+0x40>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a0a      	ldr	r2, [pc, #40]	; (8004f70 <HAL_Init+0x40>)
 8004f46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f4c:	4b08      	ldr	r3, [pc, #32]	; (8004f70 <HAL_Init+0x40>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a07      	ldr	r2, [pc, #28]	; (8004f70 <HAL_Init+0x40>)
 8004f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f58:	2003      	movs	r0, #3
 8004f5a:	f000 fd2d 	bl	80059b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f5e:	2000      	movs	r0, #0
 8004f60:	f000 f808 	bl	8004f74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f64:	f7ff fc84 	bl	8004870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40023c00 	.word	0x40023c00

08004f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f7c:	4b12      	ldr	r3, [pc, #72]	; (8004fc8 <HAL_InitTick+0x54>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	4b12      	ldr	r3, [pc, #72]	; (8004fcc <HAL_InitTick+0x58>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	4619      	mov	r1, r3
 8004f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 fd45 	bl	8005a22 <HAL_SYSTICK_Config>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e00e      	b.n	8004fc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b0f      	cmp	r3, #15
 8004fa6:	d80a      	bhi.n	8004fbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004fa8:	2200      	movs	r2, #0
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb0:	f000 fd0d 	bl	80059ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004fb4:	4a06      	ldr	r2, [pc, #24]	; (8004fd0 <HAL_InitTick+0x5c>)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e000      	b.n	8004fc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	20000360 	.word	0x20000360
 8004fcc:	20000368 	.word	0x20000368
 8004fd0:	20000364 	.word	0x20000364

08004fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004fd8:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <HAL_IncTick+0x20>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	461a      	mov	r2, r3
 8004fde:	4b06      	ldr	r3, [pc, #24]	; (8004ff8 <HAL_IncTick+0x24>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	4a04      	ldr	r2, [pc, #16]	; (8004ff8 <HAL_IncTick+0x24>)
 8004fe6:	6013      	str	r3, [r2, #0]
}
 8004fe8:	bf00      	nop
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	20000368 	.word	0x20000368
 8004ff8:	20001344 	.word	0x20001344

08004ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8005000:	4b03      	ldr	r3, [pc, #12]	; (8005010 <HAL_GetTick+0x14>)
 8005002:	681b      	ldr	r3, [r3, #0]
}
 8005004:	4618      	mov	r0, r3
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	20001344 	.word	0x20001344

08005014 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800501c:	2300      	movs	r3, #0
 800501e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e033      	b.n	8005092 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502e:	2b00      	cmp	r3, #0
 8005030:	d109      	bne.n	8005046 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7ff fc44 	bl	80048c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	f003 0310 	and.w	r3, r3, #16
 800504e:	2b00      	cmp	r3, #0
 8005050:	d118      	bne.n	8005084 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800505a:	f023 0302 	bic.w	r3, r3, #2
 800505e:	f043 0202 	orr.w	r2, r3, #2
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fa58 	bl	800551c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	f023 0303 	bic.w	r3, r3, #3
 800507a:	f043 0201 	orr.w	r2, r3, #1
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	641a      	str	r2, [r3, #64]	; 0x40
 8005082:	e001      	b.n	8005088 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005090:	7bfb      	ldrb	r3, [r7, #15]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
	...

0800509c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d101      	bne.n	80050ba <HAL_ADC_Start_DMA+0x1e>
 80050b6:	2302      	movs	r3, #2
 80050b8:	e0ce      	b.n	8005258 <HAL_ADC_Start_DMA+0x1bc>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d018      	beq.n	8005102 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0201 	orr.w	r2, r2, #1
 80050de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80050e0:	4b5f      	ldr	r3, [pc, #380]	; (8005260 <HAL_ADC_Start_DMA+0x1c4>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a5f      	ldr	r2, [pc, #380]	; (8005264 <HAL_ADC_Start_DMA+0x1c8>)
 80050e6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ea:	0c9a      	lsrs	r2, r3, #18
 80050ec:	4613      	mov	r3, r2
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	4413      	add	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80050f4:	e002      	b.n	80050fc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	3b01      	subs	r3, #1
 80050fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1f9      	bne.n	80050f6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005110:	d107      	bne.n	8005122 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005120:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b01      	cmp	r3, #1
 800512e:	f040 8086 	bne.w	800523e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800513a:	f023 0301 	bic.w	r3, r3, #1
 800513e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005150:	2b00      	cmp	r3, #0
 8005152:	d007      	beq.n	8005164 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005158:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800515c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005168:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800516c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005170:	d106      	bne.n	8005180 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005176:	f023 0206 	bic.w	r2, r3, #6
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	645a      	str	r2, [r3, #68]	; 0x44
 800517e:	e002      	b.n	8005186 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800518e:	4b36      	ldr	r3, [pc, #216]	; (8005268 <HAL_ADC_Start_DMA+0x1cc>)
 8005190:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005196:	4a35      	ldr	r2, [pc, #212]	; (800526c <HAL_ADC_Start_DMA+0x1d0>)
 8005198:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519e:	4a34      	ldr	r2, [pc, #208]	; (8005270 <HAL_ADC_Start_DMA+0x1d4>)
 80051a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	4a33      	ldr	r2, [pc, #204]	; (8005274 <HAL_ADC_Start_DMA+0x1d8>)
 80051a8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80051b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80051c2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051d2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	334c      	adds	r3, #76	; 0x4c
 80051de:	4619      	mov	r1, r3
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f000 fcd8 	bl	8005b98 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f003 031f 	and.w	r3, r3, #31
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10f      	bne.n	8005214 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d129      	bne.n	8005256 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005210:	609a      	str	r2, [r3, #8]
 8005212:	e020      	b.n	8005256 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a17      	ldr	r2, [pc, #92]	; (8005278 <HAL_ADC_Start_DMA+0x1dc>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d11b      	bne.n	8005256 <HAL_ADC_Start_DMA+0x1ba>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d114      	bne.n	8005256 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800523a:	609a      	str	r2, [r3, #8]
 800523c:	e00b      	b.n	8005256 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	f043 0210 	orr.w	r2, r3, #16
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524e:	f043 0201 	orr.w	r2, r3, #1
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	20000360 	.word	0x20000360
 8005264:	431bde83 	.word	0x431bde83
 8005268:	40012300 	.word	0x40012300
 800526c:	08005715 	.word	0x08005715
 8005270:	080057cf 	.word	0x080057cf
 8005274:	080057eb 	.word	0x080057eb
 8005278:	40012000 	.word	0x40012000

0800527c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_ADC_ConfigChannel+0x1c>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e113      	b.n	80054fc <HAL_ADC_ConfigChannel+0x244>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b09      	cmp	r3, #9
 80052e2:	d925      	bls.n	8005330 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68d9      	ldr	r1, [r3, #12]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	461a      	mov	r2, r3
 80052f2:	4613      	mov	r3, r2
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	4413      	add	r3, r2
 80052f8:	3b1e      	subs	r3, #30
 80052fa:	2207      	movs	r2, #7
 80052fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005300:	43da      	mvns	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	400a      	ands	r2, r1
 8005308:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68d9      	ldr	r1, [r3, #12]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	b29b      	uxth	r3, r3
 800531a:	4618      	mov	r0, r3
 800531c:	4603      	mov	r3, r0
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	4403      	add	r3, r0
 8005322:	3b1e      	subs	r3, #30
 8005324:	409a      	lsls	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	60da      	str	r2, [r3, #12]
 800532e:	e022      	b.n	8005376 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6919      	ldr	r1, [r3, #16]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	b29b      	uxth	r3, r3
 800533c:	461a      	mov	r2, r3
 800533e:	4613      	mov	r3, r2
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	4413      	add	r3, r2
 8005344:	2207      	movs	r2, #7
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	43da      	mvns	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	400a      	ands	r2, r1
 8005352:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6919      	ldr	r1, [r3, #16]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	689a      	ldr	r2, [r3, #8]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	b29b      	uxth	r3, r3
 8005364:	4618      	mov	r0, r3
 8005366:	4603      	mov	r3, r0
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	4403      	add	r3, r0
 800536c:	409a      	lsls	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2b06      	cmp	r3, #6
 800537c:	d824      	bhi.n	80053c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	4613      	mov	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	3b05      	subs	r3, #5
 8005390:	221f      	movs	r2, #31
 8005392:	fa02 f303 	lsl.w	r3, r2, r3
 8005396:	43da      	mvns	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	400a      	ands	r2, r1
 800539e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	4618      	mov	r0, r3
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	4613      	mov	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	3b05      	subs	r3, #5
 80053ba:	fa00 f203 	lsl.w	r2, r0, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	635a      	str	r2, [r3, #52]	; 0x34
 80053c6:	e04c      	b.n	8005462 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	2b0c      	cmp	r3, #12
 80053ce:	d824      	bhi.n	800541a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	4613      	mov	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	3b23      	subs	r3, #35	; 0x23
 80053e2:	221f      	movs	r2, #31
 80053e4:	fa02 f303 	lsl.w	r3, r2, r3
 80053e8:	43da      	mvns	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	400a      	ands	r2, r1
 80053f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	4618      	mov	r0, r3
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	4613      	mov	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	3b23      	subs	r3, #35	; 0x23
 800540c:	fa00 f203 	lsl.w	r2, r0, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	631a      	str	r2, [r3, #48]	; 0x30
 8005418:	e023      	b.n	8005462 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	4613      	mov	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	3b41      	subs	r3, #65	; 0x41
 800542c:	221f      	movs	r2, #31
 800542e:	fa02 f303 	lsl.w	r3, r2, r3
 8005432:	43da      	mvns	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	400a      	ands	r2, r1
 800543a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	b29b      	uxth	r3, r3
 8005448:	4618      	mov	r0, r3
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	4613      	mov	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	3b41      	subs	r3, #65	; 0x41
 8005456:	fa00 f203 	lsl.w	r2, r0, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005462:	4b29      	ldr	r3, [pc, #164]	; (8005508 <HAL_ADC_ConfigChannel+0x250>)
 8005464:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a28      	ldr	r2, [pc, #160]	; (800550c <HAL_ADC_ConfigChannel+0x254>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d10f      	bne.n	8005490 <HAL_ADC_ConfigChannel+0x1d8>
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b12      	cmp	r3, #18
 8005476:	d10b      	bne.n	8005490 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a1d      	ldr	r2, [pc, #116]	; (800550c <HAL_ADC_ConfigChannel+0x254>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d12b      	bne.n	80054f2 <HAL_ADC_ConfigChannel+0x23a>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a1c      	ldr	r2, [pc, #112]	; (8005510 <HAL_ADC_ConfigChannel+0x258>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d003      	beq.n	80054ac <HAL_ADC_ConfigChannel+0x1f4>
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b11      	cmp	r3, #17
 80054aa:	d122      	bne.n	80054f2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a11      	ldr	r2, [pc, #68]	; (8005510 <HAL_ADC_ConfigChannel+0x258>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d111      	bne.n	80054f2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80054ce:	4b11      	ldr	r3, [pc, #68]	; (8005514 <HAL_ADC_ConfigChannel+0x25c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a11      	ldr	r2, [pc, #68]	; (8005518 <HAL_ADC_ConfigChannel+0x260>)
 80054d4:	fba2 2303 	umull	r2, r3, r2, r3
 80054d8:	0c9a      	lsrs	r2, r3, #18
 80054da:	4613      	mov	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4413      	add	r3, r2
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80054e4:	e002      	b.n	80054ec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	3b01      	subs	r3, #1
 80054ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1f9      	bne.n	80054e6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	40012300 	.word	0x40012300
 800550c:	40012000 	.word	0x40012000
 8005510:	10000012 	.word	0x10000012
 8005514:	20000360 	.word	0x20000360
 8005518:	431bde83 	.word	0x431bde83

0800551c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005524:	4b79      	ldr	r3, [pc, #484]	; (800570c <ADC_Init+0x1f0>)
 8005526:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	431a      	orrs	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005550:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6859      	ldr	r1, [r3, #4]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	021a      	lsls	r2, r3, #8
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005574:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6859      	ldr	r1, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689a      	ldr	r2, [r3, #8]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005596:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6899      	ldr	r1, [r3, #8]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	4a58      	ldr	r2, [pc, #352]	; (8005710 <ADC_Init+0x1f4>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d022      	beq.n	80055fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80055c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6899      	ldr	r1, [r3, #8]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80055e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6899      	ldr	r1, [r3, #8]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	609a      	str	r2, [r3, #8]
 80055f8:	e00f      	b.n	800561a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005608:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689a      	ldr	r2, [r3, #8]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005618:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0202 	bic.w	r2, r2, #2
 8005628:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6899      	ldr	r1, [r3, #8]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	7e1b      	ldrb	r3, [r3, #24]
 8005634:	005a      	lsls	r2, r3, #1
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d01b      	beq.n	8005680 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005656:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005666:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6859      	ldr	r1, [r3, #4]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	3b01      	subs	r3, #1
 8005674:	035a      	lsls	r2, r3, #13
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	605a      	str	r2, [r3, #4]
 800567e:	e007      	b.n	8005690 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800568e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800569e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	051a      	lsls	r2, r3, #20
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689a      	ldr	r2, [r3, #8]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80056c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6899      	ldr	r1, [r3, #8]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056d2:	025a      	lsls	r2, r3, #9
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6899      	ldr	r1, [r3, #8]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	029a      	lsls	r2, r3, #10
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	609a      	str	r2, [r3, #8]
}
 8005700:	bf00      	nop
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	40012300 	.word	0x40012300
 8005710:	0f000001 	.word	0x0f000001

08005714 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005720:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800572a:	2b00      	cmp	r3, #0
 800572c:	d13c      	bne.n	80057a8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d12b      	bne.n	80057a0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800574c:	2b00      	cmp	r3, #0
 800574e:	d127      	bne.n	80057a0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005756:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800575a:	2b00      	cmp	r3, #0
 800575c:	d006      	beq.n	800576c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005768:	2b00      	cmp	r3, #0
 800576a:	d119      	bne.n	80057a0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 0220 	bic.w	r2, r2, #32
 800577a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005780:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d105      	bne.n	80057a0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005798:	f043 0201 	orr.w	r2, r3, #1
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f7ff fd6b 	bl	800527c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80057a6:	e00e      	b.n	80057c6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	f003 0310 	and.w	r3, r3, #16
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d003      	beq.n	80057bc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f7ff fd75 	bl	80052a4 <HAL_ADC_ErrorCallback>
}
 80057ba:	e004      	b.n	80057c6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	4798      	blx	r3
}
 80057c6:	bf00      	nop
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b084      	sub	sp, #16
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057da:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f7ff fd57 	bl	8005290 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80057e2:	bf00      	nop
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2240      	movs	r2, #64	; 0x40
 80057fc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005802:	f043 0204 	orr.w	r2, r3, #4
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f7ff fd4a 	bl	80052a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005810:	bf00      	nop
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <__NVIC_SetPriorityGrouping>:
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f003 0307 	and.w	r3, r3, #7
 8005826:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005828:	4b0c      	ldr	r3, [pc, #48]	; (800585c <__NVIC_SetPriorityGrouping+0x44>)
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005834:	4013      	ands	r3, r2
 8005836:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800584a:	4a04      	ldr	r2, [pc, #16]	; (800585c <__NVIC_SetPriorityGrouping+0x44>)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	60d3      	str	r3, [r2, #12]
}
 8005850:	bf00      	nop
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	e000ed00 	.word	0xe000ed00

08005860 <__NVIC_GetPriorityGrouping>:
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005864:	4b04      	ldr	r3, [pc, #16]	; (8005878 <__NVIC_GetPriorityGrouping+0x18>)
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	0a1b      	lsrs	r3, r3, #8
 800586a:	f003 0307 	and.w	r3, r3, #7
}
 800586e:	4618      	mov	r0, r3
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	e000ed00 	.word	0xe000ed00

0800587c <__NVIC_EnableIRQ>:
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	4603      	mov	r3, r0
 8005884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800588a:	2b00      	cmp	r3, #0
 800588c:	db0b      	blt.n	80058a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800588e:	79fb      	ldrb	r3, [r7, #7]
 8005890:	f003 021f 	and.w	r2, r3, #31
 8005894:	4907      	ldr	r1, [pc, #28]	; (80058b4 <__NVIC_EnableIRQ+0x38>)
 8005896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800589a:	095b      	lsrs	r3, r3, #5
 800589c:	2001      	movs	r0, #1
 800589e:	fa00 f202 	lsl.w	r2, r0, r2
 80058a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80058a6:	bf00      	nop
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	e000e100 	.word	0xe000e100

080058b8 <__NVIC_SetPriority>:
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	4603      	mov	r3, r0
 80058c0:	6039      	str	r1, [r7, #0]
 80058c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	db0a      	blt.n	80058e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	490c      	ldr	r1, [pc, #48]	; (8005904 <__NVIC_SetPriority+0x4c>)
 80058d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058d6:	0112      	lsls	r2, r2, #4
 80058d8:	b2d2      	uxtb	r2, r2
 80058da:	440b      	add	r3, r1
 80058dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80058e0:	e00a      	b.n	80058f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	4908      	ldr	r1, [pc, #32]	; (8005908 <__NVIC_SetPriority+0x50>)
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	3b04      	subs	r3, #4
 80058f0:	0112      	lsls	r2, r2, #4
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	440b      	add	r3, r1
 80058f6:	761a      	strb	r2, [r3, #24]
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	e000e100 	.word	0xe000e100
 8005908:	e000ed00 	.word	0xe000ed00

0800590c <NVIC_EncodePriority>:
{
 800590c:	b480      	push	{r7}
 800590e:	b089      	sub	sp, #36	; 0x24
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f003 0307 	and.w	r3, r3, #7
 800591e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	f1c3 0307 	rsb	r3, r3, #7
 8005926:	2b04      	cmp	r3, #4
 8005928:	bf28      	it	cs
 800592a:	2304      	movcs	r3, #4
 800592c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	3304      	adds	r3, #4
 8005932:	2b06      	cmp	r3, #6
 8005934:	d902      	bls.n	800593c <NVIC_EncodePriority+0x30>
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	3b03      	subs	r3, #3
 800593a:	e000      	b.n	800593e <NVIC_EncodePriority+0x32>
 800593c:	2300      	movs	r3, #0
 800593e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005940:	f04f 32ff 	mov.w	r2, #4294967295
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	43da      	mvns	r2, r3
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	401a      	ands	r2, r3
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005954:	f04f 31ff 	mov.w	r1, #4294967295
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	fa01 f303 	lsl.w	r3, r1, r3
 800595e:	43d9      	mvns	r1, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005964:	4313      	orrs	r3, r2
}
 8005966:	4618      	mov	r0, r3
 8005968:	3724      	adds	r7, #36	; 0x24
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
	...

08005974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3b01      	subs	r3, #1
 8005980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005984:	d301      	bcc.n	800598a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005986:	2301      	movs	r3, #1
 8005988:	e00f      	b.n	80059aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800598a:	4a0a      	ldr	r2, [pc, #40]	; (80059b4 <SysTick_Config+0x40>)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3b01      	subs	r3, #1
 8005990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005992:	210f      	movs	r1, #15
 8005994:	f04f 30ff 	mov.w	r0, #4294967295
 8005998:	f7ff ff8e 	bl	80058b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800599c:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <SysTick_Config+0x40>)
 800599e:	2200      	movs	r2, #0
 80059a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059a2:	4b04      	ldr	r3, [pc, #16]	; (80059b4 <SysTick_Config+0x40>)
 80059a4:	2207      	movs	r2, #7
 80059a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	e000e010 	.word	0xe000e010

080059b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7ff ff29 	bl	8005818 <__NVIC_SetPriorityGrouping>
}
 80059c6:	bf00      	nop
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b086      	sub	sp, #24
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	4603      	mov	r3, r0
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	607a      	str	r2, [r7, #4]
 80059da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80059dc:	2300      	movs	r3, #0
 80059de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059e0:	f7ff ff3e 	bl	8005860 <__NVIC_GetPriorityGrouping>
 80059e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	68b9      	ldr	r1, [r7, #8]
 80059ea:	6978      	ldr	r0, [r7, #20]
 80059ec:	f7ff ff8e 	bl	800590c <NVIC_EncodePriority>
 80059f0:	4602      	mov	r2, r0
 80059f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059f6:	4611      	mov	r1, r2
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff ff5d 	bl	80058b8 <__NVIC_SetPriority>
}
 80059fe:	bf00      	nop
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b082      	sub	sp, #8
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7ff ff31 	bl	800587c <__NVIC_EnableIRQ>
}
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b082      	sub	sp, #8
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7ff ffa2 	bl	8005974 <SysTick_Config>
 8005a30:	4603      	mov	r3, r0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
	...

08005a3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005a48:	f7ff fad8 	bl	8004ffc <HAL_GetTick>
 8005a4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e099      	b.n	8005b8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0201 	bic.w	r2, r2, #1
 8005a76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a78:	e00f      	b.n	8005a9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a7a:	f7ff fabf 	bl	8004ffc <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b05      	cmp	r3, #5
 8005a86:	d908      	bls.n	8005a9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2203      	movs	r2, #3
 8005a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e078      	b.n	8005b8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e8      	bne.n	8005a7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4b38      	ldr	r3, [pc, #224]	; (8005b94 <HAL_DMA_Init+0x158>)
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ade:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	2b04      	cmp	r3, #4
 8005af2:	d107      	bne.n	8005b04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afc:	4313      	orrs	r3, r2
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f023 0307 	bic.w	r3, r3, #7
 8005b1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d117      	bne.n	8005b5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00e      	beq.n	8005b5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 fb0d 	bl	8006160 <DMA_CheckFifoParam>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d008      	beq.n	8005b5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2240      	movs	r2, #64	; 0x40
 8005b50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e016      	b.n	8005b8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fac4 	bl	80060f4 <DMA_CalcBaseAndBitshift>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b74:	223f      	movs	r2, #63	; 0x3f
 8005b76:	409a      	lsls	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	f010803f 	.word	0xf010803f

08005b98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
 8005ba4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d101      	bne.n	8005bbe <HAL_DMA_Start_IT+0x26>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e040      	b.n	8005c40 <HAL_DMA_Start_IT+0xa8>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d12f      	bne.n	8005c32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	68b9      	ldr	r1, [r7, #8]
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 fa56 	bl	8006098 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf0:	223f      	movs	r2, #63	; 0x3f
 8005bf2:	409a      	lsls	r2, r3
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0216 	orr.w	r2, r2, #22
 8005c06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d007      	beq.n	8005c20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f042 0208 	orr.w	r2, r2, #8
 8005c1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0201 	orr.w	r2, r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	e005      	b.n	8005c3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005c56:	f7ff f9d1 	bl	8004ffc <HAL_GetTick>
 8005c5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d008      	beq.n	8005c7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2280      	movs	r2, #128	; 0x80
 8005c6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e052      	b.n	8005d20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0216 	bic.w	r2, r2, #22
 8005c88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695a      	ldr	r2, [r3, #20]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d103      	bne.n	8005caa <HAL_DMA_Abort+0x62>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d007      	beq.n	8005cba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0208 	bic.w	r2, r2, #8
 8005cb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 0201 	bic.w	r2, r2, #1
 8005cc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cca:	e013      	b.n	8005cf4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ccc:	f7ff f996 	bl	8004ffc <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b05      	cmp	r3, #5
 8005cd8:	d90c      	bls.n	8005cf4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2203      	movs	r2, #3
 8005ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e015      	b.n	8005d20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1e4      	bne.n	8005ccc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d06:	223f      	movs	r2, #63	; 0x3f
 8005d08:	409a      	lsls	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d004      	beq.n	8005d46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2280      	movs	r2, #128	; 0x80
 8005d40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e00c      	b.n	8005d60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2205      	movs	r2, #5
 8005d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 0201 	bic.w	r2, r2, #1
 8005d5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d78:	4b8e      	ldr	r3, [pc, #568]	; (8005fb4 <HAL_DMA_IRQHandler+0x248>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a8e      	ldr	r2, [pc, #568]	; (8005fb8 <HAL_DMA_IRQHandler+0x24c>)
 8005d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d82:	0a9b      	lsrs	r3, r3, #10
 8005d84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d96:	2208      	movs	r2, #8
 8005d98:	409a      	lsls	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d01a      	beq.n	8005dd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d013      	beq.n	8005dd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0204 	bic.w	r2, r2, #4
 8005dbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc4:	2208      	movs	r2, #8
 8005dc6:	409a      	lsls	r2, r3
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd0:	f043 0201 	orr.w	r2, r3, #1
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ddc:	2201      	movs	r2, #1
 8005dde:	409a      	lsls	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4013      	ands	r3, r2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d012      	beq.n	8005e0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00b      	beq.n	8005e0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	409a      	lsls	r2, r3
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e06:	f043 0202 	orr.w	r2, r3, #2
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e12:	2204      	movs	r2, #4
 8005e14:	409a      	lsls	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d012      	beq.n	8005e44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00b      	beq.n	8005e44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e30:	2204      	movs	r2, #4
 8005e32:	409a      	lsls	r2, r3
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3c:	f043 0204 	orr.w	r2, r3, #4
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e48:	2210      	movs	r2, #16
 8005e4a:	409a      	lsls	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4013      	ands	r3, r2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d043      	beq.n	8005edc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d03c      	beq.n	8005edc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e66:	2210      	movs	r2, #16
 8005e68:	409a      	lsls	r2, r3
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d018      	beq.n	8005eae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d108      	bne.n	8005e9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d024      	beq.n	8005edc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	4798      	blx	r3
 8005e9a:	e01f      	b.n	8005edc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d01b      	beq.n	8005edc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	4798      	blx	r3
 8005eac:	e016      	b.n	8005edc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d107      	bne.n	8005ecc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 0208 	bic.w	r2, r2, #8
 8005eca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	409a      	lsls	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 808f 	beq.w	800600c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0310 	and.w	r3, r3, #16
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 8087 	beq.w	800600c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f02:	2220      	movs	r2, #32
 8005f04:	409a      	lsls	r2, r3
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b05      	cmp	r3, #5
 8005f14:	d136      	bne.n	8005f84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f022 0216 	bic.w	r2, r2, #22
 8005f24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	695a      	ldr	r2, [r3, #20]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d103      	bne.n	8005f46 <HAL_DMA_IRQHandler+0x1da>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d007      	beq.n	8005f56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0208 	bic.w	r2, r2, #8
 8005f54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f5a:	223f      	movs	r2, #63	; 0x3f
 8005f5c:	409a      	lsls	r2, r3
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d07e      	beq.n	8006078 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	4798      	blx	r3
        }
        return;
 8005f82:	e079      	b.n	8006078 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d01d      	beq.n	8005fce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10d      	bne.n	8005fbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d031      	beq.n	800600c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	4798      	blx	r3
 8005fb0:	e02c      	b.n	800600c <HAL_DMA_IRQHandler+0x2a0>
 8005fb2:	bf00      	nop
 8005fb4:	20000360 	.word	0x20000360
 8005fb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d023      	beq.n	800600c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	4798      	blx	r3
 8005fcc:	e01e      	b.n	800600c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10f      	bne.n	8005ffc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0210 	bic.w	r2, r2, #16
 8005fea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006010:	2b00      	cmp	r3, #0
 8006012:	d032      	beq.n	800607a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b00      	cmp	r3, #0
 800601e:	d022      	beq.n	8006066 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2205      	movs	r2, #5
 8006024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 0201 	bic.w	r2, r2, #1
 8006036:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	3301      	adds	r3, #1
 800603c:	60bb      	str	r3, [r7, #8]
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	429a      	cmp	r2, r3
 8006042:	d307      	bcc.n	8006054 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1f2      	bne.n	8006038 <HAL_DMA_IRQHandler+0x2cc>
 8006052:	e000      	b.n	8006056 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006054:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800606a:	2b00      	cmp	r3, #0
 800606c:	d005      	beq.n	800607a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	4798      	blx	r3
 8006076:	e000      	b.n	800607a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006078:	bf00      	nop
    }
  }
}
 800607a:	3718      	adds	r7, #24
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800608c:	4618      	mov	r0, r3
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
 80060a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	2b40      	cmp	r3, #64	; 0x40
 80060c4:	d108      	bne.n	80060d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80060d6:	e007      	b.n	80060e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	60da      	str	r2, [r3, #12]
}
 80060e8:	bf00      	nop
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	b2db      	uxtb	r3, r3
 8006102:	3b10      	subs	r3, #16
 8006104:	4a14      	ldr	r2, [pc, #80]	; (8006158 <DMA_CalcBaseAndBitshift+0x64>)
 8006106:	fba2 2303 	umull	r2, r3, r2, r3
 800610a:	091b      	lsrs	r3, r3, #4
 800610c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800610e:	4a13      	ldr	r2, [pc, #76]	; (800615c <DMA_CalcBaseAndBitshift+0x68>)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4413      	add	r3, r2
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	461a      	mov	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2b03      	cmp	r3, #3
 8006120:	d909      	bls.n	8006136 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800612a:	f023 0303 	bic.w	r3, r3, #3
 800612e:	1d1a      	adds	r2, r3, #4
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	659a      	str	r2, [r3, #88]	; 0x58
 8006134:	e007      	b.n	8006146 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800613e:	f023 0303 	bic.w	r3, r3, #3
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	aaaaaaab 	.word	0xaaaaaaab
 800615c:	0800c800 	.word	0x0800c800

08006160 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006168:	2300      	movs	r3, #0
 800616a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006170:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d11f      	bne.n	80061ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	2b03      	cmp	r3, #3
 800617e:	d856      	bhi.n	800622e <DMA_CheckFifoParam+0xce>
 8006180:	a201      	add	r2, pc, #4	; (adr r2, 8006188 <DMA_CheckFifoParam+0x28>)
 8006182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006186:	bf00      	nop
 8006188:	08006199 	.word	0x08006199
 800618c:	080061ab 	.word	0x080061ab
 8006190:	08006199 	.word	0x08006199
 8006194:	0800622f 	.word	0x0800622f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d046      	beq.n	8006232 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061a8:	e043      	b.n	8006232 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061b2:	d140      	bne.n	8006236 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061b8:	e03d      	b.n	8006236 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061c2:	d121      	bne.n	8006208 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	2b03      	cmp	r3, #3
 80061c8:	d837      	bhi.n	800623a <DMA_CheckFifoParam+0xda>
 80061ca:	a201      	add	r2, pc, #4	; (adr r2, 80061d0 <DMA_CheckFifoParam+0x70>)
 80061cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d0:	080061e1 	.word	0x080061e1
 80061d4:	080061e7 	.word	0x080061e7
 80061d8:	080061e1 	.word	0x080061e1
 80061dc:	080061f9 	.word	0x080061f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	73fb      	strb	r3, [r7, #15]
      break;
 80061e4:	e030      	b.n	8006248 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d025      	beq.n	800623e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061f6:	e022      	b.n	800623e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006200:	d11f      	bne.n	8006242 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006206:	e01c      	b.n	8006242 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2b02      	cmp	r3, #2
 800620c:	d903      	bls.n	8006216 <DMA_CheckFifoParam+0xb6>
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	2b03      	cmp	r3, #3
 8006212:	d003      	beq.n	800621c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006214:	e018      	b.n	8006248 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	73fb      	strb	r3, [r7, #15]
      break;
 800621a:	e015      	b.n	8006248 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006220:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00e      	beq.n	8006246 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	73fb      	strb	r3, [r7, #15]
      break;
 800622c:	e00b      	b.n	8006246 <DMA_CheckFifoParam+0xe6>
      break;
 800622e:	bf00      	nop
 8006230:	e00a      	b.n	8006248 <DMA_CheckFifoParam+0xe8>
      break;
 8006232:	bf00      	nop
 8006234:	e008      	b.n	8006248 <DMA_CheckFifoParam+0xe8>
      break;
 8006236:	bf00      	nop
 8006238:	e006      	b.n	8006248 <DMA_CheckFifoParam+0xe8>
      break;
 800623a:	bf00      	nop
 800623c:	e004      	b.n	8006248 <DMA_CheckFifoParam+0xe8>
      break;
 800623e:	bf00      	nop
 8006240:	e002      	b.n	8006248 <DMA_CheckFifoParam+0xe8>
      break;   
 8006242:	bf00      	nop
 8006244:	e000      	b.n	8006248 <DMA_CheckFifoParam+0xe8>
      break;
 8006246:	bf00      	nop
    }
  } 
  
  return status; 
 8006248:	7bfb      	ldrb	r3, [r7, #15]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop

08006258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006258:	b480      	push	{r7}
 800625a:	b089      	sub	sp, #36	; 0x24
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006262:	2300      	movs	r3, #0
 8006264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006266:	2300      	movs	r3, #0
 8006268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800626a:	2300      	movs	r3, #0
 800626c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800626e:	2300      	movs	r3, #0
 8006270:	61fb      	str	r3, [r7, #28]
 8006272:	e159      	b.n	8006528 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006274:	2201      	movs	r2, #1
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	fa02 f303 	lsl.w	r3, r2, r3
 800627c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	4013      	ands	r3, r2
 8006286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	429a      	cmp	r2, r3
 800628e:	f040 8148 	bne.w	8006522 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	2b01      	cmp	r3, #1
 800629c:	d005      	beq.n	80062aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d130      	bne.n	800630c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	005b      	lsls	r3, r3, #1
 80062b4:	2203      	movs	r2, #3
 80062b6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ba:	43db      	mvns	r3, r3
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	4013      	ands	r3, r2
 80062c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	fa02 f303 	lsl.w	r3, r2, r3
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80062e0:	2201      	movs	r2, #1
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	fa02 f303 	lsl.w	r3, r2, r3
 80062e8:	43db      	mvns	r3, r3
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	4013      	ands	r3, r2
 80062ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	091b      	lsrs	r3, r3, #4
 80062f6:	f003 0201 	and.w	r2, r3, #1
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	4313      	orrs	r3, r2
 8006304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f003 0303 	and.w	r3, r3, #3
 8006314:	2b03      	cmp	r3, #3
 8006316:	d017      	beq.n	8006348 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	2203      	movs	r2, #3
 8006324:	fa02 f303 	lsl.w	r3, r2, r3
 8006328:	43db      	mvns	r3, r3
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	4013      	ands	r3, r2
 800632e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	005b      	lsls	r3, r3, #1
 8006338:	fa02 f303 	lsl.w	r3, r2, r3
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	4313      	orrs	r3, r2
 8006340:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f003 0303 	and.w	r3, r3, #3
 8006350:	2b02      	cmp	r3, #2
 8006352:	d123      	bne.n	800639c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	08da      	lsrs	r2, r3, #3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3208      	adds	r2, #8
 800635c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006360:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	f003 0307 	and.w	r3, r3, #7
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	220f      	movs	r2, #15
 800636c:	fa02 f303 	lsl.w	r3, r2, r3
 8006370:	43db      	mvns	r3, r3
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	4013      	ands	r3, r2
 8006376:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	691a      	ldr	r2, [r3, #16]
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	f003 0307 	and.w	r3, r3, #7
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	fa02 f303 	lsl.w	r3, r2, r3
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	4313      	orrs	r3, r2
 800638c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	08da      	lsrs	r2, r3, #3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	3208      	adds	r2, #8
 8006396:	69b9      	ldr	r1, [r7, #24]
 8006398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	005b      	lsls	r3, r3, #1
 80063a6:	2203      	movs	r2, #3
 80063a8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ac:	43db      	mvns	r3, r3
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	4013      	ands	r3, r2
 80063b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f003 0203 	and.w	r2, r3, #3
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 80a2 	beq.w	8006522 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063de:	2300      	movs	r3, #0
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	4b57      	ldr	r3, [pc, #348]	; (8006540 <HAL_GPIO_Init+0x2e8>)
 80063e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e6:	4a56      	ldr	r2, [pc, #344]	; (8006540 <HAL_GPIO_Init+0x2e8>)
 80063e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063ec:	6453      	str	r3, [r2, #68]	; 0x44
 80063ee:	4b54      	ldr	r3, [pc, #336]	; (8006540 <HAL_GPIO_Init+0x2e8>)
 80063f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063fa:	4a52      	ldr	r2, [pc, #328]	; (8006544 <HAL_GPIO_Init+0x2ec>)
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	089b      	lsrs	r3, r3, #2
 8006400:	3302      	adds	r3, #2
 8006402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	f003 0303 	and.w	r3, r3, #3
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	220f      	movs	r2, #15
 8006412:	fa02 f303 	lsl.w	r3, r2, r3
 8006416:	43db      	mvns	r3, r3
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	4013      	ands	r3, r2
 800641c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a49      	ldr	r2, [pc, #292]	; (8006548 <HAL_GPIO_Init+0x2f0>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d019      	beq.n	800645a <HAL_GPIO_Init+0x202>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a48      	ldr	r2, [pc, #288]	; (800654c <HAL_GPIO_Init+0x2f4>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d013      	beq.n	8006456 <HAL_GPIO_Init+0x1fe>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a47      	ldr	r2, [pc, #284]	; (8006550 <HAL_GPIO_Init+0x2f8>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d00d      	beq.n	8006452 <HAL_GPIO_Init+0x1fa>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a46      	ldr	r2, [pc, #280]	; (8006554 <HAL_GPIO_Init+0x2fc>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d007      	beq.n	800644e <HAL_GPIO_Init+0x1f6>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a45      	ldr	r2, [pc, #276]	; (8006558 <HAL_GPIO_Init+0x300>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d101      	bne.n	800644a <HAL_GPIO_Init+0x1f2>
 8006446:	2304      	movs	r3, #4
 8006448:	e008      	b.n	800645c <HAL_GPIO_Init+0x204>
 800644a:	2307      	movs	r3, #7
 800644c:	e006      	b.n	800645c <HAL_GPIO_Init+0x204>
 800644e:	2303      	movs	r3, #3
 8006450:	e004      	b.n	800645c <HAL_GPIO_Init+0x204>
 8006452:	2302      	movs	r3, #2
 8006454:	e002      	b.n	800645c <HAL_GPIO_Init+0x204>
 8006456:	2301      	movs	r3, #1
 8006458:	e000      	b.n	800645c <HAL_GPIO_Init+0x204>
 800645a:	2300      	movs	r3, #0
 800645c:	69fa      	ldr	r2, [r7, #28]
 800645e:	f002 0203 	and.w	r2, r2, #3
 8006462:	0092      	lsls	r2, r2, #2
 8006464:	4093      	lsls	r3, r2
 8006466:	69ba      	ldr	r2, [r7, #24]
 8006468:	4313      	orrs	r3, r2
 800646a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800646c:	4935      	ldr	r1, [pc, #212]	; (8006544 <HAL_GPIO_Init+0x2ec>)
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	089b      	lsrs	r3, r3, #2
 8006472:	3302      	adds	r3, #2
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800647a:	4b38      	ldr	r3, [pc, #224]	; (800655c <HAL_GPIO_Init+0x304>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	43db      	mvns	r3, r3
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	4013      	ands	r3, r2
 8006488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	4313      	orrs	r3, r2
 800649c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800649e:	4a2f      	ldr	r2, [pc, #188]	; (800655c <HAL_GPIO_Init+0x304>)
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064a4:	4b2d      	ldr	r3, [pc, #180]	; (800655c <HAL_GPIO_Init+0x304>)
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	43db      	mvns	r3, r3
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	4013      	ands	r3, r2
 80064b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80064c8:	4a24      	ldr	r2, [pc, #144]	; (800655c <HAL_GPIO_Init+0x304>)
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80064ce:	4b23      	ldr	r3, [pc, #140]	; (800655c <HAL_GPIO_Init+0x304>)
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	43db      	mvns	r3, r3
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	4013      	ands	r3, r2
 80064dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80064f2:	4a1a      	ldr	r2, [pc, #104]	; (800655c <HAL_GPIO_Init+0x304>)
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80064f8:	4b18      	ldr	r3, [pc, #96]	; (800655c <HAL_GPIO_Init+0x304>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	43db      	mvns	r3, r3
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	4013      	ands	r3, r2
 8006506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	4313      	orrs	r3, r2
 800651a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800651c:	4a0f      	ldr	r2, [pc, #60]	; (800655c <HAL_GPIO_Init+0x304>)
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	3301      	adds	r3, #1
 8006526:	61fb      	str	r3, [r7, #28]
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	2b0f      	cmp	r3, #15
 800652c:	f67f aea2 	bls.w	8006274 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006530:	bf00      	nop
 8006532:	bf00      	nop
 8006534:	3724      	adds	r7, #36	; 0x24
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	40023800 	.word	0x40023800
 8006544:	40013800 	.word	0x40013800
 8006548:	40020000 	.word	0x40020000
 800654c:	40020400 	.word	0x40020400
 8006550:	40020800 	.word	0x40020800
 8006554:	40020c00 	.word	0x40020c00
 8006558:	40021000 	.word	0x40021000
 800655c:	40013c00 	.word	0x40013c00

08006560 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	460b      	mov	r3, r1
 800656a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	691a      	ldr	r2, [r3, #16]
 8006570:	887b      	ldrh	r3, [r7, #2]
 8006572:	4013      	ands	r3, r2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d002      	beq.n	800657e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006578:	2301      	movs	r3, #1
 800657a:	73fb      	strb	r3, [r7, #15]
 800657c:	e001      	b.n	8006582 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800657e:	2300      	movs	r3, #0
 8006580:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006582:	7bfb      	ldrb	r3, [r7, #15]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	460b      	mov	r3, r1
 800659a:	807b      	strh	r3, [r7, #2]
 800659c:	4613      	mov	r3, r2
 800659e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80065a0:	787b      	ldrb	r3, [r7, #1]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065a6:	887a      	ldrh	r2, [r7, #2]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80065ac:	e003      	b.n	80065b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80065ae:	887b      	ldrh	r3, [r7, #2]
 80065b0:	041a      	lsls	r2, r3, #16
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	619a      	str	r2, [r3, #24]
}
 80065b6:	bf00      	nop
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
	...

080065c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	4603      	mov	r3, r0
 80065cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80065ce:	4b08      	ldr	r3, [pc, #32]	; (80065f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065d0:	695a      	ldr	r2, [r3, #20]
 80065d2:	88fb      	ldrh	r3, [r7, #6]
 80065d4:	4013      	ands	r3, r2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d006      	beq.n	80065e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80065da:	4a05      	ldr	r2, [pc, #20]	; (80065f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065dc:	88fb      	ldrh	r3, [r7, #6]
 80065de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80065e0:	88fb      	ldrh	r3, [r7, #6]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 f806 	bl	80065f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80065e8:	bf00      	nop
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	40013c00 	.word	0x40013c00

080065f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	4603      	mov	r3, r0
 80065fc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80065fe:	bf00      	nop
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
	...

0800660c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e12b      	b.n	8006876 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d106      	bne.n	8006638 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7fe f9d8 	bl	80049e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2224      	movs	r2, #36	; 0x24
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 0201 	bic.w	r2, r2, #1
 800664e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800665e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800666e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006670:	f000 fd80 	bl	8007174 <HAL_RCC_GetPCLK1Freq>
 8006674:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	4a81      	ldr	r2, [pc, #516]	; (8006880 <HAL_I2C_Init+0x274>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d807      	bhi.n	8006690 <HAL_I2C_Init+0x84>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4a80      	ldr	r2, [pc, #512]	; (8006884 <HAL_I2C_Init+0x278>)
 8006684:	4293      	cmp	r3, r2
 8006686:	bf94      	ite	ls
 8006688:	2301      	movls	r3, #1
 800668a:	2300      	movhi	r3, #0
 800668c:	b2db      	uxtb	r3, r3
 800668e:	e006      	b.n	800669e <HAL_I2C_Init+0x92>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4a7d      	ldr	r2, [pc, #500]	; (8006888 <HAL_I2C_Init+0x27c>)
 8006694:	4293      	cmp	r3, r2
 8006696:	bf94      	ite	ls
 8006698:	2301      	movls	r3, #1
 800669a:	2300      	movhi	r3, #0
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d001      	beq.n	80066a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e0e7      	b.n	8006876 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	4a78      	ldr	r2, [pc, #480]	; (800688c <HAL_I2C_Init+0x280>)
 80066aa:	fba2 2303 	umull	r2, r3, r2, r3
 80066ae:	0c9b      	lsrs	r3, r3, #18
 80066b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	4a6a      	ldr	r2, [pc, #424]	; (8006880 <HAL_I2C_Init+0x274>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d802      	bhi.n	80066e0 <HAL_I2C_Init+0xd4>
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	3301      	adds	r3, #1
 80066de:	e009      	b.n	80066f4 <HAL_I2C_Init+0xe8>
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80066e6:	fb02 f303 	mul.w	r3, r2, r3
 80066ea:	4a69      	ldr	r2, [pc, #420]	; (8006890 <HAL_I2C_Init+0x284>)
 80066ec:	fba2 2303 	umull	r2, r3, r2, r3
 80066f0:	099b      	lsrs	r3, r3, #6
 80066f2:	3301      	adds	r3, #1
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	6812      	ldr	r2, [r2, #0]
 80066f8:	430b      	orrs	r3, r1
 80066fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006706:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	495c      	ldr	r1, [pc, #368]	; (8006880 <HAL_I2C_Init+0x274>)
 8006710:	428b      	cmp	r3, r1
 8006712:	d819      	bhi.n	8006748 <HAL_I2C_Init+0x13c>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	1e59      	subs	r1, r3, #1
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006722:	1c59      	adds	r1, r3, #1
 8006724:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006728:	400b      	ands	r3, r1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <HAL_I2C_Init+0x138>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	1e59      	subs	r1, r3, #1
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	005b      	lsls	r3, r3, #1
 8006738:	fbb1 f3f3 	udiv	r3, r1, r3
 800673c:	3301      	adds	r3, #1
 800673e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006742:	e051      	b.n	80067e8 <HAL_I2C_Init+0x1dc>
 8006744:	2304      	movs	r3, #4
 8006746:	e04f      	b.n	80067e8 <HAL_I2C_Init+0x1dc>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d111      	bne.n	8006774 <HAL_I2C_Init+0x168>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	1e58      	subs	r0, r3, #1
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6859      	ldr	r1, [r3, #4]
 8006758:	460b      	mov	r3, r1
 800675a:	005b      	lsls	r3, r3, #1
 800675c:	440b      	add	r3, r1
 800675e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006762:	3301      	adds	r3, #1
 8006764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006768:	2b00      	cmp	r3, #0
 800676a:	bf0c      	ite	eq
 800676c:	2301      	moveq	r3, #1
 800676e:	2300      	movne	r3, #0
 8006770:	b2db      	uxtb	r3, r3
 8006772:	e012      	b.n	800679a <HAL_I2C_Init+0x18e>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	1e58      	subs	r0, r3, #1
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6859      	ldr	r1, [r3, #4]
 800677c:	460b      	mov	r3, r1
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	440b      	add	r3, r1
 8006782:	0099      	lsls	r1, r3, #2
 8006784:	440b      	add	r3, r1
 8006786:	fbb0 f3f3 	udiv	r3, r0, r3
 800678a:	3301      	adds	r3, #1
 800678c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006790:	2b00      	cmp	r3, #0
 8006792:	bf0c      	ite	eq
 8006794:	2301      	moveq	r3, #1
 8006796:	2300      	movne	r3, #0
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <HAL_I2C_Init+0x196>
 800679e:	2301      	movs	r3, #1
 80067a0:	e022      	b.n	80067e8 <HAL_I2C_Init+0x1dc>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10e      	bne.n	80067c8 <HAL_I2C_Init+0x1bc>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	1e58      	subs	r0, r3, #1
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6859      	ldr	r1, [r3, #4]
 80067b2:	460b      	mov	r3, r1
 80067b4:	005b      	lsls	r3, r3, #1
 80067b6:	440b      	add	r3, r1
 80067b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80067bc:	3301      	adds	r3, #1
 80067be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067c6:	e00f      	b.n	80067e8 <HAL_I2C_Init+0x1dc>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	1e58      	subs	r0, r3, #1
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6859      	ldr	r1, [r3, #4]
 80067d0:	460b      	mov	r3, r1
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	440b      	add	r3, r1
 80067d6:	0099      	lsls	r1, r3, #2
 80067d8:	440b      	add	r3, r1
 80067da:	fbb0 f3f3 	udiv	r3, r0, r3
 80067de:	3301      	adds	r3, #1
 80067e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067e8:	6879      	ldr	r1, [r7, #4]
 80067ea:	6809      	ldr	r1, [r1, #0]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	69da      	ldr	r2, [r3, #28]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	431a      	orrs	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006816:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	6911      	ldr	r1, [r2, #16]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	68d2      	ldr	r2, [r2, #12]
 8006822:	4311      	orrs	r1, r2
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	6812      	ldr	r2, [r2, #0]
 8006828:	430b      	orrs	r3, r1
 800682a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	695a      	ldr	r2, [r3, #20]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	431a      	orrs	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	430a      	orrs	r2, r1
 8006846:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f042 0201 	orr.w	r2, r2, #1
 8006856:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2220      	movs	r2, #32
 8006862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	000186a0 	.word	0x000186a0
 8006884:	001e847f 	.word	0x001e847f
 8006888:	003d08ff 	.word	0x003d08ff
 800688c:	431bde83 	.word	0x431bde83
 8006890:	10624dd3 	.word	0x10624dd3

08006894 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e267      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d075      	beq.n	800699e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068b2:	4b88      	ldr	r3, [pc, #544]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f003 030c 	and.w	r3, r3, #12
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d00c      	beq.n	80068d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068be:	4b85      	ldr	r3, [pc, #532]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068c6:	2b08      	cmp	r3, #8
 80068c8:	d112      	bne.n	80068f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068ca:	4b82      	ldr	r3, [pc, #520]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068d6:	d10b      	bne.n	80068f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d8:	4b7e      	ldr	r3, [pc, #504]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d05b      	beq.n	800699c <HAL_RCC_OscConfig+0x108>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d157      	bne.n	800699c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e242      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f8:	d106      	bne.n	8006908 <HAL_RCC_OscConfig+0x74>
 80068fa:	4b76      	ldr	r3, [pc, #472]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a75      	ldr	r2, [pc, #468]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 8006900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006904:	6013      	str	r3, [r2, #0]
 8006906:	e01d      	b.n	8006944 <HAL_RCC_OscConfig+0xb0>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006910:	d10c      	bne.n	800692c <HAL_RCC_OscConfig+0x98>
 8006912:	4b70      	ldr	r3, [pc, #448]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a6f      	ldr	r2, [pc, #444]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 8006918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800691c:	6013      	str	r3, [r2, #0]
 800691e:	4b6d      	ldr	r3, [pc, #436]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a6c      	ldr	r2, [pc, #432]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 8006924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006928:	6013      	str	r3, [r2, #0]
 800692a:	e00b      	b.n	8006944 <HAL_RCC_OscConfig+0xb0>
 800692c:	4b69      	ldr	r3, [pc, #420]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a68      	ldr	r2, [pc, #416]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 8006932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006936:	6013      	str	r3, [r2, #0]
 8006938:	4b66      	ldr	r3, [pc, #408]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a65      	ldr	r2, [pc, #404]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 800693e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d013      	beq.n	8006974 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800694c:	f7fe fb56 	bl	8004ffc <HAL_GetTick>
 8006950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006952:	e008      	b.n	8006966 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006954:	f7fe fb52 	bl	8004ffc <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b64      	cmp	r3, #100	; 0x64
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e207      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006966:	4b5b      	ldr	r3, [pc, #364]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d0f0      	beq.n	8006954 <HAL_RCC_OscConfig+0xc0>
 8006972:	e014      	b.n	800699e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006974:	f7fe fb42 	bl	8004ffc <HAL_GetTick>
 8006978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800697a:	e008      	b.n	800698e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800697c:	f7fe fb3e 	bl	8004ffc <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	2b64      	cmp	r3, #100	; 0x64
 8006988:	d901      	bls.n	800698e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e1f3      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800698e:	4b51      	ldr	r3, [pc, #324]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1f0      	bne.n	800697c <HAL_RCC_OscConfig+0xe8>
 800699a:	e000      	b.n	800699e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800699c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d063      	beq.n	8006a72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069aa:	4b4a      	ldr	r3, [pc, #296]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f003 030c 	and.w	r3, r3, #12
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00b      	beq.n	80069ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069b6:	4b47      	ldr	r3, [pc, #284]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069be:	2b08      	cmp	r3, #8
 80069c0:	d11c      	bne.n	80069fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069c2:	4b44      	ldr	r3, [pc, #272]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d116      	bne.n	80069fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069ce:	4b41      	ldr	r3, [pc, #260]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d005      	beq.n	80069e6 <HAL_RCC_OscConfig+0x152>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d001      	beq.n	80069e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e1c7      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069e6:	4b3b      	ldr	r3, [pc, #236]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	00db      	lsls	r3, r3, #3
 80069f4:	4937      	ldr	r1, [pc, #220]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069fa:	e03a      	b.n	8006a72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d020      	beq.n	8006a46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a04:	4b34      	ldr	r3, [pc, #208]	; (8006ad8 <HAL_RCC_OscConfig+0x244>)
 8006a06:	2201      	movs	r2, #1
 8006a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a0a:	f7fe faf7 	bl	8004ffc <HAL_GetTick>
 8006a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a10:	e008      	b.n	8006a24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a12:	f7fe faf3 	bl	8004ffc <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d901      	bls.n	8006a24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e1a8      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a24:	4b2b      	ldr	r3, [pc, #172]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0302 	and.w	r3, r3, #2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0f0      	beq.n	8006a12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a30:	4b28      	ldr	r3, [pc, #160]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	00db      	lsls	r3, r3, #3
 8006a3e:	4925      	ldr	r1, [pc, #148]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	600b      	str	r3, [r1, #0]
 8006a44:	e015      	b.n	8006a72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a46:	4b24      	ldr	r3, [pc, #144]	; (8006ad8 <HAL_RCC_OscConfig+0x244>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a4c:	f7fe fad6 	bl	8004ffc <HAL_GetTick>
 8006a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a52:	e008      	b.n	8006a66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a54:	f7fe fad2 	bl	8004ffc <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e187      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a66:	4b1b      	ldr	r3, [pc, #108]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1f0      	bne.n	8006a54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0308 	and.w	r3, r3, #8
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d036      	beq.n	8006aec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d016      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a86:	4b15      	ldr	r3, [pc, #84]	; (8006adc <HAL_RCC_OscConfig+0x248>)
 8006a88:	2201      	movs	r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a8c:	f7fe fab6 	bl	8004ffc <HAL_GetTick>
 8006a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a92:	e008      	b.n	8006aa6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a94:	f7fe fab2 	bl	8004ffc <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e167      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aa6:	4b0b      	ldr	r3, [pc, #44]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 8006aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0f0      	beq.n	8006a94 <HAL_RCC_OscConfig+0x200>
 8006ab2:	e01b      	b.n	8006aec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ab4:	4b09      	ldr	r3, [pc, #36]	; (8006adc <HAL_RCC_OscConfig+0x248>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006aba:	f7fe fa9f 	bl	8004ffc <HAL_GetTick>
 8006abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ac0:	e00e      	b.n	8006ae0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ac2:	f7fe fa9b 	bl	8004ffc <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d907      	bls.n	8006ae0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e150      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
 8006ad4:	40023800 	.word	0x40023800
 8006ad8:	42470000 	.word	0x42470000
 8006adc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ae0:	4b88      	ldr	r3, [pc, #544]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1ea      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0304 	and.w	r3, r3, #4
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 8097 	beq.w	8006c28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006afa:	2300      	movs	r3, #0
 8006afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006afe:	4b81      	ldr	r3, [pc, #516]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10f      	bne.n	8006b2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60bb      	str	r3, [r7, #8]
 8006b0e:	4b7d      	ldr	r3, [pc, #500]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b12:	4a7c      	ldr	r2, [pc, #496]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b18:	6413      	str	r3, [r2, #64]	; 0x40
 8006b1a:	4b7a      	ldr	r3, [pc, #488]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b22:	60bb      	str	r3, [r7, #8]
 8006b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b26:	2301      	movs	r3, #1
 8006b28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b2a:	4b77      	ldr	r3, [pc, #476]	; (8006d08 <HAL_RCC_OscConfig+0x474>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d118      	bne.n	8006b68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b36:	4b74      	ldr	r3, [pc, #464]	; (8006d08 <HAL_RCC_OscConfig+0x474>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a73      	ldr	r2, [pc, #460]	; (8006d08 <HAL_RCC_OscConfig+0x474>)
 8006b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b42:	f7fe fa5b 	bl	8004ffc <HAL_GetTick>
 8006b46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b48:	e008      	b.n	8006b5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b4a:	f7fe fa57 	bl	8004ffc <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d901      	bls.n	8006b5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e10c      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b5c:	4b6a      	ldr	r3, [pc, #424]	; (8006d08 <HAL_RCC_OscConfig+0x474>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d0f0      	beq.n	8006b4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d106      	bne.n	8006b7e <HAL_RCC_OscConfig+0x2ea>
 8006b70:	4b64      	ldr	r3, [pc, #400]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b74:	4a63      	ldr	r2, [pc, #396]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006b76:	f043 0301 	orr.w	r3, r3, #1
 8006b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b7c:	e01c      	b.n	8006bb8 <HAL_RCC_OscConfig+0x324>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	2b05      	cmp	r3, #5
 8006b84:	d10c      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x30c>
 8006b86:	4b5f      	ldr	r3, [pc, #380]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8a:	4a5e      	ldr	r2, [pc, #376]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006b8c:	f043 0304 	orr.w	r3, r3, #4
 8006b90:	6713      	str	r3, [r2, #112]	; 0x70
 8006b92:	4b5c      	ldr	r3, [pc, #368]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b96:	4a5b      	ldr	r2, [pc, #364]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006b98:	f043 0301 	orr.w	r3, r3, #1
 8006b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b9e:	e00b      	b.n	8006bb8 <HAL_RCC_OscConfig+0x324>
 8006ba0:	4b58      	ldr	r3, [pc, #352]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba4:	4a57      	ldr	r2, [pc, #348]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006ba6:	f023 0301 	bic.w	r3, r3, #1
 8006baa:	6713      	str	r3, [r2, #112]	; 0x70
 8006bac:	4b55      	ldr	r3, [pc, #340]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb0:	4a54      	ldr	r2, [pc, #336]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006bb2:	f023 0304 	bic.w	r3, r3, #4
 8006bb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d015      	beq.n	8006bec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bc0:	f7fe fa1c 	bl	8004ffc <HAL_GetTick>
 8006bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bc6:	e00a      	b.n	8006bde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bc8:	f7fe fa18 	bl	8004ffc <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d901      	bls.n	8006bde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e0cb      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bde:	4b49      	ldr	r3, [pc, #292]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d0ee      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x334>
 8006bea:	e014      	b.n	8006c16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bec:	f7fe fa06 	bl	8004ffc <HAL_GetTick>
 8006bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bf2:	e00a      	b.n	8006c0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bf4:	f7fe fa02 	bl	8004ffc <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e0b5      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c0a:	4b3e      	ldr	r3, [pc, #248]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1ee      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c16:	7dfb      	ldrb	r3, [r7, #23]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d105      	bne.n	8006c28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c1c:	4b39      	ldr	r3, [pc, #228]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c20:	4a38      	ldr	r2, [pc, #224]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 80a1 	beq.w	8006d74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c32:	4b34      	ldr	r3, [pc, #208]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f003 030c 	and.w	r3, r3, #12
 8006c3a:	2b08      	cmp	r3, #8
 8006c3c:	d05c      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d141      	bne.n	8006cca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c46:	4b31      	ldr	r3, [pc, #196]	; (8006d0c <HAL_RCC_OscConfig+0x478>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c4c:	f7fe f9d6 	bl	8004ffc <HAL_GetTick>
 8006c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c52:	e008      	b.n	8006c66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c54:	f7fe f9d2 	bl	8004ffc <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e087      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c66:	4b27      	ldr	r3, [pc, #156]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1f0      	bne.n	8006c54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	69da      	ldr	r2, [r3, #28]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c80:	019b      	lsls	r3, r3, #6
 8006c82:	431a      	orrs	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c88:	085b      	lsrs	r3, r3, #1
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	041b      	lsls	r3, r3, #16
 8006c8e:	431a      	orrs	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	061b      	lsls	r3, r3, #24
 8006c96:	491b      	ldr	r1, [pc, #108]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c9c:	4b1b      	ldr	r3, [pc, #108]	; (8006d0c <HAL_RCC_OscConfig+0x478>)
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ca2:	f7fe f9ab 	bl	8004ffc <HAL_GetTick>
 8006ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ca8:	e008      	b.n	8006cbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006caa:	f7fe f9a7 	bl	8004ffc <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d901      	bls.n	8006cbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e05c      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cbc:	4b11      	ldr	r3, [pc, #68]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0f0      	beq.n	8006caa <HAL_RCC_OscConfig+0x416>
 8006cc8:	e054      	b.n	8006d74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cca:	4b10      	ldr	r3, [pc, #64]	; (8006d0c <HAL_RCC_OscConfig+0x478>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cd0:	f7fe f994 	bl	8004ffc <HAL_GetTick>
 8006cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cd6:	e008      	b.n	8006cea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cd8:	f7fe f990 	bl	8004ffc <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d901      	bls.n	8006cea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e045      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cea:	4b06      	ldr	r3, [pc, #24]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1f0      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x444>
 8006cf6:	e03d      	b.n	8006d74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d107      	bne.n	8006d10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e038      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
 8006d04:	40023800 	.word	0x40023800
 8006d08:	40007000 	.word	0x40007000
 8006d0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d10:	4b1b      	ldr	r3, [pc, #108]	; (8006d80 <HAL_RCC_OscConfig+0x4ec>)
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d028      	beq.n	8006d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d121      	bne.n	8006d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d11a      	bne.n	8006d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d40:	4013      	ands	r3, r2
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d111      	bne.n	8006d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d56:	085b      	lsrs	r3, r3, #1
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d107      	bne.n	8006d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d001      	beq.n	8006d74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e000      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	40023800 	.word	0x40023800

08006d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e0cc      	b.n	8006f32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d98:	4b68      	ldr	r3, [pc, #416]	; (8006f3c <HAL_RCC_ClockConfig+0x1b8>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0307 	and.w	r3, r3, #7
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d90c      	bls.n	8006dc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006da6:	4b65      	ldr	r3, [pc, #404]	; (8006f3c <HAL_RCC_ClockConfig+0x1b8>)
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	b2d2      	uxtb	r2, r2
 8006dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dae:	4b63      	ldr	r3, [pc, #396]	; (8006f3c <HAL_RCC_ClockConfig+0x1b8>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0307 	and.w	r3, r3, #7
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d001      	beq.n	8006dc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e0b8      	b.n	8006f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d020      	beq.n	8006e0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0304 	and.w	r3, r3, #4
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d005      	beq.n	8006de4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006dd8:	4b59      	ldr	r3, [pc, #356]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	4a58      	ldr	r2, [pc, #352]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006dde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006de2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0308 	and.w	r3, r3, #8
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d005      	beq.n	8006dfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006df0:	4b53      	ldr	r3, [pc, #332]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	4a52      	ldr	r2, [pc, #328]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006df6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006dfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dfc:	4b50      	ldr	r3, [pc, #320]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	494d      	ldr	r1, [pc, #308]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d044      	beq.n	8006ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d107      	bne.n	8006e32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e22:	4b47      	ldr	r3, [pc, #284]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d119      	bne.n	8006e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e07f      	b.n	8006f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d003      	beq.n	8006e42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	d107      	bne.n	8006e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e42:	4b3f      	ldr	r3, [pc, #252]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d109      	bne.n	8006e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e06f      	b.n	8006f32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e52:	4b3b      	ldr	r3, [pc, #236]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0302 	and.w	r3, r3, #2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e067      	b.n	8006f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e62:	4b37      	ldr	r3, [pc, #220]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f023 0203 	bic.w	r2, r3, #3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	4934      	ldr	r1, [pc, #208]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e74:	f7fe f8c2 	bl	8004ffc <HAL_GetTick>
 8006e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e7a:	e00a      	b.n	8006e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e7c:	f7fe f8be 	bl	8004ffc <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d901      	bls.n	8006e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e04f      	b.n	8006f32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e92:	4b2b      	ldr	r3, [pc, #172]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f003 020c 	and.w	r2, r3, #12
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d1eb      	bne.n	8006e7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ea4:	4b25      	ldr	r3, [pc, #148]	; (8006f3c <HAL_RCC_ClockConfig+0x1b8>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0307 	and.w	r3, r3, #7
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d20c      	bcs.n	8006ecc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eb2:	4b22      	ldr	r3, [pc, #136]	; (8006f3c <HAL_RCC_ClockConfig+0x1b8>)
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	b2d2      	uxtb	r2, r2
 8006eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eba:	4b20      	ldr	r3, [pc, #128]	; (8006f3c <HAL_RCC_ClockConfig+0x1b8>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0307 	and.w	r3, r3, #7
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d001      	beq.n	8006ecc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e032      	b.n	8006f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0304 	and.w	r3, r3, #4
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d008      	beq.n	8006eea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ed8:	4b19      	ldr	r3, [pc, #100]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	4916      	ldr	r1, [pc, #88]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 0308 	and.w	r3, r3, #8
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d009      	beq.n	8006f0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ef6:	4b12      	ldr	r3, [pc, #72]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	00db      	lsls	r3, r3, #3
 8006f04:	490e      	ldr	r1, [pc, #56]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f0a:	f000 f821 	bl	8006f50 <HAL_RCC_GetSysClockFreq>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	4b0b      	ldr	r3, [pc, #44]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	091b      	lsrs	r3, r3, #4
 8006f16:	f003 030f 	and.w	r3, r3, #15
 8006f1a:	490a      	ldr	r1, [pc, #40]	; (8006f44 <HAL_RCC_ClockConfig+0x1c0>)
 8006f1c:	5ccb      	ldrb	r3, [r1, r3]
 8006f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f22:	4a09      	ldr	r2, [pc, #36]	; (8006f48 <HAL_RCC_ClockConfig+0x1c4>)
 8006f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f26:	4b09      	ldr	r3, [pc, #36]	; (8006f4c <HAL_RCC_ClockConfig+0x1c8>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fe f822 	bl	8004f74 <HAL_InitTick>

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	40023c00 	.word	0x40023c00
 8006f40:	40023800 	.word	0x40023800
 8006f44:	0800c7e8 	.word	0x0800c7e8
 8006f48:	20000360 	.word	0x20000360
 8006f4c:	20000364 	.word	0x20000364

08006f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f54:	b094      	sub	sp, #80	; 0x50
 8006f56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f60:	2300      	movs	r3, #0
 8006f62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f68:	4b79      	ldr	r3, [pc, #484]	; (8007150 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	f003 030c 	and.w	r3, r3, #12
 8006f70:	2b08      	cmp	r3, #8
 8006f72:	d00d      	beq.n	8006f90 <HAL_RCC_GetSysClockFreq+0x40>
 8006f74:	2b08      	cmp	r3, #8
 8006f76:	f200 80e1 	bhi.w	800713c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <HAL_RCC_GetSysClockFreq+0x34>
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	d003      	beq.n	8006f8a <HAL_RCC_GetSysClockFreq+0x3a>
 8006f82:	e0db      	b.n	800713c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f84:	4b73      	ldr	r3, [pc, #460]	; (8007154 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f86:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006f88:	e0db      	b.n	8007142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f8a:	4b73      	ldr	r3, [pc, #460]	; (8007158 <HAL_RCC_GetSysClockFreq+0x208>)
 8006f8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f8e:	e0d8      	b.n	8007142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f90:	4b6f      	ldr	r3, [pc, #444]	; (8007150 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f98:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f9a:	4b6d      	ldr	r3, [pc, #436]	; (8007150 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d063      	beq.n	800706e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fa6:	4b6a      	ldr	r3, [pc, #424]	; (8007150 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	099b      	lsrs	r3, r3, #6
 8006fac:	2200      	movs	r2, #0
 8006fae:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8006fba:	2300      	movs	r3, #0
 8006fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8006fbe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006fc2:	4622      	mov	r2, r4
 8006fc4:	462b      	mov	r3, r5
 8006fc6:	f04f 0000 	mov.w	r0, #0
 8006fca:	f04f 0100 	mov.w	r1, #0
 8006fce:	0159      	lsls	r1, r3, #5
 8006fd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fd4:	0150      	lsls	r0, r2, #5
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4621      	mov	r1, r4
 8006fdc:	1a51      	subs	r1, r2, r1
 8006fde:	6139      	str	r1, [r7, #16]
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	eb63 0301 	sbc.w	r3, r3, r1
 8006fe6:	617b      	str	r3, [r7, #20]
 8006fe8:	f04f 0200 	mov.w	r2, #0
 8006fec:	f04f 0300 	mov.w	r3, #0
 8006ff0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ff4:	4659      	mov	r1, fp
 8006ff6:	018b      	lsls	r3, r1, #6
 8006ff8:	4651      	mov	r1, sl
 8006ffa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ffe:	4651      	mov	r1, sl
 8007000:	018a      	lsls	r2, r1, #6
 8007002:	4651      	mov	r1, sl
 8007004:	ebb2 0801 	subs.w	r8, r2, r1
 8007008:	4659      	mov	r1, fp
 800700a:	eb63 0901 	sbc.w	r9, r3, r1
 800700e:	f04f 0200 	mov.w	r2, #0
 8007012:	f04f 0300 	mov.w	r3, #0
 8007016:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800701a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800701e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007022:	4690      	mov	r8, r2
 8007024:	4699      	mov	r9, r3
 8007026:	4623      	mov	r3, r4
 8007028:	eb18 0303 	adds.w	r3, r8, r3
 800702c:	60bb      	str	r3, [r7, #8]
 800702e:	462b      	mov	r3, r5
 8007030:	eb49 0303 	adc.w	r3, r9, r3
 8007034:	60fb      	str	r3, [r7, #12]
 8007036:	f04f 0200 	mov.w	r2, #0
 800703a:	f04f 0300 	mov.w	r3, #0
 800703e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007042:	4629      	mov	r1, r5
 8007044:	024b      	lsls	r3, r1, #9
 8007046:	4621      	mov	r1, r4
 8007048:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800704c:	4621      	mov	r1, r4
 800704e:	024a      	lsls	r2, r1, #9
 8007050:	4610      	mov	r0, r2
 8007052:	4619      	mov	r1, r3
 8007054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007056:	2200      	movs	r2, #0
 8007058:	62bb      	str	r3, [r7, #40]	; 0x28
 800705a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800705c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007060:	f7f9 fd9e 	bl	8000ba0 <__aeabi_uldivmod>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	4613      	mov	r3, r2
 800706a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800706c:	e058      	b.n	8007120 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800706e:	4b38      	ldr	r3, [pc, #224]	; (8007150 <HAL_RCC_GetSysClockFreq+0x200>)
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	099b      	lsrs	r3, r3, #6
 8007074:	2200      	movs	r2, #0
 8007076:	4618      	mov	r0, r3
 8007078:	4611      	mov	r1, r2
 800707a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800707e:	623b      	str	r3, [r7, #32]
 8007080:	2300      	movs	r3, #0
 8007082:	627b      	str	r3, [r7, #36]	; 0x24
 8007084:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007088:	4642      	mov	r2, r8
 800708a:	464b      	mov	r3, r9
 800708c:	f04f 0000 	mov.w	r0, #0
 8007090:	f04f 0100 	mov.w	r1, #0
 8007094:	0159      	lsls	r1, r3, #5
 8007096:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800709a:	0150      	lsls	r0, r2, #5
 800709c:	4602      	mov	r2, r0
 800709e:	460b      	mov	r3, r1
 80070a0:	4641      	mov	r1, r8
 80070a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80070a6:	4649      	mov	r1, r9
 80070a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80070ac:	f04f 0200 	mov.w	r2, #0
 80070b0:	f04f 0300 	mov.w	r3, #0
 80070b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80070b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80070bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80070c0:	ebb2 040a 	subs.w	r4, r2, sl
 80070c4:	eb63 050b 	sbc.w	r5, r3, fp
 80070c8:	f04f 0200 	mov.w	r2, #0
 80070cc:	f04f 0300 	mov.w	r3, #0
 80070d0:	00eb      	lsls	r3, r5, #3
 80070d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070d6:	00e2      	lsls	r2, r4, #3
 80070d8:	4614      	mov	r4, r2
 80070da:	461d      	mov	r5, r3
 80070dc:	4643      	mov	r3, r8
 80070de:	18e3      	adds	r3, r4, r3
 80070e0:	603b      	str	r3, [r7, #0]
 80070e2:	464b      	mov	r3, r9
 80070e4:	eb45 0303 	adc.w	r3, r5, r3
 80070e8:	607b      	str	r3, [r7, #4]
 80070ea:	f04f 0200 	mov.w	r2, #0
 80070ee:	f04f 0300 	mov.w	r3, #0
 80070f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80070f6:	4629      	mov	r1, r5
 80070f8:	028b      	lsls	r3, r1, #10
 80070fa:	4621      	mov	r1, r4
 80070fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007100:	4621      	mov	r1, r4
 8007102:	028a      	lsls	r2, r1, #10
 8007104:	4610      	mov	r0, r2
 8007106:	4619      	mov	r1, r3
 8007108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800710a:	2200      	movs	r2, #0
 800710c:	61bb      	str	r3, [r7, #24]
 800710e:	61fa      	str	r2, [r7, #28]
 8007110:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007114:	f7f9 fd44 	bl	8000ba0 <__aeabi_uldivmod>
 8007118:	4602      	mov	r2, r0
 800711a:	460b      	mov	r3, r1
 800711c:	4613      	mov	r3, r2
 800711e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007120:	4b0b      	ldr	r3, [pc, #44]	; (8007150 <HAL_RCC_GetSysClockFreq+0x200>)
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	0c1b      	lsrs	r3, r3, #16
 8007126:	f003 0303 	and.w	r3, r3, #3
 800712a:	3301      	adds	r3, #1
 800712c:	005b      	lsls	r3, r3, #1
 800712e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007130:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007134:	fbb2 f3f3 	udiv	r3, r2, r3
 8007138:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800713a:	e002      	b.n	8007142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800713c:	4b05      	ldr	r3, [pc, #20]	; (8007154 <HAL_RCC_GetSysClockFreq+0x204>)
 800713e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007144:	4618      	mov	r0, r3
 8007146:	3750      	adds	r7, #80	; 0x50
 8007148:	46bd      	mov	sp, r7
 800714a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800714e:	bf00      	nop
 8007150:	40023800 	.word	0x40023800
 8007154:	00f42400 	.word	0x00f42400
 8007158:	007a1200 	.word	0x007a1200

0800715c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800715c:	b480      	push	{r7}
 800715e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007160:	4b03      	ldr	r3, [pc, #12]	; (8007170 <HAL_RCC_GetHCLKFreq+0x14>)
 8007162:	681b      	ldr	r3, [r3, #0]
}
 8007164:	4618      	mov	r0, r3
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	20000360 	.word	0x20000360

08007174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007178:	f7ff fff0 	bl	800715c <HAL_RCC_GetHCLKFreq>
 800717c:	4602      	mov	r2, r0
 800717e:	4b05      	ldr	r3, [pc, #20]	; (8007194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	0a9b      	lsrs	r3, r3, #10
 8007184:	f003 0307 	and.w	r3, r3, #7
 8007188:	4903      	ldr	r1, [pc, #12]	; (8007198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800718a:	5ccb      	ldrb	r3, [r1, r3]
 800718c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007190:	4618      	mov	r0, r3
 8007192:	bd80      	pop	{r7, pc}
 8007194:	40023800 	.word	0x40023800
 8007198:	0800c7f8 	.word	0x0800c7f8

0800719c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80071a0:	f7ff ffdc 	bl	800715c <HAL_RCC_GetHCLKFreq>
 80071a4:	4602      	mov	r2, r0
 80071a6:	4b05      	ldr	r3, [pc, #20]	; (80071bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	0b5b      	lsrs	r3, r3, #13
 80071ac:	f003 0307 	and.w	r3, r3, #7
 80071b0:	4903      	ldr	r1, [pc, #12]	; (80071c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071b2:	5ccb      	ldrb	r3, [r1, r3]
 80071b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	40023800 	.word	0x40023800
 80071c0:	0800c7f8 	.word	0x0800c7f8

080071c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e04c      	b.n	8007270 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d111      	bne.n	8007206 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f001 fc0c 	bl	8008a08 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d102      	bne.n	80071fe <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a1f      	ldr	r2, [pc, #124]	; (8007278 <HAL_TIM_Base_Init+0xb4>)
 80071fc:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2202      	movs	r2, #2
 800720a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3304      	adds	r3, #4
 8007216:	4619      	mov	r1, r3
 8007218:	4610      	mov	r0, r2
 800721a:	f001 f929 	bl	8008470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	08004b05 	.word	0x08004b05

0800727c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b01      	cmp	r3, #1
 800728e:	d001      	beq.n	8007294 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e03c      	b.n	800730e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2202      	movs	r2, #2
 8007298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a1e      	ldr	r2, [pc, #120]	; (800731c <HAL_TIM_Base_Start+0xa0>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d018      	beq.n	80072d8 <HAL_TIM_Base_Start+0x5c>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ae:	d013      	beq.n	80072d8 <HAL_TIM_Base_Start+0x5c>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a1a      	ldr	r2, [pc, #104]	; (8007320 <HAL_TIM_Base_Start+0xa4>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d00e      	beq.n	80072d8 <HAL_TIM_Base_Start+0x5c>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a19      	ldr	r2, [pc, #100]	; (8007324 <HAL_TIM_Base_Start+0xa8>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d009      	beq.n	80072d8 <HAL_TIM_Base_Start+0x5c>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a17      	ldr	r2, [pc, #92]	; (8007328 <HAL_TIM_Base_Start+0xac>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d004      	beq.n	80072d8 <HAL_TIM_Base_Start+0x5c>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a16      	ldr	r2, [pc, #88]	; (800732c <HAL_TIM_Base_Start+0xb0>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d111      	bne.n	80072fc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f003 0307 	and.w	r3, r3, #7
 80072e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b06      	cmp	r3, #6
 80072e8:	d010      	beq.n	800730c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f042 0201 	orr.w	r2, r2, #1
 80072f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072fa:	e007      	b.n	800730c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f042 0201 	orr.w	r2, r2, #1
 800730a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	40010000 	.word	0x40010000
 8007320:	40000400 	.word	0x40000400
 8007324:	40000800 	.word	0x40000800
 8007328:	40000c00 	.word	0x40000c00
 800732c:	40014000 	.word	0x40014000

08007330 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b01      	cmp	r3, #1
 8007342:	d001      	beq.n	8007348 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e044      	b.n	80073d2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2202      	movs	r2, #2
 800734c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68da      	ldr	r2, [r3, #12]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f042 0201 	orr.w	r2, r2, #1
 800735e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a1e      	ldr	r2, [pc, #120]	; (80073e0 <HAL_TIM_Base_Start_IT+0xb0>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d018      	beq.n	800739c <HAL_TIM_Base_Start_IT+0x6c>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007372:	d013      	beq.n	800739c <HAL_TIM_Base_Start_IT+0x6c>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a1a      	ldr	r2, [pc, #104]	; (80073e4 <HAL_TIM_Base_Start_IT+0xb4>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d00e      	beq.n	800739c <HAL_TIM_Base_Start_IT+0x6c>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a19      	ldr	r2, [pc, #100]	; (80073e8 <HAL_TIM_Base_Start_IT+0xb8>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d009      	beq.n	800739c <HAL_TIM_Base_Start_IT+0x6c>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a17      	ldr	r2, [pc, #92]	; (80073ec <HAL_TIM_Base_Start_IT+0xbc>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d004      	beq.n	800739c <HAL_TIM_Base_Start_IT+0x6c>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a16      	ldr	r2, [pc, #88]	; (80073f0 <HAL_TIM_Base_Start_IT+0xc0>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d111      	bne.n	80073c0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f003 0307 	and.w	r3, r3, #7
 80073a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2b06      	cmp	r3, #6
 80073ac:	d010      	beq.n	80073d0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f042 0201 	orr.w	r2, r2, #1
 80073bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073be:	e007      	b.n	80073d0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f042 0201 	orr.w	r2, r2, #1
 80073ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3714      	adds	r7, #20
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	40010000 	.word	0x40010000
 80073e4:	40000400 	.word	0x40000400
 80073e8:	40000800 	.word	0x40000800
 80073ec:	40000c00 	.word	0x40000c00
 80073f0:	40014000 	.word	0x40014000

080073f4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e04c      	b.n	80074a0 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d111      	bne.n	8007436 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f001 faf4 	bl	8008a08 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007424:	2b00      	cmp	r3, #0
 8007426:	d102      	bne.n	800742e <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a1f      	ldr	r2, [pc, #124]	; (80074a8 <HAL_TIM_OC_Init+0xb4>)
 800742c:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2202      	movs	r2, #2
 800743a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	3304      	adds	r3, #4
 8007446:	4619      	mov	r1, r3
 8007448:	4610      	mov	r0, r2
 800744a:	f001 f811 	bl	8008470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	080074ad 	.word	0x080074ad

080074ac <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d101      	bne.n	80074d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e04c      	b.n	800756c <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d111      	bne.n	8007502 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f001 fa8e 	bl	8008a08 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d102      	bne.n	80074fa <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a1f      	ldr	r2, [pc, #124]	; (8007574 <HAL_TIM_PWM_Init+0xb4>)
 80074f8:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2202      	movs	r2, #2
 8007506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3304      	adds	r3, #4
 8007512:	4619      	mov	r1, r3
 8007514:	4610      	mov	r0, r2
 8007516:	f000 ffab 	bl	8008470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	08007579 	.word	0x08007579

08007578 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d109      	bne.n	80075b0 <HAL_TIM_PWM_Start+0x24>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	bf14      	ite	ne
 80075a8:	2301      	movne	r3, #1
 80075aa:	2300      	moveq	r3, #0
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	e022      	b.n	80075f6 <HAL_TIM_PWM_Start+0x6a>
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	2b04      	cmp	r3, #4
 80075b4:	d109      	bne.n	80075ca <HAL_TIM_PWM_Start+0x3e>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b01      	cmp	r3, #1
 80075c0:	bf14      	ite	ne
 80075c2:	2301      	movne	r3, #1
 80075c4:	2300      	moveq	r3, #0
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	e015      	b.n	80075f6 <HAL_TIM_PWM_Start+0x6a>
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	2b08      	cmp	r3, #8
 80075ce:	d109      	bne.n	80075e4 <HAL_TIM_PWM_Start+0x58>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b01      	cmp	r3, #1
 80075da:	bf14      	ite	ne
 80075dc:	2301      	movne	r3, #1
 80075de:	2300      	moveq	r3, #0
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	e008      	b.n	80075f6 <HAL_TIM_PWM_Start+0x6a>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	bf14      	ite	ne
 80075f0:	2301      	movne	r3, #1
 80075f2:	2300      	moveq	r3, #0
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d001      	beq.n	80075fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e068      	b.n	80076d0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d104      	bne.n	800760e <HAL_TIM_PWM_Start+0x82>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2202      	movs	r2, #2
 8007608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800760c:	e013      	b.n	8007636 <HAL_TIM_PWM_Start+0xaa>
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	2b04      	cmp	r3, #4
 8007612:	d104      	bne.n	800761e <HAL_TIM_PWM_Start+0x92>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2202      	movs	r2, #2
 8007618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800761c:	e00b      	b.n	8007636 <HAL_TIM_PWM_Start+0xaa>
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	2b08      	cmp	r3, #8
 8007622:	d104      	bne.n	800762e <HAL_TIM_PWM_Start+0xa2>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2202      	movs	r2, #2
 8007628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800762c:	e003      	b.n	8007636 <HAL_TIM_PWM_Start+0xaa>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2202      	movs	r2, #2
 8007632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2201      	movs	r2, #1
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	4618      	mov	r0, r3
 8007640:	f001 f9bc 	bl	80089bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a23      	ldr	r2, [pc, #140]	; (80076d8 <HAL_TIM_PWM_Start+0x14c>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d107      	bne.n	800765e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800765c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a1d      	ldr	r2, [pc, #116]	; (80076d8 <HAL_TIM_PWM_Start+0x14c>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d018      	beq.n	800769a <HAL_TIM_PWM_Start+0x10e>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007670:	d013      	beq.n	800769a <HAL_TIM_PWM_Start+0x10e>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a19      	ldr	r2, [pc, #100]	; (80076dc <HAL_TIM_PWM_Start+0x150>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d00e      	beq.n	800769a <HAL_TIM_PWM_Start+0x10e>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a17      	ldr	r2, [pc, #92]	; (80076e0 <HAL_TIM_PWM_Start+0x154>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d009      	beq.n	800769a <HAL_TIM_PWM_Start+0x10e>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a16      	ldr	r2, [pc, #88]	; (80076e4 <HAL_TIM_PWM_Start+0x158>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d004      	beq.n	800769a <HAL_TIM_PWM_Start+0x10e>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a14      	ldr	r2, [pc, #80]	; (80076e8 <HAL_TIM_PWM_Start+0x15c>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d111      	bne.n	80076be <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f003 0307 	and.w	r3, r3, #7
 80076a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2b06      	cmp	r3, #6
 80076aa:	d010      	beq.n	80076ce <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f042 0201 	orr.w	r2, r2, #1
 80076ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076bc:	e007      	b.n	80076ce <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f042 0201 	orr.w	r2, r2, #1
 80076cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	40010000 	.word	0x40010000
 80076dc:	40000400 	.word	0x40000400
 80076e0:	40000800 	.word	0x40000800
 80076e4:	40000c00 	.word	0x40000c00
 80076e8:	40014000 	.word	0x40014000

080076ec <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e04c      	b.n	800779a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007706:	b2db      	uxtb	r3, r3
 8007708:	2b00      	cmp	r3, #0
 800770a:	d111      	bne.n	8007730 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f001 f977 	bl	8008a08 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800771e:	2b00      	cmp	r3, #0
 8007720:	d102      	bne.n	8007728 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a1f      	ldr	r2, [pc, #124]	; (80077a4 <HAL_TIM_OnePulse_Init+0xb8>)
 8007726:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2202      	movs	r2, #2
 8007734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	3304      	adds	r3, #4
 8007740:	4619      	mov	r1, r3
 8007742:	4610      	mov	r0, r2
 8007744:	f000 fe94 	bl	8008470 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f022 0208 	bic.w	r2, r2, #8
 8007756:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6819      	ldr	r1, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	430a      	orrs	r2, r1
 8007766:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3708      	adds	r7, #8
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	080077a9 	.word	0x080077a9

080077a8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80077d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80077e4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d108      	bne.n	80077fe <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80077ec:	7bbb      	ldrb	r3, [r7, #14]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d105      	bne.n	80077fe <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80077f2:	7b7b      	ldrb	r3, [r7, #13]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d102      	bne.n	80077fe <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80077f8:	7b3b      	ldrb	r3, [r7, #12]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d001      	beq.n	8007802 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e03b      	b.n	800787a <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2202      	movs	r2, #2
 8007806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2202      	movs	r2, #2
 800780e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2202      	movs	r2, #2
 8007816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2202      	movs	r2, #2
 800781e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68da      	ldr	r2, [r3, #12]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f042 0202 	orr.w	r2, r2, #2
 8007830:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68da      	ldr	r2, [r3, #12]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f042 0204 	orr.w	r2, r2, #4
 8007840:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2201      	movs	r2, #1
 8007848:	2100      	movs	r1, #0
 800784a:	4618      	mov	r0, r3
 800784c:	f001 f8b6 	bl	80089bc <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2201      	movs	r2, #1
 8007856:	2104      	movs	r1, #4
 8007858:	4618      	mov	r0, r3
 800785a:	f001 f8af 	bl	80089bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a08      	ldr	r2, [pc, #32]	; (8007884 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d107      	bne.n	8007878 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007876:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	40010000 	.word	0x40010000

08007888 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d101      	bne.n	800789c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e0a2      	b.n	80079e2 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d111      	bne.n	80078cc <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f001 f8a9 	bl	8008a08 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d102      	bne.n	80078c4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a4a      	ldr	r2, [pc, #296]	; (80079ec <HAL_TIM_Encoder_Init+0x164>)
 80078c2:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2202      	movs	r2, #2
 80078d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	6812      	ldr	r2, [r2, #0]
 80078de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078e2:	f023 0307 	bic.w	r3, r3, #7
 80078e6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	3304      	adds	r3, #4
 80078f0:	4619      	mov	r1, r3
 80078f2:	4610      	mov	r0, r2
 80078f4:	f000 fdbc 	bl	8008470 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6a1b      	ldr	r3, [r3, #32]
 800790e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	697a      	ldr	r2, [r7, #20]
 8007916:	4313      	orrs	r3, r2
 8007918:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007920:	f023 0303 	bic.w	r3, r3, #3
 8007924:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	689a      	ldr	r2, [r3, #8]
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	021b      	lsls	r3, r3, #8
 8007930:	4313      	orrs	r3, r2
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	4313      	orrs	r3, r2
 8007936:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800793e:	f023 030c 	bic.w	r3, r3, #12
 8007942:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800794a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800794e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	68da      	ldr	r2, [r3, #12]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	69db      	ldr	r3, [r3, #28]
 8007958:	021b      	lsls	r3, r3, #8
 800795a:	4313      	orrs	r3, r2
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	4313      	orrs	r3, r2
 8007960:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	011a      	lsls	r2, r3, #4
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	6a1b      	ldr	r3, [r3, #32]
 800796c:	031b      	lsls	r3, r3, #12
 800796e:	4313      	orrs	r3, r2
 8007970:	693a      	ldr	r2, [r7, #16]
 8007972:	4313      	orrs	r3, r2
 8007974:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800797c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007984:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	685a      	ldr	r2, [r3, #4]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	011b      	lsls	r3, r3, #4
 8007990:	4313      	orrs	r3, r2
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	4313      	orrs	r3, r2
 8007996:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	697a      	ldr	r2, [r7, #20]
 800799e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3718      	adds	r7, #24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	08004a79 	.word	0x08004a79

080079f0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a00:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007a08:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a10:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007a18:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d110      	bne.n	8007a42 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d102      	bne.n	8007a2c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a26:	7b7b      	ldrb	r3, [r7, #13]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d001      	beq.n	8007a30 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e069      	b.n	8007b04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2202      	movs	r2, #2
 8007a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a40:	e031      	b.n	8007aa6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	2b04      	cmp	r3, #4
 8007a46:	d110      	bne.n	8007a6a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d102      	bne.n	8007a54 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a4e:	7b3b      	ldrb	r3, [r7, #12]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d001      	beq.n	8007a58 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e055      	b.n	8007b04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2202      	movs	r2, #2
 8007a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a68:	e01d      	b.n	8007aa6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a6a:	7bfb      	ldrb	r3, [r7, #15]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d108      	bne.n	8007a82 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a70:	7bbb      	ldrb	r3, [r7, #14]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d105      	bne.n	8007a82 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a76:	7b7b      	ldrb	r3, [r7, #13]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d102      	bne.n	8007a82 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a7c:	7b3b      	ldrb	r3, [r7, #12]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d001      	beq.n	8007a86 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e03e      	b.n	8007b04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2202      	movs	r2, #2
 8007a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2202      	movs	r2, #2
 8007a92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2202      	movs	r2, #2
 8007a9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d003      	beq.n	8007ab4 <HAL_TIM_Encoder_Start+0xc4>
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2b04      	cmp	r3, #4
 8007ab0:	d008      	beq.n	8007ac4 <HAL_TIM_Encoder_Start+0xd4>
 8007ab2:	e00f      	b.n	8007ad4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	2100      	movs	r1, #0
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 ff7d 	bl	80089bc <TIM_CCxChannelCmd>
      break;
 8007ac2:	e016      	b.n	8007af2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	2104      	movs	r1, #4
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 ff75 	bl	80089bc <TIM_CCxChannelCmd>
      break;
 8007ad2:	e00e      	b.n	8007af2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	2100      	movs	r1, #0
 8007adc:	4618      	mov	r0, r3
 8007ade:	f000 ff6d 	bl	80089bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	2104      	movs	r1, #4
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 ff66 	bl	80089bc <TIM_CCxChannelCmd>
      break;
 8007af0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f042 0201 	orr.w	r2, r2, #1
 8007b00:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	f003 0302 	and.w	r3, r3, #2
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d128      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f003 0302 	and.w	r3, r3, #2
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d121      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f06f 0202 	mvn.w	r2, #2
 8007b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	f003 0303 	and.w	r3, r3, #3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d005      	beq.n	8007b5a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	4798      	blx	r3
 8007b58:	e009      	b.n	8007b6e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	f003 0304 	and.w	r3, r3, #4
 8007b7e:	2b04      	cmp	r3, #4
 8007b80:	d128      	bne.n	8007bd4 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	f003 0304 	and.w	r3, r3, #4
 8007b8c:	2b04      	cmp	r3, #4
 8007b8e:	d121      	bne.n	8007bd4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f06f 0204 	mvn.w	r2, #4
 8007b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d005      	beq.n	8007bba <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	4798      	blx	r3
 8007bb8:	e009      	b.n	8007bce <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	f003 0308 	and.w	r3, r3, #8
 8007bde:	2b08      	cmp	r3, #8
 8007be0:	d128      	bne.n	8007c34 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	f003 0308 	and.w	r3, r3, #8
 8007bec:	2b08      	cmp	r3, #8
 8007bee:	d121      	bne.n	8007c34 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f06f 0208 	mvn.w	r2, #8
 8007bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2204      	movs	r2, #4
 8007bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	69db      	ldr	r3, [r3, #28]
 8007c06:	f003 0303 	and.w	r3, r3, #3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d005      	beq.n	8007c1a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	4798      	blx	r3
 8007c18:	e009      	b.n	8007c2e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	f003 0310 	and.w	r3, r3, #16
 8007c3e:	2b10      	cmp	r3, #16
 8007c40:	d128      	bne.n	8007c94 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	f003 0310 	and.w	r3, r3, #16
 8007c4c:	2b10      	cmp	r3, #16
 8007c4e:	d121      	bne.n	8007c94 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f06f 0210 	mvn.w	r2, #16
 8007c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2208      	movs	r2, #8
 8007c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d005      	beq.n	8007c7a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	4798      	blx	r3
 8007c78:	e009      	b.n	8007c8e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d110      	bne.n	8007cc4 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d109      	bne.n	8007cc4 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f06f 0201 	mvn.w	r2, #1
 8007cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cce:	2b80      	cmp	r3, #128	; 0x80
 8007cd0:	d110      	bne.n	8007cf4 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cdc:	2b80      	cmp	r3, #128	; 0x80
 8007cde:	d109      	bne.n	8007cf4 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cfe:	2b40      	cmp	r3, #64	; 0x40
 8007d00:	d110      	bne.n	8007d24 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d0c:	2b40      	cmp	r3, #64	; 0x40
 8007d0e:	d109      	bne.n	8007d24 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	f003 0320 	and.w	r3, r3, #32
 8007d2e:	2b20      	cmp	r3, #32
 8007d30:	d110      	bne.n	8007d54 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	f003 0320 	and.w	r3, r3, #32
 8007d3c:	2b20      	cmp	r3, #32
 8007d3e:	d109      	bne.n	8007d54 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f06f 0220 	mvn.w	r2, #32
 8007d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d54:	bf00      	nop
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d101      	bne.n	8007d7a <HAL_TIM_OC_ConfigChannel+0x1e>
 8007d76:	2302      	movs	r3, #2
 8007d78:	e048      	b.n	8007e0c <HAL_TIM_OC_ConfigChannel+0xb0>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2b0c      	cmp	r3, #12
 8007d86:	d839      	bhi.n	8007dfc <HAL_TIM_OC_ConfigChannel+0xa0>
 8007d88:	a201      	add	r2, pc, #4	; (adr r2, 8007d90 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8e:	bf00      	nop
 8007d90:	08007dc5 	.word	0x08007dc5
 8007d94:	08007dfd 	.word	0x08007dfd
 8007d98:	08007dfd 	.word	0x08007dfd
 8007d9c:	08007dfd 	.word	0x08007dfd
 8007da0:	08007dd3 	.word	0x08007dd3
 8007da4:	08007dfd 	.word	0x08007dfd
 8007da8:	08007dfd 	.word	0x08007dfd
 8007dac:	08007dfd 	.word	0x08007dfd
 8007db0:	08007de1 	.word	0x08007de1
 8007db4:	08007dfd 	.word	0x08007dfd
 8007db8:	08007dfd 	.word	0x08007dfd
 8007dbc:	08007dfd 	.word	0x08007dfd
 8007dc0:	08007def 	.word	0x08007def
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68b9      	ldr	r1, [r7, #8]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f000 fbd0 	bl	8008570 <TIM_OC1_SetConfig>
      break;
 8007dd0:	e017      	b.n	8007e02 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68b9      	ldr	r1, [r7, #8]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f000 fc2f 	bl	800863c <TIM_OC2_SetConfig>
      break;
 8007dde:	e010      	b.n	8007e02 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68b9      	ldr	r1, [r7, #8]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 fc94 	bl	8008714 <TIM_OC3_SetConfig>
      break;
 8007dec:	e009      	b.n	8007e02 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68b9      	ldr	r1, [r7, #8]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f000 fcf7 	bl	80087e8 <TIM_OC4_SetConfig>
      break;
 8007dfa:	e002      	b.n	8007e02 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	75fb      	strb	r3, [r7, #23]
      break;
 8007e00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3718      	adds	r7, #24
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d101      	bne.n	8007e32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e2e:	2302      	movs	r3, #2
 8007e30:	e0ae      	b.n	8007f90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2b0c      	cmp	r3, #12
 8007e3e:	f200 809f 	bhi.w	8007f80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007e42:	a201      	add	r2, pc, #4	; (adr r2, 8007e48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e48:	08007e7d 	.word	0x08007e7d
 8007e4c:	08007f81 	.word	0x08007f81
 8007e50:	08007f81 	.word	0x08007f81
 8007e54:	08007f81 	.word	0x08007f81
 8007e58:	08007ebd 	.word	0x08007ebd
 8007e5c:	08007f81 	.word	0x08007f81
 8007e60:	08007f81 	.word	0x08007f81
 8007e64:	08007f81 	.word	0x08007f81
 8007e68:	08007eff 	.word	0x08007eff
 8007e6c:	08007f81 	.word	0x08007f81
 8007e70:	08007f81 	.word	0x08007f81
 8007e74:	08007f81 	.word	0x08007f81
 8007e78:	08007f3f 	.word	0x08007f3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68b9      	ldr	r1, [r7, #8]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 fb74 	bl	8008570 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	699a      	ldr	r2, [r3, #24]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f042 0208 	orr.w	r2, r2, #8
 8007e96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	699a      	ldr	r2, [r3, #24]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f022 0204 	bic.w	r2, r2, #4
 8007ea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6999      	ldr	r1, [r3, #24]
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	691a      	ldr	r2, [r3, #16]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	619a      	str	r2, [r3, #24]
      break;
 8007eba:	e064      	b.n	8007f86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68b9      	ldr	r1, [r7, #8]
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 fbba 	bl	800863c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	699a      	ldr	r2, [r3, #24]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ed6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	699a      	ldr	r2, [r3, #24]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6999      	ldr	r1, [r3, #24]
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	021a      	lsls	r2, r3, #8
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	619a      	str	r2, [r3, #24]
      break;
 8007efc:	e043      	b.n	8007f86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68b9      	ldr	r1, [r7, #8]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f000 fc05 	bl	8008714 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	69da      	ldr	r2, [r3, #28]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f042 0208 	orr.w	r2, r2, #8
 8007f18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69da      	ldr	r2, [r3, #28]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f022 0204 	bic.w	r2, r2, #4
 8007f28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	69d9      	ldr	r1, [r3, #28]
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	691a      	ldr	r2, [r3, #16]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	430a      	orrs	r2, r1
 8007f3a:	61da      	str	r2, [r3, #28]
      break;
 8007f3c:	e023      	b.n	8007f86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68b9      	ldr	r1, [r7, #8]
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 fc4f 	bl	80087e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	69da      	ldr	r2, [r3, #28]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	69da      	ldr	r2, [r3, #28]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	69d9      	ldr	r1, [r3, #28]
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	021a      	lsls	r2, r3, #8
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	61da      	str	r2, [r3, #28]
      break;
 8007f7e:	e002      	b.n	8007f86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	75fb      	strb	r3, [r7, #23]
      break;
 8007f84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3718      	adds	r7, #24
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d101      	bne.n	8007fb4 <HAL_TIM_ConfigClockSource+0x1c>
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	e0b4      	b.n	800811e <HAL_TIM_ConfigClockSource+0x186>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fec:	d03e      	beq.n	800806c <HAL_TIM_ConfigClockSource+0xd4>
 8007fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ff2:	f200 8087 	bhi.w	8008104 <HAL_TIM_ConfigClockSource+0x16c>
 8007ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ffa:	f000 8086 	beq.w	800810a <HAL_TIM_ConfigClockSource+0x172>
 8007ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008002:	d87f      	bhi.n	8008104 <HAL_TIM_ConfigClockSource+0x16c>
 8008004:	2b70      	cmp	r3, #112	; 0x70
 8008006:	d01a      	beq.n	800803e <HAL_TIM_ConfigClockSource+0xa6>
 8008008:	2b70      	cmp	r3, #112	; 0x70
 800800a:	d87b      	bhi.n	8008104 <HAL_TIM_ConfigClockSource+0x16c>
 800800c:	2b60      	cmp	r3, #96	; 0x60
 800800e:	d050      	beq.n	80080b2 <HAL_TIM_ConfigClockSource+0x11a>
 8008010:	2b60      	cmp	r3, #96	; 0x60
 8008012:	d877      	bhi.n	8008104 <HAL_TIM_ConfigClockSource+0x16c>
 8008014:	2b50      	cmp	r3, #80	; 0x50
 8008016:	d03c      	beq.n	8008092 <HAL_TIM_ConfigClockSource+0xfa>
 8008018:	2b50      	cmp	r3, #80	; 0x50
 800801a:	d873      	bhi.n	8008104 <HAL_TIM_ConfigClockSource+0x16c>
 800801c:	2b40      	cmp	r3, #64	; 0x40
 800801e:	d058      	beq.n	80080d2 <HAL_TIM_ConfigClockSource+0x13a>
 8008020:	2b40      	cmp	r3, #64	; 0x40
 8008022:	d86f      	bhi.n	8008104 <HAL_TIM_ConfigClockSource+0x16c>
 8008024:	2b30      	cmp	r3, #48	; 0x30
 8008026:	d064      	beq.n	80080f2 <HAL_TIM_ConfigClockSource+0x15a>
 8008028:	2b30      	cmp	r3, #48	; 0x30
 800802a:	d86b      	bhi.n	8008104 <HAL_TIM_ConfigClockSource+0x16c>
 800802c:	2b20      	cmp	r3, #32
 800802e:	d060      	beq.n	80080f2 <HAL_TIM_ConfigClockSource+0x15a>
 8008030:	2b20      	cmp	r3, #32
 8008032:	d867      	bhi.n	8008104 <HAL_TIM_ConfigClockSource+0x16c>
 8008034:	2b00      	cmp	r3, #0
 8008036:	d05c      	beq.n	80080f2 <HAL_TIM_ConfigClockSource+0x15a>
 8008038:	2b10      	cmp	r3, #16
 800803a:	d05a      	beq.n	80080f2 <HAL_TIM_ConfigClockSource+0x15a>
 800803c:	e062      	b.n	8008104 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6818      	ldr	r0, [r3, #0]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	6899      	ldr	r1, [r3, #8]
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	685a      	ldr	r2, [r3, #4]
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	f000 fc95 	bl	800897c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008060:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	609a      	str	r2, [r3, #8]
      break;
 800806a:	e04f      	b.n	800810c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6818      	ldr	r0, [r3, #0]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	6899      	ldr	r1, [r3, #8]
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	f000 fc7e 	bl	800897c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	689a      	ldr	r2, [r3, #8]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800808e:	609a      	str	r2, [r3, #8]
      break;
 8008090:	e03c      	b.n	800810c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6818      	ldr	r0, [r3, #0]
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	6859      	ldr	r1, [r3, #4]
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	461a      	mov	r2, r3
 80080a0:	f000 fbf2 	bl	8008888 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2150      	movs	r1, #80	; 0x50
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 fc4b 	bl	8008946 <TIM_ITRx_SetConfig>
      break;
 80080b0:	e02c      	b.n	800810c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6818      	ldr	r0, [r3, #0]
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	6859      	ldr	r1, [r3, #4]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	461a      	mov	r2, r3
 80080c0:	f000 fc11 	bl	80088e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2160      	movs	r1, #96	; 0x60
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 fc3b 	bl	8008946 <TIM_ITRx_SetConfig>
      break;
 80080d0:	e01c      	b.n	800810c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6818      	ldr	r0, [r3, #0]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	6859      	ldr	r1, [r3, #4]
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	461a      	mov	r2, r3
 80080e0:	f000 fbd2 	bl	8008888 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2140      	movs	r1, #64	; 0x40
 80080ea:	4618      	mov	r0, r3
 80080ec:	f000 fc2b 	bl	8008946 <TIM_ITRx_SetConfig>
      break;
 80080f0:	e00c      	b.n	800810c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4619      	mov	r1, r3
 80080fc:	4610      	mov	r0, r2
 80080fe:	f000 fc22 	bl	8008946 <TIM_ITRx_SetConfig>
      break;
 8008102:	e003      	b.n	800810c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	73fb      	strb	r3, [r7, #15]
      break;
 8008108:	e000      	b.n	800810c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800810a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800811c:	7bfb      	ldrb	r3, [r7, #15]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800812e:	bf00      	nop
 8008130:	370c      	adds	r7, #12
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800813a:	b480      	push	{r7}
 800813c:	b083      	sub	sp, #12
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008142:	bf00      	nop
 8008144:	370c      	adds	r7, #12
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008156:	bf00      	nop
 8008158:	370c      	adds	r7, #12
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr

08008162 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008162:	b480      	push	{r7}
 8008164:	b083      	sub	sp, #12
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800816a:	bf00      	nop
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008176:	b480      	push	{r7}
 8008178:	b083      	sub	sp, #12
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800817e:	bf00      	nop
 8008180:	370c      	adds	r7, #12
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800818a:	b480      	push	{r7}
 800818c:	b083      	sub	sp, #12
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008192:	bf00      	nop
 8008194:	370c      	adds	r7, #12
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800819e:	b480      	push	{r7}
 80081a0:	b083      	sub	sp, #12
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081a6:	bf00      	nop
 80081a8:	370c      	adds	r7, #12
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b083      	sub	sp, #12
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80081ba:	bf00      	nop
 80081bc:	370c      	adds	r7, #12
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80081c6:	b480      	push	{r7}
 80081c8:	b083      	sub	sp, #12
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80081ce:	bf00      	nop
 80081d0:	370c      	adds	r7, #12
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
	...

080081dc <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80081dc:	b480      	push	{r7}
 80081de:	b087      	sub	sp, #28
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	460b      	mov	r3, r1
 80081e6:	607a      	str	r2, [r7, #4]
 80081e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d101      	bne.n	80081f8 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e135      	b.n	8008464 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d101      	bne.n	8008206 <HAL_TIM_RegisterCallback+0x2a>
 8008202:	2302      	movs	r3, #2
 8008204:	e12e      	b.n	8008464 <HAL_TIM_RegisterCallback+0x288>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2201      	movs	r2, #1
 800820a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b01      	cmp	r3, #1
 8008218:	f040 80ba 	bne.w	8008390 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 800821c:	7afb      	ldrb	r3, [r7, #11]
 800821e:	2b1a      	cmp	r3, #26
 8008220:	f200 80b3 	bhi.w	800838a <HAL_TIM_RegisterCallback+0x1ae>
 8008224:	a201      	add	r2, pc, #4	; (adr r2, 800822c <HAL_TIM_RegisterCallback+0x50>)
 8008226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822a:	bf00      	nop
 800822c:	08008299 	.word	0x08008299
 8008230:	080082a1 	.word	0x080082a1
 8008234:	080082a9 	.word	0x080082a9
 8008238:	080082b1 	.word	0x080082b1
 800823c:	080082b9 	.word	0x080082b9
 8008240:	080082c1 	.word	0x080082c1
 8008244:	080082c9 	.word	0x080082c9
 8008248:	080082d1 	.word	0x080082d1
 800824c:	080082d9 	.word	0x080082d9
 8008250:	080082e1 	.word	0x080082e1
 8008254:	080082e9 	.word	0x080082e9
 8008258:	080082f1 	.word	0x080082f1
 800825c:	080082f9 	.word	0x080082f9
 8008260:	08008301 	.word	0x08008301
 8008264:	08008309 	.word	0x08008309
 8008268:	08008313 	.word	0x08008313
 800826c:	0800831d 	.word	0x0800831d
 8008270:	08008327 	.word	0x08008327
 8008274:	08008331 	.word	0x08008331
 8008278:	0800833b 	.word	0x0800833b
 800827c:	08008345 	.word	0x08008345
 8008280:	0800834f 	.word	0x0800834f
 8008284:	08008359 	.word	0x08008359
 8008288:	08008363 	.word	0x08008363
 800828c:	0800836d 	.word	0x0800836d
 8008290:	08008377 	.word	0x08008377
 8008294:	08008381 	.word	0x08008381
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800829e:	e0dc      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80082a6:	e0d8      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80082ae:	e0d4      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80082b6:	e0d0      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80082be:	e0cc      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80082c6:	e0c8      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80082ce:	e0c4      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80082d6:	e0c0      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80082de:	e0bc      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80082e6:	e0b8      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80082ee:	e0b4      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80082f6:	e0b0      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80082fe:	e0ac      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8008306:	e0a8      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8008310:	e0a3      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800831a:	e09e      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8008324:	e099      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800832e:	e094      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8008338:	e08f      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8008342:	e08a      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800834c:	e085      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8008356:	e080      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8008360:	e07b      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800836a:	e076      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8008374:	e071      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800837e:	e06c      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8008388:	e067      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	75fb      	strb	r3, [r7, #23]
        break;
 800838e:	e064      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008396:	b2db      	uxtb	r3, r3
 8008398:	2b00      	cmp	r3, #0
 800839a:	d15c      	bne.n	8008456 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 800839c:	7afb      	ldrb	r3, [r7, #11]
 800839e:	2b0d      	cmp	r3, #13
 80083a0:	d856      	bhi.n	8008450 <HAL_TIM_RegisterCallback+0x274>
 80083a2:	a201      	add	r2, pc, #4	; (adr r2, 80083a8 <HAL_TIM_RegisterCallback+0x1cc>)
 80083a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a8:	080083e1 	.word	0x080083e1
 80083ac:	080083e9 	.word	0x080083e9
 80083b0:	080083f1 	.word	0x080083f1
 80083b4:	080083f9 	.word	0x080083f9
 80083b8:	08008401 	.word	0x08008401
 80083bc:	08008409 	.word	0x08008409
 80083c0:	08008411 	.word	0x08008411
 80083c4:	08008419 	.word	0x08008419
 80083c8:	08008421 	.word	0x08008421
 80083cc:	08008429 	.word	0x08008429
 80083d0:	08008431 	.word	0x08008431
 80083d4:	08008439 	.word	0x08008439
 80083d8:	08008441 	.word	0x08008441
 80083dc:	08008449 	.word	0x08008449
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80083e6:	e038      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80083ee:	e034      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80083f6:	e030      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80083fe:	e02c      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8008406:	e028      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800840e:	e024      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8008416:	e020      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800841e:	e01c      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8008426:	e018      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800842e:	e014      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008436:	e010      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800843e:	e00c      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8008446:	e008      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800844e:	e004      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	75fb      	strb	r3, [r7, #23]
        break;
 8008454:	e001      	b.n	800845a <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008462:	7dfb      	ldrb	r3, [r7, #23]
}
 8008464:	4618      	mov	r0, r3
 8008466:	371c      	adds	r7, #28
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a34      	ldr	r2, [pc, #208]	; (8008554 <TIM_Base_SetConfig+0xe4>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d00f      	beq.n	80084a8 <TIM_Base_SetConfig+0x38>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800848e:	d00b      	beq.n	80084a8 <TIM_Base_SetConfig+0x38>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a31      	ldr	r2, [pc, #196]	; (8008558 <TIM_Base_SetConfig+0xe8>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d007      	beq.n	80084a8 <TIM_Base_SetConfig+0x38>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a30      	ldr	r2, [pc, #192]	; (800855c <TIM_Base_SetConfig+0xec>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d003      	beq.n	80084a8 <TIM_Base_SetConfig+0x38>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a2f      	ldr	r2, [pc, #188]	; (8008560 <TIM_Base_SetConfig+0xf0>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d108      	bne.n	80084ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a25      	ldr	r2, [pc, #148]	; (8008554 <TIM_Base_SetConfig+0xe4>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d01b      	beq.n	80084fa <TIM_Base_SetConfig+0x8a>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084c8:	d017      	beq.n	80084fa <TIM_Base_SetConfig+0x8a>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a22      	ldr	r2, [pc, #136]	; (8008558 <TIM_Base_SetConfig+0xe8>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d013      	beq.n	80084fa <TIM_Base_SetConfig+0x8a>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a21      	ldr	r2, [pc, #132]	; (800855c <TIM_Base_SetConfig+0xec>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d00f      	beq.n	80084fa <TIM_Base_SetConfig+0x8a>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a20      	ldr	r2, [pc, #128]	; (8008560 <TIM_Base_SetConfig+0xf0>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d00b      	beq.n	80084fa <TIM_Base_SetConfig+0x8a>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a1f      	ldr	r2, [pc, #124]	; (8008564 <TIM_Base_SetConfig+0xf4>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d007      	beq.n	80084fa <TIM_Base_SetConfig+0x8a>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a1e      	ldr	r2, [pc, #120]	; (8008568 <TIM_Base_SetConfig+0xf8>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d003      	beq.n	80084fa <TIM_Base_SetConfig+0x8a>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a1d      	ldr	r2, [pc, #116]	; (800856c <TIM_Base_SetConfig+0xfc>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d108      	bne.n	800850c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	4313      	orrs	r3, r2
 800850a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	4313      	orrs	r3, r2
 8008518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	689a      	ldr	r2, [r3, #8]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a08      	ldr	r2, [pc, #32]	; (8008554 <TIM_Base_SetConfig+0xe4>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d103      	bne.n	8008540 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	691a      	ldr	r2, [r3, #16]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	615a      	str	r2, [r3, #20]
}
 8008546:	bf00      	nop
 8008548:	3714      	adds	r7, #20
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	40010000 	.word	0x40010000
 8008558:	40000400 	.word	0x40000400
 800855c:	40000800 	.word	0x40000800
 8008560:	40000c00 	.word	0x40000c00
 8008564:	40014000 	.word	0x40014000
 8008568:	40014400 	.word	0x40014400
 800856c:	40014800 	.word	0x40014800

08008570 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008570:	b480      	push	{r7}
 8008572:	b087      	sub	sp, #28
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a1b      	ldr	r3, [r3, #32]
 800857e:	f023 0201 	bic.w	r2, r3, #1
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a1b      	ldr	r3, [r3, #32]
 800858a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800859e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f023 0303 	bic.w	r3, r3, #3
 80085a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	f023 0302 	bic.w	r3, r3, #2
 80085b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a1c      	ldr	r2, [pc, #112]	; (8008638 <TIM_OC1_SetConfig+0xc8>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d10c      	bne.n	80085e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	f023 0308 	bic.w	r3, r3, #8
 80085d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	697a      	ldr	r2, [r7, #20]
 80085da:	4313      	orrs	r3, r2
 80085dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	f023 0304 	bic.w	r3, r3, #4
 80085e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a13      	ldr	r2, [pc, #76]	; (8008638 <TIM_OC1_SetConfig+0xc8>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d111      	bne.n	8008612 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	693a      	ldr	r2, [r7, #16]
 8008604:	4313      	orrs	r3, r2
 8008606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	4313      	orrs	r3, r2
 8008610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	693a      	ldr	r2, [r7, #16]
 8008616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	685a      	ldr	r2, [r3, #4]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	697a      	ldr	r2, [r7, #20]
 800862a:	621a      	str	r2, [r3, #32]
}
 800862c:	bf00      	nop
 800862e:	371c      	adds	r7, #28
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr
 8008638:	40010000 	.word	0x40010000

0800863c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800863c:	b480      	push	{r7}
 800863e:	b087      	sub	sp, #28
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a1b      	ldr	r3, [r3, #32]
 800864a:	f023 0210 	bic.w	r2, r3, #16
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a1b      	ldr	r3, [r3, #32]
 8008656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800866a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	021b      	lsls	r3, r3, #8
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	4313      	orrs	r3, r2
 800867e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	f023 0320 	bic.w	r3, r3, #32
 8008686:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	011b      	lsls	r3, r3, #4
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	4313      	orrs	r3, r2
 8008692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4a1e      	ldr	r2, [pc, #120]	; (8008710 <TIM_OC2_SetConfig+0xd4>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d10d      	bne.n	80086b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	011b      	lsls	r3, r3, #4
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a15      	ldr	r2, [pc, #84]	; (8008710 <TIM_OC2_SetConfig+0xd4>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d113      	bne.n	80086e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	693a      	ldr	r2, [r7, #16]
 80086d8:	4313      	orrs	r3, r2
 80086da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	699b      	ldr	r3, [r3, #24]
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	693a      	ldr	r2, [r7, #16]
 80086ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	685a      	ldr	r2, [r3, #4]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	697a      	ldr	r2, [r7, #20]
 8008700:	621a      	str	r2, [r3, #32]
}
 8008702:	bf00      	nop
 8008704:	371c      	adds	r7, #28
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	40010000 	.word	0x40010000

08008714 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008714:	b480      	push	{r7}
 8008716:	b087      	sub	sp, #28
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f023 0303 	bic.w	r3, r3, #3
 800874a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	4313      	orrs	r3, r2
 8008754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800875c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	021b      	lsls	r3, r3, #8
 8008764:	697a      	ldr	r2, [r7, #20]
 8008766:	4313      	orrs	r3, r2
 8008768:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a1d      	ldr	r2, [pc, #116]	; (80087e4 <TIM_OC3_SetConfig+0xd0>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d10d      	bne.n	800878e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008778:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	021b      	lsls	r3, r3, #8
 8008780:	697a      	ldr	r2, [r7, #20]
 8008782:	4313      	orrs	r3, r2
 8008784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800878c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a14      	ldr	r2, [pc, #80]	; (80087e4 <TIM_OC3_SetConfig+0xd0>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d113      	bne.n	80087be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800879c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	011b      	lsls	r3, r3, #4
 80087ac:	693a      	ldr	r2, [r7, #16]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	011b      	lsls	r3, r3, #4
 80087b8:	693a      	ldr	r2, [r7, #16]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	685a      	ldr	r2, [r3, #4]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	697a      	ldr	r2, [r7, #20]
 80087d6:	621a      	str	r2, [r3, #32]
}
 80087d8:	bf00      	nop
 80087da:	371c      	adds	r7, #28
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr
 80087e4:	40010000 	.word	0x40010000

080087e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b087      	sub	sp, #28
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a1b      	ldr	r3, [r3, #32]
 8008802:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	69db      	ldr	r3, [r3, #28]
 800880e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800881e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	021b      	lsls	r3, r3, #8
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	4313      	orrs	r3, r2
 800882a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008832:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	031b      	lsls	r3, r3, #12
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	4313      	orrs	r3, r2
 800883e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a10      	ldr	r2, [pc, #64]	; (8008884 <TIM_OC4_SetConfig+0x9c>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d109      	bne.n	800885c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800884e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	695b      	ldr	r3, [r3, #20]
 8008854:	019b      	lsls	r3, r3, #6
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	4313      	orrs	r3, r2
 800885a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	685a      	ldr	r2, [r3, #4]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	693a      	ldr	r2, [r7, #16]
 8008874:	621a      	str	r2, [r3, #32]
}
 8008876:	bf00      	nop
 8008878:	371c      	adds	r7, #28
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop
 8008884:	40010000 	.word	0x40010000

08008888 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008888:	b480      	push	{r7}
 800888a:	b087      	sub	sp, #28
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6a1b      	ldr	r3, [r3, #32]
 8008898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	f023 0201 	bic.w	r2, r3, #1
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	011b      	lsls	r3, r3, #4
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	f023 030a 	bic.w	r3, r3, #10
 80088c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	621a      	str	r2, [r3, #32]
}
 80088da:	bf00      	nop
 80088dc:	371c      	adds	r7, #28
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr

080088e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088e6:	b480      	push	{r7}
 80088e8:	b087      	sub	sp, #28
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	60b9      	str	r1, [r7, #8]
 80088f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	f023 0210 	bic.w	r2, r3, #16
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	699b      	ldr	r3, [r3, #24]
 8008902:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6a1b      	ldr	r3, [r3, #32]
 8008908:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008910:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	031b      	lsls	r3, r3, #12
 8008916:	697a      	ldr	r2, [r7, #20]
 8008918:	4313      	orrs	r3, r2
 800891a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008922:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	011b      	lsls	r3, r3, #4
 8008928:	693a      	ldr	r2, [r7, #16]
 800892a:	4313      	orrs	r3, r2
 800892c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	697a      	ldr	r2, [r7, #20]
 8008932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	621a      	str	r2, [r3, #32]
}
 800893a:	bf00      	nop
 800893c:	371c      	adds	r7, #28
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008946:	b480      	push	{r7}
 8008948:	b085      	sub	sp, #20
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800895c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	4313      	orrs	r3, r2
 8008964:	f043 0307 	orr.w	r3, r3, #7
 8008968:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	609a      	str	r2, [r3, #8]
}
 8008970:	bf00      	nop
 8008972:	3714      	adds	r7, #20
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800897c:	b480      	push	{r7}
 800897e:	b087      	sub	sp, #28
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
 8008988:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008996:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	021a      	lsls	r2, r3, #8
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	431a      	orrs	r2, r3
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	697a      	ldr	r2, [r7, #20]
 80089ae:	609a      	str	r2, [r3, #8]
}
 80089b0:	bf00      	nop
 80089b2:	371c      	adds	r7, #28
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089bc:	b480      	push	{r7}
 80089be:	b087      	sub	sp, #28
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	f003 031f 	and.w	r3, r3, #31
 80089ce:	2201      	movs	r2, #1
 80089d0:	fa02 f303 	lsl.w	r3, r2, r3
 80089d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6a1a      	ldr	r2, [r3, #32]
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	43db      	mvns	r3, r3
 80089de:	401a      	ands	r2, r3
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6a1a      	ldr	r2, [r3, #32]
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	f003 031f 	and.w	r3, r3, #31
 80089ee:	6879      	ldr	r1, [r7, #4]
 80089f0:	fa01 f303 	lsl.w	r3, r1, r3
 80089f4:	431a      	orrs	r2, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	621a      	str	r2, [r3, #32]
}
 80089fa:	bf00      	nop
 80089fc:	371c      	adds	r7, #28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
	...

08008a08 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a1c      	ldr	r2, [pc, #112]	; (8008a84 <TIM_ResetCallback+0x7c>)
 8008a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a1b      	ldr	r2, [pc, #108]	; (8008a88 <TIM_ResetCallback+0x80>)
 8008a1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4a1a      	ldr	r2, [pc, #104]	; (8008a8c <TIM_ResetCallback+0x84>)
 8008a24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4a19      	ldr	r2, [pc, #100]	; (8008a90 <TIM_ResetCallback+0x88>)
 8008a2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a18      	ldr	r2, [pc, #96]	; (8008a94 <TIM_ResetCallback+0x8c>)
 8008a34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a17      	ldr	r2, [pc, #92]	; (8008a98 <TIM_ResetCallback+0x90>)
 8008a3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a16      	ldr	r2, [pc, #88]	; (8008a9c <TIM_ResetCallback+0x94>)
 8008a44:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a15      	ldr	r2, [pc, #84]	; (8008aa0 <TIM_ResetCallback+0x98>)
 8008a4c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4a14      	ldr	r2, [pc, #80]	; (8008aa4 <TIM_ResetCallback+0x9c>)
 8008a54:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a13      	ldr	r2, [pc, #76]	; (8008aa8 <TIM_ResetCallback+0xa0>)
 8008a5c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a12      	ldr	r2, [pc, #72]	; (8008aac <TIM_ResetCallback+0xa4>)
 8008a64:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a11      	ldr	r2, [pc, #68]	; (8008ab0 <TIM_ResetCallback+0xa8>)
 8008a6c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a10      	ldr	r2, [pc, #64]	; (8008ab4 <TIM_ResetCallback+0xac>)
 8008a74:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8008a78:	bf00      	nop
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr
 8008a84:	08004669 	.word	0x08004669
 8008a88:	08008127 	.word	0x08008127
 8008a8c:	0800819f 	.word	0x0800819f
 8008a90:	080081b3 	.word	0x080081b3
 8008a94:	0800814f 	.word	0x0800814f
 8008a98:	08008163 	.word	0x08008163
 8008a9c:	0800813b 	.word	0x0800813b
 8008aa0:	08008177 	.word	0x08008177
 8008aa4:	0800818b 	.word	0x0800818b
 8008aa8:	080081c7 	.word	0x080081c7
 8008aac:	08008b95 	.word	0x08008b95
 8008ab0:	08008ba9 	.word	0x08008ba9
 8008ab4:	08008bbd 	.word	0x08008bbd

08008ab8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d101      	bne.n	8008ad0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008acc:	2302      	movs	r3, #2
 8008ace:	e050      	b.n	8008b72 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2202      	movs	r2, #2
 8008adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008af6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a1c      	ldr	r2, [pc, #112]	; (8008b80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d018      	beq.n	8008b46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b1c:	d013      	beq.n	8008b46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a18      	ldr	r2, [pc, #96]	; (8008b84 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d00e      	beq.n	8008b46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a16      	ldr	r2, [pc, #88]	; (8008b88 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d009      	beq.n	8008b46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a15      	ldr	r2, [pc, #84]	; (8008b8c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d004      	beq.n	8008b46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a13      	ldr	r2, [pc, #76]	; (8008b90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d10c      	bne.n	8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	68ba      	ldr	r2, [r7, #8]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3714      	adds	r7, #20
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	40010000 	.word	0x40010000
 8008b84:	40000400 	.word	0x40000400
 8008b88:	40000800 	.word	0x40000800
 8008b8c:	40000c00 	.word	0x40000c00
 8008b90:	40014000 	.word	0x40014000

08008b94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b9c:	bf00      	nop
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bc4:	bf00      	nop
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e04a      	b.n	8008c78 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d111      	bne.n	8008c12 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 fd2c 	bl	8009654 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d102      	bne.n	8008c0a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a1e      	ldr	r2, [pc, #120]	; (8008c80 <HAL_UART_Init+0xb0>)
 8008c08:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2224      	movs	r2, #36	; 0x24
 8008c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68da      	ldr	r2, [r3, #12]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c28:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fff6 	bl	8009c1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	691a      	ldr	r2, [r3, #16]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c3e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	695a      	ldr	r2, [r3, #20]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c4e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68da      	ldr	r2, [r3, #12]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c5e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2220      	movs	r2, #32
 8008c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2220      	movs	r2, #32
 8008c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	08004c6d 	.word	0x08004c6d

08008c84 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b087      	sub	sp, #28
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	607a      	str	r2, [r7, #4]
 8008c90:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008c92:	2300      	movs	r3, #0
 8008c94:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d107      	bne.n	8008cac <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca0:	f043 0220 	orr.w	r2, r3, #32
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e08c      	b.n	8008dc6 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d101      	bne.n	8008cba <HAL_UART_RegisterCallback+0x36>
 8008cb6:	2302      	movs	r3, #2
 8008cb8:	e085      	b.n	8008dc6 <HAL_UART_RegisterCallback+0x142>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	2b20      	cmp	r3, #32
 8008ccc:	d151      	bne.n	8008d72 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8008cce:	7afb      	ldrb	r3, [r7, #11]
 8008cd0:	2b0c      	cmp	r3, #12
 8008cd2:	d845      	bhi.n	8008d60 <HAL_UART_RegisterCallback+0xdc>
 8008cd4:	a201      	add	r2, pc, #4	; (adr r2, 8008cdc <HAL_UART_RegisterCallback+0x58>)
 8008cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cda:	bf00      	nop
 8008cdc:	08008d11 	.word	0x08008d11
 8008ce0:	08008d19 	.word	0x08008d19
 8008ce4:	08008d21 	.word	0x08008d21
 8008ce8:	08008d29 	.word	0x08008d29
 8008cec:	08008d31 	.word	0x08008d31
 8008cf0:	08008d39 	.word	0x08008d39
 8008cf4:	08008d41 	.word	0x08008d41
 8008cf8:	08008d49 	.word	0x08008d49
 8008cfc:	08008d61 	.word	0x08008d61
 8008d00:	08008d61 	.word	0x08008d61
 8008d04:	08008d61 	.word	0x08008d61
 8008d08:	08008d51 	.word	0x08008d51
 8008d0c:	08008d59 	.word	0x08008d59
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8008d16:	e051      	b.n	8008dbc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8008d1e:	e04d      	b.n	8008dbc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8008d26:	e049      	b.n	8008dbc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8008d2e:	e045      	b.n	8008dbc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8008d36:	e041      	b.n	8008dbc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8008d3e:	e03d      	b.n	8008dbc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8008d46:	e039      	b.n	8008dbc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8008d4e:	e035      	b.n	8008dbc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008d56:	e031      	b.n	8008dbc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008d5e:	e02d      	b.n	8008dbc <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d64:	f043 0220 	orr.w	r2, r3, #32
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	75fb      	strb	r3, [r7, #23]
        break;
 8008d70:	e024      	b.n	8008dbc <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d116      	bne.n	8008dac <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8008d7e:	7afb      	ldrb	r3, [r7, #11]
 8008d80:	2b0b      	cmp	r3, #11
 8008d82:	d002      	beq.n	8008d8a <HAL_UART_RegisterCallback+0x106>
 8008d84:	2b0c      	cmp	r3, #12
 8008d86:	d004      	beq.n	8008d92 <HAL_UART_RegisterCallback+0x10e>
 8008d88:	e007      	b.n	8008d9a <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008d90:	e014      	b.n	8008dbc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008d98:	e010      	b.n	8008dbc <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d9e:	f043 0220 	orr.w	r2, r3, #32
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	75fb      	strb	r3, [r7, #23]
        break;
 8008daa:	e007      	b.n	8008dbc <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db0:	f043 0220 	orr.w	r2, r3, #32
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	371c      	adds	r7, #28
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop

08008dd4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	4613      	mov	r3, r2
 8008de0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	2b20      	cmp	r3, #32
 8008dec:	d11d      	bne.n	8008e2a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d002      	beq.n	8008dfa <HAL_UART_Receive_IT+0x26>
 8008df4:	88fb      	ldrh	r3, [r7, #6]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d101      	bne.n	8008dfe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e016      	b.n	8008e2c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d101      	bne.n	8008e0c <HAL_UART_Receive_IT+0x38>
 8008e08:	2302      	movs	r3, #2
 8008e0a:	e00f      	b.n	8008e2c <HAL_UART_Receive_IT+0x58>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2200      	movs	r2, #0
 8008e18:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008e1a:	88fb      	ldrh	r3, [r7, #6]
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	68b9      	ldr	r1, [r7, #8]
 8008e20:	68f8      	ldr	r0, [r7, #12]
 8008e22:	f000 fcf7 	bl	8009814 <UART_Start_Receive_IT>
 8008e26:	4603      	mov	r3, r0
 8008e28:	e000      	b.n	8008e2c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008e2a:	2302      	movs	r3, #2
  }
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b08c      	sub	sp, #48	; 0x30
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	4613      	mov	r3, r2
 8008e40:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b20      	cmp	r3, #32
 8008e4c:	d165      	bne.n	8008f1a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d002      	beq.n	8008e5a <HAL_UART_Transmit_DMA+0x26>
 8008e54:	88fb      	ldrh	r3, [r7, #6]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d101      	bne.n	8008e5e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e05e      	b.n	8008f1c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d101      	bne.n	8008e6c <HAL_UART_Transmit_DMA+0x38>
 8008e68:	2302      	movs	r3, #2
 8008e6a:	e057      	b.n	8008f1c <HAL_UART_Transmit_DMA+0xe8>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008e74:	68ba      	ldr	r2, [r7, #8]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	88fa      	ldrh	r2, [r7, #6]
 8008e7e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	88fa      	ldrh	r2, [r7, #6]
 8008e84:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2221      	movs	r2, #33	; 0x21
 8008e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e98:	4a22      	ldr	r2, [pc, #136]	; (8008f24 <HAL_UART_Transmit_DMA+0xf0>)
 8008e9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea0:	4a21      	ldr	r2, [pc, #132]	; (8008f28 <HAL_UART_Transmit_DMA+0xf4>)
 8008ea2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea8:	4a20      	ldr	r2, [pc, #128]	; (8008f2c <HAL_UART_Transmit_DMA+0xf8>)
 8008eaa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008eb4:	f107 0308 	add.w	r3, r7, #8
 8008eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec0:	6819      	ldr	r1, [r3, #0]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	3304      	adds	r3, #4
 8008ec8:	461a      	mov	r2, r3
 8008eca:	88fb      	ldrh	r3, [r7, #6]
 8008ecc:	f7fc fe64 	bl	8005b98 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ed8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	3314      	adds	r3, #20
 8008ee8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	e853 3f00 	ldrex	r3, [r3]
 8008ef0:	617b      	str	r3, [r7, #20]
   return(result);
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	3314      	adds	r3, #20
 8008f00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f02:	627a      	str	r2, [r7, #36]	; 0x24
 8008f04:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f06:	6a39      	ldr	r1, [r7, #32]
 8008f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f0a:	e841 2300 	strex	r3, r2, [r1]
 8008f0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1e5      	bne.n	8008ee2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008f16:	2300      	movs	r3, #0
 8008f18:	e000      	b.n	8008f1c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008f1a:	2302      	movs	r3, #2
  }
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3730      	adds	r7, #48	; 0x30
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	080096c5 	.word	0x080096c5
 8008f28:	08009761 	.word	0x08009761
 8008f2c:	0800977f 	.word	0x0800977f

08008f30 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b09a      	sub	sp, #104	; 0x68
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	330c      	adds	r3, #12
 8008f3e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f42:	e853 3f00 	ldrex	r3, [r3]
 8008f46:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f4e:	667b      	str	r3, [r7, #100]	; 0x64
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	330c      	adds	r3, #12
 8008f56:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008f58:	657a      	str	r2, [r7, #84]	; 0x54
 8008f5a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f60:	e841 2300 	strex	r3, r2, [r1]
 8008f64:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1e5      	bne.n	8008f38 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	3314      	adds	r3, #20
 8008f72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f76:	e853 3f00 	ldrex	r3, [r3]
 8008f7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7e:	f023 0301 	bic.w	r3, r3, #1
 8008f82:	663b      	str	r3, [r7, #96]	; 0x60
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	3314      	adds	r3, #20
 8008f8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f8c:	643a      	str	r2, [r7, #64]	; 0x40
 8008f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f94:	e841 2300 	strex	r3, r2, [r1]
 8008f98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1e5      	bne.n	8008f6c <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d119      	bne.n	8008fdc <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	330c      	adds	r3, #12
 8008fae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb0:	6a3b      	ldr	r3, [r7, #32]
 8008fb2:	e853 3f00 	ldrex	r3, [r3]
 8008fb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	f023 0310 	bic.w	r3, r3, #16
 8008fbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	330c      	adds	r3, #12
 8008fc6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008fc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008fca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fd0:	e841 2300 	strex	r3, r2, [r1]
 8008fd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1e5      	bne.n	8008fa8 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	695b      	ldr	r3, [r3, #20]
 8008fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fe6:	2b40      	cmp	r3, #64	; 0x40
 8008fe8:	d136      	bne.n	8009058 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3314      	adds	r3, #20
 8008ff0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	e853 3f00 	ldrex	r3, [r3]
 8008ff8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009000:	65bb      	str	r3, [r7, #88]	; 0x58
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	3314      	adds	r3, #20
 8009008:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800900a:	61ba      	str	r2, [r7, #24]
 800900c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900e:	6979      	ldr	r1, [r7, #20]
 8009010:	69ba      	ldr	r2, [r7, #24]
 8009012:	e841 2300 	strex	r3, r2, [r1]
 8009016:	613b      	str	r3, [r7, #16]
   return(result);
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1e5      	bne.n	8008fea <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009022:	2b00      	cmp	r3, #0
 8009024:	d018      	beq.n	8009058 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902a:	2200      	movs	r2, #0
 800902c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009032:	4618      	mov	r0, r3
 8009034:	f7fc fe08 	bl	8005c48 <HAL_DMA_Abort>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00c      	beq.n	8009058 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009042:	4618      	mov	r0, r3
 8009044:	f7fd f81c 	bl	8006080 <HAL_DMA_GetError>
 8009048:	4603      	mov	r3, r0
 800904a:	2b20      	cmp	r3, #32
 800904c:	d104      	bne.n	8009058 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2210      	movs	r2, #16
 8009052:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8009054:	2303      	movs	r3, #3
 8009056:	e00a      	b.n	800906e <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2220      	movs	r2, #32
 8009062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3768      	adds	r7, #104	; 0x68
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
	...

08009078 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b0ba      	sub	sp, #232	; 0xe8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	695b      	ldr	r3, [r3, #20]
 800909a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800909e:	2300      	movs	r3, #0
 80090a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80090a4:	2300      	movs	r3, #0
 80090a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80090aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ae:	f003 030f 	and.w	r3, r3, #15
 80090b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80090b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d10f      	bne.n	80090de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80090be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090c2:	f003 0320 	and.w	r3, r3, #32
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d009      	beq.n	80090de <HAL_UART_IRQHandler+0x66>
 80090ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090ce:	f003 0320 	and.w	r3, r3, #32
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d003      	beq.n	80090de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fce3 	bl	8009aa2 <UART_Receive_IT>
      return;
 80090dc:	e25b      	b.n	8009596 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80090de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f000 80e1 	beq.w	80092aa <HAL_UART_IRQHandler+0x232>
 80090e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090ec:	f003 0301 	and.w	r3, r3, #1
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d106      	bne.n	8009102 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80090f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f000 80d4 	beq.w	80092aa <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009106:	f003 0301 	and.w	r3, r3, #1
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00b      	beq.n	8009126 <HAL_UART_IRQHandler+0xae>
 800910e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009116:	2b00      	cmp	r3, #0
 8009118:	d005      	beq.n	8009126 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911e:	f043 0201 	orr.w	r2, r3, #1
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800912a:	f003 0304 	and.w	r3, r3, #4
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00b      	beq.n	800914a <HAL_UART_IRQHandler+0xd2>
 8009132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009136:	f003 0301 	and.w	r3, r3, #1
 800913a:	2b00      	cmp	r3, #0
 800913c:	d005      	beq.n	800914a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009142:	f043 0202 	orr.w	r2, r3, #2
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800914a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800914e:	f003 0302 	and.w	r3, r3, #2
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00b      	beq.n	800916e <HAL_UART_IRQHandler+0xf6>
 8009156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800915a:	f003 0301 	and.w	r3, r3, #1
 800915e:	2b00      	cmp	r3, #0
 8009160:	d005      	beq.n	800916e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009166:	f043 0204 	orr.w	r2, r3, #4
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800916e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009172:	f003 0308 	and.w	r3, r3, #8
 8009176:	2b00      	cmp	r3, #0
 8009178:	d011      	beq.n	800919e <HAL_UART_IRQHandler+0x126>
 800917a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800917e:	f003 0320 	and.w	r3, r3, #32
 8009182:	2b00      	cmp	r3, #0
 8009184:	d105      	bne.n	8009192 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800918a:	f003 0301 	and.w	r3, r3, #1
 800918e:	2b00      	cmp	r3, #0
 8009190:	d005      	beq.n	800919e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009196:	f043 0208 	orr.w	r2, r3, #8
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f000 81f2 	beq.w	800958c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80091a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091ac:	f003 0320 	and.w	r3, r3, #32
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d008      	beq.n	80091c6 <HAL_UART_IRQHandler+0x14e>
 80091b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091b8:	f003 0320 	and.w	r3, r3, #32
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d002      	beq.n	80091c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 fc6e 	bl	8009aa2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	695b      	ldr	r3, [r3, #20]
 80091cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091d0:	2b40      	cmp	r3, #64	; 0x40
 80091d2:	bf0c      	ite	eq
 80091d4:	2301      	moveq	r3, #1
 80091d6:	2300      	movne	r3, #0
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e2:	f003 0308 	and.w	r3, r3, #8
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d103      	bne.n	80091f2 <HAL_UART_IRQHandler+0x17a>
 80091ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d051      	beq.n	8009296 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fb74 	bl	80098e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009202:	2b40      	cmp	r3, #64	; 0x40
 8009204:	d142      	bne.n	800928c <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	3314      	adds	r3, #20
 800920c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009210:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009214:	e853 3f00 	ldrex	r3, [r3]
 8009218:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800921c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009220:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009224:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	3314      	adds	r3, #20
 800922e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009232:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009236:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800923e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009242:	e841 2300 	strex	r3, r2, [r1]
 8009246:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800924a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1d9      	bne.n	8009206 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009256:	2b00      	cmp	r3, #0
 8009258:	d013      	beq.n	8009282 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800925e:	4a7f      	ldr	r2, [pc, #508]	; (800945c <HAL_UART_IRQHandler+0x3e4>)
 8009260:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009266:	4618      	mov	r0, r3
 8009268:	f7fc fd5e 	bl	8005d28 <HAL_DMA_Abort_IT>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d019      	beq.n	80092a6 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800927c:	4610      	mov	r0, r2
 800927e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009280:	e011      	b.n	80092a6 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800928a:	e00c      	b.n	80092a6 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009294:	e007      	b.n	80092a6 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80092a4:	e172      	b.n	800958c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092a6:	bf00      	nop
    return;
 80092a8:	e170      	b.n	800958c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	f040 814c 	bne.w	800954c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80092b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092b8:	f003 0310 	and.w	r3, r3, #16
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 8145 	beq.w	800954c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80092c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092c6:	f003 0310 	and.w	r3, r3, #16
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	f000 813e 	beq.w	800954c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80092d0:	2300      	movs	r3, #0
 80092d2:	60bb      	str	r3, [r7, #8]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	60bb      	str	r3, [r7, #8]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	60bb      	str	r3, [r7, #8]
 80092e4:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	695b      	ldr	r3, [r3, #20]
 80092ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092f0:	2b40      	cmp	r3, #64	; 0x40
 80092f2:	f040 80b5 	bne.w	8009460 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009302:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009306:	2b00      	cmp	r3, #0
 8009308:	f000 8142 	beq.w	8009590 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009310:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009314:	429a      	cmp	r2, r3
 8009316:	f080 813b 	bcs.w	8009590 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009320:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009326:	69db      	ldr	r3, [r3, #28]
 8009328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800932c:	f000 8088 	beq.w	8009440 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	330c      	adds	r3, #12
 8009336:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800933e:	e853 3f00 	ldrex	r3, [r3]
 8009342:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009346:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800934a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800934e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	330c      	adds	r3, #12
 8009358:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800935c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009360:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009364:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009368:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800936c:	e841 2300 	strex	r3, r2, [r1]
 8009370:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009374:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1d9      	bne.n	8009330 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3314      	adds	r3, #20
 8009382:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009386:	e853 3f00 	ldrex	r3, [r3]
 800938a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800938c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800938e:	f023 0301 	bic.w	r3, r3, #1
 8009392:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	3314      	adds	r3, #20
 800939c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80093a0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80093a4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80093a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80093ac:	e841 2300 	strex	r3, r2, [r1]
 80093b0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80093b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1e1      	bne.n	800937c <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	3314      	adds	r3, #20
 80093be:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093c2:	e853 3f00 	ldrex	r3, [r3]
 80093c6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80093c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3314      	adds	r3, #20
 80093d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80093dc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80093de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80093e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80093e4:	e841 2300 	strex	r3, r2, [r1]
 80093e8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80093ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1e3      	bne.n	80093b8 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2220      	movs	r2, #32
 80093f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	330c      	adds	r3, #12
 8009404:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009408:	e853 3f00 	ldrex	r3, [r3]
 800940c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800940e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009410:	f023 0310 	bic.w	r3, r3, #16
 8009414:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	330c      	adds	r3, #12
 800941e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009422:	65ba      	str	r2, [r7, #88]	; 0x58
 8009424:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009426:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009428:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800942a:	e841 2300 	strex	r3, r2, [r1]
 800942e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1e3      	bne.n	80093fe <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943a:	4618      	mov	r0, r3
 800943c:	f7fc fc04 	bl	8005c48 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800944c:	b292      	uxth	r2, r2
 800944e:	1a8a      	subs	r2, r1, r2
 8009450:	b292      	uxth	r2, r2
 8009452:	4611      	mov	r1, r2
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009458:	e09a      	b.n	8009590 <HAL_UART_IRQHandler+0x518>
 800945a:	bf00      	nop
 800945c:	080099a7 	.word	0x080099a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009468:	b29b      	uxth	r3, r3
 800946a:	1ad3      	subs	r3, r2, r3
 800946c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009474:	b29b      	uxth	r3, r3
 8009476:	2b00      	cmp	r3, #0
 8009478:	f000 808c 	beq.w	8009594 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800947c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009480:	2b00      	cmp	r3, #0
 8009482:	f000 8087 	beq.w	8009594 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	330c      	adds	r3, #12
 800948c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009490:	e853 3f00 	ldrex	r3, [r3]
 8009494:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009498:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800949c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	330c      	adds	r3, #12
 80094a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80094aa:	647a      	str	r2, [r7, #68]	; 0x44
 80094ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094b2:	e841 2300 	strex	r3, r2, [r1]
 80094b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1e3      	bne.n	8009486 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3314      	adds	r3, #20
 80094c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c8:	e853 3f00 	ldrex	r3, [r3]
 80094cc:	623b      	str	r3, [r7, #32]
   return(result);
 80094ce:	6a3b      	ldr	r3, [r7, #32]
 80094d0:	f023 0301 	bic.w	r3, r3, #1
 80094d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	3314      	adds	r3, #20
 80094de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80094e2:	633a      	str	r2, [r7, #48]	; 0x30
 80094e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094ea:	e841 2300 	strex	r3, r2, [r1]
 80094ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1e3      	bne.n	80094be <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2220      	movs	r2, #32
 80094fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	330c      	adds	r3, #12
 800950a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	e853 3f00 	ldrex	r3, [r3]
 8009512:	60fb      	str	r3, [r7, #12]
   return(result);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f023 0310 	bic.w	r3, r3, #16
 800951a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	330c      	adds	r3, #12
 8009524:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009528:	61fa      	str	r2, [r7, #28]
 800952a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952c:	69b9      	ldr	r1, [r7, #24]
 800952e:	69fa      	ldr	r2, [r7, #28]
 8009530:	e841 2300 	strex	r3, r2, [r1]
 8009534:	617b      	str	r3, [r7, #20]
   return(result);
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d1e3      	bne.n	8009504 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009540:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8009544:	4611      	mov	r1, r2
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800954a:	e023      	b.n	8009594 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800954c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009554:	2b00      	cmp	r3, #0
 8009556:	d009      	beq.n	800956c <HAL_UART_IRQHandler+0x4f4>
 8009558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800955c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009560:	2b00      	cmp	r3, #0
 8009562:	d003      	beq.n	800956c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fa33 	bl	80099d0 <UART_Transmit_IT>
    return;
 800956a:	e014      	b.n	8009596 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800956c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009574:	2b00      	cmp	r3, #0
 8009576:	d00e      	beq.n	8009596 <HAL_UART_IRQHandler+0x51e>
 8009578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800957c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009580:	2b00      	cmp	r3, #0
 8009582:	d008      	beq.n	8009596 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 fa73 	bl	8009a70 <UART_EndTransmit_IT>
    return;
 800958a:	e004      	b.n	8009596 <HAL_UART_IRQHandler+0x51e>
    return;
 800958c:	bf00      	nop
 800958e:	e002      	b.n	8009596 <HAL_UART_IRQHandler+0x51e>
      return;
 8009590:	bf00      	nop
 8009592:	e000      	b.n	8009596 <HAL_UART_IRQHandler+0x51e>
      return;
 8009594:	bf00      	nop
  }
}
 8009596:	37e8      	adds	r7, #232	; 0xe8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80095cc:	bf00      	nop
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80095e0:	bf00      	nop
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80095f4:	bf00      	nop
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009608:	bf00      	nop
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800961c:	bf00      	nop
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009630:	bf00      	nop
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	460b      	mov	r3, r1
 8009646:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009648:	bf00      	nop
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a10      	ldr	r2, [pc, #64]	; (80096a0 <UART_InitCallbacksToDefault+0x4c>)
 8009660:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a0f      	ldr	r2, [pc, #60]	; (80096a4 <UART_InitCallbacksToDefault+0x50>)
 8009666:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a0f      	ldr	r2, [pc, #60]	; (80096a8 <UART_InitCallbacksToDefault+0x54>)
 800966c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a0e      	ldr	r2, [pc, #56]	; (80096ac <UART_InitCallbacksToDefault+0x58>)
 8009672:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a0e      	ldr	r2, [pc, #56]	; (80096b0 <UART_InitCallbacksToDefault+0x5c>)
 8009678:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a0d      	ldr	r2, [pc, #52]	; (80096b4 <UART_InitCallbacksToDefault+0x60>)
 800967e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a0d      	ldr	r2, [pc, #52]	; (80096b8 <UART_InitCallbacksToDefault+0x64>)
 8009684:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a0c      	ldr	r2, [pc, #48]	; (80096bc <UART_InitCallbacksToDefault+0x68>)
 800968a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a0c      	ldr	r2, [pc, #48]	; (80096c0 <UART_InitCallbacksToDefault+0x6c>)
 8009690:	669a      	str	r2, [r3, #104]	; 0x68

}
 8009692:	bf00      	nop
 8009694:	370c      	adds	r7, #12
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	080095b1 	.word	0x080095b1
 80096a4:	0800959d 	.word	0x0800959d
 80096a8:	080095d9 	.word	0x080095d9
 80096ac:	080095c5 	.word	0x080095c5
 80096b0:	080095ed 	.word	0x080095ed
 80096b4:	08009601 	.word	0x08009601
 80096b8:	08009615 	.word	0x08009615
 80096bc:	08009629 	.word	0x08009629
 80096c0:	0800963d 	.word	0x0800963d

080096c4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b090      	sub	sp, #64	; 0x40
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d137      	bne.n	8009750 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80096e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096e2:	2200      	movs	r2, #0
 80096e4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80096e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	3314      	adds	r3, #20
 80096ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f0:	e853 3f00 	ldrex	r3, [r3]
 80096f4:	623b      	str	r3, [r7, #32]
   return(result);
 80096f6:	6a3b      	ldr	r3, [r7, #32]
 80096f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80096fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	3314      	adds	r3, #20
 8009704:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009706:	633a      	str	r2, [r7, #48]	; 0x30
 8009708:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800970c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800970e:	e841 2300 	strex	r3, r2, [r1]
 8009712:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009716:	2b00      	cmp	r3, #0
 8009718:	d1e5      	bne.n	80096e6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800971a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	330c      	adds	r3, #12
 8009720:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	e853 3f00 	ldrex	r3, [r3]
 8009728:	60fb      	str	r3, [r7, #12]
   return(result);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009730:	637b      	str	r3, [r7, #52]	; 0x34
 8009732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	330c      	adds	r3, #12
 8009738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800973a:	61fa      	str	r2, [r7, #28]
 800973c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973e:	69b9      	ldr	r1, [r7, #24]
 8009740:	69fa      	ldr	r2, [r7, #28]
 8009742:	e841 2300 	strex	r3, r2, [r1]
 8009746:	617b      	str	r3, [r7, #20]
   return(result);
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1e5      	bne.n	800971a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800974e:	e003      	b.n	8009758 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8009750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009754:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009756:	4798      	blx	r3
}
 8009758:	bf00      	nop
 800975a:	3740      	adds	r7, #64	; 0x40
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009776:	bf00      	nop
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b084      	sub	sp, #16
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009786:	2300      	movs	r3, #0
 8009788:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	695b      	ldr	r3, [r3, #20]
 8009796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800979a:	2b80      	cmp	r3, #128	; 0x80
 800979c:	bf0c      	ite	eq
 800979e:	2301      	moveq	r3, #1
 80097a0:	2300      	movne	r3, #0
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	2b21      	cmp	r3, #33	; 0x21
 80097b0:	d108      	bne.n	80097c4 <UART_DMAError+0x46>
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d005      	beq.n	80097c4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	2200      	movs	r2, #0
 80097bc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80097be:	68b8      	ldr	r0, [r7, #8]
 80097c0:	f000 f866 	bl	8009890 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	695b      	ldr	r3, [r3, #20]
 80097ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ce:	2b40      	cmp	r3, #64	; 0x40
 80097d0:	bf0c      	ite	eq
 80097d2:	2301      	moveq	r3, #1
 80097d4:	2300      	movne	r3, #0
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	2b22      	cmp	r3, #34	; 0x22
 80097e4:	d108      	bne.n	80097f8 <UART_DMAError+0x7a>
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d005      	beq.n	80097f8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	2200      	movs	r2, #0
 80097f0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80097f2:	68b8      	ldr	r0, [r7, #8]
 80097f4:	f000 f874 	bl	80098e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097fc:	f043 0210 	orr.w	r2, r3, #16
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009808:	68b8      	ldr	r0, [r7, #8]
 800980a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800980c:	bf00      	nop
 800980e:	3710      	adds	r7, #16
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	4613      	mov	r3, r2
 8009820:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	68ba      	ldr	r2, [r7, #8]
 8009826:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	88fa      	ldrh	r2, [r7, #6]
 800982c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	88fa      	ldrh	r2, [r7, #6]
 8009832:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2200      	movs	r2, #0
 8009838:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2222      	movs	r2, #34	; 0x22
 800983e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2200      	movs	r2, #0
 8009846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	691b      	ldr	r3, [r3, #16]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d007      	beq.n	8009862 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	68da      	ldr	r2, [r3, #12]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009860:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	695a      	ldr	r2, [r3, #20]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f042 0201 	orr.w	r2, r2, #1
 8009870:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	68da      	ldr	r2, [r3, #12]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f042 0220 	orr.w	r2, r2, #32
 8009880:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	3714      	adds	r7, #20
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009890:	b480      	push	{r7}
 8009892:	b089      	sub	sp, #36	; 0x24
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	330c      	adds	r3, #12
 800989e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	e853 3f00 	ldrex	r3, [r3]
 80098a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80098ae:	61fb      	str	r3, [r7, #28]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	330c      	adds	r3, #12
 80098b6:	69fa      	ldr	r2, [r7, #28]
 80098b8:	61ba      	str	r2, [r7, #24]
 80098ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098bc:	6979      	ldr	r1, [r7, #20]
 80098be:	69ba      	ldr	r2, [r7, #24]
 80098c0:	e841 2300 	strex	r3, r2, [r1]
 80098c4:	613b      	str	r3, [r7, #16]
   return(result);
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1e5      	bne.n	8009898 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2220      	movs	r2, #32
 80098d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80098d4:	bf00      	nop
 80098d6:	3724      	adds	r7, #36	; 0x24
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b095      	sub	sp, #84	; 0x54
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	330c      	adds	r3, #12
 80098ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098f2:	e853 3f00 	ldrex	r3, [r3]
 80098f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80098f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	330c      	adds	r3, #12
 8009906:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009908:	643a      	str	r2, [r7, #64]	; 0x40
 800990a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800990e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009910:	e841 2300 	strex	r3, r2, [r1]
 8009914:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009918:	2b00      	cmp	r3, #0
 800991a:	d1e5      	bne.n	80098e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	3314      	adds	r3, #20
 8009922:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009924:	6a3b      	ldr	r3, [r7, #32]
 8009926:	e853 3f00 	ldrex	r3, [r3]
 800992a:	61fb      	str	r3, [r7, #28]
   return(result);
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	f023 0301 	bic.w	r3, r3, #1
 8009932:	64bb      	str	r3, [r7, #72]	; 0x48
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	3314      	adds	r3, #20
 800993a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800993c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800993e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009940:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009944:	e841 2300 	strex	r3, r2, [r1]
 8009948:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800994a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994c:	2b00      	cmp	r3, #0
 800994e:	d1e5      	bne.n	800991c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009954:	2b01      	cmp	r3, #1
 8009956:	d119      	bne.n	800998c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	330c      	adds	r3, #12
 800995e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	e853 3f00 	ldrex	r3, [r3]
 8009966:	60bb      	str	r3, [r7, #8]
   return(result);
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	f023 0310 	bic.w	r3, r3, #16
 800996e:	647b      	str	r3, [r7, #68]	; 0x44
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	330c      	adds	r3, #12
 8009976:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009978:	61ba      	str	r2, [r7, #24]
 800997a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997c:	6979      	ldr	r1, [r7, #20]
 800997e:	69ba      	ldr	r2, [r7, #24]
 8009980:	e841 2300 	strex	r3, r2, [r1]
 8009984:	613b      	str	r3, [r7, #16]
   return(result);
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d1e5      	bne.n	8009958 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2220      	movs	r2, #32
 8009990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	631a      	str	r2, [r3, #48]	; 0x30
}
 800999a:	bf00      	nop
 800999c:	3754      	adds	r7, #84	; 0x54
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr

080099a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b084      	sub	sp, #16
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2200      	movs	r2, #0
 80099b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2200      	movs	r2, #0
 80099be:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099c4:	68f8      	ldr	r0, [r7, #12]
 80099c6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099c8:	bf00      	nop
 80099ca:	3710      	adds	r7, #16
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	2b21      	cmp	r3, #33	; 0x21
 80099e2:	d13e      	bne.n	8009a62 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099ec:	d114      	bne.n	8009a18 <UART_Transmit_IT+0x48>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d110      	bne.n	8009a18 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a1b      	ldr	r3, [r3, #32]
 80099fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	881b      	ldrh	r3, [r3, #0]
 8009a00:	461a      	mov	r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a0a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6a1b      	ldr	r3, [r3, #32]
 8009a10:	1c9a      	adds	r2, r3, #2
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	621a      	str	r2, [r3, #32]
 8009a16:	e008      	b.n	8009a2a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a1b      	ldr	r3, [r3, #32]
 8009a1c:	1c59      	adds	r1, r3, #1
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	6211      	str	r1, [r2, #32]
 8009a22:	781a      	ldrb	r2, [r3, #0]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	3b01      	subs	r3, #1
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	4619      	mov	r1, r3
 8009a38:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d10f      	bne.n	8009a5e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	68da      	ldr	r2, [r3, #12]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a4c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	68da      	ldr	r2, [r3, #12]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a5c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	e000      	b.n	8009a64 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009a62:	2302      	movs	r3, #2
  }
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3714      	adds	r7, #20
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	68da      	ldr	r2, [r3, #12]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a86:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2220      	movs	r2, #32
 8009a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b08c      	sub	sp, #48	; 0x30
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	2b22      	cmp	r3, #34	; 0x22
 8009ab4:	f040 80ad 	bne.w	8009c12 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ac0:	d117      	bne.n	8009af2 <UART_Receive_IT+0x50>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d113      	bne.n	8009af2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009aca:	2300      	movs	r3, #0
 8009acc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ae0:	b29a      	uxth	r2, r3
 8009ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aea:	1c9a      	adds	r2, r3, #2
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	629a      	str	r2, [r3, #40]	; 0x28
 8009af0:	e026      	b.n	8009b40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009af8:	2300      	movs	r3, #0
 8009afa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b04:	d007      	beq.n	8009b16 <UART_Receive_IT+0x74>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d10a      	bne.n	8009b24 <UART_Receive_IT+0x82>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d106      	bne.n	8009b24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	b2da      	uxtb	r2, r3
 8009b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b20:	701a      	strb	r2, [r3, #0]
 8009b22:	e008      	b.n	8009b36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b30:	b2da      	uxtb	r2, r3
 8009b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b3a:	1c5a      	adds	r2, r3, #1
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	3b01      	subs	r3, #1
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d15c      	bne.n	8009c0e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68da      	ldr	r2, [r3, #12]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f022 0220 	bic.w	r2, r2, #32
 8009b62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68da      	ldr	r2, [r3, #12]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	695a      	ldr	r2, [r3, #20]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f022 0201 	bic.w	r2, r2, #1
 8009b82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2220      	movs	r2, #32
 8009b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d136      	bne.n	8009c02 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	330c      	adds	r3, #12
 8009ba0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	e853 3f00 	ldrex	r3, [r3]
 8009ba8:	613b      	str	r3, [r7, #16]
   return(result);
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	f023 0310 	bic.w	r3, r3, #16
 8009bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	330c      	adds	r3, #12
 8009bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bba:	623a      	str	r2, [r7, #32]
 8009bbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bbe:	69f9      	ldr	r1, [r7, #28]
 8009bc0:	6a3a      	ldr	r2, [r7, #32]
 8009bc2:	e841 2300 	strex	r3, r2, [r1]
 8009bc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1e5      	bne.n	8009b9a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f003 0310 	and.w	r3, r3, #16
 8009bd8:	2b10      	cmp	r3, #16
 8009bda:	d10a      	bne.n	8009bf2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009bdc:	2300      	movs	r3, #0
 8009bde:	60fb      	str	r3, [r7, #12]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	60fb      	str	r3, [r7, #12]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	60fb      	str	r3, [r7, #12]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8009bfa:	4611      	mov	r1, r2
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	4798      	blx	r3
 8009c00:	e003      	b.n	8009c0a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e002      	b.n	8009c14 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	e000      	b.n	8009c14 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8009c12:	2302      	movs	r3, #2
  }
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3730      	adds	r7, #48	; 0x30
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c20:	b0c0      	sub	sp, #256	; 0x100
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	691b      	ldr	r3, [r3, #16]
 8009c30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c38:	68d9      	ldr	r1, [r3, #12]
 8009c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	ea40 0301 	orr.w	r3, r0, r1
 8009c44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c4a:	689a      	ldr	r2, [r3, #8]
 8009c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c50:	691b      	ldr	r3, [r3, #16]
 8009c52:	431a      	orrs	r2, r3
 8009c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c58:	695b      	ldr	r3, [r3, #20]
 8009c5a:	431a      	orrs	r2, r3
 8009c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c60:	69db      	ldr	r3, [r3, #28]
 8009c62:	4313      	orrs	r3, r2
 8009c64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009c74:	f021 010c 	bic.w	r1, r1, #12
 8009c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009c82:	430b      	orrs	r3, r1
 8009c84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	695b      	ldr	r3, [r3, #20]
 8009c8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c96:	6999      	ldr	r1, [r3, #24]
 8009c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	ea40 0301 	orr.w	r3, r0, r1
 8009ca2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	4b8f      	ldr	r3, [pc, #572]	; (8009ee8 <UART_SetConfig+0x2cc>)
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d005      	beq.n	8009cbc <UART_SetConfig+0xa0>
 8009cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	4b8d      	ldr	r3, [pc, #564]	; (8009eec <UART_SetConfig+0x2d0>)
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d104      	bne.n	8009cc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009cbc:	f7fd fa6e 	bl	800719c <HAL_RCC_GetPCLK2Freq>
 8009cc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009cc4:	e003      	b.n	8009cce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009cc6:	f7fd fa55 	bl	8007174 <HAL_RCC_GetPCLK1Freq>
 8009cca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cd2:	69db      	ldr	r3, [r3, #28]
 8009cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cd8:	f040 810c 	bne.w	8009ef4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009ce6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009cea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009cee:	4622      	mov	r2, r4
 8009cf0:	462b      	mov	r3, r5
 8009cf2:	1891      	adds	r1, r2, r2
 8009cf4:	65b9      	str	r1, [r7, #88]	; 0x58
 8009cf6:	415b      	adcs	r3, r3
 8009cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009cfe:	4621      	mov	r1, r4
 8009d00:	eb12 0801 	adds.w	r8, r2, r1
 8009d04:	4629      	mov	r1, r5
 8009d06:	eb43 0901 	adc.w	r9, r3, r1
 8009d0a:	f04f 0200 	mov.w	r2, #0
 8009d0e:	f04f 0300 	mov.w	r3, #0
 8009d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009d1e:	4690      	mov	r8, r2
 8009d20:	4699      	mov	r9, r3
 8009d22:	4623      	mov	r3, r4
 8009d24:	eb18 0303 	adds.w	r3, r8, r3
 8009d28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009d2c:	462b      	mov	r3, r5
 8009d2e:	eb49 0303 	adc.w	r3, r9, r3
 8009d32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009d42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009d46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	18db      	adds	r3, r3, r3
 8009d4e:	653b      	str	r3, [r7, #80]	; 0x50
 8009d50:	4613      	mov	r3, r2
 8009d52:	eb42 0303 	adc.w	r3, r2, r3
 8009d56:	657b      	str	r3, [r7, #84]	; 0x54
 8009d58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009d5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009d60:	f7f6 ff1e 	bl	8000ba0 <__aeabi_uldivmod>
 8009d64:	4602      	mov	r2, r0
 8009d66:	460b      	mov	r3, r1
 8009d68:	4b61      	ldr	r3, [pc, #388]	; (8009ef0 <UART_SetConfig+0x2d4>)
 8009d6a:	fba3 2302 	umull	r2, r3, r3, r2
 8009d6e:	095b      	lsrs	r3, r3, #5
 8009d70:	011c      	lsls	r4, r3, #4
 8009d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d76:	2200      	movs	r2, #0
 8009d78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009d80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009d84:	4642      	mov	r2, r8
 8009d86:	464b      	mov	r3, r9
 8009d88:	1891      	adds	r1, r2, r2
 8009d8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8009d8c:	415b      	adcs	r3, r3
 8009d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009d94:	4641      	mov	r1, r8
 8009d96:	eb12 0a01 	adds.w	sl, r2, r1
 8009d9a:	4649      	mov	r1, r9
 8009d9c:	eb43 0b01 	adc.w	fp, r3, r1
 8009da0:	f04f 0200 	mov.w	r2, #0
 8009da4:	f04f 0300 	mov.w	r3, #0
 8009da8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009dac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009db0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009db4:	4692      	mov	sl, r2
 8009db6:	469b      	mov	fp, r3
 8009db8:	4643      	mov	r3, r8
 8009dba:	eb1a 0303 	adds.w	r3, sl, r3
 8009dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009dc2:	464b      	mov	r3, r9
 8009dc4:	eb4b 0303 	adc.w	r3, fp, r3
 8009dc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009dd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009ddc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009de0:	460b      	mov	r3, r1
 8009de2:	18db      	adds	r3, r3, r3
 8009de4:	643b      	str	r3, [r7, #64]	; 0x40
 8009de6:	4613      	mov	r3, r2
 8009de8:	eb42 0303 	adc.w	r3, r2, r3
 8009dec:	647b      	str	r3, [r7, #68]	; 0x44
 8009dee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009df2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009df6:	f7f6 fed3 	bl	8000ba0 <__aeabi_uldivmod>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	4611      	mov	r1, r2
 8009e00:	4b3b      	ldr	r3, [pc, #236]	; (8009ef0 <UART_SetConfig+0x2d4>)
 8009e02:	fba3 2301 	umull	r2, r3, r3, r1
 8009e06:	095b      	lsrs	r3, r3, #5
 8009e08:	2264      	movs	r2, #100	; 0x64
 8009e0a:	fb02 f303 	mul.w	r3, r2, r3
 8009e0e:	1acb      	subs	r3, r1, r3
 8009e10:	00db      	lsls	r3, r3, #3
 8009e12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009e16:	4b36      	ldr	r3, [pc, #216]	; (8009ef0 <UART_SetConfig+0x2d4>)
 8009e18:	fba3 2302 	umull	r2, r3, r3, r2
 8009e1c:	095b      	lsrs	r3, r3, #5
 8009e1e:	005b      	lsls	r3, r3, #1
 8009e20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009e24:	441c      	add	r4, r3
 8009e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009e34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009e38:	4642      	mov	r2, r8
 8009e3a:	464b      	mov	r3, r9
 8009e3c:	1891      	adds	r1, r2, r2
 8009e3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009e40:	415b      	adcs	r3, r3
 8009e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009e48:	4641      	mov	r1, r8
 8009e4a:	1851      	adds	r1, r2, r1
 8009e4c:	6339      	str	r1, [r7, #48]	; 0x30
 8009e4e:	4649      	mov	r1, r9
 8009e50:	414b      	adcs	r3, r1
 8009e52:	637b      	str	r3, [r7, #52]	; 0x34
 8009e54:	f04f 0200 	mov.w	r2, #0
 8009e58:	f04f 0300 	mov.w	r3, #0
 8009e5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009e60:	4659      	mov	r1, fp
 8009e62:	00cb      	lsls	r3, r1, #3
 8009e64:	4651      	mov	r1, sl
 8009e66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e6a:	4651      	mov	r1, sl
 8009e6c:	00ca      	lsls	r2, r1, #3
 8009e6e:	4610      	mov	r0, r2
 8009e70:	4619      	mov	r1, r3
 8009e72:	4603      	mov	r3, r0
 8009e74:	4642      	mov	r2, r8
 8009e76:	189b      	adds	r3, r3, r2
 8009e78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e7c:	464b      	mov	r3, r9
 8009e7e:	460a      	mov	r2, r1
 8009e80:	eb42 0303 	adc.w	r3, r2, r3
 8009e84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009e94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009e98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	18db      	adds	r3, r3, r3
 8009ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ea2:	4613      	mov	r3, r2
 8009ea4:	eb42 0303 	adc.w	r3, r2, r3
 8009ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009eaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009eae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009eb2:	f7f6 fe75 	bl	8000ba0 <__aeabi_uldivmod>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	460b      	mov	r3, r1
 8009eba:	4b0d      	ldr	r3, [pc, #52]	; (8009ef0 <UART_SetConfig+0x2d4>)
 8009ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8009ec0:	095b      	lsrs	r3, r3, #5
 8009ec2:	2164      	movs	r1, #100	; 0x64
 8009ec4:	fb01 f303 	mul.w	r3, r1, r3
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	00db      	lsls	r3, r3, #3
 8009ecc:	3332      	adds	r3, #50	; 0x32
 8009ece:	4a08      	ldr	r2, [pc, #32]	; (8009ef0 <UART_SetConfig+0x2d4>)
 8009ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ed4:	095b      	lsrs	r3, r3, #5
 8009ed6:	f003 0207 	and.w	r2, r3, #7
 8009eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4422      	add	r2, r4
 8009ee2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009ee4:	e105      	b.n	800a0f2 <UART_SetConfig+0x4d6>
 8009ee6:	bf00      	nop
 8009ee8:	40011000 	.word	0x40011000
 8009eec:	40011400 	.word	0x40011400
 8009ef0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009efe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009f02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009f06:	4642      	mov	r2, r8
 8009f08:	464b      	mov	r3, r9
 8009f0a:	1891      	adds	r1, r2, r2
 8009f0c:	6239      	str	r1, [r7, #32]
 8009f0e:	415b      	adcs	r3, r3
 8009f10:	627b      	str	r3, [r7, #36]	; 0x24
 8009f12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009f16:	4641      	mov	r1, r8
 8009f18:	1854      	adds	r4, r2, r1
 8009f1a:	4649      	mov	r1, r9
 8009f1c:	eb43 0501 	adc.w	r5, r3, r1
 8009f20:	f04f 0200 	mov.w	r2, #0
 8009f24:	f04f 0300 	mov.w	r3, #0
 8009f28:	00eb      	lsls	r3, r5, #3
 8009f2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f2e:	00e2      	lsls	r2, r4, #3
 8009f30:	4614      	mov	r4, r2
 8009f32:	461d      	mov	r5, r3
 8009f34:	4643      	mov	r3, r8
 8009f36:	18e3      	adds	r3, r4, r3
 8009f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009f3c:	464b      	mov	r3, r9
 8009f3e:	eb45 0303 	adc.w	r3, r5, r3
 8009f42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009f52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009f56:	f04f 0200 	mov.w	r2, #0
 8009f5a:	f04f 0300 	mov.w	r3, #0
 8009f5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009f62:	4629      	mov	r1, r5
 8009f64:	008b      	lsls	r3, r1, #2
 8009f66:	4621      	mov	r1, r4
 8009f68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f6c:	4621      	mov	r1, r4
 8009f6e:	008a      	lsls	r2, r1, #2
 8009f70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009f74:	f7f6 fe14 	bl	8000ba0 <__aeabi_uldivmod>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	4b60      	ldr	r3, [pc, #384]	; (800a100 <UART_SetConfig+0x4e4>)
 8009f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8009f82:	095b      	lsrs	r3, r3, #5
 8009f84:	011c      	lsls	r4, r3, #4
 8009f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009f90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009f94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009f98:	4642      	mov	r2, r8
 8009f9a:	464b      	mov	r3, r9
 8009f9c:	1891      	adds	r1, r2, r2
 8009f9e:	61b9      	str	r1, [r7, #24]
 8009fa0:	415b      	adcs	r3, r3
 8009fa2:	61fb      	str	r3, [r7, #28]
 8009fa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009fa8:	4641      	mov	r1, r8
 8009faa:	1851      	adds	r1, r2, r1
 8009fac:	6139      	str	r1, [r7, #16]
 8009fae:	4649      	mov	r1, r9
 8009fb0:	414b      	adcs	r3, r1
 8009fb2:	617b      	str	r3, [r7, #20]
 8009fb4:	f04f 0200 	mov.w	r2, #0
 8009fb8:	f04f 0300 	mov.w	r3, #0
 8009fbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009fc0:	4659      	mov	r1, fp
 8009fc2:	00cb      	lsls	r3, r1, #3
 8009fc4:	4651      	mov	r1, sl
 8009fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009fca:	4651      	mov	r1, sl
 8009fcc:	00ca      	lsls	r2, r1, #3
 8009fce:	4610      	mov	r0, r2
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	4642      	mov	r2, r8
 8009fd6:	189b      	adds	r3, r3, r2
 8009fd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009fdc:	464b      	mov	r3, r9
 8009fde:	460a      	mov	r2, r1
 8009fe0:	eb42 0303 	adc.w	r3, r2, r3
 8009fe4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	67bb      	str	r3, [r7, #120]	; 0x78
 8009ff2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009ff4:	f04f 0200 	mov.w	r2, #0
 8009ff8:	f04f 0300 	mov.w	r3, #0
 8009ffc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a000:	4649      	mov	r1, r9
 800a002:	008b      	lsls	r3, r1, #2
 800a004:	4641      	mov	r1, r8
 800a006:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a00a:	4641      	mov	r1, r8
 800a00c:	008a      	lsls	r2, r1, #2
 800a00e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a012:	f7f6 fdc5 	bl	8000ba0 <__aeabi_uldivmod>
 800a016:	4602      	mov	r2, r0
 800a018:	460b      	mov	r3, r1
 800a01a:	4b39      	ldr	r3, [pc, #228]	; (800a100 <UART_SetConfig+0x4e4>)
 800a01c:	fba3 1302 	umull	r1, r3, r3, r2
 800a020:	095b      	lsrs	r3, r3, #5
 800a022:	2164      	movs	r1, #100	; 0x64
 800a024:	fb01 f303 	mul.w	r3, r1, r3
 800a028:	1ad3      	subs	r3, r2, r3
 800a02a:	011b      	lsls	r3, r3, #4
 800a02c:	3332      	adds	r3, #50	; 0x32
 800a02e:	4a34      	ldr	r2, [pc, #208]	; (800a100 <UART_SetConfig+0x4e4>)
 800a030:	fba2 2303 	umull	r2, r3, r2, r3
 800a034:	095b      	lsrs	r3, r3, #5
 800a036:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a03a:	441c      	add	r4, r3
 800a03c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a040:	2200      	movs	r2, #0
 800a042:	673b      	str	r3, [r7, #112]	; 0x70
 800a044:	677a      	str	r2, [r7, #116]	; 0x74
 800a046:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a04a:	4642      	mov	r2, r8
 800a04c:	464b      	mov	r3, r9
 800a04e:	1891      	adds	r1, r2, r2
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	415b      	adcs	r3, r3
 800a054:	60fb      	str	r3, [r7, #12]
 800a056:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a05a:	4641      	mov	r1, r8
 800a05c:	1851      	adds	r1, r2, r1
 800a05e:	6039      	str	r1, [r7, #0]
 800a060:	4649      	mov	r1, r9
 800a062:	414b      	adcs	r3, r1
 800a064:	607b      	str	r3, [r7, #4]
 800a066:	f04f 0200 	mov.w	r2, #0
 800a06a:	f04f 0300 	mov.w	r3, #0
 800a06e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a072:	4659      	mov	r1, fp
 800a074:	00cb      	lsls	r3, r1, #3
 800a076:	4651      	mov	r1, sl
 800a078:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a07c:	4651      	mov	r1, sl
 800a07e:	00ca      	lsls	r2, r1, #3
 800a080:	4610      	mov	r0, r2
 800a082:	4619      	mov	r1, r3
 800a084:	4603      	mov	r3, r0
 800a086:	4642      	mov	r2, r8
 800a088:	189b      	adds	r3, r3, r2
 800a08a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a08c:	464b      	mov	r3, r9
 800a08e:	460a      	mov	r2, r1
 800a090:	eb42 0303 	adc.w	r3, r2, r3
 800a094:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	663b      	str	r3, [r7, #96]	; 0x60
 800a0a0:	667a      	str	r2, [r7, #100]	; 0x64
 800a0a2:	f04f 0200 	mov.w	r2, #0
 800a0a6:	f04f 0300 	mov.w	r3, #0
 800a0aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a0ae:	4649      	mov	r1, r9
 800a0b0:	008b      	lsls	r3, r1, #2
 800a0b2:	4641      	mov	r1, r8
 800a0b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0b8:	4641      	mov	r1, r8
 800a0ba:	008a      	lsls	r2, r1, #2
 800a0bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a0c0:	f7f6 fd6e 	bl	8000ba0 <__aeabi_uldivmod>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	4b0d      	ldr	r3, [pc, #52]	; (800a100 <UART_SetConfig+0x4e4>)
 800a0ca:	fba3 1302 	umull	r1, r3, r3, r2
 800a0ce:	095b      	lsrs	r3, r3, #5
 800a0d0:	2164      	movs	r1, #100	; 0x64
 800a0d2:	fb01 f303 	mul.w	r3, r1, r3
 800a0d6:	1ad3      	subs	r3, r2, r3
 800a0d8:	011b      	lsls	r3, r3, #4
 800a0da:	3332      	adds	r3, #50	; 0x32
 800a0dc:	4a08      	ldr	r2, [pc, #32]	; (800a100 <UART_SetConfig+0x4e4>)
 800a0de:	fba2 2303 	umull	r2, r3, r2, r3
 800a0e2:	095b      	lsrs	r3, r3, #5
 800a0e4:	f003 020f 	and.w	r2, r3, #15
 800a0e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4422      	add	r2, r4
 800a0f0:	609a      	str	r2, [r3, #8]
}
 800a0f2:	bf00      	nop
 800a0f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0fe:	bf00      	nop
 800a100:	51eb851f 	.word	0x51eb851f

0800a104 <calloc>:
 800a104:	4b02      	ldr	r3, [pc, #8]	; (800a110 <calloc+0xc>)
 800a106:	460a      	mov	r2, r1
 800a108:	4601      	mov	r1, r0
 800a10a:	6818      	ldr	r0, [r3, #0]
 800a10c:	f000 b852 	b.w	800a1b4 <_calloc_r>
 800a110:	2000036c 	.word	0x2000036c

0800a114 <__errno>:
 800a114:	4b01      	ldr	r3, [pc, #4]	; (800a11c <__errno+0x8>)
 800a116:	6818      	ldr	r0, [r3, #0]
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	2000036c 	.word	0x2000036c

0800a120 <__libc_init_array>:
 800a120:	b570      	push	{r4, r5, r6, lr}
 800a122:	4d0d      	ldr	r5, [pc, #52]	; (800a158 <__libc_init_array+0x38>)
 800a124:	4c0d      	ldr	r4, [pc, #52]	; (800a15c <__libc_init_array+0x3c>)
 800a126:	1b64      	subs	r4, r4, r5
 800a128:	10a4      	asrs	r4, r4, #2
 800a12a:	2600      	movs	r6, #0
 800a12c:	42a6      	cmp	r6, r4
 800a12e:	d109      	bne.n	800a144 <__libc_init_array+0x24>
 800a130:	4d0b      	ldr	r5, [pc, #44]	; (800a160 <__libc_init_array+0x40>)
 800a132:	4c0c      	ldr	r4, [pc, #48]	; (800a164 <__libc_init_array+0x44>)
 800a134:	f002 fb4a 	bl	800c7cc <_init>
 800a138:	1b64      	subs	r4, r4, r5
 800a13a:	10a4      	asrs	r4, r4, #2
 800a13c:	2600      	movs	r6, #0
 800a13e:	42a6      	cmp	r6, r4
 800a140:	d105      	bne.n	800a14e <__libc_init_array+0x2e>
 800a142:	bd70      	pop	{r4, r5, r6, pc}
 800a144:	f855 3b04 	ldr.w	r3, [r5], #4
 800a148:	4798      	blx	r3
 800a14a:	3601      	adds	r6, #1
 800a14c:	e7ee      	b.n	800a12c <__libc_init_array+0xc>
 800a14e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a152:	4798      	blx	r3
 800a154:	3601      	adds	r6, #1
 800a156:	e7f2      	b.n	800a13e <__libc_init_array+0x1e>
 800a158:	0800ca20 	.word	0x0800ca20
 800a15c:	0800ca20 	.word	0x0800ca20
 800a160:	0800ca20 	.word	0x0800ca20
 800a164:	0800ca24 	.word	0x0800ca24

0800a168 <malloc>:
 800a168:	4b02      	ldr	r3, [pc, #8]	; (800a174 <malloc+0xc>)
 800a16a:	4601      	mov	r1, r0
 800a16c:	6818      	ldr	r0, [r3, #0]
 800a16e:	f000 b8a3 	b.w	800a2b8 <_malloc_r>
 800a172:	bf00      	nop
 800a174:	2000036c 	.word	0x2000036c

0800a178 <free>:
 800a178:	4b02      	ldr	r3, [pc, #8]	; (800a184 <free+0xc>)
 800a17a:	4601      	mov	r1, r0
 800a17c:	6818      	ldr	r0, [r3, #0]
 800a17e:	f000 b82f 	b.w	800a1e0 <_free_r>
 800a182:	bf00      	nop
 800a184:	2000036c 	.word	0x2000036c

0800a188 <memcpy>:
 800a188:	440a      	add	r2, r1
 800a18a:	4291      	cmp	r1, r2
 800a18c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a190:	d100      	bne.n	800a194 <memcpy+0xc>
 800a192:	4770      	bx	lr
 800a194:	b510      	push	{r4, lr}
 800a196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a19a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a19e:	4291      	cmp	r1, r2
 800a1a0:	d1f9      	bne.n	800a196 <memcpy+0xe>
 800a1a2:	bd10      	pop	{r4, pc}

0800a1a4 <memset>:
 800a1a4:	4402      	add	r2, r0
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d100      	bne.n	800a1ae <memset+0xa>
 800a1ac:	4770      	bx	lr
 800a1ae:	f803 1b01 	strb.w	r1, [r3], #1
 800a1b2:	e7f9      	b.n	800a1a8 <memset+0x4>

0800a1b4 <_calloc_r>:
 800a1b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1b6:	fba1 2402 	umull	r2, r4, r1, r2
 800a1ba:	b94c      	cbnz	r4, 800a1d0 <_calloc_r+0x1c>
 800a1bc:	4611      	mov	r1, r2
 800a1be:	9201      	str	r2, [sp, #4]
 800a1c0:	f000 f87a 	bl	800a2b8 <_malloc_r>
 800a1c4:	9a01      	ldr	r2, [sp, #4]
 800a1c6:	4605      	mov	r5, r0
 800a1c8:	b930      	cbnz	r0, 800a1d8 <_calloc_r+0x24>
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	b003      	add	sp, #12
 800a1ce:	bd30      	pop	{r4, r5, pc}
 800a1d0:	220c      	movs	r2, #12
 800a1d2:	6002      	str	r2, [r0, #0]
 800a1d4:	2500      	movs	r5, #0
 800a1d6:	e7f8      	b.n	800a1ca <_calloc_r+0x16>
 800a1d8:	4621      	mov	r1, r4
 800a1da:	f7ff ffe3 	bl	800a1a4 <memset>
 800a1de:	e7f4      	b.n	800a1ca <_calloc_r+0x16>

0800a1e0 <_free_r>:
 800a1e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1e2:	2900      	cmp	r1, #0
 800a1e4:	d044      	beq.n	800a270 <_free_r+0x90>
 800a1e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1ea:	9001      	str	r0, [sp, #4]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	f1a1 0404 	sub.w	r4, r1, #4
 800a1f2:	bfb8      	it	lt
 800a1f4:	18e4      	addlt	r4, r4, r3
 800a1f6:	f000 f8e3 	bl	800a3c0 <__malloc_lock>
 800a1fa:	4a1e      	ldr	r2, [pc, #120]	; (800a274 <_free_r+0x94>)
 800a1fc:	9801      	ldr	r0, [sp, #4]
 800a1fe:	6813      	ldr	r3, [r2, #0]
 800a200:	b933      	cbnz	r3, 800a210 <_free_r+0x30>
 800a202:	6063      	str	r3, [r4, #4]
 800a204:	6014      	str	r4, [r2, #0]
 800a206:	b003      	add	sp, #12
 800a208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a20c:	f000 b8de 	b.w	800a3cc <__malloc_unlock>
 800a210:	42a3      	cmp	r3, r4
 800a212:	d908      	bls.n	800a226 <_free_r+0x46>
 800a214:	6825      	ldr	r5, [r4, #0]
 800a216:	1961      	adds	r1, r4, r5
 800a218:	428b      	cmp	r3, r1
 800a21a:	bf01      	itttt	eq
 800a21c:	6819      	ldreq	r1, [r3, #0]
 800a21e:	685b      	ldreq	r3, [r3, #4]
 800a220:	1949      	addeq	r1, r1, r5
 800a222:	6021      	streq	r1, [r4, #0]
 800a224:	e7ed      	b.n	800a202 <_free_r+0x22>
 800a226:	461a      	mov	r2, r3
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	b10b      	cbz	r3, 800a230 <_free_r+0x50>
 800a22c:	42a3      	cmp	r3, r4
 800a22e:	d9fa      	bls.n	800a226 <_free_r+0x46>
 800a230:	6811      	ldr	r1, [r2, #0]
 800a232:	1855      	adds	r5, r2, r1
 800a234:	42a5      	cmp	r5, r4
 800a236:	d10b      	bne.n	800a250 <_free_r+0x70>
 800a238:	6824      	ldr	r4, [r4, #0]
 800a23a:	4421      	add	r1, r4
 800a23c:	1854      	adds	r4, r2, r1
 800a23e:	42a3      	cmp	r3, r4
 800a240:	6011      	str	r1, [r2, #0]
 800a242:	d1e0      	bne.n	800a206 <_free_r+0x26>
 800a244:	681c      	ldr	r4, [r3, #0]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	6053      	str	r3, [r2, #4]
 800a24a:	4421      	add	r1, r4
 800a24c:	6011      	str	r1, [r2, #0]
 800a24e:	e7da      	b.n	800a206 <_free_r+0x26>
 800a250:	d902      	bls.n	800a258 <_free_r+0x78>
 800a252:	230c      	movs	r3, #12
 800a254:	6003      	str	r3, [r0, #0]
 800a256:	e7d6      	b.n	800a206 <_free_r+0x26>
 800a258:	6825      	ldr	r5, [r4, #0]
 800a25a:	1961      	adds	r1, r4, r5
 800a25c:	428b      	cmp	r3, r1
 800a25e:	bf04      	itt	eq
 800a260:	6819      	ldreq	r1, [r3, #0]
 800a262:	685b      	ldreq	r3, [r3, #4]
 800a264:	6063      	str	r3, [r4, #4]
 800a266:	bf04      	itt	eq
 800a268:	1949      	addeq	r1, r1, r5
 800a26a:	6021      	streq	r1, [r4, #0]
 800a26c:	6054      	str	r4, [r2, #4]
 800a26e:	e7ca      	b.n	800a206 <_free_r+0x26>
 800a270:	b003      	add	sp, #12
 800a272:	bd30      	pop	{r4, r5, pc}
 800a274:	20001348 	.word	0x20001348

0800a278 <sbrk_aligned>:
 800a278:	b570      	push	{r4, r5, r6, lr}
 800a27a:	4e0e      	ldr	r6, [pc, #56]	; (800a2b4 <sbrk_aligned+0x3c>)
 800a27c:	460c      	mov	r4, r1
 800a27e:	6831      	ldr	r1, [r6, #0]
 800a280:	4605      	mov	r5, r0
 800a282:	b911      	cbnz	r1, 800a28a <sbrk_aligned+0x12>
 800a284:	f000 f88c 	bl	800a3a0 <_sbrk_r>
 800a288:	6030      	str	r0, [r6, #0]
 800a28a:	4621      	mov	r1, r4
 800a28c:	4628      	mov	r0, r5
 800a28e:	f000 f887 	bl	800a3a0 <_sbrk_r>
 800a292:	1c43      	adds	r3, r0, #1
 800a294:	d00a      	beq.n	800a2ac <sbrk_aligned+0x34>
 800a296:	1cc4      	adds	r4, r0, #3
 800a298:	f024 0403 	bic.w	r4, r4, #3
 800a29c:	42a0      	cmp	r0, r4
 800a29e:	d007      	beq.n	800a2b0 <sbrk_aligned+0x38>
 800a2a0:	1a21      	subs	r1, r4, r0
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	f000 f87c 	bl	800a3a0 <_sbrk_r>
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	d101      	bne.n	800a2b0 <sbrk_aligned+0x38>
 800a2ac:	f04f 34ff 	mov.w	r4, #4294967295
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	bd70      	pop	{r4, r5, r6, pc}
 800a2b4:	2000134c 	.word	0x2000134c

0800a2b8 <_malloc_r>:
 800a2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2bc:	1ccd      	adds	r5, r1, #3
 800a2be:	f025 0503 	bic.w	r5, r5, #3
 800a2c2:	3508      	adds	r5, #8
 800a2c4:	2d0c      	cmp	r5, #12
 800a2c6:	bf38      	it	cc
 800a2c8:	250c      	movcc	r5, #12
 800a2ca:	2d00      	cmp	r5, #0
 800a2cc:	4607      	mov	r7, r0
 800a2ce:	db01      	blt.n	800a2d4 <_malloc_r+0x1c>
 800a2d0:	42a9      	cmp	r1, r5
 800a2d2:	d905      	bls.n	800a2e0 <_malloc_r+0x28>
 800a2d4:	230c      	movs	r3, #12
 800a2d6:	603b      	str	r3, [r7, #0]
 800a2d8:	2600      	movs	r6, #0
 800a2da:	4630      	mov	r0, r6
 800a2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2e0:	4e2e      	ldr	r6, [pc, #184]	; (800a39c <_malloc_r+0xe4>)
 800a2e2:	f000 f86d 	bl	800a3c0 <__malloc_lock>
 800a2e6:	6833      	ldr	r3, [r6, #0]
 800a2e8:	461c      	mov	r4, r3
 800a2ea:	bb34      	cbnz	r4, 800a33a <_malloc_r+0x82>
 800a2ec:	4629      	mov	r1, r5
 800a2ee:	4638      	mov	r0, r7
 800a2f0:	f7ff ffc2 	bl	800a278 <sbrk_aligned>
 800a2f4:	1c43      	adds	r3, r0, #1
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	d14d      	bne.n	800a396 <_malloc_r+0xde>
 800a2fa:	6834      	ldr	r4, [r6, #0]
 800a2fc:	4626      	mov	r6, r4
 800a2fe:	2e00      	cmp	r6, #0
 800a300:	d140      	bne.n	800a384 <_malloc_r+0xcc>
 800a302:	6823      	ldr	r3, [r4, #0]
 800a304:	4631      	mov	r1, r6
 800a306:	4638      	mov	r0, r7
 800a308:	eb04 0803 	add.w	r8, r4, r3
 800a30c:	f000 f848 	bl	800a3a0 <_sbrk_r>
 800a310:	4580      	cmp	r8, r0
 800a312:	d13a      	bne.n	800a38a <_malloc_r+0xd2>
 800a314:	6821      	ldr	r1, [r4, #0]
 800a316:	3503      	adds	r5, #3
 800a318:	1a6d      	subs	r5, r5, r1
 800a31a:	f025 0503 	bic.w	r5, r5, #3
 800a31e:	3508      	adds	r5, #8
 800a320:	2d0c      	cmp	r5, #12
 800a322:	bf38      	it	cc
 800a324:	250c      	movcc	r5, #12
 800a326:	4629      	mov	r1, r5
 800a328:	4638      	mov	r0, r7
 800a32a:	f7ff ffa5 	bl	800a278 <sbrk_aligned>
 800a32e:	3001      	adds	r0, #1
 800a330:	d02b      	beq.n	800a38a <_malloc_r+0xd2>
 800a332:	6823      	ldr	r3, [r4, #0]
 800a334:	442b      	add	r3, r5
 800a336:	6023      	str	r3, [r4, #0]
 800a338:	e00e      	b.n	800a358 <_malloc_r+0xa0>
 800a33a:	6822      	ldr	r2, [r4, #0]
 800a33c:	1b52      	subs	r2, r2, r5
 800a33e:	d41e      	bmi.n	800a37e <_malloc_r+0xc6>
 800a340:	2a0b      	cmp	r2, #11
 800a342:	d916      	bls.n	800a372 <_malloc_r+0xba>
 800a344:	1961      	adds	r1, r4, r5
 800a346:	42a3      	cmp	r3, r4
 800a348:	6025      	str	r5, [r4, #0]
 800a34a:	bf18      	it	ne
 800a34c:	6059      	strne	r1, [r3, #4]
 800a34e:	6863      	ldr	r3, [r4, #4]
 800a350:	bf08      	it	eq
 800a352:	6031      	streq	r1, [r6, #0]
 800a354:	5162      	str	r2, [r4, r5]
 800a356:	604b      	str	r3, [r1, #4]
 800a358:	4638      	mov	r0, r7
 800a35a:	f104 060b 	add.w	r6, r4, #11
 800a35e:	f000 f835 	bl	800a3cc <__malloc_unlock>
 800a362:	f026 0607 	bic.w	r6, r6, #7
 800a366:	1d23      	adds	r3, r4, #4
 800a368:	1af2      	subs	r2, r6, r3
 800a36a:	d0b6      	beq.n	800a2da <_malloc_r+0x22>
 800a36c:	1b9b      	subs	r3, r3, r6
 800a36e:	50a3      	str	r3, [r4, r2]
 800a370:	e7b3      	b.n	800a2da <_malloc_r+0x22>
 800a372:	6862      	ldr	r2, [r4, #4]
 800a374:	42a3      	cmp	r3, r4
 800a376:	bf0c      	ite	eq
 800a378:	6032      	streq	r2, [r6, #0]
 800a37a:	605a      	strne	r2, [r3, #4]
 800a37c:	e7ec      	b.n	800a358 <_malloc_r+0xa0>
 800a37e:	4623      	mov	r3, r4
 800a380:	6864      	ldr	r4, [r4, #4]
 800a382:	e7b2      	b.n	800a2ea <_malloc_r+0x32>
 800a384:	4634      	mov	r4, r6
 800a386:	6876      	ldr	r6, [r6, #4]
 800a388:	e7b9      	b.n	800a2fe <_malloc_r+0x46>
 800a38a:	230c      	movs	r3, #12
 800a38c:	603b      	str	r3, [r7, #0]
 800a38e:	4638      	mov	r0, r7
 800a390:	f000 f81c 	bl	800a3cc <__malloc_unlock>
 800a394:	e7a1      	b.n	800a2da <_malloc_r+0x22>
 800a396:	6025      	str	r5, [r4, #0]
 800a398:	e7de      	b.n	800a358 <_malloc_r+0xa0>
 800a39a:	bf00      	nop
 800a39c:	20001348 	.word	0x20001348

0800a3a0 <_sbrk_r>:
 800a3a0:	b538      	push	{r3, r4, r5, lr}
 800a3a2:	4d06      	ldr	r5, [pc, #24]	; (800a3bc <_sbrk_r+0x1c>)
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	4604      	mov	r4, r0
 800a3a8:	4608      	mov	r0, r1
 800a3aa:	602b      	str	r3, [r5, #0]
 800a3ac:	f7fa fd4e 	bl	8004e4c <_sbrk>
 800a3b0:	1c43      	adds	r3, r0, #1
 800a3b2:	d102      	bne.n	800a3ba <_sbrk_r+0x1a>
 800a3b4:	682b      	ldr	r3, [r5, #0]
 800a3b6:	b103      	cbz	r3, 800a3ba <_sbrk_r+0x1a>
 800a3b8:	6023      	str	r3, [r4, #0]
 800a3ba:	bd38      	pop	{r3, r4, r5, pc}
 800a3bc:	20001350 	.word	0x20001350

0800a3c0 <__malloc_lock>:
 800a3c0:	4801      	ldr	r0, [pc, #4]	; (800a3c8 <__malloc_lock+0x8>)
 800a3c2:	f000 b809 	b.w	800a3d8 <__retarget_lock_acquire_recursive>
 800a3c6:	bf00      	nop
 800a3c8:	20001354 	.word	0x20001354

0800a3cc <__malloc_unlock>:
 800a3cc:	4801      	ldr	r0, [pc, #4]	; (800a3d4 <__malloc_unlock+0x8>)
 800a3ce:	f000 b804 	b.w	800a3da <__retarget_lock_release_recursive>
 800a3d2:	bf00      	nop
 800a3d4:	20001354 	.word	0x20001354

0800a3d8 <__retarget_lock_acquire_recursive>:
 800a3d8:	4770      	bx	lr

0800a3da <__retarget_lock_release_recursive>:
 800a3da:	4770      	bx	lr
 800a3dc:	0000      	movs	r0, r0
	...

0800a3e0 <cos>:
 800a3e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3e2:	ec53 2b10 	vmov	r2, r3, d0
 800a3e6:	4826      	ldr	r0, [pc, #152]	; (800a480 <cos+0xa0>)
 800a3e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a3ec:	4281      	cmp	r1, r0
 800a3ee:	dc06      	bgt.n	800a3fe <cos+0x1e>
 800a3f0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a478 <cos+0x98>
 800a3f4:	b005      	add	sp, #20
 800a3f6:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3fa:	f001 bc3d 	b.w	800bc78 <__kernel_cos>
 800a3fe:	4821      	ldr	r0, [pc, #132]	; (800a484 <cos+0xa4>)
 800a400:	4281      	cmp	r1, r0
 800a402:	dd09      	ble.n	800a418 <cos+0x38>
 800a404:	ee10 0a10 	vmov	r0, s0
 800a408:	4619      	mov	r1, r3
 800a40a:	f7f5 fee9 	bl	80001e0 <__aeabi_dsub>
 800a40e:	ec41 0b10 	vmov	d0, r0, r1
 800a412:	b005      	add	sp, #20
 800a414:	f85d fb04 	ldr.w	pc, [sp], #4
 800a418:	4668      	mov	r0, sp
 800a41a:	f001 f96d 	bl	800b6f8 <__ieee754_rem_pio2>
 800a41e:	f000 0003 	and.w	r0, r0, #3
 800a422:	2801      	cmp	r0, #1
 800a424:	d00b      	beq.n	800a43e <cos+0x5e>
 800a426:	2802      	cmp	r0, #2
 800a428:	d016      	beq.n	800a458 <cos+0x78>
 800a42a:	b9e0      	cbnz	r0, 800a466 <cos+0x86>
 800a42c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a430:	ed9d 0b00 	vldr	d0, [sp]
 800a434:	f001 fc20 	bl	800bc78 <__kernel_cos>
 800a438:	ec51 0b10 	vmov	r0, r1, d0
 800a43c:	e7e7      	b.n	800a40e <cos+0x2e>
 800a43e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a442:	ed9d 0b00 	vldr	d0, [sp]
 800a446:	f002 f82f 	bl	800c4a8 <__kernel_sin>
 800a44a:	ec53 2b10 	vmov	r2, r3, d0
 800a44e:	ee10 0a10 	vmov	r0, s0
 800a452:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a456:	e7da      	b.n	800a40e <cos+0x2e>
 800a458:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a45c:	ed9d 0b00 	vldr	d0, [sp]
 800a460:	f001 fc0a 	bl	800bc78 <__kernel_cos>
 800a464:	e7f1      	b.n	800a44a <cos+0x6a>
 800a466:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a46a:	ed9d 0b00 	vldr	d0, [sp]
 800a46e:	2001      	movs	r0, #1
 800a470:	f002 f81a 	bl	800c4a8 <__kernel_sin>
 800a474:	e7e0      	b.n	800a438 <cos+0x58>
 800a476:	bf00      	nop
	...
 800a480:	3fe921fb 	.word	0x3fe921fb
 800a484:	7fefffff 	.word	0x7fefffff

0800a488 <floor>:
 800a488:	ec51 0b10 	vmov	r0, r1, d0
 800a48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a490:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a494:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a498:	2e13      	cmp	r6, #19
 800a49a:	ee10 5a10 	vmov	r5, s0
 800a49e:	ee10 8a10 	vmov	r8, s0
 800a4a2:	460c      	mov	r4, r1
 800a4a4:	dc32      	bgt.n	800a50c <floor+0x84>
 800a4a6:	2e00      	cmp	r6, #0
 800a4a8:	da14      	bge.n	800a4d4 <floor+0x4c>
 800a4aa:	a333      	add	r3, pc, #204	; (adr r3, 800a578 <floor+0xf0>)
 800a4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b0:	f7f5 fe98 	bl	80001e4 <__adddf3>
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	f7f6 fada 	bl	8000a70 <__aeabi_dcmpgt>
 800a4bc:	b138      	cbz	r0, 800a4ce <floor+0x46>
 800a4be:	2c00      	cmp	r4, #0
 800a4c0:	da57      	bge.n	800a572 <floor+0xea>
 800a4c2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a4c6:	431d      	orrs	r5, r3
 800a4c8:	d001      	beq.n	800a4ce <floor+0x46>
 800a4ca:	4c2d      	ldr	r4, [pc, #180]	; (800a580 <floor+0xf8>)
 800a4cc:	2500      	movs	r5, #0
 800a4ce:	4621      	mov	r1, r4
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	e025      	b.n	800a520 <floor+0x98>
 800a4d4:	4f2b      	ldr	r7, [pc, #172]	; (800a584 <floor+0xfc>)
 800a4d6:	4137      	asrs	r7, r6
 800a4d8:	ea01 0307 	and.w	r3, r1, r7
 800a4dc:	4303      	orrs	r3, r0
 800a4de:	d01f      	beq.n	800a520 <floor+0x98>
 800a4e0:	a325      	add	r3, pc, #148	; (adr r3, 800a578 <floor+0xf0>)
 800a4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e6:	f7f5 fe7d 	bl	80001e4 <__adddf3>
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	f7f6 fabf 	bl	8000a70 <__aeabi_dcmpgt>
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	d0eb      	beq.n	800a4ce <floor+0x46>
 800a4f6:	2c00      	cmp	r4, #0
 800a4f8:	bfbe      	ittt	lt
 800a4fa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a4fe:	fa43 f606 	asrlt.w	r6, r3, r6
 800a502:	19a4      	addlt	r4, r4, r6
 800a504:	ea24 0407 	bic.w	r4, r4, r7
 800a508:	2500      	movs	r5, #0
 800a50a:	e7e0      	b.n	800a4ce <floor+0x46>
 800a50c:	2e33      	cmp	r6, #51	; 0x33
 800a50e:	dd0b      	ble.n	800a528 <floor+0xa0>
 800a510:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a514:	d104      	bne.n	800a520 <floor+0x98>
 800a516:	ee10 2a10 	vmov	r2, s0
 800a51a:	460b      	mov	r3, r1
 800a51c:	f7f5 fe62 	bl	80001e4 <__adddf3>
 800a520:	ec41 0b10 	vmov	d0, r0, r1
 800a524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a528:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a52c:	f04f 33ff 	mov.w	r3, #4294967295
 800a530:	fa23 f707 	lsr.w	r7, r3, r7
 800a534:	4207      	tst	r7, r0
 800a536:	d0f3      	beq.n	800a520 <floor+0x98>
 800a538:	a30f      	add	r3, pc, #60	; (adr r3, 800a578 <floor+0xf0>)
 800a53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53e:	f7f5 fe51 	bl	80001e4 <__adddf3>
 800a542:	2200      	movs	r2, #0
 800a544:	2300      	movs	r3, #0
 800a546:	f7f6 fa93 	bl	8000a70 <__aeabi_dcmpgt>
 800a54a:	2800      	cmp	r0, #0
 800a54c:	d0bf      	beq.n	800a4ce <floor+0x46>
 800a54e:	2c00      	cmp	r4, #0
 800a550:	da02      	bge.n	800a558 <floor+0xd0>
 800a552:	2e14      	cmp	r6, #20
 800a554:	d103      	bne.n	800a55e <floor+0xd6>
 800a556:	3401      	adds	r4, #1
 800a558:	ea25 0507 	bic.w	r5, r5, r7
 800a55c:	e7b7      	b.n	800a4ce <floor+0x46>
 800a55e:	2301      	movs	r3, #1
 800a560:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a564:	fa03 f606 	lsl.w	r6, r3, r6
 800a568:	4435      	add	r5, r6
 800a56a:	4545      	cmp	r5, r8
 800a56c:	bf38      	it	cc
 800a56e:	18e4      	addcc	r4, r4, r3
 800a570:	e7f2      	b.n	800a558 <floor+0xd0>
 800a572:	2500      	movs	r5, #0
 800a574:	462c      	mov	r4, r5
 800a576:	e7aa      	b.n	800a4ce <floor+0x46>
 800a578:	8800759c 	.word	0x8800759c
 800a57c:	7e37e43c 	.word	0x7e37e43c
 800a580:	bff00000 	.word	0xbff00000
 800a584:	000fffff 	.word	0x000fffff

0800a588 <sin>:
 800a588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a58a:	ec53 2b10 	vmov	r2, r3, d0
 800a58e:	4828      	ldr	r0, [pc, #160]	; (800a630 <sin+0xa8>)
 800a590:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a594:	4281      	cmp	r1, r0
 800a596:	dc07      	bgt.n	800a5a8 <sin+0x20>
 800a598:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a628 <sin+0xa0>
 800a59c:	2000      	movs	r0, #0
 800a59e:	b005      	add	sp, #20
 800a5a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5a4:	f001 bf80 	b.w	800c4a8 <__kernel_sin>
 800a5a8:	4822      	ldr	r0, [pc, #136]	; (800a634 <sin+0xac>)
 800a5aa:	4281      	cmp	r1, r0
 800a5ac:	dd09      	ble.n	800a5c2 <sin+0x3a>
 800a5ae:	ee10 0a10 	vmov	r0, s0
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	f7f5 fe14 	bl	80001e0 <__aeabi_dsub>
 800a5b8:	ec41 0b10 	vmov	d0, r0, r1
 800a5bc:	b005      	add	sp, #20
 800a5be:	f85d fb04 	ldr.w	pc, [sp], #4
 800a5c2:	4668      	mov	r0, sp
 800a5c4:	f001 f898 	bl	800b6f8 <__ieee754_rem_pio2>
 800a5c8:	f000 0003 	and.w	r0, r0, #3
 800a5cc:	2801      	cmp	r0, #1
 800a5ce:	d00c      	beq.n	800a5ea <sin+0x62>
 800a5d0:	2802      	cmp	r0, #2
 800a5d2:	d011      	beq.n	800a5f8 <sin+0x70>
 800a5d4:	b9f0      	cbnz	r0, 800a614 <sin+0x8c>
 800a5d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5da:	ed9d 0b00 	vldr	d0, [sp]
 800a5de:	2001      	movs	r0, #1
 800a5e0:	f001 ff62 	bl	800c4a8 <__kernel_sin>
 800a5e4:	ec51 0b10 	vmov	r0, r1, d0
 800a5e8:	e7e6      	b.n	800a5b8 <sin+0x30>
 800a5ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5ee:	ed9d 0b00 	vldr	d0, [sp]
 800a5f2:	f001 fb41 	bl	800bc78 <__kernel_cos>
 800a5f6:	e7f5      	b.n	800a5e4 <sin+0x5c>
 800a5f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5fc:	ed9d 0b00 	vldr	d0, [sp]
 800a600:	2001      	movs	r0, #1
 800a602:	f001 ff51 	bl	800c4a8 <__kernel_sin>
 800a606:	ec53 2b10 	vmov	r2, r3, d0
 800a60a:	ee10 0a10 	vmov	r0, s0
 800a60e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a612:	e7d1      	b.n	800a5b8 <sin+0x30>
 800a614:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a618:	ed9d 0b00 	vldr	d0, [sp]
 800a61c:	f001 fb2c 	bl	800bc78 <__kernel_cos>
 800a620:	e7f1      	b.n	800a606 <sin+0x7e>
 800a622:	bf00      	nop
 800a624:	f3af 8000 	nop.w
	...
 800a630:	3fe921fb 	.word	0x3fe921fb
 800a634:	7fefffff 	.word	0x7fefffff

0800a638 <acos>:
 800a638:	b538      	push	{r3, r4, r5, lr}
 800a63a:	ed2d 8b02 	vpush	{d8}
 800a63e:	ec55 4b10 	vmov	r4, r5, d0
 800a642:	f000 f8c9 	bl	800a7d8 <__ieee754_acos>
 800a646:	4622      	mov	r2, r4
 800a648:	462b      	mov	r3, r5
 800a64a:	4620      	mov	r0, r4
 800a64c:	4629      	mov	r1, r5
 800a64e:	eeb0 8a40 	vmov.f32	s16, s0
 800a652:	eef0 8a60 	vmov.f32	s17, s1
 800a656:	f7f6 fa15 	bl	8000a84 <__aeabi_dcmpun>
 800a65a:	b9a8      	cbnz	r0, 800a688 <acos+0x50>
 800a65c:	ec45 4b10 	vmov	d0, r4, r5
 800a660:	f002 f810 	bl	800c684 <fabs>
 800a664:	4b0c      	ldr	r3, [pc, #48]	; (800a698 <acos+0x60>)
 800a666:	ec51 0b10 	vmov	r0, r1, d0
 800a66a:	2200      	movs	r2, #0
 800a66c:	f7f6 fa00 	bl	8000a70 <__aeabi_dcmpgt>
 800a670:	b150      	cbz	r0, 800a688 <acos+0x50>
 800a672:	f7ff fd4f 	bl	800a114 <__errno>
 800a676:	ecbd 8b02 	vpop	{d8}
 800a67a:	2321      	movs	r3, #33	; 0x21
 800a67c:	6003      	str	r3, [r0, #0]
 800a67e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a682:	4806      	ldr	r0, [pc, #24]	; (800a69c <acos+0x64>)
 800a684:	f002 b814 	b.w	800c6b0 <nan>
 800a688:	eeb0 0a48 	vmov.f32	s0, s16
 800a68c:	eef0 0a68 	vmov.f32	s1, s17
 800a690:	ecbd 8b02 	vpop	{d8}
 800a694:	bd38      	pop	{r3, r4, r5, pc}
 800a696:	bf00      	nop
 800a698:	3ff00000 	.word	0x3ff00000
 800a69c:	0800c808 	.word	0x0800c808

0800a6a0 <pow>:
 800a6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a2:	ed2d 8b02 	vpush	{d8}
 800a6a6:	eeb0 8a40 	vmov.f32	s16, s0
 800a6aa:	eef0 8a60 	vmov.f32	s17, s1
 800a6ae:	ec55 4b11 	vmov	r4, r5, d1
 800a6b2:	f000 faf1 	bl	800ac98 <__ieee754_pow>
 800a6b6:	4622      	mov	r2, r4
 800a6b8:	462b      	mov	r3, r5
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	4629      	mov	r1, r5
 800a6be:	ec57 6b10 	vmov	r6, r7, d0
 800a6c2:	f7f6 f9df 	bl	8000a84 <__aeabi_dcmpun>
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	d13b      	bne.n	800a742 <pow+0xa2>
 800a6ca:	ec51 0b18 	vmov	r0, r1, d8
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	f7f6 f9a5 	bl	8000a20 <__aeabi_dcmpeq>
 800a6d6:	b1b8      	cbz	r0, 800a708 <pow+0x68>
 800a6d8:	2200      	movs	r2, #0
 800a6da:	2300      	movs	r3, #0
 800a6dc:	4620      	mov	r0, r4
 800a6de:	4629      	mov	r1, r5
 800a6e0:	f7f6 f99e 	bl	8000a20 <__aeabi_dcmpeq>
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	d146      	bne.n	800a776 <pow+0xd6>
 800a6e8:	ec45 4b10 	vmov	d0, r4, r5
 800a6ec:	f001 ffd3 	bl	800c696 <finite>
 800a6f0:	b338      	cbz	r0, 800a742 <pow+0xa2>
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	4629      	mov	r1, r5
 800a6fa:	f7f6 f99b 	bl	8000a34 <__aeabi_dcmplt>
 800a6fe:	b300      	cbz	r0, 800a742 <pow+0xa2>
 800a700:	f7ff fd08 	bl	800a114 <__errno>
 800a704:	2322      	movs	r3, #34	; 0x22
 800a706:	e01b      	b.n	800a740 <pow+0xa0>
 800a708:	ec47 6b10 	vmov	d0, r6, r7
 800a70c:	f001 ffc3 	bl	800c696 <finite>
 800a710:	b9e0      	cbnz	r0, 800a74c <pow+0xac>
 800a712:	eeb0 0a48 	vmov.f32	s0, s16
 800a716:	eef0 0a68 	vmov.f32	s1, s17
 800a71a:	f001 ffbc 	bl	800c696 <finite>
 800a71e:	b1a8      	cbz	r0, 800a74c <pow+0xac>
 800a720:	ec45 4b10 	vmov	d0, r4, r5
 800a724:	f001 ffb7 	bl	800c696 <finite>
 800a728:	b180      	cbz	r0, 800a74c <pow+0xac>
 800a72a:	4632      	mov	r2, r6
 800a72c:	463b      	mov	r3, r7
 800a72e:	4630      	mov	r0, r6
 800a730:	4639      	mov	r1, r7
 800a732:	f7f6 f9a7 	bl	8000a84 <__aeabi_dcmpun>
 800a736:	2800      	cmp	r0, #0
 800a738:	d0e2      	beq.n	800a700 <pow+0x60>
 800a73a:	f7ff fceb 	bl	800a114 <__errno>
 800a73e:	2321      	movs	r3, #33	; 0x21
 800a740:	6003      	str	r3, [r0, #0]
 800a742:	ecbd 8b02 	vpop	{d8}
 800a746:	ec47 6b10 	vmov	d0, r6, r7
 800a74a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a74c:	2200      	movs	r2, #0
 800a74e:	2300      	movs	r3, #0
 800a750:	4630      	mov	r0, r6
 800a752:	4639      	mov	r1, r7
 800a754:	f7f6 f964 	bl	8000a20 <__aeabi_dcmpeq>
 800a758:	2800      	cmp	r0, #0
 800a75a:	d0f2      	beq.n	800a742 <pow+0xa2>
 800a75c:	eeb0 0a48 	vmov.f32	s0, s16
 800a760:	eef0 0a68 	vmov.f32	s1, s17
 800a764:	f001 ff97 	bl	800c696 <finite>
 800a768:	2800      	cmp	r0, #0
 800a76a:	d0ea      	beq.n	800a742 <pow+0xa2>
 800a76c:	ec45 4b10 	vmov	d0, r4, r5
 800a770:	f001 ff91 	bl	800c696 <finite>
 800a774:	e7c3      	b.n	800a6fe <pow+0x5e>
 800a776:	4f01      	ldr	r7, [pc, #4]	; (800a77c <pow+0xdc>)
 800a778:	2600      	movs	r6, #0
 800a77a:	e7e2      	b.n	800a742 <pow+0xa2>
 800a77c:	3ff00000 	.word	0x3ff00000

0800a780 <sqrt>:
 800a780:	b538      	push	{r3, r4, r5, lr}
 800a782:	ed2d 8b02 	vpush	{d8}
 800a786:	ec55 4b10 	vmov	r4, r5, d0
 800a78a:	f001 f9c1 	bl	800bb10 <__ieee754_sqrt>
 800a78e:	4622      	mov	r2, r4
 800a790:	462b      	mov	r3, r5
 800a792:	4620      	mov	r0, r4
 800a794:	4629      	mov	r1, r5
 800a796:	eeb0 8a40 	vmov.f32	s16, s0
 800a79a:	eef0 8a60 	vmov.f32	s17, s1
 800a79e:	f7f6 f971 	bl	8000a84 <__aeabi_dcmpun>
 800a7a2:	b990      	cbnz	r0, 800a7ca <sqrt+0x4a>
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	4629      	mov	r1, r5
 800a7ac:	f7f6 f942 	bl	8000a34 <__aeabi_dcmplt>
 800a7b0:	b158      	cbz	r0, 800a7ca <sqrt+0x4a>
 800a7b2:	f7ff fcaf 	bl	800a114 <__errno>
 800a7b6:	2321      	movs	r3, #33	; 0x21
 800a7b8:	6003      	str	r3, [r0, #0]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	2300      	movs	r3, #0
 800a7be:	4610      	mov	r0, r2
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	f7f5 ffef 	bl	80007a4 <__aeabi_ddiv>
 800a7c6:	ec41 0b18 	vmov	d8, r0, r1
 800a7ca:	eeb0 0a48 	vmov.f32	s0, s16
 800a7ce:	eef0 0a68 	vmov.f32	s1, s17
 800a7d2:	ecbd 8b02 	vpop	{d8}
 800a7d6:	bd38      	pop	{r3, r4, r5, pc}

0800a7d8 <__ieee754_acos>:
 800a7d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7dc:	ec55 4b10 	vmov	r4, r5, d0
 800a7e0:	49b7      	ldr	r1, [pc, #732]	; (800aac0 <__ieee754_acos+0x2e8>)
 800a7e2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a7e6:	428b      	cmp	r3, r1
 800a7e8:	dd1b      	ble.n	800a822 <__ieee754_acos+0x4a>
 800a7ea:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800a7ee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a7f2:	4323      	orrs	r3, r4
 800a7f4:	d106      	bne.n	800a804 <__ieee754_acos+0x2c>
 800a7f6:	2d00      	cmp	r5, #0
 800a7f8:	f300 8211 	bgt.w	800ac1e <__ieee754_acos+0x446>
 800a7fc:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800aa58 <__ieee754_acos+0x280>
 800a800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a804:	ee10 2a10 	vmov	r2, s0
 800a808:	462b      	mov	r3, r5
 800a80a:	ee10 0a10 	vmov	r0, s0
 800a80e:	4629      	mov	r1, r5
 800a810:	f7f5 fce6 	bl	80001e0 <__aeabi_dsub>
 800a814:	4602      	mov	r2, r0
 800a816:	460b      	mov	r3, r1
 800a818:	f7f5 ffc4 	bl	80007a4 <__aeabi_ddiv>
 800a81c:	ec41 0b10 	vmov	d0, r0, r1
 800a820:	e7ee      	b.n	800a800 <__ieee754_acos+0x28>
 800a822:	49a8      	ldr	r1, [pc, #672]	; (800aac4 <__ieee754_acos+0x2ec>)
 800a824:	428b      	cmp	r3, r1
 800a826:	f300 8087 	bgt.w	800a938 <__ieee754_acos+0x160>
 800a82a:	4aa7      	ldr	r2, [pc, #668]	; (800aac8 <__ieee754_acos+0x2f0>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	f340 81f9 	ble.w	800ac24 <__ieee754_acos+0x44c>
 800a832:	ee10 2a10 	vmov	r2, s0
 800a836:	ee10 0a10 	vmov	r0, s0
 800a83a:	462b      	mov	r3, r5
 800a83c:	4629      	mov	r1, r5
 800a83e:	f7f5 fe87 	bl	8000550 <__aeabi_dmul>
 800a842:	a387      	add	r3, pc, #540	; (adr r3, 800aa60 <__ieee754_acos+0x288>)
 800a844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a848:	4606      	mov	r6, r0
 800a84a:	460f      	mov	r7, r1
 800a84c:	f7f5 fe80 	bl	8000550 <__aeabi_dmul>
 800a850:	a385      	add	r3, pc, #532	; (adr r3, 800aa68 <__ieee754_acos+0x290>)
 800a852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a856:	f7f5 fcc5 	bl	80001e4 <__adddf3>
 800a85a:	4632      	mov	r2, r6
 800a85c:	463b      	mov	r3, r7
 800a85e:	f7f5 fe77 	bl	8000550 <__aeabi_dmul>
 800a862:	a383      	add	r3, pc, #524	; (adr r3, 800aa70 <__ieee754_acos+0x298>)
 800a864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a868:	f7f5 fcba 	bl	80001e0 <__aeabi_dsub>
 800a86c:	4632      	mov	r2, r6
 800a86e:	463b      	mov	r3, r7
 800a870:	f7f5 fe6e 	bl	8000550 <__aeabi_dmul>
 800a874:	a380      	add	r3, pc, #512	; (adr r3, 800aa78 <__ieee754_acos+0x2a0>)
 800a876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87a:	f7f5 fcb3 	bl	80001e4 <__adddf3>
 800a87e:	4632      	mov	r2, r6
 800a880:	463b      	mov	r3, r7
 800a882:	f7f5 fe65 	bl	8000550 <__aeabi_dmul>
 800a886:	a37e      	add	r3, pc, #504	; (adr r3, 800aa80 <__ieee754_acos+0x2a8>)
 800a888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88c:	f7f5 fca8 	bl	80001e0 <__aeabi_dsub>
 800a890:	4632      	mov	r2, r6
 800a892:	463b      	mov	r3, r7
 800a894:	f7f5 fe5c 	bl	8000550 <__aeabi_dmul>
 800a898:	a37b      	add	r3, pc, #492	; (adr r3, 800aa88 <__ieee754_acos+0x2b0>)
 800a89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89e:	f7f5 fca1 	bl	80001e4 <__adddf3>
 800a8a2:	4632      	mov	r2, r6
 800a8a4:	463b      	mov	r3, r7
 800a8a6:	f7f5 fe53 	bl	8000550 <__aeabi_dmul>
 800a8aa:	a379      	add	r3, pc, #484	; (adr r3, 800aa90 <__ieee754_acos+0x2b8>)
 800a8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b0:	4680      	mov	r8, r0
 800a8b2:	4689      	mov	r9, r1
 800a8b4:	4630      	mov	r0, r6
 800a8b6:	4639      	mov	r1, r7
 800a8b8:	f7f5 fe4a 	bl	8000550 <__aeabi_dmul>
 800a8bc:	a376      	add	r3, pc, #472	; (adr r3, 800aa98 <__ieee754_acos+0x2c0>)
 800a8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c2:	f7f5 fc8d 	bl	80001e0 <__aeabi_dsub>
 800a8c6:	4632      	mov	r2, r6
 800a8c8:	463b      	mov	r3, r7
 800a8ca:	f7f5 fe41 	bl	8000550 <__aeabi_dmul>
 800a8ce:	a374      	add	r3, pc, #464	; (adr r3, 800aaa0 <__ieee754_acos+0x2c8>)
 800a8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d4:	f7f5 fc86 	bl	80001e4 <__adddf3>
 800a8d8:	4632      	mov	r2, r6
 800a8da:	463b      	mov	r3, r7
 800a8dc:	f7f5 fe38 	bl	8000550 <__aeabi_dmul>
 800a8e0:	a371      	add	r3, pc, #452	; (adr r3, 800aaa8 <__ieee754_acos+0x2d0>)
 800a8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e6:	f7f5 fc7b 	bl	80001e0 <__aeabi_dsub>
 800a8ea:	4632      	mov	r2, r6
 800a8ec:	463b      	mov	r3, r7
 800a8ee:	f7f5 fe2f 	bl	8000550 <__aeabi_dmul>
 800a8f2:	4b76      	ldr	r3, [pc, #472]	; (800aacc <__ieee754_acos+0x2f4>)
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f7f5 fc75 	bl	80001e4 <__adddf3>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	4640      	mov	r0, r8
 800a900:	4649      	mov	r1, r9
 800a902:	f7f5 ff4f 	bl	80007a4 <__aeabi_ddiv>
 800a906:	4622      	mov	r2, r4
 800a908:	462b      	mov	r3, r5
 800a90a:	f7f5 fe21 	bl	8000550 <__aeabi_dmul>
 800a90e:	4602      	mov	r2, r0
 800a910:	460b      	mov	r3, r1
 800a912:	a167      	add	r1, pc, #412	; (adr r1, 800aab0 <__ieee754_acos+0x2d8>)
 800a914:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a918:	f7f5 fc62 	bl	80001e0 <__aeabi_dsub>
 800a91c:	4602      	mov	r2, r0
 800a91e:	460b      	mov	r3, r1
 800a920:	4620      	mov	r0, r4
 800a922:	4629      	mov	r1, r5
 800a924:	f7f5 fc5c 	bl	80001e0 <__aeabi_dsub>
 800a928:	4602      	mov	r2, r0
 800a92a:	460b      	mov	r3, r1
 800a92c:	a162      	add	r1, pc, #392	; (adr r1, 800aab8 <__ieee754_acos+0x2e0>)
 800a92e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a932:	f7f5 fc55 	bl	80001e0 <__aeabi_dsub>
 800a936:	e771      	b.n	800a81c <__ieee754_acos+0x44>
 800a938:	2d00      	cmp	r5, #0
 800a93a:	f280 80cb 	bge.w	800aad4 <__ieee754_acos+0x2fc>
 800a93e:	ee10 0a10 	vmov	r0, s0
 800a942:	4b62      	ldr	r3, [pc, #392]	; (800aacc <__ieee754_acos+0x2f4>)
 800a944:	2200      	movs	r2, #0
 800a946:	4629      	mov	r1, r5
 800a948:	f7f5 fc4c 	bl	80001e4 <__adddf3>
 800a94c:	4b60      	ldr	r3, [pc, #384]	; (800aad0 <__ieee754_acos+0x2f8>)
 800a94e:	2200      	movs	r2, #0
 800a950:	f7f5 fdfe 	bl	8000550 <__aeabi_dmul>
 800a954:	a342      	add	r3, pc, #264	; (adr r3, 800aa60 <__ieee754_acos+0x288>)
 800a956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95a:	4604      	mov	r4, r0
 800a95c:	460d      	mov	r5, r1
 800a95e:	f7f5 fdf7 	bl	8000550 <__aeabi_dmul>
 800a962:	a341      	add	r3, pc, #260	; (adr r3, 800aa68 <__ieee754_acos+0x290>)
 800a964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a968:	f7f5 fc3c 	bl	80001e4 <__adddf3>
 800a96c:	4622      	mov	r2, r4
 800a96e:	462b      	mov	r3, r5
 800a970:	f7f5 fdee 	bl	8000550 <__aeabi_dmul>
 800a974:	a33e      	add	r3, pc, #248	; (adr r3, 800aa70 <__ieee754_acos+0x298>)
 800a976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97a:	f7f5 fc31 	bl	80001e0 <__aeabi_dsub>
 800a97e:	4622      	mov	r2, r4
 800a980:	462b      	mov	r3, r5
 800a982:	f7f5 fde5 	bl	8000550 <__aeabi_dmul>
 800a986:	a33c      	add	r3, pc, #240	; (adr r3, 800aa78 <__ieee754_acos+0x2a0>)
 800a988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98c:	f7f5 fc2a 	bl	80001e4 <__adddf3>
 800a990:	4622      	mov	r2, r4
 800a992:	462b      	mov	r3, r5
 800a994:	f7f5 fddc 	bl	8000550 <__aeabi_dmul>
 800a998:	a339      	add	r3, pc, #228	; (adr r3, 800aa80 <__ieee754_acos+0x2a8>)
 800a99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99e:	f7f5 fc1f 	bl	80001e0 <__aeabi_dsub>
 800a9a2:	4622      	mov	r2, r4
 800a9a4:	462b      	mov	r3, r5
 800a9a6:	f7f5 fdd3 	bl	8000550 <__aeabi_dmul>
 800a9aa:	a337      	add	r3, pc, #220	; (adr r3, 800aa88 <__ieee754_acos+0x2b0>)
 800a9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b0:	f7f5 fc18 	bl	80001e4 <__adddf3>
 800a9b4:	4622      	mov	r2, r4
 800a9b6:	462b      	mov	r3, r5
 800a9b8:	f7f5 fdca 	bl	8000550 <__aeabi_dmul>
 800a9bc:	ec45 4b10 	vmov	d0, r4, r5
 800a9c0:	4680      	mov	r8, r0
 800a9c2:	4689      	mov	r9, r1
 800a9c4:	f001 f8a4 	bl	800bb10 <__ieee754_sqrt>
 800a9c8:	a331      	add	r3, pc, #196	; (adr r3, 800aa90 <__ieee754_acos+0x2b8>)
 800a9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	4629      	mov	r1, r5
 800a9d2:	ec57 6b10 	vmov	r6, r7, d0
 800a9d6:	f7f5 fdbb 	bl	8000550 <__aeabi_dmul>
 800a9da:	a32f      	add	r3, pc, #188	; (adr r3, 800aa98 <__ieee754_acos+0x2c0>)
 800a9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e0:	f7f5 fbfe 	bl	80001e0 <__aeabi_dsub>
 800a9e4:	4622      	mov	r2, r4
 800a9e6:	462b      	mov	r3, r5
 800a9e8:	f7f5 fdb2 	bl	8000550 <__aeabi_dmul>
 800a9ec:	a32c      	add	r3, pc, #176	; (adr r3, 800aaa0 <__ieee754_acos+0x2c8>)
 800a9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f2:	f7f5 fbf7 	bl	80001e4 <__adddf3>
 800a9f6:	4622      	mov	r2, r4
 800a9f8:	462b      	mov	r3, r5
 800a9fa:	f7f5 fda9 	bl	8000550 <__aeabi_dmul>
 800a9fe:	a32a      	add	r3, pc, #168	; (adr r3, 800aaa8 <__ieee754_acos+0x2d0>)
 800aa00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa04:	f7f5 fbec 	bl	80001e0 <__aeabi_dsub>
 800aa08:	4622      	mov	r2, r4
 800aa0a:	462b      	mov	r3, r5
 800aa0c:	f7f5 fda0 	bl	8000550 <__aeabi_dmul>
 800aa10:	4b2e      	ldr	r3, [pc, #184]	; (800aacc <__ieee754_acos+0x2f4>)
 800aa12:	2200      	movs	r2, #0
 800aa14:	f7f5 fbe6 	bl	80001e4 <__adddf3>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	4640      	mov	r0, r8
 800aa1e:	4649      	mov	r1, r9
 800aa20:	f7f5 fec0 	bl	80007a4 <__aeabi_ddiv>
 800aa24:	4632      	mov	r2, r6
 800aa26:	463b      	mov	r3, r7
 800aa28:	f7f5 fd92 	bl	8000550 <__aeabi_dmul>
 800aa2c:	a320      	add	r3, pc, #128	; (adr r3, 800aab0 <__ieee754_acos+0x2d8>)
 800aa2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa32:	f7f5 fbd5 	bl	80001e0 <__aeabi_dsub>
 800aa36:	4632      	mov	r2, r6
 800aa38:	463b      	mov	r3, r7
 800aa3a:	f7f5 fbd3 	bl	80001e4 <__adddf3>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	460b      	mov	r3, r1
 800aa42:	f7f5 fbcf 	bl	80001e4 <__adddf3>
 800aa46:	4602      	mov	r2, r0
 800aa48:	460b      	mov	r3, r1
 800aa4a:	a103      	add	r1, pc, #12	; (adr r1, 800aa58 <__ieee754_acos+0x280>)
 800aa4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa50:	e76f      	b.n	800a932 <__ieee754_acos+0x15a>
 800aa52:	bf00      	nop
 800aa54:	f3af 8000 	nop.w
 800aa58:	54442d18 	.word	0x54442d18
 800aa5c:	400921fb 	.word	0x400921fb
 800aa60:	0dfdf709 	.word	0x0dfdf709
 800aa64:	3f023de1 	.word	0x3f023de1
 800aa68:	7501b288 	.word	0x7501b288
 800aa6c:	3f49efe0 	.word	0x3f49efe0
 800aa70:	b5688f3b 	.word	0xb5688f3b
 800aa74:	3fa48228 	.word	0x3fa48228
 800aa78:	0e884455 	.word	0x0e884455
 800aa7c:	3fc9c155 	.word	0x3fc9c155
 800aa80:	03eb6f7d 	.word	0x03eb6f7d
 800aa84:	3fd4d612 	.word	0x3fd4d612
 800aa88:	55555555 	.word	0x55555555
 800aa8c:	3fc55555 	.word	0x3fc55555
 800aa90:	b12e9282 	.word	0xb12e9282
 800aa94:	3fb3b8c5 	.word	0x3fb3b8c5
 800aa98:	1b8d0159 	.word	0x1b8d0159
 800aa9c:	3fe6066c 	.word	0x3fe6066c
 800aaa0:	9c598ac8 	.word	0x9c598ac8
 800aaa4:	40002ae5 	.word	0x40002ae5
 800aaa8:	1c8a2d4b 	.word	0x1c8a2d4b
 800aaac:	40033a27 	.word	0x40033a27
 800aab0:	33145c07 	.word	0x33145c07
 800aab4:	3c91a626 	.word	0x3c91a626
 800aab8:	54442d18 	.word	0x54442d18
 800aabc:	3ff921fb 	.word	0x3ff921fb
 800aac0:	3fefffff 	.word	0x3fefffff
 800aac4:	3fdfffff 	.word	0x3fdfffff
 800aac8:	3c600000 	.word	0x3c600000
 800aacc:	3ff00000 	.word	0x3ff00000
 800aad0:	3fe00000 	.word	0x3fe00000
 800aad4:	ee10 2a10 	vmov	r2, s0
 800aad8:	462b      	mov	r3, r5
 800aada:	496d      	ldr	r1, [pc, #436]	; (800ac90 <__ieee754_acos+0x4b8>)
 800aadc:	2000      	movs	r0, #0
 800aade:	f7f5 fb7f 	bl	80001e0 <__aeabi_dsub>
 800aae2:	4b6c      	ldr	r3, [pc, #432]	; (800ac94 <__ieee754_acos+0x4bc>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	f7f5 fd33 	bl	8000550 <__aeabi_dmul>
 800aaea:	4604      	mov	r4, r0
 800aaec:	460d      	mov	r5, r1
 800aaee:	ec45 4b10 	vmov	d0, r4, r5
 800aaf2:	f001 f80d 	bl	800bb10 <__ieee754_sqrt>
 800aaf6:	a34e      	add	r3, pc, #312	; (adr r3, 800ac30 <__ieee754_acos+0x458>)
 800aaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafc:	4620      	mov	r0, r4
 800aafe:	4629      	mov	r1, r5
 800ab00:	ec59 8b10 	vmov	r8, r9, d0
 800ab04:	f7f5 fd24 	bl	8000550 <__aeabi_dmul>
 800ab08:	a34b      	add	r3, pc, #300	; (adr r3, 800ac38 <__ieee754_acos+0x460>)
 800ab0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0e:	f7f5 fb69 	bl	80001e4 <__adddf3>
 800ab12:	4622      	mov	r2, r4
 800ab14:	462b      	mov	r3, r5
 800ab16:	f7f5 fd1b 	bl	8000550 <__aeabi_dmul>
 800ab1a:	a349      	add	r3, pc, #292	; (adr r3, 800ac40 <__ieee754_acos+0x468>)
 800ab1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab20:	f7f5 fb5e 	bl	80001e0 <__aeabi_dsub>
 800ab24:	4622      	mov	r2, r4
 800ab26:	462b      	mov	r3, r5
 800ab28:	f7f5 fd12 	bl	8000550 <__aeabi_dmul>
 800ab2c:	a346      	add	r3, pc, #280	; (adr r3, 800ac48 <__ieee754_acos+0x470>)
 800ab2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab32:	f7f5 fb57 	bl	80001e4 <__adddf3>
 800ab36:	4622      	mov	r2, r4
 800ab38:	462b      	mov	r3, r5
 800ab3a:	f7f5 fd09 	bl	8000550 <__aeabi_dmul>
 800ab3e:	a344      	add	r3, pc, #272	; (adr r3, 800ac50 <__ieee754_acos+0x478>)
 800ab40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab44:	f7f5 fb4c 	bl	80001e0 <__aeabi_dsub>
 800ab48:	4622      	mov	r2, r4
 800ab4a:	462b      	mov	r3, r5
 800ab4c:	f7f5 fd00 	bl	8000550 <__aeabi_dmul>
 800ab50:	a341      	add	r3, pc, #260	; (adr r3, 800ac58 <__ieee754_acos+0x480>)
 800ab52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab56:	f7f5 fb45 	bl	80001e4 <__adddf3>
 800ab5a:	4622      	mov	r2, r4
 800ab5c:	462b      	mov	r3, r5
 800ab5e:	f7f5 fcf7 	bl	8000550 <__aeabi_dmul>
 800ab62:	a33f      	add	r3, pc, #252	; (adr r3, 800ac60 <__ieee754_acos+0x488>)
 800ab64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab68:	4682      	mov	sl, r0
 800ab6a:	468b      	mov	fp, r1
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	4629      	mov	r1, r5
 800ab70:	f7f5 fcee 	bl	8000550 <__aeabi_dmul>
 800ab74:	a33c      	add	r3, pc, #240	; (adr r3, 800ac68 <__ieee754_acos+0x490>)
 800ab76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7a:	f7f5 fb31 	bl	80001e0 <__aeabi_dsub>
 800ab7e:	4622      	mov	r2, r4
 800ab80:	462b      	mov	r3, r5
 800ab82:	f7f5 fce5 	bl	8000550 <__aeabi_dmul>
 800ab86:	a33a      	add	r3, pc, #232	; (adr r3, 800ac70 <__ieee754_acos+0x498>)
 800ab88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8c:	f7f5 fb2a 	bl	80001e4 <__adddf3>
 800ab90:	4622      	mov	r2, r4
 800ab92:	462b      	mov	r3, r5
 800ab94:	f7f5 fcdc 	bl	8000550 <__aeabi_dmul>
 800ab98:	a337      	add	r3, pc, #220	; (adr r3, 800ac78 <__ieee754_acos+0x4a0>)
 800ab9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9e:	f7f5 fb1f 	bl	80001e0 <__aeabi_dsub>
 800aba2:	4622      	mov	r2, r4
 800aba4:	462b      	mov	r3, r5
 800aba6:	f7f5 fcd3 	bl	8000550 <__aeabi_dmul>
 800abaa:	4b39      	ldr	r3, [pc, #228]	; (800ac90 <__ieee754_acos+0x4b8>)
 800abac:	2200      	movs	r2, #0
 800abae:	f7f5 fb19 	bl	80001e4 <__adddf3>
 800abb2:	4602      	mov	r2, r0
 800abb4:	460b      	mov	r3, r1
 800abb6:	4650      	mov	r0, sl
 800abb8:	4659      	mov	r1, fp
 800abba:	f7f5 fdf3 	bl	80007a4 <__aeabi_ddiv>
 800abbe:	4642      	mov	r2, r8
 800abc0:	464b      	mov	r3, r9
 800abc2:	f7f5 fcc5 	bl	8000550 <__aeabi_dmul>
 800abc6:	2600      	movs	r6, #0
 800abc8:	4682      	mov	sl, r0
 800abca:	468b      	mov	fp, r1
 800abcc:	4632      	mov	r2, r6
 800abce:	464b      	mov	r3, r9
 800abd0:	4630      	mov	r0, r6
 800abd2:	4649      	mov	r1, r9
 800abd4:	f7f5 fcbc 	bl	8000550 <__aeabi_dmul>
 800abd8:	4602      	mov	r2, r0
 800abda:	460b      	mov	r3, r1
 800abdc:	4620      	mov	r0, r4
 800abde:	4629      	mov	r1, r5
 800abe0:	f7f5 fafe 	bl	80001e0 <__aeabi_dsub>
 800abe4:	4632      	mov	r2, r6
 800abe6:	4604      	mov	r4, r0
 800abe8:	460d      	mov	r5, r1
 800abea:	464b      	mov	r3, r9
 800abec:	4640      	mov	r0, r8
 800abee:	4649      	mov	r1, r9
 800abf0:	f7f5 faf8 	bl	80001e4 <__adddf3>
 800abf4:	4602      	mov	r2, r0
 800abf6:	460b      	mov	r3, r1
 800abf8:	4620      	mov	r0, r4
 800abfa:	4629      	mov	r1, r5
 800abfc:	f7f5 fdd2 	bl	80007a4 <__aeabi_ddiv>
 800ac00:	4602      	mov	r2, r0
 800ac02:	460b      	mov	r3, r1
 800ac04:	4650      	mov	r0, sl
 800ac06:	4659      	mov	r1, fp
 800ac08:	f7f5 faec 	bl	80001e4 <__adddf3>
 800ac0c:	4632      	mov	r2, r6
 800ac0e:	464b      	mov	r3, r9
 800ac10:	f7f5 fae8 	bl	80001e4 <__adddf3>
 800ac14:	4602      	mov	r2, r0
 800ac16:	460b      	mov	r3, r1
 800ac18:	f7f5 fae4 	bl	80001e4 <__adddf3>
 800ac1c:	e5fe      	b.n	800a81c <__ieee754_acos+0x44>
 800ac1e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800ac80 <__ieee754_acos+0x4a8>
 800ac22:	e5ed      	b.n	800a800 <__ieee754_acos+0x28>
 800ac24:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800ac88 <__ieee754_acos+0x4b0>
 800ac28:	e5ea      	b.n	800a800 <__ieee754_acos+0x28>
 800ac2a:	bf00      	nop
 800ac2c:	f3af 8000 	nop.w
 800ac30:	0dfdf709 	.word	0x0dfdf709
 800ac34:	3f023de1 	.word	0x3f023de1
 800ac38:	7501b288 	.word	0x7501b288
 800ac3c:	3f49efe0 	.word	0x3f49efe0
 800ac40:	b5688f3b 	.word	0xb5688f3b
 800ac44:	3fa48228 	.word	0x3fa48228
 800ac48:	0e884455 	.word	0x0e884455
 800ac4c:	3fc9c155 	.word	0x3fc9c155
 800ac50:	03eb6f7d 	.word	0x03eb6f7d
 800ac54:	3fd4d612 	.word	0x3fd4d612
 800ac58:	55555555 	.word	0x55555555
 800ac5c:	3fc55555 	.word	0x3fc55555
 800ac60:	b12e9282 	.word	0xb12e9282
 800ac64:	3fb3b8c5 	.word	0x3fb3b8c5
 800ac68:	1b8d0159 	.word	0x1b8d0159
 800ac6c:	3fe6066c 	.word	0x3fe6066c
 800ac70:	9c598ac8 	.word	0x9c598ac8
 800ac74:	40002ae5 	.word	0x40002ae5
 800ac78:	1c8a2d4b 	.word	0x1c8a2d4b
 800ac7c:	40033a27 	.word	0x40033a27
	...
 800ac88:	54442d18 	.word	0x54442d18
 800ac8c:	3ff921fb 	.word	0x3ff921fb
 800ac90:	3ff00000 	.word	0x3ff00000
 800ac94:	3fe00000 	.word	0x3fe00000

0800ac98 <__ieee754_pow>:
 800ac98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac9c:	ed2d 8b06 	vpush	{d8-d10}
 800aca0:	b089      	sub	sp, #36	; 0x24
 800aca2:	ed8d 1b00 	vstr	d1, [sp]
 800aca6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800acaa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800acae:	ea58 0102 	orrs.w	r1, r8, r2
 800acb2:	ec57 6b10 	vmov	r6, r7, d0
 800acb6:	d115      	bne.n	800ace4 <__ieee754_pow+0x4c>
 800acb8:	19b3      	adds	r3, r6, r6
 800acba:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800acbe:	4152      	adcs	r2, r2
 800acc0:	4299      	cmp	r1, r3
 800acc2:	4b89      	ldr	r3, [pc, #548]	; (800aee8 <__ieee754_pow+0x250>)
 800acc4:	4193      	sbcs	r3, r2
 800acc6:	f080 84d2 	bcs.w	800b66e <__ieee754_pow+0x9d6>
 800acca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acce:	4630      	mov	r0, r6
 800acd0:	4639      	mov	r1, r7
 800acd2:	f7f5 fa87 	bl	80001e4 <__adddf3>
 800acd6:	ec41 0b10 	vmov	d0, r0, r1
 800acda:	b009      	add	sp, #36	; 0x24
 800acdc:	ecbd 8b06 	vpop	{d8-d10}
 800ace0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ace4:	4b81      	ldr	r3, [pc, #516]	; (800aeec <__ieee754_pow+0x254>)
 800ace6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800acea:	429c      	cmp	r4, r3
 800acec:	ee10 aa10 	vmov	sl, s0
 800acf0:	463d      	mov	r5, r7
 800acf2:	dc06      	bgt.n	800ad02 <__ieee754_pow+0x6a>
 800acf4:	d101      	bne.n	800acfa <__ieee754_pow+0x62>
 800acf6:	2e00      	cmp	r6, #0
 800acf8:	d1e7      	bne.n	800acca <__ieee754_pow+0x32>
 800acfa:	4598      	cmp	r8, r3
 800acfc:	dc01      	bgt.n	800ad02 <__ieee754_pow+0x6a>
 800acfe:	d10f      	bne.n	800ad20 <__ieee754_pow+0x88>
 800ad00:	b172      	cbz	r2, 800ad20 <__ieee754_pow+0x88>
 800ad02:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ad06:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ad0a:	ea55 050a 	orrs.w	r5, r5, sl
 800ad0e:	d1dc      	bne.n	800acca <__ieee754_pow+0x32>
 800ad10:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ad14:	18db      	adds	r3, r3, r3
 800ad16:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ad1a:	4152      	adcs	r2, r2
 800ad1c:	429d      	cmp	r5, r3
 800ad1e:	e7d0      	b.n	800acc2 <__ieee754_pow+0x2a>
 800ad20:	2d00      	cmp	r5, #0
 800ad22:	da3b      	bge.n	800ad9c <__ieee754_pow+0x104>
 800ad24:	4b72      	ldr	r3, [pc, #456]	; (800aef0 <__ieee754_pow+0x258>)
 800ad26:	4598      	cmp	r8, r3
 800ad28:	dc51      	bgt.n	800adce <__ieee754_pow+0x136>
 800ad2a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ad2e:	4598      	cmp	r8, r3
 800ad30:	f340 84ac 	ble.w	800b68c <__ieee754_pow+0x9f4>
 800ad34:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ad38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ad3c:	2b14      	cmp	r3, #20
 800ad3e:	dd0f      	ble.n	800ad60 <__ieee754_pow+0xc8>
 800ad40:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ad44:	fa22 f103 	lsr.w	r1, r2, r3
 800ad48:	fa01 f303 	lsl.w	r3, r1, r3
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	f040 849d 	bne.w	800b68c <__ieee754_pow+0x9f4>
 800ad52:	f001 0101 	and.w	r1, r1, #1
 800ad56:	f1c1 0302 	rsb	r3, r1, #2
 800ad5a:	9304      	str	r3, [sp, #16]
 800ad5c:	b182      	cbz	r2, 800ad80 <__ieee754_pow+0xe8>
 800ad5e:	e05f      	b.n	800ae20 <__ieee754_pow+0x188>
 800ad60:	2a00      	cmp	r2, #0
 800ad62:	d15b      	bne.n	800ae1c <__ieee754_pow+0x184>
 800ad64:	f1c3 0314 	rsb	r3, r3, #20
 800ad68:	fa48 f103 	asr.w	r1, r8, r3
 800ad6c:	fa01 f303 	lsl.w	r3, r1, r3
 800ad70:	4543      	cmp	r3, r8
 800ad72:	f040 8488 	bne.w	800b686 <__ieee754_pow+0x9ee>
 800ad76:	f001 0101 	and.w	r1, r1, #1
 800ad7a:	f1c1 0302 	rsb	r3, r1, #2
 800ad7e:	9304      	str	r3, [sp, #16]
 800ad80:	4b5c      	ldr	r3, [pc, #368]	; (800aef4 <__ieee754_pow+0x25c>)
 800ad82:	4598      	cmp	r8, r3
 800ad84:	d132      	bne.n	800adec <__ieee754_pow+0x154>
 800ad86:	f1b9 0f00 	cmp.w	r9, #0
 800ad8a:	f280 8478 	bge.w	800b67e <__ieee754_pow+0x9e6>
 800ad8e:	4959      	ldr	r1, [pc, #356]	; (800aef4 <__ieee754_pow+0x25c>)
 800ad90:	4632      	mov	r2, r6
 800ad92:	463b      	mov	r3, r7
 800ad94:	2000      	movs	r0, #0
 800ad96:	f7f5 fd05 	bl	80007a4 <__aeabi_ddiv>
 800ad9a:	e79c      	b.n	800acd6 <__ieee754_pow+0x3e>
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	9304      	str	r3, [sp, #16]
 800ada0:	2a00      	cmp	r2, #0
 800ada2:	d13d      	bne.n	800ae20 <__ieee754_pow+0x188>
 800ada4:	4b51      	ldr	r3, [pc, #324]	; (800aeec <__ieee754_pow+0x254>)
 800ada6:	4598      	cmp	r8, r3
 800ada8:	d1ea      	bne.n	800ad80 <__ieee754_pow+0xe8>
 800adaa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800adae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800adb2:	ea53 030a 	orrs.w	r3, r3, sl
 800adb6:	f000 845a 	beq.w	800b66e <__ieee754_pow+0x9d6>
 800adba:	4b4f      	ldr	r3, [pc, #316]	; (800aef8 <__ieee754_pow+0x260>)
 800adbc:	429c      	cmp	r4, r3
 800adbe:	dd08      	ble.n	800add2 <__ieee754_pow+0x13a>
 800adc0:	f1b9 0f00 	cmp.w	r9, #0
 800adc4:	f2c0 8457 	blt.w	800b676 <__ieee754_pow+0x9de>
 800adc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adcc:	e783      	b.n	800acd6 <__ieee754_pow+0x3e>
 800adce:	2302      	movs	r3, #2
 800add0:	e7e5      	b.n	800ad9e <__ieee754_pow+0x106>
 800add2:	f1b9 0f00 	cmp.w	r9, #0
 800add6:	f04f 0000 	mov.w	r0, #0
 800adda:	f04f 0100 	mov.w	r1, #0
 800adde:	f6bf af7a 	bge.w	800acd6 <__ieee754_pow+0x3e>
 800ade2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ade6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800adea:	e774      	b.n	800acd6 <__ieee754_pow+0x3e>
 800adec:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800adf0:	d106      	bne.n	800ae00 <__ieee754_pow+0x168>
 800adf2:	4632      	mov	r2, r6
 800adf4:	463b      	mov	r3, r7
 800adf6:	4630      	mov	r0, r6
 800adf8:	4639      	mov	r1, r7
 800adfa:	f7f5 fba9 	bl	8000550 <__aeabi_dmul>
 800adfe:	e76a      	b.n	800acd6 <__ieee754_pow+0x3e>
 800ae00:	4b3e      	ldr	r3, [pc, #248]	; (800aefc <__ieee754_pow+0x264>)
 800ae02:	4599      	cmp	r9, r3
 800ae04:	d10c      	bne.n	800ae20 <__ieee754_pow+0x188>
 800ae06:	2d00      	cmp	r5, #0
 800ae08:	db0a      	blt.n	800ae20 <__ieee754_pow+0x188>
 800ae0a:	ec47 6b10 	vmov	d0, r6, r7
 800ae0e:	b009      	add	sp, #36	; 0x24
 800ae10:	ecbd 8b06 	vpop	{d8-d10}
 800ae14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae18:	f000 be7a 	b.w	800bb10 <__ieee754_sqrt>
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	9304      	str	r3, [sp, #16]
 800ae20:	ec47 6b10 	vmov	d0, r6, r7
 800ae24:	f001 fc2e 	bl	800c684 <fabs>
 800ae28:	ec51 0b10 	vmov	r0, r1, d0
 800ae2c:	f1ba 0f00 	cmp.w	sl, #0
 800ae30:	d129      	bne.n	800ae86 <__ieee754_pow+0x1ee>
 800ae32:	b124      	cbz	r4, 800ae3e <__ieee754_pow+0x1a6>
 800ae34:	4b2f      	ldr	r3, [pc, #188]	; (800aef4 <__ieee754_pow+0x25c>)
 800ae36:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d123      	bne.n	800ae86 <__ieee754_pow+0x1ee>
 800ae3e:	f1b9 0f00 	cmp.w	r9, #0
 800ae42:	da05      	bge.n	800ae50 <__ieee754_pow+0x1b8>
 800ae44:	4602      	mov	r2, r0
 800ae46:	460b      	mov	r3, r1
 800ae48:	2000      	movs	r0, #0
 800ae4a:	492a      	ldr	r1, [pc, #168]	; (800aef4 <__ieee754_pow+0x25c>)
 800ae4c:	f7f5 fcaa 	bl	80007a4 <__aeabi_ddiv>
 800ae50:	2d00      	cmp	r5, #0
 800ae52:	f6bf af40 	bge.w	800acd6 <__ieee754_pow+0x3e>
 800ae56:	9b04      	ldr	r3, [sp, #16]
 800ae58:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ae5c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ae60:	4323      	orrs	r3, r4
 800ae62:	d108      	bne.n	800ae76 <__ieee754_pow+0x1de>
 800ae64:	4602      	mov	r2, r0
 800ae66:	460b      	mov	r3, r1
 800ae68:	4610      	mov	r0, r2
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	f7f5 f9b8 	bl	80001e0 <__aeabi_dsub>
 800ae70:	4602      	mov	r2, r0
 800ae72:	460b      	mov	r3, r1
 800ae74:	e78f      	b.n	800ad96 <__ieee754_pow+0xfe>
 800ae76:	9b04      	ldr	r3, [sp, #16]
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	f47f af2c 	bne.w	800acd6 <__ieee754_pow+0x3e>
 800ae7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae82:	4619      	mov	r1, r3
 800ae84:	e727      	b.n	800acd6 <__ieee754_pow+0x3e>
 800ae86:	0feb      	lsrs	r3, r5, #31
 800ae88:	3b01      	subs	r3, #1
 800ae8a:	9306      	str	r3, [sp, #24]
 800ae8c:	9a06      	ldr	r2, [sp, #24]
 800ae8e:	9b04      	ldr	r3, [sp, #16]
 800ae90:	4313      	orrs	r3, r2
 800ae92:	d102      	bne.n	800ae9a <__ieee754_pow+0x202>
 800ae94:	4632      	mov	r2, r6
 800ae96:	463b      	mov	r3, r7
 800ae98:	e7e6      	b.n	800ae68 <__ieee754_pow+0x1d0>
 800ae9a:	4b19      	ldr	r3, [pc, #100]	; (800af00 <__ieee754_pow+0x268>)
 800ae9c:	4598      	cmp	r8, r3
 800ae9e:	f340 80fb 	ble.w	800b098 <__ieee754_pow+0x400>
 800aea2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800aea6:	4598      	cmp	r8, r3
 800aea8:	4b13      	ldr	r3, [pc, #76]	; (800aef8 <__ieee754_pow+0x260>)
 800aeaa:	dd0c      	ble.n	800aec6 <__ieee754_pow+0x22e>
 800aeac:	429c      	cmp	r4, r3
 800aeae:	dc0f      	bgt.n	800aed0 <__ieee754_pow+0x238>
 800aeb0:	f1b9 0f00 	cmp.w	r9, #0
 800aeb4:	da0f      	bge.n	800aed6 <__ieee754_pow+0x23e>
 800aeb6:	2000      	movs	r0, #0
 800aeb8:	b009      	add	sp, #36	; 0x24
 800aeba:	ecbd 8b06 	vpop	{d8-d10}
 800aebe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec2:	f001 bbd6 	b.w	800c672 <__math_oflow>
 800aec6:	429c      	cmp	r4, r3
 800aec8:	dbf2      	blt.n	800aeb0 <__ieee754_pow+0x218>
 800aeca:	4b0a      	ldr	r3, [pc, #40]	; (800aef4 <__ieee754_pow+0x25c>)
 800aecc:	429c      	cmp	r4, r3
 800aece:	dd19      	ble.n	800af04 <__ieee754_pow+0x26c>
 800aed0:	f1b9 0f00 	cmp.w	r9, #0
 800aed4:	dcef      	bgt.n	800aeb6 <__ieee754_pow+0x21e>
 800aed6:	2000      	movs	r0, #0
 800aed8:	b009      	add	sp, #36	; 0x24
 800aeda:	ecbd 8b06 	vpop	{d8-d10}
 800aede:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee2:	f001 bbbd 	b.w	800c660 <__math_uflow>
 800aee6:	bf00      	nop
 800aee8:	fff00000 	.word	0xfff00000
 800aeec:	7ff00000 	.word	0x7ff00000
 800aef0:	433fffff 	.word	0x433fffff
 800aef4:	3ff00000 	.word	0x3ff00000
 800aef8:	3fefffff 	.word	0x3fefffff
 800aefc:	3fe00000 	.word	0x3fe00000
 800af00:	41e00000 	.word	0x41e00000
 800af04:	4b60      	ldr	r3, [pc, #384]	; (800b088 <__ieee754_pow+0x3f0>)
 800af06:	2200      	movs	r2, #0
 800af08:	f7f5 f96a 	bl	80001e0 <__aeabi_dsub>
 800af0c:	a354      	add	r3, pc, #336	; (adr r3, 800b060 <__ieee754_pow+0x3c8>)
 800af0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af12:	4604      	mov	r4, r0
 800af14:	460d      	mov	r5, r1
 800af16:	f7f5 fb1b 	bl	8000550 <__aeabi_dmul>
 800af1a:	a353      	add	r3, pc, #332	; (adr r3, 800b068 <__ieee754_pow+0x3d0>)
 800af1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af20:	4606      	mov	r6, r0
 800af22:	460f      	mov	r7, r1
 800af24:	4620      	mov	r0, r4
 800af26:	4629      	mov	r1, r5
 800af28:	f7f5 fb12 	bl	8000550 <__aeabi_dmul>
 800af2c:	4b57      	ldr	r3, [pc, #348]	; (800b08c <__ieee754_pow+0x3f4>)
 800af2e:	4682      	mov	sl, r0
 800af30:	468b      	mov	fp, r1
 800af32:	2200      	movs	r2, #0
 800af34:	4620      	mov	r0, r4
 800af36:	4629      	mov	r1, r5
 800af38:	f7f5 fb0a 	bl	8000550 <__aeabi_dmul>
 800af3c:	4602      	mov	r2, r0
 800af3e:	460b      	mov	r3, r1
 800af40:	a14b      	add	r1, pc, #300	; (adr r1, 800b070 <__ieee754_pow+0x3d8>)
 800af42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af46:	f7f5 f94b 	bl	80001e0 <__aeabi_dsub>
 800af4a:	4622      	mov	r2, r4
 800af4c:	462b      	mov	r3, r5
 800af4e:	f7f5 faff 	bl	8000550 <__aeabi_dmul>
 800af52:	4602      	mov	r2, r0
 800af54:	460b      	mov	r3, r1
 800af56:	2000      	movs	r0, #0
 800af58:	494d      	ldr	r1, [pc, #308]	; (800b090 <__ieee754_pow+0x3f8>)
 800af5a:	f7f5 f941 	bl	80001e0 <__aeabi_dsub>
 800af5e:	4622      	mov	r2, r4
 800af60:	4680      	mov	r8, r0
 800af62:	4689      	mov	r9, r1
 800af64:	462b      	mov	r3, r5
 800af66:	4620      	mov	r0, r4
 800af68:	4629      	mov	r1, r5
 800af6a:	f7f5 faf1 	bl	8000550 <__aeabi_dmul>
 800af6e:	4602      	mov	r2, r0
 800af70:	460b      	mov	r3, r1
 800af72:	4640      	mov	r0, r8
 800af74:	4649      	mov	r1, r9
 800af76:	f7f5 faeb 	bl	8000550 <__aeabi_dmul>
 800af7a:	a33f      	add	r3, pc, #252	; (adr r3, 800b078 <__ieee754_pow+0x3e0>)
 800af7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af80:	f7f5 fae6 	bl	8000550 <__aeabi_dmul>
 800af84:	4602      	mov	r2, r0
 800af86:	460b      	mov	r3, r1
 800af88:	4650      	mov	r0, sl
 800af8a:	4659      	mov	r1, fp
 800af8c:	f7f5 f928 	bl	80001e0 <__aeabi_dsub>
 800af90:	4602      	mov	r2, r0
 800af92:	460b      	mov	r3, r1
 800af94:	4680      	mov	r8, r0
 800af96:	4689      	mov	r9, r1
 800af98:	4630      	mov	r0, r6
 800af9a:	4639      	mov	r1, r7
 800af9c:	f7f5 f922 	bl	80001e4 <__adddf3>
 800afa0:	2000      	movs	r0, #0
 800afa2:	4632      	mov	r2, r6
 800afa4:	463b      	mov	r3, r7
 800afa6:	4604      	mov	r4, r0
 800afa8:	460d      	mov	r5, r1
 800afaa:	f7f5 f919 	bl	80001e0 <__aeabi_dsub>
 800afae:	4602      	mov	r2, r0
 800afb0:	460b      	mov	r3, r1
 800afb2:	4640      	mov	r0, r8
 800afb4:	4649      	mov	r1, r9
 800afb6:	f7f5 f913 	bl	80001e0 <__aeabi_dsub>
 800afba:	9b04      	ldr	r3, [sp, #16]
 800afbc:	9a06      	ldr	r2, [sp, #24]
 800afbe:	3b01      	subs	r3, #1
 800afc0:	4313      	orrs	r3, r2
 800afc2:	4682      	mov	sl, r0
 800afc4:	468b      	mov	fp, r1
 800afc6:	f040 81e7 	bne.w	800b398 <__ieee754_pow+0x700>
 800afca:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b080 <__ieee754_pow+0x3e8>
 800afce:	eeb0 8a47 	vmov.f32	s16, s14
 800afd2:	eef0 8a67 	vmov.f32	s17, s15
 800afd6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800afda:	2600      	movs	r6, #0
 800afdc:	4632      	mov	r2, r6
 800afde:	463b      	mov	r3, r7
 800afe0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afe4:	f7f5 f8fc 	bl	80001e0 <__aeabi_dsub>
 800afe8:	4622      	mov	r2, r4
 800afea:	462b      	mov	r3, r5
 800afec:	f7f5 fab0 	bl	8000550 <__aeabi_dmul>
 800aff0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aff4:	4680      	mov	r8, r0
 800aff6:	4689      	mov	r9, r1
 800aff8:	4650      	mov	r0, sl
 800affa:	4659      	mov	r1, fp
 800affc:	f7f5 faa8 	bl	8000550 <__aeabi_dmul>
 800b000:	4602      	mov	r2, r0
 800b002:	460b      	mov	r3, r1
 800b004:	4640      	mov	r0, r8
 800b006:	4649      	mov	r1, r9
 800b008:	f7f5 f8ec 	bl	80001e4 <__adddf3>
 800b00c:	4632      	mov	r2, r6
 800b00e:	463b      	mov	r3, r7
 800b010:	4680      	mov	r8, r0
 800b012:	4689      	mov	r9, r1
 800b014:	4620      	mov	r0, r4
 800b016:	4629      	mov	r1, r5
 800b018:	f7f5 fa9a 	bl	8000550 <__aeabi_dmul>
 800b01c:	460b      	mov	r3, r1
 800b01e:	4604      	mov	r4, r0
 800b020:	460d      	mov	r5, r1
 800b022:	4602      	mov	r2, r0
 800b024:	4649      	mov	r1, r9
 800b026:	4640      	mov	r0, r8
 800b028:	f7f5 f8dc 	bl	80001e4 <__adddf3>
 800b02c:	4b19      	ldr	r3, [pc, #100]	; (800b094 <__ieee754_pow+0x3fc>)
 800b02e:	4299      	cmp	r1, r3
 800b030:	ec45 4b19 	vmov	d9, r4, r5
 800b034:	4606      	mov	r6, r0
 800b036:	460f      	mov	r7, r1
 800b038:	468b      	mov	fp, r1
 800b03a:	f340 82f1 	ble.w	800b620 <__ieee754_pow+0x988>
 800b03e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b042:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b046:	4303      	orrs	r3, r0
 800b048:	f000 81e4 	beq.w	800b414 <__ieee754_pow+0x77c>
 800b04c:	ec51 0b18 	vmov	r0, r1, d8
 800b050:	2200      	movs	r2, #0
 800b052:	2300      	movs	r3, #0
 800b054:	f7f5 fcee 	bl	8000a34 <__aeabi_dcmplt>
 800b058:	3800      	subs	r0, #0
 800b05a:	bf18      	it	ne
 800b05c:	2001      	movne	r0, #1
 800b05e:	e72b      	b.n	800aeb8 <__ieee754_pow+0x220>
 800b060:	60000000 	.word	0x60000000
 800b064:	3ff71547 	.word	0x3ff71547
 800b068:	f85ddf44 	.word	0xf85ddf44
 800b06c:	3e54ae0b 	.word	0x3e54ae0b
 800b070:	55555555 	.word	0x55555555
 800b074:	3fd55555 	.word	0x3fd55555
 800b078:	652b82fe 	.word	0x652b82fe
 800b07c:	3ff71547 	.word	0x3ff71547
 800b080:	00000000 	.word	0x00000000
 800b084:	bff00000 	.word	0xbff00000
 800b088:	3ff00000 	.word	0x3ff00000
 800b08c:	3fd00000 	.word	0x3fd00000
 800b090:	3fe00000 	.word	0x3fe00000
 800b094:	408fffff 	.word	0x408fffff
 800b098:	4bd5      	ldr	r3, [pc, #852]	; (800b3f0 <__ieee754_pow+0x758>)
 800b09a:	402b      	ands	r3, r5
 800b09c:	2200      	movs	r2, #0
 800b09e:	b92b      	cbnz	r3, 800b0ac <__ieee754_pow+0x414>
 800b0a0:	4bd4      	ldr	r3, [pc, #848]	; (800b3f4 <__ieee754_pow+0x75c>)
 800b0a2:	f7f5 fa55 	bl	8000550 <__aeabi_dmul>
 800b0a6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b0aa:	460c      	mov	r4, r1
 800b0ac:	1523      	asrs	r3, r4, #20
 800b0ae:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b0b2:	4413      	add	r3, r2
 800b0b4:	9305      	str	r3, [sp, #20]
 800b0b6:	4bd0      	ldr	r3, [pc, #832]	; (800b3f8 <__ieee754_pow+0x760>)
 800b0b8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b0bc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b0c0:	429c      	cmp	r4, r3
 800b0c2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b0c6:	dd08      	ble.n	800b0da <__ieee754_pow+0x442>
 800b0c8:	4bcc      	ldr	r3, [pc, #816]	; (800b3fc <__ieee754_pow+0x764>)
 800b0ca:	429c      	cmp	r4, r3
 800b0cc:	f340 8162 	ble.w	800b394 <__ieee754_pow+0x6fc>
 800b0d0:	9b05      	ldr	r3, [sp, #20]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	9305      	str	r3, [sp, #20]
 800b0d6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b0da:	2400      	movs	r4, #0
 800b0dc:	00e3      	lsls	r3, r4, #3
 800b0de:	9307      	str	r3, [sp, #28]
 800b0e0:	4bc7      	ldr	r3, [pc, #796]	; (800b400 <__ieee754_pow+0x768>)
 800b0e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b0e6:	ed93 7b00 	vldr	d7, [r3]
 800b0ea:	4629      	mov	r1, r5
 800b0ec:	ec53 2b17 	vmov	r2, r3, d7
 800b0f0:	eeb0 9a47 	vmov.f32	s18, s14
 800b0f4:	eef0 9a67 	vmov.f32	s19, s15
 800b0f8:	4682      	mov	sl, r0
 800b0fa:	f7f5 f871 	bl	80001e0 <__aeabi_dsub>
 800b0fe:	4652      	mov	r2, sl
 800b100:	4606      	mov	r6, r0
 800b102:	460f      	mov	r7, r1
 800b104:	462b      	mov	r3, r5
 800b106:	ec51 0b19 	vmov	r0, r1, d9
 800b10a:	f7f5 f86b 	bl	80001e4 <__adddf3>
 800b10e:	4602      	mov	r2, r0
 800b110:	460b      	mov	r3, r1
 800b112:	2000      	movs	r0, #0
 800b114:	49bb      	ldr	r1, [pc, #748]	; (800b404 <__ieee754_pow+0x76c>)
 800b116:	f7f5 fb45 	bl	80007a4 <__aeabi_ddiv>
 800b11a:	ec41 0b1a 	vmov	d10, r0, r1
 800b11e:	4602      	mov	r2, r0
 800b120:	460b      	mov	r3, r1
 800b122:	4630      	mov	r0, r6
 800b124:	4639      	mov	r1, r7
 800b126:	f7f5 fa13 	bl	8000550 <__aeabi_dmul>
 800b12a:	2300      	movs	r3, #0
 800b12c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b130:	9302      	str	r3, [sp, #8]
 800b132:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b136:	46ab      	mov	fp, r5
 800b138:	106d      	asrs	r5, r5, #1
 800b13a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b13e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b142:	ec41 0b18 	vmov	d8, r0, r1
 800b146:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b14a:	2200      	movs	r2, #0
 800b14c:	4640      	mov	r0, r8
 800b14e:	4649      	mov	r1, r9
 800b150:	4614      	mov	r4, r2
 800b152:	461d      	mov	r5, r3
 800b154:	f7f5 f9fc 	bl	8000550 <__aeabi_dmul>
 800b158:	4602      	mov	r2, r0
 800b15a:	460b      	mov	r3, r1
 800b15c:	4630      	mov	r0, r6
 800b15e:	4639      	mov	r1, r7
 800b160:	f7f5 f83e 	bl	80001e0 <__aeabi_dsub>
 800b164:	ec53 2b19 	vmov	r2, r3, d9
 800b168:	4606      	mov	r6, r0
 800b16a:	460f      	mov	r7, r1
 800b16c:	4620      	mov	r0, r4
 800b16e:	4629      	mov	r1, r5
 800b170:	f7f5 f836 	bl	80001e0 <__aeabi_dsub>
 800b174:	4602      	mov	r2, r0
 800b176:	460b      	mov	r3, r1
 800b178:	4650      	mov	r0, sl
 800b17a:	4659      	mov	r1, fp
 800b17c:	f7f5 f830 	bl	80001e0 <__aeabi_dsub>
 800b180:	4642      	mov	r2, r8
 800b182:	464b      	mov	r3, r9
 800b184:	f7f5 f9e4 	bl	8000550 <__aeabi_dmul>
 800b188:	4602      	mov	r2, r0
 800b18a:	460b      	mov	r3, r1
 800b18c:	4630      	mov	r0, r6
 800b18e:	4639      	mov	r1, r7
 800b190:	f7f5 f826 	bl	80001e0 <__aeabi_dsub>
 800b194:	ec53 2b1a 	vmov	r2, r3, d10
 800b198:	f7f5 f9da 	bl	8000550 <__aeabi_dmul>
 800b19c:	ec53 2b18 	vmov	r2, r3, d8
 800b1a0:	ec41 0b19 	vmov	d9, r0, r1
 800b1a4:	ec51 0b18 	vmov	r0, r1, d8
 800b1a8:	f7f5 f9d2 	bl	8000550 <__aeabi_dmul>
 800b1ac:	a37c      	add	r3, pc, #496	; (adr r3, 800b3a0 <__ieee754_pow+0x708>)
 800b1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	460d      	mov	r5, r1
 800b1b6:	f7f5 f9cb 	bl	8000550 <__aeabi_dmul>
 800b1ba:	a37b      	add	r3, pc, #492	; (adr r3, 800b3a8 <__ieee754_pow+0x710>)
 800b1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c0:	f7f5 f810 	bl	80001e4 <__adddf3>
 800b1c4:	4622      	mov	r2, r4
 800b1c6:	462b      	mov	r3, r5
 800b1c8:	f7f5 f9c2 	bl	8000550 <__aeabi_dmul>
 800b1cc:	a378      	add	r3, pc, #480	; (adr r3, 800b3b0 <__ieee754_pow+0x718>)
 800b1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d2:	f7f5 f807 	bl	80001e4 <__adddf3>
 800b1d6:	4622      	mov	r2, r4
 800b1d8:	462b      	mov	r3, r5
 800b1da:	f7f5 f9b9 	bl	8000550 <__aeabi_dmul>
 800b1de:	a376      	add	r3, pc, #472	; (adr r3, 800b3b8 <__ieee754_pow+0x720>)
 800b1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e4:	f7f4 fffe 	bl	80001e4 <__adddf3>
 800b1e8:	4622      	mov	r2, r4
 800b1ea:	462b      	mov	r3, r5
 800b1ec:	f7f5 f9b0 	bl	8000550 <__aeabi_dmul>
 800b1f0:	a373      	add	r3, pc, #460	; (adr r3, 800b3c0 <__ieee754_pow+0x728>)
 800b1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f6:	f7f4 fff5 	bl	80001e4 <__adddf3>
 800b1fa:	4622      	mov	r2, r4
 800b1fc:	462b      	mov	r3, r5
 800b1fe:	f7f5 f9a7 	bl	8000550 <__aeabi_dmul>
 800b202:	a371      	add	r3, pc, #452	; (adr r3, 800b3c8 <__ieee754_pow+0x730>)
 800b204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b208:	f7f4 ffec 	bl	80001e4 <__adddf3>
 800b20c:	4622      	mov	r2, r4
 800b20e:	4606      	mov	r6, r0
 800b210:	460f      	mov	r7, r1
 800b212:	462b      	mov	r3, r5
 800b214:	4620      	mov	r0, r4
 800b216:	4629      	mov	r1, r5
 800b218:	f7f5 f99a 	bl	8000550 <__aeabi_dmul>
 800b21c:	4602      	mov	r2, r0
 800b21e:	460b      	mov	r3, r1
 800b220:	4630      	mov	r0, r6
 800b222:	4639      	mov	r1, r7
 800b224:	f7f5 f994 	bl	8000550 <__aeabi_dmul>
 800b228:	4642      	mov	r2, r8
 800b22a:	4604      	mov	r4, r0
 800b22c:	460d      	mov	r5, r1
 800b22e:	464b      	mov	r3, r9
 800b230:	ec51 0b18 	vmov	r0, r1, d8
 800b234:	f7f4 ffd6 	bl	80001e4 <__adddf3>
 800b238:	ec53 2b19 	vmov	r2, r3, d9
 800b23c:	f7f5 f988 	bl	8000550 <__aeabi_dmul>
 800b240:	4622      	mov	r2, r4
 800b242:	462b      	mov	r3, r5
 800b244:	f7f4 ffce 	bl	80001e4 <__adddf3>
 800b248:	4642      	mov	r2, r8
 800b24a:	4682      	mov	sl, r0
 800b24c:	468b      	mov	fp, r1
 800b24e:	464b      	mov	r3, r9
 800b250:	4640      	mov	r0, r8
 800b252:	4649      	mov	r1, r9
 800b254:	f7f5 f97c 	bl	8000550 <__aeabi_dmul>
 800b258:	4b6b      	ldr	r3, [pc, #428]	; (800b408 <__ieee754_pow+0x770>)
 800b25a:	2200      	movs	r2, #0
 800b25c:	4606      	mov	r6, r0
 800b25e:	460f      	mov	r7, r1
 800b260:	f7f4 ffc0 	bl	80001e4 <__adddf3>
 800b264:	4652      	mov	r2, sl
 800b266:	465b      	mov	r3, fp
 800b268:	f7f4 ffbc 	bl	80001e4 <__adddf3>
 800b26c:	2000      	movs	r0, #0
 800b26e:	4604      	mov	r4, r0
 800b270:	460d      	mov	r5, r1
 800b272:	4602      	mov	r2, r0
 800b274:	460b      	mov	r3, r1
 800b276:	4640      	mov	r0, r8
 800b278:	4649      	mov	r1, r9
 800b27a:	f7f5 f969 	bl	8000550 <__aeabi_dmul>
 800b27e:	4b62      	ldr	r3, [pc, #392]	; (800b408 <__ieee754_pow+0x770>)
 800b280:	4680      	mov	r8, r0
 800b282:	4689      	mov	r9, r1
 800b284:	2200      	movs	r2, #0
 800b286:	4620      	mov	r0, r4
 800b288:	4629      	mov	r1, r5
 800b28a:	f7f4 ffa9 	bl	80001e0 <__aeabi_dsub>
 800b28e:	4632      	mov	r2, r6
 800b290:	463b      	mov	r3, r7
 800b292:	f7f4 ffa5 	bl	80001e0 <__aeabi_dsub>
 800b296:	4602      	mov	r2, r0
 800b298:	460b      	mov	r3, r1
 800b29a:	4650      	mov	r0, sl
 800b29c:	4659      	mov	r1, fp
 800b29e:	f7f4 ff9f 	bl	80001e0 <__aeabi_dsub>
 800b2a2:	ec53 2b18 	vmov	r2, r3, d8
 800b2a6:	f7f5 f953 	bl	8000550 <__aeabi_dmul>
 800b2aa:	4622      	mov	r2, r4
 800b2ac:	4606      	mov	r6, r0
 800b2ae:	460f      	mov	r7, r1
 800b2b0:	462b      	mov	r3, r5
 800b2b2:	ec51 0b19 	vmov	r0, r1, d9
 800b2b6:	f7f5 f94b 	bl	8000550 <__aeabi_dmul>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	460b      	mov	r3, r1
 800b2be:	4630      	mov	r0, r6
 800b2c0:	4639      	mov	r1, r7
 800b2c2:	f7f4 ff8f 	bl	80001e4 <__adddf3>
 800b2c6:	4606      	mov	r6, r0
 800b2c8:	460f      	mov	r7, r1
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	4640      	mov	r0, r8
 800b2d0:	4649      	mov	r1, r9
 800b2d2:	f7f4 ff87 	bl	80001e4 <__adddf3>
 800b2d6:	a33e      	add	r3, pc, #248	; (adr r3, 800b3d0 <__ieee754_pow+0x738>)
 800b2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2dc:	2000      	movs	r0, #0
 800b2de:	4604      	mov	r4, r0
 800b2e0:	460d      	mov	r5, r1
 800b2e2:	f7f5 f935 	bl	8000550 <__aeabi_dmul>
 800b2e6:	4642      	mov	r2, r8
 800b2e8:	ec41 0b18 	vmov	d8, r0, r1
 800b2ec:	464b      	mov	r3, r9
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	4629      	mov	r1, r5
 800b2f2:	f7f4 ff75 	bl	80001e0 <__aeabi_dsub>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	4639      	mov	r1, r7
 800b2fe:	f7f4 ff6f 	bl	80001e0 <__aeabi_dsub>
 800b302:	a335      	add	r3, pc, #212	; (adr r3, 800b3d8 <__ieee754_pow+0x740>)
 800b304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b308:	f7f5 f922 	bl	8000550 <__aeabi_dmul>
 800b30c:	a334      	add	r3, pc, #208	; (adr r3, 800b3e0 <__ieee754_pow+0x748>)
 800b30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b312:	4606      	mov	r6, r0
 800b314:	460f      	mov	r7, r1
 800b316:	4620      	mov	r0, r4
 800b318:	4629      	mov	r1, r5
 800b31a:	f7f5 f919 	bl	8000550 <__aeabi_dmul>
 800b31e:	4602      	mov	r2, r0
 800b320:	460b      	mov	r3, r1
 800b322:	4630      	mov	r0, r6
 800b324:	4639      	mov	r1, r7
 800b326:	f7f4 ff5d 	bl	80001e4 <__adddf3>
 800b32a:	9a07      	ldr	r2, [sp, #28]
 800b32c:	4b37      	ldr	r3, [pc, #220]	; (800b40c <__ieee754_pow+0x774>)
 800b32e:	4413      	add	r3, r2
 800b330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b334:	f7f4 ff56 	bl	80001e4 <__adddf3>
 800b338:	4682      	mov	sl, r0
 800b33a:	9805      	ldr	r0, [sp, #20]
 800b33c:	468b      	mov	fp, r1
 800b33e:	f7f5 f89d 	bl	800047c <__aeabi_i2d>
 800b342:	9a07      	ldr	r2, [sp, #28]
 800b344:	4b32      	ldr	r3, [pc, #200]	; (800b410 <__ieee754_pow+0x778>)
 800b346:	4413      	add	r3, r2
 800b348:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b34c:	4606      	mov	r6, r0
 800b34e:	460f      	mov	r7, r1
 800b350:	4652      	mov	r2, sl
 800b352:	465b      	mov	r3, fp
 800b354:	ec51 0b18 	vmov	r0, r1, d8
 800b358:	f7f4 ff44 	bl	80001e4 <__adddf3>
 800b35c:	4642      	mov	r2, r8
 800b35e:	464b      	mov	r3, r9
 800b360:	f7f4 ff40 	bl	80001e4 <__adddf3>
 800b364:	4632      	mov	r2, r6
 800b366:	463b      	mov	r3, r7
 800b368:	f7f4 ff3c 	bl	80001e4 <__adddf3>
 800b36c:	2000      	movs	r0, #0
 800b36e:	4632      	mov	r2, r6
 800b370:	463b      	mov	r3, r7
 800b372:	4604      	mov	r4, r0
 800b374:	460d      	mov	r5, r1
 800b376:	f7f4 ff33 	bl	80001e0 <__aeabi_dsub>
 800b37a:	4642      	mov	r2, r8
 800b37c:	464b      	mov	r3, r9
 800b37e:	f7f4 ff2f 	bl	80001e0 <__aeabi_dsub>
 800b382:	ec53 2b18 	vmov	r2, r3, d8
 800b386:	f7f4 ff2b 	bl	80001e0 <__aeabi_dsub>
 800b38a:	4602      	mov	r2, r0
 800b38c:	460b      	mov	r3, r1
 800b38e:	4650      	mov	r0, sl
 800b390:	4659      	mov	r1, fp
 800b392:	e610      	b.n	800afb6 <__ieee754_pow+0x31e>
 800b394:	2401      	movs	r4, #1
 800b396:	e6a1      	b.n	800b0dc <__ieee754_pow+0x444>
 800b398:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b3e8 <__ieee754_pow+0x750>
 800b39c:	e617      	b.n	800afce <__ieee754_pow+0x336>
 800b39e:	bf00      	nop
 800b3a0:	4a454eef 	.word	0x4a454eef
 800b3a4:	3fca7e28 	.word	0x3fca7e28
 800b3a8:	93c9db65 	.word	0x93c9db65
 800b3ac:	3fcd864a 	.word	0x3fcd864a
 800b3b0:	a91d4101 	.word	0xa91d4101
 800b3b4:	3fd17460 	.word	0x3fd17460
 800b3b8:	518f264d 	.word	0x518f264d
 800b3bc:	3fd55555 	.word	0x3fd55555
 800b3c0:	db6fabff 	.word	0xdb6fabff
 800b3c4:	3fdb6db6 	.word	0x3fdb6db6
 800b3c8:	33333303 	.word	0x33333303
 800b3cc:	3fe33333 	.word	0x3fe33333
 800b3d0:	e0000000 	.word	0xe0000000
 800b3d4:	3feec709 	.word	0x3feec709
 800b3d8:	dc3a03fd 	.word	0xdc3a03fd
 800b3dc:	3feec709 	.word	0x3feec709
 800b3e0:	145b01f5 	.word	0x145b01f5
 800b3e4:	be3e2fe0 	.word	0xbe3e2fe0
 800b3e8:	00000000 	.word	0x00000000
 800b3ec:	3ff00000 	.word	0x3ff00000
 800b3f0:	7ff00000 	.word	0x7ff00000
 800b3f4:	43400000 	.word	0x43400000
 800b3f8:	0003988e 	.word	0x0003988e
 800b3fc:	000bb679 	.word	0x000bb679
 800b400:	0800c810 	.word	0x0800c810
 800b404:	3ff00000 	.word	0x3ff00000
 800b408:	40080000 	.word	0x40080000
 800b40c:	0800c830 	.word	0x0800c830
 800b410:	0800c820 	.word	0x0800c820
 800b414:	a3b5      	add	r3, pc, #724	; (adr r3, 800b6ec <__ieee754_pow+0xa54>)
 800b416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41a:	4640      	mov	r0, r8
 800b41c:	4649      	mov	r1, r9
 800b41e:	f7f4 fee1 	bl	80001e4 <__adddf3>
 800b422:	4622      	mov	r2, r4
 800b424:	ec41 0b1a 	vmov	d10, r0, r1
 800b428:	462b      	mov	r3, r5
 800b42a:	4630      	mov	r0, r6
 800b42c:	4639      	mov	r1, r7
 800b42e:	f7f4 fed7 	bl	80001e0 <__aeabi_dsub>
 800b432:	4602      	mov	r2, r0
 800b434:	460b      	mov	r3, r1
 800b436:	ec51 0b1a 	vmov	r0, r1, d10
 800b43a:	f7f5 fb19 	bl	8000a70 <__aeabi_dcmpgt>
 800b43e:	2800      	cmp	r0, #0
 800b440:	f47f ae04 	bne.w	800b04c <__ieee754_pow+0x3b4>
 800b444:	4aa4      	ldr	r2, [pc, #656]	; (800b6d8 <__ieee754_pow+0xa40>)
 800b446:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b44a:	4293      	cmp	r3, r2
 800b44c:	f340 8108 	ble.w	800b660 <__ieee754_pow+0x9c8>
 800b450:	151b      	asrs	r3, r3, #20
 800b452:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b456:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b45a:	fa4a f303 	asr.w	r3, sl, r3
 800b45e:	445b      	add	r3, fp
 800b460:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b464:	4e9d      	ldr	r6, [pc, #628]	; (800b6dc <__ieee754_pow+0xa44>)
 800b466:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b46a:	4116      	asrs	r6, r2
 800b46c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b470:	2000      	movs	r0, #0
 800b472:	ea23 0106 	bic.w	r1, r3, r6
 800b476:	f1c2 0214 	rsb	r2, r2, #20
 800b47a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b47e:	fa4a fa02 	asr.w	sl, sl, r2
 800b482:	f1bb 0f00 	cmp.w	fp, #0
 800b486:	4602      	mov	r2, r0
 800b488:	460b      	mov	r3, r1
 800b48a:	4620      	mov	r0, r4
 800b48c:	4629      	mov	r1, r5
 800b48e:	bfb8      	it	lt
 800b490:	f1ca 0a00 	rsblt	sl, sl, #0
 800b494:	f7f4 fea4 	bl	80001e0 <__aeabi_dsub>
 800b498:	ec41 0b19 	vmov	d9, r0, r1
 800b49c:	4642      	mov	r2, r8
 800b49e:	464b      	mov	r3, r9
 800b4a0:	ec51 0b19 	vmov	r0, r1, d9
 800b4a4:	f7f4 fe9e 	bl	80001e4 <__adddf3>
 800b4a8:	a37b      	add	r3, pc, #492	; (adr r3, 800b698 <__ieee754_pow+0xa00>)
 800b4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ae:	2000      	movs	r0, #0
 800b4b0:	4604      	mov	r4, r0
 800b4b2:	460d      	mov	r5, r1
 800b4b4:	f7f5 f84c 	bl	8000550 <__aeabi_dmul>
 800b4b8:	ec53 2b19 	vmov	r2, r3, d9
 800b4bc:	4606      	mov	r6, r0
 800b4be:	460f      	mov	r7, r1
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	4629      	mov	r1, r5
 800b4c4:	f7f4 fe8c 	bl	80001e0 <__aeabi_dsub>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	4640      	mov	r0, r8
 800b4ce:	4649      	mov	r1, r9
 800b4d0:	f7f4 fe86 	bl	80001e0 <__aeabi_dsub>
 800b4d4:	a372      	add	r3, pc, #456	; (adr r3, 800b6a0 <__ieee754_pow+0xa08>)
 800b4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4da:	f7f5 f839 	bl	8000550 <__aeabi_dmul>
 800b4de:	a372      	add	r3, pc, #456	; (adr r3, 800b6a8 <__ieee754_pow+0xa10>)
 800b4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e4:	4680      	mov	r8, r0
 800b4e6:	4689      	mov	r9, r1
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	4629      	mov	r1, r5
 800b4ec:	f7f5 f830 	bl	8000550 <__aeabi_dmul>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	4640      	mov	r0, r8
 800b4f6:	4649      	mov	r1, r9
 800b4f8:	f7f4 fe74 	bl	80001e4 <__adddf3>
 800b4fc:	4604      	mov	r4, r0
 800b4fe:	460d      	mov	r5, r1
 800b500:	4602      	mov	r2, r0
 800b502:	460b      	mov	r3, r1
 800b504:	4630      	mov	r0, r6
 800b506:	4639      	mov	r1, r7
 800b508:	f7f4 fe6c 	bl	80001e4 <__adddf3>
 800b50c:	4632      	mov	r2, r6
 800b50e:	463b      	mov	r3, r7
 800b510:	4680      	mov	r8, r0
 800b512:	4689      	mov	r9, r1
 800b514:	f7f4 fe64 	bl	80001e0 <__aeabi_dsub>
 800b518:	4602      	mov	r2, r0
 800b51a:	460b      	mov	r3, r1
 800b51c:	4620      	mov	r0, r4
 800b51e:	4629      	mov	r1, r5
 800b520:	f7f4 fe5e 	bl	80001e0 <__aeabi_dsub>
 800b524:	4642      	mov	r2, r8
 800b526:	4606      	mov	r6, r0
 800b528:	460f      	mov	r7, r1
 800b52a:	464b      	mov	r3, r9
 800b52c:	4640      	mov	r0, r8
 800b52e:	4649      	mov	r1, r9
 800b530:	f7f5 f80e 	bl	8000550 <__aeabi_dmul>
 800b534:	a35e      	add	r3, pc, #376	; (adr r3, 800b6b0 <__ieee754_pow+0xa18>)
 800b536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53a:	4604      	mov	r4, r0
 800b53c:	460d      	mov	r5, r1
 800b53e:	f7f5 f807 	bl	8000550 <__aeabi_dmul>
 800b542:	a35d      	add	r3, pc, #372	; (adr r3, 800b6b8 <__ieee754_pow+0xa20>)
 800b544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b548:	f7f4 fe4a 	bl	80001e0 <__aeabi_dsub>
 800b54c:	4622      	mov	r2, r4
 800b54e:	462b      	mov	r3, r5
 800b550:	f7f4 fffe 	bl	8000550 <__aeabi_dmul>
 800b554:	a35a      	add	r3, pc, #360	; (adr r3, 800b6c0 <__ieee754_pow+0xa28>)
 800b556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55a:	f7f4 fe43 	bl	80001e4 <__adddf3>
 800b55e:	4622      	mov	r2, r4
 800b560:	462b      	mov	r3, r5
 800b562:	f7f4 fff5 	bl	8000550 <__aeabi_dmul>
 800b566:	a358      	add	r3, pc, #352	; (adr r3, 800b6c8 <__ieee754_pow+0xa30>)
 800b568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56c:	f7f4 fe38 	bl	80001e0 <__aeabi_dsub>
 800b570:	4622      	mov	r2, r4
 800b572:	462b      	mov	r3, r5
 800b574:	f7f4 ffec 	bl	8000550 <__aeabi_dmul>
 800b578:	a355      	add	r3, pc, #340	; (adr r3, 800b6d0 <__ieee754_pow+0xa38>)
 800b57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57e:	f7f4 fe31 	bl	80001e4 <__adddf3>
 800b582:	4622      	mov	r2, r4
 800b584:	462b      	mov	r3, r5
 800b586:	f7f4 ffe3 	bl	8000550 <__aeabi_dmul>
 800b58a:	4602      	mov	r2, r0
 800b58c:	460b      	mov	r3, r1
 800b58e:	4640      	mov	r0, r8
 800b590:	4649      	mov	r1, r9
 800b592:	f7f4 fe25 	bl	80001e0 <__aeabi_dsub>
 800b596:	4604      	mov	r4, r0
 800b598:	460d      	mov	r5, r1
 800b59a:	4602      	mov	r2, r0
 800b59c:	460b      	mov	r3, r1
 800b59e:	4640      	mov	r0, r8
 800b5a0:	4649      	mov	r1, r9
 800b5a2:	f7f4 ffd5 	bl	8000550 <__aeabi_dmul>
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	ec41 0b19 	vmov	d9, r0, r1
 800b5ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	4629      	mov	r1, r5
 800b5b4:	f7f4 fe14 	bl	80001e0 <__aeabi_dsub>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	ec51 0b19 	vmov	r0, r1, d9
 800b5c0:	f7f5 f8f0 	bl	80007a4 <__aeabi_ddiv>
 800b5c4:	4632      	mov	r2, r6
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	460d      	mov	r5, r1
 800b5ca:	463b      	mov	r3, r7
 800b5cc:	4640      	mov	r0, r8
 800b5ce:	4649      	mov	r1, r9
 800b5d0:	f7f4 ffbe 	bl	8000550 <__aeabi_dmul>
 800b5d4:	4632      	mov	r2, r6
 800b5d6:	463b      	mov	r3, r7
 800b5d8:	f7f4 fe04 	bl	80001e4 <__adddf3>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	460b      	mov	r3, r1
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	4629      	mov	r1, r5
 800b5e4:	f7f4 fdfc 	bl	80001e0 <__aeabi_dsub>
 800b5e8:	4642      	mov	r2, r8
 800b5ea:	464b      	mov	r3, r9
 800b5ec:	f7f4 fdf8 	bl	80001e0 <__aeabi_dsub>
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	493a      	ldr	r1, [pc, #232]	; (800b6e0 <__ieee754_pow+0xa48>)
 800b5f6:	2000      	movs	r0, #0
 800b5f8:	f7f4 fdf2 	bl	80001e0 <__aeabi_dsub>
 800b5fc:	ec41 0b10 	vmov	d0, r0, r1
 800b600:	ee10 3a90 	vmov	r3, s1
 800b604:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b608:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b60c:	da2b      	bge.n	800b666 <__ieee754_pow+0x9ce>
 800b60e:	4650      	mov	r0, sl
 800b610:	f001 f856 	bl	800c6c0 <scalbn>
 800b614:	ec51 0b10 	vmov	r0, r1, d0
 800b618:	ec53 2b18 	vmov	r2, r3, d8
 800b61c:	f7ff bbed 	b.w	800adfa <__ieee754_pow+0x162>
 800b620:	4b30      	ldr	r3, [pc, #192]	; (800b6e4 <__ieee754_pow+0xa4c>)
 800b622:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b626:	429e      	cmp	r6, r3
 800b628:	f77f af0c 	ble.w	800b444 <__ieee754_pow+0x7ac>
 800b62c:	4b2e      	ldr	r3, [pc, #184]	; (800b6e8 <__ieee754_pow+0xa50>)
 800b62e:	440b      	add	r3, r1
 800b630:	4303      	orrs	r3, r0
 800b632:	d009      	beq.n	800b648 <__ieee754_pow+0x9b0>
 800b634:	ec51 0b18 	vmov	r0, r1, d8
 800b638:	2200      	movs	r2, #0
 800b63a:	2300      	movs	r3, #0
 800b63c:	f7f5 f9fa 	bl	8000a34 <__aeabi_dcmplt>
 800b640:	3800      	subs	r0, #0
 800b642:	bf18      	it	ne
 800b644:	2001      	movne	r0, #1
 800b646:	e447      	b.n	800aed8 <__ieee754_pow+0x240>
 800b648:	4622      	mov	r2, r4
 800b64a:	462b      	mov	r3, r5
 800b64c:	f7f4 fdc8 	bl	80001e0 <__aeabi_dsub>
 800b650:	4642      	mov	r2, r8
 800b652:	464b      	mov	r3, r9
 800b654:	f7f5 fa02 	bl	8000a5c <__aeabi_dcmpge>
 800b658:	2800      	cmp	r0, #0
 800b65a:	f43f aef3 	beq.w	800b444 <__ieee754_pow+0x7ac>
 800b65e:	e7e9      	b.n	800b634 <__ieee754_pow+0x99c>
 800b660:	f04f 0a00 	mov.w	sl, #0
 800b664:	e71a      	b.n	800b49c <__ieee754_pow+0x804>
 800b666:	ec51 0b10 	vmov	r0, r1, d0
 800b66a:	4619      	mov	r1, r3
 800b66c:	e7d4      	b.n	800b618 <__ieee754_pow+0x980>
 800b66e:	491c      	ldr	r1, [pc, #112]	; (800b6e0 <__ieee754_pow+0xa48>)
 800b670:	2000      	movs	r0, #0
 800b672:	f7ff bb30 	b.w	800acd6 <__ieee754_pow+0x3e>
 800b676:	2000      	movs	r0, #0
 800b678:	2100      	movs	r1, #0
 800b67a:	f7ff bb2c 	b.w	800acd6 <__ieee754_pow+0x3e>
 800b67e:	4630      	mov	r0, r6
 800b680:	4639      	mov	r1, r7
 800b682:	f7ff bb28 	b.w	800acd6 <__ieee754_pow+0x3e>
 800b686:	9204      	str	r2, [sp, #16]
 800b688:	f7ff bb7a 	b.w	800ad80 <__ieee754_pow+0xe8>
 800b68c:	2300      	movs	r3, #0
 800b68e:	f7ff bb64 	b.w	800ad5a <__ieee754_pow+0xc2>
 800b692:	bf00      	nop
 800b694:	f3af 8000 	nop.w
 800b698:	00000000 	.word	0x00000000
 800b69c:	3fe62e43 	.word	0x3fe62e43
 800b6a0:	fefa39ef 	.word	0xfefa39ef
 800b6a4:	3fe62e42 	.word	0x3fe62e42
 800b6a8:	0ca86c39 	.word	0x0ca86c39
 800b6ac:	be205c61 	.word	0xbe205c61
 800b6b0:	72bea4d0 	.word	0x72bea4d0
 800b6b4:	3e663769 	.word	0x3e663769
 800b6b8:	c5d26bf1 	.word	0xc5d26bf1
 800b6bc:	3ebbbd41 	.word	0x3ebbbd41
 800b6c0:	af25de2c 	.word	0xaf25de2c
 800b6c4:	3f11566a 	.word	0x3f11566a
 800b6c8:	16bebd93 	.word	0x16bebd93
 800b6cc:	3f66c16c 	.word	0x3f66c16c
 800b6d0:	5555553e 	.word	0x5555553e
 800b6d4:	3fc55555 	.word	0x3fc55555
 800b6d8:	3fe00000 	.word	0x3fe00000
 800b6dc:	000fffff 	.word	0x000fffff
 800b6e0:	3ff00000 	.word	0x3ff00000
 800b6e4:	4090cbff 	.word	0x4090cbff
 800b6e8:	3f6f3400 	.word	0x3f6f3400
 800b6ec:	652b82fe 	.word	0x652b82fe
 800b6f0:	3c971547 	.word	0x3c971547
 800b6f4:	00000000 	.word	0x00000000

0800b6f8 <__ieee754_rem_pio2>:
 800b6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6fc:	ed2d 8b02 	vpush	{d8}
 800b700:	ec55 4b10 	vmov	r4, r5, d0
 800b704:	4bca      	ldr	r3, [pc, #808]	; (800ba30 <__ieee754_rem_pio2+0x338>)
 800b706:	b08b      	sub	sp, #44	; 0x2c
 800b708:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b70c:	4598      	cmp	r8, r3
 800b70e:	4682      	mov	sl, r0
 800b710:	9502      	str	r5, [sp, #8]
 800b712:	dc08      	bgt.n	800b726 <__ieee754_rem_pio2+0x2e>
 800b714:	2200      	movs	r2, #0
 800b716:	2300      	movs	r3, #0
 800b718:	ed80 0b00 	vstr	d0, [r0]
 800b71c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b720:	f04f 0b00 	mov.w	fp, #0
 800b724:	e028      	b.n	800b778 <__ieee754_rem_pio2+0x80>
 800b726:	4bc3      	ldr	r3, [pc, #780]	; (800ba34 <__ieee754_rem_pio2+0x33c>)
 800b728:	4598      	cmp	r8, r3
 800b72a:	dc78      	bgt.n	800b81e <__ieee754_rem_pio2+0x126>
 800b72c:	9b02      	ldr	r3, [sp, #8]
 800b72e:	4ec2      	ldr	r6, [pc, #776]	; (800ba38 <__ieee754_rem_pio2+0x340>)
 800b730:	2b00      	cmp	r3, #0
 800b732:	ee10 0a10 	vmov	r0, s0
 800b736:	a3b0      	add	r3, pc, #704	; (adr r3, 800b9f8 <__ieee754_rem_pio2+0x300>)
 800b738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73c:	4629      	mov	r1, r5
 800b73e:	dd39      	ble.n	800b7b4 <__ieee754_rem_pio2+0xbc>
 800b740:	f7f4 fd4e 	bl	80001e0 <__aeabi_dsub>
 800b744:	45b0      	cmp	r8, r6
 800b746:	4604      	mov	r4, r0
 800b748:	460d      	mov	r5, r1
 800b74a:	d01b      	beq.n	800b784 <__ieee754_rem_pio2+0x8c>
 800b74c:	a3ac      	add	r3, pc, #688	; (adr r3, 800ba00 <__ieee754_rem_pio2+0x308>)
 800b74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b752:	f7f4 fd45 	bl	80001e0 <__aeabi_dsub>
 800b756:	4602      	mov	r2, r0
 800b758:	460b      	mov	r3, r1
 800b75a:	e9ca 2300 	strd	r2, r3, [sl]
 800b75e:	4620      	mov	r0, r4
 800b760:	4629      	mov	r1, r5
 800b762:	f7f4 fd3d 	bl	80001e0 <__aeabi_dsub>
 800b766:	a3a6      	add	r3, pc, #664	; (adr r3, 800ba00 <__ieee754_rem_pio2+0x308>)
 800b768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76c:	f7f4 fd38 	bl	80001e0 <__aeabi_dsub>
 800b770:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b774:	f04f 0b01 	mov.w	fp, #1
 800b778:	4658      	mov	r0, fp
 800b77a:	b00b      	add	sp, #44	; 0x2c
 800b77c:	ecbd 8b02 	vpop	{d8}
 800b780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b784:	a3a0      	add	r3, pc, #640	; (adr r3, 800ba08 <__ieee754_rem_pio2+0x310>)
 800b786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78a:	f7f4 fd29 	bl	80001e0 <__aeabi_dsub>
 800b78e:	a3a0      	add	r3, pc, #640	; (adr r3, 800ba10 <__ieee754_rem_pio2+0x318>)
 800b790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b794:	4604      	mov	r4, r0
 800b796:	460d      	mov	r5, r1
 800b798:	f7f4 fd22 	bl	80001e0 <__aeabi_dsub>
 800b79c:	4602      	mov	r2, r0
 800b79e:	460b      	mov	r3, r1
 800b7a0:	e9ca 2300 	strd	r2, r3, [sl]
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	4629      	mov	r1, r5
 800b7a8:	f7f4 fd1a 	bl	80001e0 <__aeabi_dsub>
 800b7ac:	a398      	add	r3, pc, #608	; (adr r3, 800ba10 <__ieee754_rem_pio2+0x318>)
 800b7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b2:	e7db      	b.n	800b76c <__ieee754_rem_pio2+0x74>
 800b7b4:	f7f4 fd16 	bl	80001e4 <__adddf3>
 800b7b8:	45b0      	cmp	r8, r6
 800b7ba:	4604      	mov	r4, r0
 800b7bc:	460d      	mov	r5, r1
 800b7be:	d016      	beq.n	800b7ee <__ieee754_rem_pio2+0xf6>
 800b7c0:	a38f      	add	r3, pc, #572	; (adr r3, 800ba00 <__ieee754_rem_pio2+0x308>)
 800b7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c6:	f7f4 fd0d 	bl	80001e4 <__adddf3>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	e9ca 2300 	strd	r2, r3, [sl]
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	4629      	mov	r1, r5
 800b7d6:	f7f4 fd03 	bl	80001e0 <__aeabi_dsub>
 800b7da:	a389      	add	r3, pc, #548	; (adr r3, 800ba00 <__ieee754_rem_pio2+0x308>)
 800b7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e0:	f7f4 fd00 	bl	80001e4 <__adddf3>
 800b7e4:	f04f 3bff 	mov.w	fp, #4294967295
 800b7e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b7ec:	e7c4      	b.n	800b778 <__ieee754_rem_pio2+0x80>
 800b7ee:	a386      	add	r3, pc, #536	; (adr r3, 800ba08 <__ieee754_rem_pio2+0x310>)
 800b7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f4:	f7f4 fcf6 	bl	80001e4 <__adddf3>
 800b7f8:	a385      	add	r3, pc, #532	; (adr r3, 800ba10 <__ieee754_rem_pio2+0x318>)
 800b7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fe:	4604      	mov	r4, r0
 800b800:	460d      	mov	r5, r1
 800b802:	f7f4 fcef 	bl	80001e4 <__adddf3>
 800b806:	4602      	mov	r2, r0
 800b808:	460b      	mov	r3, r1
 800b80a:	e9ca 2300 	strd	r2, r3, [sl]
 800b80e:	4620      	mov	r0, r4
 800b810:	4629      	mov	r1, r5
 800b812:	f7f4 fce5 	bl	80001e0 <__aeabi_dsub>
 800b816:	a37e      	add	r3, pc, #504	; (adr r3, 800ba10 <__ieee754_rem_pio2+0x318>)
 800b818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81c:	e7e0      	b.n	800b7e0 <__ieee754_rem_pio2+0xe8>
 800b81e:	4b87      	ldr	r3, [pc, #540]	; (800ba3c <__ieee754_rem_pio2+0x344>)
 800b820:	4598      	cmp	r8, r3
 800b822:	f300 80d9 	bgt.w	800b9d8 <__ieee754_rem_pio2+0x2e0>
 800b826:	f000 ff2d 	bl	800c684 <fabs>
 800b82a:	ec55 4b10 	vmov	r4, r5, d0
 800b82e:	ee10 0a10 	vmov	r0, s0
 800b832:	a379      	add	r3, pc, #484	; (adr r3, 800ba18 <__ieee754_rem_pio2+0x320>)
 800b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b838:	4629      	mov	r1, r5
 800b83a:	f7f4 fe89 	bl	8000550 <__aeabi_dmul>
 800b83e:	4b80      	ldr	r3, [pc, #512]	; (800ba40 <__ieee754_rem_pio2+0x348>)
 800b840:	2200      	movs	r2, #0
 800b842:	f7f4 fccf 	bl	80001e4 <__adddf3>
 800b846:	f7f5 f933 	bl	8000ab0 <__aeabi_d2iz>
 800b84a:	4683      	mov	fp, r0
 800b84c:	f7f4 fe16 	bl	800047c <__aeabi_i2d>
 800b850:	4602      	mov	r2, r0
 800b852:	460b      	mov	r3, r1
 800b854:	ec43 2b18 	vmov	d8, r2, r3
 800b858:	a367      	add	r3, pc, #412	; (adr r3, 800b9f8 <__ieee754_rem_pio2+0x300>)
 800b85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85e:	f7f4 fe77 	bl	8000550 <__aeabi_dmul>
 800b862:	4602      	mov	r2, r0
 800b864:	460b      	mov	r3, r1
 800b866:	4620      	mov	r0, r4
 800b868:	4629      	mov	r1, r5
 800b86a:	f7f4 fcb9 	bl	80001e0 <__aeabi_dsub>
 800b86e:	a364      	add	r3, pc, #400	; (adr r3, 800ba00 <__ieee754_rem_pio2+0x308>)
 800b870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b874:	4606      	mov	r6, r0
 800b876:	460f      	mov	r7, r1
 800b878:	ec51 0b18 	vmov	r0, r1, d8
 800b87c:	f7f4 fe68 	bl	8000550 <__aeabi_dmul>
 800b880:	f1bb 0f1f 	cmp.w	fp, #31
 800b884:	4604      	mov	r4, r0
 800b886:	460d      	mov	r5, r1
 800b888:	dc0d      	bgt.n	800b8a6 <__ieee754_rem_pio2+0x1ae>
 800b88a:	4b6e      	ldr	r3, [pc, #440]	; (800ba44 <__ieee754_rem_pio2+0x34c>)
 800b88c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b894:	4543      	cmp	r3, r8
 800b896:	d006      	beq.n	800b8a6 <__ieee754_rem_pio2+0x1ae>
 800b898:	4622      	mov	r2, r4
 800b89a:	462b      	mov	r3, r5
 800b89c:	4630      	mov	r0, r6
 800b89e:	4639      	mov	r1, r7
 800b8a0:	f7f4 fc9e 	bl	80001e0 <__aeabi_dsub>
 800b8a4:	e00f      	b.n	800b8c6 <__ieee754_rem_pio2+0x1ce>
 800b8a6:	462b      	mov	r3, r5
 800b8a8:	4622      	mov	r2, r4
 800b8aa:	4630      	mov	r0, r6
 800b8ac:	4639      	mov	r1, r7
 800b8ae:	f7f4 fc97 	bl	80001e0 <__aeabi_dsub>
 800b8b2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b8b6:	9303      	str	r3, [sp, #12]
 800b8b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b8bc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b8c0:	f1b8 0f10 	cmp.w	r8, #16
 800b8c4:	dc02      	bgt.n	800b8cc <__ieee754_rem_pio2+0x1d4>
 800b8c6:	e9ca 0100 	strd	r0, r1, [sl]
 800b8ca:	e039      	b.n	800b940 <__ieee754_rem_pio2+0x248>
 800b8cc:	a34e      	add	r3, pc, #312	; (adr r3, 800ba08 <__ieee754_rem_pio2+0x310>)
 800b8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d2:	ec51 0b18 	vmov	r0, r1, d8
 800b8d6:	f7f4 fe3b 	bl	8000550 <__aeabi_dmul>
 800b8da:	4604      	mov	r4, r0
 800b8dc:	460d      	mov	r5, r1
 800b8de:	4602      	mov	r2, r0
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	4630      	mov	r0, r6
 800b8e4:	4639      	mov	r1, r7
 800b8e6:	f7f4 fc7b 	bl	80001e0 <__aeabi_dsub>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	4680      	mov	r8, r0
 800b8f0:	4689      	mov	r9, r1
 800b8f2:	4630      	mov	r0, r6
 800b8f4:	4639      	mov	r1, r7
 800b8f6:	f7f4 fc73 	bl	80001e0 <__aeabi_dsub>
 800b8fa:	4622      	mov	r2, r4
 800b8fc:	462b      	mov	r3, r5
 800b8fe:	f7f4 fc6f 	bl	80001e0 <__aeabi_dsub>
 800b902:	a343      	add	r3, pc, #268	; (adr r3, 800ba10 <__ieee754_rem_pio2+0x318>)
 800b904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b908:	4604      	mov	r4, r0
 800b90a:	460d      	mov	r5, r1
 800b90c:	ec51 0b18 	vmov	r0, r1, d8
 800b910:	f7f4 fe1e 	bl	8000550 <__aeabi_dmul>
 800b914:	4622      	mov	r2, r4
 800b916:	462b      	mov	r3, r5
 800b918:	f7f4 fc62 	bl	80001e0 <__aeabi_dsub>
 800b91c:	4602      	mov	r2, r0
 800b91e:	460b      	mov	r3, r1
 800b920:	4604      	mov	r4, r0
 800b922:	460d      	mov	r5, r1
 800b924:	4640      	mov	r0, r8
 800b926:	4649      	mov	r1, r9
 800b928:	f7f4 fc5a 	bl	80001e0 <__aeabi_dsub>
 800b92c:	9a03      	ldr	r2, [sp, #12]
 800b92e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b932:	1ad3      	subs	r3, r2, r3
 800b934:	2b31      	cmp	r3, #49	; 0x31
 800b936:	dc24      	bgt.n	800b982 <__ieee754_rem_pio2+0x28a>
 800b938:	e9ca 0100 	strd	r0, r1, [sl]
 800b93c:	4646      	mov	r6, r8
 800b93e:	464f      	mov	r7, r9
 800b940:	e9da 8900 	ldrd	r8, r9, [sl]
 800b944:	4630      	mov	r0, r6
 800b946:	4642      	mov	r2, r8
 800b948:	464b      	mov	r3, r9
 800b94a:	4639      	mov	r1, r7
 800b94c:	f7f4 fc48 	bl	80001e0 <__aeabi_dsub>
 800b950:	462b      	mov	r3, r5
 800b952:	4622      	mov	r2, r4
 800b954:	f7f4 fc44 	bl	80001e0 <__aeabi_dsub>
 800b958:	9b02      	ldr	r3, [sp, #8]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b960:	f6bf af0a 	bge.w	800b778 <__ieee754_rem_pio2+0x80>
 800b964:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b968:	f8ca 3004 	str.w	r3, [sl, #4]
 800b96c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b970:	f8ca 8000 	str.w	r8, [sl]
 800b974:	f8ca 0008 	str.w	r0, [sl, #8]
 800b978:	f8ca 300c 	str.w	r3, [sl, #12]
 800b97c:	f1cb 0b00 	rsb	fp, fp, #0
 800b980:	e6fa      	b.n	800b778 <__ieee754_rem_pio2+0x80>
 800b982:	a327      	add	r3, pc, #156	; (adr r3, 800ba20 <__ieee754_rem_pio2+0x328>)
 800b984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b988:	ec51 0b18 	vmov	r0, r1, d8
 800b98c:	f7f4 fde0 	bl	8000550 <__aeabi_dmul>
 800b990:	4604      	mov	r4, r0
 800b992:	460d      	mov	r5, r1
 800b994:	4602      	mov	r2, r0
 800b996:	460b      	mov	r3, r1
 800b998:	4640      	mov	r0, r8
 800b99a:	4649      	mov	r1, r9
 800b99c:	f7f4 fc20 	bl	80001e0 <__aeabi_dsub>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	4606      	mov	r6, r0
 800b9a6:	460f      	mov	r7, r1
 800b9a8:	4640      	mov	r0, r8
 800b9aa:	4649      	mov	r1, r9
 800b9ac:	f7f4 fc18 	bl	80001e0 <__aeabi_dsub>
 800b9b0:	4622      	mov	r2, r4
 800b9b2:	462b      	mov	r3, r5
 800b9b4:	f7f4 fc14 	bl	80001e0 <__aeabi_dsub>
 800b9b8:	a31b      	add	r3, pc, #108	; (adr r3, 800ba28 <__ieee754_rem_pio2+0x330>)
 800b9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9be:	4604      	mov	r4, r0
 800b9c0:	460d      	mov	r5, r1
 800b9c2:	ec51 0b18 	vmov	r0, r1, d8
 800b9c6:	f7f4 fdc3 	bl	8000550 <__aeabi_dmul>
 800b9ca:	4622      	mov	r2, r4
 800b9cc:	462b      	mov	r3, r5
 800b9ce:	f7f4 fc07 	bl	80001e0 <__aeabi_dsub>
 800b9d2:	4604      	mov	r4, r0
 800b9d4:	460d      	mov	r5, r1
 800b9d6:	e75f      	b.n	800b898 <__ieee754_rem_pio2+0x1a0>
 800b9d8:	4b1b      	ldr	r3, [pc, #108]	; (800ba48 <__ieee754_rem_pio2+0x350>)
 800b9da:	4598      	cmp	r8, r3
 800b9dc:	dd36      	ble.n	800ba4c <__ieee754_rem_pio2+0x354>
 800b9de:	ee10 2a10 	vmov	r2, s0
 800b9e2:	462b      	mov	r3, r5
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	4629      	mov	r1, r5
 800b9e8:	f7f4 fbfa 	bl	80001e0 <__aeabi_dsub>
 800b9ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b9f0:	e9ca 0100 	strd	r0, r1, [sl]
 800b9f4:	e694      	b.n	800b720 <__ieee754_rem_pio2+0x28>
 800b9f6:	bf00      	nop
 800b9f8:	54400000 	.word	0x54400000
 800b9fc:	3ff921fb 	.word	0x3ff921fb
 800ba00:	1a626331 	.word	0x1a626331
 800ba04:	3dd0b461 	.word	0x3dd0b461
 800ba08:	1a600000 	.word	0x1a600000
 800ba0c:	3dd0b461 	.word	0x3dd0b461
 800ba10:	2e037073 	.word	0x2e037073
 800ba14:	3ba3198a 	.word	0x3ba3198a
 800ba18:	6dc9c883 	.word	0x6dc9c883
 800ba1c:	3fe45f30 	.word	0x3fe45f30
 800ba20:	2e000000 	.word	0x2e000000
 800ba24:	3ba3198a 	.word	0x3ba3198a
 800ba28:	252049c1 	.word	0x252049c1
 800ba2c:	397b839a 	.word	0x397b839a
 800ba30:	3fe921fb 	.word	0x3fe921fb
 800ba34:	4002d97b 	.word	0x4002d97b
 800ba38:	3ff921fb 	.word	0x3ff921fb
 800ba3c:	413921fb 	.word	0x413921fb
 800ba40:	3fe00000 	.word	0x3fe00000
 800ba44:	0800c840 	.word	0x0800c840
 800ba48:	7fefffff 	.word	0x7fefffff
 800ba4c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ba50:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ba54:	ee10 0a10 	vmov	r0, s0
 800ba58:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ba5c:	ee10 6a10 	vmov	r6, s0
 800ba60:	460f      	mov	r7, r1
 800ba62:	f7f5 f825 	bl	8000ab0 <__aeabi_d2iz>
 800ba66:	f7f4 fd09 	bl	800047c <__aeabi_i2d>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	4630      	mov	r0, r6
 800ba70:	4639      	mov	r1, r7
 800ba72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ba76:	f7f4 fbb3 	bl	80001e0 <__aeabi_dsub>
 800ba7a:	4b23      	ldr	r3, [pc, #140]	; (800bb08 <__ieee754_rem_pio2+0x410>)
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	f7f4 fd67 	bl	8000550 <__aeabi_dmul>
 800ba82:	460f      	mov	r7, r1
 800ba84:	4606      	mov	r6, r0
 800ba86:	f7f5 f813 	bl	8000ab0 <__aeabi_d2iz>
 800ba8a:	f7f4 fcf7 	bl	800047c <__aeabi_i2d>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	460b      	mov	r3, r1
 800ba92:	4630      	mov	r0, r6
 800ba94:	4639      	mov	r1, r7
 800ba96:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ba9a:	f7f4 fba1 	bl	80001e0 <__aeabi_dsub>
 800ba9e:	4b1a      	ldr	r3, [pc, #104]	; (800bb08 <__ieee754_rem_pio2+0x410>)
 800baa0:	2200      	movs	r2, #0
 800baa2:	f7f4 fd55 	bl	8000550 <__aeabi_dmul>
 800baa6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800baaa:	ad04      	add	r5, sp, #16
 800baac:	f04f 0803 	mov.w	r8, #3
 800bab0:	46a9      	mov	r9, r5
 800bab2:	2600      	movs	r6, #0
 800bab4:	2700      	movs	r7, #0
 800bab6:	4632      	mov	r2, r6
 800bab8:	463b      	mov	r3, r7
 800baba:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800babe:	46c3      	mov	fp, r8
 800bac0:	3d08      	subs	r5, #8
 800bac2:	f108 38ff 	add.w	r8, r8, #4294967295
 800bac6:	f7f4 ffab 	bl	8000a20 <__aeabi_dcmpeq>
 800baca:	2800      	cmp	r0, #0
 800bacc:	d1f3      	bne.n	800bab6 <__ieee754_rem_pio2+0x3be>
 800bace:	4b0f      	ldr	r3, [pc, #60]	; (800bb0c <__ieee754_rem_pio2+0x414>)
 800bad0:	9301      	str	r3, [sp, #4]
 800bad2:	2302      	movs	r3, #2
 800bad4:	9300      	str	r3, [sp, #0]
 800bad6:	4622      	mov	r2, r4
 800bad8:	465b      	mov	r3, fp
 800bada:	4651      	mov	r1, sl
 800badc:	4648      	mov	r0, r9
 800bade:	f000 f993 	bl	800be08 <__kernel_rem_pio2>
 800bae2:	9b02      	ldr	r3, [sp, #8]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	4683      	mov	fp, r0
 800bae8:	f6bf ae46 	bge.w	800b778 <__ieee754_rem_pio2+0x80>
 800baec:	e9da 2100 	ldrd	r2, r1, [sl]
 800baf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800baf4:	e9ca 2300 	strd	r2, r3, [sl]
 800baf8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800bafc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb00:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800bb04:	e73a      	b.n	800b97c <__ieee754_rem_pio2+0x284>
 800bb06:	bf00      	nop
 800bb08:	41700000 	.word	0x41700000
 800bb0c:	0800c8c0 	.word	0x0800c8c0

0800bb10 <__ieee754_sqrt>:
 800bb10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb14:	ec55 4b10 	vmov	r4, r5, d0
 800bb18:	4e55      	ldr	r6, [pc, #340]	; (800bc70 <__ieee754_sqrt+0x160>)
 800bb1a:	43ae      	bics	r6, r5
 800bb1c:	ee10 0a10 	vmov	r0, s0
 800bb20:	ee10 3a10 	vmov	r3, s0
 800bb24:	462a      	mov	r2, r5
 800bb26:	4629      	mov	r1, r5
 800bb28:	d110      	bne.n	800bb4c <__ieee754_sqrt+0x3c>
 800bb2a:	ee10 2a10 	vmov	r2, s0
 800bb2e:	462b      	mov	r3, r5
 800bb30:	f7f4 fd0e 	bl	8000550 <__aeabi_dmul>
 800bb34:	4602      	mov	r2, r0
 800bb36:	460b      	mov	r3, r1
 800bb38:	4620      	mov	r0, r4
 800bb3a:	4629      	mov	r1, r5
 800bb3c:	f7f4 fb52 	bl	80001e4 <__adddf3>
 800bb40:	4604      	mov	r4, r0
 800bb42:	460d      	mov	r5, r1
 800bb44:	ec45 4b10 	vmov	d0, r4, r5
 800bb48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb4c:	2d00      	cmp	r5, #0
 800bb4e:	dc10      	bgt.n	800bb72 <__ieee754_sqrt+0x62>
 800bb50:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bb54:	4330      	orrs	r0, r6
 800bb56:	d0f5      	beq.n	800bb44 <__ieee754_sqrt+0x34>
 800bb58:	b15d      	cbz	r5, 800bb72 <__ieee754_sqrt+0x62>
 800bb5a:	ee10 2a10 	vmov	r2, s0
 800bb5e:	462b      	mov	r3, r5
 800bb60:	ee10 0a10 	vmov	r0, s0
 800bb64:	f7f4 fb3c 	bl	80001e0 <__aeabi_dsub>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	f7f4 fe1a 	bl	80007a4 <__aeabi_ddiv>
 800bb70:	e7e6      	b.n	800bb40 <__ieee754_sqrt+0x30>
 800bb72:	1512      	asrs	r2, r2, #20
 800bb74:	d074      	beq.n	800bc60 <__ieee754_sqrt+0x150>
 800bb76:	07d4      	lsls	r4, r2, #31
 800bb78:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800bb7c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800bb80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bb84:	bf5e      	ittt	pl
 800bb86:	0fda      	lsrpl	r2, r3, #31
 800bb88:	005b      	lslpl	r3, r3, #1
 800bb8a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800bb8e:	2400      	movs	r4, #0
 800bb90:	0fda      	lsrs	r2, r3, #31
 800bb92:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800bb96:	107f      	asrs	r7, r7, #1
 800bb98:	005b      	lsls	r3, r3, #1
 800bb9a:	2516      	movs	r5, #22
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800bba2:	1886      	adds	r6, r0, r2
 800bba4:	428e      	cmp	r6, r1
 800bba6:	bfde      	ittt	le
 800bba8:	1b89      	suble	r1, r1, r6
 800bbaa:	18b0      	addle	r0, r6, r2
 800bbac:	18a4      	addle	r4, r4, r2
 800bbae:	0049      	lsls	r1, r1, #1
 800bbb0:	3d01      	subs	r5, #1
 800bbb2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800bbb6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800bbba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bbbe:	d1f0      	bne.n	800bba2 <__ieee754_sqrt+0x92>
 800bbc0:	462a      	mov	r2, r5
 800bbc2:	f04f 0e20 	mov.w	lr, #32
 800bbc6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bbca:	4281      	cmp	r1, r0
 800bbcc:	eb06 0c05 	add.w	ip, r6, r5
 800bbd0:	dc02      	bgt.n	800bbd8 <__ieee754_sqrt+0xc8>
 800bbd2:	d113      	bne.n	800bbfc <__ieee754_sqrt+0xec>
 800bbd4:	459c      	cmp	ip, r3
 800bbd6:	d811      	bhi.n	800bbfc <__ieee754_sqrt+0xec>
 800bbd8:	f1bc 0f00 	cmp.w	ip, #0
 800bbdc:	eb0c 0506 	add.w	r5, ip, r6
 800bbe0:	da43      	bge.n	800bc6a <__ieee754_sqrt+0x15a>
 800bbe2:	2d00      	cmp	r5, #0
 800bbe4:	db41      	blt.n	800bc6a <__ieee754_sqrt+0x15a>
 800bbe6:	f100 0801 	add.w	r8, r0, #1
 800bbea:	1a09      	subs	r1, r1, r0
 800bbec:	459c      	cmp	ip, r3
 800bbee:	bf88      	it	hi
 800bbf0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800bbf4:	eba3 030c 	sub.w	r3, r3, ip
 800bbf8:	4432      	add	r2, r6
 800bbfa:	4640      	mov	r0, r8
 800bbfc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800bc00:	f1be 0e01 	subs.w	lr, lr, #1
 800bc04:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800bc08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bc0c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bc10:	d1db      	bne.n	800bbca <__ieee754_sqrt+0xba>
 800bc12:	430b      	orrs	r3, r1
 800bc14:	d006      	beq.n	800bc24 <__ieee754_sqrt+0x114>
 800bc16:	1c50      	adds	r0, r2, #1
 800bc18:	bf13      	iteet	ne
 800bc1a:	3201      	addne	r2, #1
 800bc1c:	3401      	addeq	r4, #1
 800bc1e:	4672      	moveq	r2, lr
 800bc20:	f022 0201 	bicne.w	r2, r2, #1
 800bc24:	1063      	asrs	r3, r4, #1
 800bc26:	0852      	lsrs	r2, r2, #1
 800bc28:	07e1      	lsls	r1, r4, #31
 800bc2a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bc2e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bc32:	bf48      	it	mi
 800bc34:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800bc38:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800bc3c:	4614      	mov	r4, r2
 800bc3e:	e781      	b.n	800bb44 <__ieee754_sqrt+0x34>
 800bc40:	0ad9      	lsrs	r1, r3, #11
 800bc42:	3815      	subs	r0, #21
 800bc44:	055b      	lsls	r3, r3, #21
 800bc46:	2900      	cmp	r1, #0
 800bc48:	d0fa      	beq.n	800bc40 <__ieee754_sqrt+0x130>
 800bc4a:	02cd      	lsls	r5, r1, #11
 800bc4c:	d50a      	bpl.n	800bc64 <__ieee754_sqrt+0x154>
 800bc4e:	f1c2 0420 	rsb	r4, r2, #32
 800bc52:	fa23 f404 	lsr.w	r4, r3, r4
 800bc56:	1e55      	subs	r5, r2, #1
 800bc58:	4093      	lsls	r3, r2
 800bc5a:	4321      	orrs	r1, r4
 800bc5c:	1b42      	subs	r2, r0, r5
 800bc5e:	e78a      	b.n	800bb76 <__ieee754_sqrt+0x66>
 800bc60:	4610      	mov	r0, r2
 800bc62:	e7f0      	b.n	800bc46 <__ieee754_sqrt+0x136>
 800bc64:	0049      	lsls	r1, r1, #1
 800bc66:	3201      	adds	r2, #1
 800bc68:	e7ef      	b.n	800bc4a <__ieee754_sqrt+0x13a>
 800bc6a:	4680      	mov	r8, r0
 800bc6c:	e7bd      	b.n	800bbea <__ieee754_sqrt+0xda>
 800bc6e:	bf00      	nop
 800bc70:	7ff00000 	.word	0x7ff00000
 800bc74:	00000000 	.word	0x00000000

0800bc78 <__kernel_cos>:
 800bc78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc7c:	ec57 6b10 	vmov	r6, r7, d0
 800bc80:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bc84:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800bc88:	ed8d 1b00 	vstr	d1, [sp]
 800bc8c:	da07      	bge.n	800bc9e <__kernel_cos+0x26>
 800bc8e:	ee10 0a10 	vmov	r0, s0
 800bc92:	4639      	mov	r1, r7
 800bc94:	f7f4 ff0c 	bl	8000ab0 <__aeabi_d2iz>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	f000 8088 	beq.w	800bdae <__kernel_cos+0x136>
 800bc9e:	4632      	mov	r2, r6
 800bca0:	463b      	mov	r3, r7
 800bca2:	4630      	mov	r0, r6
 800bca4:	4639      	mov	r1, r7
 800bca6:	f7f4 fc53 	bl	8000550 <__aeabi_dmul>
 800bcaa:	4b51      	ldr	r3, [pc, #324]	; (800bdf0 <__kernel_cos+0x178>)
 800bcac:	2200      	movs	r2, #0
 800bcae:	4604      	mov	r4, r0
 800bcb0:	460d      	mov	r5, r1
 800bcb2:	f7f4 fc4d 	bl	8000550 <__aeabi_dmul>
 800bcb6:	a340      	add	r3, pc, #256	; (adr r3, 800bdb8 <__kernel_cos+0x140>)
 800bcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbc:	4682      	mov	sl, r0
 800bcbe:	468b      	mov	fp, r1
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	4629      	mov	r1, r5
 800bcc4:	f7f4 fc44 	bl	8000550 <__aeabi_dmul>
 800bcc8:	a33d      	add	r3, pc, #244	; (adr r3, 800bdc0 <__kernel_cos+0x148>)
 800bcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcce:	f7f4 fa89 	bl	80001e4 <__adddf3>
 800bcd2:	4622      	mov	r2, r4
 800bcd4:	462b      	mov	r3, r5
 800bcd6:	f7f4 fc3b 	bl	8000550 <__aeabi_dmul>
 800bcda:	a33b      	add	r3, pc, #236	; (adr r3, 800bdc8 <__kernel_cos+0x150>)
 800bcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce0:	f7f4 fa7e 	bl	80001e0 <__aeabi_dsub>
 800bce4:	4622      	mov	r2, r4
 800bce6:	462b      	mov	r3, r5
 800bce8:	f7f4 fc32 	bl	8000550 <__aeabi_dmul>
 800bcec:	a338      	add	r3, pc, #224	; (adr r3, 800bdd0 <__kernel_cos+0x158>)
 800bcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf2:	f7f4 fa77 	bl	80001e4 <__adddf3>
 800bcf6:	4622      	mov	r2, r4
 800bcf8:	462b      	mov	r3, r5
 800bcfa:	f7f4 fc29 	bl	8000550 <__aeabi_dmul>
 800bcfe:	a336      	add	r3, pc, #216	; (adr r3, 800bdd8 <__kernel_cos+0x160>)
 800bd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd04:	f7f4 fa6c 	bl	80001e0 <__aeabi_dsub>
 800bd08:	4622      	mov	r2, r4
 800bd0a:	462b      	mov	r3, r5
 800bd0c:	f7f4 fc20 	bl	8000550 <__aeabi_dmul>
 800bd10:	a333      	add	r3, pc, #204	; (adr r3, 800bde0 <__kernel_cos+0x168>)
 800bd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd16:	f7f4 fa65 	bl	80001e4 <__adddf3>
 800bd1a:	4622      	mov	r2, r4
 800bd1c:	462b      	mov	r3, r5
 800bd1e:	f7f4 fc17 	bl	8000550 <__aeabi_dmul>
 800bd22:	4622      	mov	r2, r4
 800bd24:	462b      	mov	r3, r5
 800bd26:	f7f4 fc13 	bl	8000550 <__aeabi_dmul>
 800bd2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd2e:	4604      	mov	r4, r0
 800bd30:	460d      	mov	r5, r1
 800bd32:	4630      	mov	r0, r6
 800bd34:	4639      	mov	r1, r7
 800bd36:	f7f4 fc0b 	bl	8000550 <__aeabi_dmul>
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	4629      	mov	r1, r5
 800bd40:	4620      	mov	r0, r4
 800bd42:	f7f4 fa4d 	bl	80001e0 <__aeabi_dsub>
 800bd46:	4b2b      	ldr	r3, [pc, #172]	; (800bdf4 <__kernel_cos+0x17c>)
 800bd48:	4598      	cmp	r8, r3
 800bd4a:	4606      	mov	r6, r0
 800bd4c:	460f      	mov	r7, r1
 800bd4e:	dc10      	bgt.n	800bd72 <__kernel_cos+0xfa>
 800bd50:	4602      	mov	r2, r0
 800bd52:	460b      	mov	r3, r1
 800bd54:	4650      	mov	r0, sl
 800bd56:	4659      	mov	r1, fp
 800bd58:	f7f4 fa42 	bl	80001e0 <__aeabi_dsub>
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	4926      	ldr	r1, [pc, #152]	; (800bdf8 <__kernel_cos+0x180>)
 800bd60:	4602      	mov	r2, r0
 800bd62:	2000      	movs	r0, #0
 800bd64:	f7f4 fa3c 	bl	80001e0 <__aeabi_dsub>
 800bd68:	ec41 0b10 	vmov	d0, r0, r1
 800bd6c:	b003      	add	sp, #12
 800bd6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd72:	4b22      	ldr	r3, [pc, #136]	; (800bdfc <__kernel_cos+0x184>)
 800bd74:	4920      	ldr	r1, [pc, #128]	; (800bdf8 <__kernel_cos+0x180>)
 800bd76:	4598      	cmp	r8, r3
 800bd78:	bfcc      	ite	gt
 800bd7a:	4d21      	ldrgt	r5, [pc, #132]	; (800be00 <__kernel_cos+0x188>)
 800bd7c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800bd80:	2400      	movs	r4, #0
 800bd82:	4622      	mov	r2, r4
 800bd84:	462b      	mov	r3, r5
 800bd86:	2000      	movs	r0, #0
 800bd88:	f7f4 fa2a 	bl	80001e0 <__aeabi_dsub>
 800bd8c:	4622      	mov	r2, r4
 800bd8e:	4680      	mov	r8, r0
 800bd90:	4689      	mov	r9, r1
 800bd92:	462b      	mov	r3, r5
 800bd94:	4650      	mov	r0, sl
 800bd96:	4659      	mov	r1, fp
 800bd98:	f7f4 fa22 	bl	80001e0 <__aeabi_dsub>
 800bd9c:	4632      	mov	r2, r6
 800bd9e:	463b      	mov	r3, r7
 800bda0:	f7f4 fa1e 	bl	80001e0 <__aeabi_dsub>
 800bda4:	4602      	mov	r2, r0
 800bda6:	460b      	mov	r3, r1
 800bda8:	4640      	mov	r0, r8
 800bdaa:	4649      	mov	r1, r9
 800bdac:	e7da      	b.n	800bd64 <__kernel_cos+0xec>
 800bdae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bde8 <__kernel_cos+0x170>
 800bdb2:	e7db      	b.n	800bd6c <__kernel_cos+0xf4>
 800bdb4:	f3af 8000 	nop.w
 800bdb8:	be8838d4 	.word	0xbe8838d4
 800bdbc:	bda8fae9 	.word	0xbda8fae9
 800bdc0:	bdb4b1c4 	.word	0xbdb4b1c4
 800bdc4:	3e21ee9e 	.word	0x3e21ee9e
 800bdc8:	809c52ad 	.word	0x809c52ad
 800bdcc:	3e927e4f 	.word	0x3e927e4f
 800bdd0:	19cb1590 	.word	0x19cb1590
 800bdd4:	3efa01a0 	.word	0x3efa01a0
 800bdd8:	16c15177 	.word	0x16c15177
 800bddc:	3f56c16c 	.word	0x3f56c16c
 800bde0:	5555554c 	.word	0x5555554c
 800bde4:	3fa55555 	.word	0x3fa55555
 800bde8:	00000000 	.word	0x00000000
 800bdec:	3ff00000 	.word	0x3ff00000
 800bdf0:	3fe00000 	.word	0x3fe00000
 800bdf4:	3fd33332 	.word	0x3fd33332
 800bdf8:	3ff00000 	.word	0x3ff00000
 800bdfc:	3fe90000 	.word	0x3fe90000
 800be00:	3fd20000 	.word	0x3fd20000
 800be04:	00000000 	.word	0x00000000

0800be08 <__kernel_rem_pio2>:
 800be08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be0c:	ed2d 8b02 	vpush	{d8}
 800be10:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800be14:	f112 0f14 	cmn.w	r2, #20
 800be18:	9308      	str	r3, [sp, #32]
 800be1a:	9101      	str	r1, [sp, #4]
 800be1c:	4bc4      	ldr	r3, [pc, #784]	; (800c130 <__kernel_rem_pio2+0x328>)
 800be1e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800be20:	900b      	str	r0, [sp, #44]	; 0x2c
 800be22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800be26:	9302      	str	r3, [sp, #8]
 800be28:	9b08      	ldr	r3, [sp, #32]
 800be2a:	f103 33ff 	add.w	r3, r3, #4294967295
 800be2e:	bfa8      	it	ge
 800be30:	1ed4      	subge	r4, r2, #3
 800be32:	9306      	str	r3, [sp, #24]
 800be34:	bfb2      	itee	lt
 800be36:	2400      	movlt	r4, #0
 800be38:	2318      	movge	r3, #24
 800be3a:	fb94 f4f3 	sdivge	r4, r4, r3
 800be3e:	f06f 0317 	mvn.w	r3, #23
 800be42:	fb04 3303 	mla	r3, r4, r3, r3
 800be46:	eb03 0a02 	add.w	sl, r3, r2
 800be4a:	9b02      	ldr	r3, [sp, #8]
 800be4c:	9a06      	ldr	r2, [sp, #24]
 800be4e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800c120 <__kernel_rem_pio2+0x318>
 800be52:	eb03 0802 	add.w	r8, r3, r2
 800be56:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800be58:	1aa7      	subs	r7, r4, r2
 800be5a:	ae22      	add	r6, sp, #136	; 0x88
 800be5c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800be60:	2500      	movs	r5, #0
 800be62:	4545      	cmp	r5, r8
 800be64:	dd13      	ble.n	800be8e <__kernel_rem_pio2+0x86>
 800be66:	9b08      	ldr	r3, [sp, #32]
 800be68:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800c120 <__kernel_rem_pio2+0x318>
 800be6c:	aa22      	add	r2, sp, #136	; 0x88
 800be6e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800be72:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800be76:	f04f 0800 	mov.w	r8, #0
 800be7a:	9b02      	ldr	r3, [sp, #8]
 800be7c:	4598      	cmp	r8, r3
 800be7e:	dc2f      	bgt.n	800bee0 <__kernel_rem_pio2+0xd8>
 800be80:	ed8d 8b04 	vstr	d8, [sp, #16]
 800be84:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800be88:	462f      	mov	r7, r5
 800be8a:	2600      	movs	r6, #0
 800be8c:	e01b      	b.n	800bec6 <__kernel_rem_pio2+0xbe>
 800be8e:	42ef      	cmn	r7, r5
 800be90:	d407      	bmi.n	800bea2 <__kernel_rem_pio2+0x9a>
 800be92:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800be96:	f7f4 faf1 	bl	800047c <__aeabi_i2d>
 800be9a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800be9e:	3501      	adds	r5, #1
 800bea0:	e7df      	b.n	800be62 <__kernel_rem_pio2+0x5a>
 800bea2:	ec51 0b18 	vmov	r0, r1, d8
 800bea6:	e7f8      	b.n	800be9a <__kernel_rem_pio2+0x92>
 800bea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800beac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800beb0:	f7f4 fb4e 	bl	8000550 <__aeabi_dmul>
 800beb4:	4602      	mov	r2, r0
 800beb6:	460b      	mov	r3, r1
 800beb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bebc:	f7f4 f992 	bl	80001e4 <__adddf3>
 800bec0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bec4:	3601      	adds	r6, #1
 800bec6:	9b06      	ldr	r3, [sp, #24]
 800bec8:	429e      	cmp	r6, r3
 800beca:	f1a7 0708 	sub.w	r7, r7, #8
 800bece:	ddeb      	ble.n	800bea8 <__kernel_rem_pio2+0xa0>
 800bed0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bed4:	f108 0801 	add.w	r8, r8, #1
 800bed8:	ecab 7b02 	vstmia	fp!, {d7}
 800bedc:	3508      	adds	r5, #8
 800bede:	e7cc      	b.n	800be7a <__kernel_rem_pio2+0x72>
 800bee0:	9b02      	ldr	r3, [sp, #8]
 800bee2:	aa0e      	add	r2, sp, #56	; 0x38
 800bee4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bee8:	930d      	str	r3, [sp, #52]	; 0x34
 800beea:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800beec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bef0:	9c02      	ldr	r4, [sp, #8]
 800bef2:	930c      	str	r3, [sp, #48]	; 0x30
 800bef4:	00e3      	lsls	r3, r4, #3
 800bef6:	930a      	str	r3, [sp, #40]	; 0x28
 800bef8:	ab9a      	add	r3, sp, #616	; 0x268
 800befa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800befe:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800bf02:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800bf06:	ab72      	add	r3, sp, #456	; 0x1c8
 800bf08:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800bf0c:	46c3      	mov	fp, r8
 800bf0e:	46a1      	mov	r9, r4
 800bf10:	f1b9 0f00 	cmp.w	r9, #0
 800bf14:	f1a5 0508 	sub.w	r5, r5, #8
 800bf18:	dc77      	bgt.n	800c00a <__kernel_rem_pio2+0x202>
 800bf1a:	ec47 6b10 	vmov	d0, r6, r7
 800bf1e:	4650      	mov	r0, sl
 800bf20:	f000 fbce 	bl	800c6c0 <scalbn>
 800bf24:	ec57 6b10 	vmov	r6, r7, d0
 800bf28:	2200      	movs	r2, #0
 800bf2a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bf2e:	ee10 0a10 	vmov	r0, s0
 800bf32:	4639      	mov	r1, r7
 800bf34:	f7f4 fb0c 	bl	8000550 <__aeabi_dmul>
 800bf38:	ec41 0b10 	vmov	d0, r0, r1
 800bf3c:	f7fe faa4 	bl	800a488 <floor>
 800bf40:	4b7c      	ldr	r3, [pc, #496]	; (800c134 <__kernel_rem_pio2+0x32c>)
 800bf42:	ec51 0b10 	vmov	r0, r1, d0
 800bf46:	2200      	movs	r2, #0
 800bf48:	f7f4 fb02 	bl	8000550 <__aeabi_dmul>
 800bf4c:	4602      	mov	r2, r0
 800bf4e:	460b      	mov	r3, r1
 800bf50:	4630      	mov	r0, r6
 800bf52:	4639      	mov	r1, r7
 800bf54:	f7f4 f944 	bl	80001e0 <__aeabi_dsub>
 800bf58:	460f      	mov	r7, r1
 800bf5a:	4606      	mov	r6, r0
 800bf5c:	f7f4 fda8 	bl	8000ab0 <__aeabi_d2iz>
 800bf60:	9004      	str	r0, [sp, #16]
 800bf62:	f7f4 fa8b 	bl	800047c <__aeabi_i2d>
 800bf66:	4602      	mov	r2, r0
 800bf68:	460b      	mov	r3, r1
 800bf6a:	4630      	mov	r0, r6
 800bf6c:	4639      	mov	r1, r7
 800bf6e:	f7f4 f937 	bl	80001e0 <__aeabi_dsub>
 800bf72:	f1ba 0f00 	cmp.w	sl, #0
 800bf76:	4606      	mov	r6, r0
 800bf78:	460f      	mov	r7, r1
 800bf7a:	dd6d      	ble.n	800c058 <__kernel_rem_pio2+0x250>
 800bf7c:	1e62      	subs	r2, r4, #1
 800bf7e:	ab0e      	add	r3, sp, #56	; 0x38
 800bf80:	9d04      	ldr	r5, [sp, #16]
 800bf82:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bf86:	f1ca 0118 	rsb	r1, sl, #24
 800bf8a:	fa40 f301 	asr.w	r3, r0, r1
 800bf8e:	441d      	add	r5, r3
 800bf90:	408b      	lsls	r3, r1
 800bf92:	1ac0      	subs	r0, r0, r3
 800bf94:	ab0e      	add	r3, sp, #56	; 0x38
 800bf96:	9504      	str	r5, [sp, #16]
 800bf98:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800bf9c:	f1ca 0317 	rsb	r3, sl, #23
 800bfa0:	fa40 fb03 	asr.w	fp, r0, r3
 800bfa4:	f1bb 0f00 	cmp.w	fp, #0
 800bfa8:	dd65      	ble.n	800c076 <__kernel_rem_pio2+0x26e>
 800bfaa:	9b04      	ldr	r3, [sp, #16]
 800bfac:	2200      	movs	r2, #0
 800bfae:	3301      	adds	r3, #1
 800bfb0:	9304      	str	r3, [sp, #16]
 800bfb2:	4615      	mov	r5, r2
 800bfb4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bfb8:	4294      	cmp	r4, r2
 800bfba:	f300 809c 	bgt.w	800c0f6 <__kernel_rem_pio2+0x2ee>
 800bfbe:	f1ba 0f00 	cmp.w	sl, #0
 800bfc2:	dd07      	ble.n	800bfd4 <__kernel_rem_pio2+0x1cc>
 800bfc4:	f1ba 0f01 	cmp.w	sl, #1
 800bfc8:	f000 80c0 	beq.w	800c14c <__kernel_rem_pio2+0x344>
 800bfcc:	f1ba 0f02 	cmp.w	sl, #2
 800bfd0:	f000 80c6 	beq.w	800c160 <__kernel_rem_pio2+0x358>
 800bfd4:	f1bb 0f02 	cmp.w	fp, #2
 800bfd8:	d14d      	bne.n	800c076 <__kernel_rem_pio2+0x26e>
 800bfda:	4632      	mov	r2, r6
 800bfdc:	463b      	mov	r3, r7
 800bfde:	4956      	ldr	r1, [pc, #344]	; (800c138 <__kernel_rem_pio2+0x330>)
 800bfe0:	2000      	movs	r0, #0
 800bfe2:	f7f4 f8fd 	bl	80001e0 <__aeabi_dsub>
 800bfe6:	4606      	mov	r6, r0
 800bfe8:	460f      	mov	r7, r1
 800bfea:	2d00      	cmp	r5, #0
 800bfec:	d043      	beq.n	800c076 <__kernel_rem_pio2+0x26e>
 800bfee:	4650      	mov	r0, sl
 800bff0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800c128 <__kernel_rem_pio2+0x320>
 800bff4:	f000 fb64 	bl	800c6c0 <scalbn>
 800bff8:	4630      	mov	r0, r6
 800bffa:	4639      	mov	r1, r7
 800bffc:	ec53 2b10 	vmov	r2, r3, d0
 800c000:	f7f4 f8ee 	bl	80001e0 <__aeabi_dsub>
 800c004:	4606      	mov	r6, r0
 800c006:	460f      	mov	r7, r1
 800c008:	e035      	b.n	800c076 <__kernel_rem_pio2+0x26e>
 800c00a:	4b4c      	ldr	r3, [pc, #304]	; (800c13c <__kernel_rem_pio2+0x334>)
 800c00c:	2200      	movs	r2, #0
 800c00e:	4630      	mov	r0, r6
 800c010:	4639      	mov	r1, r7
 800c012:	f7f4 fa9d 	bl	8000550 <__aeabi_dmul>
 800c016:	f7f4 fd4b 	bl	8000ab0 <__aeabi_d2iz>
 800c01a:	f7f4 fa2f 	bl	800047c <__aeabi_i2d>
 800c01e:	4602      	mov	r2, r0
 800c020:	460b      	mov	r3, r1
 800c022:	ec43 2b18 	vmov	d8, r2, r3
 800c026:	4b46      	ldr	r3, [pc, #280]	; (800c140 <__kernel_rem_pio2+0x338>)
 800c028:	2200      	movs	r2, #0
 800c02a:	f7f4 fa91 	bl	8000550 <__aeabi_dmul>
 800c02e:	4602      	mov	r2, r0
 800c030:	460b      	mov	r3, r1
 800c032:	4630      	mov	r0, r6
 800c034:	4639      	mov	r1, r7
 800c036:	f7f4 f8d3 	bl	80001e0 <__aeabi_dsub>
 800c03a:	f7f4 fd39 	bl	8000ab0 <__aeabi_d2iz>
 800c03e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c042:	f84b 0b04 	str.w	r0, [fp], #4
 800c046:	ec51 0b18 	vmov	r0, r1, d8
 800c04a:	f7f4 f8cb 	bl	80001e4 <__adddf3>
 800c04e:	f109 39ff 	add.w	r9, r9, #4294967295
 800c052:	4606      	mov	r6, r0
 800c054:	460f      	mov	r7, r1
 800c056:	e75b      	b.n	800bf10 <__kernel_rem_pio2+0x108>
 800c058:	d106      	bne.n	800c068 <__kernel_rem_pio2+0x260>
 800c05a:	1e63      	subs	r3, r4, #1
 800c05c:	aa0e      	add	r2, sp, #56	; 0x38
 800c05e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c062:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800c066:	e79d      	b.n	800bfa4 <__kernel_rem_pio2+0x19c>
 800c068:	4b36      	ldr	r3, [pc, #216]	; (800c144 <__kernel_rem_pio2+0x33c>)
 800c06a:	2200      	movs	r2, #0
 800c06c:	f7f4 fcf6 	bl	8000a5c <__aeabi_dcmpge>
 800c070:	2800      	cmp	r0, #0
 800c072:	d13d      	bne.n	800c0f0 <__kernel_rem_pio2+0x2e8>
 800c074:	4683      	mov	fp, r0
 800c076:	2200      	movs	r2, #0
 800c078:	2300      	movs	r3, #0
 800c07a:	4630      	mov	r0, r6
 800c07c:	4639      	mov	r1, r7
 800c07e:	f7f4 fccf 	bl	8000a20 <__aeabi_dcmpeq>
 800c082:	2800      	cmp	r0, #0
 800c084:	f000 80c0 	beq.w	800c208 <__kernel_rem_pio2+0x400>
 800c088:	1e65      	subs	r5, r4, #1
 800c08a:	462b      	mov	r3, r5
 800c08c:	2200      	movs	r2, #0
 800c08e:	9902      	ldr	r1, [sp, #8]
 800c090:	428b      	cmp	r3, r1
 800c092:	da6c      	bge.n	800c16e <__kernel_rem_pio2+0x366>
 800c094:	2a00      	cmp	r2, #0
 800c096:	f000 8089 	beq.w	800c1ac <__kernel_rem_pio2+0x3a4>
 800c09a:	ab0e      	add	r3, sp, #56	; 0x38
 800c09c:	f1aa 0a18 	sub.w	sl, sl, #24
 800c0a0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	f000 80ad 	beq.w	800c204 <__kernel_rem_pio2+0x3fc>
 800c0aa:	4650      	mov	r0, sl
 800c0ac:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800c128 <__kernel_rem_pio2+0x320>
 800c0b0:	f000 fb06 	bl	800c6c0 <scalbn>
 800c0b4:	ab9a      	add	r3, sp, #616	; 0x268
 800c0b6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c0ba:	ec57 6b10 	vmov	r6, r7, d0
 800c0be:	00ec      	lsls	r4, r5, #3
 800c0c0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800c0c4:	46aa      	mov	sl, r5
 800c0c6:	f1ba 0f00 	cmp.w	sl, #0
 800c0ca:	f280 80d6 	bge.w	800c27a <__kernel_rem_pio2+0x472>
 800c0ce:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800c120 <__kernel_rem_pio2+0x318>
 800c0d2:	462e      	mov	r6, r5
 800c0d4:	2e00      	cmp	r6, #0
 800c0d6:	f2c0 8104 	blt.w	800c2e2 <__kernel_rem_pio2+0x4da>
 800c0da:	ab72      	add	r3, sp, #456	; 0x1c8
 800c0dc:	ed8d 8b06 	vstr	d8, [sp, #24]
 800c0e0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800c148 <__kernel_rem_pio2+0x340>
 800c0e4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c0e8:	f04f 0800 	mov.w	r8, #0
 800c0ec:	1baf      	subs	r7, r5, r6
 800c0ee:	e0ea      	b.n	800c2c6 <__kernel_rem_pio2+0x4be>
 800c0f0:	f04f 0b02 	mov.w	fp, #2
 800c0f4:	e759      	b.n	800bfaa <__kernel_rem_pio2+0x1a2>
 800c0f6:	f8d8 3000 	ldr.w	r3, [r8]
 800c0fa:	b955      	cbnz	r5, 800c112 <__kernel_rem_pio2+0x30a>
 800c0fc:	b123      	cbz	r3, 800c108 <__kernel_rem_pio2+0x300>
 800c0fe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c102:	f8c8 3000 	str.w	r3, [r8]
 800c106:	2301      	movs	r3, #1
 800c108:	3201      	adds	r2, #1
 800c10a:	f108 0804 	add.w	r8, r8, #4
 800c10e:	461d      	mov	r5, r3
 800c110:	e752      	b.n	800bfb8 <__kernel_rem_pio2+0x1b0>
 800c112:	1acb      	subs	r3, r1, r3
 800c114:	f8c8 3000 	str.w	r3, [r8]
 800c118:	462b      	mov	r3, r5
 800c11a:	e7f5      	b.n	800c108 <__kernel_rem_pio2+0x300>
 800c11c:	f3af 8000 	nop.w
	...
 800c12c:	3ff00000 	.word	0x3ff00000
 800c130:	0800ca08 	.word	0x0800ca08
 800c134:	40200000 	.word	0x40200000
 800c138:	3ff00000 	.word	0x3ff00000
 800c13c:	3e700000 	.word	0x3e700000
 800c140:	41700000 	.word	0x41700000
 800c144:	3fe00000 	.word	0x3fe00000
 800c148:	0800c9c8 	.word	0x0800c9c8
 800c14c:	1e62      	subs	r2, r4, #1
 800c14e:	ab0e      	add	r3, sp, #56	; 0x38
 800c150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c154:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c158:	a90e      	add	r1, sp, #56	; 0x38
 800c15a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c15e:	e739      	b.n	800bfd4 <__kernel_rem_pio2+0x1cc>
 800c160:	1e62      	subs	r2, r4, #1
 800c162:	ab0e      	add	r3, sp, #56	; 0x38
 800c164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c168:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c16c:	e7f4      	b.n	800c158 <__kernel_rem_pio2+0x350>
 800c16e:	a90e      	add	r1, sp, #56	; 0x38
 800c170:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c174:	3b01      	subs	r3, #1
 800c176:	430a      	orrs	r2, r1
 800c178:	e789      	b.n	800c08e <__kernel_rem_pio2+0x286>
 800c17a:	3301      	adds	r3, #1
 800c17c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c180:	2900      	cmp	r1, #0
 800c182:	d0fa      	beq.n	800c17a <__kernel_rem_pio2+0x372>
 800c184:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c186:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800c18a:	446a      	add	r2, sp
 800c18c:	3a98      	subs	r2, #152	; 0x98
 800c18e:	920a      	str	r2, [sp, #40]	; 0x28
 800c190:	9a08      	ldr	r2, [sp, #32]
 800c192:	18e3      	adds	r3, r4, r3
 800c194:	18a5      	adds	r5, r4, r2
 800c196:	aa22      	add	r2, sp, #136	; 0x88
 800c198:	f104 0801 	add.w	r8, r4, #1
 800c19c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800c1a0:	9304      	str	r3, [sp, #16]
 800c1a2:	9b04      	ldr	r3, [sp, #16]
 800c1a4:	4543      	cmp	r3, r8
 800c1a6:	da04      	bge.n	800c1b2 <__kernel_rem_pio2+0x3aa>
 800c1a8:	461c      	mov	r4, r3
 800c1aa:	e6a3      	b.n	800bef4 <__kernel_rem_pio2+0xec>
 800c1ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e7e4      	b.n	800c17c <__kernel_rem_pio2+0x374>
 800c1b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1b4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c1b8:	f7f4 f960 	bl	800047c <__aeabi_i2d>
 800c1bc:	e8e5 0102 	strd	r0, r1, [r5], #8
 800c1c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1c2:	46ab      	mov	fp, r5
 800c1c4:	461c      	mov	r4, r3
 800c1c6:	f04f 0900 	mov.w	r9, #0
 800c1ca:	2600      	movs	r6, #0
 800c1cc:	2700      	movs	r7, #0
 800c1ce:	9b06      	ldr	r3, [sp, #24]
 800c1d0:	4599      	cmp	r9, r3
 800c1d2:	dd06      	ble.n	800c1e2 <__kernel_rem_pio2+0x3da>
 800c1d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1d6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800c1da:	f108 0801 	add.w	r8, r8, #1
 800c1de:	930a      	str	r3, [sp, #40]	; 0x28
 800c1e0:	e7df      	b.n	800c1a2 <__kernel_rem_pio2+0x39a>
 800c1e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c1e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c1ea:	f7f4 f9b1 	bl	8000550 <__aeabi_dmul>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	4630      	mov	r0, r6
 800c1f4:	4639      	mov	r1, r7
 800c1f6:	f7f3 fff5 	bl	80001e4 <__adddf3>
 800c1fa:	f109 0901 	add.w	r9, r9, #1
 800c1fe:	4606      	mov	r6, r0
 800c200:	460f      	mov	r7, r1
 800c202:	e7e4      	b.n	800c1ce <__kernel_rem_pio2+0x3c6>
 800c204:	3d01      	subs	r5, #1
 800c206:	e748      	b.n	800c09a <__kernel_rem_pio2+0x292>
 800c208:	ec47 6b10 	vmov	d0, r6, r7
 800c20c:	f1ca 0000 	rsb	r0, sl, #0
 800c210:	f000 fa56 	bl	800c6c0 <scalbn>
 800c214:	ec57 6b10 	vmov	r6, r7, d0
 800c218:	4ba0      	ldr	r3, [pc, #640]	; (800c49c <__kernel_rem_pio2+0x694>)
 800c21a:	ee10 0a10 	vmov	r0, s0
 800c21e:	2200      	movs	r2, #0
 800c220:	4639      	mov	r1, r7
 800c222:	f7f4 fc1b 	bl	8000a5c <__aeabi_dcmpge>
 800c226:	b1f8      	cbz	r0, 800c268 <__kernel_rem_pio2+0x460>
 800c228:	4b9d      	ldr	r3, [pc, #628]	; (800c4a0 <__kernel_rem_pio2+0x698>)
 800c22a:	2200      	movs	r2, #0
 800c22c:	4630      	mov	r0, r6
 800c22e:	4639      	mov	r1, r7
 800c230:	f7f4 f98e 	bl	8000550 <__aeabi_dmul>
 800c234:	f7f4 fc3c 	bl	8000ab0 <__aeabi_d2iz>
 800c238:	4680      	mov	r8, r0
 800c23a:	f7f4 f91f 	bl	800047c <__aeabi_i2d>
 800c23e:	4b97      	ldr	r3, [pc, #604]	; (800c49c <__kernel_rem_pio2+0x694>)
 800c240:	2200      	movs	r2, #0
 800c242:	f7f4 f985 	bl	8000550 <__aeabi_dmul>
 800c246:	460b      	mov	r3, r1
 800c248:	4602      	mov	r2, r0
 800c24a:	4639      	mov	r1, r7
 800c24c:	4630      	mov	r0, r6
 800c24e:	f7f3 ffc7 	bl	80001e0 <__aeabi_dsub>
 800c252:	f7f4 fc2d 	bl	8000ab0 <__aeabi_d2iz>
 800c256:	1c65      	adds	r5, r4, #1
 800c258:	ab0e      	add	r3, sp, #56	; 0x38
 800c25a:	f10a 0a18 	add.w	sl, sl, #24
 800c25e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c262:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c266:	e720      	b.n	800c0aa <__kernel_rem_pio2+0x2a2>
 800c268:	4630      	mov	r0, r6
 800c26a:	4639      	mov	r1, r7
 800c26c:	f7f4 fc20 	bl	8000ab0 <__aeabi_d2iz>
 800c270:	ab0e      	add	r3, sp, #56	; 0x38
 800c272:	4625      	mov	r5, r4
 800c274:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c278:	e717      	b.n	800c0aa <__kernel_rem_pio2+0x2a2>
 800c27a:	ab0e      	add	r3, sp, #56	; 0x38
 800c27c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c280:	f7f4 f8fc 	bl	800047c <__aeabi_i2d>
 800c284:	4632      	mov	r2, r6
 800c286:	463b      	mov	r3, r7
 800c288:	f7f4 f962 	bl	8000550 <__aeabi_dmul>
 800c28c:	4b84      	ldr	r3, [pc, #528]	; (800c4a0 <__kernel_rem_pio2+0x698>)
 800c28e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800c292:	2200      	movs	r2, #0
 800c294:	4630      	mov	r0, r6
 800c296:	4639      	mov	r1, r7
 800c298:	f7f4 f95a 	bl	8000550 <__aeabi_dmul>
 800c29c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c2a0:	4606      	mov	r6, r0
 800c2a2:	460f      	mov	r7, r1
 800c2a4:	e70f      	b.n	800c0c6 <__kernel_rem_pio2+0x2be>
 800c2a6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c2aa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c2ae:	f7f4 f94f 	bl	8000550 <__aeabi_dmul>
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2ba:	f7f3 ff93 	bl	80001e4 <__adddf3>
 800c2be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c2c2:	f108 0801 	add.w	r8, r8, #1
 800c2c6:	9b02      	ldr	r3, [sp, #8]
 800c2c8:	4598      	cmp	r8, r3
 800c2ca:	dc01      	bgt.n	800c2d0 <__kernel_rem_pio2+0x4c8>
 800c2cc:	45b8      	cmp	r8, r7
 800c2ce:	ddea      	ble.n	800c2a6 <__kernel_rem_pio2+0x49e>
 800c2d0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c2d4:	ab4a      	add	r3, sp, #296	; 0x128
 800c2d6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c2da:	ed87 7b00 	vstr	d7, [r7]
 800c2de:	3e01      	subs	r6, #1
 800c2e0:	e6f8      	b.n	800c0d4 <__kernel_rem_pio2+0x2cc>
 800c2e2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c2e4:	2b02      	cmp	r3, #2
 800c2e6:	dc0b      	bgt.n	800c300 <__kernel_rem_pio2+0x4f8>
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	dc35      	bgt.n	800c358 <__kernel_rem_pio2+0x550>
 800c2ec:	d059      	beq.n	800c3a2 <__kernel_rem_pio2+0x59a>
 800c2ee:	9b04      	ldr	r3, [sp, #16]
 800c2f0:	f003 0007 	and.w	r0, r3, #7
 800c2f4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800c2f8:	ecbd 8b02 	vpop	{d8}
 800c2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c300:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c302:	2b03      	cmp	r3, #3
 800c304:	d1f3      	bne.n	800c2ee <__kernel_rem_pio2+0x4e6>
 800c306:	ab4a      	add	r3, sp, #296	; 0x128
 800c308:	4423      	add	r3, r4
 800c30a:	9306      	str	r3, [sp, #24]
 800c30c:	461c      	mov	r4, r3
 800c30e:	469a      	mov	sl, r3
 800c310:	9502      	str	r5, [sp, #8]
 800c312:	9b02      	ldr	r3, [sp, #8]
 800c314:	2b00      	cmp	r3, #0
 800c316:	f1aa 0a08 	sub.w	sl, sl, #8
 800c31a:	dc6b      	bgt.n	800c3f4 <__kernel_rem_pio2+0x5ec>
 800c31c:	46aa      	mov	sl, r5
 800c31e:	f1ba 0f01 	cmp.w	sl, #1
 800c322:	f1a4 0408 	sub.w	r4, r4, #8
 800c326:	f300 8085 	bgt.w	800c434 <__kernel_rem_pio2+0x62c>
 800c32a:	9c06      	ldr	r4, [sp, #24]
 800c32c:	2000      	movs	r0, #0
 800c32e:	3408      	adds	r4, #8
 800c330:	2100      	movs	r1, #0
 800c332:	2d01      	cmp	r5, #1
 800c334:	f300 809d 	bgt.w	800c472 <__kernel_rem_pio2+0x66a>
 800c338:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800c33c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800c340:	f1bb 0f00 	cmp.w	fp, #0
 800c344:	f040 809b 	bne.w	800c47e <__kernel_rem_pio2+0x676>
 800c348:	9b01      	ldr	r3, [sp, #4]
 800c34a:	e9c3 5600 	strd	r5, r6, [r3]
 800c34e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c352:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c356:	e7ca      	b.n	800c2ee <__kernel_rem_pio2+0x4e6>
 800c358:	3408      	adds	r4, #8
 800c35a:	ab4a      	add	r3, sp, #296	; 0x128
 800c35c:	441c      	add	r4, r3
 800c35e:	462e      	mov	r6, r5
 800c360:	2000      	movs	r0, #0
 800c362:	2100      	movs	r1, #0
 800c364:	2e00      	cmp	r6, #0
 800c366:	da36      	bge.n	800c3d6 <__kernel_rem_pio2+0x5ce>
 800c368:	f1bb 0f00 	cmp.w	fp, #0
 800c36c:	d039      	beq.n	800c3e2 <__kernel_rem_pio2+0x5da>
 800c36e:	4602      	mov	r2, r0
 800c370:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c374:	9c01      	ldr	r4, [sp, #4]
 800c376:	e9c4 2300 	strd	r2, r3, [r4]
 800c37a:	4602      	mov	r2, r0
 800c37c:	460b      	mov	r3, r1
 800c37e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800c382:	f7f3 ff2d 	bl	80001e0 <__aeabi_dsub>
 800c386:	ae4c      	add	r6, sp, #304	; 0x130
 800c388:	2401      	movs	r4, #1
 800c38a:	42a5      	cmp	r5, r4
 800c38c:	da2c      	bge.n	800c3e8 <__kernel_rem_pio2+0x5e0>
 800c38e:	f1bb 0f00 	cmp.w	fp, #0
 800c392:	d002      	beq.n	800c39a <__kernel_rem_pio2+0x592>
 800c394:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c398:	4619      	mov	r1, r3
 800c39a:	9b01      	ldr	r3, [sp, #4]
 800c39c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c3a0:	e7a5      	b.n	800c2ee <__kernel_rem_pio2+0x4e6>
 800c3a2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800c3a6:	eb0d 0403 	add.w	r4, sp, r3
 800c3aa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800c3ae:	2000      	movs	r0, #0
 800c3b0:	2100      	movs	r1, #0
 800c3b2:	2d00      	cmp	r5, #0
 800c3b4:	da09      	bge.n	800c3ca <__kernel_rem_pio2+0x5c2>
 800c3b6:	f1bb 0f00 	cmp.w	fp, #0
 800c3ba:	d002      	beq.n	800c3c2 <__kernel_rem_pio2+0x5ba>
 800c3bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	9b01      	ldr	r3, [sp, #4]
 800c3c4:	e9c3 0100 	strd	r0, r1, [r3]
 800c3c8:	e791      	b.n	800c2ee <__kernel_rem_pio2+0x4e6>
 800c3ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c3ce:	f7f3 ff09 	bl	80001e4 <__adddf3>
 800c3d2:	3d01      	subs	r5, #1
 800c3d4:	e7ed      	b.n	800c3b2 <__kernel_rem_pio2+0x5aa>
 800c3d6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c3da:	f7f3 ff03 	bl	80001e4 <__adddf3>
 800c3de:	3e01      	subs	r6, #1
 800c3e0:	e7c0      	b.n	800c364 <__kernel_rem_pio2+0x55c>
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	e7c5      	b.n	800c374 <__kernel_rem_pio2+0x56c>
 800c3e8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c3ec:	f7f3 fefa 	bl	80001e4 <__adddf3>
 800c3f0:	3401      	adds	r4, #1
 800c3f2:	e7ca      	b.n	800c38a <__kernel_rem_pio2+0x582>
 800c3f4:	e9da 8900 	ldrd	r8, r9, [sl]
 800c3f8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c3fc:	9b02      	ldr	r3, [sp, #8]
 800c3fe:	3b01      	subs	r3, #1
 800c400:	9302      	str	r3, [sp, #8]
 800c402:	4632      	mov	r2, r6
 800c404:	463b      	mov	r3, r7
 800c406:	4640      	mov	r0, r8
 800c408:	4649      	mov	r1, r9
 800c40a:	f7f3 feeb 	bl	80001e4 <__adddf3>
 800c40e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c412:	4602      	mov	r2, r0
 800c414:	460b      	mov	r3, r1
 800c416:	4640      	mov	r0, r8
 800c418:	4649      	mov	r1, r9
 800c41a:	f7f3 fee1 	bl	80001e0 <__aeabi_dsub>
 800c41e:	4632      	mov	r2, r6
 800c420:	463b      	mov	r3, r7
 800c422:	f7f3 fedf 	bl	80001e4 <__adddf3>
 800c426:	ed9d 7b08 	vldr	d7, [sp, #32]
 800c42a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c42e:	ed8a 7b00 	vstr	d7, [sl]
 800c432:	e76e      	b.n	800c312 <__kernel_rem_pio2+0x50a>
 800c434:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c438:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c43c:	4640      	mov	r0, r8
 800c43e:	4632      	mov	r2, r6
 800c440:	463b      	mov	r3, r7
 800c442:	4649      	mov	r1, r9
 800c444:	f7f3 fece 	bl	80001e4 <__adddf3>
 800c448:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c44c:	4602      	mov	r2, r0
 800c44e:	460b      	mov	r3, r1
 800c450:	4640      	mov	r0, r8
 800c452:	4649      	mov	r1, r9
 800c454:	f7f3 fec4 	bl	80001e0 <__aeabi_dsub>
 800c458:	4632      	mov	r2, r6
 800c45a:	463b      	mov	r3, r7
 800c45c:	f7f3 fec2 	bl	80001e4 <__adddf3>
 800c460:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c464:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c468:	ed84 7b00 	vstr	d7, [r4]
 800c46c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c470:	e755      	b.n	800c31e <__kernel_rem_pio2+0x516>
 800c472:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c476:	f7f3 feb5 	bl	80001e4 <__adddf3>
 800c47a:	3d01      	subs	r5, #1
 800c47c:	e759      	b.n	800c332 <__kernel_rem_pio2+0x52a>
 800c47e:	9b01      	ldr	r3, [sp, #4]
 800c480:	9a01      	ldr	r2, [sp, #4]
 800c482:	601d      	str	r5, [r3, #0]
 800c484:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c488:	605c      	str	r4, [r3, #4]
 800c48a:	609f      	str	r7, [r3, #8]
 800c48c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c490:	60d3      	str	r3, [r2, #12]
 800c492:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c496:	6110      	str	r0, [r2, #16]
 800c498:	6153      	str	r3, [r2, #20]
 800c49a:	e728      	b.n	800c2ee <__kernel_rem_pio2+0x4e6>
 800c49c:	41700000 	.word	0x41700000
 800c4a0:	3e700000 	.word	0x3e700000
 800c4a4:	00000000 	.word	0x00000000

0800c4a8 <__kernel_sin>:
 800c4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ac:	ed2d 8b04 	vpush	{d8-d9}
 800c4b0:	eeb0 8a41 	vmov.f32	s16, s2
 800c4b4:	eef0 8a61 	vmov.f32	s17, s3
 800c4b8:	ec55 4b10 	vmov	r4, r5, d0
 800c4bc:	b083      	sub	sp, #12
 800c4be:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c4c2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c4c6:	9001      	str	r0, [sp, #4]
 800c4c8:	da06      	bge.n	800c4d8 <__kernel_sin+0x30>
 800c4ca:	ee10 0a10 	vmov	r0, s0
 800c4ce:	4629      	mov	r1, r5
 800c4d0:	f7f4 faee 	bl	8000ab0 <__aeabi_d2iz>
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	d051      	beq.n	800c57c <__kernel_sin+0xd4>
 800c4d8:	4622      	mov	r2, r4
 800c4da:	462b      	mov	r3, r5
 800c4dc:	4620      	mov	r0, r4
 800c4de:	4629      	mov	r1, r5
 800c4e0:	f7f4 f836 	bl	8000550 <__aeabi_dmul>
 800c4e4:	4682      	mov	sl, r0
 800c4e6:	468b      	mov	fp, r1
 800c4e8:	4602      	mov	r2, r0
 800c4ea:	460b      	mov	r3, r1
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	4629      	mov	r1, r5
 800c4f0:	f7f4 f82e 	bl	8000550 <__aeabi_dmul>
 800c4f4:	a341      	add	r3, pc, #260	; (adr r3, 800c5fc <__kernel_sin+0x154>)
 800c4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fa:	4680      	mov	r8, r0
 800c4fc:	4689      	mov	r9, r1
 800c4fe:	4650      	mov	r0, sl
 800c500:	4659      	mov	r1, fp
 800c502:	f7f4 f825 	bl	8000550 <__aeabi_dmul>
 800c506:	a33f      	add	r3, pc, #252	; (adr r3, 800c604 <__kernel_sin+0x15c>)
 800c508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50c:	f7f3 fe68 	bl	80001e0 <__aeabi_dsub>
 800c510:	4652      	mov	r2, sl
 800c512:	465b      	mov	r3, fp
 800c514:	f7f4 f81c 	bl	8000550 <__aeabi_dmul>
 800c518:	a33c      	add	r3, pc, #240	; (adr r3, 800c60c <__kernel_sin+0x164>)
 800c51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51e:	f7f3 fe61 	bl	80001e4 <__adddf3>
 800c522:	4652      	mov	r2, sl
 800c524:	465b      	mov	r3, fp
 800c526:	f7f4 f813 	bl	8000550 <__aeabi_dmul>
 800c52a:	a33a      	add	r3, pc, #232	; (adr r3, 800c614 <__kernel_sin+0x16c>)
 800c52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c530:	f7f3 fe56 	bl	80001e0 <__aeabi_dsub>
 800c534:	4652      	mov	r2, sl
 800c536:	465b      	mov	r3, fp
 800c538:	f7f4 f80a 	bl	8000550 <__aeabi_dmul>
 800c53c:	a337      	add	r3, pc, #220	; (adr r3, 800c61c <__kernel_sin+0x174>)
 800c53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c542:	f7f3 fe4f 	bl	80001e4 <__adddf3>
 800c546:	9b01      	ldr	r3, [sp, #4]
 800c548:	4606      	mov	r6, r0
 800c54a:	460f      	mov	r7, r1
 800c54c:	b9eb      	cbnz	r3, 800c58a <__kernel_sin+0xe2>
 800c54e:	4602      	mov	r2, r0
 800c550:	460b      	mov	r3, r1
 800c552:	4650      	mov	r0, sl
 800c554:	4659      	mov	r1, fp
 800c556:	f7f3 fffb 	bl	8000550 <__aeabi_dmul>
 800c55a:	a325      	add	r3, pc, #148	; (adr r3, 800c5f0 <__kernel_sin+0x148>)
 800c55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c560:	f7f3 fe3e 	bl	80001e0 <__aeabi_dsub>
 800c564:	4642      	mov	r2, r8
 800c566:	464b      	mov	r3, r9
 800c568:	f7f3 fff2 	bl	8000550 <__aeabi_dmul>
 800c56c:	4602      	mov	r2, r0
 800c56e:	460b      	mov	r3, r1
 800c570:	4620      	mov	r0, r4
 800c572:	4629      	mov	r1, r5
 800c574:	f7f3 fe36 	bl	80001e4 <__adddf3>
 800c578:	4604      	mov	r4, r0
 800c57a:	460d      	mov	r5, r1
 800c57c:	ec45 4b10 	vmov	d0, r4, r5
 800c580:	b003      	add	sp, #12
 800c582:	ecbd 8b04 	vpop	{d8-d9}
 800c586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c58a:	4b1b      	ldr	r3, [pc, #108]	; (800c5f8 <__kernel_sin+0x150>)
 800c58c:	ec51 0b18 	vmov	r0, r1, d8
 800c590:	2200      	movs	r2, #0
 800c592:	f7f3 ffdd 	bl	8000550 <__aeabi_dmul>
 800c596:	4632      	mov	r2, r6
 800c598:	ec41 0b19 	vmov	d9, r0, r1
 800c59c:	463b      	mov	r3, r7
 800c59e:	4640      	mov	r0, r8
 800c5a0:	4649      	mov	r1, r9
 800c5a2:	f7f3 ffd5 	bl	8000550 <__aeabi_dmul>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	460b      	mov	r3, r1
 800c5aa:	ec51 0b19 	vmov	r0, r1, d9
 800c5ae:	f7f3 fe17 	bl	80001e0 <__aeabi_dsub>
 800c5b2:	4652      	mov	r2, sl
 800c5b4:	465b      	mov	r3, fp
 800c5b6:	f7f3 ffcb 	bl	8000550 <__aeabi_dmul>
 800c5ba:	ec53 2b18 	vmov	r2, r3, d8
 800c5be:	f7f3 fe0f 	bl	80001e0 <__aeabi_dsub>
 800c5c2:	a30b      	add	r3, pc, #44	; (adr r3, 800c5f0 <__kernel_sin+0x148>)
 800c5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c8:	4606      	mov	r6, r0
 800c5ca:	460f      	mov	r7, r1
 800c5cc:	4640      	mov	r0, r8
 800c5ce:	4649      	mov	r1, r9
 800c5d0:	f7f3 ffbe 	bl	8000550 <__aeabi_dmul>
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	460b      	mov	r3, r1
 800c5d8:	4630      	mov	r0, r6
 800c5da:	4639      	mov	r1, r7
 800c5dc:	f7f3 fe02 	bl	80001e4 <__adddf3>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	4629      	mov	r1, r5
 800c5e8:	f7f3 fdfa 	bl	80001e0 <__aeabi_dsub>
 800c5ec:	e7c4      	b.n	800c578 <__kernel_sin+0xd0>
 800c5ee:	bf00      	nop
 800c5f0:	55555549 	.word	0x55555549
 800c5f4:	3fc55555 	.word	0x3fc55555
 800c5f8:	3fe00000 	.word	0x3fe00000
 800c5fc:	5acfd57c 	.word	0x5acfd57c
 800c600:	3de5d93a 	.word	0x3de5d93a
 800c604:	8a2b9ceb 	.word	0x8a2b9ceb
 800c608:	3e5ae5e6 	.word	0x3e5ae5e6
 800c60c:	57b1fe7d 	.word	0x57b1fe7d
 800c610:	3ec71de3 	.word	0x3ec71de3
 800c614:	19c161d5 	.word	0x19c161d5
 800c618:	3f2a01a0 	.word	0x3f2a01a0
 800c61c:	1110f8a6 	.word	0x1110f8a6
 800c620:	3f811111 	.word	0x3f811111

0800c624 <with_errno>:
 800c624:	b570      	push	{r4, r5, r6, lr}
 800c626:	4604      	mov	r4, r0
 800c628:	460d      	mov	r5, r1
 800c62a:	4616      	mov	r6, r2
 800c62c:	f7fd fd72 	bl	800a114 <__errno>
 800c630:	4629      	mov	r1, r5
 800c632:	6006      	str	r6, [r0, #0]
 800c634:	4620      	mov	r0, r4
 800c636:	bd70      	pop	{r4, r5, r6, pc}

0800c638 <xflow>:
 800c638:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c63a:	4614      	mov	r4, r2
 800c63c:	461d      	mov	r5, r3
 800c63e:	b108      	cbz	r0, 800c644 <xflow+0xc>
 800c640:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c644:	e9cd 2300 	strd	r2, r3, [sp]
 800c648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c64c:	4620      	mov	r0, r4
 800c64e:	4629      	mov	r1, r5
 800c650:	f7f3 ff7e 	bl	8000550 <__aeabi_dmul>
 800c654:	2222      	movs	r2, #34	; 0x22
 800c656:	b003      	add	sp, #12
 800c658:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c65c:	f7ff bfe2 	b.w	800c624 <with_errno>

0800c660 <__math_uflow>:
 800c660:	b508      	push	{r3, lr}
 800c662:	2200      	movs	r2, #0
 800c664:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c668:	f7ff ffe6 	bl	800c638 <xflow>
 800c66c:	ec41 0b10 	vmov	d0, r0, r1
 800c670:	bd08      	pop	{r3, pc}

0800c672 <__math_oflow>:
 800c672:	b508      	push	{r3, lr}
 800c674:	2200      	movs	r2, #0
 800c676:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c67a:	f7ff ffdd 	bl	800c638 <xflow>
 800c67e:	ec41 0b10 	vmov	d0, r0, r1
 800c682:	bd08      	pop	{r3, pc}

0800c684 <fabs>:
 800c684:	ec51 0b10 	vmov	r0, r1, d0
 800c688:	ee10 2a10 	vmov	r2, s0
 800c68c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c690:	ec43 2b10 	vmov	d0, r2, r3
 800c694:	4770      	bx	lr

0800c696 <finite>:
 800c696:	b082      	sub	sp, #8
 800c698:	ed8d 0b00 	vstr	d0, [sp]
 800c69c:	9801      	ldr	r0, [sp, #4]
 800c69e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c6a2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c6a6:	0fc0      	lsrs	r0, r0, #31
 800c6a8:	b002      	add	sp, #8
 800c6aa:	4770      	bx	lr
 800c6ac:	0000      	movs	r0, r0
	...

0800c6b0 <nan>:
 800c6b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c6b8 <nan+0x8>
 800c6b4:	4770      	bx	lr
 800c6b6:	bf00      	nop
 800c6b8:	00000000 	.word	0x00000000
 800c6bc:	7ff80000 	.word	0x7ff80000

0800c6c0 <scalbn>:
 800c6c0:	b570      	push	{r4, r5, r6, lr}
 800c6c2:	ec55 4b10 	vmov	r4, r5, d0
 800c6c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c6ca:	4606      	mov	r6, r0
 800c6cc:	462b      	mov	r3, r5
 800c6ce:	b99a      	cbnz	r2, 800c6f8 <scalbn+0x38>
 800c6d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c6d4:	4323      	orrs	r3, r4
 800c6d6:	d036      	beq.n	800c746 <scalbn+0x86>
 800c6d8:	4b39      	ldr	r3, [pc, #228]	; (800c7c0 <scalbn+0x100>)
 800c6da:	4629      	mov	r1, r5
 800c6dc:	ee10 0a10 	vmov	r0, s0
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	f7f3 ff35 	bl	8000550 <__aeabi_dmul>
 800c6e6:	4b37      	ldr	r3, [pc, #220]	; (800c7c4 <scalbn+0x104>)
 800c6e8:	429e      	cmp	r6, r3
 800c6ea:	4604      	mov	r4, r0
 800c6ec:	460d      	mov	r5, r1
 800c6ee:	da10      	bge.n	800c712 <scalbn+0x52>
 800c6f0:	a32b      	add	r3, pc, #172	; (adr r3, 800c7a0 <scalbn+0xe0>)
 800c6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f6:	e03a      	b.n	800c76e <scalbn+0xae>
 800c6f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c6fc:	428a      	cmp	r2, r1
 800c6fe:	d10c      	bne.n	800c71a <scalbn+0x5a>
 800c700:	ee10 2a10 	vmov	r2, s0
 800c704:	4620      	mov	r0, r4
 800c706:	4629      	mov	r1, r5
 800c708:	f7f3 fd6c 	bl	80001e4 <__adddf3>
 800c70c:	4604      	mov	r4, r0
 800c70e:	460d      	mov	r5, r1
 800c710:	e019      	b.n	800c746 <scalbn+0x86>
 800c712:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c716:	460b      	mov	r3, r1
 800c718:	3a36      	subs	r2, #54	; 0x36
 800c71a:	4432      	add	r2, r6
 800c71c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c720:	428a      	cmp	r2, r1
 800c722:	dd08      	ble.n	800c736 <scalbn+0x76>
 800c724:	2d00      	cmp	r5, #0
 800c726:	a120      	add	r1, pc, #128	; (adr r1, 800c7a8 <scalbn+0xe8>)
 800c728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c72c:	da1c      	bge.n	800c768 <scalbn+0xa8>
 800c72e:	a120      	add	r1, pc, #128	; (adr r1, 800c7b0 <scalbn+0xf0>)
 800c730:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c734:	e018      	b.n	800c768 <scalbn+0xa8>
 800c736:	2a00      	cmp	r2, #0
 800c738:	dd08      	ble.n	800c74c <scalbn+0x8c>
 800c73a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c73e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c742:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c746:	ec45 4b10 	vmov	d0, r4, r5
 800c74a:	bd70      	pop	{r4, r5, r6, pc}
 800c74c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c750:	da19      	bge.n	800c786 <scalbn+0xc6>
 800c752:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c756:	429e      	cmp	r6, r3
 800c758:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c75c:	dd0a      	ble.n	800c774 <scalbn+0xb4>
 800c75e:	a112      	add	r1, pc, #72	; (adr r1, 800c7a8 <scalbn+0xe8>)
 800c760:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d1e2      	bne.n	800c72e <scalbn+0x6e>
 800c768:	a30f      	add	r3, pc, #60	; (adr r3, 800c7a8 <scalbn+0xe8>)
 800c76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76e:	f7f3 feef 	bl	8000550 <__aeabi_dmul>
 800c772:	e7cb      	b.n	800c70c <scalbn+0x4c>
 800c774:	a10a      	add	r1, pc, #40	; (adr r1, 800c7a0 <scalbn+0xe0>)
 800c776:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d0b8      	beq.n	800c6f0 <scalbn+0x30>
 800c77e:	a10e      	add	r1, pc, #56	; (adr r1, 800c7b8 <scalbn+0xf8>)
 800c780:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c784:	e7b4      	b.n	800c6f0 <scalbn+0x30>
 800c786:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c78a:	3236      	adds	r2, #54	; 0x36
 800c78c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c790:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c794:	4620      	mov	r0, r4
 800c796:	4b0c      	ldr	r3, [pc, #48]	; (800c7c8 <scalbn+0x108>)
 800c798:	2200      	movs	r2, #0
 800c79a:	e7e8      	b.n	800c76e <scalbn+0xae>
 800c79c:	f3af 8000 	nop.w
 800c7a0:	c2f8f359 	.word	0xc2f8f359
 800c7a4:	01a56e1f 	.word	0x01a56e1f
 800c7a8:	8800759c 	.word	0x8800759c
 800c7ac:	7e37e43c 	.word	0x7e37e43c
 800c7b0:	8800759c 	.word	0x8800759c
 800c7b4:	fe37e43c 	.word	0xfe37e43c
 800c7b8:	c2f8f359 	.word	0xc2f8f359
 800c7bc:	81a56e1f 	.word	0x81a56e1f
 800c7c0:	43500000 	.word	0x43500000
 800c7c4:	ffff3cb0 	.word	0xffff3cb0
 800c7c8:	3c900000 	.word	0x3c900000

0800c7cc <_init>:
 800c7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ce:	bf00      	nop
 800c7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7d2:	bc08      	pop	{r3}
 800c7d4:	469e      	mov	lr, r3
 800c7d6:	4770      	bx	lr

0800c7d8 <_fini>:
 800c7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7da:	bf00      	nop
 800c7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7de:	bc08      	pop	{r3}
 800c7e0:	469e      	mov	lr, r3
 800c7e2:	4770      	bx	lr
