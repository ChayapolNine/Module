
LAB_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e3c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08006fd8  08006fd8  00016fd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007028  08007028  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08007028  08007028  00017028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007030  08007030  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007030  08007030  00017030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007034  08007034  00017034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007038  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000080  080070b8  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  080070b8  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8ec  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ed  00000000  00000000  0002f99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00031c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d78  00000000  00000000  00032b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182e7  00000000  00000000  00033878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011171  00000000  00000000  0004bb5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ab8e  00000000  00000000  0005ccd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f785e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043f4  00000000  00000000  000f78b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006fbc 	.word	0x08006fbc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	08006fbc 	.word	0x08006fbc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b974 	b.w	8000ea0 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	468e      	mov	lr, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14d      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4694      	mov	ip, r2
 8000be2:	d969      	bls.n	8000cb8 <__udivmoddi4+0xe8>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b152      	cbz	r2, 8000c00 <__udivmoddi4+0x30>
 8000bea:	fa01 f302 	lsl.w	r3, r1, r2
 8000bee:	f1c2 0120 	rsb	r1, r2, #32
 8000bf2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bfe:	4094      	lsls	r4, r2
 8000c00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c04:	0c21      	lsrs	r1, r4, #16
 8000c06:	fbbe f6f8 	udiv	r6, lr, r8
 8000c0a:	fa1f f78c 	uxth.w	r7, ip
 8000c0e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c16:	fb06 f107 	mul.w	r1, r6, r7
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c26:	f080 811f 	bcs.w	8000e68 <__udivmoddi4+0x298>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 811c 	bls.w	8000e68 <__udivmoddi4+0x298>
 8000c30:	3e02      	subs	r6, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c44:	fb00 f707 	mul.w	r7, r0, r7
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x92>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	f080 810a 	bcs.w	8000e6c <__udivmoddi4+0x29c>
 8000c58:	42a7      	cmp	r7, r4
 8000c5a:	f240 8107 	bls.w	8000e6c <__udivmoddi4+0x29c>
 8000c5e:	4464      	add	r4, ip
 8000c60:	3802      	subs	r0, #2
 8000c62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c66:	1be4      	subs	r4, r4, r7
 8000c68:	2600      	movs	r6, #0
 8000c6a:	b11d      	cbz	r5, 8000c74 <__udivmoddi4+0xa4>
 8000c6c:	40d4      	lsrs	r4, r2
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e9c5 4300 	strd	r4, r3, [r5]
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d909      	bls.n	8000c92 <__udivmoddi4+0xc2>
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	f000 80ef 	beq.w	8000e62 <__udivmoddi4+0x292>
 8000c84:	2600      	movs	r6, #0
 8000c86:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	fab3 f683 	clz	r6, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d14a      	bne.n	8000d30 <__udivmoddi4+0x160>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xd4>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 80f9 	bhi.w	8000e96 <__udivmoddi4+0x2c6>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb61 0303 	sbc.w	r3, r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	469e      	mov	lr, r3
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d0e0      	beq.n	8000c74 <__udivmoddi4+0xa4>
 8000cb2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb6:	e7dd      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xec>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f040 8092 	bne.w	8000dea <__udivmoddi4+0x21a>
 8000cc6:	eba1 010c 	sub.w	r1, r1, ip
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2601      	movs	r6, #1
 8000cd4:	0c20      	lsrs	r0, r4, #16
 8000cd6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cda:	fb07 1113 	mls	r1, r7, r3, r1
 8000cde:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce2:	fb0e f003 	mul.w	r0, lr, r3
 8000ce6:	4288      	cmp	r0, r1
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x12c>
 8000cea:	eb1c 0101 	adds.w	r1, ip, r1
 8000cee:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x12a>
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2c0>
 8000cfa:	4643      	mov	r3, r8
 8000cfc:	1a09      	subs	r1, r1, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d04:	fb07 1110 	mls	r1, r7, r0, r1
 8000d08:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x156>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x154>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d24:	4608      	mov	r0, r1
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d2e:	e79c      	b.n	8000c6a <__udivmoddi4+0x9a>
 8000d30:	f1c6 0720 	rsb	r7, r6, #32
 8000d34:	40b3      	lsls	r3, r6
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d42:	fa01 f306 	lsl.w	r3, r1, r6
 8000d46:	431c      	orrs	r4, r3
 8000d48:	40f9      	lsrs	r1, r7
 8000d4a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d52:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d56:	0c20      	lsrs	r0, r4, #16
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d64:	fb08 f00e 	mul.w	r0, r8, lr
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b8>
 8000d70:	eb1c 0101 	adds.w	r1, ip, r1
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2bc>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2bc>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4461      	add	r1, ip
 8000d88:	1a09      	subs	r1, r1, r0
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d90:	fb09 1110 	mls	r1, r9, r0, r1
 8000d94:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	458e      	cmp	lr, r1
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1e2>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000daa:	458e      	cmp	lr, r1
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4461      	add	r1, ip
 8000db2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dba:	eba1 010e 	sub.w	r1, r1, lr
 8000dbe:	42a1      	cmp	r1, r4
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46a6      	mov	lr, r4
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x2a4>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x2a0>
 8000dc8:	b15d      	cbz	r5, 8000de2 <__udivmoddi4+0x212>
 8000dca:	ebb3 0208 	subs.w	r2, r3, r8
 8000dce:	eb61 010e 	sbc.w	r1, r1, lr
 8000dd2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dd6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dda:	40f1      	lsrs	r1, r6
 8000ddc:	431f      	orrs	r7, r3
 8000dde:	e9c5 7100 	strd	r7, r1, [r5]
 8000de2:	2600      	movs	r6, #0
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	f1c2 0320 	rsb	r3, r2, #32
 8000dee:	40d8      	lsrs	r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa21 f303 	lsr.w	r3, r1, r3
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	4301      	orrs	r1, r0
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e08:	fb07 3610 	mls	r6, r7, r0, r3
 8000e0c:	0c0b      	lsrs	r3, r1, #16
 8000e0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e12:	fb00 f60e 	mul.w	r6, r0, lr
 8000e16:	429e      	cmp	r6, r3
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x260>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000e28:	429e      	cmp	r6, r3
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1b9b      	subs	r3, r3, r6
 8000e32:	b289      	uxth	r1, r1
 8000e34:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e38:	fb07 3316 	mls	r3, r7, r6, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb06 f30e 	mul.w	r3, r6, lr
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x28a>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2b0>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2b0>
 8000e56:	3e02      	subs	r6, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0x104>
 8000e62:	462e      	mov	r6, r5
 8000e64:	4628      	mov	r0, r5
 8000e66:	e705      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000e68:	4606      	mov	r6, r0
 8000e6a:	e6e3      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6f8      	b.n	8000c62 <__udivmoddi4+0x92>
 8000e70:	454b      	cmp	r3, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e80:	4646      	mov	r6, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x28a>
 8000e84:	4620      	mov	r0, r4
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1e2>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b8>
 8000e90:	3b02      	subs	r3, #2
 8000e92:	4461      	add	r1, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x12c>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e709      	b.n	8000cae <__udivmoddi4+0xde>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x156>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <rt_powd_snf>:
 * Arguments    : double u0
 *                double u1
 * Return Type  : double
 */
static double rt_powd_snf(double u0, double u1)
{
 8000ea4:	b5b0      	push	{r4, r5, r7, lr}
 8000ea6:	b08c      	sub	sp, #48	; 0x30
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	ed87 0b04 	vstr	d0, [r7, #16]
 8000eae:	ed87 1b02 	vstr	d1, [r7, #8]
  double y;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 8000eb2:	ed97 0b04 	vldr	d0, [r7, #16]
 8000eb6:	f001 fb31 	bl	800251c <rtIsNaN>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d106      	bne.n	8000ece <rt_powd_snf+0x2a>
 8000ec0:	ed97 0b02 	vldr	d0, [r7, #8]
 8000ec4:	f001 fb2a 	bl	800251c <rtIsNaN>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d005      	beq.n	8000eda <rt_powd_snf+0x36>
    y = rtNaN;
 8000ece:	4b80      	ldr	r3, [pc, #512]	; (80010d0 <rt_powd_snf+0x22c>)
 8000ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8000ed8:	e0ef      	b.n	80010ba <rt_powd_snf+0x216>
  } else {
    double d;
    double d1;
    d = fabs(u0);
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	ed97 7b00 	vldr	d7, [r7]
 8000eea:	ed87 7b08 	vstr	d7, [r7, #32]
    d1 = fabs(u1);
 8000eee:	68bc      	ldr	r4, [r7, #8]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8000ef6:	e9c7 4506 	strd	r4, r5, [r7, #24]
    if (rtIsInf(u1)) {
 8000efa:	ed97 0b02 	vldr	d0, [r7, #8]
 8000efe:	f001 fadf 	bl	80024c0 <rtIsInf>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d049      	beq.n	8000f9c <rt_powd_snf+0xf8>
      if (d == 1.0) {
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	4b71      	ldr	r3, [pc, #452]	; (80010d4 <rt_powd_snf+0x230>)
 8000f0e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f12:	f7ff fd85 	bl	8000a20 <__aeabi_dcmpeq>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d005      	beq.n	8000f28 <rt_powd_snf+0x84>
        y = 1.0;
 8000f1c:	f04f 0200 	mov.w	r2, #0
 8000f20:	4b6c      	ldr	r3, [pc, #432]	; (80010d4 <rt_powd_snf+0x230>)
 8000f22:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8000f26:	e0c8      	b.n	80010ba <rt_powd_snf+0x216>
      } else if (d > 1.0) {
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	4b69      	ldr	r3, [pc, #420]	; (80010d4 <rt_powd_snf+0x230>)
 8000f2e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f32:	f7ff fd9d 	bl	8000a70 <__aeabi_dcmpgt>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d017      	beq.n	8000f6c <rt_powd_snf+0xc8>
        if (u1 > 0.0) {
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f48:	f7ff fd92 	bl	8000a70 <__aeabi_dcmpgt>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d005      	beq.n	8000f5e <rt_powd_snf+0xba>
          y = rtInf;
 8000f52:	4b61      	ldr	r3, [pc, #388]	; (80010d8 <rt_powd_snf+0x234>)
 8000f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f58:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8000f5c:	e0ad      	b.n	80010ba <rt_powd_snf+0x216>
        } else {
          y = 0.0;
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8000f6a:	e0a6      	b.n	80010ba <rt_powd_snf+0x216>
        }
      } else if (u1 > 0.0) {
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f78:	f7ff fd7a 	bl	8000a70 <__aeabi_dcmpgt>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d006      	beq.n	8000f90 <rt_powd_snf+0xec>
        y = 0.0;
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8000f8e:	e094      	b.n	80010ba <rt_powd_snf+0x216>
      } else {
        y = rtInf;
 8000f90:	4b51      	ldr	r3, [pc, #324]	; (80010d8 <rt_powd_snf+0x234>)
 8000f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f96:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8000f9a:	e08e      	b.n	80010ba <rt_powd_snf+0x216>
      }
    } else if (d1 == 0.0) {
 8000f9c:	f04f 0200 	mov.w	r2, #0
 8000fa0:	f04f 0300 	mov.w	r3, #0
 8000fa4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fa8:	f7ff fd3a 	bl	8000a20 <__aeabi_dcmpeq>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d005      	beq.n	8000fbe <rt_powd_snf+0x11a>
      y = 1.0;
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	4b47      	ldr	r3, [pc, #284]	; (80010d4 <rt_powd_snf+0x230>)
 8000fb8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8000fbc:	e07d      	b.n	80010ba <rt_powd_snf+0x216>
    } else if (d1 == 1.0) {
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	4b44      	ldr	r3, [pc, #272]	; (80010d4 <rt_powd_snf+0x230>)
 8000fc4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fc8:	f7ff fd2a 	bl	8000a20 <__aeabi_dcmpeq>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d01b      	beq.n	800100a <rt_powd_snf+0x166>
      if (u1 > 0.0) {
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fde:	f7ff fd47 	bl	8000a70 <__aeabi_dcmpgt>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d004      	beq.n	8000ff2 <rt_powd_snf+0x14e>
        y = u0;
 8000fe8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8000ff0:	e063      	b.n	80010ba <rt_powd_snf+0x216>
      } else {
        y = 1.0 / u0;
 8000ff2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ff6:	f04f 0000 	mov.w	r0, #0
 8000ffa:	4936      	ldr	r1, [pc, #216]	; (80010d4 <rt_powd_snf+0x230>)
 8000ffc:	f7ff fbd2 	bl	80007a4 <__aeabi_ddiv>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001008:	e057      	b.n	80010ba <rt_powd_snf+0x216>
      }
    } else if (u1 == 2.0) {
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001012:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001016:	f7ff fd03 	bl	8000a20 <__aeabi_dcmpeq>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00a      	beq.n	8001036 <rt_powd_snf+0x192>
      y = u0 * u0;
 8001020:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001024:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001028:	f7ff fa92 	bl	8000550 <__aeabi_dmul>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001034:	e041      	b.n	80010ba <rt_powd_snf+0x216>
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	4b28      	ldr	r3, [pc, #160]	; (80010dc <rt_powd_snf+0x238>)
 800103c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001040:	f7ff fcee 	bl	8000a20 <__aeabi_dcmpeq>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d011      	beq.n	800106e <rt_powd_snf+0x1ca>
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	f04f 0300 	mov.w	r3, #0
 8001052:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001056:	f7ff fd01 	bl	8000a5c <__aeabi_dcmpge>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d006      	beq.n	800106e <rt_powd_snf+0x1ca>
      y = sqrt(u0);
 8001060:	ed97 0b04 	vldr	d0, [r7, #16]
 8001064:	f005 f8d4 	bl	8006210 <sqrt>
 8001068:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 800106c:	e025      	b.n	80010ba <rt_powd_snf+0x216>
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	f04f 0300 	mov.w	r3, #0
 8001076:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800107a:	f7ff fcdb 	bl	8000a34 <__aeabi_dcmplt>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d012      	beq.n	80010aa <rt_powd_snf+0x206>
 8001084:	ed97 0b02 	vldr	d0, [r7, #8]
 8001088:	f004 ffd2 	bl	8006030 <floor>
 800108c:	ec53 2b10 	vmov	r2, r3, d0
 8001090:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001094:	f7ff fcec 	bl	8000a70 <__aeabi_dcmpgt>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d005      	beq.n	80010aa <rt_powd_snf+0x206>
      y = rtNaN;
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <rt_powd_snf+0x22c>)
 80010a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80010a8:	e007      	b.n	80010ba <rt_powd_snf+0x216>
    } else {
      y = pow(u0, u1);
 80010aa:	ed97 1b02 	vldr	d1, [r7, #8]
 80010ae:	ed97 0b04 	vldr	d0, [r7, #16]
 80010b2:	f005 f83d 	bl	8006130 <pow>
 80010b6:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
    }
  }
  return y;
 80010ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80010be:	ec43 2b17 	vmov	d7, r2, r3
}
 80010c2:	eeb0 0a47 	vmov.f32	s0, s14
 80010c6:	eef0 0a67 	vmov.f32	s1, s15
 80010ca:	3730      	adds	r7, #48	; 0x30
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bdb0      	pop	{r4, r5, r7, pc}
 80010d0:	20000000 	.word	0x20000000
 80010d4:	3ff00000 	.word	0x3ff00000
 80010d8:	20000008 	.word	0x20000008
 80010dc:	3fe00000 	.word	0x3fe00000

080010e0 <Qubic>:
 * Return Type  : void
 */
void Qubic(double q_k1, double q_k2, double qdot_k1, double qdot_k2, double tf,
           emxArray_real_T *q_position, emxArray_real_T *q_velocity,
           emxArray_real_T *q_acc)
{
 80010e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010e4:	b0a1      	sub	sp, #132	; 0x84
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 80010ec:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 80010f0:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 80010f4:	ed87 3b08 	vstr	d3, [r7, #32]
 80010f8:	ed87 4b06 	vstr	d4, [r7, #24]
 80010fc:	6178      	str	r0, [r7, #20]
 80010fe:	6139      	str	r1, [r7, #16]
 8001100:	60fa      	str	r2, [r7, #12]
  double *q_position_data;
  double *q_velocity_data;
  int i;
  int k;
  int q_acc_tmp_tmp;
  q_acc_data = q_acc->data;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	67fb      	str	r3, [r7, #124]	; 0x7c
  delta1 = tf * 2000.0;
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	4bac      	ldr	r3, [pc, #688]	; (80013c0 <Qubic+0x2e0>)
 800110e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001112:	f7ff fa1d 	bl	8000550 <__aeabi_dmul>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  if (!(delta1 >= 0.0)) {
 800111e:	2301      	movs	r3, #1
 8001120:	461e      	mov	r6, r3
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	f04f 0300 	mov.w	r3, #0
 800112a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800112e:	f7ff fc95 	bl	8000a5c <__aeabi_dcmpge>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <Qubic+0x5c>
 8001138:	2300      	movs	r3, #0
 800113a:	461e      	mov	r6, r3
 800113c:	b2f3      	uxtb	r3, r6
 800113e:	f083 0301 	eor.w	r3, r3, #1
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	d009      	beq.n	800115c <Qubic+0x7c>
    q_acc->size[0] = 1;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2201      	movs	r2, #1
 800114e:	601a      	str	r2, [r3, #0]
    q_acc->size[1] = 0;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	3304      	adds	r3, #4
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	e158      	b.n	800140e <Qubic+0x32e>
  } else {
    d = floor(delta1);
 800115c:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8001160:	f004 ff66 	bl	8006030 <floor>
 8001164:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
    i = q_acc->size[0] * q_acc->size[1];
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	6852      	ldr	r2, [r2, #4]
 8001172:	3204      	adds	r2, #4
 8001174:	6812      	ldr	r2, [r2, #0]
 8001176:	fb02 f303 	mul.w	r3, r2, r3
 800117a:	67bb      	str	r3, [r7, #120]	; 0x78
    q_acc->size[0] = 1;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	601a      	str	r2, [r3, #0]
    q_acc->size[1] = (int)d;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	1d1e      	adds	r6, r3, #4
 800118a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800118e:	f7ff fc8f 	bl	8000ab0 <__aeabi_d2iz>
 8001192:	4603      	mov	r3, r0
 8001194:	6033      	str	r3, [r6, #0]
    emxEnsureCapacity_real_T(q_acc, i);
 8001196:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f000 fb3e 	bl	800181a <emxEnsureCapacity_real_T>
    q_acc_data = q_acc->data;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	67fb      	str	r3, [r7, #124]	; 0x7c
    if ((int)d >= 1) {
 80011a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80011a8:	f7ff fc82 	bl	8000ab0 <__aeabi_d2iz>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f340 812d 	ble.w	800140e <Qubic+0x32e>
      q_acc_tmp_tmp = (int)d - 1;
 80011b4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80011b8:	f7ff fc7a 	bl	8000ab0 <__aeabi_d2iz>
 80011bc:	4603      	mov	r3, r0
 80011be:	3b01      	subs	r3, #1
 80011c0:	65fb      	str	r3, [r7, #92]	; 0x5c
      q_acc_data[(int)floor(delta1) - 1] = tf;
 80011c2:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 80011c6:	f004 ff33 	bl	8006030 <floor>
 80011ca:	ec53 2b10 	vmov	r2, r3, d0
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	f7ff fc6d 	bl	8000ab0 <__aeabi_d2iz>
 80011d6:	4603      	mov	r3, r0
 80011d8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80011dc:	3b01      	subs	r3, #1
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80011e2:	18d1      	adds	r1, r2, r3
 80011e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011e8:	e9c1 2300 	strd	r2, r3, [r1]
      if (q_acc->size[1] >= 2) {
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	3304      	adds	r3, #4
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	f340 810a 	ble.w	800140e <Qubic+0x32e>
        q_acc_data[0] = 0.0;
 80011fa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	e9c1 2300 	strd	r2, r3, [r1]
        if (q_acc->size[1] >= 3) {
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	3304      	adds	r3, #4
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b02      	cmp	r3, #2
 8001212:	f340 80fc 	ble.w	800140e <Qubic+0x32e>
          if (-tf == 0.0) {
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001222:	f7ff fbfd 	bl	8000a20 <__aeabi_dcmpeq>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d051      	beq.n	80012d0 <Qubic+0x1f0>
            delta1 = tf / ((double)q_acc->size[1] - 1.0);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	3304      	adds	r3, #4
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f921 	bl	800047c <__aeabi_i2d>
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	4b61      	ldr	r3, [pc, #388]	; (80013c4 <Qubic+0x2e4>)
 8001240:	f7fe ffce 	bl	80001e0 <__aeabi_dsub>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800124c:	f7ff faaa 	bl	80007a4 <__aeabi_ddiv>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            for (k = 2; k <= q_acc_tmp_tmp; k++) {
 8001258:	2302      	movs	r3, #2
 800125a:	677b      	str	r3, [r7, #116]	; 0x74
 800125c:	e01c      	b.n	8001298 <Qubic+0x1b8>
              q_acc_data[k - 1] =
                  (double)(((k << 1) - q_acc->size[1]) - 1) * delta1;
 800125e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001260:	005a      	lsls	r2, r3, #1
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	3304      	adds	r3, #4
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	3b01      	subs	r3, #1
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f904 	bl	800047c <__aeabi_i2d>
              q_acc_data[k - 1] =
 8001274:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001276:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800127a:	3b01      	subs	r3, #1
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001280:	18d6      	adds	r6, r2, r3
                  (double)(((k << 1) - q_acc->size[1]) - 1) * delta1;
 8001282:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001286:	f7ff f963 	bl	8000550 <__aeabi_dmul>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
              q_acc_data[k - 1] =
 800128e:	e9c6 2300 	strd	r2, r3, [r6]
            for (k = 2; k <= q_acc_tmp_tmp; k++) {
 8001292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001294:	3301      	adds	r3, #1
 8001296:	677b      	str	r3, [r7, #116]	; 0x74
 8001298:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800129a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800129c:	429a      	cmp	r2, r3
 800129e:	ddde      	ble.n	800125e <Qubic+0x17e>
            }
            if ((q_acc->size[1] & 1) == 1) {
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	3304      	adds	r3, #4
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 80ae 	beq.w	800140e <Qubic+0x32e>
              q_acc_data[q_acc->size[1] >> 1] = 0.0;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	3304      	adds	r3, #4
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	105b      	asrs	r3, r3, #1
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80012c0:	18d1      	adds	r1, r2, r3
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	f04f 0300 	mov.w	r3, #0
 80012ca:	e9c1 2300 	strd	r2, r3, [r1]
 80012ce:	e09e      	b.n	800140e <Qubic+0x32e>
            }
          } else if ((tf < 0.0) && (fabs(tf) > 8.9884656743115785E+307)) {
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012dc:	f7ff fbaa 	bl	8000a34 <__aeabi_dcmplt>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d04e      	beq.n	8001384 <Qubic+0x2a4>
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	603b      	str	r3, [r7, #0]
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	f04f 32ff 	mov.w	r2, #4294967295
 80012f6:	4b34      	ldr	r3, [pc, #208]	; (80013c8 <Qubic+0x2e8>)
 80012f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012fc:	f7ff fbb8 	bl	8000a70 <__aeabi_dcmpgt>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d03e      	beq.n	8001384 <Qubic+0x2a4>
            delta1 = tf / ((double)q_acc->size[1] - 1.0);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	3304      	adds	r3, #4
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f8b4 	bl	800047c <__aeabi_i2d>
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <Qubic+0x2e4>)
 800131a:	f7fe ff61 	bl	80001e0 <__aeabi_dsub>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001326:	f7ff fa3d 	bl	80007a4 <__aeabi_ddiv>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            i = q_acc->size[1];
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	67bb      	str	r3, [r7, #120]	; 0x78
            for (k = 0; k <= i - 3; k++) {
 800133a:	2300      	movs	r3, #0
 800133c:	677b      	str	r3, [r7, #116]	; 0x74
 800133e:	e01b      	b.n	8001378 <Qubic+0x298>
              q_acc_data[k + 1] = delta1 * ((double)k + 1.0);
 8001340:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001342:	f7ff f89b 	bl	800047c <__aeabi_i2d>
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <Qubic+0x2e4>)
 800134c:	f7fe ff4a 	bl	80001e4 <__adddf3>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800135a:	3301      	adds	r3, #1
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001360:	18d6      	adds	r6, r2, r3
 8001362:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001366:	f7ff f8f3 	bl	8000550 <__aeabi_dmul>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	e9c6 2300 	strd	r2, r3, [r6]
            for (k = 0; k <= i - 3; k++) {
 8001372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001374:	3301      	adds	r3, #1
 8001376:	677b      	str	r3, [r7, #116]	; 0x74
 8001378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800137a:	3b02      	subs	r3, #2
 800137c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800137e:	429a      	cmp	r2, r3
 8001380:	dbde      	blt.n	8001340 <Qubic+0x260>
          } else if ((tf < 0.0) && (fabs(tf) > 8.9884656743115785E+307)) {
 8001382:	e044      	b.n	800140e <Qubic+0x32e>
            }
          } else {
            delta1 = tf / ((double)q_acc->size[1] - 1.0);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	3304      	adds	r3, #4
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f875 	bl	800047c <__aeabi_i2d>
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <Qubic+0x2e4>)
 8001398:	f7fe ff22 	bl	80001e0 <__aeabi_dsub>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013a4:	f7ff f9fe 	bl	80007a4 <__aeabi_ddiv>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            i = q_acc->size[1];
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	67bb      	str	r3, [r7, #120]	; 0x78
            for (k = 0; k <= i - 3; k++) {
 80013b8:	2300      	movs	r3, #0
 80013ba:	677b      	str	r3, [r7, #116]	; 0x74
 80013bc:	e022      	b.n	8001404 <Qubic+0x324>
 80013be:	bf00      	nop
 80013c0:	409f4000 	.word	0x409f4000
 80013c4:	3ff00000 	.word	0x3ff00000
 80013c8:	7fdfffff 	.word	0x7fdfffff
              q_acc_data[k + 1] = ((double)k + 1.0) * delta1;
 80013cc:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80013ce:	f7ff f855 	bl	800047c <__aeabi_i2d>
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	4b6e      	ldr	r3, [pc, #440]	; (8001590 <Qubic+0x4b0>)
 80013d8:	f7fe ff04 	bl	80001e4 <__adddf3>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013e6:	3301      	adds	r3, #1
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80013ec:	18d6      	adds	r6, r2, r3
 80013ee:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80013f2:	f7ff f8ad 	bl	8000550 <__aeabi_dmul>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	e9c6 2300 	strd	r2, r3, [r6]
            for (k = 0; k <= i - 3; k++) {
 80013fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001400:	3301      	adds	r3, #1
 8001402:	677b      	str	r3, [r7, #116]	; 0x74
 8001404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001406:	3b02      	subs	r3, #2
 8001408:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800140a:	429a      	cmp	r2, r3
 800140c:	dbde      	blt.n	80013cc <Qubic+0x2ec>
          }
        }
      }
    }
  }
  delta1 = q_k2 - q_k1;
 800140e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001412:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001416:	f7fe fee3 	bl	80001e0 <__aeabi_dsub>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  C2_tmp = tf * tf;
 8001422:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001426:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800142a:	f7ff f891 	bl	8000550 <__aeabi_dmul>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  C2 = 3.0 * (delta1 / C2_tmp) + (-qdot_k2 - 2.0 * qdot_k1) / tf;
 8001436:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800143a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800143e:	f7ff f9b1 	bl	80007a4 <__aeabi_ddiv>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4610      	mov	r0, r2
 8001448:	4619      	mov	r1, r3
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	4b51      	ldr	r3, [pc, #324]	; (8001594 <Qubic+0x4b4>)
 8001450:	f7ff f87e 	bl	8000550 <__aeabi_dmul>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4690      	mov	r8, r2
 800145a:	4699      	mov	r9, r3
 800145c:	6a3c      	ldr	r4, [r7, #32]
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001464:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	f7fe feba 	bl	80001e4 <__adddf3>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4620      	mov	r0, r4
 8001476:	4629      	mov	r1, r5
 8001478:	f7fe feb2 	bl	80001e0 <__aeabi_dsub>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001488:	f7ff f98c 	bl	80007a4 <__aeabi_ddiv>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4640      	mov	r0, r8
 8001492:	4649      	mov	r1, r9
 8001494:	f7fe fea6 	bl	80001e4 <__adddf3>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  delta1 =
      -2.0 * (delta1 / rt_powd_snf(tf, 3.0)) + (qdot_k2 + qdot_k1) / C2_tmp;
 80014a0:	ed9f 1b39 	vldr	d1, [pc, #228]	; 8001588 <Qubic+0x4a8>
 80014a4:	ed97 0b06 	vldr	d0, [r7, #24]
 80014a8:	f7ff fcfc 	bl	8000ea4 <rt_powd_snf>
 80014ac:	ec53 2b10 	vmov	r2, r3, d0
 80014b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80014b4:	f7ff f976 	bl	80007a4 <__aeabi_ddiv>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4610      	mov	r0, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80014c8:	f7ff f842 	bl	8000550 <__aeabi_dmul>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4614      	mov	r4, r2
 80014d2:	461d      	mov	r5, r3
 80014d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80014d8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014dc:	f7fe fe82 	bl	80001e4 <__adddf3>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80014ec:	f7ff f95a 	bl	80007a4 <__aeabi_ddiv>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
  delta1 =
 80014f4:	4620      	mov	r0, r4
 80014f6:	4629      	mov	r1, r5
 80014f8:	f7fe fe74 	bl	80001e4 <__adddf3>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  i = q_velocity->size[0] * q_velocity->size[1];
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	6852      	ldr	r2, [r2, #4]
 800150e:	3204      	adds	r2, #4
 8001510:	6812      	ldr	r2, [r2, #0]
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	67bb      	str	r3, [r7, #120]	; 0x78
  q_velocity->size[0] = 1;
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	601a      	str	r2, [r3, #0]
  q_velocity->size[1] = q_acc->size[1];
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	3304      	adds	r3, #4
 800152a:	6852      	ldr	r2, [r2, #4]
 800152c:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_velocity, i);
 800152e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001530:	6938      	ldr	r0, [r7, #16]
 8001532:	f000 f972 	bl	800181a <emxEnsureCapacity_real_T>
  q_velocity_data = q_velocity->data;
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	647b      	str	r3, [r7, #68]	; 0x44
  q_acc_tmp_tmp = q_acc->size[1];
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	65fb      	str	r3, [r7, #92]	; 0x5c
  i = q_position->size[0] * q_position->size[1];
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	6852      	ldr	r2, [r2, #4]
 800154e:	3204      	adds	r2, #4
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	67bb      	str	r3, [r7, #120]	; 0x78
  q_position->size[0] = 1;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	601a      	str	r2, [r3, #0]
  q_position->size[1] = q_acc->size[1];
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	3304      	adds	r3, #4
 800156a:	6852      	ldr	r2, [r2, #4]
 800156c:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_position, i);
 800156e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001570:	6978      	ldr	r0, [r7, #20]
 8001572:	f000 f952 	bl	800181a <emxEnsureCapacity_real_T>
  q_position_data = q_position->data;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	643b      	str	r3, [r7, #64]	; 0x40
  for (i = 0; i < q_acc_tmp_tmp; i++) {
 800157c:	2300      	movs	r3, #0
 800157e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001580:	e067      	b.n	8001652 <Qubic+0x572>
 8001582:	bf00      	nop
 8001584:	f3af 8000 	nop.w
 8001588:	00000000 	.word	0x00000000
 800158c:	40080000 	.word	0x40080000
 8001590:	3ff00000 	.word	0x3ff00000
 8001594:	40080000 	.word	0x40080000
    d = q_acc_data[i];
 8001598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800159e:	4413      	add	r3, r2
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    C2_tmp = d * d;
 80015a8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80015ac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80015b0:	f7fe ffce 	bl	8000550 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    q_velocity_data[i] = C2_tmp;
 80015bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80015c2:	18d1      	adds	r1, r2, r3
 80015c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80015c8:	e9c1 2300 	strd	r2, r3, [r1]
    q_position_data[i] =
        ((q_k1 + qdot_k1 * d) + C2 * C2_tmp) + delta1 * rt_powd_snf(d, 3.0);
 80015cc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80015d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015d4:	f7fe ffbc 	bl	8000550 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80015e4:	f7fe fdfe 	bl	80001e4 <__adddf3>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4614      	mov	r4, r2
 80015ee:	461d      	mov	r5, r3
 80015f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80015f4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80015f8:	f7fe ffaa 	bl	8000550 <__aeabi_dmul>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4620      	mov	r0, r4
 8001602:	4629      	mov	r1, r5
 8001604:	f7fe fdee 	bl	80001e4 <__adddf3>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4690      	mov	r8, r2
 800160e:	4699      	mov	r9, r3
 8001610:	ed9f 1b71 	vldr	d1, [pc, #452]	; 80017d8 <Qubic+0x6f8>
 8001614:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001618:	f7ff fc44 	bl	8000ea4 <rt_powd_snf>
 800161c:	ec51 0b10 	vmov	r0, r1, d0
 8001620:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001624:	f7fe ff94 	bl	8000550 <__aeabi_dmul>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
    q_position_data[i] =
 8001630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001636:	18d4      	adds	r4, r2, r3
        ((q_k1 + qdot_k1 * d) + C2 * C2_tmp) + delta1 * rt_powd_snf(d, 3.0);
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4640      	mov	r0, r8
 800163e:	4649      	mov	r1, r9
 8001640:	f7fe fdd0 	bl	80001e4 <__adddf3>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
    q_position_data[i] =
 8001648:	e9c4 2300 	strd	r2, r3, [r4]
  for (i = 0; i < q_acc_tmp_tmp; i++) {
 800164c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800164e:	3301      	adds	r3, #1
 8001650:	67bb      	str	r3, [r7, #120]	; 0x78
 8001652:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001656:	429a      	cmp	r2, r3
 8001658:	db9e      	blt.n	8001598 <Qubic+0x4b8>
  }
  i = q_velocity->size[0] * q_velocity->size[1];
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	6852      	ldr	r2, [r2, #4]
 8001664:	3204      	adds	r2, #4
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	fb02 f303 	mul.w	r3, r2, r3
 800166c:	67bb      	str	r3, [r7, #120]	; 0x78
  q_velocity->size[0] = 1;
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]
  q_velocity->size[1] = q_acc->size[1];
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	3304      	adds	r3, #4
 8001680:	6852      	ldr	r2, [r2, #4]
 8001682:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_velocity, i);
 8001684:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001686:	6938      	ldr	r0, [r7, #16]
 8001688:	f000 f8c7 	bl	800181a <emxEnsureCapacity_real_T>
  q_velocity_data = q_velocity->data;
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	647b      	str	r3, [r7, #68]	; 0x44
  d = 2.0 * C2;
 8001692:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	f7fe fda3 	bl	80001e4 <__adddf3>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  C2_tmp = 3.0 * delta1;
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	4b4d      	ldr	r3, [pc, #308]	; (80017e0 <Qubic+0x700>)
 80016ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80016b0:	f7fe ff4e 	bl	8000550 <__aeabi_dmul>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  q_acc_tmp_tmp = q_acc->size[1] - 1;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	3304      	adds	r3, #4
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 80016c8:	2300      	movs	r3, #0
 80016ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80016cc:	e034      	b.n	8001738 <Qubic+0x658>
    q_velocity_data[i] =
        (qdot_k1 + d * q_acc_data[i]) + C2_tmp * q_velocity_data[i];
 80016ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80016d4:	4413      	add	r3, r2
 80016d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016da:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80016de:	f7fe ff37 	bl	8000550 <__aeabi_dmul>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80016ee:	f7fe fd79 	bl	80001e4 <__adddf3>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4690      	mov	r8, r2
 80016f8:	4699      	mov	r9, r3
 80016fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001700:	4413      	add	r3, r2
 8001702:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001706:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800170a:	f7fe ff21 	bl	8000550 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
    q_velocity_data[i] =
 8001716:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800171c:	18d4      	adds	r4, r2, r3
        (qdot_k1 + d * q_acc_data[i]) + C2_tmp * q_velocity_data[i];
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4640      	mov	r0, r8
 8001724:	4649      	mov	r1, r9
 8001726:	f7fe fd5d 	bl	80001e4 <__adddf3>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
    q_velocity_data[i] =
 800172e:	e9c4 2300 	strd	r2, r3, [r4]
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001732:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001734:	3301      	adds	r3, #1
 8001736:	67bb      	str	r3, [r7, #120]	; 0x78
 8001738:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800173a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800173c:	429a      	cmp	r2, r3
 800173e:	ddc6      	ble.n	80016ce <Qubic+0x5ee>
  }
  i = q_acc->size[0] * q_acc->size[1];
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	6852      	ldr	r2, [r2, #4]
 800174a:	3204      	adds	r2, #4
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	fb02 f303 	mul.w	r3, r2, r3
 8001752:	67bb      	str	r3, [r7, #120]	; 0x78
  q_acc->size[0] = 1;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_acc, i);
 800175c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f000 f85b 	bl	800181a <emxEnsureCapacity_real_T>
  q_acc_data = q_acc->data;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	67fb      	str	r3, [r7, #124]	; 0x7c
  C2_tmp = 6.0 * delta1;
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <Qubic+0x704>)
 8001770:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001774:	f7fe feec 	bl	8000550 <__aeabi_dmul>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001780:	2300      	movs	r3, #0
 8001782:	67bb      	str	r3, [r7, #120]	; 0x78
 8001784:	e01c      	b.n	80017c0 <Qubic+0x6e0>
    q_acc_data[i] = d + C2_tmp * q_acc_data[i];
 8001786:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800178c:	4413      	add	r3, r2
 800178e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001792:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001796:	f7fe fedb 	bl	8000550 <__aeabi_dmul>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4610      	mov	r0, r2
 80017a0:	4619      	mov	r1, r3
 80017a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80017a8:	18d4      	adds	r4, r2, r3
 80017aa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80017ae:	f7fe fd19 	bl	80001e4 <__adddf3>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	e9c4 2300 	strd	r2, r3, [r4]
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 80017ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017bc:	3301      	adds	r3, #1
 80017be:	67bb      	str	r3, [r7, #120]	; 0x78
 80017c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80017c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017c4:	429a      	cmp	r2, r3
 80017c6:	ddde      	ble.n	8001786 <Qubic+0x6a6>
  }
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	3784      	adds	r7, #132	; 0x84
 80017ce:	46bd      	mov	sp, r7
 80017d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017d4:	f3af 8000 	nop.w
 80017d8:	00000000 	.word	0x00000000
 80017dc:	40080000 	.word	0x40080000
 80017e0:	40080000 	.word	0x40080000
 80017e4:	40180000 	.word	0x40180000

080017e8 <emxDestroyArray_real_T>:
/*
 * Arguments    : emxArray_real_T *emxArray
 * Return Type  : void
 */
void emxDestroyArray_real_T(emxArray_real_T *emxArray)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  emxFree_real_T(&emxArray);
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f878 	bl	80018e8 <emxFree_real_T>
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <emxInitArray_real_T>:
 * Arguments    : emxArray_real_T **pEmxArray
 *                int numDimensions
 * Return Type  : void
 */
void emxInitArray_real_T(emxArray_real_T **pEmxArray, int numDimensions)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  emxInit_real_T(pEmxArray, numDimensions);
 800180a:	6839      	ldr	r1, [r7, #0]
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 f895 	bl	800193c <emxInit_real_T>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <emxEnsureCapacity_real_T>:
 * Arguments    : emxArray_real_T *emxArray
 *                int oldNumel
 * Return Type  : void
 */
void emxEnsureCapacity_real_T(emxArray_real_T *emxArray, int oldNumel)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	6039      	str	r1, [r7, #0]
  int i;
  int newNumel;
  void *newData;
  if (oldNumel < 0) {
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	da01      	bge.n	800182e <emxEnsureCapacity_real_T+0x14>
    oldNumel = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	603b      	str	r3, [r7, #0]
  }
  newNumel = 1;
 800182e:	2301      	movs	r3, #1
 8001830:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e00c      	b.n	8001852 <emxEnsureCapacity_real_T+0x38>
    newNumel *= emxArray->size[i];
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	3301      	adds	r3, #1
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	429a      	cmp	r2, r3
 800185a:	dbed      	blt.n	8001838 <emxEnsureCapacity_real_T+0x1e>
  }
  if (newNumel > emxArray->allocatedSize) {
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	429a      	cmp	r2, r3
 8001864:	dd3c      	ble.n	80018e0 <emxEnsureCapacity_real_T+0xc6>
    i = emxArray->allocatedSize;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	617b      	str	r3, [r7, #20]
    if (i < 16) {
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	2b0f      	cmp	r3, #15
 8001870:	dc0d      	bgt.n	800188e <emxEnsureCapacity_real_T+0x74>
      i = 16;
 8001872:	2310      	movs	r3, #16
 8001874:	617b      	str	r3, [r7, #20]
    }
    while (i < newNumel) {
 8001876:	e00a      	b.n	800188e <emxEnsureCapacity_real_T+0x74>
      if (i > 1073741823) {
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800187e:	db03      	blt.n	8001888 <emxEnsureCapacity_real_T+0x6e>
        i = MAX_int32_T;
 8001880:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	e002      	b.n	800188e <emxEnsureCapacity_real_T+0x74>
      } else {
        i *= 2;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	617b      	str	r3, [r7, #20]
    while (i < newNumel) {
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	429a      	cmp	r2, r3
 8001894:	dbf0      	blt.n	8001878 <emxEnsureCapacity_real_T+0x5e>
      }
    }
    newData = calloc((unsigned int)i, sizeof(double));
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	2108      	movs	r1, #8
 800189a:	4618      	mov	r0, r3
 800189c:	f004 fa5c 	bl	8005d58 <calloc>
 80018a0:	4603      	mov	r3, r0
 80018a2:	60fb      	str	r3, [r7, #12]
    if (emxArray->data != NULL) {
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d010      	beq.n	80018ce <emxEnsureCapacity_real_T+0xb4>
      memcpy(newData, emxArray->data, sizeof(double) * (unsigned int)oldNumel);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6819      	ldr	r1, [r3, #0]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	461a      	mov	r2, r3
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f004 fa90 	bl	8005ddc <memcpy>
      if (emxArray->canFreeData) {
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	7c1b      	ldrb	r3, [r3, #16]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d004      	beq.n	80018ce <emxEnsureCapacity_real_T+0xb4>
        free(emxArray->data);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f004 fa7f 	bl	8005dcc <free>
      }
    }
    emxArray->data = (double *)newData;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	601a      	str	r2, [r3, #0]
    emxArray->allocatedSize = i;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	609a      	str	r2, [r3, #8]
    emxArray->canFreeData = true;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	741a      	strb	r2, [r3, #16]
  }
}
 80018e0:	bf00      	nop
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <emxFree_real_T>:
/*
 * Arguments    : emxArray_real_T **pEmxArray
 * Return Type  : void
 */
void emxFree_real_T(emxArray_real_T **pEmxArray)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if (*pEmxArray != (emxArray_real_T *)NULL) {
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d01d      	beq.n	8001934 <emxFree_real_T+0x4c>
    if (((*pEmxArray)->data != (double *)NULL) && (*pEmxArray)->canFreeData) {
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00a      	beq.n	8001918 <emxFree_real_T+0x30>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	7c1b      	ldrb	r3, [r3, #16]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <emxFree_real_T+0x30>
      free((*pEmxArray)->data);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f004 fa5a 	bl	8005dcc <free>
    }
    free((*pEmxArray)->size);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	4618      	mov	r0, r3
 8001920:	f004 fa54 	bl	8005dcc <free>
    free(*pEmxArray);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f004 fa4f 	bl	8005dcc <free>
    *pEmxArray = (emxArray_real_T *)NULL;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
  }
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <emxInit_real_T>:
 * Arguments    : emxArray_real_T **pEmxArray
 *                int numDimensions
 * Return Type  : void
 */
void emxInit_real_T(emxArray_real_T **pEmxArray, int numDimensions)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  emxArray_real_T *emxArray;
  int i;
  *pEmxArray = (emxArray_real_T *)malloc(sizeof(emxArray_real_T));
 8001946:	2014      	movs	r0, #20
 8001948:	f004 fa38 	bl	8005dbc <malloc>
 800194c:	4603      	mov	r3, r0
 800194e:	461a      	mov	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	601a      	str	r2, [r3, #0]
  emxArray = *pEmxArray;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	60bb      	str	r3, [r7, #8]
  emxArray->data = (double *)NULL;
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
  emxArray->numDimensions = numDimensions;
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	60da      	str	r2, [r3, #12]
  emxArray->size = (int *)malloc(sizeof(int) * (unsigned int)numDimensions);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4618      	mov	r0, r3
 800196c:	f004 fa26 	bl	8005dbc <malloc>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	605a      	str	r2, [r3, #4]
  emxArray->allocatedSize = 0;
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  emxArray->canFreeData = true;
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	2201      	movs	r2, #1
 8001982:	741a      	strb	r2, [r3, #16]
  for (i = 0; i < numDimensions; i++) {
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	e009      	b.n	800199e <emxInit_real_T+0x62>
    emxArray->size[i] = 0;
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
  for (i = 0; i < numDimensions; i++) {
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	3301      	adds	r3, #1
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	dbf1      	blt.n	800198a <emxInit_real_T+0x4e>
  }
}
 80019a6:	bf00      	nop
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019b4:	f3bf 8f4f 	dsb	sy
}
 80019b8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <__NVIC_SystemReset+0x24>)
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80019c2:	4904      	ldr	r1, [pc, #16]	; (80019d4 <__NVIC_SystemReset+0x24>)
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <__NVIC_SystemReset+0x28>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80019ca:	f3bf 8f4f 	dsb	sy
}
 80019ce:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <__NVIC_SystemReset+0x20>
 80019d4:	e000ed00 	.word	0xe000ed00
 80019d8:	05fa0004 	.word	0x05fa0004

080019dc <argInit_real_T>:
/*
 * Arguments    : void
 * Return Type  : double
 */
static double argInit_real_T(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return 0.0;
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	ec43 2b17 	vmov	d7, r2, r3
}
 80019ec:	eeb0 0a47 	vmov.f32	s0, s14
 80019f0:	eef0 0a67 	vmov.f32	s1, s15
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	main_Qubic();
 8001a02:	f000 fcfd 	bl	8002400 <main_Qubic>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a06:	f000 fff5 	bl	80029f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a0a:	f000 f99d 	bl	8001d48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a0e:	f000 fbc5 	bl	800219c <MX_GPIO_Init>
  MX_DMA_Init();
 8001a12:	f000 fba3 	bl	800215c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001a16:	f000 fb77 	bl	8002108 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001a1a:	f000 fa5d 	bl	8001ed8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a1e:	f000 faaf 	bl	8001f80 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001a22:	f000 fb23 	bl	800206c <MX_TIM5_Init>
  MX_ADC1_Init();
 8001a26:	f000 f9f7 	bl	8001e18 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
    HAL_ADC_Start_DMA(&hadc1, Joystick_position, 2);
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	49ac      	ldr	r1, [pc, #688]	; (8001ce0 <main+0x2e4>)
 8001a2e:	48ad      	ldr	r0, [pc, #692]	; (8001ce4 <main+0x2e8>)
 8001a30:	f001 f896 	bl	8002b60 <HAL_ADC_Start_DMA>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);
 8001a34:	2104      	movs	r1, #4
 8001a36:	48ac      	ldr	r0, [pc, #688]	; (8001ce8 <main+0x2ec>)
 8001a38:	f003 f97a 	bl	8004d30 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	48ab      	ldr	r0, [pc, #684]	; (8001cec <main+0x2f0>)
 8001a40:	f003 f820 	bl	8004a84 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001a44:	2104      	movs	r1, #4
 8001a46:	48a9      	ldr	r0, [pc, #676]	; (8001cec <main+0x2f0>)
 8001a48:	f003 f81c 	bl	8004a84 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim5);
 8001a4c:	48a8      	ldr	r0, [pc, #672]	; (8001cf0 <main+0x2f4>)
 8001a4e:	f002 ff65 	bl	800491c <HAL_TIM_Base_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	      static uint64_t timestamp = 0;
	      static float timestampTrajact = 0;
	      if(SoftReset == 1){
 8001a52:	4ba8      	ldr	r3, [pc, #672]	; (8001cf4 <main+0x2f8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d101      	bne.n	8001a5e <main+0x62>
	    	  NVIC_SystemReset();
 8001a5a:	f7ff ffa9 	bl	80019b0 <__NVIC_SystemReset>
	    	  SoftReset = 0;
	      }
		  if(HAL_GetTick() >= timestampTrajact){
 8001a5e:	f001 f82f 	bl	8002ac0 <HAL_GetTick>
 8001a62:	ee07 0a90 	vmov	s15, r0
 8001a66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a6a:	4ba3      	ldr	r3, [pc, #652]	; (8001cf8 <main+0x2fc>)
 8001a6c:	edd3 7a00 	vldr	s15, [r3]
 8001a70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a78:	db44      	blt.n	8001b04 <main+0x108>
			  timestampTrajact = HAL_GetTick() + 1;
 8001a7a:	f001 f821 	bl	8002ac0 <HAL_GetTick>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	3301      	adds	r3, #1
 8001a82:	ee07 3a90 	vmov	s15, r3
 8001a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a8a:	4b9b      	ldr	r3, [pc, #620]	; (8001cf8 <main+0x2fc>)
 8001a8c:	edc3 7a00 	vstr	s15, [r3]
			  if(path == 0)indexposition = 0;
 8001a90:	4b9a      	ldr	r3, [pc, #616]	; (8001cfc <main+0x300>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d102      	bne.n	8001a9e <main+0xa2>
 8001a98:	4b99      	ldr	r3, [pc, #612]	; (8001d00 <main+0x304>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
			  if(indexposition < (0.5*2000)-1 && path == 1){
 8001a9e:	4b98      	ldr	r3, [pc, #608]	; (8001d00 <main+0x304>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	dc2c      	bgt.n	8001b04 <main+0x108>
 8001aaa:	4b94      	ldr	r3, [pc, #592]	; (8001cfc <main+0x300>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d128      	bne.n	8001b04 <main+0x108>
			  SetDegree = positionTraject;
 8001ab2:	4b94      	ldr	r3, [pc, #592]	; (8001d04 <main+0x308>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a94      	ldr	r2, [pc, #592]	; (8001d08 <main+0x30c>)
 8001ab8:	6013      	str	r3, [r2, #0]
			  indexposition += 1;
 8001aba:	4b91      	ldr	r3, [pc, #580]	; (8001d00 <main+0x304>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	4a8f      	ldr	r2, [pc, #572]	; (8001d00 <main+0x304>)
 8001ac2:	6013      	str	r3, [r2, #0]
		      positionTraject = q_positionN->data[indexposition];
 8001ac4:	4b91      	ldr	r3, [pc, #580]	; (8001d0c <main+0x310>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4b8d      	ldr	r3, [pc, #564]	; (8001d00 <main+0x304>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f7ff f811 	bl	8000b00 <__aeabi_d2f>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	4a88      	ldr	r2, [pc, #544]	; (8001d04 <main+0x308>)
 8001ae2:	6013      	str	r3, [r2, #0]
		      velocityTraject = q_velocityN->data[indexposition];
 8001ae4:	4b8a      	ldr	r3, [pc, #552]	; (8001d10 <main+0x314>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	4b85      	ldr	r3, [pc, #532]	; (8001d00 <main+0x304>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	4413      	add	r3, r2
 8001af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af6:	4610      	mov	r0, r2
 8001af8:	4619      	mov	r1, r3
 8001afa:	f7ff f801 	bl	8000b00 <__aeabi_d2f>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4a84      	ldr	r2, [pc, #528]	; (8001d14 <main+0x318>)
 8001b02:	6013      	str	r3, [r2, #0]
			  }
		  }
	      if (HAL_GetTick() >= timestamp) {
 8001b04:	f000 ffdc 	bl	8002ac0 <HAL_GetTick>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	461c      	mov	r4, r3
 8001b0e:	4615      	mov	r5, r2
 8001b10:	4b81      	ldr	r3, [pc, #516]	; (8001d18 <main+0x31c>)
 8001b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b16:	4294      	cmp	r4, r2
 8001b18:	eb75 0303 	sbcs.w	r3, r5, r3
 8001b1c:	d399      	bcc.n	8001a52 <main+0x56>
			  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2); // Read QEI
 8001b1e:	4b72      	ldr	r3, [pc, #456]	; (8001ce8 <main+0x2ec>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	4a7d      	ldr	r2, [pc, #500]	; (8001d1c <main+0x320>)
 8001b26:	6013      	str	r3, [r2, #0]
			  ReadDegree = QEIReadRaw / 8192.0 * 360; // pulse to degree
 8001b28:	4b7c      	ldr	r3, [pc, #496]	; (8001d1c <main+0x320>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fc95 	bl	800045c <__aeabi_ui2d>
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	4b7a      	ldr	r3, [pc, #488]	; (8001d20 <main+0x324>)
 8001b38:	f7fe fe34 	bl	80007a4 <__aeabi_ddiv>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	4b76      	ldr	r3, [pc, #472]	; (8001d24 <main+0x328>)
 8001b4a:	f7fe fd01 	bl	8000550 <__aeabi_dmul>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4610      	mov	r0, r2
 8001b54:	4619      	mov	r1, r3
 8001b56:	f7fe ffd3 	bl	8000b00 <__aeabi_d2f>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4a72      	ldr	r2, [pc, #456]	; (8001d28 <main+0x32c>)
 8001b5e:	6013      	str	r3, [r2, #0]
			  error = SetDegree - ReadDegree;
 8001b60:	4b69      	ldr	r3, [pc, #420]	; (8001d08 <main+0x30c>)
 8001b62:	ed93 7a00 	vldr	s14, [r3]
 8001b66:	4b70      	ldr	r3, [pc, #448]	; (8001d28 <main+0x32c>)
 8001b68:	edd3 7a00 	vldr	s15, [r3]
 8001b6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b70:	4b6e      	ldr	r3, [pc, #440]	; (8001d2c <main+0x330>)
 8001b72:	edc3 7a00 	vstr	s15, [r3]
			  DegreeFeedback = control_interrupt(); // PID function
 8001b76:	f000 fbb3 	bl	80022e0 <control_interrupt>
 8001b7a:	eef0 7a40 	vmov.f32	s15, s0
 8001b7e:	4b6c      	ldr	r3, [pc, #432]	; (8001d30 <main+0x334>)
 8001b80:	edc3 7a00 	vstr	s15, [r3]
	          timestamp = HAL_GetTick() + 1;
 8001b84:	f000 ff9c 	bl	8002ac0 <HAL_GetTick>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	4698      	mov	r8, r3
 8001b90:	4691      	mov	r9, r2
 8001b92:	4b61      	ldr	r3, [pc, #388]	; (8001d18 <main+0x31c>)
 8001b94:	e9c3 8900 	strd	r8, r9, [r3]
	          if (Joystick_Control == 1) {
 8001b98:	4b66      	ldr	r3, [pc, #408]	; (8001d34 <main+0x338>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d12b      	bne.n	8001bf8 <main+0x1fc>
	        	  DegreeFeedback = 0;
 8001ba0:	4b63      	ldr	r3, [pc, #396]	; (8001d30 <main+0x334>)
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
	              if (Joystick_position[0] >= 3150) {
 8001ba8:	4b4d      	ldr	r3, [pc, #308]	; (8001ce0 <main+0x2e4>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f640 424d 	movw	r2, #3149	; 0xc4d
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d909      	bls.n	8001bc8 <main+0x1cc>
	                  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 100);
 8001bb4:	4b4d      	ldr	r3, [pc, #308]	; (8001cec <main+0x2f0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2264      	movs	r2, #100	; 0x64
 8001bba:	635a      	str	r2, [r3, #52]	; 0x34
	                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	2180      	movs	r1, #128	; 0x80
 8001bc0:	485d      	ldr	r0, [pc, #372]	; (8001d38 <main+0x33c>)
 8001bc2:	f002 f991 	bl	8003ee8 <HAL_GPIO_WritePin>
 8001bc6:	e744      	b.n	8001a52 <main+0x56>
	              }
	              else if (Joystick_position[0] <= 100) {
 8001bc8:	4b45      	ldr	r3, [pc, #276]	; (8001ce0 <main+0x2e4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b64      	cmp	r3, #100	; 0x64
 8001bce:	d809      	bhi.n	8001be4 <main+0x1e8>
	                  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 100);
 8001bd0:	4b46      	ldr	r3, [pc, #280]	; (8001cec <main+0x2f0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2264      	movs	r2, #100	; 0x64
 8001bd6:	635a      	str	r2, [r3, #52]	; 0x34
	                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2180      	movs	r1, #128	; 0x80
 8001bdc:	4856      	ldr	r0, [pc, #344]	; (8001d38 <main+0x33c>)
 8001bde:	f002 f983 	bl	8003ee8 <HAL_GPIO_WritePin>
 8001be2:	e736      	b.n	8001a52 <main+0x56>
	              }
	              else{
	            	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001be4:	4b41      	ldr	r3, [pc, #260]	; (8001cec <main+0x2f0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2200      	movs	r2, #0
 8001bea:	635a      	str	r2, [r3, #52]	; 0x34
	            	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2180      	movs	r1, #128	; 0x80
 8001bf0:	4851      	ldr	r0, [pc, #324]	; (8001d38 <main+0x33c>)
 8001bf2:	f002 f979 	bl	8003ee8 <HAL_GPIO_WritePin>
 8001bf6:	e72c      	b.n	8001a52 <main+0x56>
	              }
	          }
	          else if (Joystick_Control == 0) {
 8001bf8:	4b4e      	ldr	r3, [pc, #312]	; (8001d34 <main+0x338>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f47f af28 	bne.w	8001a52 <main+0x56>
	              if (SetDegree < 0) {
 8001c02:	4b41      	ldr	r3, [pc, #260]	; (8001d08 <main+0x30c>)
 8001c04:	edd3 7a00 	vldr	s15, [r3]
 8001c08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c10:	d503      	bpl.n	8001c1a <main+0x21e>
	                  SetDegree = 0; // minimum value
 8001c12:	4b3d      	ldr	r3, [pc, #244]	; (8001d08 <main+0x30c>)
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
	              }
	              if (SetDegree > 1800) {
 8001c1a:	4b3b      	ldr	r3, [pc, #236]	; (8001d08 <main+0x30c>)
 8001c1c:	edd3 7a00 	vldr	s15, [r3]
 8001c20:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001d3c <main+0x340>
 8001c24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2c:	dd02      	ble.n	8001c34 <main+0x238>
	                  SetDegree = 1800; // maximum value
 8001c2e:	4b36      	ldr	r3, [pc, #216]	; (8001d08 <main+0x30c>)
 8001c30:	4a43      	ldr	r2, [pc, #268]	; (8001d40 <main+0x344>)
 8001c32:	601a      	str	r2, [r3, #0]
	              }

	              if (error > 0) { // setpoint > read_encoder
 8001c34:	4b3d      	ldr	r3, [pc, #244]	; (8001d2c <main+0x330>)
 8001c36:	edd3 7a00 	vldr	s15, [r3]
 8001c3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c42:	dd20      	ble.n	8001c86 <main+0x28a>
	                  if (error < 0.5) {
 8001c44:	4b39      	ldr	r3, [pc, #228]	; (8001d2c <main+0x330>)
 8001c46:	edd3 7a00 	vldr	s15, [r3]
 8001c4a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001c4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c56:	d507      	bpl.n	8001c68 <main+0x26c>
	                      DegreeFeedback = 0; // Limit Position
 8001c58:	4b35      	ldr	r3, [pc, #212]	; (8001d30 <main+0x334>)
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
	                      s = 0;
 8001c60:	4b38      	ldr	r3, [pc, #224]	; (8001d44 <main+0x348>)
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
	                  }
	                  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DegreeFeedback);
 8001c68:	4b31      	ldr	r3, [pc, #196]	; (8001d30 <main+0x334>)
 8001c6a:	edd3 7a00 	vldr	s15, [r3]
 8001c6e:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <main+0x2f0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c76:	ee17 2a90 	vmov	r2, s15
 8001c7a:	635a      	str	r2, [r3, #52]	; 0x34
	                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2180      	movs	r1, #128	; 0x80
 8001c80:	482d      	ldr	r0, [pc, #180]	; (8001d38 <main+0x33c>)
 8001c82:	f002 f931 	bl	8003ee8 <HAL_GPIO_WritePin>
	              }
	              if (error < 0) { // setpoint < read_encoder
 8001c86:	4b29      	ldr	r3, [pc, #164]	; (8001d2c <main+0x330>)
 8001c88:	edd3 7a00 	vldr	s15, [r3]
 8001c8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c94:	d522      	bpl.n	8001cdc <main+0x2e0>
	                  if (error * -1 < 0.5) {
 8001c96:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <main+0x330>)
 8001c98:	edd3 7a00 	vldr	s15, [r3]
 8001c9c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001ca0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca8:	dd07      	ble.n	8001cba <main+0x2be>
	                      DegreeFeedback = 0; // Limit Position
 8001caa:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <main+0x334>)
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
	                      s = 0;
 8001cb2:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <main+0x348>)
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
	                  }
	                  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DegreeFeedback * -1);
 8001cba:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <main+0x334>)
 8001cbc:	edd3 7a00 	vldr	s15, [r3]
 8001cc0:	eef1 7a67 	vneg.f32	s15, s15
 8001cc4:	4b09      	ldr	r3, [pc, #36]	; (8001cec <main+0x2f0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ccc:	ee17 2a90 	vmov	r2, s15
 8001cd0:	635a      	str	r2, [r3, #52]	; 0x34
	                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	2180      	movs	r1, #128	; 0x80
 8001cd6:	4818      	ldr	r0, [pc, #96]	; (8001d38 <main+0x33c>)
 8001cd8:	f002 f906 	bl	8003ee8 <HAL_GPIO_WritePin>
  {
 8001cdc:	e6b9      	b.n	8001a52 <main+0x56>
 8001cde:	bf00      	nop
 8001ce0:	20000278 	.word	0x20000278
 8001ce4:	2000009c 	.word	0x2000009c
 8001ce8:	20000144 	.word	0x20000144
 8001cec:	2000018c 	.word	0x2000018c
 8001cf0:	200001d4 	.word	0x200001d4
 8001cf4:	20000260 	.word	0x20000260
 8001cf8:	200002b0 	.word	0x200002b0
 8001cfc:	20000264 	.word	0x20000264
 8001d00:	20000290 	.word	0x20000290
 8001d04:	20000270 	.word	0x20000270
 8001d08:	200002a4 	.word	0x200002a4
 8001d0c:	20000288 	.word	0x20000288
 8001d10:	20000284 	.word	0x20000284
 8001d14:	20000274 	.word	0x20000274
 8001d18:	200002b8 	.word	0x200002b8
 8001d1c:	20000268 	.word	0x20000268
 8001d20:	40c00000 	.word	0x40c00000
 8001d24:	40768000 	.word	0x40768000
 8001d28:	200002a0 	.word	0x200002a0
 8001d2c:	200002ac 	.word	0x200002ac
 8001d30:	200002a8 	.word	0x200002a8
 8001d34:	20000280 	.word	0x20000280
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	44e10000 	.word	0x44e10000
 8001d40:	44e10000 	.word	0x44e10000
 8001d44:	2000029c 	.word	0x2000029c

08001d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b094      	sub	sp, #80	; 0x50
 8001d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d4e:	f107 0320 	add.w	r3, r7, #32
 8001d52:	2230      	movs	r2, #48	; 0x30
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f004 f84e 	bl	8005df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d5c:	f107 030c 	add.w	r3, r7, #12
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <SystemClock_Config+0xc8>)
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	4a26      	ldr	r2, [pc, #152]	; (8001e10 <SystemClock_Config+0xc8>)
 8001d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7c:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <SystemClock_Config+0xc8>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d88:	2300      	movs	r3, #0
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <SystemClock_Config+0xcc>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a20      	ldr	r2, [pc, #128]	; (8001e14 <SystemClock_Config+0xcc>)
 8001d92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <SystemClock_Config+0xcc>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001da4:	2302      	movs	r3, #2
 8001da6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001da8:	2301      	movs	r3, #1
 8001daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dac:	2310      	movs	r3, #16
 8001dae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001db0:	2302      	movs	r3, #2
 8001db2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001db4:	2300      	movs	r3, #0
 8001db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001db8:	2308      	movs	r3, #8
 8001dba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001dbc:	2354      	movs	r3, #84	; 0x54
 8001dbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dc8:	f107 0320 	add.w	r3, r7, #32
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f002 f8bd 	bl	8003f4c <HAL_RCC_OscConfig>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001dd8:	f000 fb6c 	bl	80024b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ddc:	230f      	movs	r3, #15
 8001dde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de0:	2302      	movs	r3, #2
 8001de2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	2102      	movs	r1, #2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f002 fb1f 	bl	800443c <HAL_RCC_ClockConfig>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e04:	f000 fb56 	bl	80024b4 <Error_Handler>
  }
}
 8001e08:	bf00      	nop
 8001e0a:	3750      	adds	r7, #80	; 0x50
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40007000 	.word	0x40007000

08001e18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e1e:	463b      	mov	r3, r7
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e2a:	4b28      	ldr	r3, [pc, #160]	; (8001ecc <MX_ADC1_Init+0xb4>)
 8001e2c:	4a28      	ldr	r2, [pc, #160]	; (8001ed0 <MX_ADC1_Init+0xb8>)
 8001e2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e30:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <MX_ADC1_Init+0xb4>)
 8001e32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e36:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e38:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <MX_ADC1_Init+0xb4>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001e3e:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <MX_ADC1_Init+0xb4>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e44:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <MX_ADC1_Init+0xb4>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e4a:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <MX_ADC1_Init+0xb4>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e52:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <MX_ADC1_Init+0xb4>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e58:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <MX_ADC1_Init+0xb4>)
 8001e5a:	4a1e      	ldr	r2, [pc, #120]	; (8001ed4 <MX_ADC1_Init+0xbc>)
 8001e5c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <MX_ADC1_Init+0xb4>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001e64:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <MX_ADC1_Init+0xb4>)
 8001e66:	2202      	movs	r2, #2
 8001e68:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001e6a:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <MX_ADC1_Init+0xb4>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <MX_ADC1_Init+0xb4>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e78:	4814      	ldr	r0, [pc, #80]	; (8001ecc <MX_ADC1_Init+0xb4>)
 8001e7a:	f000 fe2d 	bl	8002ad8 <HAL_ADC_Init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001e84:	f000 fb16 	bl	80024b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001e88:	2308      	movs	r3, #8
 8001e8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001e90:	2303      	movs	r3, #3
 8001e92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e94:	463b      	mov	r3, r7
 8001e96:	4619      	mov	r1, r3
 8001e98:	480c      	ldr	r0, [pc, #48]	; (8001ecc <MX_ADC1_Init+0xb4>)
 8001e9a:	f000 ff6f 	bl	8002d7c <HAL_ADC_ConfigChannel>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ea4:	f000 fb06 	bl	80024b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001ea8:	2309      	movs	r3, #9
 8001eaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001eac:	2302      	movs	r3, #2
 8001eae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eb0:	463b      	mov	r3, r7
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4805      	ldr	r0, [pc, #20]	; (8001ecc <MX_ADC1_Init+0xb4>)
 8001eb6:	f000 ff61 	bl	8002d7c <HAL_ADC_ConfigChannel>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001ec0:	f000 faf8 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ec4:	bf00      	nop
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	2000009c 	.word	0x2000009c
 8001ed0:	40012000 	.word	0x40012000
 8001ed4:	0f000001 	.word	0x0f000001

08001ed8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08c      	sub	sp, #48	; 0x30
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ede:	f107 030c 	add.w	r3, r7, #12
 8001ee2:	2224      	movs	r2, #36	; 0x24
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f003 ff86 	bl	8005df8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ef4:	4b21      	ldr	r3, [pc, #132]	; (8001f7c <MX_TIM2_Init+0xa4>)
 8001ef6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001efa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001efc:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <MX_TIM2_Init+0xa4>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f02:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <MX_TIM2_Init+0xa4>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = QEI_PERIOD-1;
 8001f08:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <MX_TIM2_Init+0xa4>)
 8001f0a:	f649 72ff 	movw	r2, #40959	; 0x9fff
 8001f0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f10:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <MX_TIM2_Init+0xa4>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f16:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <MX_TIM2_Init+0xa4>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f20:	2300      	movs	r3, #0
 8001f22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f24:	2301      	movs	r3, #1
 8001f26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f30:	2300      	movs	r3, #0
 8001f32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f34:	2301      	movs	r3, #1
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	4619      	mov	r1, r3
 8001f46:	480d      	ldr	r0, [pc, #52]	; (8001f7c <MX_TIM2_Init+0xa4>)
 8001f48:	f002 fe4c 	bl	8004be4 <HAL_TIM_Encoder_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001f52:	f000 faaf 	bl	80024b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	4619      	mov	r1, r3
 8001f62:	4806      	ldr	r0, [pc, #24]	; (8001f7c <MX_TIM2_Init+0xa4>)
 8001f64:	f003 fbc8 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001f6e:	f000 faa1 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f72:	bf00      	nop
 8001f74:	3730      	adds	r7, #48	; 0x30
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000144 	.word	0x20000144

08001f80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08e      	sub	sp, #56	; 0x38
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f94:	f107 0320 	add.w	r3, r7, #32
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
 8001fac:	615a      	str	r2, [r3, #20]
 8001fae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fb0:	4b2c      	ldr	r3, [pc, #176]	; (8002064 <MX_TIM3_Init+0xe4>)
 8001fb2:	4a2d      	ldr	r2, [pc, #180]	; (8002068 <MX_TIM3_Init+0xe8>)
 8001fb4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42;
 8001fb6:	4b2b      	ldr	r3, [pc, #172]	; (8002064 <MX_TIM3_Init+0xe4>)
 8001fb8:	222a      	movs	r2, #42	; 0x2a
 8001fba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fbc:	4b29      	ldr	r3, [pc, #164]	; (8002064 <MX_TIM3_Init+0xe4>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001fc2:	4b28      	ldr	r3, [pc, #160]	; (8002064 <MX_TIM3_Init+0xe4>)
 8001fc4:	2263      	movs	r2, #99	; 0x63
 8001fc6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc8:	4b26      	ldr	r3, [pc, #152]	; (8002064 <MX_TIM3_Init+0xe4>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fce:	4b25      	ldr	r3, [pc, #148]	; (8002064 <MX_TIM3_Init+0xe4>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fd4:	4823      	ldr	r0, [pc, #140]	; (8002064 <MX_TIM3_Init+0xe4>)
 8001fd6:	f002 fc51 	bl	800487c <HAL_TIM_Base_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001fe0:	f000 fa68 	bl	80024b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fee:	4619      	mov	r1, r3
 8001ff0:	481c      	ldr	r0, [pc, #112]	; (8002064 <MX_TIM3_Init+0xe4>)
 8001ff2:	f002 ffed 	bl	8004fd0 <HAL_TIM_ConfigClockSource>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001ffc:	f000 fa5a 	bl	80024b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002000:	4818      	ldr	r0, [pc, #96]	; (8002064 <MX_TIM3_Init+0xe4>)
 8002002:	f002 fce5 	bl	80049d0 <HAL_TIM_PWM_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800200c:	f000 fa52 	bl	80024b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002010:	2300      	movs	r3, #0
 8002012:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002018:	f107 0320 	add.w	r3, r7, #32
 800201c:	4619      	mov	r1, r3
 800201e:	4811      	ldr	r0, [pc, #68]	; (8002064 <MX_TIM3_Init+0xe4>)
 8002020:	f003 fb6a 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800202a:	f000 fa43 	bl	80024b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800202e:	2360      	movs	r3, #96	; 0x60
 8002030:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	2200      	movs	r2, #0
 8002042:	4619      	mov	r1, r3
 8002044:	4807      	ldr	r0, [pc, #28]	; (8002064 <MX_TIM3_Init+0xe4>)
 8002046:	f002 ff01 	bl	8004e4c <HAL_TIM_PWM_ConfigChannel>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002050:	f000 fa30 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002054:	4803      	ldr	r0, [pc, #12]	; (8002064 <MX_TIM3_Init+0xe4>)
 8002056:	f000 fb95 	bl	8002784 <HAL_TIM_MspPostInit>

}
 800205a:	bf00      	nop
 800205c:	3738      	adds	r7, #56	; 0x38
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000018c 	.word	0x2000018c
 8002068:	40000400 	.word	0x40000400

0800206c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002072:	f107 0308 	add.w	r3, r7, #8
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002080:	463b      	mov	r3, r7
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002088:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <MX_TIM5_Init+0x94>)
 800208a:	4a1e      	ldr	r2, [pc, #120]	; (8002104 <MX_TIM5_Init+0x98>)
 800208c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 800208e:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <MX_TIM5_Init+0x94>)
 8002090:	2253      	movs	r2, #83	; 0x53
 8002092:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002094:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <MX_TIM5_Init+0x94>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <MX_TIM5_Init+0x94>)
 800209c:	f04f 32ff 	mov.w	r2, #4294967295
 80020a0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a2:	4b17      	ldr	r3, [pc, #92]	; (8002100 <MX_TIM5_Init+0x94>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a8:	4b15      	ldr	r3, [pc, #84]	; (8002100 <MX_TIM5_Init+0x94>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80020ae:	4814      	ldr	r0, [pc, #80]	; (8002100 <MX_TIM5_Init+0x94>)
 80020b0:	f002 fbe4 	bl	800487c <HAL_TIM_Base_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80020ba:	f000 f9fb 	bl	80024b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80020c4:	f107 0308 	add.w	r3, r7, #8
 80020c8:	4619      	mov	r1, r3
 80020ca:	480d      	ldr	r0, [pc, #52]	; (8002100 <MX_TIM5_Init+0x94>)
 80020cc:	f002 ff80 	bl	8004fd0 <HAL_TIM_ConfigClockSource>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80020d6:	f000 f9ed 	bl	80024b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020da:	2300      	movs	r3, #0
 80020dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020de:	2300      	movs	r3, #0
 80020e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020e2:	463b      	mov	r3, r7
 80020e4:	4619      	mov	r1, r3
 80020e6:	4806      	ldr	r0, [pc, #24]	; (8002100 <MX_TIM5_Init+0x94>)
 80020e8:	f003 fb06 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80020f2:	f000 f9df 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80020f6:	bf00      	nop
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	200001d4 	.word	0x200001d4
 8002104:	40000c00 	.word	0x40000c00

08002108 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <MX_USART2_UART_Init+0x4c>)
 800210e:	4a12      	ldr	r2, [pc, #72]	; (8002158 <MX_USART2_UART_Init+0x50>)
 8002110:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <MX_USART2_UART_Init+0x4c>)
 8002114:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002118:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <MX_USART2_UART_Init+0x4c>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <MX_USART2_UART_Init+0x4c>)
 8002122:	2200      	movs	r2, #0
 8002124:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002126:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <MX_USART2_UART_Init+0x4c>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800212c:	4b09      	ldr	r3, [pc, #36]	; (8002154 <MX_USART2_UART_Init+0x4c>)
 800212e:	220c      	movs	r2, #12
 8002130:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002132:	4b08      	ldr	r3, [pc, #32]	; (8002154 <MX_USART2_UART_Init+0x4c>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <MX_USART2_UART_Init+0x4c>)
 800213a:	2200      	movs	r2, #0
 800213c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800213e:	4805      	ldr	r0, [pc, #20]	; (8002154 <MX_USART2_UART_Init+0x4c>)
 8002140:	f003 fb48 	bl	80057d4 <HAL_UART_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800214a:	f000 f9b3 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	2000021c 	.word	0x2000021c
 8002158:	40004400 	.word	0x40004400

0800215c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <MX_DMA_Init+0x3c>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	4a0b      	ldr	r2, [pc, #44]	; (8002198 <MX_DMA_Init+0x3c>)
 800216c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002170:	6313      	str	r3, [r2, #48]	; 0x30
 8002172:	4b09      	ldr	r3, [pc, #36]	; (8002198 <MX_DMA_Init+0x3c>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	2100      	movs	r1, #0
 8002182:	2038      	movs	r0, #56	; 0x38
 8002184:	f001 f985 	bl	8003492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002188:	2038      	movs	r0, #56	; 0x38
 800218a:	f001 f99e 	bl	80034ca <HAL_NVIC_EnableIRQ>

}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800

0800219c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08a      	sub	sp, #40	; 0x28
 80021a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a2:	f107 0314 	add.w	r3, r7, #20
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	60da      	str	r2, [r3, #12]
 80021b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	4b3c      	ldr	r3, [pc, #240]	; (80022a8 <MX_GPIO_Init+0x10c>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a3b      	ldr	r2, [pc, #236]	; (80022a8 <MX_GPIO_Init+0x10c>)
 80021bc:	f043 0304 	orr.w	r3, r3, #4
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b39      	ldr	r3, [pc, #228]	; (80022a8 <MX_GPIO_Init+0x10c>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f003 0304 	and.w	r3, r3, #4
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	4b35      	ldr	r3, [pc, #212]	; (80022a8 <MX_GPIO_Init+0x10c>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a34      	ldr	r2, [pc, #208]	; (80022a8 <MX_GPIO_Init+0x10c>)
 80021d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b32      	ldr	r3, [pc, #200]	; (80022a8 <MX_GPIO_Init+0x10c>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	4b2e      	ldr	r3, [pc, #184]	; (80022a8 <MX_GPIO_Init+0x10c>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4a2d      	ldr	r2, [pc, #180]	; (80022a8 <MX_GPIO_Init+0x10c>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6313      	str	r3, [r2, #48]	; 0x30
 80021fa:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <MX_GPIO_Init+0x10c>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <MX_GPIO_Init+0x10c>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a26      	ldr	r2, [pc, #152]	; (80022a8 <MX_GPIO_Init+0x10c>)
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b24      	ldr	r3, [pc, #144]	; (80022a8 <MX_GPIO_Init+0x10c>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	607b      	str	r3, [r7, #4]
 8002220:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8002222:	2200      	movs	r2, #0
 8002224:	21a0      	movs	r1, #160	; 0xa0
 8002226:	4821      	ldr	r0, [pc, #132]	; (80022ac <MX_GPIO_Init+0x110>)
 8002228:	f001 fe5e 	bl	8003ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800222c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002232:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	4619      	mov	r1, r3
 8002242:	481b      	ldr	r0, [pc, #108]	; (80022b0 <MX_GPIO_Init+0x114>)
 8002244:	f001 fccc 	bl	8003be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7;
 8002248:	23a0      	movs	r3, #160	; 0xa0
 800224a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224c:	2301      	movs	r3, #1
 800224e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002254:	2300      	movs	r3, #0
 8002256:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	4619      	mov	r1, r3
 800225e:	4813      	ldr	r0, [pc, #76]	; (80022ac <MX_GPIO_Init+0x110>)
 8002260:	f001 fcbe 	bl	8003be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002264:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800226a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800226e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	4619      	mov	r1, r3
 800227a:	480e      	ldr	r0, [pc, #56]	; (80022b4 <MX_GPIO_Init+0x118>)
 800227c:	f001 fcb0 	bl	8003be0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002280:	2200      	movs	r2, #0
 8002282:	2100      	movs	r1, #0
 8002284:	2017      	movs	r0, #23
 8002286:	f001 f904 	bl	8003492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800228a:	2017      	movs	r0, #23
 800228c:	f001 f91d 	bl	80034ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002290:	2200      	movs	r2, #0
 8002292:	2100      	movs	r1, #0
 8002294:	2028      	movs	r0, #40	; 0x28
 8002296:	f001 f8fc 	bl	8003492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800229a:	2028      	movs	r0, #40	; 0x28
 800229c:	f001 f915 	bl	80034ca <HAL_NVIC_EnableIRQ>

}
 80022a0:	bf00      	nop
 80022a2:	3728      	adds	r7, #40	; 0x28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40020000 	.word	0x40020000
 80022b0:	40020800 	.word	0x40020800
 80022b4:	40020400 	.word	0x40020400

080022b8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_8){
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022c8:	d102      	bne.n	80022d0 <HAL_GPIO_EXTI_Callback+0x18>
		Button1 = 1;
 80022ca:	4b04      	ldr	r3, [pc, #16]	; (80022dc <HAL_GPIO_EXTI_Callback+0x24>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	601a      	str	r2, [r3, #0]
	}
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	2000026c 	.word	0x2000026c

080022e0 <control_interrupt>:
float control_interrupt(){
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
//	if(u>100)u=100;
//	if(u<-100)u=-100;
//	pu1=u;
//	pe2=pe1;
//	pe1=error;
	error = SetDegree - ReadDegree;
 80022e4:	4b3a      	ldr	r3, [pc, #232]	; (80023d0 <control_interrupt+0xf0>)
 80022e6:	ed93 7a00 	vldr	s14, [r3]
 80022ea:	4b3a      	ldr	r3, [pc, #232]	; (80023d4 <control_interrupt+0xf4>)
 80022ec:	edd3 7a00 	vldr	s15, [r3]
 80022f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f4:	4b38      	ldr	r3, [pc, #224]	; (80023d8 <control_interrupt+0xf8>)
 80022f6:	edc3 7a00 	vstr	s15, [r3]
	if(abs(error) <= 0.5)s = 0;
 80022fa:	4b37      	ldr	r3, [pc, #220]	; (80023d8 <control_interrupt+0xf8>)
 80022fc:	edd3 7a00 	vldr	s15, [r3]
 8002300:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002304:	ee17 3a90 	vmov	r3, s15
 8002308:	2b00      	cmp	r3, #0
 800230a:	db0c      	blt.n	8002326 <control_interrupt+0x46>
 800230c:	4b32      	ldr	r3, [pc, #200]	; (80023d8 <control_interrupt+0xf8>)
 800230e:	edd3 7a00 	vldr	s15, [r3]
 8002312:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002316:	ee17 3a90 	vmov	r3, s15
 800231a:	2b00      	cmp	r3, #0
 800231c:	dc03      	bgt.n	8002326 <control_interrupt+0x46>
 800231e:	4b2f      	ldr	r3, [pc, #188]	; (80023dc <control_interrupt+0xfc>)
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
	s = s + error;
 8002326:	4b2d      	ldr	r3, [pc, #180]	; (80023dc <control_interrupt+0xfc>)
 8002328:	ed93 7a00 	vldr	s14, [r3]
 800232c:	4b2a      	ldr	r3, [pc, #168]	; (80023d8 <control_interrupt+0xf8>)
 800232e:	edd3 7a00 	vldr	s15, [r3]
 8002332:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002336:	4b29      	ldr	r3, [pc, #164]	; (80023dc <control_interrupt+0xfc>)
 8002338:	edc3 7a00 	vstr	s15, [r3]
	u = K_P*error+K_I*s+K_D*(error-p);
 800233c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80023e0 <control_interrupt+0x100>
 8002340:	4b25      	ldr	r3, [pc, #148]	; (80023d8 <control_interrupt+0xf8>)
 8002342:	edd3 7a00 	vldr	s15, [r3]
 8002346:	ee27 7a27 	vmul.f32	s14, s14, s15
 800234a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80023e4 <control_interrupt+0x104>
 800234e:	4b23      	ldr	r3, [pc, #140]	; (80023dc <control_interrupt+0xfc>)
 8002350:	edd3 7a00 	vldr	s15, [r3]
 8002354:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002358:	ee37 7a27 	vadd.f32	s14, s14, s15
 800235c:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <control_interrupt+0xf8>)
 800235e:	edd3 6a00 	vldr	s13, [r3]
 8002362:	4b21      	ldr	r3, [pc, #132]	; (80023e8 <control_interrupt+0x108>)
 8002364:	edd3 7a00 	vldr	s15, [r3]
 8002368:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800236c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002370:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002374:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002378:	4b1c      	ldr	r3, [pc, #112]	; (80023ec <control_interrupt+0x10c>)
 800237a:	edc3 7a00 	vstr	s15, [r3]
	if(u>100)u=100;
 800237e:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <control_interrupt+0x10c>)
 8002380:	edd3 7a00 	vldr	s15, [r3]
 8002384:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80023f0 <control_interrupt+0x110>
 8002388:	eef4 7ac7 	vcmpe.f32	s15, s14
 800238c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002390:	dd02      	ble.n	8002398 <control_interrupt+0xb8>
 8002392:	4b16      	ldr	r3, [pc, #88]	; (80023ec <control_interrupt+0x10c>)
 8002394:	4a17      	ldr	r2, [pc, #92]	; (80023f4 <control_interrupt+0x114>)
 8002396:	601a      	str	r2, [r3, #0]
	if(u<-100)u=-100;
 8002398:	4b14      	ldr	r3, [pc, #80]	; (80023ec <control_interrupt+0x10c>)
 800239a:	edd3 7a00 	vldr	s15, [r3]
 800239e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80023f8 <control_interrupt+0x118>
 80023a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023aa:	d502      	bpl.n	80023b2 <control_interrupt+0xd2>
 80023ac:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <control_interrupt+0x10c>)
 80023ae:	4a13      	ldr	r2, [pc, #76]	; (80023fc <control_interrupt+0x11c>)
 80023b0:	601a      	str	r2, [r3, #0]
	p = error;
 80023b2:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <control_interrupt+0xf8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a0c      	ldr	r2, [pc, #48]	; (80023e8 <control_interrupt+0x108>)
 80023b8:	6013      	str	r3, [r2, #0]
return u;
 80023ba:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <control_interrupt+0x10c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	ee07 3a90 	vmov	s15, r3
}
 80023c2:	eeb0 0a67 	vmov.f32	s0, s15
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	200002a4 	.word	0x200002a4
 80023d4:	200002a0 	.word	0x200002a0
 80023d8:	200002ac 	.word	0x200002ac
 80023dc:	2000029c 	.word	0x2000029c
 80023e0:	3e2e147b 	.word	0x3e2e147b
 80023e4:	38a7c5ac 	.word	0x38a7c5ac
 80023e8:	20000298 	.word	0x20000298
 80023ec:	20000294 	.word	0x20000294
 80023f0:	42c80000 	.word	0x42c80000
 80023f4:	42c80000 	.word	0x42c80000
 80023f8:	c2c80000 	.word	0xc2c80000
 80023fc:	c2c80000 	.word	0xc2c80000

08002400 <main_Qubic>:
}
uint64_t micros(){
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
}
void main_Qubic(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
  emxArray_real_T *q_acc;
  emxArray_real_T *q_position;
  emxArray_real_T *q_velocity;
  double q_k1_tmp;
  /* Initialize function 'Qubic' input arguments. */
  q_k1_tmp = argInit_real_T();
 8002406:	f7ff fae9 	bl	80019dc <argInit_real_T>
 800240a:	ed87 0b04 	vstr	d0, [r7, #16]
  /* Call the entry-point 'Qubic'. */
  emxInitArray_real_T(&q_position, 2);
 800240e:	f107 0308 	add.w	r3, r7, #8
 8002412:	2102      	movs	r1, #2
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff f9f3 	bl	8001800 <emxInitArray_real_T>
  emxInitArray_real_T(&q_velocity, 2);
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	2102      	movs	r1, #2
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff f9ee 	bl	8001800 <emxInitArray_real_T>
  emxInitArray_real_T(&q_acc, 2);
 8002424:	f107 030c 	add.w	r3, r7, #12
 8002428:	2102      	movs	r1, #2
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff f9e8 	bl	8001800 <emxInitArray_real_T>
  Qubic(0, 1000, 0, 400, 0.5, q_position,
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4618      	mov	r0, r3
 8002438:	ed9f 4b13 	vldr	d4, [pc, #76]	; 8002488 <main_Qubic+0x88>
 800243c:	ed9f 3b14 	vldr	d3, [pc, #80]	; 8002490 <main_Qubic+0x90>
 8002440:	ed9f 2b15 	vldr	d2, [pc, #84]	; 8002498 <main_Qubic+0x98>
 8002444:	ed9f 1b16 	vldr	d1, [pc, #88]	; 80024a0 <main_Qubic+0xa0>
 8002448:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8002498 <main_Qubic+0x98>
 800244c:	f7fe fe48 	bl	80010e0 <Qubic>
        q_velocity, q_acc);
  q_positionN = q_position;
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4a15      	ldr	r2, [pc, #84]	; (80024a8 <main_Qubic+0xa8>)
 8002454:	6013      	str	r3, [r2, #0]
  q_velocityN = q_velocity;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a14      	ldr	r2, [pc, #80]	; (80024ac <main_Qubic+0xac>)
 800245a:	6013      	str	r3, [r2, #0]
  q_accN = q_acc;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <main_Qubic+0xb0>)
 8002460:	6013      	str	r3, [r2, #0]
  emxDestroyArray_real_T(q_position);
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff f9bf 	bl	80017e8 <emxDestroyArray_real_T>
  emxDestroyArray_real_T(q_velocity);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff f9bb 	bl	80017e8 <emxDestroyArray_real_T>
  emxDestroyArray_real_T(q_acc);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff f9b7 	bl	80017e8 <emxDestroyArray_real_T>
}
 800247a:	bf00      	nop
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	f3af 8000 	nop.w
 8002488:	00000000 	.word	0x00000000
 800248c:	3fe00000 	.word	0x3fe00000
 8002490:	00000000 	.word	0x00000000
 8002494:	40790000 	.word	0x40790000
	...
 80024a4:	408f4000 	.word	0x408f4000
 80024a8:	20000288 	.word	0x20000288
 80024ac:	20000284 	.word	0x20000284
 80024b0:	2000028c 	.word	0x2000028c

080024b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80024b8:	b672      	cpsid	i
}
 80024ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024bc:	e7fe      	b.n	80024bc <Error_Handler+0x8>
	...

080024c0 <rtIsInf>:
 * Function: rtIsInf ==================================================
 *  Abstract:
 *  Test if value is infinite
 */
boolean_T rtIsInf(real_T value)
{
 80024c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	ed87 0b00 	vstr	d0, [r7]
  return (isinf(value) != 0U);
 80024ca:	683c      	ldr	r4, [r7, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80024d2:	2301      	movs	r3, #1
 80024d4:	461e      	mov	r6, r3
 80024d6:	f04f 32ff 	mov.w	r2, #4294967295
 80024da:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <rtIsInf+0x58>)
 80024dc:	4620      	mov	r0, r4
 80024de:	4629      	mov	r1, r5
 80024e0:	f7fe fad0 	bl	8000a84 <__aeabi_dcmpun>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10b      	bne.n	8002502 <rtIsInf+0x42>
 80024ea:	f04f 32ff 	mov.w	r2, #4294967295
 80024ee:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <rtIsInf+0x58>)
 80024f0:	4620      	mov	r0, r4
 80024f2:	4629      	mov	r1, r5
 80024f4:	f7fe faa8 	bl	8000a48 <__aeabi_dcmple>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <rtIsInf+0x42>
 80024fe:	2300      	movs	r3, #0
 8002500:	461e      	mov	r6, r3
 8002502:	b2f3      	uxtb	r3, r6
 8002504:	f083 0301 	eor.w	r3, r3, #1
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	b2db      	uxtb	r3, r3
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002518:	7fefffff 	.word	0x7fefffff

0800251c <rtIsNaN>:
 * Function: rtIsNaN ==================================================
 *  Abstract:
 *  Test if value is not a number
 */
boolean_T rtIsNaN(real_T value)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	ed87 0b00 	vstr	d0, [r7]
  return (isnan(value) != 0U);
 8002526:	e9d7 2300 	ldrd	r2, r3, [r7]
 800252a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800252e:	f7fe faa9 	bl	8000a84 <__aeabi_dcmpun>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <rtIsNaN+0x20>
 8002538:	2301      	movs	r3, #1
 800253a:	e000      	b.n	800253e <rtIsNaN+0x22>
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <HAL_MspInit+0x4c>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	4a0f      	ldr	r2, [pc, #60]	; (8002594 <HAL_MspInit+0x4c>)
 8002558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800255c:	6453      	str	r3, [r2, #68]	; 0x44
 800255e:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <HAL_MspInit+0x4c>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	603b      	str	r3, [r7, #0]
 800256e:	4b09      	ldr	r3, [pc, #36]	; (8002594 <HAL_MspInit+0x4c>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	4a08      	ldr	r2, [pc, #32]	; (8002594 <HAL_MspInit+0x4c>)
 8002574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002578:	6413      	str	r3, [r2, #64]	; 0x40
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_MspInit+0x4c>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002586:	2007      	movs	r0, #7
 8002588:	f000 ff78 	bl	800347c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40023800 	.word	0x40023800

08002598 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08a      	sub	sp, #40	; 0x28
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a0:	f107 0314 	add.w	r3, r7, #20
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a2f      	ldr	r2, [pc, #188]	; (8002674 <HAL_ADC_MspInit+0xdc>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d157      	bne.n	800266a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	4b2e      	ldr	r3, [pc, #184]	; (8002678 <HAL_ADC_MspInit+0xe0>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	4a2d      	ldr	r2, [pc, #180]	; (8002678 <HAL_ADC_MspInit+0xe0>)
 80025c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ca:	4b2b      	ldr	r3, [pc, #172]	; (8002678 <HAL_ADC_MspInit+0xe0>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	4b27      	ldr	r3, [pc, #156]	; (8002678 <HAL_ADC_MspInit+0xe0>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	4a26      	ldr	r2, [pc, #152]	; (8002678 <HAL_ADC_MspInit+0xe0>)
 80025e0:	f043 0302 	orr.w	r3, r3, #2
 80025e4:	6313      	str	r3, [r2, #48]	; 0x30
 80025e6:	4b24      	ldr	r3, [pc, #144]	; (8002678 <HAL_ADC_MspInit+0xe0>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025f2:	2303      	movs	r3, #3
 80025f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025f6:	2303      	movs	r3, #3
 80025f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025fe:	f107 0314 	add.w	r3, r7, #20
 8002602:	4619      	mov	r1, r3
 8002604:	481d      	ldr	r0, [pc, #116]	; (800267c <HAL_ADC_MspInit+0xe4>)
 8002606:	f001 faeb 	bl	8003be0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800260a:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <HAL_ADC_MspInit+0xe8>)
 800260c:	4a1d      	ldr	r2, [pc, #116]	; (8002684 <HAL_ADC_MspInit+0xec>)
 800260e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002610:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <HAL_ADC_MspInit+0xe8>)
 8002612:	2200      	movs	r2, #0
 8002614:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002616:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <HAL_ADC_MspInit+0xe8>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800261c:	4b18      	ldr	r3, [pc, #96]	; (8002680 <HAL_ADC_MspInit+0xe8>)
 800261e:	2200      	movs	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002622:	4b17      	ldr	r3, [pc, #92]	; (8002680 <HAL_ADC_MspInit+0xe8>)
 8002624:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002628:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800262a:	4b15      	ldr	r3, [pc, #84]	; (8002680 <HAL_ADC_MspInit+0xe8>)
 800262c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002630:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002632:	4b13      	ldr	r3, [pc, #76]	; (8002680 <HAL_ADC_MspInit+0xe8>)
 8002634:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002638:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800263a:	4b11      	ldr	r3, [pc, #68]	; (8002680 <HAL_ADC_MspInit+0xe8>)
 800263c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002640:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002642:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <HAL_ADC_MspInit+0xe8>)
 8002644:	2200      	movs	r2, #0
 8002646:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002648:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <HAL_ADC_MspInit+0xe8>)
 800264a:	2200      	movs	r2, #0
 800264c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800264e:	480c      	ldr	r0, [pc, #48]	; (8002680 <HAL_ADC_MspInit+0xe8>)
 8002650:	f000 ff56 	bl	8003500 <HAL_DMA_Init>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800265a:	f7ff ff2b 	bl	80024b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a07      	ldr	r2, [pc, #28]	; (8002680 <HAL_ADC_MspInit+0xe8>)
 8002662:	639a      	str	r2, [r3, #56]	; 0x38
 8002664:	4a06      	ldr	r2, [pc, #24]	; (8002680 <HAL_ADC_MspInit+0xe8>)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800266a:	bf00      	nop
 800266c:	3728      	adds	r7, #40	; 0x28
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40012000 	.word	0x40012000
 8002678:	40023800 	.word	0x40023800
 800267c:	40020400 	.word	0x40020400
 8002680:	200000e4 	.word	0x200000e4
 8002684:	40026410 	.word	0x40026410

08002688 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08a      	sub	sp, #40	; 0x28
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002690:	f107 0314 	add.w	r3, r7, #20
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a8:	d12b      	bne.n	8002702 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	4b17      	ldr	r3, [pc, #92]	; (800270c <HAL_TIM_Encoder_MspInit+0x84>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	4a16      	ldr	r2, [pc, #88]	; (800270c <HAL_TIM_Encoder_MspInit+0x84>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ba:	4b14      	ldr	r3, [pc, #80]	; (800270c <HAL_TIM_Encoder_MspInit+0x84>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <HAL_TIM_Encoder_MspInit+0x84>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	4a0f      	ldr	r2, [pc, #60]	; (800270c <HAL_TIM_Encoder_MspInit+0x84>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	6313      	str	r3, [r2, #48]	; 0x30
 80026d6:	4b0d      	ldr	r3, [pc, #52]	; (800270c <HAL_TIM_Encoder_MspInit+0x84>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026e2:	2303      	movs	r3, #3
 80026e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e6:	2302      	movs	r3, #2
 80026e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ee:	2300      	movs	r3, #0
 80026f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026f2:	2301      	movs	r3, #1
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f6:	f107 0314 	add.w	r3, r7, #20
 80026fa:	4619      	mov	r1, r3
 80026fc:	4804      	ldr	r0, [pc, #16]	; (8002710 <HAL_TIM_Encoder_MspInit+0x88>)
 80026fe:	f001 fa6f 	bl	8003be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002702:	bf00      	nop
 8002704:	3728      	adds	r7, #40	; 0x28
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800
 8002710:	40020000 	.word	0x40020000

08002714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a15      	ldr	r2, [pc, #84]	; (8002778 <HAL_TIM_Base_MspInit+0x64>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d10e      	bne.n	8002744 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	4b14      	ldr	r3, [pc, #80]	; (800277c <HAL_TIM_Base_MspInit+0x68>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	4a13      	ldr	r2, [pc, #76]	; (800277c <HAL_TIM_Base_MspInit+0x68>)
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	6413      	str	r3, [r2, #64]	; 0x40
 8002736:	4b11      	ldr	r3, [pc, #68]	; (800277c <HAL_TIM_Base_MspInit+0x68>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002742:	e012      	b.n	800276a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a0d      	ldr	r2, [pc, #52]	; (8002780 <HAL_TIM_Base_MspInit+0x6c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d10d      	bne.n	800276a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	4b0a      	ldr	r3, [pc, #40]	; (800277c <HAL_TIM_Base_MspInit+0x68>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	4a09      	ldr	r2, [pc, #36]	; (800277c <HAL_TIM_Base_MspInit+0x68>)
 8002758:	f043 0308 	orr.w	r3, r3, #8
 800275c:	6413      	str	r3, [r2, #64]	; 0x40
 800275e:	4b07      	ldr	r3, [pc, #28]	; (800277c <HAL_TIM_Base_MspInit+0x68>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	68bb      	ldr	r3, [r7, #8]
}
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40000400 	.word	0x40000400
 800277c:	40023800 	.word	0x40023800
 8002780:	40000c00 	.word	0x40000c00

08002784 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278c:	f107 030c 	add.w	r3, r7, #12
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a12      	ldr	r2, [pc, #72]	; (80027ec <HAL_TIM_MspPostInit+0x68>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d11d      	bne.n	80027e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <HAL_TIM_MspPostInit+0x6c>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	4a10      	ldr	r2, [pc, #64]	; (80027f0 <HAL_TIM_MspPostInit+0x6c>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6313      	str	r3, [r2, #48]	; 0x30
 80027b6:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <HAL_TIM_MspPostInit+0x6c>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027c2:	2340      	movs	r3, #64	; 0x40
 80027c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c6:	2302      	movs	r3, #2
 80027c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027d2:	2302      	movs	r3, #2
 80027d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d6:	f107 030c 	add.w	r3, r7, #12
 80027da:	4619      	mov	r1, r3
 80027dc:	4805      	ldr	r0, [pc, #20]	; (80027f4 <HAL_TIM_MspPostInit+0x70>)
 80027de:	f001 f9ff 	bl	8003be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80027e2:	bf00      	nop
 80027e4:	3720      	adds	r7, #32
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40000400 	.word	0x40000400
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40020000 	.word	0x40020000

080027f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08a      	sub	sp, #40	; 0x28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002800:	f107 0314 	add.w	r3, r7, #20
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a19      	ldr	r2, [pc, #100]	; (800287c <HAL_UART_MspInit+0x84>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d12b      	bne.n	8002872 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	4b18      	ldr	r3, [pc, #96]	; (8002880 <HAL_UART_MspInit+0x88>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	4a17      	ldr	r2, [pc, #92]	; (8002880 <HAL_UART_MspInit+0x88>)
 8002824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002828:	6413      	str	r3, [r2, #64]	; 0x40
 800282a:	4b15      	ldr	r3, [pc, #84]	; (8002880 <HAL_UART_MspInit+0x88>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	4b11      	ldr	r3, [pc, #68]	; (8002880 <HAL_UART_MspInit+0x88>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	4a10      	ldr	r2, [pc, #64]	; (8002880 <HAL_UART_MspInit+0x88>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6313      	str	r3, [r2, #48]	; 0x30
 8002846:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <HAL_UART_MspInit+0x88>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002852:	230c      	movs	r3, #12
 8002854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002856:	2302      	movs	r3, #2
 8002858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285e:	2303      	movs	r3, #3
 8002860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002862:	2307      	movs	r3, #7
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002866:	f107 0314 	add.w	r3, r7, #20
 800286a:	4619      	mov	r1, r3
 800286c:	4805      	ldr	r0, [pc, #20]	; (8002884 <HAL_UART_MspInit+0x8c>)
 800286e:	f001 f9b7 	bl	8003be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002872:	bf00      	nop
 8002874:	3728      	adds	r7, #40	; 0x28
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40004400 	.word	0x40004400
 8002880:	40023800 	.word	0x40023800
 8002884:	40020000 	.word	0x40020000

08002888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800288c:	e7fe      	b.n	800288c <NMI_Handler+0x4>

0800288e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002892:	e7fe      	b.n	8002892 <HardFault_Handler+0x4>

08002894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002898:	e7fe      	b.n	8002898 <MemManage_Handler+0x4>

0800289a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800289e:	e7fe      	b.n	800289e <BusFault_Handler+0x4>

080028a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028a4:	e7fe      	b.n	80028a4 <UsageFault_Handler+0x4>

080028a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028a6:	b480      	push	{r7}
 80028a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028d4:	f000 f8e0 	bl	8002a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028d8:	bf00      	nop
 80028da:	bd80      	pop	{r7, pc}

080028dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80028e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80028e4:	f001 fb1a 	bl	8003f1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}

080028ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80028f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80028f4:	f001 fb12 	bl	8003f1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028f8:	bf00      	nop
 80028fa:	bd80      	pop	{r7, pc}

080028fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002900:	4802      	ldr	r0, [pc, #8]	; (800290c <DMA2_Stream0_IRQHandler+0x10>)
 8002902:	f000 ff03 	bl	800370c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	200000e4 	.word	0x200000e4

08002910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002918:	4a14      	ldr	r2, [pc, #80]	; (800296c <_sbrk+0x5c>)
 800291a:	4b15      	ldr	r3, [pc, #84]	; (8002970 <_sbrk+0x60>)
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002924:	4b13      	ldr	r3, [pc, #76]	; (8002974 <_sbrk+0x64>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d102      	bne.n	8002932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800292c:	4b11      	ldr	r3, [pc, #68]	; (8002974 <_sbrk+0x64>)
 800292e:	4a12      	ldr	r2, [pc, #72]	; (8002978 <_sbrk+0x68>)
 8002930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002932:	4b10      	ldr	r3, [pc, #64]	; (8002974 <_sbrk+0x64>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	429a      	cmp	r2, r3
 800293e:	d207      	bcs.n	8002950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002940:	f003 fa12 	bl	8005d68 <__errno>
 8002944:	4603      	mov	r3, r0
 8002946:	220c      	movs	r2, #12
 8002948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800294a:	f04f 33ff 	mov.w	r3, #4294967295
 800294e:	e009      	b.n	8002964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <_sbrk+0x64>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002956:	4b07      	ldr	r3, [pc, #28]	; (8002974 <_sbrk+0x64>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4413      	add	r3, r2
 800295e:	4a05      	ldr	r2, [pc, #20]	; (8002974 <_sbrk+0x64>)
 8002960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002962:	68fb      	ldr	r3, [r7, #12]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20020000 	.word	0x20020000
 8002970:	00000400 	.word	0x00000400
 8002974:	200002c0 	.word	0x200002c0
 8002978:	200002d8 	.word	0x200002d8

0800297c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <SystemInit+0x20>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	4a05      	ldr	r2, [pc, #20]	; (800299c <SystemInit+0x20>)
 8002988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800298c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002990:	bf00      	nop
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80029a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029a4:	480d      	ldr	r0, [pc, #52]	; (80029dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029a6:	490e      	ldr	r1, [pc, #56]	; (80029e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029a8:	4a0e      	ldr	r2, [pc, #56]	; (80029e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029ac:	e002      	b.n	80029b4 <LoopCopyDataInit>

080029ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029b2:	3304      	adds	r3, #4

080029b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029b8:	d3f9      	bcc.n	80029ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ba:	4a0b      	ldr	r2, [pc, #44]	; (80029e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029bc:	4c0b      	ldr	r4, [pc, #44]	; (80029ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80029be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029c0:	e001      	b.n	80029c6 <LoopFillZerobss>

080029c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029c4:	3204      	adds	r2, #4

080029c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029c8:	d3fb      	bcc.n	80029c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029ca:	f7ff ffd7 	bl	800297c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ce:	f003 f9d1 	bl	8005d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029d2:	f7ff f813 	bl	80019fc <main>
  bx  lr    
 80029d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029e0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80029e4:	08007038 	.word	0x08007038
  ldr r2, =_sbss
 80029e8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80029ec:	200002d8 	.word	0x200002d8

080029f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029f0:	e7fe      	b.n	80029f0 <ADC_IRQHandler>
	...

080029f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029f8:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <HAL_Init+0x40>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a0d      	ldr	r2, [pc, #52]	; (8002a34 <HAL_Init+0x40>)
 80029fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a04:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <HAL_Init+0x40>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a0a      	ldr	r2, [pc, #40]	; (8002a34 <HAL_Init+0x40>)
 8002a0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a10:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <HAL_Init+0x40>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a07      	ldr	r2, [pc, #28]	; (8002a34 <HAL_Init+0x40>)
 8002a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a1c:	2003      	movs	r0, #3
 8002a1e:	f000 fd2d 	bl	800347c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a22:	2000      	movs	r0, #0
 8002a24:	f000 f808 	bl	8002a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a28:	f7ff fd8e 	bl	8002548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40023c00 	.word	0x40023c00

08002a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a40:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <HAL_InitTick+0x54>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <HAL_InitTick+0x58>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	4619      	mov	r1, r3
 8002a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 fd45 	bl	80034e6 <HAL_SYSTICK_Config>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e00e      	b.n	8002a84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b0f      	cmp	r3, #15
 8002a6a:	d80a      	bhi.n	8002a82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	f04f 30ff 	mov.w	r0, #4294967295
 8002a74:	f000 fd0d 	bl	8003492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a78:	4a06      	ldr	r2, [pc, #24]	; (8002a94 <HAL_InitTick+0x5c>)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	e000      	b.n	8002a84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	20000010 	.word	0x20000010
 8002a90:	20000018 	.word	0x20000018
 8002a94:	20000014 	.word	0x20000014

08002a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_IncTick+0x20>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4b06      	ldr	r3, [pc, #24]	; (8002abc <HAL_IncTick+0x24>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	4a04      	ldr	r2, [pc, #16]	; (8002abc <HAL_IncTick+0x24>)
 8002aaa:	6013      	str	r3, [r2, #0]
}
 8002aac:	bf00      	nop
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	20000018 	.word	0x20000018
 8002abc:	200002c4 	.word	0x200002c4

08002ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ac4:	4b03      	ldr	r3, [pc, #12]	; (8002ad4 <HAL_GetTick+0x14>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	200002c4 	.word	0x200002c4

08002ad8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e033      	b.n	8002b56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff fd4e 	bl	8002598 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d118      	bne.n	8002b48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b1e:	f023 0302 	bic.w	r3, r3, #2
 8002b22:	f043 0202 	orr.w	r2, r3, #2
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fa58 	bl	8002fe0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f023 0303 	bic.w	r3, r3, #3
 8002b3e:	f043 0201 	orr.w	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
 8002b46:	e001      	b.n	8002b4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_ADC_Start_DMA+0x1e>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e0ce      	b.n	8002d1c <HAL_ADC_Start_DMA+0x1bc>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d018      	beq.n	8002bc6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ba4:	4b5f      	ldr	r3, [pc, #380]	; (8002d24 <HAL_ADC_Start_DMA+0x1c4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a5f      	ldr	r2, [pc, #380]	; (8002d28 <HAL_ADC_Start_DMA+0x1c8>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	0c9a      	lsrs	r2, r3, #18
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	4413      	add	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002bb8:	e002      	b.n	8002bc0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f9      	bne.n	8002bba <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd4:	d107      	bne.n	8002be6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002be4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	f040 8086 	bne.w	8002d02 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002bfe:	f023 0301 	bic.w	r3, r3, #1
 8002c02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d007      	beq.n	8002c28 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c20:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c34:	d106      	bne.n	8002c44 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3a:	f023 0206 	bic.w	r2, r3, #6
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	645a      	str	r2, [r3, #68]	; 0x44
 8002c42:	e002      	b.n	8002c4a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c52:	4b36      	ldr	r3, [pc, #216]	; (8002d2c <HAL_ADC_Start_DMA+0x1cc>)
 8002c54:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5a:	4a35      	ldr	r2, [pc, #212]	; (8002d30 <HAL_ADC_Start_DMA+0x1d0>)
 8002c5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c62:	4a34      	ldr	r2, [pc, #208]	; (8002d34 <HAL_ADC_Start_DMA+0x1d4>)
 8002c64:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6a:	4a33      	ldr	r2, [pc, #204]	; (8002d38 <HAL_ADC_Start_DMA+0x1d8>)
 8002c6c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002c76:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002c86:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c96:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	334c      	adds	r3, #76	; 0x4c
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f000 fcd8 	bl	800365c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10f      	bne.n	8002cd8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d129      	bne.n	8002d1a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cd4:	609a      	str	r2, [r3, #8]
 8002cd6:	e020      	b.n	8002d1a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a17      	ldr	r2, [pc, #92]	; (8002d3c <HAL_ADC_Start_DMA+0x1dc>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d11b      	bne.n	8002d1a <HAL_ADC_Start_DMA+0x1ba>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d114      	bne.n	8002d1a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	e00b      	b.n	8002d1a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f043 0210 	orr.w	r2, r3, #16
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f043 0201 	orr.w	r2, r3, #1
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20000010 	.word	0x20000010
 8002d28:	431bde83 	.word	0x431bde83
 8002d2c:	40012300 	.word	0x40012300
 8002d30:	080031d9 	.word	0x080031d9
 8002d34:	08003293 	.word	0x08003293
 8002d38:	080032af 	.word	0x080032af
 8002d3c:	40012000 	.word	0x40012000

08002d40 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x1c>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e113      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0x244>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b09      	cmp	r3, #9
 8002da6:	d925      	bls.n	8002df4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68d9      	ldr	r1, [r3, #12]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	461a      	mov	r2, r3
 8002db6:	4613      	mov	r3, r2
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4413      	add	r3, r2
 8002dbc:	3b1e      	subs	r3, #30
 8002dbe:	2207      	movs	r2, #7
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43da      	mvns	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	400a      	ands	r2, r1
 8002dcc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68d9      	ldr	r1, [r3, #12]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	4618      	mov	r0, r3
 8002de0:	4603      	mov	r3, r0
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4403      	add	r3, r0
 8002de6:	3b1e      	subs	r3, #30
 8002de8:	409a      	lsls	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	e022      	b.n	8002e3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6919      	ldr	r1, [r3, #16]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	461a      	mov	r2, r3
 8002e02:	4613      	mov	r3, r2
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	4413      	add	r3, r2
 8002e08:	2207      	movs	r2, #7
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43da      	mvns	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	400a      	ands	r2, r1
 8002e16:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6919      	ldr	r1, [r3, #16]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	4618      	mov	r0, r3
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	4403      	add	r3, r0
 8002e30:	409a      	lsls	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b06      	cmp	r3, #6
 8002e40:	d824      	bhi.n	8002e8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	3b05      	subs	r3, #5
 8002e54:	221f      	movs	r2, #31
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	43da      	mvns	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	400a      	ands	r2, r1
 8002e62:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	4618      	mov	r0, r3
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3b05      	subs	r3, #5
 8002e7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	635a      	str	r2, [r3, #52]	; 0x34
 8002e8a:	e04c      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b0c      	cmp	r3, #12
 8002e92:	d824      	bhi.n	8002ede <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3b23      	subs	r3, #35	; 0x23
 8002ea6:	221f      	movs	r2, #31
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43da      	mvns	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	400a      	ands	r2, r1
 8002eb4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	3b23      	subs	r3, #35	; 0x23
 8002ed0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	631a      	str	r2, [r3, #48]	; 0x30
 8002edc:	e023      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	3b41      	subs	r3, #65	; 0x41
 8002ef0:	221f      	movs	r2, #31
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43da      	mvns	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	400a      	ands	r2, r1
 8002efe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	3b41      	subs	r3, #65	; 0x41
 8002f1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f26:	4b29      	ldr	r3, [pc, #164]	; (8002fcc <HAL_ADC_ConfigChannel+0x250>)
 8002f28:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a28      	ldr	r2, [pc, #160]	; (8002fd0 <HAL_ADC_ConfigChannel+0x254>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d10f      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x1d8>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b12      	cmp	r3, #18
 8002f3a:	d10b      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a1d      	ldr	r2, [pc, #116]	; (8002fd0 <HAL_ADC_ConfigChannel+0x254>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d12b      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x23a>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a1c      	ldr	r2, [pc, #112]	; (8002fd4 <HAL_ADC_ConfigChannel+0x258>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d003      	beq.n	8002f70 <HAL_ADC_ConfigChannel+0x1f4>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b11      	cmp	r3, #17
 8002f6e:	d122      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a11      	ldr	r2, [pc, #68]	; (8002fd4 <HAL_ADC_ConfigChannel+0x258>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d111      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f92:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <HAL_ADC_ConfigChannel+0x25c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a11      	ldr	r2, [pc, #68]	; (8002fdc <HAL_ADC_ConfigChannel+0x260>)
 8002f98:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9c:	0c9a      	lsrs	r2, r3, #18
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fa8:	e002      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	3b01      	subs	r3, #1
 8002fae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f9      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	40012300 	.word	0x40012300
 8002fd0:	40012000 	.word	0x40012000
 8002fd4:	10000012 	.word	0x10000012
 8002fd8:	20000010 	.word	0x20000010
 8002fdc:	431bde83 	.word	0x431bde83

08002fe0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fe8:	4b79      	ldr	r3, [pc, #484]	; (80031d0 <ADC_Init+0x1f0>)
 8002fea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	431a      	orrs	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003014:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6859      	ldr	r1, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	021a      	lsls	r2, r3, #8
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003038:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6859      	ldr	r1, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800305a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6899      	ldr	r1, [r3, #8]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	4a58      	ldr	r2, [pc, #352]	; (80031d4 <ADC_Init+0x1f4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d022      	beq.n	80030be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003086:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6899      	ldr	r1, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6899      	ldr	r1, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	609a      	str	r2, [r3, #8]
 80030bc:	e00f      	b.n	80030de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0202 	bic.w	r2, r2, #2
 80030ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6899      	ldr	r1, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	7e1b      	ldrb	r3, [r3, #24]
 80030f8:	005a      	lsls	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d01b      	beq.n	8003144 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800311a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800312a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6859      	ldr	r1, [r3, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	3b01      	subs	r3, #1
 8003138:	035a      	lsls	r2, r3, #13
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	e007      	b.n	8003154 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003152:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003162:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	3b01      	subs	r3, #1
 8003170:	051a      	lsls	r2, r3, #20
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003188:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6899      	ldr	r1, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003196:	025a      	lsls	r2, r3, #9
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6899      	ldr	r1, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	029a      	lsls	r2, r3, #10
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	609a      	str	r2, [r3, #8]
}
 80031c4:	bf00      	nop
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	40012300 	.word	0x40012300
 80031d4:	0f000001 	.word	0x0f000001

080031d8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d13c      	bne.n	800326c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d12b      	bne.n	8003264 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003210:	2b00      	cmp	r3, #0
 8003212:	d127      	bne.n	8003264 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800321e:	2b00      	cmp	r3, #0
 8003220:	d006      	beq.n	8003230 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800322c:	2b00      	cmp	r3, #0
 800322e:	d119      	bne.n	8003264 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0220 	bic.w	r2, r2, #32
 800323e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d105      	bne.n	8003264 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	f043 0201 	orr.w	r2, r3, #1
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f7ff fd6b 	bl	8002d40 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800326a:	e00e      	b.n	800328a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f7ff fd75 	bl	8002d68 <HAL_ADC_ErrorCallback>
}
 800327e:	e004      	b.n	800328a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	4798      	blx	r3
}
 800328a:	bf00      	nop
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f7ff fd57 	bl	8002d54 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032a6:	bf00      	nop
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b084      	sub	sp, #16
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ba:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2240      	movs	r2, #64	; 0x40
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	f043 0204 	orr.w	r2, r3, #4
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f7ff fd4a 	bl	8002d68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032d4:	bf00      	nop
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <__NVIC_SetPriorityGrouping>:
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032ec:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <__NVIC_SetPriorityGrouping+0x44>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032f8:	4013      	ands	r3, r2
 80032fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800330c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800330e:	4a04      	ldr	r2, [pc, #16]	; (8003320 <__NVIC_SetPriorityGrouping+0x44>)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	60d3      	str	r3, [r2, #12]
}
 8003314:	bf00      	nop
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	e000ed00 	.word	0xe000ed00

08003324 <__NVIC_GetPriorityGrouping>:
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003328:	4b04      	ldr	r3, [pc, #16]	; (800333c <__NVIC_GetPriorityGrouping+0x18>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	0a1b      	lsrs	r3, r3, #8
 800332e:	f003 0307 	and.w	r3, r3, #7
}
 8003332:	4618      	mov	r0, r3
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	e000ed00 	.word	0xe000ed00

08003340 <__NVIC_EnableIRQ>:
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800334a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334e:	2b00      	cmp	r3, #0
 8003350:	db0b      	blt.n	800336a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003352:	79fb      	ldrb	r3, [r7, #7]
 8003354:	f003 021f 	and.w	r2, r3, #31
 8003358:	4907      	ldr	r1, [pc, #28]	; (8003378 <__NVIC_EnableIRQ+0x38>)
 800335a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	2001      	movs	r0, #1
 8003362:	fa00 f202 	lsl.w	r2, r0, r2
 8003366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	e000e100 	.word	0xe000e100

0800337c <__NVIC_SetPriority>:
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	6039      	str	r1, [r7, #0]
 8003386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338c:	2b00      	cmp	r3, #0
 800338e:	db0a      	blt.n	80033a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	b2da      	uxtb	r2, r3
 8003394:	490c      	ldr	r1, [pc, #48]	; (80033c8 <__NVIC_SetPriority+0x4c>)
 8003396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339a:	0112      	lsls	r2, r2, #4
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	440b      	add	r3, r1
 80033a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80033a4:	e00a      	b.n	80033bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	4908      	ldr	r1, [pc, #32]	; (80033cc <__NVIC_SetPriority+0x50>)
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	3b04      	subs	r3, #4
 80033b4:	0112      	lsls	r2, r2, #4
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	440b      	add	r3, r1
 80033ba:	761a      	strb	r2, [r3, #24]
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	e000e100 	.word	0xe000e100
 80033cc:	e000ed00 	.word	0xe000ed00

080033d0 <NVIC_EncodePriority>:
{
 80033d0:	b480      	push	{r7}
 80033d2:	b089      	sub	sp, #36	; 0x24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f1c3 0307 	rsb	r3, r3, #7
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	bf28      	it	cs
 80033ee:	2304      	movcs	r3, #4
 80033f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	3304      	adds	r3, #4
 80033f6:	2b06      	cmp	r3, #6
 80033f8:	d902      	bls.n	8003400 <NVIC_EncodePriority+0x30>
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	3b03      	subs	r3, #3
 80033fe:	e000      	b.n	8003402 <NVIC_EncodePriority+0x32>
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003404:	f04f 32ff 	mov.w	r2, #4294967295
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	43da      	mvns	r2, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	401a      	ands	r2, r3
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003418:	f04f 31ff 	mov.w	r1, #4294967295
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	fa01 f303 	lsl.w	r3, r1, r3
 8003422:	43d9      	mvns	r1, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003428:	4313      	orrs	r3, r2
}
 800342a:	4618      	mov	r0, r3
 800342c:	3724      	adds	r7, #36	; 0x24
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3b01      	subs	r3, #1
 8003444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003448:	d301      	bcc.n	800344e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800344a:	2301      	movs	r3, #1
 800344c:	e00f      	b.n	800346e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800344e:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <SysTick_Config+0x40>)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3b01      	subs	r3, #1
 8003454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003456:	210f      	movs	r1, #15
 8003458:	f04f 30ff 	mov.w	r0, #4294967295
 800345c:	f7ff ff8e 	bl	800337c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <SysTick_Config+0x40>)
 8003462:	2200      	movs	r2, #0
 8003464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003466:	4b04      	ldr	r3, [pc, #16]	; (8003478 <SysTick_Config+0x40>)
 8003468:	2207      	movs	r2, #7
 800346a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	e000e010 	.word	0xe000e010

0800347c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7ff ff29 	bl	80032dc <__NVIC_SetPriorityGrouping>
}
 800348a:	bf00      	nop
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003492:	b580      	push	{r7, lr}
 8003494:	b086      	sub	sp, #24
 8003496:	af00      	add	r7, sp, #0
 8003498:	4603      	mov	r3, r0
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
 800349e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034a4:	f7ff ff3e 	bl	8003324 <__NVIC_GetPriorityGrouping>
 80034a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	6978      	ldr	r0, [r7, #20]
 80034b0:	f7ff ff8e 	bl	80033d0 <NVIC_EncodePriority>
 80034b4:	4602      	mov	r2, r0
 80034b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ba:	4611      	mov	r1, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff ff5d 	bl	800337c <__NVIC_SetPriority>
}
 80034c2:	bf00      	nop
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	4603      	mov	r3, r0
 80034d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff ff31 	bl	8003340 <__NVIC_EnableIRQ>
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b082      	sub	sp, #8
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7ff ffa2 	bl	8003438 <SysTick_Config>
 80034f4:	4603      	mov	r3, r0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800350c:	f7ff fad8 	bl	8002ac0 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e099      	b.n	8003650 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0201 	bic.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800353c:	e00f      	b.n	800355e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800353e:	f7ff fabf 	bl	8002ac0 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b05      	cmp	r3, #5
 800354a:	d908      	bls.n	800355e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2203      	movs	r2, #3
 8003556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e078      	b.n	8003650 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1e8      	bne.n	800353e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	4b38      	ldr	r3, [pc, #224]	; (8003658 <HAL_DMA_Init+0x158>)
 8003578:	4013      	ands	r3, r2
 800357a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800358a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003596:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d107      	bne.n	80035c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	4313      	orrs	r3, r2
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f023 0307 	bic.w	r3, r3, #7
 80035de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d117      	bne.n	8003622 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00e      	beq.n	8003622 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 fa6f 	bl	8003ae8 <DMA_CheckFifoParam>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d008      	beq.n	8003622 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2240      	movs	r2, #64	; 0x40
 8003614:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800361e:	2301      	movs	r3, #1
 8003620:	e016      	b.n	8003650 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fa26 	bl	8003a7c <DMA_CalcBaseAndBitshift>
 8003630:	4603      	mov	r3, r0
 8003632:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003638:	223f      	movs	r2, #63	; 0x3f
 800363a:	409a      	lsls	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	f010803f 	.word	0xf010803f

0800365c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003672:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_DMA_Start_IT+0x26>
 800367e:	2302      	movs	r3, #2
 8003680:	e040      	b.n	8003704 <HAL_DMA_Start_IT+0xa8>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b01      	cmp	r3, #1
 8003694:	d12f      	bne.n	80036f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2202      	movs	r2, #2
 800369a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	68b9      	ldr	r1, [r7, #8]
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f9b8 	bl	8003a20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b4:	223f      	movs	r2, #63	; 0x3f
 80036b6:	409a      	lsls	r2, r3
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0216 	orr.w	r2, r2, #22
 80036ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d007      	beq.n	80036e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0208 	orr.w	r2, r2, #8
 80036e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	e005      	b.n	8003702 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036fe:	2302      	movs	r3, #2
 8003700:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003702:	7dfb      	ldrb	r3, [r7, #23]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003718:	4b8e      	ldr	r3, [pc, #568]	; (8003954 <HAL_DMA_IRQHandler+0x248>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a8e      	ldr	r2, [pc, #568]	; (8003958 <HAL_DMA_IRQHandler+0x24c>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	0a9b      	lsrs	r3, r3, #10
 8003724:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003736:	2208      	movs	r2, #8
 8003738:	409a      	lsls	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4013      	ands	r3, r2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d01a      	beq.n	8003778 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d013      	beq.n	8003778 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0204 	bic.w	r2, r2, #4
 800375e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003764:	2208      	movs	r2, #8
 8003766:	409a      	lsls	r2, r3
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003770:	f043 0201 	orr.w	r2, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377c:	2201      	movs	r2, #1
 800377e:	409a      	lsls	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4013      	ands	r3, r2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d012      	beq.n	80037ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00b      	beq.n	80037ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379a:	2201      	movs	r2, #1
 800379c:	409a      	lsls	r2, r3
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a6:	f043 0202 	orr.w	r2, r3, #2
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b2:	2204      	movs	r2, #4
 80037b4:	409a      	lsls	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d012      	beq.n	80037e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00b      	beq.n	80037e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d0:	2204      	movs	r2, #4
 80037d2:	409a      	lsls	r2, r3
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037dc:	f043 0204 	orr.w	r2, r3, #4
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e8:	2210      	movs	r2, #16
 80037ea:	409a      	lsls	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4013      	ands	r3, r2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d043      	beq.n	800387c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d03c      	beq.n	800387c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003806:	2210      	movs	r2, #16
 8003808:	409a      	lsls	r2, r3
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d018      	beq.n	800384e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d108      	bne.n	800383c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	2b00      	cmp	r3, #0
 8003830:	d024      	beq.n	800387c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	4798      	blx	r3
 800383a:	e01f      	b.n	800387c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003840:	2b00      	cmp	r3, #0
 8003842:	d01b      	beq.n	800387c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	4798      	blx	r3
 800384c:	e016      	b.n	800387c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003858:	2b00      	cmp	r3, #0
 800385a:	d107      	bne.n	800386c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0208 	bic.w	r2, r2, #8
 800386a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003880:	2220      	movs	r2, #32
 8003882:	409a      	lsls	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4013      	ands	r3, r2
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 808f 	beq.w	80039ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 8087 	beq.w	80039ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a2:	2220      	movs	r2, #32
 80038a4:	409a      	lsls	r2, r3
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b05      	cmp	r3, #5
 80038b4:	d136      	bne.n	8003924 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0216 	bic.w	r2, r2, #22
 80038c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695a      	ldr	r2, [r3, #20]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d103      	bne.n	80038e6 <HAL_DMA_IRQHandler+0x1da>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d007      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0208 	bic.w	r2, r2, #8
 80038f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fa:	223f      	movs	r2, #63	; 0x3f
 80038fc:	409a      	lsls	r2, r3
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003916:	2b00      	cmp	r3, #0
 8003918:	d07e      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	4798      	blx	r3
        }
        return;
 8003922:	e079      	b.n	8003a18 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d01d      	beq.n	800396e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10d      	bne.n	800395c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003944:	2b00      	cmp	r3, #0
 8003946:	d031      	beq.n	80039ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	4798      	blx	r3
 8003950:	e02c      	b.n	80039ac <HAL_DMA_IRQHandler+0x2a0>
 8003952:	bf00      	nop
 8003954:	20000010 	.word	0x20000010
 8003958:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003960:	2b00      	cmp	r3, #0
 8003962:	d023      	beq.n	80039ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	4798      	blx	r3
 800396c:	e01e      	b.n	80039ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10f      	bne.n	800399c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0210 	bic.w	r2, r2, #16
 800398a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d032      	beq.n	8003a1a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d022      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2205      	movs	r2, #5
 80039c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0201 	bic.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	3301      	adds	r3, #1
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d307      	bcc.n	80039f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f2      	bne.n	80039d8 <HAL_DMA_IRQHandler+0x2cc>
 80039f2:	e000      	b.n	80039f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80039f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d005      	beq.n	8003a1a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	4798      	blx	r3
 8003a16:	e000      	b.n	8003a1a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a18:	bf00      	nop
    }
  }
}
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
 8003a2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2b40      	cmp	r3, #64	; 0x40
 8003a4c:	d108      	bne.n	8003a60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a5e:	e007      	b.n	8003a70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	60da      	str	r2, [r3, #12]
}
 8003a70:	bf00      	nop
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	3b10      	subs	r3, #16
 8003a8c:	4a14      	ldr	r2, [pc, #80]	; (8003ae0 <DMA_CalcBaseAndBitshift+0x64>)
 8003a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a92:	091b      	lsrs	r3, r3, #4
 8003a94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a96:	4a13      	ldr	r2, [pc, #76]	; (8003ae4 <DMA_CalcBaseAndBitshift+0x68>)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d909      	bls.n	8003abe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ab2:	f023 0303 	bic.w	r3, r3, #3
 8003ab6:	1d1a      	adds	r2, r3, #4
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	659a      	str	r2, [r3, #88]	; 0x58
 8003abc:	e007      	b.n	8003ace <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ac6:	f023 0303 	bic.w	r3, r3, #3
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	aaaaaaab 	.word	0xaaaaaaab
 8003ae4:	08006ff0 	.word	0x08006ff0

08003ae8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d11f      	bne.n	8003b42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d856      	bhi.n	8003bb6 <DMA_CheckFifoParam+0xce>
 8003b08:	a201      	add	r2, pc, #4	; (adr r2, 8003b10 <DMA_CheckFifoParam+0x28>)
 8003b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0e:	bf00      	nop
 8003b10:	08003b21 	.word	0x08003b21
 8003b14:	08003b33 	.word	0x08003b33
 8003b18:	08003b21 	.word	0x08003b21
 8003b1c:	08003bb7 	.word	0x08003bb7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d046      	beq.n	8003bba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b30:	e043      	b.n	8003bba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b3a:	d140      	bne.n	8003bbe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b40:	e03d      	b.n	8003bbe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b4a:	d121      	bne.n	8003b90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b03      	cmp	r3, #3
 8003b50:	d837      	bhi.n	8003bc2 <DMA_CheckFifoParam+0xda>
 8003b52:	a201      	add	r2, pc, #4	; (adr r2, 8003b58 <DMA_CheckFifoParam+0x70>)
 8003b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b58:	08003b69 	.word	0x08003b69
 8003b5c:	08003b6f 	.word	0x08003b6f
 8003b60:	08003b69 	.word	0x08003b69
 8003b64:	08003b81 	.word	0x08003b81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b6c:	e030      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d025      	beq.n	8003bc6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b7e:	e022      	b.n	8003bc6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b88:	d11f      	bne.n	8003bca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b8e:	e01c      	b.n	8003bca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d903      	bls.n	8003b9e <DMA_CheckFifoParam+0xb6>
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d003      	beq.n	8003ba4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b9c:	e018      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba2:	e015      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00e      	beq.n	8003bce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb4:	e00b      	b.n	8003bce <DMA_CheckFifoParam+0xe6>
      break;
 8003bb6:	bf00      	nop
 8003bb8:	e00a      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bba:	bf00      	nop
 8003bbc:	e008      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bbe:	bf00      	nop
 8003bc0:	e006      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bc2:	bf00      	nop
 8003bc4:	e004      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bc6:	bf00      	nop
 8003bc8:	e002      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003bca:	bf00      	nop
 8003bcc:	e000      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bce:	bf00      	nop
    }
  } 
  
  return status; 
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop

08003be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b089      	sub	sp, #36	; 0x24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61fb      	str	r3, [r7, #28]
 8003bfa:	e159      	b.n	8003eb0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	f040 8148 	bne.w	8003eaa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d005      	beq.n	8003c32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d130      	bne.n	8003c94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	2203      	movs	r2, #3
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	43db      	mvns	r3, r3
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	4013      	ands	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c68:	2201      	movs	r2, #1
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	43db      	mvns	r3, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4013      	ands	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	091b      	lsrs	r3, r3, #4
 8003c7e:	f003 0201 	and.w	r2, r3, #1
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f003 0303 	and.w	r3, r3, #3
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d017      	beq.n	8003cd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	2203      	movs	r2, #3
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d123      	bne.n	8003d24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	08da      	lsrs	r2, r3, #3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3208      	adds	r2, #8
 8003ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	220f      	movs	r2, #15
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	08da      	lsrs	r2, r3, #3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3208      	adds	r2, #8
 8003d1e:	69b9      	ldr	r1, [r7, #24]
 8003d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	2203      	movs	r2, #3
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	43db      	mvns	r3, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 0203 	and.w	r2, r3, #3
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 80a2 	beq.w	8003eaa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	4b57      	ldr	r3, [pc, #348]	; (8003ec8 <HAL_GPIO_Init+0x2e8>)
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6e:	4a56      	ldr	r2, [pc, #344]	; (8003ec8 <HAL_GPIO_Init+0x2e8>)
 8003d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d74:	6453      	str	r3, [r2, #68]	; 0x44
 8003d76:	4b54      	ldr	r3, [pc, #336]	; (8003ec8 <HAL_GPIO_Init+0x2e8>)
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d82:	4a52      	ldr	r2, [pc, #328]	; (8003ecc <HAL_GPIO_Init+0x2ec>)
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	089b      	lsrs	r3, r3, #2
 8003d88:	3302      	adds	r3, #2
 8003d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	220f      	movs	r2, #15
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4013      	ands	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a49      	ldr	r2, [pc, #292]	; (8003ed0 <HAL_GPIO_Init+0x2f0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d019      	beq.n	8003de2 <HAL_GPIO_Init+0x202>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a48      	ldr	r2, [pc, #288]	; (8003ed4 <HAL_GPIO_Init+0x2f4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d013      	beq.n	8003dde <HAL_GPIO_Init+0x1fe>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a47      	ldr	r2, [pc, #284]	; (8003ed8 <HAL_GPIO_Init+0x2f8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00d      	beq.n	8003dda <HAL_GPIO_Init+0x1fa>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a46      	ldr	r2, [pc, #280]	; (8003edc <HAL_GPIO_Init+0x2fc>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d007      	beq.n	8003dd6 <HAL_GPIO_Init+0x1f6>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a45      	ldr	r2, [pc, #276]	; (8003ee0 <HAL_GPIO_Init+0x300>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d101      	bne.n	8003dd2 <HAL_GPIO_Init+0x1f2>
 8003dce:	2304      	movs	r3, #4
 8003dd0:	e008      	b.n	8003de4 <HAL_GPIO_Init+0x204>
 8003dd2:	2307      	movs	r3, #7
 8003dd4:	e006      	b.n	8003de4 <HAL_GPIO_Init+0x204>
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e004      	b.n	8003de4 <HAL_GPIO_Init+0x204>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e002      	b.n	8003de4 <HAL_GPIO_Init+0x204>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <HAL_GPIO_Init+0x204>
 8003de2:	2300      	movs	r3, #0
 8003de4:	69fa      	ldr	r2, [r7, #28]
 8003de6:	f002 0203 	and.w	r2, r2, #3
 8003dea:	0092      	lsls	r2, r2, #2
 8003dec:	4093      	lsls	r3, r2
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003df4:	4935      	ldr	r1, [pc, #212]	; (8003ecc <HAL_GPIO_Init+0x2ec>)
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	089b      	lsrs	r3, r3, #2
 8003dfa:	3302      	adds	r3, #2
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e02:	4b38      	ldr	r3, [pc, #224]	; (8003ee4 <HAL_GPIO_Init+0x304>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e26:	4a2f      	ldr	r2, [pc, #188]	; (8003ee4 <HAL_GPIO_Init+0x304>)
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e2c:	4b2d      	ldr	r3, [pc, #180]	; (8003ee4 <HAL_GPIO_Init+0x304>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	43db      	mvns	r3, r3
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e50:	4a24      	ldr	r2, [pc, #144]	; (8003ee4 <HAL_GPIO_Init+0x304>)
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e56:	4b23      	ldr	r3, [pc, #140]	; (8003ee4 <HAL_GPIO_Init+0x304>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	4013      	ands	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e7a:	4a1a      	ldr	r2, [pc, #104]	; (8003ee4 <HAL_GPIO_Init+0x304>)
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e80:	4b18      	ldr	r3, [pc, #96]	; (8003ee4 <HAL_GPIO_Init+0x304>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ea4:	4a0f      	ldr	r2, [pc, #60]	; (8003ee4 <HAL_GPIO_Init+0x304>)
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	3301      	adds	r3, #1
 8003eae:	61fb      	str	r3, [r7, #28]
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	2b0f      	cmp	r3, #15
 8003eb4:	f67f aea2 	bls.w	8003bfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003eb8:	bf00      	nop
 8003eba:	bf00      	nop
 8003ebc:	3724      	adds	r7, #36	; 0x24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	40013800 	.word	0x40013800
 8003ed0:	40020000 	.word	0x40020000
 8003ed4:	40020400 	.word	0x40020400
 8003ed8:	40020800 	.word	0x40020800
 8003edc:	40020c00 	.word	0x40020c00
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	40013c00 	.word	0x40013c00

08003ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	807b      	strh	r3, [r7, #2]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ef8:	787b      	ldrb	r3, [r7, #1]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003efe:	887a      	ldrh	r2, [r7, #2]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f04:	e003      	b.n	8003f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f06:	887b      	ldrh	r3, [r7, #2]
 8003f08:	041a      	lsls	r2, r3, #16
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	619a      	str	r2, [r3, #24]
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
	...

08003f1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f26:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f28:	695a      	ldr	r2, [r3, #20]
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d006      	beq.n	8003f40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f32:	4a05      	ldr	r2, [pc, #20]	; (8003f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f34:	88fb      	ldrh	r3, [r7, #6]
 8003f36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fe f9bc 	bl	80022b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40013c00 	.word	0x40013c00

08003f4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e267      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d075      	beq.n	8004056 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f6a:	4b88      	ldr	r3, [pc, #544]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 030c 	and.w	r3, r3, #12
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d00c      	beq.n	8003f90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f76:	4b85      	ldr	r3, [pc, #532]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d112      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f82:	4b82      	ldr	r3, [pc, #520]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f8e:	d10b      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f90:	4b7e      	ldr	r3, [pc, #504]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d05b      	beq.n	8004054 <HAL_RCC_OscConfig+0x108>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d157      	bne.n	8004054 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e242      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb0:	d106      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x74>
 8003fb2:	4b76      	ldr	r3, [pc, #472]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a75      	ldr	r2, [pc, #468]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	e01d      	b.n	8003ffc <HAL_RCC_OscConfig+0xb0>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fc8:	d10c      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x98>
 8003fca:	4b70      	ldr	r3, [pc, #448]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a6f      	ldr	r2, [pc, #444]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	4b6d      	ldr	r3, [pc, #436]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a6c      	ldr	r2, [pc, #432]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	e00b      	b.n	8003ffc <HAL_RCC_OscConfig+0xb0>
 8003fe4:	4b69      	ldr	r3, [pc, #420]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a68      	ldr	r2, [pc, #416]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	4b66      	ldr	r3, [pc, #408]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a65      	ldr	r2, [pc, #404]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d013      	beq.n	800402c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004004:	f7fe fd5c 	bl	8002ac0 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800400c:	f7fe fd58 	bl	8002ac0 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b64      	cmp	r3, #100	; 0x64
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e207      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401e:	4b5b      	ldr	r3, [pc, #364]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f0      	beq.n	800400c <HAL_RCC_OscConfig+0xc0>
 800402a:	e014      	b.n	8004056 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402c:	f7fe fd48 	bl	8002ac0 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004034:	f7fe fd44 	bl	8002ac0 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b64      	cmp	r3, #100	; 0x64
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e1f3      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004046:	4b51      	ldr	r3, [pc, #324]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0xe8>
 8004052:	e000      	b.n	8004056 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d063      	beq.n	800412a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004062:	4b4a      	ldr	r3, [pc, #296]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00b      	beq.n	8004086 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800406e:	4b47      	ldr	r3, [pc, #284]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004076:	2b08      	cmp	r3, #8
 8004078:	d11c      	bne.n	80040b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800407a:	4b44      	ldr	r3, [pc, #272]	; (800418c <HAL_RCC_OscConfig+0x240>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d116      	bne.n	80040b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004086:	4b41      	ldr	r3, [pc, #260]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <HAL_RCC_OscConfig+0x152>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d001      	beq.n	800409e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e1c7      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409e:	4b3b      	ldr	r3, [pc, #236]	; (800418c <HAL_RCC_OscConfig+0x240>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	4937      	ldr	r1, [pc, #220]	; (800418c <HAL_RCC_OscConfig+0x240>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b2:	e03a      	b.n	800412a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d020      	beq.n	80040fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040bc:	4b34      	ldr	r3, [pc, #208]	; (8004190 <HAL_RCC_OscConfig+0x244>)
 80040be:	2201      	movs	r2, #1
 80040c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c2:	f7fe fcfd 	bl	8002ac0 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ca:	f7fe fcf9 	bl	8002ac0 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e1a8      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040dc:	4b2b      	ldr	r3, [pc, #172]	; (800418c <HAL_RCC_OscConfig+0x240>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0f0      	beq.n	80040ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e8:	4b28      	ldr	r3, [pc, #160]	; (800418c <HAL_RCC_OscConfig+0x240>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	4925      	ldr	r1, [pc, #148]	; (800418c <HAL_RCC_OscConfig+0x240>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	600b      	str	r3, [r1, #0]
 80040fc:	e015      	b.n	800412a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040fe:	4b24      	ldr	r3, [pc, #144]	; (8004190 <HAL_RCC_OscConfig+0x244>)
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fe fcdc 	bl	8002ac0 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800410c:	f7fe fcd8 	bl	8002ac0 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e187      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800411e:	4b1b      	ldr	r3, [pc, #108]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b00      	cmp	r3, #0
 8004134:	d036      	beq.n	80041a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d016      	beq.n	800416c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800413e:	4b15      	ldr	r3, [pc, #84]	; (8004194 <HAL_RCC_OscConfig+0x248>)
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004144:	f7fe fcbc 	bl	8002ac0 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800414c:	f7fe fcb8 	bl	8002ac0 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e167      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800415e:	4b0b      	ldr	r3, [pc, #44]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCC_OscConfig+0x200>
 800416a:	e01b      	b.n	80041a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800416c:	4b09      	ldr	r3, [pc, #36]	; (8004194 <HAL_RCC_OscConfig+0x248>)
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004172:	f7fe fca5 	bl	8002ac0 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004178:	e00e      	b.n	8004198 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800417a:	f7fe fca1 	bl	8002ac0 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d907      	bls.n	8004198 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e150      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
 800418c:	40023800 	.word	0x40023800
 8004190:	42470000 	.word	0x42470000
 8004194:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004198:	4b88      	ldr	r3, [pc, #544]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800419a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1ea      	bne.n	800417a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 8097 	beq.w	80042e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041b2:	2300      	movs	r3, #0
 80041b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041b6:	4b81      	ldr	r3, [pc, #516]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10f      	bne.n	80041e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c2:	2300      	movs	r3, #0
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	4b7d      	ldr	r3, [pc, #500]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	4a7c      	ldr	r2, [pc, #496]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80041cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d0:	6413      	str	r3, [r2, #64]	; 0x40
 80041d2:	4b7a      	ldr	r3, [pc, #488]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041da:	60bb      	str	r3, [r7, #8]
 80041dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041de:	2301      	movs	r3, #1
 80041e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e2:	4b77      	ldr	r3, [pc, #476]	; (80043c0 <HAL_RCC_OscConfig+0x474>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d118      	bne.n	8004220 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ee:	4b74      	ldr	r3, [pc, #464]	; (80043c0 <HAL_RCC_OscConfig+0x474>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a73      	ldr	r2, [pc, #460]	; (80043c0 <HAL_RCC_OscConfig+0x474>)
 80041f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041fa:	f7fe fc61 	bl	8002ac0 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004202:	f7fe fc5d 	bl	8002ac0 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e10c      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004214:	4b6a      	ldr	r3, [pc, #424]	; (80043c0 <HAL_RCC_OscConfig+0x474>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0f0      	beq.n	8004202 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d106      	bne.n	8004236 <HAL_RCC_OscConfig+0x2ea>
 8004228:	4b64      	ldr	r3, [pc, #400]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800422a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422c:	4a63      	ldr	r2, [pc, #396]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	6713      	str	r3, [r2, #112]	; 0x70
 8004234:	e01c      	b.n	8004270 <HAL_RCC_OscConfig+0x324>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	2b05      	cmp	r3, #5
 800423c:	d10c      	bne.n	8004258 <HAL_RCC_OscConfig+0x30c>
 800423e:	4b5f      	ldr	r3, [pc, #380]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004242:	4a5e      	ldr	r2, [pc, #376]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004244:	f043 0304 	orr.w	r3, r3, #4
 8004248:	6713      	str	r3, [r2, #112]	; 0x70
 800424a:	4b5c      	ldr	r3, [pc, #368]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800424c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424e:	4a5b      	ldr	r2, [pc, #364]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	6713      	str	r3, [r2, #112]	; 0x70
 8004256:	e00b      	b.n	8004270 <HAL_RCC_OscConfig+0x324>
 8004258:	4b58      	ldr	r3, [pc, #352]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800425a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425c:	4a57      	ldr	r2, [pc, #348]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800425e:	f023 0301 	bic.w	r3, r3, #1
 8004262:	6713      	str	r3, [r2, #112]	; 0x70
 8004264:	4b55      	ldr	r3, [pc, #340]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004268:	4a54      	ldr	r2, [pc, #336]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800426a:	f023 0304 	bic.w	r3, r3, #4
 800426e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d015      	beq.n	80042a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004278:	f7fe fc22 	bl	8002ac0 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427e:	e00a      	b.n	8004296 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004280:	f7fe fc1e 	bl	8002ac0 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	f241 3288 	movw	r2, #5000	; 0x1388
 800428e:	4293      	cmp	r3, r2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e0cb      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004296:	4b49      	ldr	r3, [pc, #292]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0ee      	beq.n	8004280 <HAL_RCC_OscConfig+0x334>
 80042a2:	e014      	b.n	80042ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a4:	f7fe fc0c 	bl	8002ac0 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042aa:	e00a      	b.n	80042c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ac:	f7fe fc08 	bl	8002ac0 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e0b5      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c2:	4b3e      	ldr	r3, [pc, #248]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80042c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1ee      	bne.n	80042ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ce:	7dfb      	ldrb	r3, [r7, #23]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d105      	bne.n	80042e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d4:	4b39      	ldr	r3, [pc, #228]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	4a38      	ldr	r2, [pc, #224]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80042da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80a1 	beq.w	800442c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042ea:	4b34      	ldr	r3, [pc, #208]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 030c 	and.w	r3, r3, #12
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d05c      	beq.n	80043b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d141      	bne.n	8004382 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fe:	4b31      	ldr	r3, [pc, #196]	; (80043c4 <HAL_RCC_OscConfig+0x478>)
 8004300:	2200      	movs	r2, #0
 8004302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004304:	f7fe fbdc 	bl	8002ac0 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800430c:	f7fe fbd8 	bl	8002ac0 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e087      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431e:	4b27      	ldr	r3, [pc, #156]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f0      	bne.n	800430c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69da      	ldr	r2, [r3, #28]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	019b      	lsls	r3, r3, #6
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	085b      	lsrs	r3, r3, #1
 8004342:	3b01      	subs	r3, #1
 8004344:	041b      	lsls	r3, r3, #16
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434c:	061b      	lsls	r3, r3, #24
 800434e:	491b      	ldr	r1, [pc, #108]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004350:	4313      	orrs	r3, r2
 8004352:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004354:	4b1b      	ldr	r3, [pc, #108]	; (80043c4 <HAL_RCC_OscConfig+0x478>)
 8004356:	2201      	movs	r2, #1
 8004358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435a:	f7fe fbb1 	bl	8002ac0 <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004362:	f7fe fbad 	bl	8002ac0 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e05c      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004374:	4b11      	ldr	r3, [pc, #68]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0f0      	beq.n	8004362 <HAL_RCC_OscConfig+0x416>
 8004380:	e054      	b.n	800442c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004382:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <HAL_RCC_OscConfig+0x478>)
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004388:	f7fe fb9a 	bl	8002ac0 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004390:	f7fe fb96 	bl	8002ac0 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e045      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a2:	4b06      	ldr	r3, [pc, #24]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f0      	bne.n	8004390 <HAL_RCC_OscConfig+0x444>
 80043ae:	e03d      	b.n	800442c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d107      	bne.n	80043c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e038      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
 80043bc:	40023800 	.word	0x40023800
 80043c0:	40007000 	.word	0x40007000
 80043c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043c8:	4b1b      	ldr	r3, [pc, #108]	; (8004438 <HAL_RCC_OscConfig+0x4ec>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d028      	beq.n	8004428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d121      	bne.n	8004428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d11a      	bne.n	8004428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043f8:	4013      	ands	r3, r2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004400:	4293      	cmp	r3, r2
 8004402:	d111      	bne.n	8004428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	085b      	lsrs	r3, r3, #1
 8004410:	3b01      	subs	r3, #1
 8004412:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004414:	429a      	cmp	r2, r3
 8004416:	d107      	bne.n	8004428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004422:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004424:	429a      	cmp	r2, r3
 8004426:	d001      	beq.n	800442c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40023800 	.word	0x40023800

0800443c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e0cc      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004450:	4b68      	ldr	r3, [pc, #416]	; (80045f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	429a      	cmp	r2, r3
 800445c:	d90c      	bls.n	8004478 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800445e:	4b65      	ldr	r3, [pc, #404]	; (80045f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004466:	4b63      	ldr	r3, [pc, #396]	; (80045f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d001      	beq.n	8004478 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e0b8      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d020      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	d005      	beq.n	800449c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004490:	4b59      	ldr	r3, [pc, #356]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	4a58      	ldr	r2, [pc, #352]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800449a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044a8:	4b53      	ldr	r3, [pc, #332]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	4a52      	ldr	r2, [pc, #328]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044b4:	4b50      	ldr	r3, [pc, #320]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	494d      	ldr	r1, [pc, #308]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d044      	beq.n	800455c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d107      	bne.n	80044ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044da:	4b47      	ldr	r3, [pc, #284]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d119      	bne.n	800451a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e07f      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d003      	beq.n	80044fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	d107      	bne.n	800450a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044fa:	4b3f      	ldr	r3, [pc, #252]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d109      	bne.n	800451a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e06f      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800450a:	4b3b      	ldr	r3, [pc, #236]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e067      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800451a:	4b37      	ldr	r3, [pc, #220]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f023 0203 	bic.w	r2, r3, #3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	4934      	ldr	r1, [pc, #208]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004528:	4313      	orrs	r3, r2
 800452a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800452c:	f7fe fac8 	bl	8002ac0 <HAL_GetTick>
 8004530:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004532:	e00a      	b.n	800454a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004534:	f7fe fac4 	bl	8002ac0 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004542:	4293      	cmp	r3, r2
 8004544:	d901      	bls.n	800454a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e04f      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454a:	4b2b      	ldr	r3, [pc, #172]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 020c 	and.w	r2, r3, #12
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	429a      	cmp	r2, r3
 800455a:	d1eb      	bne.n	8004534 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800455c:	4b25      	ldr	r3, [pc, #148]	; (80045f4 <HAL_RCC_ClockConfig+0x1b8>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d20c      	bcs.n	8004584 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456a:	4b22      	ldr	r3, [pc, #136]	; (80045f4 <HAL_RCC_ClockConfig+0x1b8>)
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004572:	4b20      	ldr	r3, [pc, #128]	; (80045f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d001      	beq.n	8004584 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e032      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	d008      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004590:	4b19      	ldr	r3, [pc, #100]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	4916      	ldr	r1, [pc, #88]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ae:	4b12      	ldr	r3, [pc, #72]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	490e      	ldr	r1, [pc, #56]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045c2:	f000 f821 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 80045c6:	4602      	mov	r2, r0
 80045c8:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	091b      	lsrs	r3, r3, #4
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	490a      	ldr	r1, [pc, #40]	; (80045fc <HAL_RCC_ClockConfig+0x1c0>)
 80045d4:	5ccb      	ldrb	r3, [r1, r3]
 80045d6:	fa22 f303 	lsr.w	r3, r2, r3
 80045da:	4a09      	ldr	r2, [pc, #36]	; (8004600 <HAL_RCC_ClockConfig+0x1c4>)
 80045dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045de:	4b09      	ldr	r3, [pc, #36]	; (8004604 <HAL_RCC_ClockConfig+0x1c8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fe fa28 	bl	8002a38 <HAL_InitTick>

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40023c00 	.word	0x40023c00
 80045f8:	40023800 	.word	0x40023800
 80045fc:	08006fd8 	.word	0x08006fd8
 8004600:	20000010 	.word	0x20000010
 8004604:	20000014 	.word	0x20000014

08004608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800460c:	b094      	sub	sp, #80	; 0x50
 800460e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	647b      	str	r3, [r7, #68]	; 0x44
 8004614:	2300      	movs	r3, #0
 8004616:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004618:	2300      	movs	r3, #0
 800461a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004620:	4b79      	ldr	r3, [pc, #484]	; (8004808 <HAL_RCC_GetSysClockFreq+0x200>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f003 030c 	and.w	r3, r3, #12
 8004628:	2b08      	cmp	r3, #8
 800462a:	d00d      	beq.n	8004648 <HAL_RCC_GetSysClockFreq+0x40>
 800462c:	2b08      	cmp	r3, #8
 800462e:	f200 80e1 	bhi.w	80047f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <HAL_RCC_GetSysClockFreq+0x34>
 8004636:	2b04      	cmp	r3, #4
 8004638:	d003      	beq.n	8004642 <HAL_RCC_GetSysClockFreq+0x3a>
 800463a:	e0db      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800463c:	4b73      	ldr	r3, [pc, #460]	; (800480c <HAL_RCC_GetSysClockFreq+0x204>)
 800463e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004640:	e0db      	b.n	80047fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004642:	4b73      	ldr	r3, [pc, #460]	; (8004810 <HAL_RCC_GetSysClockFreq+0x208>)
 8004644:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004646:	e0d8      	b.n	80047fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004648:	4b6f      	ldr	r3, [pc, #444]	; (8004808 <HAL_RCC_GetSysClockFreq+0x200>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004650:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004652:	4b6d      	ldr	r3, [pc, #436]	; (8004808 <HAL_RCC_GetSysClockFreq+0x200>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d063      	beq.n	8004726 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800465e:	4b6a      	ldr	r3, [pc, #424]	; (8004808 <HAL_RCC_GetSysClockFreq+0x200>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	099b      	lsrs	r3, r3, #6
 8004664:	2200      	movs	r2, #0
 8004666:	63bb      	str	r3, [r7, #56]	; 0x38
 8004668:	63fa      	str	r2, [r7, #60]	; 0x3c
 800466a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004670:	633b      	str	r3, [r7, #48]	; 0x30
 8004672:	2300      	movs	r3, #0
 8004674:	637b      	str	r3, [r7, #52]	; 0x34
 8004676:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800467a:	4622      	mov	r2, r4
 800467c:	462b      	mov	r3, r5
 800467e:	f04f 0000 	mov.w	r0, #0
 8004682:	f04f 0100 	mov.w	r1, #0
 8004686:	0159      	lsls	r1, r3, #5
 8004688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800468c:	0150      	lsls	r0, r2, #5
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	4621      	mov	r1, r4
 8004694:	1a51      	subs	r1, r2, r1
 8004696:	6139      	str	r1, [r7, #16]
 8004698:	4629      	mov	r1, r5
 800469a:	eb63 0301 	sbc.w	r3, r3, r1
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046ac:	4659      	mov	r1, fp
 80046ae:	018b      	lsls	r3, r1, #6
 80046b0:	4651      	mov	r1, sl
 80046b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046b6:	4651      	mov	r1, sl
 80046b8:	018a      	lsls	r2, r1, #6
 80046ba:	4651      	mov	r1, sl
 80046bc:	ebb2 0801 	subs.w	r8, r2, r1
 80046c0:	4659      	mov	r1, fp
 80046c2:	eb63 0901 	sbc.w	r9, r3, r1
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046da:	4690      	mov	r8, r2
 80046dc:	4699      	mov	r9, r3
 80046de:	4623      	mov	r3, r4
 80046e0:	eb18 0303 	adds.w	r3, r8, r3
 80046e4:	60bb      	str	r3, [r7, #8]
 80046e6:	462b      	mov	r3, r5
 80046e8:	eb49 0303 	adc.w	r3, r9, r3
 80046ec:	60fb      	str	r3, [r7, #12]
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046fa:	4629      	mov	r1, r5
 80046fc:	024b      	lsls	r3, r1, #9
 80046fe:	4621      	mov	r1, r4
 8004700:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004704:	4621      	mov	r1, r4
 8004706:	024a      	lsls	r2, r1, #9
 8004708:	4610      	mov	r0, r2
 800470a:	4619      	mov	r1, r3
 800470c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800470e:	2200      	movs	r2, #0
 8004710:	62bb      	str	r3, [r7, #40]	; 0x28
 8004712:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004714:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004718:	f7fc fa42 	bl	8000ba0 <__aeabi_uldivmod>
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	4613      	mov	r3, r2
 8004722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004724:	e058      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004726:	4b38      	ldr	r3, [pc, #224]	; (8004808 <HAL_RCC_GetSysClockFreq+0x200>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	099b      	lsrs	r3, r3, #6
 800472c:	2200      	movs	r2, #0
 800472e:	4618      	mov	r0, r3
 8004730:	4611      	mov	r1, r2
 8004732:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004736:	623b      	str	r3, [r7, #32]
 8004738:	2300      	movs	r3, #0
 800473a:	627b      	str	r3, [r7, #36]	; 0x24
 800473c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004740:	4642      	mov	r2, r8
 8004742:	464b      	mov	r3, r9
 8004744:	f04f 0000 	mov.w	r0, #0
 8004748:	f04f 0100 	mov.w	r1, #0
 800474c:	0159      	lsls	r1, r3, #5
 800474e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004752:	0150      	lsls	r0, r2, #5
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4641      	mov	r1, r8
 800475a:	ebb2 0a01 	subs.w	sl, r2, r1
 800475e:	4649      	mov	r1, r9
 8004760:	eb63 0b01 	sbc.w	fp, r3, r1
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004770:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004774:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004778:	ebb2 040a 	subs.w	r4, r2, sl
 800477c:	eb63 050b 	sbc.w	r5, r3, fp
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	00eb      	lsls	r3, r5, #3
 800478a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800478e:	00e2      	lsls	r2, r4, #3
 8004790:	4614      	mov	r4, r2
 8004792:	461d      	mov	r5, r3
 8004794:	4643      	mov	r3, r8
 8004796:	18e3      	adds	r3, r4, r3
 8004798:	603b      	str	r3, [r7, #0]
 800479a:	464b      	mov	r3, r9
 800479c:	eb45 0303 	adc.w	r3, r5, r3
 80047a0:	607b      	str	r3, [r7, #4]
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	f04f 0300 	mov.w	r3, #0
 80047aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047ae:	4629      	mov	r1, r5
 80047b0:	028b      	lsls	r3, r1, #10
 80047b2:	4621      	mov	r1, r4
 80047b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047b8:	4621      	mov	r1, r4
 80047ba:	028a      	lsls	r2, r1, #10
 80047bc:	4610      	mov	r0, r2
 80047be:	4619      	mov	r1, r3
 80047c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047c2:	2200      	movs	r2, #0
 80047c4:	61bb      	str	r3, [r7, #24]
 80047c6:	61fa      	str	r2, [r7, #28]
 80047c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047cc:	f7fc f9e8 	bl	8000ba0 <__aeabi_uldivmod>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4613      	mov	r3, r2
 80047d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047d8:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <HAL_RCC_GetSysClockFreq+0x200>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	0c1b      	lsrs	r3, r3, #16
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	3301      	adds	r3, #1
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80047e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047f2:	e002      	b.n	80047fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047f4:	4b05      	ldr	r3, [pc, #20]	; (800480c <HAL_RCC_GetSysClockFreq+0x204>)
 80047f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3750      	adds	r7, #80	; 0x50
 8004800:	46bd      	mov	sp, r7
 8004802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004806:	bf00      	nop
 8004808:	40023800 	.word	0x40023800
 800480c:	00f42400 	.word	0x00f42400
 8004810:	007a1200 	.word	0x007a1200

08004814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004818:	4b03      	ldr	r3, [pc, #12]	; (8004828 <HAL_RCC_GetHCLKFreq+0x14>)
 800481a:	681b      	ldr	r3, [r3, #0]
}
 800481c:	4618      	mov	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	20000010 	.word	0x20000010

0800482c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004830:	f7ff fff0 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 8004834:	4602      	mov	r2, r0
 8004836:	4b05      	ldr	r3, [pc, #20]	; (800484c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	0a9b      	lsrs	r3, r3, #10
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	4903      	ldr	r1, [pc, #12]	; (8004850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004842:	5ccb      	ldrb	r3, [r1, r3]
 8004844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004848:	4618      	mov	r0, r3
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40023800 	.word	0x40023800
 8004850:	08006fe8 	.word	0x08006fe8

08004854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004858:	f7ff ffdc 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 800485c:	4602      	mov	r2, r0
 800485e:	4b05      	ldr	r3, [pc, #20]	; (8004874 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	0b5b      	lsrs	r3, r3, #13
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	4903      	ldr	r1, [pc, #12]	; (8004878 <HAL_RCC_GetPCLK2Freq+0x24>)
 800486a:	5ccb      	ldrb	r3, [r1, r3]
 800486c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004870:	4618      	mov	r0, r3
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40023800 	.word	0x40023800
 8004878:	08006fe8 	.word	0x08006fe8

0800487c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e041      	b.n	8004912 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fd ff36 	bl	8002714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3304      	adds	r3, #4
 80048b8:	4619      	mov	r1, r3
 80048ba:	4610      	mov	r0, r2
 80048bc:	f000 fc50 	bl	8005160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
	...

0800491c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b01      	cmp	r3, #1
 800492e:	d001      	beq.n	8004934 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e03c      	b.n	80049ae <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1e      	ldr	r2, [pc, #120]	; (80049bc <HAL_TIM_Base_Start+0xa0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d018      	beq.n	8004978 <HAL_TIM_Base_Start+0x5c>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494e:	d013      	beq.n	8004978 <HAL_TIM_Base_Start+0x5c>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a1a      	ldr	r2, [pc, #104]	; (80049c0 <HAL_TIM_Base_Start+0xa4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d00e      	beq.n	8004978 <HAL_TIM_Base_Start+0x5c>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a19      	ldr	r2, [pc, #100]	; (80049c4 <HAL_TIM_Base_Start+0xa8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d009      	beq.n	8004978 <HAL_TIM_Base_Start+0x5c>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a17      	ldr	r2, [pc, #92]	; (80049c8 <HAL_TIM_Base_Start+0xac>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d004      	beq.n	8004978 <HAL_TIM_Base_Start+0x5c>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a16      	ldr	r2, [pc, #88]	; (80049cc <HAL_TIM_Base_Start+0xb0>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d111      	bne.n	800499c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2b06      	cmp	r3, #6
 8004988:	d010      	beq.n	80049ac <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f042 0201 	orr.w	r2, r2, #1
 8004998:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800499a:	e007      	b.n	80049ac <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0201 	orr.w	r2, r2, #1
 80049aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	40010000 	.word	0x40010000
 80049c0:	40000400 	.word	0x40000400
 80049c4:	40000800 	.word	0x40000800
 80049c8:	40000c00 	.word	0x40000c00
 80049cc:	40014000 	.word	0x40014000

080049d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e041      	b.n	8004a66 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d106      	bne.n	80049fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f839 	bl	8004a6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4610      	mov	r0, r2
 8004a10:	f000 fba6 	bl	8005160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
	...

08004a84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d109      	bne.n	8004aa8 <HAL_TIM_PWM_Start+0x24>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	bf14      	ite	ne
 8004aa0:	2301      	movne	r3, #1
 8004aa2:	2300      	moveq	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	e022      	b.n	8004aee <HAL_TIM_PWM_Start+0x6a>
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d109      	bne.n	8004ac2 <HAL_TIM_PWM_Start+0x3e>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	bf14      	ite	ne
 8004aba:	2301      	movne	r3, #1
 8004abc:	2300      	moveq	r3, #0
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	e015      	b.n	8004aee <HAL_TIM_PWM_Start+0x6a>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d109      	bne.n	8004adc <HAL_TIM_PWM_Start+0x58>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	bf14      	ite	ne
 8004ad4:	2301      	movne	r3, #1
 8004ad6:	2300      	moveq	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	e008      	b.n	8004aee <HAL_TIM_PWM_Start+0x6a>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	bf14      	ite	ne
 8004ae8:	2301      	movne	r3, #1
 8004aea:	2300      	moveq	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e068      	b.n	8004bc8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d104      	bne.n	8004b06 <HAL_TIM_PWM_Start+0x82>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b04:	e013      	b.n	8004b2e <HAL_TIM_PWM_Start+0xaa>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b04      	cmp	r3, #4
 8004b0a:	d104      	bne.n	8004b16 <HAL_TIM_PWM_Start+0x92>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b14:	e00b      	b.n	8004b2e <HAL_TIM_PWM_Start+0xaa>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d104      	bne.n	8004b26 <HAL_TIM_PWM_Start+0xa2>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b24:	e003      	b.n	8004b2e <HAL_TIM_PWM_Start+0xaa>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2201      	movs	r2, #1
 8004b34:	6839      	ldr	r1, [r7, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fdb8 	bl	80056ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a23      	ldr	r2, [pc, #140]	; (8004bd0 <HAL_TIM_PWM_Start+0x14c>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d107      	bne.n	8004b56 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a1d      	ldr	r2, [pc, #116]	; (8004bd0 <HAL_TIM_PWM_Start+0x14c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d018      	beq.n	8004b92 <HAL_TIM_PWM_Start+0x10e>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b68:	d013      	beq.n	8004b92 <HAL_TIM_PWM_Start+0x10e>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a19      	ldr	r2, [pc, #100]	; (8004bd4 <HAL_TIM_PWM_Start+0x150>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d00e      	beq.n	8004b92 <HAL_TIM_PWM_Start+0x10e>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a17      	ldr	r2, [pc, #92]	; (8004bd8 <HAL_TIM_PWM_Start+0x154>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d009      	beq.n	8004b92 <HAL_TIM_PWM_Start+0x10e>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a16      	ldr	r2, [pc, #88]	; (8004bdc <HAL_TIM_PWM_Start+0x158>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d004      	beq.n	8004b92 <HAL_TIM_PWM_Start+0x10e>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a14      	ldr	r2, [pc, #80]	; (8004be0 <HAL_TIM_PWM_Start+0x15c>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d111      	bne.n	8004bb6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2b06      	cmp	r3, #6
 8004ba2:	d010      	beq.n	8004bc6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0201 	orr.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb4:	e007      	b.n	8004bc6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f042 0201 	orr.w	r2, r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40010000 	.word	0x40010000
 8004bd4:	40000400 	.word	0x40000400
 8004bd8:	40000800 	.word	0x40000800
 8004bdc:	40000c00 	.word	0x40000c00
 8004be0:	40014000 	.word	0x40014000

08004be4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e097      	b.n	8004d28 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d106      	bne.n	8004c12 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7fd fd3b 	bl	8002688 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2202      	movs	r2, #2
 8004c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6812      	ldr	r2, [r2, #0]
 8004c24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c28:	f023 0307 	bic.w	r3, r3, #7
 8004c2c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	3304      	adds	r3, #4
 8004c36:	4619      	mov	r1, r3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	f000 fa91 	bl	8005160 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c66:	f023 0303 	bic.w	r3, r3, #3
 8004c6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	021b      	lsls	r3, r3, #8
 8004c76:	4313      	orrs	r3, r2
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004c84:	f023 030c 	bic.w	r3, r3, #12
 8004c88:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	021b      	lsls	r3, r3, #8
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	011a      	lsls	r2, r3, #4
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	031b      	lsls	r3, r3, #12
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004cc2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004cca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3718      	adds	r7, #24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d40:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d48:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d50:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d58:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d110      	bne.n	8004d82 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d102      	bne.n	8004d6c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d66:	7b7b      	ldrb	r3, [r7, #13]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d001      	beq.n	8004d70 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e069      	b.n	8004e44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d80:	e031      	b.n	8004de6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d110      	bne.n	8004daa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d88:	7bbb      	ldrb	r3, [r7, #14]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d102      	bne.n	8004d94 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d8e:	7b3b      	ldrb	r3, [r7, #12]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d001      	beq.n	8004d98 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e055      	b.n	8004e44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004da8:	e01d      	b.n	8004de6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004daa:	7bfb      	ldrb	r3, [r7, #15]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d108      	bne.n	8004dc2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004db0:	7bbb      	ldrb	r3, [r7, #14]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d105      	bne.n	8004dc2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004db6:	7b7b      	ldrb	r3, [r7, #13]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d102      	bne.n	8004dc2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004dbc:	7b3b      	ldrb	r3, [r7, #12]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d001      	beq.n	8004dc6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e03e      	b.n	8004e44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2202      	movs	r2, #2
 8004dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2202      	movs	r2, #2
 8004de2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_TIM_Encoder_Start+0xc4>
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2b04      	cmp	r3, #4
 8004df0:	d008      	beq.n	8004e04 <HAL_TIM_Encoder_Start+0xd4>
 8004df2:	e00f      	b.n	8004e14 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fc55 	bl	80056ac <TIM_CCxChannelCmd>
      break;
 8004e02:	e016      	b.n	8004e32 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	2104      	movs	r1, #4
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 fc4d 	bl	80056ac <TIM_CCxChannelCmd>
      break;
 8004e12:	e00e      	b.n	8004e32 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fc45 	bl	80056ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2201      	movs	r2, #1
 8004e28:	2104      	movs	r1, #4
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fc3e 	bl	80056ac <TIM_CCxChannelCmd>
      break;
 8004e30:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f042 0201 	orr.w	r2, r2, #1
 8004e40:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d101      	bne.n	8004e6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e66:	2302      	movs	r3, #2
 8004e68:	e0ae      	b.n	8004fc8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b0c      	cmp	r3, #12
 8004e76:	f200 809f 	bhi.w	8004fb8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e7a:	a201      	add	r2, pc, #4	; (adr r2, 8004e80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e80:	08004eb5 	.word	0x08004eb5
 8004e84:	08004fb9 	.word	0x08004fb9
 8004e88:	08004fb9 	.word	0x08004fb9
 8004e8c:	08004fb9 	.word	0x08004fb9
 8004e90:	08004ef5 	.word	0x08004ef5
 8004e94:	08004fb9 	.word	0x08004fb9
 8004e98:	08004fb9 	.word	0x08004fb9
 8004e9c:	08004fb9 	.word	0x08004fb9
 8004ea0:	08004f37 	.word	0x08004f37
 8004ea4:	08004fb9 	.word	0x08004fb9
 8004ea8:	08004fb9 	.word	0x08004fb9
 8004eac:	08004fb9 	.word	0x08004fb9
 8004eb0:	08004f77 	.word	0x08004f77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68b9      	ldr	r1, [r7, #8]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 f9d0 	bl	8005260 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699a      	ldr	r2, [r3, #24]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0208 	orr.w	r2, r2, #8
 8004ece:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699a      	ldr	r2, [r3, #24]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 0204 	bic.w	r2, r2, #4
 8004ede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6999      	ldr	r1, [r3, #24]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	691a      	ldr	r2, [r3, #16]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	619a      	str	r2, [r3, #24]
      break;
 8004ef2:	e064      	b.n	8004fbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68b9      	ldr	r1, [r7, #8]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 fa16 	bl	800532c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	699a      	ldr	r2, [r3, #24]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699a      	ldr	r2, [r3, #24]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6999      	ldr	r1, [r3, #24]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	021a      	lsls	r2, r3, #8
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	619a      	str	r2, [r3, #24]
      break;
 8004f34:	e043      	b.n	8004fbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68b9      	ldr	r1, [r7, #8]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 fa61 	bl	8005404 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69da      	ldr	r2, [r3, #28]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 0208 	orr.w	r2, r2, #8
 8004f50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	69da      	ldr	r2, [r3, #28]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0204 	bic.w	r2, r2, #4
 8004f60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69d9      	ldr	r1, [r3, #28]
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	691a      	ldr	r2, [r3, #16]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	61da      	str	r2, [r3, #28]
      break;
 8004f74:	e023      	b.n	8004fbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 faab 	bl	80054d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69da      	ldr	r2, [r3, #28]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69da      	ldr	r2, [r3, #28]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69d9      	ldr	r1, [r3, #28]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	021a      	lsls	r2, r3, #8
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	61da      	str	r2, [r3, #28]
      break;
 8004fb6:	e002      	b.n	8004fbe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	75fb      	strb	r3, [r7, #23]
      break;
 8004fbc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d101      	bne.n	8004fec <HAL_TIM_ConfigClockSource+0x1c>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e0b4      	b.n	8005156 <HAL_TIM_ConfigClockSource+0x186>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800500a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005012:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005024:	d03e      	beq.n	80050a4 <HAL_TIM_ConfigClockSource+0xd4>
 8005026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800502a:	f200 8087 	bhi.w	800513c <HAL_TIM_ConfigClockSource+0x16c>
 800502e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005032:	f000 8086 	beq.w	8005142 <HAL_TIM_ConfigClockSource+0x172>
 8005036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503a:	d87f      	bhi.n	800513c <HAL_TIM_ConfigClockSource+0x16c>
 800503c:	2b70      	cmp	r3, #112	; 0x70
 800503e:	d01a      	beq.n	8005076 <HAL_TIM_ConfigClockSource+0xa6>
 8005040:	2b70      	cmp	r3, #112	; 0x70
 8005042:	d87b      	bhi.n	800513c <HAL_TIM_ConfigClockSource+0x16c>
 8005044:	2b60      	cmp	r3, #96	; 0x60
 8005046:	d050      	beq.n	80050ea <HAL_TIM_ConfigClockSource+0x11a>
 8005048:	2b60      	cmp	r3, #96	; 0x60
 800504a:	d877      	bhi.n	800513c <HAL_TIM_ConfigClockSource+0x16c>
 800504c:	2b50      	cmp	r3, #80	; 0x50
 800504e:	d03c      	beq.n	80050ca <HAL_TIM_ConfigClockSource+0xfa>
 8005050:	2b50      	cmp	r3, #80	; 0x50
 8005052:	d873      	bhi.n	800513c <HAL_TIM_ConfigClockSource+0x16c>
 8005054:	2b40      	cmp	r3, #64	; 0x40
 8005056:	d058      	beq.n	800510a <HAL_TIM_ConfigClockSource+0x13a>
 8005058:	2b40      	cmp	r3, #64	; 0x40
 800505a:	d86f      	bhi.n	800513c <HAL_TIM_ConfigClockSource+0x16c>
 800505c:	2b30      	cmp	r3, #48	; 0x30
 800505e:	d064      	beq.n	800512a <HAL_TIM_ConfigClockSource+0x15a>
 8005060:	2b30      	cmp	r3, #48	; 0x30
 8005062:	d86b      	bhi.n	800513c <HAL_TIM_ConfigClockSource+0x16c>
 8005064:	2b20      	cmp	r3, #32
 8005066:	d060      	beq.n	800512a <HAL_TIM_ConfigClockSource+0x15a>
 8005068:	2b20      	cmp	r3, #32
 800506a:	d867      	bhi.n	800513c <HAL_TIM_ConfigClockSource+0x16c>
 800506c:	2b00      	cmp	r3, #0
 800506e:	d05c      	beq.n	800512a <HAL_TIM_ConfigClockSource+0x15a>
 8005070:	2b10      	cmp	r3, #16
 8005072:	d05a      	beq.n	800512a <HAL_TIM_ConfigClockSource+0x15a>
 8005074:	e062      	b.n	800513c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6818      	ldr	r0, [r3, #0]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	6899      	ldr	r1, [r3, #8]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f000 faf1 	bl	800566c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005098:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	609a      	str	r2, [r3, #8]
      break;
 80050a2:	e04f      	b.n	8005144 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6818      	ldr	r0, [r3, #0]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	6899      	ldr	r1, [r3, #8]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f000 fada 	bl	800566c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050c6:	609a      	str	r2, [r3, #8]
      break;
 80050c8:	e03c      	b.n	8005144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6818      	ldr	r0, [r3, #0]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	6859      	ldr	r1, [r3, #4]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	461a      	mov	r2, r3
 80050d8:	f000 fa4e 	bl	8005578 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2150      	movs	r1, #80	; 0x50
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 faa7 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 80050e8:	e02c      	b.n	8005144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6818      	ldr	r0, [r3, #0]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	6859      	ldr	r1, [r3, #4]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	461a      	mov	r2, r3
 80050f8:	f000 fa6d 	bl	80055d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2160      	movs	r1, #96	; 0x60
 8005102:	4618      	mov	r0, r3
 8005104:	f000 fa97 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 8005108:	e01c      	b.n	8005144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6818      	ldr	r0, [r3, #0]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	6859      	ldr	r1, [r3, #4]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	461a      	mov	r2, r3
 8005118:	f000 fa2e 	bl	8005578 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2140      	movs	r1, #64	; 0x40
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fa87 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 8005128:	e00c      	b.n	8005144 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4619      	mov	r1, r3
 8005134:	4610      	mov	r0, r2
 8005136:	f000 fa7e 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 800513a:	e003      	b.n	8005144 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	73fb      	strb	r3, [r7, #15]
      break;
 8005140:	e000      	b.n	8005144 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005142:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005154:	7bfb      	ldrb	r3, [r7, #15]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a34      	ldr	r2, [pc, #208]	; (8005244 <TIM_Base_SetConfig+0xe4>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d00f      	beq.n	8005198 <TIM_Base_SetConfig+0x38>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517e:	d00b      	beq.n	8005198 <TIM_Base_SetConfig+0x38>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a31      	ldr	r2, [pc, #196]	; (8005248 <TIM_Base_SetConfig+0xe8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d007      	beq.n	8005198 <TIM_Base_SetConfig+0x38>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a30      	ldr	r2, [pc, #192]	; (800524c <TIM_Base_SetConfig+0xec>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d003      	beq.n	8005198 <TIM_Base_SetConfig+0x38>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a2f      	ldr	r2, [pc, #188]	; (8005250 <TIM_Base_SetConfig+0xf0>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d108      	bne.n	80051aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a25      	ldr	r2, [pc, #148]	; (8005244 <TIM_Base_SetConfig+0xe4>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d01b      	beq.n	80051ea <TIM_Base_SetConfig+0x8a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b8:	d017      	beq.n	80051ea <TIM_Base_SetConfig+0x8a>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a22      	ldr	r2, [pc, #136]	; (8005248 <TIM_Base_SetConfig+0xe8>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d013      	beq.n	80051ea <TIM_Base_SetConfig+0x8a>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a21      	ldr	r2, [pc, #132]	; (800524c <TIM_Base_SetConfig+0xec>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00f      	beq.n	80051ea <TIM_Base_SetConfig+0x8a>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a20      	ldr	r2, [pc, #128]	; (8005250 <TIM_Base_SetConfig+0xf0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d00b      	beq.n	80051ea <TIM_Base_SetConfig+0x8a>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a1f      	ldr	r2, [pc, #124]	; (8005254 <TIM_Base_SetConfig+0xf4>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d007      	beq.n	80051ea <TIM_Base_SetConfig+0x8a>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a1e      	ldr	r2, [pc, #120]	; (8005258 <TIM_Base_SetConfig+0xf8>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d003      	beq.n	80051ea <TIM_Base_SetConfig+0x8a>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a1d      	ldr	r2, [pc, #116]	; (800525c <TIM_Base_SetConfig+0xfc>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d108      	bne.n	80051fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a08      	ldr	r2, [pc, #32]	; (8005244 <TIM_Base_SetConfig+0xe4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d103      	bne.n	8005230 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	691a      	ldr	r2, [r3, #16]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	615a      	str	r2, [r3, #20]
}
 8005236:	bf00      	nop
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	40010000 	.word	0x40010000
 8005248:	40000400 	.word	0x40000400
 800524c:	40000800 	.word	0x40000800
 8005250:	40000c00 	.word	0x40000c00
 8005254:	40014000 	.word	0x40014000
 8005258:	40014400 	.word	0x40014400
 800525c:	40014800 	.word	0x40014800

08005260 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	f023 0201 	bic.w	r2, r3, #1
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0303 	bic.w	r3, r3, #3
 8005296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f023 0302 	bic.w	r3, r3, #2
 80052a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a1c      	ldr	r2, [pc, #112]	; (8005328 <TIM_OC1_SetConfig+0xc8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d10c      	bne.n	80052d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f023 0308 	bic.w	r3, r3, #8
 80052c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f023 0304 	bic.w	r3, r3, #4
 80052d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a13      	ldr	r2, [pc, #76]	; (8005328 <TIM_OC1_SetConfig+0xc8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d111      	bne.n	8005302 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	4313      	orrs	r3, r2
 8005300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	621a      	str	r2, [r3, #32]
}
 800531c:	bf00      	nop
 800531e:	371c      	adds	r7, #28
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	40010000 	.word	0x40010000

0800532c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	f023 0210 	bic.w	r2, r3, #16
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800535a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	021b      	lsls	r3, r3, #8
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f023 0320 	bic.w	r3, r3, #32
 8005376:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a1e      	ldr	r2, [pc, #120]	; (8005400 <TIM_OC2_SetConfig+0xd4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d10d      	bne.n	80053a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	011b      	lsls	r3, r3, #4
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	4313      	orrs	r3, r2
 800539e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a15      	ldr	r2, [pc, #84]	; (8005400 <TIM_OC2_SetConfig+0xd4>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d113      	bne.n	80053d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	621a      	str	r2, [r3, #32]
}
 80053f2:	bf00      	nop
 80053f4:	371c      	adds	r7, #28
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40010000 	.word	0x40010000

08005404 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005404:	b480      	push	{r7}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0303 	bic.w	r3, r3, #3
 800543a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800544c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	021b      	lsls	r3, r3, #8
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	4313      	orrs	r3, r2
 8005458:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a1d      	ldr	r2, [pc, #116]	; (80054d4 <TIM_OC3_SetConfig+0xd0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d10d      	bne.n	800547e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005468:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	021b      	lsls	r3, r3, #8
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	4313      	orrs	r3, r2
 8005474:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800547c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a14      	ldr	r2, [pc, #80]	; (80054d4 <TIM_OC3_SetConfig+0xd0>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d113      	bne.n	80054ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800548c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	4313      	orrs	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	621a      	str	r2, [r3, #32]
}
 80054c8:	bf00      	nop
 80054ca:	371c      	adds	r7, #28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	40010000 	.word	0x40010000

080054d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800550e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	021b      	lsls	r3, r3, #8
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4313      	orrs	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	031b      	lsls	r3, r3, #12
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a10      	ldr	r2, [pc, #64]	; (8005574 <TIM_OC4_SetConfig+0x9c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d109      	bne.n	800554c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800553e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	019b      	lsls	r3, r3, #6
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	621a      	str	r2, [r3, #32]
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40010000 	.word	0x40010000

08005578 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f023 0201 	bic.w	r2, r3, #1
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f023 030a 	bic.w	r3, r3, #10
 80055b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	621a      	str	r2, [r3, #32]
}
 80055ca:	bf00      	nop
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b087      	sub	sp, #28
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	f023 0210 	bic.w	r2, r3, #16
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005600:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	031b      	lsls	r3, r3, #12
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	4313      	orrs	r3, r2
 800560a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005612:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	4313      	orrs	r3, r2
 800561c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	621a      	str	r2, [r3, #32]
}
 800562a:	bf00      	nop
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005636:	b480      	push	{r7}
 8005638:	b085      	sub	sp, #20
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	f043 0307 	orr.w	r3, r3, #7
 8005658:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	609a      	str	r2, [r3, #8]
}
 8005660:	bf00      	nop
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005686:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	021a      	lsls	r2, r3, #8
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	431a      	orrs	r2, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	4313      	orrs	r3, r2
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	4313      	orrs	r3, r2
 8005698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	609a      	str	r2, [r3, #8]
}
 80056a0:	bf00      	nop
 80056a2:	371c      	adds	r7, #28
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f003 031f 	and.w	r3, r3, #31
 80056be:	2201      	movs	r2, #1
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a1a      	ldr	r2, [r3, #32]
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	43db      	mvns	r3, r3
 80056ce:	401a      	ands	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a1a      	ldr	r2, [r3, #32]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f003 031f 	and.w	r3, r3, #31
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	fa01 f303 	lsl.w	r3, r1, r3
 80056e4:	431a      	orrs	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	621a      	str	r2, [r3, #32]
}
 80056ea:	bf00      	nop
 80056ec:	371c      	adds	r7, #28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
	...

080056f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800570c:	2302      	movs	r3, #2
 800570e:	e050      	b.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005736:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a1c      	ldr	r2, [pc, #112]	; (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d018      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575c:	d013      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a18      	ldr	r2, [pc, #96]	; (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00e      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a16      	ldr	r2, [pc, #88]	; (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d009      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a15      	ldr	r2, [pc, #84]	; (80057cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d004      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a13      	ldr	r2, [pc, #76]	; (80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d10c      	bne.n	80057a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800578c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	4313      	orrs	r3, r2
 8005796:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	40010000 	.word	0x40010000
 80057c4:	40000400 	.word	0x40000400
 80057c8:	40000800 	.word	0x40000800
 80057cc:	40000c00 	.word	0x40000c00
 80057d0:	40014000 	.word	0x40014000

080057d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e03f      	b.n	8005866 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d106      	bne.n	8005800 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7fc fffc 	bl	80027f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2224      	movs	r2, #36	; 0x24
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005816:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f829 	bl	8005870 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691a      	ldr	r2, [r3, #16]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800582c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	695a      	ldr	r2, [r3, #20]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800583c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68da      	ldr	r2, [r3, #12]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800584c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2220      	movs	r2, #32
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
	...

08005870 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005874:	b0c0      	sub	sp, #256	; 0x100
 8005876:	af00      	add	r7, sp, #0
 8005878:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800587c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588c:	68d9      	ldr	r1, [r3, #12]
 800588e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	ea40 0301 	orr.w	r3, r0, r1
 8005898:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800589a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	431a      	orrs	r2, r3
 80058a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	431a      	orrs	r2, r3
 80058b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80058c8:	f021 010c 	bic.w	r1, r1, #12
 80058cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80058d6:	430b      	orrs	r3, r1
 80058d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80058e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ea:	6999      	ldr	r1, [r3, #24]
 80058ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	ea40 0301 	orr.w	r3, r0, r1
 80058f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	4b8f      	ldr	r3, [pc, #572]	; (8005b3c <UART_SetConfig+0x2cc>)
 8005900:	429a      	cmp	r2, r3
 8005902:	d005      	beq.n	8005910 <UART_SetConfig+0xa0>
 8005904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	4b8d      	ldr	r3, [pc, #564]	; (8005b40 <UART_SetConfig+0x2d0>)
 800590c:	429a      	cmp	r2, r3
 800590e:	d104      	bne.n	800591a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005910:	f7fe ffa0 	bl	8004854 <HAL_RCC_GetPCLK2Freq>
 8005914:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005918:	e003      	b.n	8005922 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800591a:	f7fe ff87 	bl	800482c <HAL_RCC_GetPCLK1Freq>
 800591e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800592c:	f040 810c 	bne.w	8005b48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005930:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005934:	2200      	movs	r2, #0
 8005936:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800593a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800593e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005942:	4622      	mov	r2, r4
 8005944:	462b      	mov	r3, r5
 8005946:	1891      	adds	r1, r2, r2
 8005948:	65b9      	str	r1, [r7, #88]	; 0x58
 800594a:	415b      	adcs	r3, r3
 800594c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800594e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005952:	4621      	mov	r1, r4
 8005954:	eb12 0801 	adds.w	r8, r2, r1
 8005958:	4629      	mov	r1, r5
 800595a:	eb43 0901 	adc.w	r9, r3, r1
 800595e:	f04f 0200 	mov.w	r2, #0
 8005962:	f04f 0300 	mov.w	r3, #0
 8005966:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800596a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800596e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005972:	4690      	mov	r8, r2
 8005974:	4699      	mov	r9, r3
 8005976:	4623      	mov	r3, r4
 8005978:	eb18 0303 	adds.w	r3, r8, r3
 800597c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005980:	462b      	mov	r3, r5
 8005982:	eb49 0303 	adc.w	r3, r9, r3
 8005986:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800598a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005996:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800599a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800599e:	460b      	mov	r3, r1
 80059a0:	18db      	adds	r3, r3, r3
 80059a2:	653b      	str	r3, [r7, #80]	; 0x50
 80059a4:	4613      	mov	r3, r2
 80059a6:	eb42 0303 	adc.w	r3, r2, r3
 80059aa:	657b      	str	r3, [r7, #84]	; 0x54
 80059ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80059b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80059b4:	f7fb f8f4 	bl	8000ba0 <__aeabi_uldivmod>
 80059b8:	4602      	mov	r2, r0
 80059ba:	460b      	mov	r3, r1
 80059bc:	4b61      	ldr	r3, [pc, #388]	; (8005b44 <UART_SetConfig+0x2d4>)
 80059be:	fba3 2302 	umull	r2, r3, r3, r2
 80059c2:	095b      	lsrs	r3, r3, #5
 80059c4:	011c      	lsls	r4, r3, #4
 80059c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059ca:	2200      	movs	r2, #0
 80059cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80059d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80059d8:	4642      	mov	r2, r8
 80059da:	464b      	mov	r3, r9
 80059dc:	1891      	adds	r1, r2, r2
 80059de:	64b9      	str	r1, [r7, #72]	; 0x48
 80059e0:	415b      	adcs	r3, r3
 80059e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80059e8:	4641      	mov	r1, r8
 80059ea:	eb12 0a01 	adds.w	sl, r2, r1
 80059ee:	4649      	mov	r1, r9
 80059f0:	eb43 0b01 	adc.w	fp, r3, r1
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	f04f 0300 	mov.w	r3, #0
 80059fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a08:	4692      	mov	sl, r2
 8005a0a:	469b      	mov	fp, r3
 8005a0c:	4643      	mov	r3, r8
 8005a0e:	eb1a 0303 	adds.w	r3, sl, r3
 8005a12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a16:	464b      	mov	r3, r9
 8005a18:	eb4b 0303 	adc.w	r3, fp, r3
 8005a1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a34:	460b      	mov	r3, r1
 8005a36:	18db      	adds	r3, r3, r3
 8005a38:	643b      	str	r3, [r7, #64]	; 0x40
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	eb42 0303 	adc.w	r3, r2, r3
 8005a40:	647b      	str	r3, [r7, #68]	; 0x44
 8005a42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a4a:	f7fb f8a9 	bl	8000ba0 <__aeabi_uldivmod>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	460b      	mov	r3, r1
 8005a52:	4611      	mov	r1, r2
 8005a54:	4b3b      	ldr	r3, [pc, #236]	; (8005b44 <UART_SetConfig+0x2d4>)
 8005a56:	fba3 2301 	umull	r2, r3, r3, r1
 8005a5a:	095b      	lsrs	r3, r3, #5
 8005a5c:	2264      	movs	r2, #100	; 0x64
 8005a5e:	fb02 f303 	mul.w	r3, r2, r3
 8005a62:	1acb      	subs	r3, r1, r3
 8005a64:	00db      	lsls	r3, r3, #3
 8005a66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a6a:	4b36      	ldr	r3, [pc, #216]	; (8005b44 <UART_SetConfig+0x2d4>)
 8005a6c:	fba3 2302 	umull	r2, r3, r3, r2
 8005a70:	095b      	lsrs	r3, r3, #5
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a78:	441c      	add	r4, r3
 8005a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a8c:	4642      	mov	r2, r8
 8005a8e:	464b      	mov	r3, r9
 8005a90:	1891      	adds	r1, r2, r2
 8005a92:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a94:	415b      	adcs	r3, r3
 8005a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a9c:	4641      	mov	r1, r8
 8005a9e:	1851      	adds	r1, r2, r1
 8005aa0:	6339      	str	r1, [r7, #48]	; 0x30
 8005aa2:	4649      	mov	r1, r9
 8005aa4:	414b      	adcs	r3, r1
 8005aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8005aa8:	f04f 0200 	mov.w	r2, #0
 8005aac:	f04f 0300 	mov.w	r3, #0
 8005ab0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ab4:	4659      	mov	r1, fp
 8005ab6:	00cb      	lsls	r3, r1, #3
 8005ab8:	4651      	mov	r1, sl
 8005aba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005abe:	4651      	mov	r1, sl
 8005ac0:	00ca      	lsls	r2, r1, #3
 8005ac2:	4610      	mov	r0, r2
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	4642      	mov	r2, r8
 8005aca:	189b      	adds	r3, r3, r2
 8005acc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ad0:	464b      	mov	r3, r9
 8005ad2:	460a      	mov	r2, r1
 8005ad4:	eb42 0303 	adc.w	r3, r2, r3
 8005ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ae8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005aec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005af0:	460b      	mov	r3, r1
 8005af2:	18db      	adds	r3, r3, r3
 8005af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005af6:	4613      	mov	r3, r2
 8005af8:	eb42 0303 	adc.w	r3, r2, r3
 8005afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005afe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b06:	f7fb f84b 	bl	8000ba0 <__aeabi_uldivmod>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4b0d      	ldr	r3, [pc, #52]	; (8005b44 <UART_SetConfig+0x2d4>)
 8005b10:	fba3 1302 	umull	r1, r3, r3, r2
 8005b14:	095b      	lsrs	r3, r3, #5
 8005b16:	2164      	movs	r1, #100	; 0x64
 8005b18:	fb01 f303 	mul.w	r3, r1, r3
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	3332      	adds	r3, #50	; 0x32
 8005b22:	4a08      	ldr	r2, [pc, #32]	; (8005b44 <UART_SetConfig+0x2d4>)
 8005b24:	fba2 2303 	umull	r2, r3, r2, r3
 8005b28:	095b      	lsrs	r3, r3, #5
 8005b2a:	f003 0207 	and.w	r2, r3, #7
 8005b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4422      	add	r2, r4
 8005b36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b38:	e105      	b.n	8005d46 <UART_SetConfig+0x4d6>
 8005b3a:	bf00      	nop
 8005b3c:	40011000 	.word	0x40011000
 8005b40:	40011400 	.word	0x40011400
 8005b44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b5a:	4642      	mov	r2, r8
 8005b5c:	464b      	mov	r3, r9
 8005b5e:	1891      	adds	r1, r2, r2
 8005b60:	6239      	str	r1, [r7, #32]
 8005b62:	415b      	adcs	r3, r3
 8005b64:	627b      	str	r3, [r7, #36]	; 0x24
 8005b66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b6a:	4641      	mov	r1, r8
 8005b6c:	1854      	adds	r4, r2, r1
 8005b6e:	4649      	mov	r1, r9
 8005b70:	eb43 0501 	adc.w	r5, r3, r1
 8005b74:	f04f 0200 	mov.w	r2, #0
 8005b78:	f04f 0300 	mov.w	r3, #0
 8005b7c:	00eb      	lsls	r3, r5, #3
 8005b7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b82:	00e2      	lsls	r2, r4, #3
 8005b84:	4614      	mov	r4, r2
 8005b86:	461d      	mov	r5, r3
 8005b88:	4643      	mov	r3, r8
 8005b8a:	18e3      	adds	r3, r4, r3
 8005b8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b90:	464b      	mov	r3, r9
 8005b92:	eb45 0303 	adc.w	r3, r5, r3
 8005b96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ba6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005baa:	f04f 0200 	mov.w	r2, #0
 8005bae:	f04f 0300 	mov.w	r3, #0
 8005bb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005bb6:	4629      	mov	r1, r5
 8005bb8:	008b      	lsls	r3, r1, #2
 8005bba:	4621      	mov	r1, r4
 8005bbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bc0:	4621      	mov	r1, r4
 8005bc2:	008a      	lsls	r2, r1, #2
 8005bc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005bc8:	f7fa ffea 	bl	8000ba0 <__aeabi_uldivmod>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4b60      	ldr	r3, [pc, #384]	; (8005d54 <UART_SetConfig+0x4e4>)
 8005bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	011c      	lsls	r4, r3, #4
 8005bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bde:	2200      	movs	r2, #0
 8005be0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005be4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005be8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005bec:	4642      	mov	r2, r8
 8005bee:	464b      	mov	r3, r9
 8005bf0:	1891      	adds	r1, r2, r2
 8005bf2:	61b9      	str	r1, [r7, #24]
 8005bf4:	415b      	adcs	r3, r3
 8005bf6:	61fb      	str	r3, [r7, #28]
 8005bf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bfc:	4641      	mov	r1, r8
 8005bfe:	1851      	adds	r1, r2, r1
 8005c00:	6139      	str	r1, [r7, #16]
 8005c02:	4649      	mov	r1, r9
 8005c04:	414b      	adcs	r3, r1
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c14:	4659      	mov	r1, fp
 8005c16:	00cb      	lsls	r3, r1, #3
 8005c18:	4651      	mov	r1, sl
 8005c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c1e:	4651      	mov	r1, sl
 8005c20:	00ca      	lsls	r2, r1, #3
 8005c22:	4610      	mov	r0, r2
 8005c24:	4619      	mov	r1, r3
 8005c26:	4603      	mov	r3, r0
 8005c28:	4642      	mov	r2, r8
 8005c2a:	189b      	adds	r3, r3, r2
 8005c2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c30:	464b      	mov	r3, r9
 8005c32:	460a      	mov	r2, r1
 8005c34:	eb42 0303 	adc.w	r3, r2, r3
 8005c38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c48:	f04f 0200 	mov.w	r2, #0
 8005c4c:	f04f 0300 	mov.w	r3, #0
 8005c50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c54:	4649      	mov	r1, r9
 8005c56:	008b      	lsls	r3, r1, #2
 8005c58:	4641      	mov	r1, r8
 8005c5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c5e:	4641      	mov	r1, r8
 8005c60:	008a      	lsls	r2, r1, #2
 8005c62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c66:	f7fa ff9b 	bl	8000ba0 <__aeabi_uldivmod>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	4b39      	ldr	r3, [pc, #228]	; (8005d54 <UART_SetConfig+0x4e4>)
 8005c70:	fba3 1302 	umull	r1, r3, r3, r2
 8005c74:	095b      	lsrs	r3, r3, #5
 8005c76:	2164      	movs	r1, #100	; 0x64
 8005c78:	fb01 f303 	mul.w	r3, r1, r3
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	011b      	lsls	r3, r3, #4
 8005c80:	3332      	adds	r3, #50	; 0x32
 8005c82:	4a34      	ldr	r2, [pc, #208]	; (8005d54 <UART_SetConfig+0x4e4>)
 8005c84:	fba2 2303 	umull	r2, r3, r2, r3
 8005c88:	095b      	lsrs	r3, r3, #5
 8005c8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c8e:	441c      	add	r4, r3
 8005c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c94:	2200      	movs	r2, #0
 8005c96:	673b      	str	r3, [r7, #112]	; 0x70
 8005c98:	677a      	str	r2, [r7, #116]	; 0x74
 8005c9a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c9e:	4642      	mov	r2, r8
 8005ca0:	464b      	mov	r3, r9
 8005ca2:	1891      	adds	r1, r2, r2
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	415b      	adcs	r3, r3
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cae:	4641      	mov	r1, r8
 8005cb0:	1851      	adds	r1, r2, r1
 8005cb2:	6039      	str	r1, [r7, #0]
 8005cb4:	4649      	mov	r1, r9
 8005cb6:	414b      	adcs	r3, r1
 8005cb8:	607b      	str	r3, [r7, #4]
 8005cba:	f04f 0200 	mov.w	r2, #0
 8005cbe:	f04f 0300 	mov.w	r3, #0
 8005cc2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cc6:	4659      	mov	r1, fp
 8005cc8:	00cb      	lsls	r3, r1, #3
 8005cca:	4651      	mov	r1, sl
 8005ccc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cd0:	4651      	mov	r1, sl
 8005cd2:	00ca      	lsls	r2, r1, #3
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	4603      	mov	r3, r0
 8005cda:	4642      	mov	r2, r8
 8005cdc:	189b      	adds	r3, r3, r2
 8005cde:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ce0:	464b      	mov	r3, r9
 8005ce2:	460a      	mov	r2, r1
 8005ce4:	eb42 0303 	adc.w	r3, r2, r3
 8005ce8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	663b      	str	r3, [r7, #96]	; 0x60
 8005cf4:	667a      	str	r2, [r7, #100]	; 0x64
 8005cf6:	f04f 0200 	mov.w	r2, #0
 8005cfa:	f04f 0300 	mov.w	r3, #0
 8005cfe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d02:	4649      	mov	r1, r9
 8005d04:	008b      	lsls	r3, r1, #2
 8005d06:	4641      	mov	r1, r8
 8005d08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d0c:	4641      	mov	r1, r8
 8005d0e:	008a      	lsls	r2, r1, #2
 8005d10:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d14:	f7fa ff44 	bl	8000ba0 <__aeabi_uldivmod>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4b0d      	ldr	r3, [pc, #52]	; (8005d54 <UART_SetConfig+0x4e4>)
 8005d1e:	fba3 1302 	umull	r1, r3, r3, r2
 8005d22:	095b      	lsrs	r3, r3, #5
 8005d24:	2164      	movs	r1, #100	; 0x64
 8005d26:	fb01 f303 	mul.w	r3, r1, r3
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	3332      	adds	r3, #50	; 0x32
 8005d30:	4a08      	ldr	r2, [pc, #32]	; (8005d54 <UART_SetConfig+0x4e4>)
 8005d32:	fba2 2303 	umull	r2, r3, r2, r3
 8005d36:	095b      	lsrs	r3, r3, #5
 8005d38:	f003 020f 	and.w	r2, r3, #15
 8005d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4422      	add	r2, r4
 8005d44:	609a      	str	r2, [r3, #8]
}
 8005d46:	bf00      	nop
 8005d48:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d52:	bf00      	nop
 8005d54:	51eb851f 	.word	0x51eb851f

08005d58 <calloc>:
 8005d58:	4b02      	ldr	r3, [pc, #8]	; (8005d64 <calloc+0xc>)
 8005d5a:	460a      	mov	r2, r1
 8005d5c:	4601      	mov	r1, r0
 8005d5e:	6818      	ldr	r0, [r3, #0]
 8005d60:	f000 b852 	b.w	8005e08 <_calloc_r>
 8005d64:	2000001c 	.word	0x2000001c

08005d68 <__errno>:
 8005d68:	4b01      	ldr	r3, [pc, #4]	; (8005d70 <__errno+0x8>)
 8005d6a:	6818      	ldr	r0, [r3, #0]
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	2000001c 	.word	0x2000001c

08005d74 <__libc_init_array>:
 8005d74:	b570      	push	{r4, r5, r6, lr}
 8005d76:	4d0d      	ldr	r5, [pc, #52]	; (8005dac <__libc_init_array+0x38>)
 8005d78:	4c0d      	ldr	r4, [pc, #52]	; (8005db0 <__libc_init_array+0x3c>)
 8005d7a:	1b64      	subs	r4, r4, r5
 8005d7c:	10a4      	asrs	r4, r4, #2
 8005d7e:	2600      	movs	r6, #0
 8005d80:	42a6      	cmp	r6, r4
 8005d82:	d109      	bne.n	8005d98 <__libc_init_array+0x24>
 8005d84:	4d0b      	ldr	r5, [pc, #44]	; (8005db4 <__libc_init_array+0x40>)
 8005d86:	4c0c      	ldr	r4, [pc, #48]	; (8005db8 <__libc_init_array+0x44>)
 8005d88:	f001 f918 	bl	8006fbc <_init>
 8005d8c:	1b64      	subs	r4, r4, r5
 8005d8e:	10a4      	asrs	r4, r4, #2
 8005d90:	2600      	movs	r6, #0
 8005d92:	42a6      	cmp	r6, r4
 8005d94:	d105      	bne.n	8005da2 <__libc_init_array+0x2e>
 8005d96:	bd70      	pop	{r4, r5, r6, pc}
 8005d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d9c:	4798      	blx	r3
 8005d9e:	3601      	adds	r6, #1
 8005da0:	e7ee      	b.n	8005d80 <__libc_init_array+0xc>
 8005da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da6:	4798      	blx	r3
 8005da8:	3601      	adds	r6, #1
 8005daa:	e7f2      	b.n	8005d92 <__libc_init_array+0x1e>
 8005dac:	08007030 	.word	0x08007030
 8005db0:	08007030 	.word	0x08007030
 8005db4:	08007030 	.word	0x08007030
 8005db8:	08007034 	.word	0x08007034

08005dbc <malloc>:
 8005dbc:	4b02      	ldr	r3, [pc, #8]	; (8005dc8 <malloc+0xc>)
 8005dbe:	4601      	mov	r1, r0
 8005dc0:	6818      	ldr	r0, [r3, #0]
 8005dc2:	f000 b8a3 	b.w	8005f0c <_malloc_r>
 8005dc6:	bf00      	nop
 8005dc8:	2000001c 	.word	0x2000001c

08005dcc <free>:
 8005dcc:	4b02      	ldr	r3, [pc, #8]	; (8005dd8 <free+0xc>)
 8005dce:	4601      	mov	r1, r0
 8005dd0:	6818      	ldr	r0, [r3, #0]
 8005dd2:	f000 b82f 	b.w	8005e34 <_free_r>
 8005dd6:	bf00      	nop
 8005dd8:	2000001c 	.word	0x2000001c

08005ddc <memcpy>:
 8005ddc:	440a      	add	r2, r1
 8005dde:	4291      	cmp	r1, r2
 8005de0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005de4:	d100      	bne.n	8005de8 <memcpy+0xc>
 8005de6:	4770      	bx	lr
 8005de8:	b510      	push	{r4, lr}
 8005dea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005df2:	4291      	cmp	r1, r2
 8005df4:	d1f9      	bne.n	8005dea <memcpy+0xe>
 8005df6:	bd10      	pop	{r4, pc}

08005df8 <memset>:
 8005df8:	4402      	add	r2, r0
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d100      	bne.n	8005e02 <memset+0xa>
 8005e00:	4770      	bx	lr
 8005e02:	f803 1b01 	strb.w	r1, [r3], #1
 8005e06:	e7f9      	b.n	8005dfc <memset+0x4>

08005e08 <_calloc_r>:
 8005e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e0a:	fba1 2402 	umull	r2, r4, r1, r2
 8005e0e:	b94c      	cbnz	r4, 8005e24 <_calloc_r+0x1c>
 8005e10:	4611      	mov	r1, r2
 8005e12:	9201      	str	r2, [sp, #4]
 8005e14:	f000 f87a 	bl	8005f0c <_malloc_r>
 8005e18:	9a01      	ldr	r2, [sp, #4]
 8005e1a:	4605      	mov	r5, r0
 8005e1c:	b930      	cbnz	r0, 8005e2c <_calloc_r+0x24>
 8005e1e:	4628      	mov	r0, r5
 8005e20:	b003      	add	sp, #12
 8005e22:	bd30      	pop	{r4, r5, pc}
 8005e24:	220c      	movs	r2, #12
 8005e26:	6002      	str	r2, [r0, #0]
 8005e28:	2500      	movs	r5, #0
 8005e2a:	e7f8      	b.n	8005e1e <_calloc_r+0x16>
 8005e2c:	4621      	mov	r1, r4
 8005e2e:	f7ff ffe3 	bl	8005df8 <memset>
 8005e32:	e7f4      	b.n	8005e1e <_calloc_r+0x16>

08005e34 <_free_r>:
 8005e34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e36:	2900      	cmp	r1, #0
 8005e38:	d044      	beq.n	8005ec4 <_free_r+0x90>
 8005e3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e3e:	9001      	str	r0, [sp, #4]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f1a1 0404 	sub.w	r4, r1, #4
 8005e46:	bfb8      	it	lt
 8005e48:	18e4      	addlt	r4, r4, r3
 8005e4a:	f000 f8e3 	bl	8006014 <__malloc_lock>
 8005e4e:	4a1e      	ldr	r2, [pc, #120]	; (8005ec8 <_free_r+0x94>)
 8005e50:	9801      	ldr	r0, [sp, #4]
 8005e52:	6813      	ldr	r3, [r2, #0]
 8005e54:	b933      	cbnz	r3, 8005e64 <_free_r+0x30>
 8005e56:	6063      	str	r3, [r4, #4]
 8005e58:	6014      	str	r4, [r2, #0]
 8005e5a:	b003      	add	sp, #12
 8005e5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e60:	f000 b8de 	b.w	8006020 <__malloc_unlock>
 8005e64:	42a3      	cmp	r3, r4
 8005e66:	d908      	bls.n	8005e7a <_free_r+0x46>
 8005e68:	6825      	ldr	r5, [r4, #0]
 8005e6a:	1961      	adds	r1, r4, r5
 8005e6c:	428b      	cmp	r3, r1
 8005e6e:	bf01      	itttt	eq
 8005e70:	6819      	ldreq	r1, [r3, #0]
 8005e72:	685b      	ldreq	r3, [r3, #4]
 8005e74:	1949      	addeq	r1, r1, r5
 8005e76:	6021      	streq	r1, [r4, #0]
 8005e78:	e7ed      	b.n	8005e56 <_free_r+0x22>
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	b10b      	cbz	r3, 8005e84 <_free_r+0x50>
 8005e80:	42a3      	cmp	r3, r4
 8005e82:	d9fa      	bls.n	8005e7a <_free_r+0x46>
 8005e84:	6811      	ldr	r1, [r2, #0]
 8005e86:	1855      	adds	r5, r2, r1
 8005e88:	42a5      	cmp	r5, r4
 8005e8a:	d10b      	bne.n	8005ea4 <_free_r+0x70>
 8005e8c:	6824      	ldr	r4, [r4, #0]
 8005e8e:	4421      	add	r1, r4
 8005e90:	1854      	adds	r4, r2, r1
 8005e92:	42a3      	cmp	r3, r4
 8005e94:	6011      	str	r1, [r2, #0]
 8005e96:	d1e0      	bne.n	8005e5a <_free_r+0x26>
 8005e98:	681c      	ldr	r4, [r3, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	6053      	str	r3, [r2, #4]
 8005e9e:	4421      	add	r1, r4
 8005ea0:	6011      	str	r1, [r2, #0]
 8005ea2:	e7da      	b.n	8005e5a <_free_r+0x26>
 8005ea4:	d902      	bls.n	8005eac <_free_r+0x78>
 8005ea6:	230c      	movs	r3, #12
 8005ea8:	6003      	str	r3, [r0, #0]
 8005eaa:	e7d6      	b.n	8005e5a <_free_r+0x26>
 8005eac:	6825      	ldr	r5, [r4, #0]
 8005eae:	1961      	adds	r1, r4, r5
 8005eb0:	428b      	cmp	r3, r1
 8005eb2:	bf04      	itt	eq
 8005eb4:	6819      	ldreq	r1, [r3, #0]
 8005eb6:	685b      	ldreq	r3, [r3, #4]
 8005eb8:	6063      	str	r3, [r4, #4]
 8005eba:	bf04      	itt	eq
 8005ebc:	1949      	addeq	r1, r1, r5
 8005ebe:	6021      	streq	r1, [r4, #0]
 8005ec0:	6054      	str	r4, [r2, #4]
 8005ec2:	e7ca      	b.n	8005e5a <_free_r+0x26>
 8005ec4:	b003      	add	sp, #12
 8005ec6:	bd30      	pop	{r4, r5, pc}
 8005ec8:	200002c8 	.word	0x200002c8

08005ecc <sbrk_aligned>:
 8005ecc:	b570      	push	{r4, r5, r6, lr}
 8005ece:	4e0e      	ldr	r6, [pc, #56]	; (8005f08 <sbrk_aligned+0x3c>)
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	6831      	ldr	r1, [r6, #0]
 8005ed4:	4605      	mov	r5, r0
 8005ed6:	b911      	cbnz	r1, 8005ede <sbrk_aligned+0x12>
 8005ed8:	f000 f88c 	bl	8005ff4 <_sbrk_r>
 8005edc:	6030      	str	r0, [r6, #0]
 8005ede:	4621      	mov	r1, r4
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	f000 f887 	bl	8005ff4 <_sbrk_r>
 8005ee6:	1c43      	adds	r3, r0, #1
 8005ee8:	d00a      	beq.n	8005f00 <sbrk_aligned+0x34>
 8005eea:	1cc4      	adds	r4, r0, #3
 8005eec:	f024 0403 	bic.w	r4, r4, #3
 8005ef0:	42a0      	cmp	r0, r4
 8005ef2:	d007      	beq.n	8005f04 <sbrk_aligned+0x38>
 8005ef4:	1a21      	subs	r1, r4, r0
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	f000 f87c 	bl	8005ff4 <_sbrk_r>
 8005efc:	3001      	adds	r0, #1
 8005efe:	d101      	bne.n	8005f04 <sbrk_aligned+0x38>
 8005f00:	f04f 34ff 	mov.w	r4, #4294967295
 8005f04:	4620      	mov	r0, r4
 8005f06:	bd70      	pop	{r4, r5, r6, pc}
 8005f08:	200002cc 	.word	0x200002cc

08005f0c <_malloc_r>:
 8005f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f10:	1ccd      	adds	r5, r1, #3
 8005f12:	f025 0503 	bic.w	r5, r5, #3
 8005f16:	3508      	adds	r5, #8
 8005f18:	2d0c      	cmp	r5, #12
 8005f1a:	bf38      	it	cc
 8005f1c:	250c      	movcc	r5, #12
 8005f1e:	2d00      	cmp	r5, #0
 8005f20:	4607      	mov	r7, r0
 8005f22:	db01      	blt.n	8005f28 <_malloc_r+0x1c>
 8005f24:	42a9      	cmp	r1, r5
 8005f26:	d905      	bls.n	8005f34 <_malloc_r+0x28>
 8005f28:	230c      	movs	r3, #12
 8005f2a:	603b      	str	r3, [r7, #0]
 8005f2c:	2600      	movs	r6, #0
 8005f2e:	4630      	mov	r0, r6
 8005f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f34:	4e2e      	ldr	r6, [pc, #184]	; (8005ff0 <_malloc_r+0xe4>)
 8005f36:	f000 f86d 	bl	8006014 <__malloc_lock>
 8005f3a:	6833      	ldr	r3, [r6, #0]
 8005f3c:	461c      	mov	r4, r3
 8005f3e:	bb34      	cbnz	r4, 8005f8e <_malloc_r+0x82>
 8005f40:	4629      	mov	r1, r5
 8005f42:	4638      	mov	r0, r7
 8005f44:	f7ff ffc2 	bl	8005ecc <sbrk_aligned>
 8005f48:	1c43      	adds	r3, r0, #1
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	d14d      	bne.n	8005fea <_malloc_r+0xde>
 8005f4e:	6834      	ldr	r4, [r6, #0]
 8005f50:	4626      	mov	r6, r4
 8005f52:	2e00      	cmp	r6, #0
 8005f54:	d140      	bne.n	8005fd8 <_malloc_r+0xcc>
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	4631      	mov	r1, r6
 8005f5a:	4638      	mov	r0, r7
 8005f5c:	eb04 0803 	add.w	r8, r4, r3
 8005f60:	f000 f848 	bl	8005ff4 <_sbrk_r>
 8005f64:	4580      	cmp	r8, r0
 8005f66:	d13a      	bne.n	8005fde <_malloc_r+0xd2>
 8005f68:	6821      	ldr	r1, [r4, #0]
 8005f6a:	3503      	adds	r5, #3
 8005f6c:	1a6d      	subs	r5, r5, r1
 8005f6e:	f025 0503 	bic.w	r5, r5, #3
 8005f72:	3508      	adds	r5, #8
 8005f74:	2d0c      	cmp	r5, #12
 8005f76:	bf38      	it	cc
 8005f78:	250c      	movcc	r5, #12
 8005f7a:	4629      	mov	r1, r5
 8005f7c:	4638      	mov	r0, r7
 8005f7e:	f7ff ffa5 	bl	8005ecc <sbrk_aligned>
 8005f82:	3001      	adds	r0, #1
 8005f84:	d02b      	beq.n	8005fde <_malloc_r+0xd2>
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	442b      	add	r3, r5
 8005f8a:	6023      	str	r3, [r4, #0]
 8005f8c:	e00e      	b.n	8005fac <_malloc_r+0xa0>
 8005f8e:	6822      	ldr	r2, [r4, #0]
 8005f90:	1b52      	subs	r2, r2, r5
 8005f92:	d41e      	bmi.n	8005fd2 <_malloc_r+0xc6>
 8005f94:	2a0b      	cmp	r2, #11
 8005f96:	d916      	bls.n	8005fc6 <_malloc_r+0xba>
 8005f98:	1961      	adds	r1, r4, r5
 8005f9a:	42a3      	cmp	r3, r4
 8005f9c:	6025      	str	r5, [r4, #0]
 8005f9e:	bf18      	it	ne
 8005fa0:	6059      	strne	r1, [r3, #4]
 8005fa2:	6863      	ldr	r3, [r4, #4]
 8005fa4:	bf08      	it	eq
 8005fa6:	6031      	streq	r1, [r6, #0]
 8005fa8:	5162      	str	r2, [r4, r5]
 8005faa:	604b      	str	r3, [r1, #4]
 8005fac:	4638      	mov	r0, r7
 8005fae:	f104 060b 	add.w	r6, r4, #11
 8005fb2:	f000 f835 	bl	8006020 <__malloc_unlock>
 8005fb6:	f026 0607 	bic.w	r6, r6, #7
 8005fba:	1d23      	adds	r3, r4, #4
 8005fbc:	1af2      	subs	r2, r6, r3
 8005fbe:	d0b6      	beq.n	8005f2e <_malloc_r+0x22>
 8005fc0:	1b9b      	subs	r3, r3, r6
 8005fc2:	50a3      	str	r3, [r4, r2]
 8005fc4:	e7b3      	b.n	8005f2e <_malloc_r+0x22>
 8005fc6:	6862      	ldr	r2, [r4, #4]
 8005fc8:	42a3      	cmp	r3, r4
 8005fca:	bf0c      	ite	eq
 8005fcc:	6032      	streq	r2, [r6, #0]
 8005fce:	605a      	strne	r2, [r3, #4]
 8005fd0:	e7ec      	b.n	8005fac <_malloc_r+0xa0>
 8005fd2:	4623      	mov	r3, r4
 8005fd4:	6864      	ldr	r4, [r4, #4]
 8005fd6:	e7b2      	b.n	8005f3e <_malloc_r+0x32>
 8005fd8:	4634      	mov	r4, r6
 8005fda:	6876      	ldr	r6, [r6, #4]
 8005fdc:	e7b9      	b.n	8005f52 <_malloc_r+0x46>
 8005fde:	230c      	movs	r3, #12
 8005fe0:	603b      	str	r3, [r7, #0]
 8005fe2:	4638      	mov	r0, r7
 8005fe4:	f000 f81c 	bl	8006020 <__malloc_unlock>
 8005fe8:	e7a1      	b.n	8005f2e <_malloc_r+0x22>
 8005fea:	6025      	str	r5, [r4, #0]
 8005fec:	e7de      	b.n	8005fac <_malloc_r+0xa0>
 8005fee:	bf00      	nop
 8005ff0:	200002c8 	.word	0x200002c8

08005ff4 <_sbrk_r>:
 8005ff4:	b538      	push	{r3, r4, r5, lr}
 8005ff6:	4d06      	ldr	r5, [pc, #24]	; (8006010 <_sbrk_r+0x1c>)
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	4608      	mov	r0, r1
 8005ffe:	602b      	str	r3, [r5, #0]
 8006000:	f7fc fc86 	bl	8002910 <_sbrk>
 8006004:	1c43      	adds	r3, r0, #1
 8006006:	d102      	bne.n	800600e <_sbrk_r+0x1a>
 8006008:	682b      	ldr	r3, [r5, #0]
 800600a:	b103      	cbz	r3, 800600e <_sbrk_r+0x1a>
 800600c:	6023      	str	r3, [r4, #0]
 800600e:	bd38      	pop	{r3, r4, r5, pc}
 8006010:	200002d0 	.word	0x200002d0

08006014 <__malloc_lock>:
 8006014:	4801      	ldr	r0, [pc, #4]	; (800601c <__malloc_lock+0x8>)
 8006016:	f000 b809 	b.w	800602c <__retarget_lock_acquire_recursive>
 800601a:	bf00      	nop
 800601c:	200002d4 	.word	0x200002d4

08006020 <__malloc_unlock>:
 8006020:	4801      	ldr	r0, [pc, #4]	; (8006028 <__malloc_unlock+0x8>)
 8006022:	f000 b804 	b.w	800602e <__retarget_lock_release_recursive>
 8006026:	bf00      	nop
 8006028:	200002d4 	.word	0x200002d4

0800602c <__retarget_lock_acquire_recursive>:
 800602c:	4770      	bx	lr

0800602e <__retarget_lock_release_recursive>:
 800602e:	4770      	bx	lr

08006030 <floor>:
 8006030:	ec51 0b10 	vmov	r0, r1, d0
 8006034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006038:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800603c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006040:	2e13      	cmp	r6, #19
 8006042:	ee10 5a10 	vmov	r5, s0
 8006046:	ee10 8a10 	vmov	r8, s0
 800604a:	460c      	mov	r4, r1
 800604c:	dc32      	bgt.n	80060b4 <floor+0x84>
 800604e:	2e00      	cmp	r6, #0
 8006050:	da14      	bge.n	800607c <floor+0x4c>
 8006052:	a333      	add	r3, pc, #204	; (adr r3, 8006120 <floor+0xf0>)
 8006054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006058:	f7fa f8c4 	bl	80001e4 <__adddf3>
 800605c:	2200      	movs	r2, #0
 800605e:	2300      	movs	r3, #0
 8006060:	f7fa fd06 	bl	8000a70 <__aeabi_dcmpgt>
 8006064:	b138      	cbz	r0, 8006076 <floor+0x46>
 8006066:	2c00      	cmp	r4, #0
 8006068:	da57      	bge.n	800611a <floor+0xea>
 800606a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800606e:	431d      	orrs	r5, r3
 8006070:	d001      	beq.n	8006076 <floor+0x46>
 8006072:	4c2d      	ldr	r4, [pc, #180]	; (8006128 <floor+0xf8>)
 8006074:	2500      	movs	r5, #0
 8006076:	4621      	mov	r1, r4
 8006078:	4628      	mov	r0, r5
 800607a:	e025      	b.n	80060c8 <floor+0x98>
 800607c:	4f2b      	ldr	r7, [pc, #172]	; (800612c <floor+0xfc>)
 800607e:	4137      	asrs	r7, r6
 8006080:	ea01 0307 	and.w	r3, r1, r7
 8006084:	4303      	orrs	r3, r0
 8006086:	d01f      	beq.n	80060c8 <floor+0x98>
 8006088:	a325      	add	r3, pc, #148	; (adr r3, 8006120 <floor+0xf0>)
 800608a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608e:	f7fa f8a9 	bl	80001e4 <__adddf3>
 8006092:	2200      	movs	r2, #0
 8006094:	2300      	movs	r3, #0
 8006096:	f7fa fceb 	bl	8000a70 <__aeabi_dcmpgt>
 800609a:	2800      	cmp	r0, #0
 800609c:	d0eb      	beq.n	8006076 <floor+0x46>
 800609e:	2c00      	cmp	r4, #0
 80060a0:	bfbe      	ittt	lt
 80060a2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80060a6:	fa43 f606 	asrlt.w	r6, r3, r6
 80060aa:	19a4      	addlt	r4, r4, r6
 80060ac:	ea24 0407 	bic.w	r4, r4, r7
 80060b0:	2500      	movs	r5, #0
 80060b2:	e7e0      	b.n	8006076 <floor+0x46>
 80060b4:	2e33      	cmp	r6, #51	; 0x33
 80060b6:	dd0b      	ble.n	80060d0 <floor+0xa0>
 80060b8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80060bc:	d104      	bne.n	80060c8 <floor+0x98>
 80060be:	ee10 2a10 	vmov	r2, s0
 80060c2:	460b      	mov	r3, r1
 80060c4:	f7fa f88e 	bl	80001e4 <__adddf3>
 80060c8:	ec41 0b10 	vmov	d0, r0, r1
 80060cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060d0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80060d4:	f04f 33ff 	mov.w	r3, #4294967295
 80060d8:	fa23 f707 	lsr.w	r7, r3, r7
 80060dc:	4207      	tst	r7, r0
 80060de:	d0f3      	beq.n	80060c8 <floor+0x98>
 80060e0:	a30f      	add	r3, pc, #60	; (adr r3, 8006120 <floor+0xf0>)
 80060e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e6:	f7fa f87d 	bl	80001e4 <__adddf3>
 80060ea:	2200      	movs	r2, #0
 80060ec:	2300      	movs	r3, #0
 80060ee:	f7fa fcbf 	bl	8000a70 <__aeabi_dcmpgt>
 80060f2:	2800      	cmp	r0, #0
 80060f4:	d0bf      	beq.n	8006076 <floor+0x46>
 80060f6:	2c00      	cmp	r4, #0
 80060f8:	da02      	bge.n	8006100 <floor+0xd0>
 80060fa:	2e14      	cmp	r6, #20
 80060fc:	d103      	bne.n	8006106 <floor+0xd6>
 80060fe:	3401      	adds	r4, #1
 8006100:	ea25 0507 	bic.w	r5, r5, r7
 8006104:	e7b7      	b.n	8006076 <floor+0x46>
 8006106:	2301      	movs	r3, #1
 8006108:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800610c:	fa03 f606 	lsl.w	r6, r3, r6
 8006110:	4435      	add	r5, r6
 8006112:	4545      	cmp	r5, r8
 8006114:	bf38      	it	cc
 8006116:	18e4      	addcc	r4, r4, r3
 8006118:	e7f2      	b.n	8006100 <floor+0xd0>
 800611a:	2500      	movs	r5, #0
 800611c:	462c      	mov	r4, r5
 800611e:	e7aa      	b.n	8006076 <floor+0x46>
 8006120:	8800759c 	.word	0x8800759c
 8006124:	7e37e43c 	.word	0x7e37e43c
 8006128:	bff00000 	.word	0xbff00000
 800612c:	000fffff 	.word	0x000fffff

08006130 <pow>:
 8006130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006132:	ed2d 8b02 	vpush	{d8}
 8006136:	eeb0 8a40 	vmov.f32	s16, s0
 800613a:	eef0 8a60 	vmov.f32	s17, s1
 800613e:	ec55 4b11 	vmov	r4, r5, d1
 8006142:	f000 f891 	bl	8006268 <__ieee754_pow>
 8006146:	4622      	mov	r2, r4
 8006148:	462b      	mov	r3, r5
 800614a:	4620      	mov	r0, r4
 800614c:	4629      	mov	r1, r5
 800614e:	ec57 6b10 	vmov	r6, r7, d0
 8006152:	f7fa fc97 	bl	8000a84 <__aeabi_dcmpun>
 8006156:	2800      	cmp	r0, #0
 8006158:	d13b      	bne.n	80061d2 <pow+0xa2>
 800615a:	ec51 0b18 	vmov	r0, r1, d8
 800615e:	2200      	movs	r2, #0
 8006160:	2300      	movs	r3, #0
 8006162:	f7fa fc5d 	bl	8000a20 <__aeabi_dcmpeq>
 8006166:	b1b8      	cbz	r0, 8006198 <pow+0x68>
 8006168:	2200      	movs	r2, #0
 800616a:	2300      	movs	r3, #0
 800616c:	4620      	mov	r0, r4
 800616e:	4629      	mov	r1, r5
 8006170:	f7fa fc56 	bl	8000a20 <__aeabi_dcmpeq>
 8006174:	2800      	cmp	r0, #0
 8006176:	d146      	bne.n	8006206 <pow+0xd6>
 8006178:	ec45 4b10 	vmov	d0, r4, r5
 800617c:	f000 fe8d 	bl	8006e9a <finite>
 8006180:	b338      	cbz	r0, 80061d2 <pow+0xa2>
 8006182:	2200      	movs	r2, #0
 8006184:	2300      	movs	r3, #0
 8006186:	4620      	mov	r0, r4
 8006188:	4629      	mov	r1, r5
 800618a:	f7fa fc53 	bl	8000a34 <__aeabi_dcmplt>
 800618e:	b300      	cbz	r0, 80061d2 <pow+0xa2>
 8006190:	f7ff fdea 	bl	8005d68 <__errno>
 8006194:	2322      	movs	r3, #34	; 0x22
 8006196:	e01b      	b.n	80061d0 <pow+0xa0>
 8006198:	ec47 6b10 	vmov	d0, r6, r7
 800619c:	f000 fe7d 	bl	8006e9a <finite>
 80061a0:	b9e0      	cbnz	r0, 80061dc <pow+0xac>
 80061a2:	eeb0 0a48 	vmov.f32	s0, s16
 80061a6:	eef0 0a68 	vmov.f32	s1, s17
 80061aa:	f000 fe76 	bl	8006e9a <finite>
 80061ae:	b1a8      	cbz	r0, 80061dc <pow+0xac>
 80061b0:	ec45 4b10 	vmov	d0, r4, r5
 80061b4:	f000 fe71 	bl	8006e9a <finite>
 80061b8:	b180      	cbz	r0, 80061dc <pow+0xac>
 80061ba:	4632      	mov	r2, r6
 80061bc:	463b      	mov	r3, r7
 80061be:	4630      	mov	r0, r6
 80061c0:	4639      	mov	r1, r7
 80061c2:	f7fa fc5f 	bl	8000a84 <__aeabi_dcmpun>
 80061c6:	2800      	cmp	r0, #0
 80061c8:	d0e2      	beq.n	8006190 <pow+0x60>
 80061ca:	f7ff fdcd 	bl	8005d68 <__errno>
 80061ce:	2321      	movs	r3, #33	; 0x21
 80061d0:	6003      	str	r3, [r0, #0]
 80061d2:	ecbd 8b02 	vpop	{d8}
 80061d6:	ec47 6b10 	vmov	d0, r6, r7
 80061da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061dc:	2200      	movs	r2, #0
 80061de:	2300      	movs	r3, #0
 80061e0:	4630      	mov	r0, r6
 80061e2:	4639      	mov	r1, r7
 80061e4:	f7fa fc1c 	bl	8000a20 <__aeabi_dcmpeq>
 80061e8:	2800      	cmp	r0, #0
 80061ea:	d0f2      	beq.n	80061d2 <pow+0xa2>
 80061ec:	eeb0 0a48 	vmov.f32	s0, s16
 80061f0:	eef0 0a68 	vmov.f32	s1, s17
 80061f4:	f000 fe51 	bl	8006e9a <finite>
 80061f8:	2800      	cmp	r0, #0
 80061fa:	d0ea      	beq.n	80061d2 <pow+0xa2>
 80061fc:	ec45 4b10 	vmov	d0, r4, r5
 8006200:	f000 fe4b 	bl	8006e9a <finite>
 8006204:	e7c3      	b.n	800618e <pow+0x5e>
 8006206:	4f01      	ldr	r7, [pc, #4]	; (800620c <pow+0xdc>)
 8006208:	2600      	movs	r6, #0
 800620a:	e7e2      	b.n	80061d2 <pow+0xa2>
 800620c:	3ff00000 	.word	0x3ff00000

08006210 <sqrt>:
 8006210:	b538      	push	{r3, r4, r5, lr}
 8006212:	ed2d 8b02 	vpush	{d8}
 8006216:	ec55 4b10 	vmov	r4, r5, d0
 800621a:	f000 fd53 	bl	8006cc4 <__ieee754_sqrt>
 800621e:	4622      	mov	r2, r4
 8006220:	462b      	mov	r3, r5
 8006222:	4620      	mov	r0, r4
 8006224:	4629      	mov	r1, r5
 8006226:	eeb0 8a40 	vmov.f32	s16, s0
 800622a:	eef0 8a60 	vmov.f32	s17, s1
 800622e:	f7fa fc29 	bl	8000a84 <__aeabi_dcmpun>
 8006232:	b990      	cbnz	r0, 800625a <sqrt+0x4a>
 8006234:	2200      	movs	r2, #0
 8006236:	2300      	movs	r3, #0
 8006238:	4620      	mov	r0, r4
 800623a:	4629      	mov	r1, r5
 800623c:	f7fa fbfa 	bl	8000a34 <__aeabi_dcmplt>
 8006240:	b158      	cbz	r0, 800625a <sqrt+0x4a>
 8006242:	f7ff fd91 	bl	8005d68 <__errno>
 8006246:	2321      	movs	r3, #33	; 0x21
 8006248:	6003      	str	r3, [r0, #0]
 800624a:	2200      	movs	r2, #0
 800624c:	2300      	movs	r3, #0
 800624e:	4610      	mov	r0, r2
 8006250:	4619      	mov	r1, r3
 8006252:	f7fa faa7 	bl	80007a4 <__aeabi_ddiv>
 8006256:	ec41 0b18 	vmov	d8, r0, r1
 800625a:	eeb0 0a48 	vmov.f32	s0, s16
 800625e:	eef0 0a68 	vmov.f32	s1, s17
 8006262:	ecbd 8b02 	vpop	{d8}
 8006266:	bd38      	pop	{r3, r4, r5, pc}

08006268 <__ieee754_pow>:
 8006268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800626c:	ed2d 8b06 	vpush	{d8-d10}
 8006270:	b089      	sub	sp, #36	; 0x24
 8006272:	ed8d 1b00 	vstr	d1, [sp]
 8006276:	e9dd 2900 	ldrd	r2, r9, [sp]
 800627a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800627e:	ea58 0102 	orrs.w	r1, r8, r2
 8006282:	ec57 6b10 	vmov	r6, r7, d0
 8006286:	d115      	bne.n	80062b4 <__ieee754_pow+0x4c>
 8006288:	19b3      	adds	r3, r6, r6
 800628a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800628e:	4152      	adcs	r2, r2
 8006290:	4299      	cmp	r1, r3
 8006292:	4b89      	ldr	r3, [pc, #548]	; (80064b8 <__ieee754_pow+0x250>)
 8006294:	4193      	sbcs	r3, r2
 8006296:	f080 84d2 	bcs.w	8006c3e <__ieee754_pow+0x9d6>
 800629a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800629e:	4630      	mov	r0, r6
 80062a0:	4639      	mov	r1, r7
 80062a2:	f7f9 ff9f 	bl	80001e4 <__adddf3>
 80062a6:	ec41 0b10 	vmov	d0, r0, r1
 80062aa:	b009      	add	sp, #36	; 0x24
 80062ac:	ecbd 8b06 	vpop	{d8-d10}
 80062b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b4:	4b81      	ldr	r3, [pc, #516]	; (80064bc <__ieee754_pow+0x254>)
 80062b6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80062ba:	429c      	cmp	r4, r3
 80062bc:	ee10 aa10 	vmov	sl, s0
 80062c0:	463d      	mov	r5, r7
 80062c2:	dc06      	bgt.n	80062d2 <__ieee754_pow+0x6a>
 80062c4:	d101      	bne.n	80062ca <__ieee754_pow+0x62>
 80062c6:	2e00      	cmp	r6, #0
 80062c8:	d1e7      	bne.n	800629a <__ieee754_pow+0x32>
 80062ca:	4598      	cmp	r8, r3
 80062cc:	dc01      	bgt.n	80062d2 <__ieee754_pow+0x6a>
 80062ce:	d10f      	bne.n	80062f0 <__ieee754_pow+0x88>
 80062d0:	b172      	cbz	r2, 80062f0 <__ieee754_pow+0x88>
 80062d2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80062d6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80062da:	ea55 050a 	orrs.w	r5, r5, sl
 80062de:	d1dc      	bne.n	800629a <__ieee754_pow+0x32>
 80062e0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80062e4:	18db      	adds	r3, r3, r3
 80062e6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80062ea:	4152      	adcs	r2, r2
 80062ec:	429d      	cmp	r5, r3
 80062ee:	e7d0      	b.n	8006292 <__ieee754_pow+0x2a>
 80062f0:	2d00      	cmp	r5, #0
 80062f2:	da3b      	bge.n	800636c <__ieee754_pow+0x104>
 80062f4:	4b72      	ldr	r3, [pc, #456]	; (80064c0 <__ieee754_pow+0x258>)
 80062f6:	4598      	cmp	r8, r3
 80062f8:	dc51      	bgt.n	800639e <__ieee754_pow+0x136>
 80062fa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80062fe:	4598      	cmp	r8, r3
 8006300:	f340 84ac 	ble.w	8006c5c <__ieee754_pow+0x9f4>
 8006304:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006308:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800630c:	2b14      	cmp	r3, #20
 800630e:	dd0f      	ble.n	8006330 <__ieee754_pow+0xc8>
 8006310:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006314:	fa22 f103 	lsr.w	r1, r2, r3
 8006318:	fa01 f303 	lsl.w	r3, r1, r3
 800631c:	4293      	cmp	r3, r2
 800631e:	f040 849d 	bne.w	8006c5c <__ieee754_pow+0x9f4>
 8006322:	f001 0101 	and.w	r1, r1, #1
 8006326:	f1c1 0302 	rsb	r3, r1, #2
 800632a:	9304      	str	r3, [sp, #16]
 800632c:	b182      	cbz	r2, 8006350 <__ieee754_pow+0xe8>
 800632e:	e05f      	b.n	80063f0 <__ieee754_pow+0x188>
 8006330:	2a00      	cmp	r2, #0
 8006332:	d15b      	bne.n	80063ec <__ieee754_pow+0x184>
 8006334:	f1c3 0314 	rsb	r3, r3, #20
 8006338:	fa48 f103 	asr.w	r1, r8, r3
 800633c:	fa01 f303 	lsl.w	r3, r1, r3
 8006340:	4543      	cmp	r3, r8
 8006342:	f040 8488 	bne.w	8006c56 <__ieee754_pow+0x9ee>
 8006346:	f001 0101 	and.w	r1, r1, #1
 800634a:	f1c1 0302 	rsb	r3, r1, #2
 800634e:	9304      	str	r3, [sp, #16]
 8006350:	4b5c      	ldr	r3, [pc, #368]	; (80064c4 <__ieee754_pow+0x25c>)
 8006352:	4598      	cmp	r8, r3
 8006354:	d132      	bne.n	80063bc <__ieee754_pow+0x154>
 8006356:	f1b9 0f00 	cmp.w	r9, #0
 800635a:	f280 8478 	bge.w	8006c4e <__ieee754_pow+0x9e6>
 800635e:	4959      	ldr	r1, [pc, #356]	; (80064c4 <__ieee754_pow+0x25c>)
 8006360:	4632      	mov	r2, r6
 8006362:	463b      	mov	r3, r7
 8006364:	2000      	movs	r0, #0
 8006366:	f7fa fa1d 	bl	80007a4 <__aeabi_ddiv>
 800636a:	e79c      	b.n	80062a6 <__ieee754_pow+0x3e>
 800636c:	2300      	movs	r3, #0
 800636e:	9304      	str	r3, [sp, #16]
 8006370:	2a00      	cmp	r2, #0
 8006372:	d13d      	bne.n	80063f0 <__ieee754_pow+0x188>
 8006374:	4b51      	ldr	r3, [pc, #324]	; (80064bc <__ieee754_pow+0x254>)
 8006376:	4598      	cmp	r8, r3
 8006378:	d1ea      	bne.n	8006350 <__ieee754_pow+0xe8>
 800637a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800637e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006382:	ea53 030a 	orrs.w	r3, r3, sl
 8006386:	f000 845a 	beq.w	8006c3e <__ieee754_pow+0x9d6>
 800638a:	4b4f      	ldr	r3, [pc, #316]	; (80064c8 <__ieee754_pow+0x260>)
 800638c:	429c      	cmp	r4, r3
 800638e:	dd08      	ble.n	80063a2 <__ieee754_pow+0x13a>
 8006390:	f1b9 0f00 	cmp.w	r9, #0
 8006394:	f2c0 8457 	blt.w	8006c46 <__ieee754_pow+0x9de>
 8006398:	e9dd 0100 	ldrd	r0, r1, [sp]
 800639c:	e783      	b.n	80062a6 <__ieee754_pow+0x3e>
 800639e:	2302      	movs	r3, #2
 80063a0:	e7e5      	b.n	800636e <__ieee754_pow+0x106>
 80063a2:	f1b9 0f00 	cmp.w	r9, #0
 80063a6:	f04f 0000 	mov.w	r0, #0
 80063aa:	f04f 0100 	mov.w	r1, #0
 80063ae:	f6bf af7a 	bge.w	80062a6 <__ieee754_pow+0x3e>
 80063b2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80063b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80063ba:	e774      	b.n	80062a6 <__ieee754_pow+0x3e>
 80063bc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80063c0:	d106      	bne.n	80063d0 <__ieee754_pow+0x168>
 80063c2:	4632      	mov	r2, r6
 80063c4:	463b      	mov	r3, r7
 80063c6:	4630      	mov	r0, r6
 80063c8:	4639      	mov	r1, r7
 80063ca:	f7fa f8c1 	bl	8000550 <__aeabi_dmul>
 80063ce:	e76a      	b.n	80062a6 <__ieee754_pow+0x3e>
 80063d0:	4b3e      	ldr	r3, [pc, #248]	; (80064cc <__ieee754_pow+0x264>)
 80063d2:	4599      	cmp	r9, r3
 80063d4:	d10c      	bne.n	80063f0 <__ieee754_pow+0x188>
 80063d6:	2d00      	cmp	r5, #0
 80063d8:	db0a      	blt.n	80063f0 <__ieee754_pow+0x188>
 80063da:	ec47 6b10 	vmov	d0, r6, r7
 80063de:	b009      	add	sp, #36	; 0x24
 80063e0:	ecbd 8b06 	vpop	{d8-d10}
 80063e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e8:	f000 bc6c 	b.w	8006cc4 <__ieee754_sqrt>
 80063ec:	2300      	movs	r3, #0
 80063ee:	9304      	str	r3, [sp, #16]
 80063f0:	ec47 6b10 	vmov	d0, r6, r7
 80063f4:	f000 fd48 	bl	8006e88 <fabs>
 80063f8:	ec51 0b10 	vmov	r0, r1, d0
 80063fc:	f1ba 0f00 	cmp.w	sl, #0
 8006400:	d129      	bne.n	8006456 <__ieee754_pow+0x1ee>
 8006402:	b124      	cbz	r4, 800640e <__ieee754_pow+0x1a6>
 8006404:	4b2f      	ldr	r3, [pc, #188]	; (80064c4 <__ieee754_pow+0x25c>)
 8006406:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800640a:	429a      	cmp	r2, r3
 800640c:	d123      	bne.n	8006456 <__ieee754_pow+0x1ee>
 800640e:	f1b9 0f00 	cmp.w	r9, #0
 8006412:	da05      	bge.n	8006420 <__ieee754_pow+0x1b8>
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	2000      	movs	r0, #0
 800641a:	492a      	ldr	r1, [pc, #168]	; (80064c4 <__ieee754_pow+0x25c>)
 800641c:	f7fa f9c2 	bl	80007a4 <__aeabi_ddiv>
 8006420:	2d00      	cmp	r5, #0
 8006422:	f6bf af40 	bge.w	80062a6 <__ieee754_pow+0x3e>
 8006426:	9b04      	ldr	r3, [sp, #16]
 8006428:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800642c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006430:	4323      	orrs	r3, r4
 8006432:	d108      	bne.n	8006446 <__ieee754_pow+0x1de>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	4610      	mov	r0, r2
 800643a:	4619      	mov	r1, r3
 800643c:	f7f9 fed0 	bl	80001e0 <__aeabi_dsub>
 8006440:	4602      	mov	r2, r0
 8006442:	460b      	mov	r3, r1
 8006444:	e78f      	b.n	8006366 <__ieee754_pow+0xfe>
 8006446:	9b04      	ldr	r3, [sp, #16]
 8006448:	2b01      	cmp	r3, #1
 800644a:	f47f af2c 	bne.w	80062a6 <__ieee754_pow+0x3e>
 800644e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006452:	4619      	mov	r1, r3
 8006454:	e727      	b.n	80062a6 <__ieee754_pow+0x3e>
 8006456:	0feb      	lsrs	r3, r5, #31
 8006458:	3b01      	subs	r3, #1
 800645a:	9306      	str	r3, [sp, #24]
 800645c:	9a06      	ldr	r2, [sp, #24]
 800645e:	9b04      	ldr	r3, [sp, #16]
 8006460:	4313      	orrs	r3, r2
 8006462:	d102      	bne.n	800646a <__ieee754_pow+0x202>
 8006464:	4632      	mov	r2, r6
 8006466:	463b      	mov	r3, r7
 8006468:	e7e6      	b.n	8006438 <__ieee754_pow+0x1d0>
 800646a:	4b19      	ldr	r3, [pc, #100]	; (80064d0 <__ieee754_pow+0x268>)
 800646c:	4598      	cmp	r8, r3
 800646e:	f340 80fb 	ble.w	8006668 <__ieee754_pow+0x400>
 8006472:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006476:	4598      	cmp	r8, r3
 8006478:	4b13      	ldr	r3, [pc, #76]	; (80064c8 <__ieee754_pow+0x260>)
 800647a:	dd0c      	ble.n	8006496 <__ieee754_pow+0x22e>
 800647c:	429c      	cmp	r4, r3
 800647e:	dc0f      	bgt.n	80064a0 <__ieee754_pow+0x238>
 8006480:	f1b9 0f00 	cmp.w	r9, #0
 8006484:	da0f      	bge.n	80064a6 <__ieee754_pow+0x23e>
 8006486:	2000      	movs	r0, #0
 8006488:	b009      	add	sp, #36	; 0x24
 800648a:	ecbd 8b06 	vpop	{d8-d10}
 800648e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006492:	f000 bcf0 	b.w	8006e76 <__math_oflow>
 8006496:	429c      	cmp	r4, r3
 8006498:	dbf2      	blt.n	8006480 <__ieee754_pow+0x218>
 800649a:	4b0a      	ldr	r3, [pc, #40]	; (80064c4 <__ieee754_pow+0x25c>)
 800649c:	429c      	cmp	r4, r3
 800649e:	dd19      	ble.n	80064d4 <__ieee754_pow+0x26c>
 80064a0:	f1b9 0f00 	cmp.w	r9, #0
 80064a4:	dcef      	bgt.n	8006486 <__ieee754_pow+0x21e>
 80064a6:	2000      	movs	r0, #0
 80064a8:	b009      	add	sp, #36	; 0x24
 80064aa:	ecbd 8b06 	vpop	{d8-d10}
 80064ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b2:	f000 bcd7 	b.w	8006e64 <__math_uflow>
 80064b6:	bf00      	nop
 80064b8:	fff00000 	.word	0xfff00000
 80064bc:	7ff00000 	.word	0x7ff00000
 80064c0:	433fffff 	.word	0x433fffff
 80064c4:	3ff00000 	.word	0x3ff00000
 80064c8:	3fefffff 	.word	0x3fefffff
 80064cc:	3fe00000 	.word	0x3fe00000
 80064d0:	41e00000 	.word	0x41e00000
 80064d4:	4b60      	ldr	r3, [pc, #384]	; (8006658 <__ieee754_pow+0x3f0>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	f7f9 fe82 	bl	80001e0 <__aeabi_dsub>
 80064dc:	a354      	add	r3, pc, #336	; (adr r3, 8006630 <__ieee754_pow+0x3c8>)
 80064de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e2:	4604      	mov	r4, r0
 80064e4:	460d      	mov	r5, r1
 80064e6:	f7fa f833 	bl	8000550 <__aeabi_dmul>
 80064ea:	a353      	add	r3, pc, #332	; (adr r3, 8006638 <__ieee754_pow+0x3d0>)
 80064ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f0:	4606      	mov	r6, r0
 80064f2:	460f      	mov	r7, r1
 80064f4:	4620      	mov	r0, r4
 80064f6:	4629      	mov	r1, r5
 80064f8:	f7fa f82a 	bl	8000550 <__aeabi_dmul>
 80064fc:	4b57      	ldr	r3, [pc, #348]	; (800665c <__ieee754_pow+0x3f4>)
 80064fe:	4682      	mov	sl, r0
 8006500:	468b      	mov	fp, r1
 8006502:	2200      	movs	r2, #0
 8006504:	4620      	mov	r0, r4
 8006506:	4629      	mov	r1, r5
 8006508:	f7fa f822 	bl	8000550 <__aeabi_dmul>
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	a14b      	add	r1, pc, #300	; (adr r1, 8006640 <__ieee754_pow+0x3d8>)
 8006512:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006516:	f7f9 fe63 	bl	80001e0 <__aeabi_dsub>
 800651a:	4622      	mov	r2, r4
 800651c:	462b      	mov	r3, r5
 800651e:	f7fa f817 	bl	8000550 <__aeabi_dmul>
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	2000      	movs	r0, #0
 8006528:	494d      	ldr	r1, [pc, #308]	; (8006660 <__ieee754_pow+0x3f8>)
 800652a:	f7f9 fe59 	bl	80001e0 <__aeabi_dsub>
 800652e:	4622      	mov	r2, r4
 8006530:	4680      	mov	r8, r0
 8006532:	4689      	mov	r9, r1
 8006534:	462b      	mov	r3, r5
 8006536:	4620      	mov	r0, r4
 8006538:	4629      	mov	r1, r5
 800653a:	f7fa f809 	bl	8000550 <__aeabi_dmul>
 800653e:	4602      	mov	r2, r0
 8006540:	460b      	mov	r3, r1
 8006542:	4640      	mov	r0, r8
 8006544:	4649      	mov	r1, r9
 8006546:	f7fa f803 	bl	8000550 <__aeabi_dmul>
 800654a:	a33f      	add	r3, pc, #252	; (adr r3, 8006648 <__ieee754_pow+0x3e0>)
 800654c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006550:	f7f9 fffe 	bl	8000550 <__aeabi_dmul>
 8006554:	4602      	mov	r2, r0
 8006556:	460b      	mov	r3, r1
 8006558:	4650      	mov	r0, sl
 800655a:	4659      	mov	r1, fp
 800655c:	f7f9 fe40 	bl	80001e0 <__aeabi_dsub>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	4680      	mov	r8, r0
 8006566:	4689      	mov	r9, r1
 8006568:	4630      	mov	r0, r6
 800656a:	4639      	mov	r1, r7
 800656c:	f7f9 fe3a 	bl	80001e4 <__adddf3>
 8006570:	2000      	movs	r0, #0
 8006572:	4632      	mov	r2, r6
 8006574:	463b      	mov	r3, r7
 8006576:	4604      	mov	r4, r0
 8006578:	460d      	mov	r5, r1
 800657a:	f7f9 fe31 	bl	80001e0 <__aeabi_dsub>
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	4640      	mov	r0, r8
 8006584:	4649      	mov	r1, r9
 8006586:	f7f9 fe2b 	bl	80001e0 <__aeabi_dsub>
 800658a:	9b04      	ldr	r3, [sp, #16]
 800658c:	9a06      	ldr	r2, [sp, #24]
 800658e:	3b01      	subs	r3, #1
 8006590:	4313      	orrs	r3, r2
 8006592:	4682      	mov	sl, r0
 8006594:	468b      	mov	fp, r1
 8006596:	f040 81e7 	bne.w	8006968 <__ieee754_pow+0x700>
 800659a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006650 <__ieee754_pow+0x3e8>
 800659e:	eeb0 8a47 	vmov.f32	s16, s14
 80065a2:	eef0 8a67 	vmov.f32	s17, s15
 80065a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80065aa:	2600      	movs	r6, #0
 80065ac:	4632      	mov	r2, r6
 80065ae:	463b      	mov	r3, r7
 80065b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065b4:	f7f9 fe14 	bl	80001e0 <__aeabi_dsub>
 80065b8:	4622      	mov	r2, r4
 80065ba:	462b      	mov	r3, r5
 80065bc:	f7f9 ffc8 	bl	8000550 <__aeabi_dmul>
 80065c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065c4:	4680      	mov	r8, r0
 80065c6:	4689      	mov	r9, r1
 80065c8:	4650      	mov	r0, sl
 80065ca:	4659      	mov	r1, fp
 80065cc:	f7f9 ffc0 	bl	8000550 <__aeabi_dmul>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	4640      	mov	r0, r8
 80065d6:	4649      	mov	r1, r9
 80065d8:	f7f9 fe04 	bl	80001e4 <__adddf3>
 80065dc:	4632      	mov	r2, r6
 80065de:	463b      	mov	r3, r7
 80065e0:	4680      	mov	r8, r0
 80065e2:	4689      	mov	r9, r1
 80065e4:	4620      	mov	r0, r4
 80065e6:	4629      	mov	r1, r5
 80065e8:	f7f9 ffb2 	bl	8000550 <__aeabi_dmul>
 80065ec:	460b      	mov	r3, r1
 80065ee:	4604      	mov	r4, r0
 80065f0:	460d      	mov	r5, r1
 80065f2:	4602      	mov	r2, r0
 80065f4:	4649      	mov	r1, r9
 80065f6:	4640      	mov	r0, r8
 80065f8:	f7f9 fdf4 	bl	80001e4 <__adddf3>
 80065fc:	4b19      	ldr	r3, [pc, #100]	; (8006664 <__ieee754_pow+0x3fc>)
 80065fe:	4299      	cmp	r1, r3
 8006600:	ec45 4b19 	vmov	d9, r4, r5
 8006604:	4606      	mov	r6, r0
 8006606:	460f      	mov	r7, r1
 8006608:	468b      	mov	fp, r1
 800660a:	f340 82f1 	ble.w	8006bf0 <__ieee754_pow+0x988>
 800660e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006612:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006616:	4303      	orrs	r3, r0
 8006618:	f000 81e4 	beq.w	80069e4 <__ieee754_pow+0x77c>
 800661c:	ec51 0b18 	vmov	r0, r1, d8
 8006620:	2200      	movs	r2, #0
 8006622:	2300      	movs	r3, #0
 8006624:	f7fa fa06 	bl	8000a34 <__aeabi_dcmplt>
 8006628:	3800      	subs	r0, #0
 800662a:	bf18      	it	ne
 800662c:	2001      	movne	r0, #1
 800662e:	e72b      	b.n	8006488 <__ieee754_pow+0x220>
 8006630:	60000000 	.word	0x60000000
 8006634:	3ff71547 	.word	0x3ff71547
 8006638:	f85ddf44 	.word	0xf85ddf44
 800663c:	3e54ae0b 	.word	0x3e54ae0b
 8006640:	55555555 	.word	0x55555555
 8006644:	3fd55555 	.word	0x3fd55555
 8006648:	652b82fe 	.word	0x652b82fe
 800664c:	3ff71547 	.word	0x3ff71547
 8006650:	00000000 	.word	0x00000000
 8006654:	bff00000 	.word	0xbff00000
 8006658:	3ff00000 	.word	0x3ff00000
 800665c:	3fd00000 	.word	0x3fd00000
 8006660:	3fe00000 	.word	0x3fe00000
 8006664:	408fffff 	.word	0x408fffff
 8006668:	4bd5      	ldr	r3, [pc, #852]	; (80069c0 <__ieee754_pow+0x758>)
 800666a:	402b      	ands	r3, r5
 800666c:	2200      	movs	r2, #0
 800666e:	b92b      	cbnz	r3, 800667c <__ieee754_pow+0x414>
 8006670:	4bd4      	ldr	r3, [pc, #848]	; (80069c4 <__ieee754_pow+0x75c>)
 8006672:	f7f9 ff6d 	bl	8000550 <__aeabi_dmul>
 8006676:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800667a:	460c      	mov	r4, r1
 800667c:	1523      	asrs	r3, r4, #20
 800667e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006682:	4413      	add	r3, r2
 8006684:	9305      	str	r3, [sp, #20]
 8006686:	4bd0      	ldr	r3, [pc, #832]	; (80069c8 <__ieee754_pow+0x760>)
 8006688:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800668c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006690:	429c      	cmp	r4, r3
 8006692:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006696:	dd08      	ble.n	80066aa <__ieee754_pow+0x442>
 8006698:	4bcc      	ldr	r3, [pc, #816]	; (80069cc <__ieee754_pow+0x764>)
 800669a:	429c      	cmp	r4, r3
 800669c:	f340 8162 	ble.w	8006964 <__ieee754_pow+0x6fc>
 80066a0:	9b05      	ldr	r3, [sp, #20]
 80066a2:	3301      	adds	r3, #1
 80066a4:	9305      	str	r3, [sp, #20]
 80066a6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80066aa:	2400      	movs	r4, #0
 80066ac:	00e3      	lsls	r3, r4, #3
 80066ae:	9307      	str	r3, [sp, #28]
 80066b0:	4bc7      	ldr	r3, [pc, #796]	; (80069d0 <__ieee754_pow+0x768>)
 80066b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066b6:	ed93 7b00 	vldr	d7, [r3]
 80066ba:	4629      	mov	r1, r5
 80066bc:	ec53 2b17 	vmov	r2, r3, d7
 80066c0:	eeb0 9a47 	vmov.f32	s18, s14
 80066c4:	eef0 9a67 	vmov.f32	s19, s15
 80066c8:	4682      	mov	sl, r0
 80066ca:	f7f9 fd89 	bl	80001e0 <__aeabi_dsub>
 80066ce:	4652      	mov	r2, sl
 80066d0:	4606      	mov	r6, r0
 80066d2:	460f      	mov	r7, r1
 80066d4:	462b      	mov	r3, r5
 80066d6:	ec51 0b19 	vmov	r0, r1, d9
 80066da:	f7f9 fd83 	bl	80001e4 <__adddf3>
 80066de:	4602      	mov	r2, r0
 80066e0:	460b      	mov	r3, r1
 80066e2:	2000      	movs	r0, #0
 80066e4:	49bb      	ldr	r1, [pc, #748]	; (80069d4 <__ieee754_pow+0x76c>)
 80066e6:	f7fa f85d 	bl	80007a4 <__aeabi_ddiv>
 80066ea:	ec41 0b1a 	vmov	d10, r0, r1
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	4630      	mov	r0, r6
 80066f4:	4639      	mov	r1, r7
 80066f6:	f7f9 ff2b 	bl	8000550 <__aeabi_dmul>
 80066fa:	2300      	movs	r3, #0
 80066fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006700:	9302      	str	r3, [sp, #8]
 8006702:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006706:	46ab      	mov	fp, r5
 8006708:	106d      	asrs	r5, r5, #1
 800670a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800670e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006712:	ec41 0b18 	vmov	d8, r0, r1
 8006716:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800671a:	2200      	movs	r2, #0
 800671c:	4640      	mov	r0, r8
 800671e:	4649      	mov	r1, r9
 8006720:	4614      	mov	r4, r2
 8006722:	461d      	mov	r5, r3
 8006724:	f7f9 ff14 	bl	8000550 <__aeabi_dmul>
 8006728:	4602      	mov	r2, r0
 800672a:	460b      	mov	r3, r1
 800672c:	4630      	mov	r0, r6
 800672e:	4639      	mov	r1, r7
 8006730:	f7f9 fd56 	bl	80001e0 <__aeabi_dsub>
 8006734:	ec53 2b19 	vmov	r2, r3, d9
 8006738:	4606      	mov	r6, r0
 800673a:	460f      	mov	r7, r1
 800673c:	4620      	mov	r0, r4
 800673e:	4629      	mov	r1, r5
 8006740:	f7f9 fd4e 	bl	80001e0 <__aeabi_dsub>
 8006744:	4602      	mov	r2, r0
 8006746:	460b      	mov	r3, r1
 8006748:	4650      	mov	r0, sl
 800674a:	4659      	mov	r1, fp
 800674c:	f7f9 fd48 	bl	80001e0 <__aeabi_dsub>
 8006750:	4642      	mov	r2, r8
 8006752:	464b      	mov	r3, r9
 8006754:	f7f9 fefc 	bl	8000550 <__aeabi_dmul>
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	4630      	mov	r0, r6
 800675e:	4639      	mov	r1, r7
 8006760:	f7f9 fd3e 	bl	80001e0 <__aeabi_dsub>
 8006764:	ec53 2b1a 	vmov	r2, r3, d10
 8006768:	f7f9 fef2 	bl	8000550 <__aeabi_dmul>
 800676c:	ec53 2b18 	vmov	r2, r3, d8
 8006770:	ec41 0b19 	vmov	d9, r0, r1
 8006774:	ec51 0b18 	vmov	r0, r1, d8
 8006778:	f7f9 feea 	bl	8000550 <__aeabi_dmul>
 800677c:	a37c      	add	r3, pc, #496	; (adr r3, 8006970 <__ieee754_pow+0x708>)
 800677e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006782:	4604      	mov	r4, r0
 8006784:	460d      	mov	r5, r1
 8006786:	f7f9 fee3 	bl	8000550 <__aeabi_dmul>
 800678a:	a37b      	add	r3, pc, #492	; (adr r3, 8006978 <__ieee754_pow+0x710>)
 800678c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006790:	f7f9 fd28 	bl	80001e4 <__adddf3>
 8006794:	4622      	mov	r2, r4
 8006796:	462b      	mov	r3, r5
 8006798:	f7f9 feda 	bl	8000550 <__aeabi_dmul>
 800679c:	a378      	add	r3, pc, #480	; (adr r3, 8006980 <__ieee754_pow+0x718>)
 800679e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a2:	f7f9 fd1f 	bl	80001e4 <__adddf3>
 80067a6:	4622      	mov	r2, r4
 80067a8:	462b      	mov	r3, r5
 80067aa:	f7f9 fed1 	bl	8000550 <__aeabi_dmul>
 80067ae:	a376      	add	r3, pc, #472	; (adr r3, 8006988 <__ieee754_pow+0x720>)
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	f7f9 fd16 	bl	80001e4 <__adddf3>
 80067b8:	4622      	mov	r2, r4
 80067ba:	462b      	mov	r3, r5
 80067bc:	f7f9 fec8 	bl	8000550 <__aeabi_dmul>
 80067c0:	a373      	add	r3, pc, #460	; (adr r3, 8006990 <__ieee754_pow+0x728>)
 80067c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c6:	f7f9 fd0d 	bl	80001e4 <__adddf3>
 80067ca:	4622      	mov	r2, r4
 80067cc:	462b      	mov	r3, r5
 80067ce:	f7f9 febf 	bl	8000550 <__aeabi_dmul>
 80067d2:	a371      	add	r3, pc, #452	; (adr r3, 8006998 <__ieee754_pow+0x730>)
 80067d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d8:	f7f9 fd04 	bl	80001e4 <__adddf3>
 80067dc:	4622      	mov	r2, r4
 80067de:	4606      	mov	r6, r0
 80067e0:	460f      	mov	r7, r1
 80067e2:	462b      	mov	r3, r5
 80067e4:	4620      	mov	r0, r4
 80067e6:	4629      	mov	r1, r5
 80067e8:	f7f9 feb2 	bl	8000550 <__aeabi_dmul>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	4630      	mov	r0, r6
 80067f2:	4639      	mov	r1, r7
 80067f4:	f7f9 feac 	bl	8000550 <__aeabi_dmul>
 80067f8:	4642      	mov	r2, r8
 80067fa:	4604      	mov	r4, r0
 80067fc:	460d      	mov	r5, r1
 80067fe:	464b      	mov	r3, r9
 8006800:	ec51 0b18 	vmov	r0, r1, d8
 8006804:	f7f9 fcee 	bl	80001e4 <__adddf3>
 8006808:	ec53 2b19 	vmov	r2, r3, d9
 800680c:	f7f9 fea0 	bl	8000550 <__aeabi_dmul>
 8006810:	4622      	mov	r2, r4
 8006812:	462b      	mov	r3, r5
 8006814:	f7f9 fce6 	bl	80001e4 <__adddf3>
 8006818:	4642      	mov	r2, r8
 800681a:	4682      	mov	sl, r0
 800681c:	468b      	mov	fp, r1
 800681e:	464b      	mov	r3, r9
 8006820:	4640      	mov	r0, r8
 8006822:	4649      	mov	r1, r9
 8006824:	f7f9 fe94 	bl	8000550 <__aeabi_dmul>
 8006828:	4b6b      	ldr	r3, [pc, #428]	; (80069d8 <__ieee754_pow+0x770>)
 800682a:	2200      	movs	r2, #0
 800682c:	4606      	mov	r6, r0
 800682e:	460f      	mov	r7, r1
 8006830:	f7f9 fcd8 	bl	80001e4 <__adddf3>
 8006834:	4652      	mov	r2, sl
 8006836:	465b      	mov	r3, fp
 8006838:	f7f9 fcd4 	bl	80001e4 <__adddf3>
 800683c:	2000      	movs	r0, #0
 800683e:	4604      	mov	r4, r0
 8006840:	460d      	mov	r5, r1
 8006842:	4602      	mov	r2, r0
 8006844:	460b      	mov	r3, r1
 8006846:	4640      	mov	r0, r8
 8006848:	4649      	mov	r1, r9
 800684a:	f7f9 fe81 	bl	8000550 <__aeabi_dmul>
 800684e:	4b62      	ldr	r3, [pc, #392]	; (80069d8 <__ieee754_pow+0x770>)
 8006850:	4680      	mov	r8, r0
 8006852:	4689      	mov	r9, r1
 8006854:	2200      	movs	r2, #0
 8006856:	4620      	mov	r0, r4
 8006858:	4629      	mov	r1, r5
 800685a:	f7f9 fcc1 	bl	80001e0 <__aeabi_dsub>
 800685e:	4632      	mov	r2, r6
 8006860:	463b      	mov	r3, r7
 8006862:	f7f9 fcbd 	bl	80001e0 <__aeabi_dsub>
 8006866:	4602      	mov	r2, r0
 8006868:	460b      	mov	r3, r1
 800686a:	4650      	mov	r0, sl
 800686c:	4659      	mov	r1, fp
 800686e:	f7f9 fcb7 	bl	80001e0 <__aeabi_dsub>
 8006872:	ec53 2b18 	vmov	r2, r3, d8
 8006876:	f7f9 fe6b 	bl	8000550 <__aeabi_dmul>
 800687a:	4622      	mov	r2, r4
 800687c:	4606      	mov	r6, r0
 800687e:	460f      	mov	r7, r1
 8006880:	462b      	mov	r3, r5
 8006882:	ec51 0b19 	vmov	r0, r1, d9
 8006886:	f7f9 fe63 	bl	8000550 <__aeabi_dmul>
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
 800688e:	4630      	mov	r0, r6
 8006890:	4639      	mov	r1, r7
 8006892:	f7f9 fca7 	bl	80001e4 <__adddf3>
 8006896:	4606      	mov	r6, r0
 8006898:	460f      	mov	r7, r1
 800689a:	4602      	mov	r2, r0
 800689c:	460b      	mov	r3, r1
 800689e:	4640      	mov	r0, r8
 80068a0:	4649      	mov	r1, r9
 80068a2:	f7f9 fc9f 	bl	80001e4 <__adddf3>
 80068a6:	a33e      	add	r3, pc, #248	; (adr r3, 80069a0 <__ieee754_pow+0x738>)
 80068a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ac:	2000      	movs	r0, #0
 80068ae:	4604      	mov	r4, r0
 80068b0:	460d      	mov	r5, r1
 80068b2:	f7f9 fe4d 	bl	8000550 <__aeabi_dmul>
 80068b6:	4642      	mov	r2, r8
 80068b8:	ec41 0b18 	vmov	d8, r0, r1
 80068bc:	464b      	mov	r3, r9
 80068be:	4620      	mov	r0, r4
 80068c0:	4629      	mov	r1, r5
 80068c2:	f7f9 fc8d 	bl	80001e0 <__aeabi_dsub>
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	4630      	mov	r0, r6
 80068cc:	4639      	mov	r1, r7
 80068ce:	f7f9 fc87 	bl	80001e0 <__aeabi_dsub>
 80068d2:	a335      	add	r3, pc, #212	; (adr r3, 80069a8 <__ieee754_pow+0x740>)
 80068d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d8:	f7f9 fe3a 	bl	8000550 <__aeabi_dmul>
 80068dc:	a334      	add	r3, pc, #208	; (adr r3, 80069b0 <__ieee754_pow+0x748>)
 80068de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e2:	4606      	mov	r6, r0
 80068e4:	460f      	mov	r7, r1
 80068e6:	4620      	mov	r0, r4
 80068e8:	4629      	mov	r1, r5
 80068ea:	f7f9 fe31 	bl	8000550 <__aeabi_dmul>
 80068ee:	4602      	mov	r2, r0
 80068f0:	460b      	mov	r3, r1
 80068f2:	4630      	mov	r0, r6
 80068f4:	4639      	mov	r1, r7
 80068f6:	f7f9 fc75 	bl	80001e4 <__adddf3>
 80068fa:	9a07      	ldr	r2, [sp, #28]
 80068fc:	4b37      	ldr	r3, [pc, #220]	; (80069dc <__ieee754_pow+0x774>)
 80068fe:	4413      	add	r3, r2
 8006900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006904:	f7f9 fc6e 	bl	80001e4 <__adddf3>
 8006908:	4682      	mov	sl, r0
 800690a:	9805      	ldr	r0, [sp, #20]
 800690c:	468b      	mov	fp, r1
 800690e:	f7f9 fdb5 	bl	800047c <__aeabi_i2d>
 8006912:	9a07      	ldr	r2, [sp, #28]
 8006914:	4b32      	ldr	r3, [pc, #200]	; (80069e0 <__ieee754_pow+0x778>)
 8006916:	4413      	add	r3, r2
 8006918:	e9d3 8900 	ldrd	r8, r9, [r3]
 800691c:	4606      	mov	r6, r0
 800691e:	460f      	mov	r7, r1
 8006920:	4652      	mov	r2, sl
 8006922:	465b      	mov	r3, fp
 8006924:	ec51 0b18 	vmov	r0, r1, d8
 8006928:	f7f9 fc5c 	bl	80001e4 <__adddf3>
 800692c:	4642      	mov	r2, r8
 800692e:	464b      	mov	r3, r9
 8006930:	f7f9 fc58 	bl	80001e4 <__adddf3>
 8006934:	4632      	mov	r2, r6
 8006936:	463b      	mov	r3, r7
 8006938:	f7f9 fc54 	bl	80001e4 <__adddf3>
 800693c:	2000      	movs	r0, #0
 800693e:	4632      	mov	r2, r6
 8006940:	463b      	mov	r3, r7
 8006942:	4604      	mov	r4, r0
 8006944:	460d      	mov	r5, r1
 8006946:	f7f9 fc4b 	bl	80001e0 <__aeabi_dsub>
 800694a:	4642      	mov	r2, r8
 800694c:	464b      	mov	r3, r9
 800694e:	f7f9 fc47 	bl	80001e0 <__aeabi_dsub>
 8006952:	ec53 2b18 	vmov	r2, r3, d8
 8006956:	f7f9 fc43 	bl	80001e0 <__aeabi_dsub>
 800695a:	4602      	mov	r2, r0
 800695c:	460b      	mov	r3, r1
 800695e:	4650      	mov	r0, sl
 8006960:	4659      	mov	r1, fp
 8006962:	e610      	b.n	8006586 <__ieee754_pow+0x31e>
 8006964:	2401      	movs	r4, #1
 8006966:	e6a1      	b.n	80066ac <__ieee754_pow+0x444>
 8006968:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80069b8 <__ieee754_pow+0x750>
 800696c:	e617      	b.n	800659e <__ieee754_pow+0x336>
 800696e:	bf00      	nop
 8006970:	4a454eef 	.word	0x4a454eef
 8006974:	3fca7e28 	.word	0x3fca7e28
 8006978:	93c9db65 	.word	0x93c9db65
 800697c:	3fcd864a 	.word	0x3fcd864a
 8006980:	a91d4101 	.word	0xa91d4101
 8006984:	3fd17460 	.word	0x3fd17460
 8006988:	518f264d 	.word	0x518f264d
 800698c:	3fd55555 	.word	0x3fd55555
 8006990:	db6fabff 	.word	0xdb6fabff
 8006994:	3fdb6db6 	.word	0x3fdb6db6
 8006998:	33333303 	.word	0x33333303
 800699c:	3fe33333 	.word	0x3fe33333
 80069a0:	e0000000 	.word	0xe0000000
 80069a4:	3feec709 	.word	0x3feec709
 80069a8:	dc3a03fd 	.word	0xdc3a03fd
 80069ac:	3feec709 	.word	0x3feec709
 80069b0:	145b01f5 	.word	0x145b01f5
 80069b4:	be3e2fe0 	.word	0xbe3e2fe0
 80069b8:	00000000 	.word	0x00000000
 80069bc:	3ff00000 	.word	0x3ff00000
 80069c0:	7ff00000 	.word	0x7ff00000
 80069c4:	43400000 	.word	0x43400000
 80069c8:	0003988e 	.word	0x0003988e
 80069cc:	000bb679 	.word	0x000bb679
 80069d0:	08006ff8 	.word	0x08006ff8
 80069d4:	3ff00000 	.word	0x3ff00000
 80069d8:	40080000 	.word	0x40080000
 80069dc:	08007018 	.word	0x08007018
 80069e0:	08007008 	.word	0x08007008
 80069e4:	a3b5      	add	r3, pc, #724	; (adr r3, 8006cbc <__ieee754_pow+0xa54>)
 80069e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ea:	4640      	mov	r0, r8
 80069ec:	4649      	mov	r1, r9
 80069ee:	f7f9 fbf9 	bl	80001e4 <__adddf3>
 80069f2:	4622      	mov	r2, r4
 80069f4:	ec41 0b1a 	vmov	d10, r0, r1
 80069f8:	462b      	mov	r3, r5
 80069fa:	4630      	mov	r0, r6
 80069fc:	4639      	mov	r1, r7
 80069fe:	f7f9 fbef 	bl	80001e0 <__aeabi_dsub>
 8006a02:	4602      	mov	r2, r0
 8006a04:	460b      	mov	r3, r1
 8006a06:	ec51 0b1a 	vmov	r0, r1, d10
 8006a0a:	f7fa f831 	bl	8000a70 <__aeabi_dcmpgt>
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	f47f ae04 	bne.w	800661c <__ieee754_pow+0x3b4>
 8006a14:	4aa4      	ldr	r2, [pc, #656]	; (8006ca8 <__ieee754_pow+0xa40>)
 8006a16:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	f340 8108 	ble.w	8006c30 <__ieee754_pow+0x9c8>
 8006a20:	151b      	asrs	r3, r3, #20
 8006a22:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006a26:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006a2a:	fa4a f303 	asr.w	r3, sl, r3
 8006a2e:	445b      	add	r3, fp
 8006a30:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006a34:	4e9d      	ldr	r6, [pc, #628]	; (8006cac <__ieee754_pow+0xa44>)
 8006a36:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006a3a:	4116      	asrs	r6, r2
 8006a3c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006a40:	2000      	movs	r0, #0
 8006a42:	ea23 0106 	bic.w	r1, r3, r6
 8006a46:	f1c2 0214 	rsb	r2, r2, #20
 8006a4a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006a4e:	fa4a fa02 	asr.w	sl, sl, r2
 8006a52:	f1bb 0f00 	cmp.w	fp, #0
 8006a56:	4602      	mov	r2, r0
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	4629      	mov	r1, r5
 8006a5e:	bfb8      	it	lt
 8006a60:	f1ca 0a00 	rsblt	sl, sl, #0
 8006a64:	f7f9 fbbc 	bl	80001e0 <__aeabi_dsub>
 8006a68:	ec41 0b19 	vmov	d9, r0, r1
 8006a6c:	4642      	mov	r2, r8
 8006a6e:	464b      	mov	r3, r9
 8006a70:	ec51 0b19 	vmov	r0, r1, d9
 8006a74:	f7f9 fbb6 	bl	80001e4 <__adddf3>
 8006a78:	a37b      	add	r3, pc, #492	; (adr r3, 8006c68 <__ieee754_pow+0xa00>)
 8006a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7e:	2000      	movs	r0, #0
 8006a80:	4604      	mov	r4, r0
 8006a82:	460d      	mov	r5, r1
 8006a84:	f7f9 fd64 	bl	8000550 <__aeabi_dmul>
 8006a88:	ec53 2b19 	vmov	r2, r3, d9
 8006a8c:	4606      	mov	r6, r0
 8006a8e:	460f      	mov	r7, r1
 8006a90:	4620      	mov	r0, r4
 8006a92:	4629      	mov	r1, r5
 8006a94:	f7f9 fba4 	bl	80001e0 <__aeabi_dsub>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	4640      	mov	r0, r8
 8006a9e:	4649      	mov	r1, r9
 8006aa0:	f7f9 fb9e 	bl	80001e0 <__aeabi_dsub>
 8006aa4:	a372      	add	r3, pc, #456	; (adr r3, 8006c70 <__ieee754_pow+0xa08>)
 8006aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aaa:	f7f9 fd51 	bl	8000550 <__aeabi_dmul>
 8006aae:	a372      	add	r3, pc, #456	; (adr r3, 8006c78 <__ieee754_pow+0xa10>)
 8006ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab4:	4680      	mov	r8, r0
 8006ab6:	4689      	mov	r9, r1
 8006ab8:	4620      	mov	r0, r4
 8006aba:	4629      	mov	r1, r5
 8006abc:	f7f9 fd48 	bl	8000550 <__aeabi_dmul>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	4640      	mov	r0, r8
 8006ac6:	4649      	mov	r1, r9
 8006ac8:	f7f9 fb8c 	bl	80001e4 <__adddf3>
 8006acc:	4604      	mov	r4, r0
 8006ace:	460d      	mov	r5, r1
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	4639      	mov	r1, r7
 8006ad8:	f7f9 fb84 	bl	80001e4 <__adddf3>
 8006adc:	4632      	mov	r2, r6
 8006ade:	463b      	mov	r3, r7
 8006ae0:	4680      	mov	r8, r0
 8006ae2:	4689      	mov	r9, r1
 8006ae4:	f7f9 fb7c 	bl	80001e0 <__aeabi_dsub>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	460b      	mov	r3, r1
 8006aec:	4620      	mov	r0, r4
 8006aee:	4629      	mov	r1, r5
 8006af0:	f7f9 fb76 	bl	80001e0 <__aeabi_dsub>
 8006af4:	4642      	mov	r2, r8
 8006af6:	4606      	mov	r6, r0
 8006af8:	460f      	mov	r7, r1
 8006afa:	464b      	mov	r3, r9
 8006afc:	4640      	mov	r0, r8
 8006afe:	4649      	mov	r1, r9
 8006b00:	f7f9 fd26 	bl	8000550 <__aeabi_dmul>
 8006b04:	a35e      	add	r3, pc, #376	; (adr r3, 8006c80 <__ieee754_pow+0xa18>)
 8006b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	460d      	mov	r5, r1
 8006b0e:	f7f9 fd1f 	bl	8000550 <__aeabi_dmul>
 8006b12:	a35d      	add	r3, pc, #372	; (adr r3, 8006c88 <__ieee754_pow+0xa20>)
 8006b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b18:	f7f9 fb62 	bl	80001e0 <__aeabi_dsub>
 8006b1c:	4622      	mov	r2, r4
 8006b1e:	462b      	mov	r3, r5
 8006b20:	f7f9 fd16 	bl	8000550 <__aeabi_dmul>
 8006b24:	a35a      	add	r3, pc, #360	; (adr r3, 8006c90 <__ieee754_pow+0xa28>)
 8006b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2a:	f7f9 fb5b 	bl	80001e4 <__adddf3>
 8006b2e:	4622      	mov	r2, r4
 8006b30:	462b      	mov	r3, r5
 8006b32:	f7f9 fd0d 	bl	8000550 <__aeabi_dmul>
 8006b36:	a358      	add	r3, pc, #352	; (adr r3, 8006c98 <__ieee754_pow+0xa30>)
 8006b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3c:	f7f9 fb50 	bl	80001e0 <__aeabi_dsub>
 8006b40:	4622      	mov	r2, r4
 8006b42:	462b      	mov	r3, r5
 8006b44:	f7f9 fd04 	bl	8000550 <__aeabi_dmul>
 8006b48:	a355      	add	r3, pc, #340	; (adr r3, 8006ca0 <__ieee754_pow+0xa38>)
 8006b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4e:	f7f9 fb49 	bl	80001e4 <__adddf3>
 8006b52:	4622      	mov	r2, r4
 8006b54:	462b      	mov	r3, r5
 8006b56:	f7f9 fcfb 	bl	8000550 <__aeabi_dmul>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4640      	mov	r0, r8
 8006b60:	4649      	mov	r1, r9
 8006b62:	f7f9 fb3d 	bl	80001e0 <__aeabi_dsub>
 8006b66:	4604      	mov	r4, r0
 8006b68:	460d      	mov	r5, r1
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4640      	mov	r0, r8
 8006b70:	4649      	mov	r1, r9
 8006b72:	f7f9 fced 	bl	8000550 <__aeabi_dmul>
 8006b76:	2200      	movs	r2, #0
 8006b78:	ec41 0b19 	vmov	d9, r0, r1
 8006b7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b80:	4620      	mov	r0, r4
 8006b82:	4629      	mov	r1, r5
 8006b84:	f7f9 fb2c 	bl	80001e0 <__aeabi_dsub>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	ec51 0b19 	vmov	r0, r1, d9
 8006b90:	f7f9 fe08 	bl	80007a4 <__aeabi_ddiv>
 8006b94:	4632      	mov	r2, r6
 8006b96:	4604      	mov	r4, r0
 8006b98:	460d      	mov	r5, r1
 8006b9a:	463b      	mov	r3, r7
 8006b9c:	4640      	mov	r0, r8
 8006b9e:	4649      	mov	r1, r9
 8006ba0:	f7f9 fcd6 	bl	8000550 <__aeabi_dmul>
 8006ba4:	4632      	mov	r2, r6
 8006ba6:	463b      	mov	r3, r7
 8006ba8:	f7f9 fb1c 	bl	80001e4 <__adddf3>
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	4629      	mov	r1, r5
 8006bb4:	f7f9 fb14 	bl	80001e0 <__aeabi_dsub>
 8006bb8:	4642      	mov	r2, r8
 8006bba:	464b      	mov	r3, r9
 8006bbc:	f7f9 fb10 	bl	80001e0 <__aeabi_dsub>
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	493a      	ldr	r1, [pc, #232]	; (8006cb0 <__ieee754_pow+0xa48>)
 8006bc6:	2000      	movs	r0, #0
 8006bc8:	f7f9 fb0a 	bl	80001e0 <__aeabi_dsub>
 8006bcc:	ec41 0b10 	vmov	d0, r0, r1
 8006bd0:	ee10 3a90 	vmov	r3, s1
 8006bd4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006bd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bdc:	da2b      	bge.n	8006c36 <__ieee754_pow+0x9ce>
 8006bde:	4650      	mov	r0, sl
 8006be0:	f000 f966 	bl	8006eb0 <scalbn>
 8006be4:	ec51 0b10 	vmov	r0, r1, d0
 8006be8:	ec53 2b18 	vmov	r2, r3, d8
 8006bec:	f7ff bbed 	b.w	80063ca <__ieee754_pow+0x162>
 8006bf0:	4b30      	ldr	r3, [pc, #192]	; (8006cb4 <__ieee754_pow+0xa4c>)
 8006bf2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006bf6:	429e      	cmp	r6, r3
 8006bf8:	f77f af0c 	ble.w	8006a14 <__ieee754_pow+0x7ac>
 8006bfc:	4b2e      	ldr	r3, [pc, #184]	; (8006cb8 <__ieee754_pow+0xa50>)
 8006bfe:	440b      	add	r3, r1
 8006c00:	4303      	orrs	r3, r0
 8006c02:	d009      	beq.n	8006c18 <__ieee754_pow+0x9b0>
 8006c04:	ec51 0b18 	vmov	r0, r1, d8
 8006c08:	2200      	movs	r2, #0
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	f7f9 ff12 	bl	8000a34 <__aeabi_dcmplt>
 8006c10:	3800      	subs	r0, #0
 8006c12:	bf18      	it	ne
 8006c14:	2001      	movne	r0, #1
 8006c16:	e447      	b.n	80064a8 <__ieee754_pow+0x240>
 8006c18:	4622      	mov	r2, r4
 8006c1a:	462b      	mov	r3, r5
 8006c1c:	f7f9 fae0 	bl	80001e0 <__aeabi_dsub>
 8006c20:	4642      	mov	r2, r8
 8006c22:	464b      	mov	r3, r9
 8006c24:	f7f9 ff1a 	bl	8000a5c <__aeabi_dcmpge>
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	f43f aef3 	beq.w	8006a14 <__ieee754_pow+0x7ac>
 8006c2e:	e7e9      	b.n	8006c04 <__ieee754_pow+0x99c>
 8006c30:	f04f 0a00 	mov.w	sl, #0
 8006c34:	e71a      	b.n	8006a6c <__ieee754_pow+0x804>
 8006c36:	ec51 0b10 	vmov	r0, r1, d0
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	e7d4      	b.n	8006be8 <__ieee754_pow+0x980>
 8006c3e:	491c      	ldr	r1, [pc, #112]	; (8006cb0 <__ieee754_pow+0xa48>)
 8006c40:	2000      	movs	r0, #0
 8006c42:	f7ff bb30 	b.w	80062a6 <__ieee754_pow+0x3e>
 8006c46:	2000      	movs	r0, #0
 8006c48:	2100      	movs	r1, #0
 8006c4a:	f7ff bb2c 	b.w	80062a6 <__ieee754_pow+0x3e>
 8006c4e:	4630      	mov	r0, r6
 8006c50:	4639      	mov	r1, r7
 8006c52:	f7ff bb28 	b.w	80062a6 <__ieee754_pow+0x3e>
 8006c56:	9204      	str	r2, [sp, #16]
 8006c58:	f7ff bb7a 	b.w	8006350 <__ieee754_pow+0xe8>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	f7ff bb64 	b.w	800632a <__ieee754_pow+0xc2>
 8006c62:	bf00      	nop
 8006c64:	f3af 8000 	nop.w
 8006c68:	00000000 	.word	0x00000000
 8006c6c:	3fe62e43 	.word	0x3fe62e43
 8006c70:	fefa39ef 	.word	0xfefa39ef
 8006c74:	3fe62e42 	.word	0x3fe62e42
 8006c78:	0ca86c39 	.word	0x0ca86c39
 8006c7c:	be205c61 	.word	0xbe205c61
 8006c80:	72bea4d0 	.word	0x72bea4d0
 8006c84:	3e663769 	.word	0x3e663769
 8006c88:	c5d26bf1 	.word	0xc5d26bf1
 8006c8c:	3ebbbd41 	.word	0x3ebbbd41
 8006c90:	af25de2c 	.word	0xaf25de2c
 8006c94:	3f11566a 	.word	0x3f11566a
 8006c98:	16bebd93 	.word	0x16bebd93
 8006c9c:	3f66c16c 	.word	0x3f66c16c
 8006ca0:	5555553e 	.word	0x5555553e
 8006ca4:	3fc55555 	.word	0x3fc55555
 8006ca8:	3fe00000 	.word	0x3fe00000
 8006cac:	000fffff 	.word	0x000fffff
 8006cb0:	3ff00000 	.word	0x3ff00000
 8006cb4:	4090cbff 	.word	0x4090cbff
 8006cb8:	3f6f3400 	.word	0x3f6f3400
 8006cbc:	652b82fe 	.word	0x652b82fe
 8006cc0:	3c971547 	.word	0x3c971547

08006cc4 <__ieee754_sqrt>:
 8006cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc8:	ec55 4b10 	vmov	r4, r5, d0
 8006ccc:	4e55      	ldr	r6, [pc, #340]	; (8006e24 <__ieee754_sqrt+0x160>)
 8006cce:	43ae      	bics	r6, r5
 8006cd0:	ee10 0a10 	vmov	r0, s0
 8006cd4:	ee10 3a10 	vmov	r3, s0
 8006cd8:	462a      	mov	r2, r5
 8006cda:	4629      	mov	r1, r5
 8006cdc:	d110      	bne.n	8006d00 <__ieee754_sqrt+0x3c>
 8006cde:	ee10 2a10 	vmov	r2, s0
 8006ce2:	462b      	mov	r3, r5
 8006ce4:	f7f9 fc34 	bl	8000550 <__aeabi_dmul>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	460b      	mov	r3, r1
 8006cec:	4620      	mov	r0, r4
 8006cee:	4629      	mov	r1, r5
 8006cf0:	f7f9 fa78 	bl	80001e4 <__adddf3>
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	460d      	mov	r5, r1
 8006cf8:	ec45 4b10 	vmov	d0, r4, r5
 8006cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d00:	2d00      	cmp	r5, #0
 8006d02:	dc10      	bgt.n	8006d26 <__ieee754_sqrt+0x62>
 8006d04:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006d08:	4330      	orrs	r0, r6
 8006d0a:	d0f5      	beq.n	8006cf8 <__ieee754_sqrt+0x34>
 8006d0c:	b15d      	cbz	r5, 8006d26 <__ieee754_sqrt+0x62>
 8006d0e:	ee10 2a10 	vmov	r2, s0
 8006d12:	462b      	mov	r3, r5
 8006d14:	ee10 0a10 	vmov	r0, s0
 8006d18:	f7f9 fa62 	bl	80001e0 <__aeabi_dsub>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	460b      	mov	r3, r1
 8006d20:	f7f9 fd40 	bl	80007a4 <__aeabi_ddiv>
 8006d24:	e7e6      	b.n	8006cf4 <__ieee754_sqrt+0x30>
 8006d26:	1512      	asrs	r2, r2, #20
 8006d28:	d074      	beq.n	8006e14 <__ieee754_sqrt+0x150>
 8006d2a:	07d4      	lsls	r4, r2, #31
 8006d2c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006d30:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006d34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006d38:	bf5e      	ittt	pl
 8006d3a:	0fda      	lsrpl	r2, r3, #31
 8006d3c:	005b      	lslpl	r3, r3, #1
 8006d3e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8006d42:	2400      	movs	r4, #0
 8006d44:	0fda      	lsrs	r2, r3, #31
 8006d46:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006d4a:	107f      	asrs	r7, r7, #1
 8006d4c:	005b      	lsls	r3, r3, #1
 8006d4e:	2516      	movs	r5, #22
 8006d50:	4620      	mov	r0, r4
 8006d52:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006d56:	1886      	adds	r6, r0, r2
 8006d58:	428e      	cmp	r6, r1
 8006d5a:	bfde      	ittt	le
 8006d5c:	1b89      	suble	r1, r1, r6
 8006d5e:	18b0      	addle	r0, r6, r2
 8006d60:	18a4      	addle	r4, r4, r2
 8006d62:	0049      	lsls	r1, r1, #1
 8006d64:	3d01      	subs	r5, #1
 8006d66:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8006d6a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006d6e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006d72:	d1f0      	bne.n	8006d56 <__ieee754_sqrt+0x92>
 8006d74:	462a      	mov	r2, r5
 8006d76:	f04f 0e20 	mov.w	lr, #32
 8006d7a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006d7e:	4281      	cmp	r1, r0
 8006d80:	eb06 0c05 	add.w	ip, r6, r5
 8006d84:	dc02      	bgt.n	8006d8c <__ieee754_sqrt+0xc8>
 8006d86:	d113      	bne.n	8006db0 <__ieee754_sqrt+0xec>
 8006d88:	459c      	cmp	ip, r3
 8006d8a:	d811      	bhi.n	8006db0 <__ieee754_sqrt+0xec>
 8006d8c:	f1bc 0f00 	cmp.w	ip, #0
 8006d90:	eb0c 0506 	add.w	r5, ip, r6
 8006d94:	da43      	bge.n	8006e1e <__ieee754_sqrt+0x15a>
 8006d96:	2d00      	cmp	r5, #0
 8006d98:	db41      	blt.n	8006e1e <__ieee754_sqrt+0x15a>
 8006d9a:	f100 0801 	add.w	r8, r0, #1
 8006d9e:	1a09      	subs	r1, r1, r0
 8006da0:	459c      	cmp	ip, r3
 8006da2:	bf88      	it	hi
 8006da4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006da8:	eba3 030c 	sub.w	r3, r3, ip
 8006dac:	4432      	add	r2, r6
 8006dae:	4640      	mov	r0, r8
 8006db0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006db4:	f1be 0e01 	subs.w	lr, lr, #1
 8006db8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006dbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006dc0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006dc4:	d1db      	bne.n	8006d7e <__ieee754_sqrt+0xba>
 8006dc6:	430b      	orrs	r3, r1
 8006dc8:	d006      	beq.n	8006dd8 <__ieee754_sqrt+0x114>
 8006dca:	1c50      	adds	r0, r2, #1
 8006dcc:	bf13      	iteet	ne
 8006dce:	3201      	addne	r2, #1
 8006dd0:	3401      	addeq	r4, #1
 8006dd2:	4672      	moveq	r2, lr
 8006dd4:	f022 0201 	bicne.w	r2, r2, #1
 8006dd8:	1063      	asrs	r3, r4, #1
 8006dda:	0852      	lsrs	r2, r2, #1
 8006ddc:	07e1      	lsls	r1, r4, #31
 8006dde:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006de2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006de6:	bf48      	it	mi
 8006de8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006dec:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006df0:	4614      	mov	r4, r2
 8006df2:	e781      	b.n	8006cf8 <__ieee754_sqrt+0x34>
 8006df4:	0ad9      	lsrs	r1, r3, #11
 8006df6:	3815      	subs	r0, #21
 8006df8:	055b      	lsls	r3, r3, #21
 8006dfa:	2900      	cmp	r1, #0
 8006dfc:	d0fa      	beq.n	8006df4 <__ieee754_sqrt+0x130>
 8006dfe:	02cd      	lsls	r5, r1, #11
 8006e00:	d50a      	bpl.n	8006e18 <__ieee754_sqrt+0x154>
 8006e02:	f1c2 0420 	rsb	r4, r2, #32
 8006e06:	fa23 f404 	lsr.w	r4, r3, r4
 8006e0a:	1e55      	subs	r5, r2, #1
 8006e0c:	4093      	lsls	r3, r2
 8006e0e:	4321      	orrs	r1, r4
 8006e10:	1b42      	subs	r2, r0, r5
 8006e12:	e78a      	b.n	8006d2a <__ieee754_sqrt+0x66>
 8006e14:	4610      	mov	r0, r2
 8006e16:	e7f0      	b.n	8006dfa <__ieee754_sqrt+0x136>
 8006e18:	0049      	lsls	r1, r1, #1
 8006e1a:	3201      	adds	r2, #1
 8006e1c:	e7ef      	b.n	8006dfe <__ieee754_sqrt+0x13a>
 8006e1e:	4680      	mov	r8, r0
 8006e20:	e7bd      	b.n	8006d9e <__ieee754_sqrt+0xda>
 8006e22:	bf00      	nop
 8006e24:	7ff00000 	.word	0x7ff00000

08006e28 <with_errno>:
 8006e28:	b570      	push	{r4, r5, r6, lr}
 8006e2a:	4604      	mov	r4, r0
 8006e2c:	460d      	mov	r5, r1
 8006e2e:	4616      	mov	r6, r2
 8006e30:	f7fe ff9a 	bl	8005d68 <__errno>
 8006e34:	4629      	mov	r1, r5
 8006e36:	6006      	str	r6, [r0, #0]
 8006e38:	4620      	mov	r0, r4
 8006e3a:	bd70      	pop	{r4, r5, r6, pc}

08006e3c <xflow>:
 8006e3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e3e:	4614      	mov	r4, r2
 8006e40:	461d      	mov	r5, r3
 8006e42:	b108      	cbz	r0, 8006e48 <xflow+0xc>
 8006e44:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006e48:	e9cd 2300 	strd	r2, r3, [sp]
 8006e4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e50:	4620      	mov	r0, r4
 8006e52:	4629      	mov	r1, r5
 8006e54:	f7f9 fb7c 	bl	8000550 <__aeabi_dmul>
 8006e58:	2222      	movs	r2, #34	; 0x22
 8006e5a:	b003      	add	sp, #12
 8006e5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e60:	f7ff bfe2 	b.w	8006e28 <with_errno>

08006e64 <__math_uflow>:
 8006e64:	b508      	push	{r3, lr}
 8006e66:	2200      	movs	r2, #0
 8006e68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e6c:	f7ff ffe6 	bl	8006e3c <xflow>
 8006e70:	ec41 0b10 	vmov	d0, r0, r1
 8006e74:	bd08      	pop	{r3, pc}

08006e76 <__math_oflow>:
 8006e76:	b508      	push	{r3, lr}
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006e7e:	f7ff ffdd 	bl	8006e3c <xflow>
 8006e82:	ec41 0b10 	vmov	d0, r0, r1
 8006e86:	bd08      	pop	{r3, pc}

08006e88 <fabs>:
 8006e88:	ec51 0b10 	vmov	r0, r1, d0
 8006e8c:	ee10 2a10 	vmov	r2, s0
 8006e90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006e94:	ec43 2b10 	vmov	d0, r2, r3
 8006e98:	4770      	bx	lr

08006e9a <finite>:
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	ed8d 0b00 	vstr	d0, [sp]
 8006ea0:	9801      	ldr	r0, [sp, #4]
 8006ea2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006ea6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006eaa:	0fc0      	lsrs	r0, r0, #31
 8006eac:	b002      	add	sp, #8
 8006eae:	4770      	bx	lr

08006eb0 <scalbn>:
 8006eb0:	b570      	push	{r4, r5, r6, lr}
 8006eb2:	ec55 4b10 	vmov	r4, r5, d0
 8006eb6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006eba:	4606      	mov	r6, r0
 8006ebc:	462b      	mov	r3, r5
 8006ebe:	b99a      	cbnz	r2, 8006ee8 <scalbn+0x38>
 8006ec0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006ec4:	4323      	orrs	r3, r4
 8006ec6:	d036      	beq.n	8006f36 <scalbn+0x86>
 8006ec8:	4b39      	ldr	r3, [pc, #228]	; (8006fb0 <scalbn+0x100>)
 8006eca:	4629      	mov	r1, r5
 8006ecc:	ee10 0a10 	vmov	r0, s0
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f7f9 fb3d 	bl	8000550 <__aeabi_dmul>
 8006ed6:	4b37      	ldr	r3, [pc, #220]	; (8006fb4 <scalbn+0x104>)
 8006ed8:	429e      	cmp	r6, r3
 8006eda:	4604      	mov	r4, r0
 8006edc:	460d      	mov	r5, r1
 8006ede:	da10      	bge.n	8006f02 <scalbn+0x52>
 8006ee0:	a32b      	add	r3, pc, #172	; (adr r3, 8006f90 <scalbn+0xe0>)
 8006ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee6:	e03a      	b.n	8006f5e <scalbn+0xae>
 8006ee8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006eec:	428a      	cmp	r2, r1
 8006eee:	d10c      	bne.n	8006f0a <scalbn+0x5a>
 8006ef0:	ee10 2a10 	vmov	r2, s0
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	4629      	mov	r1, r5
 8006ef8:	f7f9 f974 	bl	80001e4 <__adddf3>
 8006efc:	4604      	mov	r4, r0
 8006efe:	460d      	mov	r5, r1
 8006f00:	e019      	b.n	8006f36 <scalbn+0x86>
 8006f02:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006f06:	460b      	mov	r3, r1
 8006f08:	3a36      	subs	r2, #54	; 0x36
 8006f0a:	4432      	add	r2, r6
 8006f0c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006f10:	428a      	cmp	r2, r1
 8006f12:	dd08      	ble.n	8006f26 <scalbn+0x76>
 8006f14:	2d00      	cmp	r5, #0
 8006f16:	a120      	add	r1, pc, #128	; (adr r1, 8006f98 <scalbn+0xe8>)
 8006f18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f1c:	da1c      	bge.n	8006f58 <scalbn+0xa8>
 8006f1e:	a120      	add	r1, pc, #128	; (adr r1, 8006fa0 <scalbn+0xf0>)
 8006f20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f24:	e018      	b.n	8006f58 <scalbn+0xa8>
 8006f26:	2a00      	cmp	r2, #0
 8006f28:	dd08      	ble.n	8006f3c <scalbn+0x8c>
 8006f2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006f2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006f32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006f36:	ec45 4b10 	vmov	d0, r4, r5
 8006f3a:	bd70      	pop	{r4, r5, r6, pc}
 8006f3c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006f40:	da19      	bge.n	8006f76 <scalbn+0xc6>
 8006f42:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006f46:	429e      	cmp	r6, r3
 8006f48:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006f4c:	dd0a      	ble.n	8006f64 <scalbn+0xb4>
 8006f4e:	a112      	add	r1, pc, #72	; (adr r1, 8006f98 <scalbn+0xe8>)
 8006f50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1e2      	bne.n	8006f1e <scalbn+0x6e>
 8006f58:	a30f      	add	r3, pc, #60	; (adr r3, 8006f98 <scalbn+0xe8>)
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	f7f9 faf7 	bl	8000550 <__aeabi_dmul>
 8006f62:	e7cb      	b.n	8006efc <scalbn+0x4c>
 8006f64:	a10a      	add	r1, pc, #40	; (adr r1, 8006f90 <scalbn+0xe0>)
 8006f66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d0b8      	beq.n	8006ee0 <scalbn+0x30>
 8006f6e:	a10e      	add	r1, pc, #56	; (adr r1, 8006fa8 <scalbn+0xf8>)
 8006f70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f74:	e7b4      	b.n	8006ee0 <scalbn+0x30>
 8006f76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006f7a:	3236      	adds	r2, #54	; 0x36
 8006f7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006f80:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006f84:	4620      	mov	r0, r4
 8006f86:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <scalbn+0x108>)
 8006f88:	2200      	movs	r2, #0
 8006f8a:	e7e8      	b.n	8006f5e <scalbn+0xae>
 8006f8c:	f3af 8000 	nop.w
 8006f90:	c2f8f359 	.word	0xc2f8f359
 8006f94:	01a56e1f 	.word	0x01a56e1f
 8006f98:	8800759c 	.word	0x8800759c
 8006f9c:	7e37e43c 	.word	0x7e37e43c
 8006fa0:	8800759c 	.word	0x8800759c
 8006fa4:	fe37e43c 	.word	0xfe37e43c
 8006fa8:	c2f8f359 	.word	0xc2f8f359
 8006fac:	81a56e1f 	.word	0x81a56e1f
 8006fb0:	43500000 	.word	0x43500000
 8006fb4:	ffff3cb0 	.word	0xffff3cb0
 8006fb8:	3c900000 	.word	0x3c900000

08006fbc <_init>:
 8006fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fbe:	bf00      	nop
 8006fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fc2:	bc08      	pop	{r3}
 8006fc4:	469e      	mov	lr, r3
 8006fc6:	4770      	bx	lr

08006fc8 <_fini>:
 8006fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fca:	bf00      	nop
 8006fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fce:	bc08      	pop	{r3}
 8006fd0:	469e      	mov	lr, r3
 8006fd2:	4770      	bx	lr
