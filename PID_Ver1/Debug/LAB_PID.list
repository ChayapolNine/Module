
LAB_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6a4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  0800c840  0800c840  0001c840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca70  0800ca70  000203c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca70  0800ca70  0001ca70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca78  0800ca78  000203c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca78  0800ca78  0001ca78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca7c  0800ca7c  0001ca7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c8  20000000  0800ca80  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f80  200003c8  0800ce48  000203c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001348  0800ce48  00021348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015caf  00000000  00000000  000203f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a66  00000000  00000000  000360a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  00038b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  00039d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018caf  00000000  00000000  0003aeb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ea9  00000000  00000000  00053b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e8e9  00000000  00000000  0006aa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001092f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005828  00000000  00000000  0010934c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200003c8 	.word	0x200003c8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c824 	.word	0x0800c824

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200003cc 	.word	0x200003cc
 80001d4:	0800c824 	.word	0x0800c824

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b992 	b.w	8000edc <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f824 	bl	8000c0c <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__aeabi_d2ulz>:
 8000bd0:	b5d0      	push	{r4, r6, r7, lr}
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <__aeabi_d2ulz+0x34>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4606      	mov	r6, r0
 8000bd8:	460f      	mov	r7, r1
 8000bda:	f7ff fcb9 	bl	8000550 <__aeabi_dmul>
 8000bde:	f000 f97f 	bl	8000ee0 <__aeabi_d2uiz>
 8000be2:	4604      	mov	r4, r0
 8000be4:	f7ff fc3a 	bl	800045c <__aeabi_ui2d>
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <__aeabi_d2ulz+0x38>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	f7ff fcb0 	bl	8000550 <__aeabi_dmul>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	4630      	mov	r0, r6
 8000bf6:	4639      	mov	r1, r7
 8000bf8:	f7ff faf2 	bl	80001e0 <__aeabi_dsub>
 8000bfc:	f000 f970 	bl	8000ee0 <__aeabi_d2uiz>
 8000c00:	4621      	mov	r1, r4
 8000c02:	bdd0      	pop	{r4, r6, r7, pc}
 8000c04:	3df00000 	.word	0x3df00000
 8000c08:	41f00000 	.word	0x41f00000

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9d08      	ldr	r5, [sp, #32]
 8000c12:	4604      	mov	r4, r0
 8000c14:	468e      	mov	lr, r1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d14d      	bne.n	8000cb6 <__udivmoddi4+0xaa>
 8000c1a:	428a      	cmp	r2, r1
 8000c1c:	4694      	mov	ip, r2
 8000c1e:	d969      	bls.n	8000cf4 <__udivmoddi4+0xe8>
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	b152      	cbz	r2, 8000c3c <__udivmoddi4+0x30>
 8000c26:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2a:	f1c2 0120 	rsb	r1, r2, #32
 8000c2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c32:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c36:	ea41 0e03 	orr.w	lr, r1, r3
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c40:	0c21      	lsrs	r1, r4, #16
 8000c42:	fbbe f6f8 	udiv	r6, lr, r8
 8000c46:	fa1f f78c 	uxth.w	r7, ip
 8000c4a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c52:	fb06 f107 	mul.w	r1, r6, r7
 8000c56:	4299      	cmp	r1, r3
 8000c58:	d90a      	bls.n	8000c70 <__udivmoddi4+0x64>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c62:	f080 811f 	bcs.w	8000ea4 <__udivmoddi4+0x298>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 811c 	bls.w	8000ea4 <__udivmoddi4+0x298>
 8000c6c:	3e02      	subs	r6, #2
 8000c6e:	4463      	add	r3, ip
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c78:	fb08 3310 	mls	r3, r8, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 f707 	mul.w	r7, r0, r7
 8000c84:	42a7      	cmp	r7, r4
 8000c86:	d90a      	bls.n	8000c9e <__udivmoddi4+0x92>
 8000c88:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c90:	f080 810a 	bcs.w	8000ea8 <__udivmoddi4+0x29c>
 8000c94:	42a7      	cmp	r7, r4
 8000c96:	f240 8107 	bls.w	8000ea8 <__udivmoddi4+0x29c>
 8000c9a:	4464      	add	r4, ip
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca2:	1be4      	subs	r4, r4, r7
 8000ca4:	2600      	movs	r6, #0
 8000ca6:	b11d      	cbz	r5, 8000cb0 <__udivmoddi4+0xa4>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xc2>
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	f000 80ef 	beq.w	8000e9e <__udivmoddi4+0x292>
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc6:	4630      	mov	r0, r6
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f683 	clz	r6, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d14a      	bne.n	8000d6c <__udivmoddi4+0x160>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd4>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80f9 	bhi.w	8000ed2 <__udivmoddi4+0x2c6>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	469e      	mov	lr, r3
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa4>
 8000cee:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa4>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xec>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 8092 	bne.w	8000e26 <__udivmoddi4+0x21a>
 8000d02:	eba1 010c 	sub.w	r1, r1, ip
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f fe8c 	uxth.w	lr, ip
 8000d0e:	2601      	movs	r6, #1
 8000d10:	0c20      	lsrs	r0, r4, #16
 8000d12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d16:	fb07 1113 	mls	r1, r7, r3, r1
 8000d1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1e:	fb0e f003 	mul.w	r0, lr, r3
 8000d22:	4288      	cmp	r0, r1
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x12c>
 8000d26:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x12a>
 8000d30:	4288      	cmp	r0, r1
 8000d32:	f200 80cb 	bhi.w	8000ecc <__udivmoddi4+0x2c0>
 8000d36:	4643      	mov	r3, r8
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d40:	fb07 1110 	mls	r1, r7, r0, r1
 8000d44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d48:	fb0e fe00 	mul.w	lr, lr, r0
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x156>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d58:	d202      	bcs.n	8000d60 <__udivmoddi4+0x154>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f200 80bb 	bhi.w	8000ed6 <__udivmoddi4+0x2ca>
 8000d60:	4608      	mov	r0, r1
 8000d62:	eba4 040e 	sub.w	r4, r4, lr
 8000d66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d6a:	e79c      	b.n	8000ca6 <__udivmoddi4+0x9a>
 8000d6c:	f1c6 0720 	rsb	r7, r6, #32
 8000d70:	40b3      	lsls	r3, r6
 8000d72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d82:	431c      	orrs	r4, r3
 8000d84:	40f9      	lsrs	r1, r7
 8000d86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d92:	0c20      	lsrs	r0, r4, #16
 8000d94:	fa1f fe8c 	uxth.w	lr, ip
 8000d98:	fb09 1118 	mls	r1, r9, r8, r1
 8000d9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000da0:	fb08 f00e 	mul.w	r0, r8, lr
 8000da4:	4288      	cmp	r0, r1
 8000da6:	fa02 f206 	lsl.w	r2, r2, r6
 8000daa:	d90b      	bls.n	8000dc4 <__udivmoddi4+0x1b8>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db4:	f080 8088 	bcs.w	8000ec8 <__udivmoddi4+0x2bc>
 8000db8:	4288      	cmp	r0, r1
 8000dba:	f240 8085 	bls.w	8000ec8 <__udivmoddi4+0x2bc>
 8000dbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc2:	4461      	add	r1, ip
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dcc:	fb09 1110 	mls	r1, r9, r0, r1
 8000dd0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	458e      	cmp	lr, r1
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x1e2>
 8000ddc:	eb1c 0101 	adds.w	r1, ip, r1
 8000de0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de4:	d26c      	bcs.n	8000ec0 <__udivmoddi4+0x2b4>
 8000de6:	458e      	cmp	lr, r1
 8000de8:	d96a      	bls.n	8000ec0 <__udivmoddi4+0x2b4>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4461      	add	r1, ip
 8000dee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000df2:	fba0 9402 	umull	r9, r4, r0, r2
 8000df6:	eba1 010e 	sub.w	r1, r1, lr
 8000dfa:	42a1      	cmp	r1, r4
 8000dfc:	46c8      	mov	r8, r9
 8000dfe:	46a6      	mov	lr, r4
 8000e00:	d356      	bcc.n	8000eb0 <__udivmoddi4+0x2a4>
 8000e02:	d053      	beq.n	8000eac <__udivmoddi4+0x2a0>
 8000e04:	b15d      	cbz	r5, 8000e1e <__udivmoddi4+0x212>
 8000e06:	ebb3 0208 	subs.w	r2, r3, r8
 8000e0a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e12:	fa22 f306 	lsr.w	r3, r2, r6
 8000e16:	40f1      	lsrs	r1, r6
 8000e18:	431f      	orrs	r7, r3
 8000e1a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1e:	2600      	movs	r6, #0
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	f1c2 0320 	rsb	r3, r2, #32
 8000e2a:	40d8      	lsrs	r0, r3
 8000e2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e30:	fa21 f303 	lsr.w	r3, r1, r3
 8000e34:	4091      	lsls	r1, r2
 8000e36:	4301      	orrs	r1, r0
 8000e38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3c:	fa1f fe8c 	uxth.w	lr, ip
 8000e40:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e44:	fb07 3610 	mls	r6, r7, r0, r3
 8000e48:	0c0b      	lsrs	r3, r1, #16
 8000e4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e52:	429e      	cmp	r6, r3
 8000e54:	fa04 f402 	lsl.w	r4, r4, r2
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x260>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e62:	d22f      	bcs.n	8000ec4 <__udivmoddi4+0x2b8>
 8000e64:	429e      	cmp	r6, r3
 8000e66:	d92d      	bls.n	8000ec4 <__udivmoddi4+0x2b8>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4463      	add	r3, ip
 8000e6c:	1b9b      	subs	r3, r3, r6
 8000e6e:	b289      	uxth	r1, r1
 8000e70:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e74:	fb07 3316 	mls	r3, r7, r6, r3
 8000e78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e80:	428b      	cmp	r3, r1
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x28a>
 8000e84:	eb1c 0101 	adds.w	r1, ip, r1
 8000e88:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e8c:	d216      	bcs.n	8000ebc <__udivmoddi4+0x2b0>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d914      	bls.n	8000ebc <__udivmoddi4+0x2b0>
 8000e92:	3e02      	subs	r6, #2
 8000e94:	4461      	add	r1, ip
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e9c:	e738      	b.n	8000d10 <__udivmoddi4+0x104>
 8000e9e:	462e      	mov	r6, r5
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	e705      	b.n	8000cb0 <__udivmoddi4+0xa4>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	e6e3      	b.n	8000c70 <__udivmoddi4+0x64>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6f8      	b.n	8000c9e <__udivmoddi4+0x92>
 8000eac:	454b      	cmp	r3, r9
 8000eae:	d2a9      	bcs.n	8000e04 <__udivmoddi4+0x1f8>
 8000eb0:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb8:	3801      	subs	r0, #1
 8000eba:	e7a3      	b.n	8000e04 <__udivmoddi4+0x1f8>
 8000ebc:	4646      	mov	r6, r8
 8000ebe:	e7ea      	b.n	8000e96 <__udivmoddi4+0x28a>
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	e794      	b.n	8000dee <__udivmoddi4+0x1e2>
 8000ec4:	4640      	mov	r0, r8
 8000ec6:	e7d1      	b.n	8000e6c <__udivmoddi4+0x260>
 8000ec8:	46d0      	mov	r8, sl
 8000eca:	e77b      	b.n	8000dc4 <__udivmoddi4+0x1b8>
 8000ecc:	3b02      	subs	r3, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	e732      	b.n	8000d38 <__udivmoddi4+0x12c>
 8000ed2:	4630      	mov	r0, r6
 8000ed4:	e709      	b.n	8000cea <__udivmoddi4+0xde>
 8000ed6:	4464      	add	r4, ip
 8000ed8:	3802      	subs	r0, #2
 8000eda:	e742      	b.n	8000d62 <__udivmoddi4+0x156>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <__aeabi_d2uiz>:
 8000ee0:	004a      	lsls	r2, r1, #1
 8000ee2:	d211      	bcs.n	8000f08 <__aeabi_d2uiz+0x28>
 8000ee4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ee8:	d211      	bcs.n	8000f0e <__aeabi_d2uiz+0x2e>
 8000eea:	d50d      	bpl.n	8000f08 <__aeabi_d2uiz+0x28>
 8000eec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ef0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ef4:	d40e      	bmi.n	8000f14 <__aeabi_d2uiz+0x34>
 8000ef6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000efa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000efe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f02:	fa23 f002 	lsr.w	r0, r3, r2
 8000f06:	4770      	bx	lr
 8000f08:	f04f 0000 	mov.w	r0, #0
 8000f0c:	4770      	bx	lr
 8000f0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f12:	d102      	bne.n	8000f1a <__aeabi_d2uiz+0x3a>
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	4770      	bx	lr
 8000f1a:	f04f 0000 	mov.w	r0, #0
 8000f1e:	4770      	bx	lr

08000f20 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <modbus_1t5_Timeout+0x1c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	751a      	strb	r2, [r3, #20]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	200003e4 	.word	0x200003e4

08000f40 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <modbus_3t5_Timeout+0x1c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	755a      	strb	r2, [r3, #21]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	200003e4 	.word	0x200003e4

08000f60 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000f72:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8000f7a:	1c59      	adds	r1, r3, #1
 8000f7c:	b289      	uxth	r1, r1
 8000f7e:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8000f82:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f86:	d210      	bcs.n	8000faa <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68d8      	ldr	r0, [r3, #12]
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000f9a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000f9e:	4413      	add	r3, r2
 8000fa0:	3302      	adds	r3, #2
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f007 ff43 	bl	8008e30 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <modbus_UART_Recived+0x60>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200003e4 	.word	0x200003e4

08000fc4 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000fce:	4a24      	ldr	r2, [pc, #144]	; (8001060 <Modbus_init+0x9c>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <Modbus_init+0x9c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000fdc:	4b20      	ldr	r3, [pc, #128]	; (8001060 <Modbus_init+0x9c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	691b      	ldr	r3, [r3, #16]
 8000fe2:	4a20      	ldr	r2, [pc, #128]	; (8001064 <Modbus_init+0xa0>)
 8000fe4:	2114      	movs	r1, #20
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f007 f926 	bl	8008238 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000fec:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <Modbus_init+0x9c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	4a1d      	ldr	r2, [pc, #116]	; (8001068 <Modbus_init+0xa4>)
 8000ff4:	210e      	movs	r1, #14
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f007 f91e 	bl	8008238 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <Modbus_init+0x9c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	4a1a      	ldr	r2, [pc, #104]	; (800106c <Modbus_init+0xa8>)
 8001004:	2103      	movs	r1, #3
 8001006:	4618      	mov	r0, r3
 8001008:	f007 fe6a 	bl	8008ce0 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <Modbus_init+0x9c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	68d8      	ldr	r0, [r3, #12]
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <Modbus_init+0x9c>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <Modbus_init+0x9c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800101e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001022:	4413      	add	r3, r2
 8001024:	3302      	adds	r3, #2
 8001026:	2201      	movs	r2, #1
 8001028:	4619      	mov	r1, r3
 800102a:	f007 ff01 	bl	8008e30 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <Modbus_init+0x9c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b01      	cmp	r3, #1
 800103c:	d10c      	bne.n	8001058 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <Modbus_init+0x9c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	691b      	ldr	r3, [r3, #16]
 8001044:	4618      	mov	r0, r3
 8001046:	f006 f9a1 	bl	800738c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <Modbus_init+0x9c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f006 fbe0 	bl	8007818 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200003e4 	.word	0x200003e4
 8001064:	08000f21 	.word	0x08000f21
 8001068:	08000f41 	.word	0x08000f41
 800106c:	08000f61 	.word	0x08000f61

08001070 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 800107c:	23ff      	movs	r3, #255	; 0xff
 800107e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001080:	23ff      	movs	r3, #255	; 0xff
 8001082:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001084:	e013      	b.n	80010ae <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	607a      	str	r2, [r7, #4]
 800108c:	781a      	ldrb	r2, [r3, #0]
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	4053      	eors	r3, r2
 8001092:	b2db      	uxtb	r3, r3
 8001094:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <CRC16+0x64>)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4413      	add	r3, r2
 800109c:	781a      	ldrb	r2, [r3, #0]
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	4053      	eors	r3, r2
 80010a2:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80010a4:	4a0c      	ldr	r2, [pc, #48]	; (80010d8 <CRC16+0x68>)
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	4413      	add	r3, r2
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80010ae:	883b      	ldrh	r3, [r7, #0]
 80010b0:	1e5a      	subs	r2, r3, #1
 80010b2:	803a      	strh	r2, [r7, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1e6      	bne.n	8001086 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21a      	sxth	r2, r3
 80010be:	7bbb      	ldrb	r3, [r7, #14]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	b29b      	uxth	r3, r3
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	20000100 	.word	0x20000100
 80010d8:	20000000 	.word	0x20000000

080010dc <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80010e2:	4b81      	ldr	r3, [pc, #516]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	7e1b      	ldrb	r3, [r3, #24]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	2b03      	cmp	r3, #3
 80010ec:	d80a      	bhi.n	8001104 <Modbus_Protocal_Worker+0x28>
 80010ee:	a201      	add	r2, pc, #4	; (adr r2, 80010f4 <Modbus_Protocal_Worker+0x18>)
 80010f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f4:	0800110f 	.word	0x0800110f
 80010f8:	080012af 	.word	0x080012af
 80010fc:	0800119b 	.word	0x0800119b
 8001100:	080011c1 	.word	0x080011c1
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001104:	4b78      	ldr	r3, [pc, #480]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2201      	movs	r2, #1
 800110a:	761a      	strb	r2, [r3, #24]
		break;
 800110c:	e0e8      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800110e:	4b76      	ldr	r3, [pc, #472]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 800111a:	f000 f9dd 	bl	80014d8 <Modbus_Emission>
 800111e:	e01c      	b.n	800115a <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001120:	4b71      	ldr	r3, [pc, #452]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	7d9b      	ldrb	r3, [r3, #22]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d017      	beq.n	800115a <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800112a:	4b6f      	ldr	r3, [pc, #444]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001132:	4b6d      	ldr	r3, [pc, #436]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2200      	movs	r2, #0
 8001138:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 800113a:	4b6b      	ldr	r3, [pc, #428]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b68      	ldr	r3, [pc, #416]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f042 0201 	orr.w	r2, r2, #1
 8001150:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001152:	4b65      	ldr	r3, [pc, #404]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2203      	movs	r2, #3
 8001158:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800115a:	4b63      	ldr	r3, [pc, #396]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b20      	cmp	r3, #32
 8001168:	f040 80b3 	bne.w	80012d2 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800116c:	4b5e      	ldr	r3, [pc, #376]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2200      	movs	r2, #0
 8001172:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001176:	4b5c      	ldr	r3, [pc, #368]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68d8      	ldr	r0, [r3, #12]
 800117c:	4b5a      	ldr	r3, [pc, #360]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b59      	ldr	r3, [pc, #356]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001188:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800118c:	4413      	add	r3, r2
 800118e:	3302      	adds	r3, #2
 8001190:	2201      	movs	r2, #1
 8001192:	4619      	mov	r1, r3
 8001194:	f007 fe4c 	bl	8008e30 <HAL_UART_Receive_IT>
		}
		break;
 8001198:	e09b      	b.n	80012d2 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800119a:	4b53      	ldr	r3, [pc, #332]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	7d1b      	ldrb	r3, [r3, #20]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 8098 	beq.w	80012d6 <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 80011a6:	4b50      	ldr	r3, [pc, #320]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2200      	movs	r2, #0
 80011ac:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80011ae:	4b4e      	ldr	r3, [pc, #312]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	22fe      	movs	r2, #254	; 0xfe
 80011b4:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80011b6:	4b4c      	ldr	r3, [pc, #304]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2204      	movs	r2, #4
 80011bc:	761a      	strb	r2, [r3, #24]
		}
		break;
 80011be:	e08a      	b.n	80012d6 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80011c0:	4b49      	ldr	r3, [pc, #292]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	7d9b      	ldrb	r3, [r3, #22]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d009      	beq.n	80011de <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 80011ca:	4b47      	ldr	r3, [pc, #284]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d103      	bne.n	80011de <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80011d6:	4b44      	ldr	r3, [pc, #272]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	22ff      	movs	r2, #255	; 0xff
 80011dc:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80011de:	4b42      	ldr	r3, [pc, #264]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80011e6:	f113 0f02 	cmn.w	r3, #2
 80011ea:	d150      	bne.n	800128e <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80011ec:	4b3e      	ldr	r3, [pc, #248]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2200      	movs	r2, #0
 80011f2:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80011f4:	4b3c      	ldr	r3, [pc, #240]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f203 2272 	addw	r2, r3, #626	; 0x272
 80011fc:	4b3a      	ldr	r3, [pc, #232]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001204:	3b02      	subs	r3, #2
 8001206:	4619      	mov	r1, r3
 8001208:	4610      	mov	r0, r2
 800120a:	f7ff ff31 	bl	8001070 <CRC16>
 800120e:	4603      	mov	r3, r0
 8001210:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001212:	793a      	ldrb	r2, [r7, #4]
 8001214:	4b34      	ldr	r3, [pc, #208]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001216:	6819      	ldr	r1, [r3, #0]
 8001218:	4b33      	ldr	r3, [pc, #204]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001220:	3b02      	subs	r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001228:	429a      	cmp	r2, r3
 800122a:	d10c      	bne.n	8001246 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 800122c:	797a      	ldrb	r2, [r7, #5]
 800122e:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001230:	6819      	ldr	r1, [r3, #0]
 8001232:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800123a:	3b01      	subs	r3, #1
 800123c:	440b      	add	r3, r1
 800123e:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001242:	429a      	cmp	r2, r3
 8001244:	d004      	beq.n	8001250 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001246:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	22ff      	movs	r2, #255	; 0xff
 800124c:	75da      	strb	r2, [r3, #23]
				break;
 800124e:	e047      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001250:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001258:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	d113      	bne.n	800128a <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001262:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800126a:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 8001272:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800127c:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800127e:	461a      	mov	r2, r3
 8001280:	f008 ffb0 	bl	800a1e4 <memcpy>

			//execute command
			Modbus_frame_response();
 8001284:	f000 f910 	bl	80014a8 <Modbus_frame_response>
 8001288:	e001      	b.n	800128e <Modbus_Protocal_Worker+0x1b2>
				break;
 800128a:	bf00      	nop
					}
		break;


	}
}
 800128c:	e028      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	7d5b      	ldrb	r3, [r3, #21]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d020      	beq.n	80012da <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2201      	movs	r2, #1
 800129e:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f007 fe70 	bl	8008f8c <HAL_UART_AbortReceive>
		break;
 80012ac:	e015      	b.n	80012da <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b20      	cmp	r3, #32
 80012bc:	d10f      	bne.n	80012de <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <Modbus_Protocal_Worker+0x20c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2201      	movs	r2, #1
 80012ce:	761a      	strb	r2, [r3, #24]
		break;
 80012d0:	e005      	b.n	80012de <Modbus_Protocal_Worker+0x202>
		break;
 80012d2:	bf00      	nop
 80012d4:	e004      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
		break;
 80012d6:	bf00      	nop
 80012d8:	e002      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
		break;
 80012da:	bf00      	nop
 80012dc:	e000      	b.n	80012e0 <Modbus_Protocal_Worker+0x204>
		break;
 80012de:	bf00      	nop
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200003e4 	.word	0x200003e4

080012ec <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <modbusWrite1Register+0x80>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	7e9b      	ldrb	r3, [r3, #26]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	4b1b      	ldr	r3, [pc, #108]	; (800136c <modbusWrite1Register+0x80>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	7edb      	ldrb	r3, [r3, #27]
 8001304:	b29b      	uxth	r3, r3
 8001306:	4413      	add	r3, r2
 8001308:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800130a:	88fa      	ldrh	r2, [r7, #6]
 800130c:	4b17      	ldr	r3, [pc, #92]	; (800136c <modbusWrite1Register+0x80>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	429a      	cmp	r2, r3
 8001314:	d903      	bls.n	800131e <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001316:	2002      	movs	r0, #2
 8001318:	f000 f8a4 	bl	8001464 <ModbusErrorReply>
			 return;
 800131c:	e023      	b.n	8001366 <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <modbusWrite1Register+0x80>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <modbusWrite1Register+0x80>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6859      	ldr	r1, [r3, #4]
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	440b      	add	r3, r1
 800132e:	7f12      	ldrb	r2, [r2, #28]
 8001330:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <modbusWrite1Register+0x80>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <modbusWrite1Register+0x80>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6859      	ldr	r1, [r3, #4]
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	440b      	add	r3, r1
 8001342:	7f52      	ldrb	r2, [r2, #29]
 8001344:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <modbusWrite1Register+0x80>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <modbusWrite1Register+0x80>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8001354:	2208      	movs	r2, #8
 8001356:	4619      	mov	r1, r3
 8001358:	f008 ff44 	bl	800a1e4 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <modbusWrite1Register+0x80>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2205      	movs	r2, #5
 8001362:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200003e4 	.word	0x200003e4

08001370 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001376:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <modbusRead1Register+0xf0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	7f1b      	ldrb	r3, [r3, #28]
 800137c:	b29b      	uxth	r3, r3
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	b29a      	uxth	r2, r3
 8001382:	4b37      	ldr	r3, [pc, #220]	; (8001460 <modbusRead1Register+0xf0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	7f5b      	ldrb	r3, [r3, #29]
 8001388:	b29b      	uxth	r3, r3
 800138a:	4413      	add	r3, r2
 800138c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800138e:	4b34      	ldr	r3, [pc, #208]	; (8001460 <modbusRead1Register+0xf0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	7e9b      	ldrb	r3, [r3, #26]
 8001394:	b29b      	uxth	r3, r3
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	b29a      	uxth	r2, r3
 800139a:	4b31      	ldr	r3, [pc, #196]	; (8001460 <modbusRead1Register+0xf0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	7edb      	ldrb	r3, [r3, #27]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	4413      	add	r3, r2
 80013a4:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d002      	beq.n	80013b2 <modbusRead1Register+0x42>
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	2b7d      	cmp	r3, #125	; 0x7d
 80013b0:	d903      	bls.n	80013ba <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80013b2:	2003      	movs	r0, #3
 80013b4:	f000 f856 	bl	8001464 <ModbusErrorReply>
		 return;
 80013b8:	e04e      	b.n	8001458 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80013ba:	88ba      	ldrh	r2, [r7, #4]
 80013bc:	4b28      	ldr	r3, [pc, #160]	; (8001460 <modbusRead1Register+0xf0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d808      	bhi.n	80013d8 <modbusRead1Register+0x68>
 80013c6:	88ba      	ldrh	r2, [r7, #4]
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	4413      	add	r3, r2
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b24      	ldr	r3, [pc, #144]	; (8001460 <modbusRead1Register+0xf0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d903      	bls.n	80013e0 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80013d8:	2002      	movs	r0, #2
 80013da:	f000 f843 	bl	8001464 <ModbusErrorReply>
		 return;
 80013de:	e03b      	b.n	8001458 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80013e0:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <modbusRead1Register+0xf0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2203      	movs	r2, #3
 80013e6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <modbusRead1Register+0xf0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	0052      	lsls	r2, r2, #1
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80013fa:	2400      	movs	r4, #0
 80013fc:	e020      	b.n	8001440 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <modbusRead1Register+0xf0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	88bb      	ldrh	r3, [r7, #4]
 8001406:	4423      	add	r3, r4
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	18d1      	adds	r1, r2, r3
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <modbusRead1Register+0xf0>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	1c63      	adds	r3, r4, #1
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	7849      	ldrb	r1, [r1, #1]
 8001416:	4413      	add	r3, r2
 8001418:	460a      	mov	r2, r1
 800141a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <modbusRead1Register+0xf0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	88bb      	ldrh	r3, [r7, #4]
 8001426:	4423      	add	r3, r4
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	18d1      	adds	r1, r2, r3
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <modbusRead1Register+0xf0>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	0063      	lsls	r3, r4, #1
 8001432:	3303      	adds	r3, #3
 8001434:	7809      	ldrb	r1, [r1, #0]
 8001436:	4413      	add	r3, r2
 8001438:	460a      	mov	r2, r1
 800143a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 800143e:	3401      	adds	r4, #1
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	429c      	cmp	r4, r3
 8001444:	dbdb      	blt.n	80013fe <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	3301      	adds	r3, #1
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <modbusRead1Register+0xf0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	0052      	lsls	r2, r2, #1
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	bd90      	pop	{r4, r7, pc}
 800145e:	bf00      	nop
 8001460:	200003e4 	.word	0x200003e4

08001464 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <ModbusErrorReply+0x40>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	7e5a      	ldrb	r2, [r3, #25]
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <ModbusErrorReply+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <ModbusErrorReply+0x40>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	79fa      	ldrb	r2, [r7, #7]
 8001488:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <ModbusErrorReply+0x40>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2202      	movs	r2, #2
 8001492:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	200003e4 	.word	0x200003e4

080014a8 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <Modbus_frame_response+0x2c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	7e5b      	ldrb	r3, [r3, #25]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d004      	beq.n	80014c0 <Modbus_frame_response+0x18>
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d105      	bne.n	80014c6 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80014ba:	f7ff ff17 	bl	80012ec <modbusWrite1Register>
		break;
 80014be:	e006      	b.n	80014ce <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80014c0:	f7ff ff56 	bl	8001370 <modbusRead1Register>
		break;
 80014c4:	e003      	b.n	80014ce <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80014c6:	2001      	movs	r0, #1
 80014c8:	f7ff ffcc 	bl	8001464 <ModbusErrorReply>
		break;
 80014cc:	bf00      	nop

	}
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200003e4 	.word	0x200003e4

080014d8 <Modbus_Emission>:

void Modbus_Emission()
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80014de:	4b3d      	ldr	r3, [pc, #244]	; (80015d4 <Modbus_Emission+0xfc>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b20      	cmp	r3, #32
 80014ec:	d15e      	bne.n	80015ac <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80014ee:	4b39      	ldr	r3, [pc, #228]	; (80015d4 <Modbus_Emission+0xfc>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <Modbus_Emission+0xfc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	7812      	ldrb	r2, [r2, #0]
 80014f8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80014fc:	4b35      	ldr	r3, [pc, #212]	; (80015d4 <Modbus_Emission+0xfc>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8001504:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001506:	4b33      	ldr	r3, [pc, #204]	; (80015d4 <Modbus_Emission+0xfc>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 800150e:	4b31      	ldr	r3, [pc, #196]	; (80015d4 <Modbus_Emission+0xfc>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 8001516:	461a      	mov	r2, r3
 8001518:	f008 fe64 	bl	800a1e4 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 800151c:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <Modbus_Emission+0xfc>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001524:	b29a      	uxth	r2, r3
 8001526:	4b2b      	ldr	r3, [pc, #172]	; (80015d4 <Modbus_Emission+0xfc>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	3203      	adds	r2, #3
 800152c:	b292      	uxth	r2, r2
 800152e:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001532:	4b28      	ldr	r3, [pc, #160]	; (80015d4 <Modbus_Emission+0xfc>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <Modbus_Emission+0xfc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001542:	3b02      	subs	r3, #2
 8001544:	4619      	mov	r1, r3
 8001546:	4610      	mov	r0, r2
 8001548:	f7ff fd92 	bl	8001070 <CRC16>
 800154c:	4603      	mov	r3, r0
 800154e:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001550:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <Modbus_Emission+0xfc>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <Modbus_Emission+0xfc>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800155c:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 800155e:	7939      	ldrb	r1, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	460a      	mov	r2, r1
 8001564:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001568:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <Modbus_Emission+0xfc>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <Modbus_Emission+0xfc>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001574:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001576:	7979      	ldrb	r1, [r7, #5]
 8001578:	4413      	add	r3, r2
 800157a:	460a      	mov	r2, r1
 800157c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <Modbus_Emission+0xfc>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b20      	cmp	r3, #32
 800158e:	d10d      	bne.n	80015ac <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <Modbus_Emission+0xfc>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <Modbus_Emission+0xfc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <Modbus_Emission+0xfc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80015a2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80015a6:	461a      	mov	r2, r3
 80015a8:	f007 fc72 	bl	8008e90 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <Modbus_Emission+0xfc>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2200      	movs	r2, #0
 80015b2:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <Modbus_Emission+0xfc>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2200      	movs	r2, #0
 80015ba:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <Modbus_Emission+0xfc>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2200      	movs	r2, #0
 80015c2:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <Modbus_Emission+0xfc>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2202      	movs	r2, #2
 80015ca:	761a      	strb	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200003e4 	.word	0x200003e4

080015d8 <rt_powd_snf>:
 * Arguments    : double u0
 *                double u1
 * Return Type  : double
 */
static double rt_powd_snf(double u0, double u1)
{
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b08c      	sub	sp, #48	; 0x30
 80015dc:	af00      	add	r7, sp, #0
 80015de:	ed87 0b04 	vstr	d0, [r7, #16]
 80015e2:	ed87 1b02 	vstr	d1, [r7, #8]
  double y;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 80015e6:	ed97 0b04 	vldr	d0, [r7, #16]
 80015ea:	f003 f959 	bl	80048a0 <rtIsNaN>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d106      	bne.n	8001602 <rt_powd_snf+0x2a>
 80015f4:	ed97 0b02 	vldr	d0, [r7, #8]
 80015f8:	f003 f952 	bl	80048a0 <rtIsNaN>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d005      	beq.n	800160e <rt_powd_snf+0x36>
    y = rtNaN;
 8001602:	4b80      	ldr	r3, [pc, #512]	; (8001804 <rt_powd_snf+0x22c>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800160c:	e0ef      	b.n	80017ee <rt_powd_snf+0x216>
  } else {
    double d;
    double d1;
    d = fabs(u0);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	ed97 7b00 	vldr	d7, [r7]
 800161e:	ed87 7b08 	vstr	d7, [r7, #32]
    d1 = fabs(u1);
 8001622:	68bc      	ldr	r4, [r7, #8]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800162a:	e9c7 4506 	strd	r4, r5, [r7, #24]
    if (rtIsInf(u1)) {
 800162e:	ed97 0b02 	vldr	d0, [r7, #8]
 8001632:	f003 f907 	bl	8004844 <rtIsInf>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d049      	beq.n	80016d0 <rt_powd_snf+0xf8>
      if (d == 1.0) {
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	4b71      	ldr	r3, [pc, #452]	; (8001808 <rt_powd_snf+0x230>)
 8001642:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001646:	f7ff f9eb 	bl	8000a20 <__aeabi_dcmpeq>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <rt_powd_snf+0x84>
        y = 1.0;
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b6c      	ldr	r3, [pc, #432]	; (8001808 <rt_powd_snf+0x230>)
 8001656:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800165a:	e0c8      	b.n	80017ee <rt_powd_snf+0x216>
      } else if (d > 1.0) {
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	4b69      	ldr	r3, [pc, #420]	; (8001808 <rt_powd_snf+0x230>)
 8001662:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001666:	f7ff fa03 	bl	8000a70 <__aeabi_dcmpgt>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d017      	beq.n	80016a0 <rt_powd_snf+0xc8>
        if (u1 > 0.0) {
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800167c:	f7ff f9f8 	bl	8000a70 <__aeabi_dcmpgt>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d005      	beq.n	8001692 <rt_powd_snf+0xba>
          y = rtInf;
 8001686:	4b61      	ldr	r3, [pc, #388]	; (800180c <rt_powd_snf+0x234>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001690:	e0ad      	b.n	80017ee <rt_powd_snf+0x216>
        } else {
          y = 0.0;
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800169e:	e0a6      	b.n	80017ee <rt_powd_snf+0x216>
        }
      } else if (u1 > 0.0) {
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016ac:	f7ff f9e0 	bl	8000a70 <__aeabi_dcmpgt>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d006      	beq.n	80016c4 <rt_powd_snf+0xec>
        y = 0.0;
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	f04f 0300 	mov.w	r3, #0
 80016be:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80016c2:	e094      	b.n	80017ee <rt_powd_snf+0x216>
      } else {
        y = rtInf;
 80016c4:	4b51      	ldr	r3, [pc, #324]	; (800180c <rt_powd_snf+0x234>)
 80016c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80016ce:	e08e      	b.n	80017ee <rt_powd_snf+0x216>
      }
    } else if (d1 == 0.0) {
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016dc:	f7ff f9a0 	bl	8000a20 <__aeabi_dcmpeq>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <rt_powd_snf+0x11a>
      y = 1.0;
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	4b47      	ldr	r3, [pc, #284]	; (8001808 <rt_powd_snf+0x230>)
 80016ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80016f0:	e07d      	b.n	80017ee <rt_powd_snf+0x216>
    } else if (d1 == 1.0) {
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	4b44      	ldr	r3, [pc, #272]	; (8001808 <rt_powd_snf+0x230>)
 80016f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016fc:	f7ff f990 	bl	8000a20 <__aeabi_dcmpeq>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d01b      	beq.n	800173e <rt_powd_snf+0x166>
      if (u1 > 0.0) {
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001712:	f7ff f9ad 	bl	8000a70 <__aeabi_dcmpgt>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d004      	beq.n	8001726 <rt_powd_snf+0x14e>
        y = u0;
 800171c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001720:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001724:	e063      	b.n	80017ee <rt_powd_snf+0x216>
      } else {
        y = 1.0 / u0;
 8001726:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800172a:	f04f 0000 	mov.w	r0, #0
 800172e:	4936      	ldr	r1, [pc, #216]	; (8001808 <rt_powd_snf+0x230>)
 8001730:	f7ff f838 	bl	80007a4 <__aeabi_ddiv>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800173c:	e057      	b.n	80017ee <rt_powd_snf+0x216>
      }
    } else if (u1 == 2.0) {
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001746:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800174a:	f7ff f969 	bl	8000a20 <__aeabi_dcmpeq>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00a      	beq.n	800176a <rt_powd_snf+0x192>
      y = u0 * u0;
 8001754:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001758:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800175c:	f7fe fef8 	bl	8000550 <__aeabi_dmul>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001768:	e041      	b.n	80017ee <rt_powd_snf+0x216>
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	4b28      	ldr	r3, [pc, #160]	; (8001810 <rt_powd_snf+0x238>)
 8001770:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001774:	f7ff f954 	bl	8000a20 <__aeabi_dcmpeq>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d011      	beq.n	80017a2 <rt_powd_snf+0x1ca>
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800178a:	f7ff f967 	bl	8000a5c <__aeabi_dcmpge>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d006      	beq.n	80017a2 <rt_powd_snf+0x1ca>
      y = sqrt(u0);
 8001794:	ed97 0b04 	vldr	d0, [r7, #16]
 8001798:	f009 f81e 	bl	800a7d8 <sqrt>
 800179c:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80017a0:	e025      	b.n	80017ee <rt_powd_snf+0x216>
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017ae:	f7ff f941 	bl	8000a34 <__aeabi_dcmplt>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d012      	beq.n	80017de <rt_powd_snf+0x206>
 80017b8:	ed97 0b02 	vldr	d0, [r7, #8]
 80017bc:	f008 fe90 	bl	800a4e0 <floor>
 80017c0:	ec53 2b10 	vmov	r2, r3, d0
 80017c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017c8:	f7ff f952 	bl	8000a70 <__aeabi_dcmpgt>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d005      	beq.n	80017de <rt_powd_snf+0x206>
      y = rtNaN;
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <rt_powd_snf+0x22c>)
 80017d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80017dc:	e007      	b.n	80017ee <rt_powd_snf+0x216>
    } else {
      y = pow(u0, u1);
 80017de:	ed97 1b02 	vldr	d1, [r7, #8]
 80017e2:	ed97 0b04 	vldr	d0, [r7, #16]
 80017e6:	f008 ff87 	bl	800a6f8 <pow>
 80017ea:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
    }
  }
  return y;
 80017ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80017f6:	eeb0 0a47 	vmov.f32	s0, s14
 80017fa:	eef0 0a67 	vmov.f32	s1, s15
 80017fe:	3730      	adds	r7, #48	; 0x30
 8001800:	46bd      	mov	sp, r7
 8001802:	bdb0      	pop	{r4, r5, r7, pc}
 8001804:	20000348 	.word	0x20000348
 8001808:	3ff00000 	.word	0x3ff00000
 800180c:	20000350 	.word	0x20000350
 8001810:	3fe00000 	.word	0x3fe00000
 8001814:	00000000 	.word	0x00000000

08001818 <Qubic>:
 * Return Type  : void
 */
void Qubic(double q_k1, double q_k2, double qdot_k1, double qdot_k2, double tf,
           emxArray_real_T *q_position, emxArray_real_T *q_velocity,
           emxArray_real_T *q_acc)
{
 8001818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800181c:	b0a1      	sub	sp, #132	; 0x84
 800181e:	af00      	add	r7, sp, #0
 8001820:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 8001824:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 8001828:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 800182c:	ed87 3b08 	vstr	d3, [r7, #32]
 8001830:	ed87 4b06 	vstr	d4, [r7, #24]
 8001834:	6178      	str	r0, [r7, #20]
 8001836:	6139      	str	r1, [r7, #16]
 8001838:	60fa      	str	r2, [r7, #12]
  double *q_position_data;
  double *q_velocity_data;
  int i;
  int k;
  int q_acc_tmp_tmp;
  q_acc_data = q_acc->data;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	67fb      	str	r3, [r7, #124]	; 0x7c
  delta1 = tf * 2000.0;
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	4bac      	ldr	r3, [pc, #688]	; (8001af8 <Qubic+0x2e0>)
 8001846:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800184a:	f7fe fe81 	bl	8000550 <__aeabi_dmul>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  if (!(delta1 >= 0.0)) {
 8001856:	2301      	movs	r3, #1
 8001858:	461e      	mov	r6, r3
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001866:	f7ff f8f9 	bl	8000a5c <__aeabi_dcmpge>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <Qubic+0x5c>
 8001870:	2300      	movs	r3, #0
 8001872:	461e      	mov	r6, r3
 8001874:	b2f3      	uxtb	r3, r6
 8001876:	f083 0301 	eor.w	r3, r3, #1
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	d009      	beq.n	8001894 <Qubic+0x7c>
    q_acc->size[0] = 1;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	601a      	str	r2, [r3, #0]
    q_acc->size[1] = 0;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	3304      	adds	r3, #4
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	e158      	b.n	8001b46 <Qubic+0x32e>
  } else {
    d = floor(delta1);
 8001894:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8001898:	f008 fe22 	bl	800a4e0 <floor>
 800189c:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
    i = q_acc->size[0] * q_acc->size[1];
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	6852      	ldr	r2, [r2, #4]
 80018aa:	3204      	adds	r2, #4
 80018ac:	6812      	ldr	r2, [r2, #0]
 80018ae:	fb02 f303 	mul.w	r3, r2, r3
 80018b2:	67bb      	str	r3, [r7, #120]	; 0x78
    q_acc->size[0] = 1;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	601a      	str	r2, [r3, #0]
    q_acc->size[1] = (int)d;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	1d1e      	adds	r6, r3, #4
 80018c2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80018c6:	f7ff f8f3 	bl	8000ab0 <__aeabi_d2iz>
 80018ca:	4603      	mov	r3, r0
 80018cc:	6033      	str	r3, [r6, #0]
    emxEnsureCapacity_real_T(q_acc, i);
 80018ce:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 fb3e 	bl	8001f52 <emxEnsureCapacity_real_T>
    q_acc_data = q_acc->data;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	67fb      	str	r3, [r7, #124]	; 0x7c
    if ((int)d >= 1) {
 80018dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80018e0:	f7ff f8e6 	bl	8000ab0 <__aeabi_d2iz>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f340 812d 	ble.w	8001b46 <Qubic+0x32e>
      q_acc_tmp_tmp = (int)d - 1;
 80018ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80018f0:	f7ff f8de 	bl	8000ab0 <__aeabi_d2iz>
 80018f4:	4603      	mov	r3, r0
 80018f6:	3b01      	subs	r3, #1
 80018f8:	65fb      	str	r3, [r7, #92]	; 0x5c
      q_acc_data[(int)floor(delta1) - 1] = tf;
 80018fa:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 80018fe:	f008 fdef 	bl	800a4e0 <floor>
 8001902:	ec53 2b10 	vmov	r2, r3, d0
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	f7ff f8d1 	bl	8000ab0 <__aeabi_d2iz>
 800190e:	4603      	mov	r3, r0
 8001910:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001914:	3b01      	subs	r3, #1
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800191a:	18d1      	adds	r1, r2, r3
 800191c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001920:	e9c1 2300 	strd	r2, r3, [r1]
      if (q_acc->size[1] >= 2) {
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	3304      	adds	r3, #4
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b01      	cmp	r3, #1
 800192e:	f340 810a 	ble.w	8001b46 <Qubic+0x32e>
        q_acc_data[0] = 0.0;
 8001932:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	e9c1 2300 	strd	r2, r3, [r1]
        if (q_acc->size[1] >= 3) {
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	3304      	adds	r3, #4
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b02      	cmp	r3, #2
 800194a:	f340 80fc 	ble.w	8001b46 <Qubic+0x32e>
          if (-tf == 0.0) {
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800195a:	f7ff f861 	bl	8000a20 <__aeabi_dcmpeq>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d051      	beq.n	8001a08 <Qubic+0x1f0>
            delta1 = tf / ((double)q_acc->size[1] - 1.0);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	3304      	adds	r3, #4
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fd85 	bl	800047c <__aeabi_i2d>
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	4b61      	ldr	r3, [pc, #388]	; (8001afc <Qubic+0x2e4>)
 8001978:	f7fe fc32 	bl	80001e0 <__aeabi_dsub>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001984:	f7fe ff0e 	bl	80007a4 <__aeabi_ddiv>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            for (k = 2; k <= q_acc_tmp_tmp; k++) {
 8001990:	2302      	movs	r3, #2
 8001992:	677b      	str	r3, [r7, #116]	; 0x74
 8001994:	e01c      	b.n	80019d0 <Qubic+0x1b8>
              q_acc_data[k - 1] =
                  (double)(((k << 1) - q_acc->size[1]) - 1) * delta1;
 8001996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001998:	005a      	lsls	r2, r3, #1
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	3304      	adds	r3, #4
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	3b01      	subs	r3, #1
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fd68 	bl	800047c <__aeabi_i2d>
              q_acc_data[k - 1] =
 80019ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019ae:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80019b2:	3b01      	subs	r3, #1
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80019b8:	18d6      	adds	r6, r2, r3
                  (double)(((k << 1) - q_acc->size[1]) - 1) * delta1;
 80019ba:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80019be:	f7fe fdc7 	bl	8000550 <__aeabi_dmul>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
              q_acc_data[k - 1] =
 80019c6:	e9c6 2300 	strd	r2, r3, [r6]
            for (k = 2; k <= q_acc_tmp_tmp; k++) {
 80019ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019cc:	3301      	adds	r3, #1
 80019ce:	677b      	str	r3, [r7, #116]	; 0x74
 80019d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80019d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019d4:	429a      	cmp	r2, r3
 80019d6:	ddde      	ble.n	8001996 <Qubic+0x17e>
            }
            if ((q_acc->size[1] & 1) == 1) {
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	3304      	adds	r3, #4
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80ae 	beq.w	8001b46 <Qubic+0x32e>
              q_acc_data[q_acc->size[1] >> 1] = 0.0;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	3304      	adds	r3, #4
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	105b      	asrs	r3, r3, #1
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80019f8:	18d1      	adds	r1, r2, r3
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	e9c1 2300 	strd	r2, r3, [r1]
 8001a06:	e09e      	b.n	8001b46 <Qubic+0x32e>
            }
          } else if ((tf < 0.0) && (fabs(tf) > 8.9884656743115785E+307)) {
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a14:	f7ff f80e 	bl	8000a34 <__aeabi_dcmplt>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d04e      	beq.n	8001abc <Qubic+0x2a4>
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2e:	4b34      	ldr	r3, [pc, #208]	; (8001b00 <Qubic+0x2e8>)
 8001a30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a34:	f7ff f81c 	bl	8000a70 <__aeabi_dcmpgt>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d03e      	beq.n	8001abc <Qubic+0x2a4>
            delta1 = tf / ((double)q_acc->size[1] - 1.0);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	3304      	adds	r3, #4
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fd18 	bl	800047c <__aeabi_i2d>
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <Qubic+0x2e4>)
 8001a52:	f7fe fbc5 	bl	80001e0 <__aeabi_dsub>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a5e:	f7fe fea1 	bl	80007a4 <__aeabi_ddiv>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            i = q_acc->size[1];
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	67bb      	str	r3, [r7, #120]	; 0x78
            for (k = 0; k <= i - 3; k++) {
 8001a72:	2300      	movs	r3, #0
 8001a74:	677b      	str	r3, [r7, #116]	; 0x74
 8001a76:	e01b      	b.n	8001ab0 <Qubic+0x298>
              q_acc_data[k + 1] = delta1 * ((double)k + 1.0);
 8001a78:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001a7a:	f7fe fcff 	bl	800047c <__aeabi_i2d>
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <Qubic+0x2e4>)
 8001a84:	f7fe fbae 	bl	80001e4 <__adddf3>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a92:	3301      	adds	r3, #1
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a98:	18d6      	adds	r6, r2, r3
 8001a9a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001a9e:	f7fe fd57 	bl	8000550 <__aeabi_dmul>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	e9c6 2300 	strd	r2, r3, [r6]
            for (k = 0; k <= i - 3; k++) {
 8001aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001aac:	3301      	adds	r3, #1
 8001aae:	677b      	str	r3, [r7, #116]	; 0x74
 8001ab0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ab2:	3b02      	subs	r3, #2
 8001ab4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	dbde      	blt.n	8001a78 <Qubic+0x260>
          } else if ((tf < 0.0) && (fabs(tf) > 8.9884656743115785E+307)) {
 8001aba:	e044      	b.n	8001b46 <Qubic+0x32e>
            }
          } else {
            delta1 = tf / ((double)q_acc->size[1] - 1.0);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fcd9 	bl	800047c <__aeabi_i2d>
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <Qubic+0x2e4>)
 8001ad0:	f7fe fb86 	bl	80001e0 <__aeabi_dsub>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001adc:	f7fe fe62 	bl	80007a4 <__aeabi_ddiv>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            i = q_acc->size[1];
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	67bb      	str	r3, [r7, #120]	; 0x78
            for (k = 0; k <= i - 3; k++) {
 8001af0:	2300      	movs	r3, #0
 8001af2:	677b      	str	r3, [r7, #116]	; 0x74
 8001af4:	e022      	b.n	8001b3c <Qubic+0x324>
 8001af6:	bf00      	nop
 8001af8:	409f4000 	.word	0x409f4000
 8001afc:	3ff00000 	.word	0x3ff00000
 8001b00:	7fdfffff 	.word	0x7fdfffff
              q_acc_data[k + 1] = ((double)k + 1.0) * delta1;
 8001b04:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001b06:	f7fe fcb9 	bl	800047c <__aeabi_i2d>
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	4b6e      	ldr	r3, [pc, #440]	; (8001cc8 <Qubic+0x4b0>)
 8001b10:	f7fe fb68 	bl	80001e4 <__adddf3>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b1e:	3301      	adds	r3, #1
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001b24:	18d6      	adds	r6, r2, r3
 8001b26:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001b2a:	f7fe fd11 	bl	8000550 <__aeabi_dmul>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	e9c6 2300 	strd	r2, r3, [r6]
            for (k = 0; k <= i - 3; k++) {
 8001b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b38:	3301      	adds	r3, #1
 8001b3a:	677b      	str	r3, [r7, #116]	; 0x74
 8001b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b3e:	3b02      	subs	r3, #2
 8001b40:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001b42:	429a      	cmp	r2, r3
 8001b44:	dbde      	blt.n	8001b04 <Qubic+0x2ec>
          }
        }
      }
    }
  }
  delta1 = q_k2 - q_k1;
 8001b46:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001b4a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001b4e:	f7fe fb47 	bl	80001e0 <__aeabi_dsub>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  C2_tmp = tf * tf;
 8001b5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b62:	f7fe fcf5 	bl	8000550 <__aeabi_dmul>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  C2 = 3.0 * (delta1 / C2_tmp) + (-qdot_k2 - 2.0 * qdot_k1) / tf;
 8001b6e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001b72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001b76:	f7fe fe15 	bl	80007a4 <__aeabi_ddiv>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	4b51      	ldr	r3, [pc, #324]	; (8001ccc <Qubic+0x4b4>)
 8001b88:	f7fe fce2 	bl	8000550 <__aeabi_dmul>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4690      	mov	r8, r2
 8001b92:	4699      	mov	r9, r3
 8001b94:	6a3c      	ldr	r4, [r7, #32]
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b9c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	f7fe fb1e 	bl	80001e4 <__adddf3>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4620      	mov	r0, r4
 8001bae:	4629      	mov	r1, r5
 8001bb0:	f7fe fb16 	bl	80001e0 <__aeabi_dsub>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bc0:	f7fe fdf0 	bl	80007a4 <__aeabi_ddiv>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4640      	mov	r0, r8
 8001bca:	4649      	mov	r1, r9
 8001bcc:	f7fe fb0a 	bl	80001e4 <__adddf3>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  delta1 =
      -2.0 * (delta1 / rt_powd_snf(tf, 3.0)) + (qdot_k2 + qdot_k1) / C2_tmp;
 8001bd8:	ed9f 1b39 	vldr	d1, [pc, #228]	; 8001cc0 <Qubic+0x4a8>
 8001bdc:	ed97 0b06 	vldr	d0, [r7, #24]
 8001be0:	f7ff fcfa 	bl	80015d8 <rt_powd_snf>
 8001be4:	ec53 2b10 	vmov	r2, r3, d0
 8001be8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001bec:	f7fe fdda 	bl	80007a4 <__aeabi_ddiv>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001c00:	f7fe fca6 	bl	8000550 <__aeabi_dmul>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4614      	mov	r4, r2
 8001c0a:	461d      	mov	r5, r3
 8001c0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c10:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c14:	f7fe fae6 	bl	80001e4 <__adddf3>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c24:	f7fe fdbe 	bl	80007a4 <__aeabi_ddiv>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
  delta1 =
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	4629      	mov	r1, r5
 8001c30:	f7fe fad8 	bl	80001e4 <__adddf3>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  i = q_velocity->size[0] * q_velocity->size[1];
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	6852      	ldr	r2, [r2, #4]
 8001c46:	3204      	adds	r2, #4
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	fb02 f303 	mul.w	r3, r2, r3
 8001c4e:	67bb      	str	r3, [r7, #120]	; 0x78
  q_velocity->size[0] = 1;
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
  q_velocity->size[1] = q_acc->size[1];
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	3304      	adds	r3, #4
 8001c62:	6852      	ldr	r2, [r2, #4]
 8001c64:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_velocity, i);
 8001c66:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001c68:	6938      	ldr	r0, [r7, #16]
 8001c6a:	f000 f972 	bl	8001f52 <emxEnsureCapacity_real_T>
  q_velocity_data = q_velocity->data;
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	647b      	str	r3, [r7, #68]	; 0x44
  q_acc_tmp_tmp = q_acc->size[1];
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  i = q_position->size[0] * q_position->size[1];
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	6852      	ldr	r2, [r2, #4]
 8001c86:	3204      	adds	r2, #4
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	fb02 f303 	mul.w	r3, r2, r3
 8001c8e:	67bb      	str	r3, [r7, #120]	; 0x78
  q_position->size[0] = 1;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
  q_position->size[1] = q_acc->size[1];
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	6852      	ldr	r2, [r2, #4]
 8001ca4:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_position, i);
 8001ca6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001ca8:	6978      	ldr	r0, [r7, #20]
 8001caa:	f000 f952 	bl	8001f52 <emxEnsureCapacity_real_T>
  q_position_data = q_position->data;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	643b      	str	r3, [r7, #64]	; 0x40
  for (i = 0; i < q_acc_tmp_tmp; i++) {
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	67bb      	str	r3, [r7, #120]	; 0x78
 8001cb8:	e067      	b.n	8001d8a <Qubic+0x572>
 8001cba:	bf00      	nop
 8001cbc:	f3af 8000 	nop.w
 8001cc0:	00000000 	.word	0x00000000
 8001cc4:	40080000 	.word	0x40080000
 8001cc8:	3ff00000 	.word	0x3ff00000
 8001ccc:	40080000 	.word	0x40080000
    d = q_acc_data[i];
 8001cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001cd6:	4413      	add	r3, r2
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    C2_tmp = d * d;
 8001ce0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ce4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001ce8:	f7fe fc32 	bl	8000550 <__aeabi_dmul>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    q_velocity_data[i] = C2_tmp;
 8001cf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001cfa:	18d1      	adds	r1, r2, r3
 8001cfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d00:	e9c1 2300 	strd	r2, r3, [r1]
    q_position_data[i] =
        ((q_k1 + qdot_k1 * d) + C2 * C2_tmp) + delta1 * rt_powd_snf(d, 3.0);
 8001d04:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001d08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d0c:	f7fe fc20 	bl	8000550 <__aeabi_dmul>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d1c:	f7fe fa62 	bl	80001e4 <__adddf3>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4614      	mov	r4, r2
 8001d26:	461d      	mov	r5, r3
 8001d28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d2c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001d30:	f7fe fc0e 	bl	8000550 <__aeabi_dmul>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4620      	mov	r0, r4
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	f7fe fa52 	bl	80001e4 <__adddf3>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4690      	mov	r8, r2
 8001d46:	4699      	mov	r9, r3
 8001d48:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8001f10 <Qubic+0x6f8>
 8001d4c:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001d50:	f7ff fc42 	bl	80015d8 <rt_powd_snf>
 8001d54:	ec51 0b10 	vmov	r0, r1, d0
 8001d58:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d5c:	f7fe fbf8 	bl	8000550 <__aeabi_dmul>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
    q_position_data[i] =
 8001d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d6e:	18d4      	adds	r4, r2, r3
        ((q_k1 + qdot_k1 * d) + C2 * C2_tmp) + delta1 * rt_powd_snf(d, 3.0);
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4640      	mov	r0, r8
 8001d76:	4649      	mov	r1, r9
 8001d78:	f7fe fa34 	bl	80001e4 <__adddf3>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
    q_position_data[i] =
 8001d80:	e9c4 2300 	strd	r2, r3, [r4]
  for (i = 0; i < q_acc_tmp_tmp; i++) {
 8001d84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d86:	3301      	adds	r3, #1
 8001d88:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d8a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001d8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	db9e      	blt.n	8001cd0 <Qubic+0x4b8>
  }
  i = q_velocity->size[0] * q_velocity->size[1];
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	6852      	ldr	r2, [r2, #4]
 8001d9c:	3204      	adds	r2, #4
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	fb02 f303 	mul.w	r3, r2, r3
 8001da4:	67bb      	str	r3, [r7, #120]	; 0x78
  q_velocity->size[0] = 1;
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	601a      	str	r2, [r3, #0]
  q_velocity->size[1] = q_acc->size[1];
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	3304      	adds	r3, #4
 8001db8:	6852      	ldr	r2, [r2, #4]
 8001dba:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_velocity, i);
 8001dbc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001dbe:	6938      	ldr	r0, [r7, #16]
 8001dc0:	f000 f8c7 	bl	8001f52 <emxEnsureCapacity_real_T>
  q_velocity_data = q_velocity->data;
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	647b      	str	r3, [r7, #68]	; 0x44
  d = 2.0 * C2;
 8001dca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	f7fe fa07 	bl	80001e4 <__adddf3>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  C2_tmp = 3.0 * delta1;
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	4b4d      	ldr	r3, [pc, #308]	; (8001f18 <Qubic+0x700>)
 8001de4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001de8:	f7fe fbb2 	bl	8000550 <__aeabi_dmul>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  q_acc_tmp_tmp = q_acc->size[1] - 1;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001e00:	2300      	movs	r3, #0
 8001e02:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e04:	e034      	b.n	8001e70 <Qubic+0x658>
    q_velocity_data[i] =
        (qdot_k1 + d * q_acc_data[i]) + C2_tmp * q_velocity_data[i];
 8001e06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001e0c:	4413      	add	r3, r2
 8001e0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e12:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001e16:	f7fe fb9b 	bl	8000550 <__aeabi_dmul>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4610      	mov	r0, r2
 8001e20:	4619      	mov	r1, r3
 8001e22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e26:	f7fe f9dd 	bl	80001e4 <__adddf3>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4690      	mov	r8, r2
 8001e30:	4699      	mov	r9, r3
 8001e32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e38:	4413      	add	r3, r2
 8001e3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e3e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e42:	f7fe fb85 	bl	8000550 <__aeabi_dmul>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	4619      	mov	r1, r3
    q_velocity_data[i] =
 8001e4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e54:	18d4      	adds	r4, r2, r3
        (qdot_k1 + d * q_acc_data[i]) + C2_tmp * q_velocity_data[i];
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4640      	mov	r0, r8
 8001e5c:	4649      	mov	r1, r9
 8001e5e:	f7fe f9c1 	bl	80001e4 <__adddf3>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
    q_velocity_data[i] =
 8001e66:	e9c4 2300 	strd	r2, r3, [r4]
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001e6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e74:	429a      	cmp	r2, r3
 8001e76:	ddc6      	ble.n	8001e06 <Qubic+0x5ee>
  }
  i = q_acc->size[0] * q_acc->size[1];
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	6852      	ldr	r2, [r2, #4]
 8001e82:	3204      	adds	r2, #4
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	fb02 f303 	mul.w	r3, r2, r3
 8001e8a:	67bb      	str	r3, [r7, #120]	; 0x78
  q_acc->size[0] = 1;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(q_acc, i);
 8001e94:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 f85b 	bl	8001f52 <emxEnsureCapacity_real_T>
  q_acc_data = q_acc->data;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	67fb      	str	r3, [r7, #124]	; 0x7c
  C2_tmp = 6.0 * delta1;
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <Qubic+0x704>)
 8001ea8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001eac:	f7fe fb50 	bl	8000550 <__aeabi_dmul>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001eb8:	2300      	movs	r3, #0
 8001eba:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ebc:	e01c      	b.n	8001ef8 <Qubic+0x6e0>
    q_acc_data[i] = d + C2_tmp * q_acc_data[i];
 8001ebe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ec4:	4413      	add	r3, r2
 8001ec6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ece:	f7fe fb3f 	bl	8000550 <__aeabi_dmul>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	4619      	mov	r1, r3
 8001eda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ee0:	18d4      	adds	r4, r2, r3
 8001ee2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ee6:	f7fe f97d 	bl	80001e4 <__adddf3>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	e9c4 2300 	strd	r2, r3, [r4]
  for (i = 0; i <= q_acc_tmp_tmp; i++) {
 8001ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ef8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001efc:	429a      	cmp	r2, r3
 8001efe:	ddde      	ble.n	8001ebe <Qubic+0x6a6>
  }
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	3784      	adds	r7, #132	; 0x84
 8001f06:	46bd      	mov	sp, r7
 8001f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f0c:	f3af 8000 	nop.w
 8001f10:	00000000 	.word	0x00000000
 8001f14:	40080000 	.word	0x40080000
 8001f18:	40080000 	.word	0x40080000
 8001f1c:	40180000 	.word	0x40180000

08001f20 <emxDestroyArray_real_T>:
/*
 * Arguments    : emxArray_real_T *emxArray
 * Return Type  : void
 */
void emxDestroyArray_real_T(emxArray_real_T *emxArray)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  emxFree_real_T(&emxArray);
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 f878 	bl	8002020 <emxFree_real_T>
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <emxInitArray_real_T>:
 * Arguments    : emxArray_real_T **pEmxArray
 *                int numDimensions
 * Return Type  : void
 */
void emxInitArray_real_T(emxArray_real_T **pEmxArray, int numDimensions)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  emxInit_real_T(pEmxArray, numDimensions);
 8001f42:	6839      	ldr	r1, [r7, #0]
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f895 	bl	8002074 <emxInit_real_T>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <emxEnsureCapacity_real_T>:
 * Arguments    : emxArray_real_T *emxArray
 *                int oldNumel
 * Return Type  : void
 */
void emxEnsureCapacity_real_T(emxArray_real_T *emxArray, int oldNumel)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
  int i;
  int newNumel;
  void *newData;
  if (oldNumel < 0) {
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	da01      	bge.n	8001f66 <emxEnsureCapacity_real_T+0x14>
    oldNumel = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	603b      	str	r3, [r7, #0]
  }
  newNumel = 1;
 8001f66:	2301      	movs	r3, #1
 8001f68:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	e00c      	b.n	8001f8a <emxEnsureCapacity_real_T+0x38>
    newNumel *= emxArray->size[i];
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	fb02 f303 	mul.w	r3, r2, r3
 8001f82:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	3301      	adds	r3, #1
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	dbed      	blt.n	8001f70 <emxEnsureCapacity_real_T+0x1e>
  }
  if (newNumel > emxArray->allocatedSize) {
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	dd3c      	ble.n	8002018 <emxEnsureCapacity_real_T+0xc6>
    i = emxArray->allocatedSize;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	617b      	str	r3, [r7, #20]
    if (i < 16) {
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2b0f      	cmp	r3, #15
 8001fa8:	dc0d      	bgt.n	8001fc6 <emxEnsureCapacity_real_T+0x74>
      i = 16;
 8001faa:	2310      	movs	r3, #16
 8001fac:	617b      	str	r3, [r7, #20]
    }
    while (i < newNumel) {
 8001fae:	e00a      	b.n	8001fc6 <emxEnsureCapacity_real_T+0x74>
      if (i > 1073741823) {
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb6:	db03      	blt.n	8001fc0 <emxEnsureCapacity_real_T+0x6e>
        i = MAX_int32_T;
 8001fb8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	e002      	b.n	8001fc6 <emxEnsureCapacity_real_T+0x74>
      } else {
        i *= 2;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	617b      	str	r3, [r7, #20]
    while (i < newNumel) {
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	dbf0      	blt.n	8001fb0 <emxEnsureCapacity_real_T+0x5e>
      }
    }
    newData = calloc((unsigned int)i, sizeof(double));
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2108      	movs	r1, #8
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f008 f8c4 	bl	800a160 <calloc>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	60fb      	str	r3, [r7, #12]
    if (emxArray->data != NULL) {
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d010      	beq.n	8002006 <emxEnsureCapacity_real_T+0xb4>
      memcpy(newData, emxArray->data, sizeof(double) * (unsigned int)oldNumel);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6819      	ldr	r1, [r3, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	461a      	mov	r2, r3
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f008 f8f8 	bl	800a1e4 <memcpy>
      if (emxArray->canFreeData) {
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	7c1b      	ldrb	r3, [r3, #16]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d004      	beq.n	8002006 <emxEnsureCapacity_real_T+0xb4>
        free(emxArray->data);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f008 f8e7 	bl	800a1d4 <free>
      }
    }
    emxArray->data = (double *)newData;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	601a      	str	r2, [r3, #0]
    emxArray->allocatedSize = i;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	609a      	str	r2, [r3, #8]
    emxArray->canFreeData = true;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	741a      	strb	r2, [r3, #16]
  }
}
 8002018:	bf00      	nop
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <emxFree_real_T>:
/*
 * Arguments    : emxArray_real_T **pEmxArray
 * Return Type  : void
 */
void emxFree_real_T(emxArray_real_T **pEmxArray)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  if (*pEmxArray != (emxArray_real_T *)NULL) {
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d01d      	beq.n	800206c <emxFree_real_T+0x4c>
    if (((*pEmxArray)->data != (double *)NULL) && (*pEmxArray)->canFreeData) {
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <emxFree_real_T+0x30>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	7c1b      	ldrb	r3, [r3, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <emxFree_real_T+0x30>
      free((*pEmxArray)->data);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f008 f8c2 	bl	800a1d4 <free>
    }
    free((*pEmxArray)->size);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	4618      	mov	r0, r3
 8002058:	f008 f8bc 	bl	800a1d4 <free>
    free(*pEmxArray);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f008 f8b7 	bl	800a1d4 <free>
    *pEmxArray = (emxArray_real_T *)NULL;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
  }
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <emxInit_real_T>:
 * Arguments    : emxArray_real_T **pEmxArray
 *                int numDimensions
 * Return Type  : void
 */
void emxInit_real_T(emxArray_real_T **pEmxArray, int numDimensions)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  emxArray_real_T *emxArray;
  int i;
  *pEmxArray = (emxArray_real_T *)malloc(sizeof(emxArray_real_T));
 800207e:	2014      	movs	r0, #20
 8002080:	f008 f8a0 	bl	800a1c4 <malloc>
 8002084:	4603      	mov	r3, r0
 8002086:	461a      	mov	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	601a      	str	r2, [r3, #0]
  emxArray = *pEmxArray;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	60bb      	str	r3, [r7, #8]
  emxArray->data = (double *)NULL;
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
  emxArray->numDimensions = numDimensions;
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	60da      	str	r2, [r3, #12]
  emxArray->size = (int *)malloc(sizeof(int) * (unsigned int)numDimensions);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f008 f88e 	bl	800a1c4 <malloc>
 80020a8:	4603      	mov	r3, r0
 80020aa:	461a      	mov	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	605a      	str	r2, [r3, #4]
  emxArray->allocatedSize = 0;
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  emxArray->canFreeData = true;
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2201      	movs	r2, #1
 80020ba:	741a      	strb	r2, [r3, #16]
  for (i = 0; i < numDimensions; i++) {
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	e009      	b.n	80020d6 <emxInit_real_T+0x62>
    emxArray->size[i] = 0;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
  for (i = 0; i < numDimensions; i++) {
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	3301      	adds	r3, #1
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	dbf1      	blt.n	80020c2 <emxInit_real_T+0x4e>
  }
}
 80020de:	bf00      	nop
 80020e0:	bf00      	nop
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80020ec:	f3bf 8f4f 	dsb	sy
}
 80020f0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <__NVIC_SystemReset+0x24>)
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80020fa:	4904      	ldr	r1, [pc, #16]	; (800210c <__NVIC_SystemReset+0x24>)
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <__NVIC_SystemReset+0x28>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002102:	f3bf 8f4f 	dsb	sy
}
 8002106:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002108:	bf00      	nop
 800210a:	e7fd      	b.n	8002108 <__NVIC_SystemReset+0x20>
 800210c:	e000ed00 	.word	0xe000ed00
 8002110:	05fa0004 	.word	0x05fa0004

08002114 <argInit_real_T>:
/*
 * Arguments    : void
 * Return Type  : double
 */
static double argInit_real_T(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return 0.0;
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	f04f 0300 	mov.w	r3, #0
 8002120:	ec43 2b17 	vmov	d7, r2, r3
}
 8002124:	eeb0 0a47 	vmov.f32	s0, s14
 8002128:	eef0 0a67 	vmov.f32	s1, s15
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	0000      	movs	r0, r0
	...

08002138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002140:	f002 ff24 	bl	8004f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002144:	f000 fb3a 	bl	80027bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002148:	f000 fe4a 	bl	8002de0 <MX_GPIO_Init>
  MX_DMA_Init();
 800214c:	f000 fe12 	bl	8002d74 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002150:	f000 fde4 	bl	8002d1c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002154:	f000 fc28 	bl	80029a8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002158:	f000 fd3e 	bl	8002bd8 <MX_TIM5_Init>
  MX_ADC1_Init();
 800215c:	f000 fb96 	bl	800288c <MX_ADC1_Init>
  MX_I2C1_Init();
 8002160:	f000 fbf4 	bl	800294c <MX_I2C1_Init>
  MX_TIM11_Init();
 8002164:	f000 fd86 	bl	8002c74 <MX_TIM11_Init>
  MX_TIM4_Init();
 8002168:	f000 fcc0 	bl	8002aec <MX_TIM4_Init>
  MX_TIM3_Init();
 800216c:	f000 fc70 	bl	8002a50 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  start_p = 0;
 8002170:	4b24      	ldr	r3, [pc, #144]	; (8002204 <main+0xcc>)
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
  stop_p = 15;
 8002178:	4b23      	ldr	r3, [pc, #140]	; (8002208 <main+0xd0>)
 800217a:	4a24      	ldr	r2, [pc, #144]	; (800220c <main+0xd4>)
 800217c:	601a      	str	r2, [r3, #0]
  start_v = 0;
 800217e:	4b24      	ldr	r3, [pc, #144]	; (8002210 <main+0xd8>)
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
  stop_v = 0;
 8002186:	4b23      	ldr	r3, [pc, #140]	; (8002214 <main+0xdc>)
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
  timecycle = 2;
 800218e:	4b22      	ldr	r3, [pc, #136]	; (8002218 <main+0xe0>)
 8002190:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002194:	601a      	str	r2, [r3, #0]
  main_Qubic();
 8002196:	f002 fad1 	bl	800473c <main_Qubic>
  transformRectangleAndPointsPlace();
 800219a:	f001 f9e7 	bl	800356c <transformRectangleAndPointsPlace>
    HAL_ADC_Start_DMA(&hadc1, Joystick_position, 2);
 800219e:	2202      	movs	r2, #2
 80021a0:	491e      	ldr	r1, [pc, #120]	; (800221c <main+0xe4>)
 80021a2:	481f      	ldr	r0, [pc, #124]	; (8002220 <main+0xe8>)
 80021a4:	f002 ffa8 	bl	80050f8 <HAL_ADC_Start_DMA>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);
 80021a8:	2104      	movs	r1, #4
 80021aa:	481e      	ldr	r0, [pc, #120]	; (8002224 <main+0xec>)
 80021ac:	f005 fc4e 	bl	8007a4c <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80021b0:	2100      	movs	r1, #0
 80021b2:	481d      	ldr	r0, [pc, #116]	; (8002228 <main+0xf0>)
 80021b4:	f005 fa18 	bl	80075e8 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim5);
 80021b8:	481c      	ldr	r0, [pc, #112]	; (800222c <main+0xf4>)
 80021ba:	f005 f88d 	bl	80072d8 <HAL_TIM_Base_Start>
	 hmodbus.huart = &huart2;
 80021be:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <main+0xf8>)
 80021c0:	4a1c      	ldr	r2, [pc, #112]	; (8002234 <main+0xfc>)
 80021c2:	60da      	str	r2, [r3, #12]
	 hmodbus.htim = &htim11;
 80021c4:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <main+0xf8>)
 80021c6:	4a1c      	ldr	r2, [pc, #112]	; (8002238 <main+0x100>)
 80021c8:	611a      	str	r2, [r3, #16]
	 hmodbus.slaveAddress = 0x15;
 80021ca:	4b19      	ldr	r3, [pc, #100]	; (8002230 <main+0xf8>)
 80021cc:	2215      	movs	r2, #21
 80021ce:	701a      	strb	r2, [r3, #0]
	 hmodbus.RegisterSize =70;
 80021d0:	4b17      	ldr	r3, [pc, #92]	; (8002230 <main+0xf8>)
 80021d2:	2246      	movs	r2, #70	; 0x46
 80021d4:	609a      	str	r2, [r3, #8]
	 Modbus_init(&hmodbus, registerFrame);
 80021d6:	4919      	ldr	r1, [pc, #100]	; (800223c <main+0x104>)
 80021d8:	4815      	ldr	r0, [pc, #84]	; (8002230 <main+0xf8>)
 80021da:	f7fe fef3 	bl	8000fc4 <Modbus_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  limitsensor();
	  if(starttray == 1){
 80021de:	4b18      	ldr	r3, [pc, #96]	; (8002240 <main+0x108>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d104      	bne.n	80021f0 <main+0xb8>
		  starttray = 0;
 80021e6:	4b16      	ldr	r3, [pc, #88]	; (8002240 <main+0x108>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
		  transformRectangleAndPointsPlace();
 80021ec:	f001 f9be 	bl	800356c <transformRectangleAndPointsPlace>

	  }
	  	  Modbus_Protocal_Worker();
 80021f0:	f7fe ff74 	bl	80010dc <Modbus_Protocal_Worker>
	  	  flowmodbus();
 80021f4:	f001 fc3c 	bl	8003a70 <flowmodbus>
	  	  static uint64_t timeI2C = 0;
	      static uint64_t timestamp = 0;
	      static uint64_t timemodbus = 0;
	      static uint64_t timestampTrajact = 0;
	      if(SoftReset == 1){
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <main+0x10c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d123      	bne.n	8002248 <main+0x110>
	    	  NVIC_SystemReset();
 8002200:	f7ff ff72 	bl	80020e8 <__NVIC_SystemReset>
 8002204:	20000948 	.word	0x20000948
 8002208:	2000094c 	.word	0x2000094c
 800220c:	41700000 	.word	0x41700000
 8002210:	20000950 	.word	0x20000950
 8002214:	20000954 	.word	0x20000954
 8002218:	20000958 	.word	0x20000958
 800221c:	20001280 	.word	0x20001280
 8002220:	200003e8 	.word	0x200003e8
 8002224:	200004e4 	.word	0x200004e4
 8002228:	2000064c 	.word	0x2000064c
 800222c:	20000700 	.word	0x20000700
 8002230:	20000d00 	.word	0x20000d00
 8002234:	20000868 	.word	0x20000868
 8002238:	200007b4 	.word	0x200007b4
 800223c:	200011d8 	.word	0x200011d8
 8002240:	20000944 	.word	0x20000944
 8002244:	20001264 	.word	0x20001264
//	      if(HAL_GetTick() >= timeI2C){
//	    	  timeI2C = HAL_GetTick() + 10;
//	    	  I2C_read_status(data_read);
//	    	  I2C_all();
//	      }
	      int pos = (int)registerFrame[17].U16;
 8002248:	4bbe      	ldr	r3, [pc, #760]	; (8002544 <main+0x40c>)
 800224a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800224c:	607b      	str	r3, [r7, #4]
	  	  if(HAL_GetTick() >= timemodbus){ // heartbeat
 800224e:	f002 ff03 	bl	8005058 <HAL_GetTick>
 8002252:	4603      	mov	r3, r0
 8002254:	2200      	movs	r2, #0
 8002256:	461c      	mov	r4, r3
 8002258:	4615      	mov	r5, r2
 800225a:	4bbb      	ldr	r3, [pc, #748]	; (8002548 <main+0x410>)
 800225c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002260:	4294      	cmp	r4, r2
 8002262:	eb75 0303 	sbcs.w	r3, r5, r3
 8002266:	d343      	bcc.n	80022f0 <main+0x1b8>
	  		  	  timemodbus = HAL_GetTick() + 0.5;
 8002268:	f002 fef6 	bl	8005058 <HAL_GetTick>
 800226c:	4603      	mov	r3, r0
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe f8f4 	bl	800045c <__aeabi_ui2d>
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	4bb4      	ldr	r3, [pc, #720]	; (800254c <main+0x414>)
 800227a:	f7fd ffb3 	bl	80001e4 <__adddf3>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4610      	mov	r0, r2
 8002284:	4619      	mov	r1, r3
 8002286:	f7fe fca3 	bl	8000bd0 <__aeabi_d2ulz>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	49ae      	ldr	r1, [pc, #696]	; (8002548 <main+0x410>)
 8002290:	e9c1 2300 	strd	r2, r3, [r1]
	  			  registerFrame[0].U16 = 22881;
 8002294:	4bab      	ldr	r3, [pc, #684]	; (8002544 <main+0x40c>)
 8002296:	f645 1261 	movw	r2, #22881	; 0x5961
 800229a:	801a      	strh	r2, [r3, #0]
	  			  registerFrame[17].U16 = (int)(ReadDegree-350)*10;
 800229c:	4bac      	ldr	r3, [pc, #688]	; (8002550 <main+0x418>)
 800229e:	edd3 7a00 	vldr	s15, [r3]
 80022a2:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8002554 <main+0x41c>
 80022a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022ae:	ee17 3a90 	vmov	r3, s15
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	0092      	lsls	r2, r2, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	b29a      	uxth	r2, r3
 80022be:	4ba1      	ldr	r3, [pc, #644]	; (8002544 <main+0x40c>)
 80022c0:	845a      	strh	r2, [r3, #34]	; 0x22
	  			  registerFrame[18].U16 = abs(speed);
 80022c2:	4ba5      	ldr	r3, [pc, #660]	; (8002558 <main+0x420>)
 80022c4:	edd3 7a00 	vldr	s15, [r3]
 80022c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022cc:	ee17 3a90 	vmov	r3, s15
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bfb8      	it	lt
 80022d4:	425b      	neglt	r3, r3
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	4b9a      	ldr	r3, [pc, #616]	; (8002544 <main+0x40c>)
 80022da:	849a      	strh	r2, [r3, #36]	; 0x24
	  			  registerFrame[19].U16 = acceleration;
 80022dc:	4b9f      	ldr	r3, [pc, #636]	; (800255c <main+0x424>)
 80022de:	edd3 7a00 	vldr	s15, [r3]
 80022e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022e6:	ee17 3a90 	vmov	r3, s15
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	4b95      	ldr	r3, [pc, #596]	; (8002544 <main+0x40c>)
 80022ee:	84da      	strh	r2, [r3, #38]	; 0x26
	  		}
		  if(HAL_GetTick() >= timestampTrajact){
 80022f0:	f002 feb2 	bl	8005058 <HAL_GetTick>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2200      	movs	r2, #0
 80022f8:	4698      	mov	r8, r3
 80022fa:	4691      	mov	r9, r2
 80022fc:	4b98      	ldr	r3, [pc, #608]	; (8002560 <main+0x428>)
 80022fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002302:	4590      	cmp	r8, r2
 8002304:	eb79 0303 	sbcs.w	r3, r9, r3
 8002308:	d363      	bcc.n	80023d2 <main+0x29a>
			  timestampTrajact = HAL_GetTick() + 0.5;
 800230a:	f002 fea5 	bl	8005058 <HAL_GetTick>
 800230e:	4603      	mov	r3, r0
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe f8a3 	bl	800045c <__aeabi_ui2d>
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	4b8c      	ldr	r3, [pc, #560]	; (800254c <main+0x414>)
 800231c:	f7fd ff62 	bl	80001e4 <__adddf3>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	f7fe fc52 	bl	8000bd0 <__aeabi_d2ulz>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	498b      	ldr	r1, [pc, #556]	; (8002560 <main+0x428>)
 8002332:	e9c1 2300 	strd	r2, r3, [r1]
			  if(path == 0){indexposition = 0;}
 8002336:	4b8b      	ldr	r3, [pc, #556]	; (8002564 <main+0x42c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d102      	bne.n	8002344 <main+0x20c>
 800233e:	4b8a      	ldr	r3, [pc, #552]	; (8002568 <main+0x430>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
			  if(indexposition < (timecycle*2000)-1 && path == 1){
 8002344:	4b88      	ldr	r3, [pc, #544]	; (8002568 <main+0x430>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	ee07 3a90 	vmov	s15, r3
 800234c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002350:	4b86      	ldr	r3, [pc, #536]	; (800256c <main+0x434>)
 8002352:	edd3 7a00 	vldr	s15, [r3]
 8002356:	eddf 6a86 	vldr	s13, [pc, #536]	; 8002570 <main+0x438>
 800235a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800235e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002362:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002366:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800236a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236e:	d530      	bpl.n	80023d2 <main+0x29a>
 8002370:	4b7c      	ldr	r3, [pc, #496]	; (8002564 <main+0x42c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d12c      	bne.n	80023d2 <main+0x29a>
			  positionTraject = q_positionN->data[indexposition];
 8002378:	4b7e      	ldr	r3, [pc, #504]	; (8002574 <main+0x43c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	4b7a      	ldr	r3, [pc, #488]	; (8002568 <main+0x430>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4413      	add	r3, r2
 8002386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238a:	4610      	mov	r0, r2
 800238c:	4619      	mov	r1, r3
 800238e:	f7fe fbb7 	bl	8000b00 <__aeabi_d2f>
 8002392:	4603      	mov	r3, r0
 8002394:	4a78      	ldr	r2, [pc, #480]	; (8002578 <main+0x440>)
 8002396:	6013      	str	r3, [r2, #0]
			  velocityTraject = q_velocityN->data[indexposition];
 8002398:	4b78      	ldr	r3, [pc, #480]	; (800257c <main+0x444>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	4b72      	ldr	r3, [pc, #456]	; (8002568 <main+0x430>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4413      	add	r3, r2
 80023a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	f7fe fba7 	bl	8000b00 <__aeabi_d2f>
 80023b2:	4603      	mov	r3, r0
 80023b4:	4a72      	ldr	r2, [pc, #456]	; (8002580 <main+0x448>)
 80023b6:	6013      	str	r3, [r2, #0]
			  SetDegree = positionTraject;
 80023b8:	4b6f      	ldr	r3, [pc, #444]	; (8002578 <main+0x440>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a71      	ldr	r2, [pc, #452]	; (8002584 <main+0x44c>)
 80023be:	6013      	str	r3, [r2, #0]
			  SetVelocity = velocityTraject;
 80023c0:	4b6f      	ldr	r3, [pc, #444]	; (8002580 <main+0x448>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a70      	ldr	r2, [pc, #448]	; (8002588 <main+0x450>)
 80023c6:	6013      	str	r3, [r2, #0]
			  indexposition += 1;
 80023c8:	4b67      	ldr	r3, [pc, #412]	; (8002568 <main+0x430>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	3301      	adds	r3, #1
 80023ce:	4a66      	ldr	r2, [pc, #408]	; (8002568 <main+0x430>)
 80023d0:	6013      	str	r3, [r2, #0]

			  }
		  }
	      if (HAL_GetTick() >= timestamp) {
 80023d2:	f002 fe41 	bl	8005058 <HAL_GetTick>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2200      	movs	r2, #0
 80023da:	469a      	mov	sl, r3
 80023dc:	4693      	mov	fp, r2
 80023de:	4b6b      	ldr	r3, [pc, #428]	; (800258c <main+0x454>)
 80023e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e4:	4592      	cmp	sl, r2
 80023e6:	eb7b 0303 	sbcs.w	r3, fp, r3
 80023ea:	f4ff aef8 	bcc.w	80021de <main+0xa6>
			  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2); // Read QEI
 80023ee:	4b68      	ldr	r3, [pc, #416]	; (8002590 <main+0x458>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	4a67      	ldr	r2, [pc, #412]	; (8002594 <main+0x45c>)
 80023f6:	6013      	str	r3, [r2, #0]
			  ReadDegree = (QEIReadRaw / 8192.0 * 360)*160/360; // pulse to degree
 80023f8:	4b66      	ldr	r3, [pc, #408]	; (8002594 <main+0x45c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe f82d 	bl	800045c <__aeabi_ui2d>
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	4b64      	ldr	r3, [pc, #400]	; (8002598 <main+0x460>)
 8002408:	f7fe f9cc 	bl	80007a4 <__aeabi_ddiv>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4610      	mov	r0, r2
 8002412:	4619      	mov	r1, r3
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	4b60      	ldr	r3, [pc, #384]	; (800259c <main+0x464>)
 800241a:	f7fe f899 	bl	8000550 <__aeabi_dmul>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4610      	mov	r0, r2
 8002424:	4619      	mov	r1, r3
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	4b5d      	ldr	r3, [pc, #372]	; (80025a0 <main+0x468>)
 800242c:	f7fe f890 	bl	8000550 <__aeabi_dmul>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4610      	mov	r0, r2
 8002436:	4619      	mov	r1, r3
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	4b57      	ldr	r3, [pc, #348]	; (800259c <main+0x464>)
 800243e:	f7fe f9b1 	bl	80007a4 <__aeabi_ddiv>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4610      	mov	r0, r2
 8002448:	4619      	mov	r1, r3
 800244a:	f7fe fb59 	bl	8000b00 <__aeabi_d2f>
 800244e:	4603      	mov	r3, r0
 8002450:	4a3f      	ldr	r2, [pc, #252]	; (8002550 <main+0x418>)
 8002452:	6013      	str	r3, [r2, #0]
			  error = SetDegree - ReadDegree;
 8002454:	4b4b      	ldr	r3, [pc, #300]	; (8002584 <main+0x44c>)
 8002456:	ed93 7a00 	vldr	s14, [r3]
 800245a:	4b3d      	ldr	r3, [pc, #244]	; (8002550 <main+0x418>)
 800245c:	edd3 7a00 	vldr	s15, [r3]
 8002460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002464:	4b4f      	ldr	r3, [pc, #316]	; (80025a4 <main+0x46c>)
 8002466:	edc3 7a00 	vstr	s15, [r3]
			  velocity();
 800246a:	f002 f881 	bl	8004570 <velocity>
			  accelerate();
 800246e:	f002 f8e7 	bl	8004640 <accelerate>
			  speed = ((QEIData.QEIVelocity / 8192.0)*360.0)*160/360;
 8002472:	4b4d      	ldr	r3, [pc, #308]	; (80025a8 <main+0x470>)
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe f812 	bl	80004a0 <__aeabi_f2d>
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	4b45      	ldr	r3, [pc, #276]	; (8002598 <main+0x460>)
 8002482:	f7fe f98f 	bl	80007a4 <__aeabi_ddiv>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4610      	mov	r0, r2
 800248c:	4619      	mov	r1, r3
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	4b42      	ldr	r3, [pc, #264]	; (800259c <main+0x464>)
 8002494:	f7fe f85c 	bl	8000550 <__aeabi_dmul>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	4b3e      	ldr	r3, [pc, #248]	; (80025a0 <main+0x468>)
 80024a6:	f7fe f853 	bl	8000550 <__aeabi_dmul>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	4b39      	ldr	r3, [pc, #228]	; (800259c <main+0x464>)
 80024b8:	f7fe f974 	bl	80007a4 <__aeabi_ddiv>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	f7fe fb1c 	bl	8000b00 <__aeabi_d2f>
 80024c8:	4603      	mov	r3, r0
 80024ca:	4a23      	ldr	r2, [pc, #140]	; (8002558 <main+0x420>)
 80024cc:	6013      	str	r3, [r2, #0]
			  acceleration = QEIAcc.QEIVelocity;
 80024ce:	4b37      	ldr	r3, [pc, #220]	; (80025ac <main+0x474>)
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	4a22      	ldr	r2, [pc, #136]	; (800255c <main+0x424>)
 80024d4:	6013      	str	r3, [r2, #0]
			  DegreeFeedback = control_interrupt(); // PID function
 80024d6:	f001 ff77 	bl	80043c8 <control_interrupt>
 80024da:	eef0 7a40 	vmov.f32	s15, s0
 80024de:	4b34      	ldr	r3, [pc, #208]	; (80025b0 <main+0x478>)
 80024e0:	edc3 7a00 	vstr	s15, [r3]
	          timestamp = HAL_GetTick() + 0.5;
 80024e4:	f002 fdb8 	bl	8005058 <HAL_GetTick>
 80024e8:	4603      	mov	r3, r0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fd ffb6 	bl	800045c <__aeabi_ui2d>
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	4b15      	ldr	r3, [pc, #84]	; (800254c <main+0x414>)
 80024f6:	f7fd fe75 	bl	80001e4 <__adddf3>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4610      	mov	r0, r2
 8002500:	4619      	mov	r1, r3
 8002502:	f7fe fb65 	bl	8000bd0 <__aeabi_d2ulz>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4920      	ldr	r1, [pc, #128]	; (800258c <main+0x454>)
 800250c:	e9c1 2300 	strd	r2, r3, [r1]
		      if(velocityTraject == 0){
 8002510:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <main+0x448>)
 8002512:	edd3 7a00 	vldr	s15, [r3]
 8002516:	eef5 7a40 	vcmp.f32	s15, #0.0
 800251a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251e:	d103      	bne.n	8002528 <main+0x3f0>
		    	  s2 = 0;
 8002520:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <main+0x47c>)
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
		      }
	          if (Joystick_Control == 1) {
 8002528:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <main+0x480>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d17d      	bne.n	800262c <main+0x4f4>
	        	  DegreeFeedback = 0;
 8002530:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <main+0x478>)
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
	        	  s = 0;
 8002538:	4b20      	ldr	r3, [pc, #128]	; (80025bc <main+0x484>)
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e03e      	b.n	80025c0 <main+0x488>
 8002542:	bf00      	nop
 8002544:	200011d8 	.word	0x200011d8
 8002548:	20001310 	.word	0x20001310
 800254c:	3fe00000 	.word	0x3fe00000
 8002550:	20001300 	.word	0x20001300
 8002554:	43af0000 	.word	0x43af0000
 8002558:	20001268 	.word	0x20001268
 800255c:	2000126c 	.word	0x2000126c
 8002560:	20001318 	.word	0x20001318
 8002564:	20001270 	.word	0x20001270
 8002568:	200012d4 	.word	0x200012d4
 800256c:	20000958 	.word	0x20000958
 8002570:	44fa0000 	.word	0x44fa0000
 8002574:	200012cc 	.word	0x200012cc
 8002578:	20001278 	.word	0x20001278
 800257c:	200012c8 	.word	0x200012c8
 8002580:	2000127c 	.word	0x2000127c
 8002584:	20001304 	.word	0x20001304
 8002588:	20000344 	.word	0x20000344
 800258c:	20001320 	.word	0x20001320
 8002590:	200004e4 	.word	0x200004e4
 8002594:	20001274 	.word	0x20001274
 8002598:	40c00000 	.word	0x40c00000
 800259c:	40768000 	.word	0x40768000
 80025a0:	40640000 	.word	0x40640000
 80025a4:	2000130c 	.word	0x2000130c
 80025a8:	2000128c 	.word	0x2000128c
 80025ac:	200012a4 	.word	0x200012a4
 80025b0:	20001308 	.word	0x20001308
 80025b4:	200012ec 	.word	0x200012ec
 80025b8:	20000330 	.word	0x20000330
 80025bc:	200012e0 	.word	0x200012e0
	        	  s2 = 0;
 80025c0:	4b71      	ldr	r3, [pc, #452]	; (8002788 <main+0x650>)
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
	        	  error = 0;
 80025c8:	4b70      	ldr	r3, [pc, #448]	; (800278c <main+0x654>)
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
	        	  error2 = 0;
 80025d0:	4b6f      	ldr	r3, [pc, #444]	; (8002790 <main+0x658>)
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
	              if (Joystick_position[0] >= 3150) {
 80025d8:	4b6e      	ldr	r3, [pc, #440]	; (8002794 <main+0x65c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f640 424d 	movw	r2, #3149	; 0xc4d
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d90a      	bls.n	80025fa <main+0x4c2>
	                  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 16383); // 20 %
 80025e4:	4b6c      	ldr	r3, [pc, #432]	; (8002798 <main+0x660>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80025ec:	635a      	str	r2, [r3, #52]	; 0x34
	                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80025ee:	2201      	movs	r2, #1
 80025f0:	2180      	movs	r1, #128	; 0x80
 80025f2:	486a      	ldr	r0, [pc, #424]	; (800279c <main+0x664>)
 80025f4:	f003 fffa 	bl	80065ec <HAL_GPIO_WritePin>
 80025f8:	e5f1      	b.n	80021de <main+0xa6>
	              }
	              else if (Joystick_position[0] <= 100) {
 80025fa:	4b66      	ldr	r3, [pc, #408]	; (8002794 <main+0x65c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b64      	cmp	r3, #100	; 0x64
 8002600:	d80a      	bhi.n	8002618 <main+0x4e0>
	                  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 16383); // 20 %
 8002602:	4b65      	ldr	r3, [pc, #404]	; (8002798 <main+0x660>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800260a:	635a      	str	r2, [r3, #52]	; 0x34
	                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800260c:	2200      	movs	r2, #0
 800260e:	2180      	movs	r1, #128	; 0x80
 8002610:	4862      	ldr	r0, [pc, #392]	; (800279c <main+0x664>)
 8002612:	f003 ffeb 	bl	80065ec <HAL_GPIO_WritePin>
 8002616:	e5e2      	b.n	80021de <main+0xa6>
	              }
	              else{
	            	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8002618:	4b5f      	ldr	r3, [pc, #380]	; (8002798 <main+0x660>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2200      	movs	r2, #0
 800261e:	635a      	str	r2, [r3, #52]	; 0x34
	            	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8002620:	2200      	movs	r2, #0
 8002622:	2180      	movs	r1, #128	; 0x80
 8002624:	485d      	ldr	r0, [pc, #372]	; (800279c <main+0x664>)
 8002626:	f003 ffe1 	bl	80065ec <HAL_GPIO_WritePin>
 800262a:	e5d8      	b.n	80021de <main+0xa6>
	              }
	          }
	          else if (Joystick_Control == 0) {
 800262c:	4b5c      	ldr	r3, [pc, #368]	; (80027a0 <main+0x668>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	f47f add4 	bne.w	80021de <main+0xa6>
	              if (SetDegree < 0) {
 8002636:	4b5b      	ldr	r3, [pc, #364]	; (80027a4 <main+0x66c>)
 8002638:	edd3 7a00 	vldr	s15, [r3]
 800263c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002644:	d503      	bpl.n	800264e <main+0x516>
	                  SetDegree = 0; // minimum value
 8002646:	4b57      	ldr	r3, [pc, #348]	; (80027a4 <main+0x66c>)
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
	              }
	              if (SetDegree > 700) {
 800264e:	4b55      	ldr	r3, [pc, #340]	; (80027a4 <main+0x66c>)
 8002650:	edd3 7a00 	vldr	s15, [r3]
 8002654:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80027a8 <main+0x670>
 8002658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800265c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002660:	dd02      	ble.n	8002668 <main+0x530>
	                  SetDegree = 700; // maximum value
 8002662:	4b50      	ldr	r3, [pc, #320]	; (80027a4 <main+0x66c>)
 8002664:	4a51      	ldr	r2, [pc, #324]	; (80027ac <main+0x674>)
 8002666:	601a      	str	r2, [r3, #0]
	              }

	              if (error > 0) { // setpoint > read_encoder
 8002668:	4b48      	ldr	r3, [pc, #288]	; (800278c <main+0x654>)
 800266a:	edd3 7a00 	vldr	s15, [r3]
 800266e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002676:	dd38      	ble.n	80026ea <main+0x5b2>
	            	  SetVelocity = abs(SetVelocity);
 8002678:	4b4d      	ldr	r3, [pc, #308]	; (80027b0 <main+0x678>)
 800267a:	edd3 7a00 	vldr	s15, [r3]
 800267e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002682:	ee17 3a90 	vmov	r3, s15
 8002686:	2b00      	cmp	r3, #0
 8002688:	bfb8      	it	lt
 800268a:	425b      	neglt	r3, r3
 800268c:	ee07 3a90 	vmov	s15, r3
 8002690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002694:	4b46      	ldr	r3, [pc, #280]	; (80027b0 <main+0x678>)
 8002696:	edc3 7a00 	vstr	s15, [r3]
	                  if (error < 0.2) {
 800269a:	4b3c      	ldr	r3, [pc, #240]	; (800278c <main+0x654>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fd fefe 	bl	80004a0 <__aeabi_f2d>
 80026a4:	a336      	add	r3, pc, #216	; (adr r3, 8002780 <main+0x648>)
 80026a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026aa:	f7fe f9c3 	bl	8000a34 <__aeabi_dcmplt>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00b      	beq.n	80026cc <main+0x594>
	                      DegreeFeedback = 0; // Limit Position
 80026b4:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <main+0x67c>)
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
	                      s = 0;
 80026bc:	4b3e      	ldr	r3, [pc, #248]	; (80027b8 <main+0x680>)
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
	                      s2 = 0;
 80026c4:	4b30      	ldr	r3, [pc, #192]	; (8002788 <main+0x650>)
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
	                  }
	                  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, DegreeFeedback);
 80026cc:	4b39      	ldr	r3, [pc, #228]	; (80027b4 <main+0x67c>)
 80026ce:	edd3 7a00 	vldr	s15, [r3]
 80026d2:	4b31      	ldr	r3, [pc, #196]	; (8002798 <main+0x660>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026da:	ee17 2a90 	vmov	r2, s15
 80026de:	635a      	str	r2, [r3, #52]	; 0x34
	                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80026e0:	2200      	movs	r2, #0
 80026e2:	2180      	movs	r1, #128	; 0x80
 80026e4:	482d      	ldr	r0, [pc, #180]	; (800279c <main+0x664>)
 80026e6:	f003 ff81 	bl	80065ec <HAL_GPIO_WritePin>
	              }
	              if (error < 0 ) { // setpoint < read_encoder
 80026ea:	4b28      	ldr	r3, [pc, #160]	; (800278c <main+0x654>)
 80026ec:	edd3 7a00 	vldr	s15, [r3]
 80026f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f8:	d53e      	bpl.n	8002778 <main+0x640>
	            	  if(SetVelocity > 0)SetVelocity = -SetVelocity;
 80026fa:	4b2d      	ldr	r3, [pc, #180]	; (80027b0 <main+0x678>)
 80026fc:	edd3 7a00 	vldr	s15, [r3]
 8002700:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002708:	dd07      	ble.n	800271a <main+0x5e2>
 800270a:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <main+0x678>)
 800270c:	edd3 7a00 	vldr	s15, [r3]
 8002710:	eef1 7a67 	vneg.f32	s15, s15
 8002714:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <main+0x678>)
 8002716:	edc3 7a00 	vstr	s15, [r3]
	                  if (error * -1 < 0.2) {
 800271a:	4b1c      	ldr	r3, [pc, #112]	; (800278c <main+0x654>)
 800271c:	edd3 7a00 	vldr	s15, [r3]
 8002720:	eef1 7a67 	vneg.f32	s15, s15
 8002724:	ee17 3a90 	vmov	r3, s15
 8002728:	4618      	mov	r0, r3
 800272a:	f7fd feb9 	bl	80004a0 <__aeabi_f2d>
 800272e:	a314      	add	r3, pc, #80	; (adr r3, 8002780 <main+0x648>)
 8002730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002734:	f7fe f97e 	bl	8000a34 <__aeabi_dcmplt>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00b      	beq.n	8002756 <main+0x61e>
	                      DegreeFeedback = 0; // Limit Position
 800273e:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <main+0x67c>)
 8002740:	f04f 0200 	mov.w	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
	                      s = 0;
 8002746:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <main+0x680>)
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
	                      s2 = 0;
 800274e:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <main+0x650>)
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
	                  }
	                  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, DegreeFeedback * -1);
 8002756:	4b17      	ldr	r3, [pc, #92]	; (80027b4 <main+0x67c>)
 8002758:	edd3 7a00 	vldr	s15, [r3]
 800275c:	eef1 7a67 	vneg.f32	s15, s15
 8002760:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <main+0x660>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002768:	ee17 2a90 	vmov	r2, s15
 800276c:	635a      	str	r2, [r3, #52]	; 0x34
	                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800276e:	2201      	movs	r2, #1
 8002770:	2180      	movs	r1, #128	; 0x80
 8002772:	480a      	ldr	r0, [pc, #40]	; (800279c <main+0x664>)
 8002774:	f003 ff3a 	bl	80065ec <HAL_GPIO_WritePin>
  {
 8002778:	e531      	b.n	80021de <main+0xa6>
 800277a:	bf00      	nop
 800277c:	f3af 8000 	nop.w
 8002780:	9999999a 	.word	0x9999999a
 8002784:	3fc99999 	.word	0x3fc99999
 8002788:	200012ec 	.word	0x200012ec
 800278c:	2000130c 	.word	0x2000130c
 8002790:	200012f0 	.word	0x200012f0
 8002794:	20001280 	.word	0x20001280
 8002798:	2000064c 	.word	0x2000064c
 800279c:	40020000 	.word	0x40020000
 80027a0:	20000330 	.word	0x20000330
 80027a4:	20001304 	.word	0x20001304
 80027a8:	442f0000 	.word	0x442f0000
 80027ac:	442f0000 	.word	0x442f0000
 80027b0:	20000344 	.word	0x20000344
 80027b4:	20001308 	.word	0x20001308
 80027b8:	200012e0 	.word	0x200012e0

080027bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b094      	sub	sp, #80	; 0x50
 80027c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027c2:	f107 0320 	add.w	r3, r7, #32
 80027c6:	2230      	movs	r2, #48	; 0x30
 80027c8:	2100      	movs	r1, #0
 80027ca:	4618      	mov	r0, r3
 80027cc:	f007 fd18 	bl	800a200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027d0:	f107 030c 	add.w	r3, r7, #12
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027e0:	2300      	movs	r3, #0
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	4b27      	ldr	r3, [pc, #156]	; (8002884 <SystemClock_Config+0xc8>)
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	4a26      	ldr	r2, [pc, #152]	; (8002884 <SystemClock_Config+0xc8>)
 80027ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ee:	6413      	str	r3, [r2, #64]	; 0x40
 80027f0:	4b24      	ldr	r3, [pc, #144]	; (8002884 <SystemClock_Config+0xc8>)
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027fc:	2300      	movs	r3, #0
 80027fe:	607b      	str	r3, [r7, #4]
 8002800:	4b21      	ldr	r3, [pc, #132]	; (8002888 <SystemClock_Config+0xcc>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a20      	ldr	r2, [pc, #128]	; (8002888 <SystemClock_Config+0xcc>)
 8002806:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	4b1e      	ldr	r3, [pc, #120]	; (8002888 <SystemClock_Config+0xcc>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002814:	607b      	str	r3, [r7, #4]
 8002816:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002818:	2302      	movs	r3, #2
 800281a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800281c:	2301      	movs	r3, #1
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002820:	2310      	movs	r3, #16
 8002822:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002824:	2302      	movs	r3, #2
 8002826:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002828:	2300      	movs	r3, #0
 800282a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800282c:	2308      	movs	r3, #8
 800282e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002830:	2364      	movs	r3, #100	; 0x64
 8002832:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002834:	2302      	movs	r3, #2
 8002836:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002838:	2304      	movs	r3, #4
 800283a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800283c:	f107 0320 	add.w	r3, r7, #32
 8002840:	4618      	mov	r0, r3
 8002842:	f004 f855 	bl	80068f0 <HAL_RCC_OscConfig>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800284c:	f001 fff4 	bl	8004838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002850:	230f      	movs	r3, #15
 8002852:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002854:	2302      	movs	r3, #2
 8002856:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800285c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002860:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002862:	2300      	movs	r3, #0
 8002864:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002866:	f107 030c 	add.w	r3, r7, #12
 800286a:	2103      	movs	r1, #3
 800286c:	4618      	mov	r0, r3
 800286e:	f004 fab7 	bl	8006de0 <HAL_RCC_ClockConfig>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002878:	f001 ffde 	bl	8004838 <Error_Handler>
  }
}
 800287c:	bf00      	nop
 800287e:	3750      	adds	r7, #80	; 0x50
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40023800 	.word	0x40023800
 8002888:	40007000 	.word	0x40007000

0800288c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002892:	463b      	mov	r3, r7
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800289e:	4b28      	ldr	r3, [pc, #160]	; (8002940 <MX_ADC1_Init+0xb4>)
 80028a0:	4a28      	ldr	r2, [pc, #160]	; (8002944 <MX_ADC1_Init+0xb8>)
 80028a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80028a4:	4b26      	ldr	r3, [pc, #152]	; (8002940 <MX_ADC1_Init+0xb4>)
 80028a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80028ac:	4b24      	ldr	r3, [pc, #144]	; (8002940 <MX_ADC1_Init+0xb4>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80028b2:	4b23      	ldr	r3, [pc, #140]	; (8002940 <MX_ADC1_Init+0xb4>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80028b8:	4b21      	ldr	r3, [pc, #132]	; (8002940 <MX_ADC1_Init+0xb4>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80028be:	4b20      	ldr	r3, [pc, #128]	; (8002940 <MX_ADC1_Init+0xb4>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028c6:	4b1e      	ldr	r3, [pc, #120]	; (8002940 <MX_ADC1_Init+0xb4>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028cc:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <MX_ADC1_Init+0xb4>)
 80028ce:	4a1e      	ldr	r2, [pc, #120]	; (8002948 <MX_ADC1_Init+0xbc>)
 80028d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028d2:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <MX_ADC1_Init+0xb4>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80028d8:	4b19      	ldr	r3, [pc, #100]	; (8002940 <MX_ADC1_Init+0xb4>)
 80028da:	2202      	movs	r2, #2
 80028dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80028de:	4b18      	ldr	r3, [pc, #96]	; (8002940 <MX_ADC1_Init+0xb4>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80028e6:	4b16      	ldr	r3, [pc, #88]	; (8002940 <MX_ADC1_Init+0xb4>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80028ec:	4814      	ldr	r0, [pc, #80]	; (8002940 <MX_ADC1_Init+0xb4>)
 80028ee:	f002 fbbf 	bl	8005070 <HAL_ADC_Init>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80028f8:	f001 ff9e 	bl	8004838 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80028fc:	2308      	movs	r3, #8
 80028fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002900:	2301      	movs	r3, #1
 8002902:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002904:	2303      	movs	r3, #3
 8002906:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002908:	463b      	mov	r3, r7
 800290a:	4619      	mov	r1, r3
 800290c:	480c      	ldr	r0, [pc, #48]	; (8002940 <MX_ADC1_Init+0xb4>)
 800290e:	f002 fd01 	bl	8005314 <HAL_ADC_ConfigChannel>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002918:	f001 ff8e 	bl	8004838 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800291c:	2304      	movs	r3, #4
 800291e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002920:	2302      	movs	r3, #2
 8002922:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002924:	463b      	mov	r3, r7
 8002926:	4619      	mov	r1, r3
 8002928:	4805      	ldr	r0, [pc, #20]	; (8002940 <MX_ADC1_Init+0xb4>)
 800292a:	f002 fcf3 	bl	8005314 <HAL_ADC_ConfigChannel>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002934:	f001 ff80 	bl	8004838 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002938:	bf00      	nop
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	200003e8 	.word	0x200003e8
 8002944:	40012000 	.word	0x40012000
 8002948:	0f000001 	.word	0x0f000001

0800294c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002950:	4b12      	ldr	r3, [pc, #72]	; (800299c <MX_I2C1_Init+0x50>)
 8002952:	4a13      	ldr	r2, [pc, #76]	; (80029a0 <MX_I2C1_Init+0x54>)
 8002954:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002956:	4b11      	ldr	r3, [pc, #68]	; (800299c <MX_I2C1_Init+0x50>)
 8002958:	4a12      	ldr	r2, [pc, #72]	; (80029a4 <MX_I2C1_Init+0x58>)
 800295a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800295c:	4b0f      	ldr	r3, [pc, #60]	; (800299c <MX_I2C1_Init+0x50>)
 800295e:	2200      	movs	r2, #0
 8002960:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002962:	4b0e      	ldr	r3, [pc, #56]	; (800299c <MX_I2C1_Init+0x50>)
 8002964:	2200      	movs	r2, #0
 8002966:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <MX_I2C1_Init+0x50>)
 800296a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800296e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <MX_I2C1_Init+0x50>)
 8002972:	2200      	movs	r2, #0
 8002974:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <MX_I2C1_Init+0x50>)
 8002978:	2200      	movs	r2, #0
 800297a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800297c:	4b07      	ldr	r3, [pc, #28]	; (800299c <MX_I2C1_Init+0x50>)
 800297e:	2200      	movs	r2, #0
 8002980:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <MX_I2C1_Init+0x50>)
 8002984:	2200      	movs	r2, #0
 8002986:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002988:	4804      	ldr	r0, [pc, #16]	; (800299c <MX_I2C1_Init+0x50>)
 800298a:	f003 fe6d 	bl	8006668 <HAL_I2C_Init>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002994:	f001 ff50 	bl	8004838 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002998:	bf00      	nop
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20000490 	.word	0x20000490
 80029a0:	40005400 	.word	0x40005400
 80029a4:	000186a0 	.word	0x000186a0

080029a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08c      	sub	sp, #48	; 0x30
 80029ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029ae:	f107 030c 	add.w	r3, r7, #12
 80029b2:	2224      	movs	r2, #36	; 0x24
 80029b4:	2100      	movs	r1, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f007 fc22 	bl	800a200 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029bc:	1d3b      	adds	r3, r7, #4
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029c4:	4b21      	ldr	r3, [pc, #132]	; (8002a4c <MX_TIM2_Init+0xa4>)
 80029c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80029cc:	4b1f      	ldr	r3, [pc, #124]	; (8002a4c <MX_TIM2_Init+0xa4>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029d2:	4b1e      	ldr	r3, [pc, #120]	; (8002a4c <MX_TIM2_Init+0xa4>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = QEI_PERIOD-1;
 80029d8:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <MX_TIM2_Init+0xa4>)
 80029da:	f649 72ff 	movw	r2, #40959	; 0x9fff
 80029de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029e0:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <MX_TIM2_Init+0xa4>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e6:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <MX_TIM2_Init+0xa4>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029ec:	2303      	movs	r3, #3
 80029ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029f0:	2300      	movs	r3, #0
 80029f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029f4:	2301      	movs	r3, #1
 80029f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029f8:	2300      	movs	r3, #0
 80029fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a00:	2300      	movs	r3, #0
 8002a02:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a04:	2301      	movs	r3, #1
 8002a06:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002a10:	f107 030c 	add.w	r3, r7, #12
 8002a14:	4619      	mov	r1, r3
 8002a16:	480d      	ldr	r0, [pc, #52]	; (8002a4c <MX_TIM2_Init+0xa4>)
 8002a18:	f004 ff64 	bl	80078e4 <HAL_TIM_Encoder_Init>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002a22:	f001 ff09 	bl	8004838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a26:	2300      	movs	r3, #0
 8002a28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a2e:	1d3b      	adds	r3, r7, #4
 8002a30:	4619      	mov	r1, r3
 8002a32:	4806      	ldr	r0, [pc, #24]	; (8002a4c <MX_TIM2_Init+0xa4>)
 8002a34:	f006 f86e 	bl	8008b14 <HAL_TIMEx_MasterConfigSynchronization>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002a3e:	f001 fefb 	bl	8004838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a42:	bf00      	nop
 8002a44:	3730      	adds	r7, #48	; 0x30
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	200004e4 	.word	0x200004e4

08002a50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a56:	f107 0308 	add.w	r3, r7, #8
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	605a      	str	r2, [r3, #4]
 8002a60:	609a      	str	r2, [r3, #8]
 8002a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a64:	463b      	mov	r3, r7
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ae4 <MX_TIM3_Init+0x94>)
 8002a6e:	4a1e      	ldr	r2, [pc, #120]	; (8002ae8 <MX_TIM3_Init+0x98>)
 8002a70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a72:	4b1c      	ldr	r3, [pc, #112]	; (8002ae4 <MX_TIM3_Init+0x94>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a78:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <MX_TIM3_Init+0x94>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a7e:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <MX_TIM3_Init+0x94>)
 8002a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a86:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <MX_TIM3_Init+0x94>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a8c:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <MX_TIM3_Init+0x94>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a92:	4814      	ldr	r0, [pc, #80]	; (8002ae4 <MX_TIM3_Init+0x94>)
 8002a94:	f004 fbc4 	bl	8007220 <HAL_TIM_Base_Init>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002a9e:	f001 fecb 	bl	8004838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aa6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002aa8:	f107 0308 	add.w	r3, r7, #8
 8002aac:	4619      	mov	r1, r3
 8002aae:	480d      	ldr	r0, [pc, #52]	; (8002ae4 <MX_TIM3_Init+0x94>)
 8002ab0:	f005 faa0 	bl	8007ff4 <HAL_TIM_ConfigClockSource>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002aba:	f001 febd 	bl	8004838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ac6:	463b      	mov	r3, r7
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4806      	ldr	r0, [pc, #24]	; (8002ae4 <MX_TIM3_Init+0x94>)
 8002acc:	f006 f822 	bl	8008b14 <HAL_TIMEx_MasterConfigSynchronization>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002ad6:	f001 feaf 	bl	8004838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ada:	bf00      	nop
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000598 	.word	0x20000598
 8002ae8:	40000400 	.word	0x40000400

08002aec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08e      	sub	sp, #56	; 0x38
 8002af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002af2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	605a      	str	r2, [r3, #4]
 8002afc:	609a      	str	r2, [r3, #8]
 8002afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b00:	f107 0320 	add.w	r3, r7, #32
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
 8002b18:	615a      	str	r2, [r3, #20]
 8002b1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b1c:	4b2c      	ldr	r3, [pc, #176]	; (8002bd0 <MX_TIM4_Init+0xe4>)
 8002b1e:	4a2d      	ldr	r2, [pc, #180]	; (8002bd4 <MX_TIM4_Init+0xe8>)
 8002b20:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002b22:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <MX_TIM4_Init+0xe4>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b28:	4b29      	ldr	r3, [pc, #164]	; (8002bd0 <MX_TIM4_Init+0xe4>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002b2e:	4b28      	ldr	r3, [pc, #160]	; (8002bd0 <MX_TIM4_Init+0xe4>)
 8002b30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b34:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b36:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <MX_TIM4_Init+0xe4>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b3c:	4b24      	ldr	r3, [pc, #144]	; (8002bd0 <MX_TIM4_Init+0xe4>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b42:	4823      	ldr	r0, [pc, #140]	; (8002bd0 <MX_TIM4_Init+0xe4>)
 8002b44:	f004 fb6c 	bl	8007220 <HAL_TIM_Base_Init>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002b4e:	f001 fe73 	bl	8004838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	481c      	ldr	r0, [pc, #112]	; (8002bd0 <MX_TIM4_Init+0xe4>)
 8002b60:	f005 fa48 	bl	8007ff4 <HAL_TIM_ConfigClockSource>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002b6a:	f001 fe65 	bl	8004838 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002b6e:	4818      	ldr	r0, [pc, #96]	; (8002bd0 <MX_TIM4_Init+0xe4>)
 8002b70:	f004 fcd4 	bl	800751c <HAL_TIM_PWM_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002b7a:	f001 fe5d 	bl	8004838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b82:	2300      	movs	r3, #0
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b86:	f107 0320 	add.w	r3, r7, #32
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4810      	ldr	r0, [pc, #64]	; (8002bd0 <MX_TIM4_Init+0xe4>)
 8002b8e:	f005 ffc1 	bl	8008b14 <HAL_TIMEx_MasterConfigSynchronization>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002b98:	f001 fe4e 	bl	8004838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b9c:	2360      	movs	r3, #96	; 0x60
 8002b9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bac:	1d3b      	adds	r3, r7, #4
 8002bae:	2200      	movs	r2, #0
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4807      	ldr	r0, [pc, #28]	; (8002bd0 <MX_TIM4_Init+0xe4>)
 8002bb4:	f005 f95c 	bl	8007e70 <HAL_TIM_PWM_ConfigChannel>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002bbe:	f001 fe3b 	bl	8004838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002bc2:	4803      	ldr	r0, [pc, #12]	; (8002bd0 <MX_TIM4_Init+0xe4>)
 8002bc4:	f002 f846 	bl	8004c54 <HAL_TIM_MspPostInit>

}
 8002bc8:	bf00      	nop
 8002bca:	3738      	adds	r7, #56	; 0x38
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	2000064c 	.word	0x2000064c
 8002bd4:	40000800 	.word	0x40000800

08002bd8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bde:	f107 0308 	add.w	r3, r7, #8
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	605a      	str	r2, [r3, #4]
 8002be8:	609a      	str	r2, [r3, #8]
 8002bea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bec:	463b      	mov	r3, r7
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002bf4:	4b1d      	ldr	r3, [pc, #116]	; (8002c6c <MX_TIM5_Init+0x94>)
 8002bf6:	4a1e      	ldr	r2, [pc, #120]	; (8002c70 <MX_TIM5_Init+0x98>)
 8002bf8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8002bfa:	4b1c      	ldr	r3, [pc, #112]	; (8002c6c <MX_TIM5_Init+0x94>)
 8002bfc:	2253      	movs	r2, #83	; 0x53
 8002bfe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c00:	4b1a      	ldr	r3, [pc, #104]	; (8002c6c <MX_TIM5_Init+0x94>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002c06:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <MX_TIM5_Init+0x94>)
 8002c08:	f04f 32ff 	mov.w	r2, #4294967295
 8002c0c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c0e:	4b17      	ldr	r3, [pc, #92]	; (8002c6c <MX_TIM5_Init+0x94>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c14:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <MX_TIM5_Init+0x94>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002c1a:	4814      	ldr	r0, [pc, #80]	; (8002c6c <MX_TIM5_Init+0x94>)
 8002c1c:	f004 fb00 	bl	8007220 <HAL_TIM_Base_Init>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002c26:	f001 fe07 	bl	8004838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002c30:	f107 0308 	add.w	r3, r7, #8
 8002c34:	4619      	mov	r1, r3
 8002c36:	480d      	ldr	r0, [pc, #52]	; (8002c6c <MX_TIM5_Init+0x94>)
 8002c38:	f005 f9dc 	bl	8007ff4 <HAL_TIM_ConfigClockSource>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002c42:	f001 fdf9 	bl	8004838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c46:	2300      	movs	r3, #0
 8002c48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c4e:	463b      	mov	r3, r7
 8002c50:	4619      	mov	r1, r3
 8002c52:	4806      	ldr	r0, [pc, #24]	; (8002c6c <MX_TIM5_Init+0x94>)
 8002c54:	f005 ff5e 	bl	8008b14 <HAL_TIMEx_MasterConfigSynchronization>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002c5e:	f001 fdeb 	bl	8004838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002c62:	bf00      	nop
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000700 	.word	0x20000700
 8002c70:	40000c00 	.word	0x40000c00

08002c74 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c7a:	1d3b      	adds	r3, r7, #4
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	611a      	str	r2, [r3, #16]
 8002c88:	615a      	str	r2, [r3, #20]
 8002c8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002c8c:	4b21      	ldr	r3, [pc, #132]	; (8002d14 <MX_TIM11_Init+0xa0>)
 8002c8e:	4a22      	ldr	r2, [pc, #136]	; (8002d18 <MX_TIM11_Init+0xa4>)
 8002c90:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8002c92:	4b20      	ldr	r3, [pc, #128]	; (8002d14 <MX_TIM11_Init+0xa0>)
 8002c94:	2263      	movs	r2, #99	; 0x63
 8002c96:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c98:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <MX_TIM11_Init+0xa0>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8002c9e:	4b1d      	ldr	r3, [pc, #116]	; (8002d14 <MX_TIM11_Init+0xa0>)
 8002ca0:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8002ca4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ca6:	4b1b      	ldr	r3, [pc, #108]	; (8002d14 <MX_TIM11_Init+0xa0>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cac:	4b19      	ldr	r3, [pc, #100]	; (8002d14 <MX_TIM11_Init+0xa0>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002cb2:	4818      	ldr	r0, [pc, #96]	; (8002d14 <MX_TIM11_Init+0xa0>)
 8002cb4:	f004 fab4 	bl	8007220 <HAL_TIM_Base_Init>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002cbe:	f001 fdbb 	bl	8004838 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8002cc2:	4814      	ldr	r0, [pc, #80]	; (8002d14 <MX_TIM11_Init+0xa0>)
 8002cc4:	f004 fbc4 	bl	8007450 <HAL_TIM_OC_Init>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002cce:	f001 fdb3 	bl	8004838 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 8002cd2:	2108      	movs	r1, #8
 8002cd4:	480f      	ldr	r0, [pc, #60]	; (8002d14 <MX_TIM11_Init+0xa0>)
 8002cd6:	f004 fd37 	bl	8007748 <HAL_TIM_OnePulse_Init>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8002ce0:	f001 fdaa 	bl	8004838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002ce4:	2310      	movs	r3, #16
 8002ce6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8002ce8:	f240 5399 	movw	r3, #1433	; 0x599
 8002cec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cf6:	1d3b      	adds	r3, r7, #4
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4805      	ldr	r0, [pc, #20]	; (8002d14 <MX_TIM11_Init+0xa0>)
 8002cfe:	f005 f85b 	bl	8007db8 <HAL_TIM_OC_ConfigChannel>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8002d08:	f001 fd96 	bl	8004838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002d0c:	bf00      	nop
 8002d0e:	3720      	adds	r7, #32
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	200007b4 	.word	0x200007b4
 8002d18:	40014800 	.word	0x40014800

08002d1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d20:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <MX_USART2_UART_Init+0x50>)
 8002d22:	4a13      	ldr	r2, [pc, #76]	; (8002d70 <MX_USART2_UART_Init+0x54>)
 8002d24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002d26:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <MX_USART2_UART_Init+0x50>)
 8002d28:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002d2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002d2e:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <MX_USART2_UART_Init+0x50>)
 8002d30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d34:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d36:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <MX_USART2_UART_Init+0x50>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <MX_USART2_UART_Init+0x50>)
 8002d3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d44:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <MX_USART2_UART_Init+0x50>)
 8002d46:	220c      	movs	r2, #12
 8002d48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d4a:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <MX_USART2_UART_Init+0x50>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <MX_USART2_UART_Init+0x50>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d56:	4805      	ldr	r0, [pc, #20]	; (8002d6c <MX_USART2_UART_Init+0x50>)
 8002d58:	f005 ff68 	bl	8008c2c <HAL_UART_Init>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8002d62:	f001 fd69 	bl	8004838 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000868 	.word	0x20000868
 8002d70:	40004400 	.word	0x40004400

08002d74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	607b      	str	r3, [r7, #4]
 8002d7e:	4b17      	ldr	r3, [pc, #92]	; (8002ddc <MX_DMA_Init+0x68>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	4a16      	ldr	r2, [pc, #88]	; (8002ddc <MX_DMA_Init+0x68>)
 8002d84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d88:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8a:	4b14      	ldr	r3, [pc, #80]	; (8002ddc <MX_DMA_Init+0x68>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d92:	607b      	str	r3, [r7, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	4b10      	ldr	r3, [pc, #64]	; (8002ddc <MX_DMA_Init+0x68>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	4a0f      	ldr	r2, [pc, #60]	; (8002ddc <MX_DMA_Init+0x68>)
 8002da0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002da4:	6313      	str	r3, [r2, #48]	; 0x30
 8002da6:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <MX_DMA_Init+0x68>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002db2:	2200      	movs	r2, #0
 8002db4:	2100      	movs	r1, #0
 8002db6:	2011      	movs	r0, #17
 8002db8:	f002 fe37 	bl	8005a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002dbc:	2011      	movs	r0, #17
 8002dbe:	f002 fe50 	bl	8005a62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	2038      	movs	r0, #56	; 0x38
 8002dc8:	f002 fe2f 	bl	8005a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002dcc:	2038      	movs	r0, #56	; 0x38
 8002dce:	f002 fe48 	bl	8005a62 <HAL_NVIC_EnableIRQ>

}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800

08002de0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08a      	sub	sp, #40	; 0x28
 8002de4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de6:	f107 0314 	add.w	r3, r7, #20
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	605a      	str	r2, [r3, #4]
 8002df0:	609a      	str	r2, [r3, #8]
 8002df2:	60da      	str	r2, [r3, #12]
 8002df4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	4b3d      	ldr	r3, [pc, #244]	; (8002ef0 <MX_GPIO_Init+0x110>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	4a3c      	ldr	r2, [pc, #240]	; (8002ef0 <MX_GPIO_Init+0x110>)
 8002e00:	f043 0304 	orr.w	r3, r3, #4
 8002e04:	6313      	str	r3, [r2, #48]	; 0x30
 8002e06:	4b3a      	ldr	r3, [pc, #232]	; (8002ef0 <MX_GPIO_Init+0x110>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	4b36      	ldr	r3, [pc, #216]	; (8002ef0 <MX_GPIO_Init+0x110>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	4a35      	ldr	r2, [pc, #212]	; (8002ef0 <MX_GPIO_Init+0x110>)
 8002e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e20:	6313      	str	r3, [r2, #48]	; 0x30
 8002e22:	4b33      	ldr	r3, [pc, #204]	; (8002ef0 <MX_GPIO_Init+0x110>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	4b2f      	ldr	r3, [pc, #188]	; (8002ef0 <MX_GPIO_Init+0x110>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	4a2e      	ldr	r2, [pc, #184]	; (8002ef0 <MX_GPIO_Init+0x110>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3e:	4b2c      	ldr	r3, [pc, #176]	; (8002ef0 <MX_GPIO_Init+0x110>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	607b      	str	r3, [r7, #4]
 8002e4e:	4b28      	ldr	r3, [pc, #160]	; (8002ef0 <MX_GPIO_Init+0x110>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	4a27      	ldr	r2, [pc, #156]	; (8002ef0 <MX_GPIO_Init+0x110>)
 8002e54:	f043 0302 	orr.w	r3, r3, #2
 8002e58:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5a:	4b25      	ldr	r3, [pc, #148]	; (8002ef0 <MX_GPIO_Init+0x110>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	607b      	str	r3, [r7, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIR_Pin, GPIO_PIN_RESET);
 8002e66:	2200      	movs	r2, #0
 8002e68:	21a0      	movs	r1, #160	; 0xa0
 8002e6a:	4822      	ldr	r0, [pc, #136]	; (8002ef4 <MX_GPIO_Init+0x114>)
 8002e6c:	f003 fbbe 	bl	80065ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e76:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e80:	f107 0314 	add.w	r3, r7, #20
 8002e84:	4619      	mov	r1, r3
 8002e86:	481c      	ldr	r0, [pc, #112]	; (8002ef8 <MX_GPIO_Init+0x118>)
 8002e88:	f003 fa14 	bl	80062b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor_Home_Pin Sensor_1_Pin Set_Tray_Pin Clear_Tray_Pin */
  GPIO_InitStruct.Pin = Sensor_Home_Pin|Sensor_1_Pin|Set_Tray_Pin|Clear_Tray_Pin;
 8002e8c:	2333      	movs	r3, #51	; 0x33
 8002e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e98:	f107 0314 	add.w	r3, r7, #20
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4816      	ldr	r0, [pc, #88]	; (8002ef8 <MX_GPIO_Init+0x118>)
 8002ea0:	f003 fa08 	bl	80062b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DIR_Pin;
 8002ea4:	23a0      	movs	r3, #160	; 0xa0
 8002ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb4:	f107 0314 	add.w	r3, r7, #20
 8002eb8:	4619      	mov	r1, r3
 8002eba:	480e      	ldr	r0, [pc, #56]	; (8002ef4 <MX_GPIO_Init+0x114>)
 8002ebc:	f003 f9fa 	bl	80062b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor_2_Pin */
  GPIO_InitStruct.Pin = Sensor_2_Pin;
 8002ec0:	2310      	movs	r3, #16
 8002ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sensor_2_GPIO_Port, &GPIO_InitStruct);
 8002ecc:	f107 0314 	add.w	r3, r7, #20
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	480a      	ldr	r0, [pc, #40]	; (8002efc <MX_GPIO_Init+0x11c>)
 8002ed4:	f003 f9ee 	bl	80062b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2100      	movs	r1, #0
 8002edc:	2028      	movs	r0, #40	; 0x28
 8002ede:	f002 fda4 	bl	8005a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ee2:	2028      	movs	r0, #40	; 0x28
 8002ee4:	f002 fdbd 	bl	8005a62 <HAL_NVIC_EnableIRQ>

}
 8002ee8:	bf00      	nop
 8002eea:	3728      	adds	r7, #40	; 0x28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	40020000 	.word	0x40020000
 8002ef8:	40020800 	.word	0x40020800
 8002efc:	40020400 	.word	0x40020400

08002f00 <feedtrayposition>:
		TIM2->CNT = QEI_PERIOD;
		SetDegree = 0;
	}

}
void feedtrayposition(){
 8002f00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f04:	af00      	add	r7, sp, #0
	transformRectangleAndPointsPlace();
 8002f06:	f000 fb31 	bl	800356c <transformRectangleAndPointsPlace>
	  static uint64_t timestamptray;
	  static uint64_t timemodbus;
	  static int point_tray;
	  if(HAL_GetTick() >= timestamptray){ // heartbeat
 8002f0a:	f002 f8a5 	bl	8005058 <HAL_GetTick>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2200      	movs	r2, #0
 8002f12:	461c      	mov	r4, r3
 8002f14:	4615      	mov	r5, r2
 8002f16:	4b46      	ldr	r3, [pc, #280]	; (8003030 <feedtrayposition+0x130>)
 8002f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1c:	4294      	cmp	r4, r2
 8002f1e:	eb75 0303 	sbcs.w	r3, r5, r3
 8002f22:	f0c0 8082 	bcc.w	800302a <feedtrayposition+0x12a>
		  path = 1;
 8002f26:	4b43      	ldr	r3, [pc, #268]	; (8003034 <feedtrayposition+0x134>)
 8002f28:	2201      	movs	r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
		  indexposition = 0;
 8002f2c:	4b42      	ldr	r3, [pc, #264]	; (8003038 <feedtrayposition+0x138>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
		  timestamptray = HAL_GetTick() + 3000;
 8002f32:	f002 f891 	bl	8005058 <HAL_GetTick>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	4698      	mov	r8, r3
 8002f40:	4691      	mov	r9, r2
 8002f42:	4b3b      	ldr	r3, [pc, #236]	; (8003030 <feedtrayposition+0x130>)
 8002f44:	e9c3 8900 	strd	r8, r9, [r3]
		  // y axis
		  start_p = point_y[plustray]+350;
 8002f48:	4b3c      	ldr	r3, [pc, #240]	; (800303c <feedtrayposition+0x13c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a3c      	ldr	r2, [pc, #240]	; (8003040 <feedtrayposition+0x140>)
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	edd3 7a00 	vldr	s15, [r3]
 8002f56:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003044 <feedtrayposition+0x144>
 8002f5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f5e:	4b3a      	ldr	r3, [pc, #232]	; (8003048 <feedtrayposition+0x148>)
 8002f60:	edc3 7a00 	vstr	s15, [r3]
		  stop_p = point_y[plustray+1]+350;
 8002f64:	4b35      	ldr	r3, [pc, #212]	; (800303c <feedtrayposition+0x13c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	4a35      	ldr	r2, [pc, #212]	; (8003040 <feedtrayposition+0x140>)
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	edd3 7a00 	vldr	s15, [r3]
 8002f74:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003044 <feedtrayposition+0x144>
 8002f78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f7c:	4b33      	ldr	r3, [pc, #204]	; (800304c <feedtrayposition+0x14c>)
 8002f7e:	edc3 7a00 	vstr	s15, [r3]
		  start_v = 0; // qk
 8002f82:	4b33      	ldr	r3, [pc, #204]	; (8003050 <feedtrayposition+0x150>)
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
		  stop_v = 0; // q_dotk+1
 8002f8a:	4b32      	ldr	r3, [pc, #200]	; (8003054 <feedtrayposition+0x154>)
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
		  timecycle = 2;
 8002f92:	4b31      	ldr	r3, [pc, #196]	; (8003058 <feedtrayposition+0x158>)
 8002f94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f98:	601a      	str	r2, [r3, #0]
		  main_Qubic();
 8002f9a:	f001 fbcf 	bl	800473c <main_Qubic>
		  // x axis
		registerFrame[65].U16 = point_x[plustray];// position Tray pick/place
 8002f9e:	4b27      	ldr	r3, [pc, #156]	; (800303c <feedtrayposition+0x13c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a2e      	ldr	r2, [pc, #184]	; (800305c <feedtrayposition+0x15c>)
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	edd3 7a00 	vldr	s15, [r3]
 8002fac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fb0:	ee17 3a90 	vmov	r3, s15
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	4b2a      	ldr	r3, [pc, #168]	; (8003060 <feedtrayposition+0x160>)
 8002fb8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		registerFrame[66].U16 = 3000; // speed x-axis 300mm
 8002fbc:	4b28      	ldr	r3, [pc, #160]	; (8003060 <feedtrayposition+0x160>)
 8002fbe:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002fc2:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		registerFrame[67].U16 = 1; // Acc time 1mms
 8002fc6:	4b26      	ldr	r3, [pc, #152]	; (8003060 <feedtrayposition+0x160>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		registerFrame[64].U16 = 2; //0x40 Moving Status x-axis - run mode
 8002fce:	4b24      	ldr	r3, [pc, #144]	; (8003060 <feedtrayposition+0x160>)
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		if(indexposition == (timecycle*2000)-1){
 8002fd6:	4b18      	ldr	r3, [pc, #96]	; (8003038 <feedtrayposition+0x138>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	ee07 3a90 	vmov	s15, r3
 8002fde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fe2:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <feedtrayposition+0x158>)
 8002fe4:	edd3 7a00 	vldr	s15, [r3]
 8002fe8:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8003064 <feedtrayposition+0x164>
 8002fec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ff0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ff4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ff8:	eeb4 7a67 	vcmp.f32	s14, s15
 8002ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003000:	d102      	bne.n	8003008 <feedtrayposition+0x108>
			indexposition = 0;
 8003002:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <feedtrayposition+0x138>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
		}
		if(plustray < 18){
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <feedtrayposition+0x13c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b11      	cmp	r3, #17
 800300e:	dc05      	bgt.n	800301c <feedtrayposition+0x11c>
			plustray++;
 8003010:	4b0a      	ldr	r3, [pc, #40]	; (800303c <feedtrayposition+0x13c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3301      	adds	r3, #1
 8003016:	4a09      	ldr	r2, [pc, #36]	; (800303c <feedtrayposition+0x13c>)
 8003018:	6013      	str	r3, [r2, #0]
		}
		else if(plustray == 18){
					Mobus = Initial;
		}
	  }
}
 800301a:	e006      	b.n	800302a <feedtrayposition+0x12a>
		else if(plustray == 18){
 800301c:	4b07      	ldr	r3, [pc, #28]	; (800303c <feedtrayposition+0x13c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b12      	cmp	r3, #18
 8003022:	d102      	bne.n	800302a <feedtrayposition+0x12a>
					Mobus = Initial;
 8003024:	4b10      	ldr	r3, [pc, #64]	; (8003068 <feedtrayposition+0x168>)
 8003026:	2200      	movs	r2, #0
 8003028:	701a      	strb	r2, [r3, #0]
}
 800302a:	bf00      	nop
 800302c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003030:	20001328 	.word	0x20001328
 8003034:	20001270 	.word	0x20001270
 8003038:	200012d4 	.word	0x200012d4
 800303c:	2000093c 	.word	0x2000093c
 8003040:	20000200 	.word	0x20000200
 8003044:	43af0000 	.word	0x43af0000
 8003048:	20000948 	.word	0x20000948
 800304c:	2000094c 	.word	0x2000094c
 8003050:	20000950 	.word	0x20000950
 8003054:	20000954 	.word	0x20000954
 8003058:	20000958 	.word	0x20000958
 800305c:	20000964 	.word	0x20000964
 8003060:	200011d8 	.word	0x200011d8
 8003064:	44fa0000 	.word	0x44fa0000
 8003068:	20000cfc 	.word	0x20000cfc

0800306c <transformRectangleAndPointsPick>:
void transformRectangleAndPointsPick() {
 800306c:	b580      	push	{r7, lr}
 800306e:	b08a      	sub	sp, #40	; 0x28
 8003070:	af00      	add	r7, sp, #0

	translation[0] = bottom_left_jog[0];
 8003072:	4bac      	ldr	r3, [pc, #688]	; (8003324 <transformRectangleAndPointsPick+0x2b8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4aac      	ldr	r2, [pc, #688]	; (8003328 <transformRectangleAndPointsPick+0x2bc>)
 8003078:	6013      	str	r3, [r2, #0]
	translation[1] = bottom_left_jog[1];
 800307a:	4baa      	ldr	r3, [pc, #680]	; (8003324 <transformRectangleAndPointsPick+0x2b8>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	4aaa      	ldr	r2, [pc, #680]	; (8003328 <transformRectangleAndPointsPick+0x2bc>)
 8003080:	6053      	str	r3, [r2, #4]

	bottom_right_jog[0] = bottom_right_jog[0]-translation[0];
 8003082:	4baa      	ldr	r3, [pc, #680]	; (800332c <transformRectangleAndPointsPick+0x2c0>)
 8003084:	ed93 7a00 	vldr	s14, [r3]
 8003088:	4ba7      	ldr	r3, [pc, #668]	; (8003328 <transformRectangleAndPointsPick+0x2bc>)
 800308a:	edd3 7a00 	vldr	s15, [r3]
 800308e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003092:	4ba6      	ldr	r3, [pc, #664]	; (800332c <transformRectangleAndPointsPick+0x2c0>)
 8003094:	edc3 7a00 	vstr	s15, [r3]
	bottom_right_jog[1] = bottom_right_jog[1]-translation[1];
 8003098:	4ba4      	ldr	r3, [pc, #656]	; (800332c <transformRectangleAndPointsPick+0x2c0>)
 800309a:	ed93 7a01 	vldr	s14, [r3, #4]
 800309e:	4ba2      	ldr	r3, [pc, #648]	; (8003328 <transformRectangleAndPointsPick+0x2bc>)
 80030a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80030a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030a8:	4ba0      	ldr	r3, [pc, #640]	; (800332c <transformRectangleAndPointsPick+0x2c0>)
 80030aa:	edc3 7a01 	vstr	s15, [r3, #4]

	dot_product = 60*bottom_right_jog[0]+bottom_right_jog[1]*0;
 80030ae:	4b9f      	ldr	r3, [pc, #636]	; (800332c <transformRectangleAndPointsPick+0x2c0>)
 80030b0:	edd3 7a00 	vldr	s15, [r3]
 80030b4:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8003330 <transformRectangleAndPointsPick+0x2c4>
 80030b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030bc:	4b9b      	ldr	r3, [pc, #620]	; (800332c <transformRectangleAndPointsPick+0x2c0>)
 80030be:	edd3 7a01 	vldr	s15, [r3, #4]
 80030c2:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8003334 <transformRectangleAndPointsPick+0x2c8>
 80030c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ce:	4b9a      	ldr	r3, [pc, #616]	; (8003338 <transformRectangleAndPointsPick+0x2cc>)
 80030d0:	edc3 7a00 	vstr	s15, [r3]
	in_theta = dot_product/vectorsize;
 80030d4:	4b98      	ldr	r3, [pc, #608]	; (8003338 <transformRectangleAndPointsPick+0x2cc>)
 80030d6:	edd3 6a00 	vldr	s13, [r3]
 80030da:	4b98      	ldr	r3, [pc, #608]	; (800333c <transformRectangleAndPointsPick+0x2d0>)
 80030dc:	ed93 7a00 	vldr	s14, [r3]
 80030e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030e4:	4b96      	ldr	r3, [pc, #600]	; (8003340 <transformRectangleAndPointsPick+0x2d4>)
 80030e6:	edc3 7a00 	vstr	s15, [r3]
	theta = - acos(in_theta);
 80030ea:	4b95      	ldr	r3, [pc, #596]	; (8003340 <transformRectangleAndPointsPick+0x2d4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fd f9d6 	bl	80004a0 <__aeabi_f2d>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	ec43 2b10 	vmov	d0, r2, r3
 80030fc:	f007 fac8 	bl	800a690 <acos>
 8003100:	ec53 2b10 	vmov	r2, r3, d0
 8003104:	4610      	mov	r0, r2
 8003106:	4619      	mov	r1, r3
 8003108:	f7fd fcfa 	bl	8000b00 <__aeabi_d2f>
 800310c:	4603      	mov	r3, r0
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eef1 7a67 	vneg.f32	s15, s15
 8003116:	4b8b      	ldr	r3, [pc, #556]	; (8003344 <transformRectangleAndPointsPick+0x2d8>)
 8003118:	edc3 7a00 	vstr	s15, [r3]

    T_rotation[0][0] = cos(theta);
 800311c:	4b89      	ldr	r3, [pc, #548]	; (8003344 <transformRectangleAndPointsPick+0x2d8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f7fd f9bd 	bl	80004a0 <__aeabi_f2d>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	ec43 2b10 	vmov	d0, r2, r3
 800312e:	f007 f983 	bl	800a438 <cos>
 8003132:	ec53 2b10 	vmov	r2, r3, d0
 8003136:	4610      	mov	r0, r2
 8003138:	4619      	mov	r1, r3
 800313a:	f7fd fce1 	bl	8000b00 <__aeabi_d2f>
 800313e:	4603      	mov	r3, r0
 8003140:	4a81      	ldr	r2, [pc, #516]	; (8003348 <transformRectangleAndPointsPick+0x2dc>)
 8003142:	6013      	str	r3, [r2, #0]
    T_rotation[0][1] = -sin(theta);
 8003144:	4b7f      	ldr	r3, [pc, #508]	; (8003344 <transformRectangleAndPointsPick+0x2d8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f7fd f9a9 	bl	80004a0 <__aeabi_f2d>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	ec43 2b10 	vmov	d0, r2, r3
 8003156:	f007 fa43 	bl	800a5e0 <sin>
 800315a:	ec53 2b10 	vmov	r2, r3, d0
 800315e:	4610      	mov	r0, r2
 8003160:	4619      	mov	r1, r3
 8003162:	f7fd fccd 	bl	8000b00 <__aeabi_d2f>
 8003166:	4603      	mov	r3, r0
 8003168:	ee07 3a90 	vmov	s15, r3
 800316c:	eef1 7a67 	vneg.f32	s15, s15
 8003170:	4b75      	ldr	r3, [pc, #468]	; (8003348 <transformRectangleAndPointsPick+0x2dc>)
 8003172:	edc3 7a01 	vstr	s15, [r3, #4]
    T_rotation[1][0] = sin(theta);
 8003176:	4b73      	ldr	r3, [pc, #460]	; (8003344 <transformRectangleAndPointsPick+0x2d8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7fd f990 	bl	80004a0 <__aeabi_f2d>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	ec43 2b10 	vmov	d0, r2, r3
 8003188:	f007 fa2a 	bl	800a5e0 <sin>
 800318c:	ec53 2b10 	vmov	r2, r3, d0
 8003190:	4610      	mov	r0, r2
 8003192:	4619      	mov	r1, r3
 8003194:	f7fd fcb4 	bl	8000b00 <__aeabi_d2f>
 8003198:	4603      	mov	r3, r0
 800319a:	4a6b      	ldr	r2, [pc, #428]	; (8003348 <transformRectangleAndPointsPick+0x2dc>)
 800319c:	6093      	str	r3, [r2, #8]
    T_rotation[1][1] = cos(theta);
 800319e:	4b69      	ldr	r3, [pc, #420]	; (8003344 <transformRectangleAndPointsPick+0x2d8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fd f97c 	bl	80004a0 <__aeabi_f2d>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	ec43 2b10 	vmov	d0, r2, r3
 80031b0:	f007 f942 	bl	800a438 <cos>
 80031b4:	ec53 2b10 	vmov	r2, r3, d0
 80031b8:	4610      	mov	r0, r2
 80031ba:	4619      	mov	r1, r3
 80031bc:	f7fd fca0 	bl	8000b00 <__aeabi_d2f>
 80031c0:	4603      	mov	r3, r0
 80031c2:	4a61      	ldr	r2, [pc, #388]	; (8003348 <transformRectangleAndPointsPick+0x2dc>)
 80031c4:	60d3      	str	r3, [r2, #12]

    T[0][0] = T_rotation[0][0];
 80031c6:	4b60      	ldr	r3, [pc, #384]	; (8003348 <transformRectangleAndPointsPick+0x2dc>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a60      	ldr	r2, [pc, #384]	; (800334c <transformRectangleAndPointsPick+0x2e0>)
 80031cc:	6013      	str	r3, [r2, #0]
    T[0][1] = T_rotation[0][1];
 80031ce:	4b5e      	ldr	r3, [pc, #376]	; (8003348 <transformRectangleAndPointsPick+0x2dc>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	4a5e      	ldr	r2, [pc, #376]	; (800334c <transformRectangleAndPointsPick+0x2e0>)
 80031d4:	6053      	str	r3, [r2, #4]
    T[0][2] = translation[0];
 80031d6:	4b54      	ldr	r3, [pc, #336]	; (8003328 <transformRectangleAndPointsPick+0x2bc>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a5c      	ldr	r2, [pc, #368]	; (800334c <transformRectangleAndPointsPick+0x2e0>)
 80031dc:	6093      	str	r3, [r2, #8]
    T[1][0] = T_rotation[1][0];
 80031de:	4b5a      	ldr	r3, [pc, #360]	; (8003348 <transformRectangleAndPointsPick+0x2dc>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	4a5a      	ldr	r2, [pc, #360]	; (800334c <transformRectangleAndPointsPick+0x2e0>)
 80031e4:	60d3      	str	r3, [r2, #12]
    T[1][1] = T_rotation[1][1];
 80031e6:	4b58      	ldr	r3, [pc, #352]	; (8003348 <transformRectangleAndPointsPick+0x2dc>)
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	4a58      	ldr	r2, [pc, #352]	; (800334c <transformRectangleAndPointsPick+0x2e0>)
 80031ec:	6113      	str	r3, [r2, #16]
    T[1][2] = translation[1];
 80031ee:	4b4e      	ldr	r3, [pc, #312]	; (8003328 <transformRectangleAndPointsPick+0x2bc>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	4a56      	ldr	r2, [pc, #344]	; (800334c <transformRectangleAndPointsPick+0x2e0>)
 80031f4:	6153      	str	r3, [r2, #20]
    T[2][0] = 0;
 80031f6:	4b55      	ldr	r3, [pc, #340]	; (800334c <transformRectangleAndPointsPick+0x2e0>)
 80031f8:	f04f 0200 	mov.w	r2, #0
 80031fc:	619a      	str	r2, [r3, #24]
    T[2][1] = 0;
 80031fe:	4b53      	ldr	r3, [pc, #332]	; (800334c <transformRectangleAndPointsPick+0x2e0>)
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	61da      	str	r2, [r3, #28]
    T[2][2] = 1;
 8003206:	4b51      	ldr	r3, [pc, #324]	; (800334c <transformRectangleAndPointsPick+0x2e0>)
 8003208:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800320c:	621a      	str	r2, [r3, #32]

    // Transform the rectangle
    for (int i = 0; i < 5; i++) {
 800320e:	2300      	movs	r3, #0
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
 8003212:	e029      	b.n	8003268 <transformRectangleAndPointsPick+0x1fc>
        homogeneousRectangle[i][0] = rectangle[i][0];
 8003214:	4a4e      	ldr	r2, [pc, #312]	; (8003350 <transformRectangleAndPointsPick+0x2e4>)
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	4413      	add	r3, r2
 800321c:	6819      	ldr	r1, [r3, #0]
 800321e:	484d      	ldr	r0, [pc, #308]	; (8003354 <transformRectangleAndPointsPick+0x2e8>)
 8003220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003222:	4613      	mov	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4403      	add	r3, r0
 800322c:	6019      	str	r1, [r3, #0]
        homogeneousRectangle[i][1] = rectangle[i][1];
 800322e:	4a48      	ldr	r2, [pc, #288]	; (8003350 <transformRectangleAndPointsPick+0x2e4>)
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	4413      	add	r3, r2
 8003236:	3304      	adds	r3, #4
 8003238:	6819      	ldr	r1, [r3, #0]
 800323a:	4846      	ldr	r0, [pc, #280]	; (8003354 <transformRectangleAndPointsPick+0x2e8>)
 800323c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323e:	4613      	mov	r3, r2
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4403      	add	r3, r0
 8003248:	3304      	adds	r3, #4
 800324a:	6019      	str	r1, [r3, #0]
        homogeneousRectangle[i][2] = 1;
 800324c:	4941      	ldr	r1, [pc, #260]	; (8003354 <transformRectangleAndPointsPick+0x2e8>)
 800324e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003250:	4613      	mov	r3, r2
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	3308      	adds	r3, #8
 800325c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003260:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 5; i++) {
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	3301      	adds	r3, #1
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	2b04      	cmp	r3, #4
 800326c:	ddd2      	ble.n	8003214 <transformRectangleAndPointsPick+0x1a8>
    }

    for (int i = 0; i < 5; i++) {
 800326e:	2300      	movs	r3, #0
 8003270:	623b      	str	r3, [r7, #32]
 8003272:	e050      	b.n	8003316 <transformRectangleAndPointsPick+0x2aa>
        for (int j = 0; j < 3; j++) {
 8003274:	2300      	movs	r3, #0
 8003276:	61fb      	str	r3, [r7, #28]
 8003278:	e047      	b.n	800330a <transformRectangleAndPointsPick+0x29e>
            transformedRectangle[i][j] = 0;
 800327a:	4937      	ldr	r1, [pc, #220]	; (8003358 <transformRectangleAndPointsPick+0x2ec>)
 800327c:	6a3a      	ldr	r2, [r7, #32]
 800327e:	4613      	mov	r3, r2
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	4413      	add	r3, r2
 8003284:	69fa      	ldr	r2, [r7, #28]
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 8003292:	2300      	movs	r3, #0
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	e032      	b.n	80032fe <transformRectangleAndPointsPick+0x292>
                transformedRectangle[i][j] += homogeneousRectangle[i][k] * T[k][j];
 8003298:	492f      	ldr	r1, [pc, #188]	; (8003358 <transformRectangleAndPointsPick+0x2ec>)
 800329a:	6a3a      	ldr	r2, [r7, #32]
 800329c:	4613      	mov	r3, r2
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	4413      	add	r3, r2
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	ed93 7a00 	vldr	s14, [r3]
 80032ae:	4929      	ldr	r1, [pc, #164]	; (8003354 <transformRectangleAndPointsPick+0x2e8>)
 80032b0:	6a3a      	ldr	r2, [r7, #32]
 80032b2:	4613      	mov	r3, r2
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	4413      	add	r3, r2
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	edd3 6a00 	vldr	s13, [r3]
 80032c4:	4921      	ldr	r1, [pc, #132]	; (800334c <transformRectangleAndPointsPick+0x2e0>)
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4613      	mov	r3, r2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	4413      	add	r3, r2
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	4413      	add	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	edd3 7a00 	vldr	s15, [r3]
 80032da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032e2:	491d      	ldr	r1, [pc, #116]	; (8003358 <transformRectangleAndPointsPick+0x2ec>)
 80032e4:	6a3a      	ldr	r2, [r7, #32]
 80032e6:	4613      	mov	r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	3301      	adds	r3, #1
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2b02      	cmp	r3, #2
 8003302:	ddc9      	ble.n	8003298 <transformRectangleAndPointsPick+0x22c>
        for (int j = 0; j < 3; j++) {
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	3301      	adds	r3, #1
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	2b02      	cmp	r3, #2
 800330e:	ddb4      	ble.n	800327a <transformRectangleAndPointsPick+0x20e>
    for (int i = 0; i < 5; i++) {
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	3301      	adds	r3, #1
 8003314:	623b      	str	r3, [r7, #32]
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	2b04      	cmp	r3, #4
 800331a:	ddab      	ble.n	8003274 <transformRectangleAndPointsPick+0x208>
            }
        }
    }

    // Transform the points
    for (int i = 0; i < 9; i++) {
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	e046      	b.n	80033b0 <transformRectangleAndPointsPick+0x344>
 8003322:	bf00      	nop
 8003324:	20000b44 	.word	0x20000b44
 8003328:	200009bc 	.word	0x200009bc
 800332c:	20000b4c 	.word	0x20000b4c
 8003330:	42700000 	.word	0x42700000
 8003334:	00000000 	.word	0x00000000
 8003338:	20000b38 	.word	0x20000b38
 800333c:	200002b8 	.word	0x200002b8
 8003340:	20000b40 	.word	0x20000b40
 8003344:	20000b3c 	.word	0x20000b3c
 8003348:	200009ac 	.word	0x200009ac
 800334c:	200009c4 	.word	0x200009c4
 8003350:	20000248 	.word	0x20000248
 8003354:	200009e8 	.word	0x200009e8
 8003358:	20000a24 	.word	0x20000a24
        homogeneousPoints[i][0] = points[i][0];
 800335c:	4a7d      	ldr	r2, [pc, #500]	; (8003554 <transformRectangleAndPointsPick+0x4e8>)
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4413      	add	r3, r2
 8003364:	6819      	ldr	r1, [r3, #0]
 8003366:	487c      	ldr	r0, [pc, #496]	; (8003558 <transformRectangleAndPointsPick+0x4ec>)
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	4613      	mov	r3, r2
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4403      	add	r3, r0
 8003374:	6019      	str	r1, [r3, #0]
        homogeneousPoints[i][1] = points[i][1];
 8003376:	4a77      	ldr	r2, [pc, #476]	; (8003554 <transformRectangleAndPointsPick+0x4e8>)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	4413      	add	r3, r2
 800337e:	3304      	adds	r3, #4
 8003380:	6819      	ldr	r1, [r3, #0]
 8003382:	4875      	ldr	r0, [pc, #468]	; (8003558 <transformRectangleAndPointsPick+0x4ec>)
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	4613      	mov	r3, r2
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	4413      	add	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4403      	add	r3, r0
 8003390:	3304      	adds	r3, #4
 8003392:	6019      	str	r1, [r3, #0]
        homogeneousPoints[i][2] = 1;
 8003394:	4970      	ldr	r1, [pc, #448]	; (8003558 <transformRectangleAndPointsPick+0x4ec>)
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	4613      	mov	r3, r2
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	3308      	adds	r3, #8
 80033a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80033a8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 9; i++) {
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	3301      	adds	r3, #1
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	ddd2      	ble.n	800335c <transformRectangleAndPointsPick+0x2f0>
    }

    for (int i = 0; i < 9; i++) {
 80033b6:	2300      	movs	r3, #0
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	e050      	b.n	800345e <transformRectangleAndPointsPick+0x3f2>
        for (int j = 0; j < 3; j++) {
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	e047      	b.n	8003452 <transformRectangleAndPointsPick+0x3e6>
            transformedPoints[i][j] = 0;
 80033c2:	4966      	ldr	r1, [pc, #408]	; (800355c <transformRectangleAndPointsPick+0x4f0>)
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4613      	mov	r3, r2
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	4413      	add	r3, r2
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	440b      	add	r3, r1
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 80033da:	2300      	movs	r3, #0
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	e032      	b.n	8003446 <transformRectangleAndPointsPick+0x3da>


                transformedPoints[i][j] += homogeneousPoints[i][k] * T[k][j];
 80033e0:	495e      	ldr	r1, [pc, #376]	; (800355c <transformRectangleAndPointsPick+0x4f0>)
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4613      	mov	r3, r2
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	4413      	add	r3, r2
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4413      	add	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	ed93 7a00 	vldr	s14, [r3]
 80033f6:	4958      	ldr	r1, [pc, #352]	; (8003558 <transformRectangleAndPointsPick+0x4ec>)
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4613      	mov	r3, r2
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	4413      	add	r3, r2
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	edd3 6a00 	vldr	s13, [r3]
 800340c:	4954      	ldr	r1, [pc, #336]	; (8003560 <transformRectangleAndPointsPick+0x4f4>)
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	4613      	mov	r3, r2
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	4413      	add	r3, r2
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	edd3 7a00 	vldr	s15, [r3]
 8003422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800342a:	494c      	ldr	r1, [pc, #304]	; (800355c <transformRectangleAndPointsPick+0x4f0>)
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4613      	mov	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	4413      	add	r3, r2
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4413      	add	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	3301      	adds	r3, #1
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2b02      	cmp	r3, #2
 800344a:	ddc9      	ble.n	80033e0 <transformRectangleAndPointsPick+0x374>
        for (int j = 0; j < 3; j++) {
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	3301      	adds	r3, #1
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b02      	cmp	r3, #2
 8003456:	ddb4      	ble.n	80033c2 <transformRectangleAndPointsPick+0x356>
    for (int i = 0; i < 9; i++) {
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	3301      	adds	r3, #1
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	2b08      	cmp	r3, #8
 8003462:	ddab      	ble.n	80033bc <transformRectangleAndPointsPick+0x350>
            }
        }
    }

    // Translation points
    for (int i = 0; i < 9; i++) {
 8003464:	2300      	movs	r3, #0
 8003466:	607b      	str	r3, [r7, #4]
 8003468:	e032      	b.n	80034d0 <transformRectangleAndPointsPick+0x464>
    	transformedPoints[i][0] = transformedPoints[i][0] + translation[0];
 800346a:	493c      	ldr	r1, [pc, #240]	; (800355c <transformRectangleAndPointsPick+0x4f0>)
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	4413      	add	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	ed93 7a00 	vldr	s14, [r3]
 800347c:	4b39      	ldr	r3, [pc, #228]	; (8003564 <transformRectangleAndPointsPick+0x4f8>)
 800347e:	edd3 7a00 	vldr	s15, [r3]
 8003482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003486:	4935      	ldr	r1, [pc, #212]	; (800355c <transformRectangleAndPointsPick+0x4f0>)
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	4413      	add	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	edc3 7a00 	vstr	s15, [r3]
    	transformedPoints[i][1] =  transformedPoints[i][1] + translation[1] ;
 8003498:	4930      	ldr	r1, [pc, #192]	; (800355c <transformRectangleAndPointsPick+0x4f0>)
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	3304      	adds	r3, #4
 80034a8:	ed93 7a00 	vldr	s14, [r3]
 80034ac:	4b2d      	ldr	r3, [pc, #180]	; (8003564 <transformRectangleAndPointsPick+0x4f8>)
 80034ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80034b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034b6:	4929      	ldr	r1, [pc, #164]	; (800355c <transformRectangleAndPointsPick+0x4f0>)
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	3304      	adds	r3, #4
 80034c6:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 9; i++) {
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3301      	adds	r3, #1
 80034ce:	607b      	str	r3, [r7, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	ddc9      	ble.n	800346a <transformRectangleAndPointsPick+0x3fe>
    	//transformedPoints[i][0] = transformedPoints[i][0] *(-1);

    }

    // Translation rectangle
    for (int i = 0; i < 5; i++) {
 80034d6:	2300      	movs	r3, #0
 80034d8:	603b      	str	r3, [r7, #0]
 80034da:	e032      	b.n	8003542 <transformRectangleAndPointsPick+0x4d6>
    	transformedRectangle[i][0] = transformedRectangle[i][0] + + translation[0];
 80034dc:	4922      	ldr	r1, [pc, #136]	; (8003568 <transformRectangleAndPointsPick+0x4fc>)
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	ed93 7a00 	vldr	s14, [r3]
 80034ee:	4b1d      	ldr	r3, [pc, #116]	; (8003564 <transformRectangleAndPointsPick+0x4f8>)
 80034f0:	edd3 7a00 	vldr	s15, [r3]
 80034f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f8:	491b      	ldr	r1, [pc, #108]	; (8003568 <transformRectangleAndPointsPick+0x4fc>)
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	4613      	mov	r3, r2
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	4413      	add	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	edc3 7a00 	vstr	s15, [r3]
    	transformedRectangle[i][1] =  transformedRectangle[i][1] + translation[1] ;
 800350a:	4917      	ldr	r1, [pc, #92]	; (8003568 <transformRectangleAndPointsPick+0x4fc>)
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	3304      	adds	r3, #4
 800351a:	ed93 7a00 	vldr	s14, [r3]
 800351e:	4b11      	ldr	r3, [pc, #68]	; (8003564 <transformRectangleAndPointsPick+0x4f8>)
 8003520:	edd3 7a01 	vldr	s15, [r3, #4]
 8003524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003528:	490f      	ldr	r1, [pc, #60]	; (8003568 <transformRectangleAndPointsPick+0x4fc>)
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	3304      	adds	r3, #4
 8003538:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 5; i++) {
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	3301      	adds	r3, #1
 8003540:	603b      	str	r3, [r7, #0]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b04      	cmp	r3, #4
 8003546:	ddc9      	ble.n	80034dc <transformRectangleAndPointsPick+0x470>
    }


}
 8003548:	bf00      	nop
 800354a:	bf00      	nop
 800354c:	3728      	adds	r7, #40	; 0x28
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20000270 	.word	0x20000270
 8003558:	20000a60 	.word	0x20000a60
 800355c:	20000acc 	.word	0x20000acc
 8003560:	200009c4 	.word	0x200009c4
 8003564:	200009bc 	.word	0x200009bc
 8003568:	20000a24 	.word	0x20000a24

0800356c <transformRectangleAndPointsPlace>:
void transformRectangleAndPointsPlace() {
 800356c:	b580      	push	{r7, lr}
 800356e:	b08a      	sub	sp, #40	; 0x28
 8003570:	af00      	add	r7, sp, #0

	translation2[0] = bottom_left_jog2[0];
 8003572:	4bac      	ldr	r3, [pc, #688]	; (8003824 <transformRectangleAndPointsPlace+0x2b8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4aac      	ldr	r2, [pc, #688]	; (8003828 <transformRectangleAndPointsPlace+0x2bc>)
 8003578:	6013      	str	r3, [r2, #0]
	translation2[1] = bottom_left_jog2[1];
 800357a:	4baa      	ldr	r3, [pc, #680]	; (8003824 <transformRectangleAndPointsPlace+0x2b8>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	4aaa      	ldr	r2, [pc, #680]	; (8003828 <transformRectangleAndPointsPlace+0x2bc>)
 8003580:	6053      	str	r3, [r2, #4]

	bottom_right_jog2[0] = bottom_right_jog2[0]-translation2[0];
 8003582:	4baa      	ldr	r3, [pc, #680]	; (800382c <transformRectangleAndPointsPlace+0x2c0>)
 8003584:	ed93 7a00 	vldr	s14, [r3]
 8003588:	4ba7      	ldr	r3, [pc, #668]	; (8003828 <transformRectangleAndPointsPlace+0x2bc>)
 800358a:	edd3 7a00 	vldr	s15, [r3]
 800358e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003592:	4ba6      	ldr	r3, [pc, #664]	; (800382c <transformRectangleAndPointsPlace+0x2c0>)
 8003594:	edc3 7a00 	vstr	s15, [r3]
	bottom_right_jog2[1] = bottom_right_jog2[1]-translation2[1];
 8003598:	4ba4      	ldr	r3, [pc, #656]	; (800382c <transformRectangleAndPointsPlace+0x2c0>)
 800359a:	ed93 7a01 	vldr	s14, [r3, #4]
 800359e:	4ba2      	ldr	r3, [pc, #648]	; (8003828 <transformRectangleAndPointsPlace+0x2bc>)
 80035a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80035a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035a8:	4ba0      	ldr	r3, [pc, #640]	; (800382c <transformRectangleAndPointsPlace+0x2c0>)
 80035aa:	edc3 7a01 	vstr	s15, [r3, #4]

	dot_product2 = 60*bottom_right_jog2[0]+bottom_right_jog2[1]*0;
 80035ae:	4b9f      	ldr	r3, [pc, #636]	; (800382c <transformRectangleAndPointsPlace+0x2c0>)
 80035b0:	edd3 7a00 	vldr	s15, [r3]
 80035b4:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8003830 <transformRectangleAndPointsPlace+0x2c4>
 80035b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035bc:	4b9b      	ldr	r3, [pc, #620]	; (800382c <transformRectangleAndPointsPlace+0x2c0>)
 80035be:	edd3 7a01 	vldr	s15, [r3, #4]
 80035c2:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8003834 <transformRectangleAndPointsPlace+0x2c8>
 80035c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80035ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035ce:	4b9a      	ldr	r3, [pc, #616]	; (8003838 <transformRectangleAndPointsPlace+0x2cc>)
 80035d0:	edc3 7a00 	vstr	s15, [r3]
	in_theta2 = dot_product2/vectorsize2;
 80035d4:	4b98      	ldr	r3, [pc, #608]	; (8003838 <transformRectangleAndPointsPlace+0x2cc>)
 80035d6:	edd3 6a00 	vldr	s13, [r3]
 80035da:	4b98      	ldr	r3, [pc, #608]	; (800383c <transformRectangleAndPointsPlace+0x2d0>)
 80035dc:	ed93 7a00 	vldr	s14, [r3]
 80035e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035e4:	4b96      	ldr	r3, [pc, #600]	; (8003840 <transformRectangleAndPointsPlace+0x2d4>)
 80035e6:	edc3 7a00 	vstr	s15, [r3]
	theta2 = - acos(in_theta2);
 80035ea:	4b95      	ldr	r3, [pc, #596]	; (8003840 <transformRectangleAndPointsPlace+0x2d4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fc ff56 	bl	80004a0 <__aeabi_f2d>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	ec43 2b10 	vmov	d0, r2, r3
 80035fc:	f007 f848 	bl	800a690 <acos>
 8003600:	ec53 2b10 	vmov	r2, r3, d0
 8003604:	4610      	mov	r0, r2
 8003606:	4619      	mov	r1, r3
 8003608:	f7fd fa7a 	bl	8000b00 <__aeabi_d2f>
 800360c:	4603      	mov	r3, r0
 800360e:	ee07 3a90 	vmov	s15, r3
 8003612:	eef1 7a67 	vneg.f32	s15, s15
 8003616:	4b8b      	ldr	r3, [pc, #556]	; (8003844 <transformRectangleAndPointsPlace+0x2d8>)
 8003618:	edc3 7a00 	vstr	s15, [r3]

    T_rotation2[0][0] = cos(theta2);
 800361c:	4b89      	ldr	r3, [pc, #548]	; (8003844 <transformRectangleAndPointsPlace+0x2d8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4618      	mov	r0, r3
 8003622:	f7fc ff3d 	bl	80004a0 <__aeabi_f2d>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	ec43 2b10 	vmov	d0, r2, r3
 800362e:	f006 ff03 	bl	800a438 <cos>
 8003632:	ec53 2b10 	vmov	r2, r3, d0
 8003636:	4610      	mov	r0, r2
 8003638:	4619      	mov	r1, r3
 800363a:	f7fd fa61 	bl	8000b00 <__aeabi_d2f>
 800363e:	4603      	mov	r3, r0
 8003640:	4a81      	ldr	r2, [pc, #516]	; (8003848 <transformRectangleAndPointsPlace+0x2dc>)
 8003642:	6013      	str	r3, [r2, #0]
    T_rotation2[0][1] = -sin(theta2);
 8003644:	4b7f      	ldr	r3, [pc, #508]	; (8003844 <transformRectangleAndPointsPlace+0x2d8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f7fc ff29 	bl	80004a0 <__aeabi_f2d>
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	ec43 2b10 	vmov	d0, r2, r3
 8003656:	f006 ffc3 	bl	800a5e0 <sin>
 800365a:	ec53 2b10 	vmov	r2, r3, d0
 800365e:	4610      	mov	r0, r2
 8003660:	4619      	mov	r1, r3
 8003662:	f7fd fa4d 	bl	8000b00 <__aeabi_d2f>
 8003666:	4603      	mov	r3, r0
 8003668:	ee07 3a90 	vmov	s15, r3
 800366c:	eef1 7a67 	vneg.f32	s15, s15
 8003670:	4b75      	ldr	r3, [pc, #468]	; (8003848 <transformRectangleAndPointsPlace+0x2dc>)
 8003672:	edc3 7a01 	vstr	s15, [r3, #4]
    T_rotation2[1][0] = sin(theta2);
 8003676:	4b73      	ldr	r3, [pc, #460]	; (8003844 <transformRectangleAndPointsPlace+0x2d8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7fc ff10 	bl	80004a0 <__aeabi_f2d>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	ec43 2b10 	vmov	d0, r2, r3
 8003688:	f006 ffaa 	bl	800a5e0 <sin>
 800368c:	ec53 2b10 	vmov	r2, r3, d0
 8003690:	4610      	mov	r0, r2
 8003692:	4619      	mov	r1, r3
 8003694:	f7fd fa34 	bl	8000b00 <__aeabi_d2f>
 8003698:	4603      	mov	r3, r0
 800369a:	4a6b      	ldr	r2, [pc, #428]	; (8003848 <transformRectangleAndPointsPlace+0x2dc>)
 800369c:	6093      	str	r3, [r2, #8]
    T_rotation2[1][1] = cos(theta2);
 800369e:	4b69      	ldr	r3, [pc, #420]	; (8003844 <transformRectangleAndPointsPlace+0x2d8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fc fefc 	bl	80004a0 <__aeabi_f2d>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	ec43 2b10 	vmov	d0, r2, r3
 80036b0:	f006 fec2 	bl	800a438 <cos>
 80036b4:	ec53 2b10 	vmov	r2, r3, d0
 80036b8:	4610      	mov	r0, r2
 80036ba:	4619      	mov	r1, r3
 80036bc:	f7fd fa20 	bl	8000b00 <__aeabi_d2f>
 80036c0:	4603      	mov	r3, r0
 80036c2:	4a61      	ldr	r2, [pc, #388]	; (8003848 <transformRectangleAndPointsPlace+0x2dc>)
 80036c4:	60d3      	str	r3, [r2, #12]

    T2[0][0] = T_rotation2[0][0];
 80036c6:	4b60      	ldr	r3, [pc, #384]	; (8003848 <transformRectangleAndPointsPlace+0x2dc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a60      	ldr	r2, [pc, #384]	; (800384c <transformRectangleAndPointsPlace+0x2e0>)
 80036cc:	6013      	str	r3, [r2, #0]
    T2[0][1] = T_rotation2[0][1];
 80036ce:	4b5e      	ldr	r3, [pc, #376]	; (8003848 <transformRectangleAndPointsPlace+0x2dc>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	4a5e      	ldr	r2, [pc, #376]	; (800384c <transformRectangleAndPointsPlace+0x2e0>)
 80036d4:	6053      	str	r3, [r2, #4]
    T2[0][2] = translation2[0];
 80036d6:	4b54      	ldr	r3, [pc, #336]	; (8003828 <transformRectangleAndPointsPlace+0x2bc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a5c      	ldr	r2, [pc, #368]	; (800384c <transformRectangleAndPointsPlace+0x2e0>)
 80036dc:	6093      	str	r3, [r2, #8]
    T2[1][0] = T_rotation2[1][0];
 80036de:	4b5a      	ldr	r3, [pc, #360]	; (8003848 <transformRectangleAndPointsPlace+0x2dc>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	4a5a      	ldr	r2, [pc, #360]	; (800384c <transformRectangleAndPointsPlace+0x2e0>)
 80036e4:	60d3      	str	r3, [r2, #12]
    T2[1][1] = T_rotation2[1][1];
 80036e6:	4b58      	ldr	r3, [pc, #352]	; (8003848 <transformRectangleAndPointsPlace+0x2dc>)
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	4a58      	ldr	r2, [pc, #352]	; (800384c <transformRectangleAndPointsPlace+0x2e0>)
 80036ec:	6113      	str	r3, [r2, #16]
    T2[1][2] = translation2[1];
 80036ee:	4b4e      	ldr	r3, [pc, #312]	; (8003828 <transformRectangleAndPointsPlace+0x2bc>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	4a56      	ldr	r2, [pc, #344]	; (800384c <transformRectangleAndPointsPlace+0x2e0>)
 80036f4:	6153      	str	r3, [r2, #20]
    T2[2][0] = 0;
 80036f6:	4b55      	ldr	r3, [pc, #340]	; (800384c <transformRectangleAndPointsPlace+0x2e0>)
 80036f8:	f04f 0200 	mov.w	r2, #0
 80036fc:	619a      	str	r2, [r3, #24]
    T2[2][1] = 0;
 80036fe:	4b53      	ldr	r3, [pc, #332]	; (800384c <transformRectangleAndPointsPlace+0x2e0>)
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	61da      	str	r2, [r3, #28]
    T2[2][2] = 1;
 8003706:	4b51      	ldr	r3, [pc, #324]	; (800384c <transformRectangleAndPointsPlace+0x2e0>)
 8003708:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800370c:	621a      	str	r2, [r3, #32]

    // Transform the rectangle
    for (int i = 0; i < 5; i++) {
 800370e:	2300      	movs	r3, #0
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
 8003712:	e029      	b.n	8003768 <transformRectangleAndPointsPlace+0x1fc>
        homogeneousRectangle2[i][0] = rectangle2[i][0];
 8003714:	4a4e      	ldr	r2, [pc, #312]	; (8003850 <transformRectangleAndPointsPlace+0x2e4>)
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4413      	add	r3, r2
 800371c:	6819      	ldr	r1, [r3, #0]
 800371e:	484d      	ldr	r0, [pc, #308]	; (8003854 <transformRectangleAndPointsPlace+0x2e8>)
 8003720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003722:	4613      	mov	r3, r2
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	4413      	add	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4403      	add	r3, r0
 800372c:	6019      	str	r1, [r3, #0]
        homogeneousRectangle2[i][1] = rectangle2[i][1];
 800372e:	4a48      	ldr	r2, [pc, #288]	; (8003850 <transformRectangleAndPointsPlace+0x2e4>)
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4413      	add	r3, r2
 8003736:	3304      	adds	r3, #4
 8003738:	6819      	ldr	r1, [r3, #0]
 800373a:	4846      	ldr	r0, [pc, #280]	; (8003854 <transformRectangleAndPointsPlace+0x2e8>)
 800373c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800373e:	4613      	mov	r3, r2
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	4413      	add	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4403      	add	r3, r0
 8003748:	3304      	adds	r3, #4
 800374a:	6019      	str	r1, [r3, #0]
        homogeneousRectangle2[i][2] = 1;
 800374c:	4941      	ldr	r1, [pc, #260]	; (8003854 <transformRectangleAndPointsPlace+0x2e8>)
 800374e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003750:	4613      	mov	r3, r2
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	3308      	adds	r3, #8
 800375c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003760:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 5; i++) {
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	3301      	adds	r3, #1
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	2b04      	cmp	r3, #4
 800376c:	ddd2      	ble.n	8003714 <transformRectangleAndPointsPlace+0x1a8>
    }

    for (int i = 0; i < 5; i++) {
 800376e:	2300      	movs	r3, #0
 8003770:	623b      	str	r3, [r7, #32]
 8003772:	e050      	b.n	8003816 <transformRectangleAndPointsPlace+0x2aa>
        for (int j = 0; j < 3; j++) {
 8003774:	2300      	movs	r3, #0
 8003776:	61fb      	str	r3, [r7, #28]
 8003778:	e047      	b.n	800380a <transformRectangleAndPointsPlace+0x29e>
            transformedRectangle2[i][j] = 0;
 800377a:	4937      	ldr	r1, [pc, #220]	; (8003858 <transformRectangleAndPointsPlace+0x2ec>)
 800377c:	6a3a      	ldr	r2, [r7, #32]
 800377e:	4613      	mov	r3, r2
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	4413      	add	r3, r2
 8003784:	69fa      	ldr	r2, [r7, #28]
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 8003792:	2300      	movs	r3, #0
 8003794:	61bb      	str	r3, [r7, #24]
 8003796:	e032      	b.n	80037fe <transformRectangleAndPointsPlace+0x292>
                transformedRectangle2[i][j] += homogeneousRectangle2[i][k] * T2[k][j];
 8003798:	492f      	ldr	r1, [pc, #188]	; (8003858 <transformRectangleAndPointsPlace+0x2ec>)
 800379a:	6a3a      	ldr	r2, [r7, #32]
 800379c:	4613      	mov	r3, r2
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	4413      	add	r3, r2
 80037a2:	69fa      	ldr	r2, [r7, #28]
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	ed93 7a00 	vldr	s14, [r3]
 80037ae:	4929      	ldr	r1, [pc, #164]	; (8003854 <transformRectangleAndPointsPlace+0x2e8>)
 80037b0:	6a3a      	ldr	r2, [r7, #32]
 80037b2:	4613      	mov	r3, r2
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	4413      	add	r3, r2
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4413      	add	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	440b      	add	r3, r1
 80037c0:	edd3 6a00 	vldr	s13, [r3]
 80037c4:	4921      	ldr	r1, [pc, #132]	; (800384c <transformRectangleAndPointsPlace+0x2e0>)
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4613      	mov	r3, r2
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	4413      	add	r3, r2
 80037ce:	69fa      	ldr	r2, [r7, #28]
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	edd3 7a00 	vldr	s15, [r3]
 80037da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037e2:	491d      	ldr	r1, [pc, #116]	; (8003858 <transformRectangleAndPointsPlace+0x2ec>)
 80037e4:	6a3a      	ldr	r2, [r7, #32]
 80037e6:	4613      	mov	r3, r2
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	4413      	add	r3, r2
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	4413      	add	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	440b      	add	r3, r1
 80037f4:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	3301      	adds	r3, #1
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	2b02      	cmp	r3, #2
 8003802:	ddc9      	ble.n	8003798 <transformRectangleAndPointsPlace+0x22c>
        for (int j = 0; j < 3; j++) {
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	3301      	adds	r3, #1
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	2b02      	cmp	r3, #2
 800380e:	ddb4      	ble.n	800377a <transformRectangleAndPointsPlace+0x20e>
    for (int i = 0; i < 5; i++) {
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	3301      	adds	r3, #1
 8003814:	623b      	str	r3, [r7, #32]
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	2b04      	cmp	r3, #4
 800381a:	ddab      	ble.n	8003774 <transformRectangleAndPointsPlace+0x208>
            }
        }
    }

    // Transform the points
    for (int i = 0; i < 9; i++) {
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	e046      	b.n	80038b0 <transformRectangleAndPointsPlace+0x344>
 8003822:	bf00      	nop
 8003824:	20000cec 	.word	0x20000cec
 8003828:	20000b64 	.word	0x20000b64
 800382c:	20000cf4 	.word	0x20000cf4
 8003830:	42700000 	.word	0x42700000
 8003834:	00000000 	.word	0x00000000
 8003838:	20000ce0 	.word	0x20000ce0
 800383c:	2000032c 	.word	0x2000032c
 8003840:	20000ce8 	.word	0x20000ce8
 8003844:	20000ce4 	.word	0x20000ce4
 8003848:	20000b54 	.word	0x20000b54
 800384c:	20000b6c 	.word	0x20000b6c
 8003850:	200002bc 	.word	0x200002bc
 8003854:	20000b90 	.word	0x20000b90
 8003858:	20000bcc 	.word	0x20000bcc
        homogeneousPoints2[i][0] = points2[i][0];
 800385c:	4a7d      	ldr	r2, [pc, #500]	; (8003a54 <transformRectangleAndPointsPlace+0x4e8>)
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4413      	add	r3, r2
 8003864:	6819      	ldr	r1, [r3, #0]
 8003866:	487c      	ldr	r0, [pc, #496]	; (8003a58 <transformRectangleAndPointsPlace+0x4ec>)
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	4613      	mov	r3, r2
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	4413      	add	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4403      	add	r3, r0
 8003874:	6019      	str	r1, [r3, #0]
        homogeneousPoints2[i][1] = points2[i][1];
 8003876:	4a77      	ldr	r2, [pc, #476]	; (8003a54 <transformRectangleAndPointsPlace+0x4e8>)
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	4413      	add	r3, r2
 800387e:	3304      	adds	r3, #4
 8003880:	6819      	ldr	r1, [r3, #0]
 8003882:	4875      	ldr	r0, [pc, #468]	; (8003a58 <transformRectangleAndPointsPlace+0x4ec>)
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	4613      	mov	r3, r2
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	4413      	add	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4403      	add	r3, r0
 8003890:	3304      	adds	r3, #4
 8003892:	6019      	str	r1, [r3, #0]
        homogeneousPoints2[i][2] = 1;
 8003894:	4970      	ldr	r1, [pc, #448]	; (8003a58 <transformRectangleAndPointsPlace+0x4ec>)
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4613      	mov	r3, r2
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	4413      	add	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	3308      	adds	r3, #8
 80038a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80038a8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 9; i++) {
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	3301      	adds	r3, #1
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	ddd2      	ble.n	800385c <transformRectangleAndPointsPlace+0x2f0>
    }

    for (int i = 0; i < 9; i++) {
 80038b6:	2300      	movs	r3, #0
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	e050      	b.n	800395e <transformRectangleAndPointsPlace+0x3f2>
        for (int j = 0; j < 3; j++) {
 80038bc:	2300      	movs	r3, #0
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	e047      	b.n	8003952 <transformRectangleAndPointsPlace+0x3e6>
            transformedPoints2[i][j] = 0;
 80038c2:	4966      	ldr	r1, [pc, #408]	; (8003a5c <transformRectangleAndPointsPlace+0x4f0>)
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4613      	mov	r3, r2
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	4413      	add	r3, r2
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	440b      	add	r3, r1
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 80038da:	2300      	movs	r3, #0
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	e032      	b.n	8003946 <transformRectangleAndPointsPlace+0x3da>


                transformedPoints2[i][j] += homogeneousPoints2[i][k] * T2[k][j];
 80038e0:	495e      	ldr	r1, [pc, #376]	; (8003a5c <transformRectangleAndPointsPlace+0x4f0>)
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	4613      	mov	r3, r2
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	4413      	add	r3, r2
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4413      	add	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	ed93 7a00 	vldr	s14, [r3]
 80038f6:	4958      	ldr	r1, [pc, #352]	; (8003a58 <transformRectangleAndPointsPlace+0x4ec>)
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4613      	mov	r3, r2
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	4413      	add	r3, r2
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	4413      	add	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	440b      	add	r3, r1
 8003908:	edd3 6a00 	vldr	s13, [r3]
 800390c:	4954      	ldr	r1, [pc, #336]	; (8003a60 <transformRectangleAndPointsPlace+0x4f4>)
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	4613      	mov	r3, r2
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	4413      	add	r3, r2
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	edd3 7a00 	vldr	s15, [r3]
 8003922:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003926:	ee77 7a27 	vadd.f32	s15, s14, s15
 800392a:	494c      	ldr	r1, [pc, #304]	; (8003a5c <transformRectangleAndPointsPlace+0x4f0>)
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4613      	mov	r3, r2
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	4413      	add	r3, r2
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	3301      	adds	r3, #1
 8003944:	60bb      	str	r3, [r7, #8]
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b02      	cmp	r3, #2
 800394a:	ddc9      	ble.n	80038e0 <transformRectangleAndPointsPlace+0x374>
        for (int j = 0; j < 3; j++) {
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	3301      	adds	r3, #1
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2b02      	cmp	r3, #2
 8003956:	ddb4      	ble.n	80038c2 <transformRectangleAndPointsPlace+0x356>
    for (int i = 0; i < 9; i++) {
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	3301      	adds	r3, #1
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2b08      	cmp	r3, #8
 8003962:	ddab      	ble.n	80038bc <transformRectangleAndPointsPlace+0x350>
            }
        }
    }

    // Translation points
    for (int i = 0; i < 9; i++) {
 8003964:	2300      	movs	r3, #0
 8003966:	607b      	str	r3, [r7, #4]
 8003968:	e032      	b.n	80039d0 <transformRectangleAndPointsPlace+0x464>
    	transformedPoints2[i][0] = transformedPoints2[i][0] + translation2[0];
 800396a:	493c      	ldr	r1, [pc, #240]	; (8003a5c <transformRectangleAndPointsPlace+0x4f0>)
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	4413      	add	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	ed93 7a00 	vldr	s14, [r3]
 800397c:	4b39      	ldr	r3, [pc, #228]	; (8003a64 <transformRectangleAndPointsPlace+0x4f8>)
 800397e:	edd3 7a00 	vldr	s15, [r3]
 8003982:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003986:	4935      	ldr	r1, [pc, #212]	; (8003a5c <transformRectangleAndPointsPlace+0x4f0>)
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	edc3 7a00 	vstr	s15, [r3]
    	transformedPoints2[i][1] =  transformedPoints2[i][1] + translation2[1] ;
 8003998:	4930      	ldr	r1, [pc, #192]	; (8003a5c <transformRectangleAndPointsPlace+0x4f0>)
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	4413      	add	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	3304      	adds	r3, #4
 80039a8:	ed93 7a00 	vldr	s14, [r3]
 80039ac:	4b2d      	ldr	r3, [pc, #180]	; (8003a64 <transformRectangleAndPointsPlace+0x4f8>)
 80039ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80039b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039b6:	4929      	ldr	r1, [pc, #164]	; (8003a5c <transformRectangleAndPointsPlace+0x4f0>)
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	3304      	adds	r3, #4
 80039c6:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 9; i++) {
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3301      	adds	r3, #1
 80039ce:	607b      	str	r3, [r7, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	ddc9      	ble.n	800396a <transformRectangleAndPointsPlace+0x3fe>
    	//transformedPoints2[i][0] = transformedPoints2[i][0] *(-1);

    }

    // Translation rectangle
    for (int i = 0; i < 5; i++) {
 80039d6:	2300      	movs	r3, #0
 80039d8:	603b      	str	r3, [r7, #0]
 80039da:	e032      	b.n	8003a42 <transformRectangleAndPointsPlace+0x4d6>
    	transformedRectangle2[i][0] = transformedRectangle2[i][0] + + translation2[0];
 80039dc:	4922      	ldr	r1, [pc, #136]	; (8003a68 <transformRectangleAndPointsPlace+0x4fc>)
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	4613      	mov	r3, r2
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	4413      	add	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	440b      	add	r3, r1
 80039ea:	ed93 7a00 	vldr	s14, [r3]
 80039ee:	4b1d      	ldr	r3, [pc, #116]	; (8003a64 <transformRectangleAndPointsPlace+0x4f8>)
 80039f0:	edd3 7a00 	vldr	s15, [r3]
 80039f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039f8:	491b      	ldr	r1, [pc, #108]	; (8003a68 <transformRectangleAndPointsPlace+0x4fc>)
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	4613      	mov	r3, r2
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	edc3 7a00 	vstr	s15, [r3]
    	transformedRectangle2[i][1] =  transformedRectangle2[i][1] + translation2[1] ;
 8003a0a:	4917      	ldr	r1, [pc, #92]	; (8003a68 <transformRectangleAndPointsPlace+0x4fc>)
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	3304      	adds	r3, #4
 8003a1a:	ed93 7a00 	vldr	s14, [r3]
 8003a1e:	4b11      	ldr	r3, [pc, #68]	; (8003a64 <transformRectangleAndPointsPlace+0x4f8>)
 8003a20:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a28:	490f      	ldr	r1, [pc, #60]	; (8003a68 <transformRectangleAndPointsPlace+0x4fc>)
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	4413      	add	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	3304      	adds	r3, #4
 8003a38:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 5; i++) {
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	603b      	str	r3, [r7, #0]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b04      	cmp	r3, #4
 8003a46:	ddc9      	ble.n	80039dc <transformRectangleAndPointsPlace+0x470>
    }


}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	3728      	adds	r7, #40	; 0x28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	200002e4 	.word	0x200002e4
 8003a58:	20000c08 	.word	0x20000c08
 8003a5c:	20000c74 	.word	0x20000c74
 8003a60:	20000b6c 	.word	0x20000b6c
 8003a64:	20000b64 	.word	0x20000b64
 8003a68:	20000bcc 	.word	0x20000bcc
 8003a6c:	00000000 	.word	0x00000000

08003a70 <flowmodbus>:
            if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 1){
                TIM2->CNT = 17920 ;
            }
        }
}
void flowmodbus(){
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
switch (Mobus){
 8003a76:	4b98      	ldr	r3, [pc, #608]	; (8003cd8 <flowmodbus+0x268>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b05      	cmp	r3, #5
 8003a7c:	f200 8483 	bhi.w	8004386 <flowmodbus+0x916>
 8003a80:	a201      	add	r2, pc, #4	; (adr r2, 8003a88 <flowmodbus+0x18>)
 8003a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a86:	bf00      	nop
 8003a88:	08003aa1 	.word	0x08003aa1
 8003a8c:	08003bf7 	.word	0x08003bf7
 8003a90:	08003ebd 	.word	0x08003ebd
 8003a94:	0800416b 	.word	0x0800416b
 8003a98:	0800417b 	.word	0x0800417b
 8003a9c:	08004379 	.word	0x08004379
	case Initial:
		//choice = 1;
		if(registerFrame[1].U16 == 0b00010){ // Set Place
 8003aa0:	4b8e      	ldr	r3, [pc, #568]	; (8003cdc <flowmodbus+0x26c>)
 8003aa2:	885b      	ldrh	r3, [r3, #2]
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d110      	bne.n	8003aca <flowmodbus+0x5a>
			registerFrame[1].U16 = 0; // 0x01 base system reset place tray
 8003aa8:	4b8c      	ldr	r3, [pc, #560]	; (8003cdc <flowmodbus+0x26c>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 2; // 0x10 y-axis Set Place
 8003aae:	4b8b      	ldr	r3, [pc, #556]	; (8003cdc <flowmodbus+0x26c>)
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	841a      	strh	r2, [r3, #32]
			Joystick_Control = 1;
 8003ab4:	4b8a      	ldr	r3, [pc, #552]	; (8003ce0 <flowmodbus+0x270>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]
			choice = 1;
 8003aba:	4b8a      	ldr	r3, [pc, #552]	; (8003ce4 <flowmodbus+0x274>)
 8003abc:	2201      	movs	r2, #1
 8003abe:	601a      	str	r2, [r3, #0]
			//I2C_all();
			Mobus = Jogging_Place;
 8003ac0:	4b85      	ldr	r3, [pc, #532]	; (8003cd8 <flowmodbus+0x268>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	701a      	strb	r2, [r3, #0]
			    	point_x[b++] = transformedPoints2[j][0];
			    	point_x[b++] = transformedPoints[j][0];
			     }
			Mobus = Run_TrayMode;
		}
		break;
 8003ac6:	f000 bc5d 	b.w	8004384 <flowmodbus+0x914>
		else if(registerFrame[1].U16 == 0b00001){ //Set Pick
 8003aca:	4b84      	ldr	r3, [pc, #528]	; (8003cdc <flowmodbus+0x26c>)
 8003acc:	885b      	ldrh	r3, [r3, #2]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d110      	bne.n	8003af4 <flowmodbus+0x84>
			registerFrame[1].U16 = 0; // 0x01 base system reset place tray
 8003ad2:	4b82      	ldr	r3, [pc, #520]	; (8003cdc <flowmodbus+0x26c>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 1; // 0x10 y-axis Set Pick
 8003ad8:	4b80      	ldr	r3, [pc, #512]	; (8003cdc <flowmodbus+0x26c>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	841a      	strh	r2, [r3, #32]
			Joystick_Control = 1;
 8003ade:	4b80      	ldr	r3, [pc, #512]	; (8003ce0 <flowmodbus+0x270>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]
			choice = 1;
 8003ae4:	4b7f      	ldr	r3, [pc, #508]	; (8003ce4 <flowmodbus+0x274>)
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
			Mobus = Jogging_Pick;
 8003aea:	4b7b      	ldr	r3, [pc, #492]	; (8003cd8 <flowmodbus+0x268>)
 8003aec:	2202      	movs	r2, #2
 8003aee:	701a      	strb	r2, [r3, #0]
		break;
 8003af0:	f000 bc48 	b.w	8004384 <flowmodbus+0x914>
		else if(registerFrame[1].U16 == 0b10000){ // Run point Mode
 8003af4:	4b79      	ldr	r3, [pc, #484]	; (8003cdc <flowmodbus+0x26c>)
 8003af6:	885b      	ldrh	r3, [r3, #2]
 8003af8:	2b10      	cmp	r3, #16
 8003afa:	d10d      	bne.n	8003b18 <flowmodbus+0xa8>
			registerFrame[1].U16 = 0; // base system run point mode reset
 8003afc:	4b77      	ldr	r3, [pc, #476]	; (8003cdc <flowmodbus+0x26c>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 16; // y-axis moving status go point x
 8003b02:	4b76      	ldr	r3, [pc, #472]	; (8003cdc <flowmodbus+0x26c>)
 8003b04:	2210      	movs	r2, #16
 8003b06:	841a      	strh	r2, [r3, #32]
			Joystick_Control = 0;
 8003b08:	4b75      	ldr	r3, [pc, #468]	; (8003ce0 <flowmodbus+0x270>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
			Mobus = Run_PointMode;
 8003b0e:	4b72      	ldr	r3, [pc, #456]	; (8003cd8 <flowmodbus+0x268>)
 8003b10:	2204      	movs	r2, #4
 8003b12:	701a      	strb	r2, [r3, #0]
		break;
 8003b14:	f000 bc36 	b.w	8004384 <flowmodbus+0x914>
		else if(registerFrame[1].U16 == 0b00100){ // Set Home
 8003b18:	4b70      	ldr	r3, [pc, #448]	; (8003cdc <flowmodbus+0x26c>)
 8003b1a:	885b      	ldrh	r3, [r3, #2]
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d107      	bne.n	8003b30 <flowmodbus+0xc0>
			registerFrame[1].U16 = 0;
 8003b20:	4b6e      	ldr	r3, [pc, #440]	; (8003cdc <flowmodbus+0x26c>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	805a      	strh	r2, [r3, #2]
			Mobus = Home;
 8003b26:	4b6c      	ldr	r3, [pc, #432]	; (8003cd8 <flowmodbus+0x268>)
 8003b28:	2203      	movs	r2, #3
 8003b2a:	701a      	strb	r2, [r3, #0]
		break;
 8003b2c:	f000 bc2a 	b.w	8004384 <flowmodbus+0x914>
		else if(registerFrame[1].U16 == 0b01000){
 8003b30:	4b6a      	ldr	r3, [pc, #424]	; (8003cdc <flowmodbus+0x26c>)
 8003b32:	885b      	ldrh	r3, [r3, #2]
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	f040 8425 	bne.w	8004384 <flowmodbus+0x914>
			registerFrame[1].U16 = 0;
 8003b3a:	4b68      	ldr	r3, [pc, #416]	; (8003cdc <flowmodbus+0x26c>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	805a      	strh	r2, [r3, #2]
			choice = 2;
 8003b40:	4b68      	ldr	r3, [pc, #416]	; (8003ce4 <flowmodbus+0x274>)
 8003b42:	2202      	movs	r2, #2
 8003b44:	601a      	str	r2, [r3, #0]
			    k = 0;
 8003b46:	2300      	movs	r3, #0
 8003b48:	607b      	str	r3, [r7, #4]
			    b = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	603b      	str	r3, [r7, #0]
			    for (i = 0; i < 9; i++) {
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	e022      	b.n	8003b9a <flowmodbus+0x12a>
			        point_y[k++] = transformedPoints2[i][1];
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	1c53      	adds	r3, r2, #1
 8003b58:	607b      	str	r3, [r7, #4]
 8003b5a:	4863      	ldr	r0, [pc, #396]	; (8003ce8 <flowmodbus+0x278>)
 8003b5c:	68f9      	ldr	r1, [r7, #12]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	440b      	add	r3, r1
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4403      	add	r3, r0
 8003b68:	3304      	adds	r3, #4
 8003b6a:	6819      	ldr	r1, [r3, #0]
 8003b6c:	485f      	ldr	r0, [pc, #380]	; (8003cec <flowmodbus+0x27c>)
 8003b6e:	0093      	lsls	r3, r2, #2
 8003b70:	4403      	add	r3, r0
 8003b72:	6019      	str	r1, [r3, #0]
			        point_y[k++] = transformedPoints[i][1];
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	1c53      	adds	r3, r2, #1
 8003b78:	607b      	str	r3, [r7, #4]
 8003b7a:	485d      	ldr	r0, [pc, #372]	; (8003cf0 <flowmodbus+0x280>)
 8003b7c:	68f9      	ldr	r1, [r7, #12]
 8003b7e:	460b      	mov	r3, r1
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	440b      	add	r3, r1
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4403      	add	r3, r0
 8003b88:	3304      	adds	r3, #4
 8003b8a:	6819      	ldr	r1, [r3, #0]
 8003b8c:	4857      	ldr	r0, [pc, #348]	; (8003cec <flowmodbus+0x27c>)
 8003b8e:	0093      	lsls	r3, r2, #2
 8003b90:	4403      	add	r3, r0
 8003b92:	6019      	str	r1, [r3, #0]
			    for (i = 0; i < 9; i++) {
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	3301      	adds	r3, #1
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	ddd9      	ble.n	8003b54 <flowmodbus+0xe4>
			    for (j = 0; j < 9; j++) {
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60bb      	str	r3, [r7, #8]
 8003ba4:	e020      	b.n	8003be8 <flowmodbus+0x178>
			    	point_x[b++] = transformedPoints2[j][0];
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	1c53      	adds	r3, r2, #1
 8003baa:	603b      	str	r3, [r7, #0]
 8003bac:	484e      	ldr	r0, [pc, #312]	; (8003ce8 <flowmodbus+0x278>)
 8003bae:	68b9      	ldr	r1, [r7, #8]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	440b      	add	r3, r1
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4403      	add	r3, r0
 8003bba:	6819      	ldr	r1, [r3, #0]
 8003bbc:	484d      	ldr	r0, [pc, #308]	; (8003cf4 <flowmodbus+0x284>)
 8003bbe:	0093      	lsls	r3, r2, #2
 8003bc0:	4403      	add	r3, r0
 8003bc2:	6019      	str	r1, [r3, #0]
			    	point_x[b++] = transformedPoints[j][0];
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	1c53      	adds	r3, r2, #1
 8003bc8:	603b      	str	r3, [r7, #0]
 8003bca:	4849      	ldr	r0, [pc, #292]	; (8003cf0 <flowmodbus+0x280>)
 8003bcc:	68b9      	ldr	r1, [r7, #8]
 8003bce:	460b      	mov	r3, r1
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	440b      	add	r3, r1
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4403      	add	r3, r0
 8003bd8:	6819      	ldr	r1, [r3, #0]
 8003bda:	4846      	ldr	r0, [pc, #280]	; (8003cf4 <flowmodbus+0x284>)
 8003bdc:	0093      	lsls	r3, r2, #2
 8003bde:	4403      	add	r3, r0
 8003be0:	6019      	str	r1, [r3, #0]
			    for (j = 0; j < 9; j++) {
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	3301      	adds	r3, #1
 8003be6:	60bb      	str	r3, [r7, #8]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	dddb      	ble.n	8003ba6 <flowmodbus+0x136>
			Mobus = Run_TrayMode;
 8003bee:	4b3a      	ldr	r3, [pc, #232]	; (8003cd8 <flowmodbus+0x268>)
 8003bf0:	2205      	movs	r2, #5
 8003bf2:	701a      	strb	r2, [r3, #0]
		break;
 8003bf4:	e3c6      	b.n	8004384 <flowmodbus+0x914>
	case Jogging_Place:
		//y-axis jogging
			if (Joystick_position[1] >= 3150) {
 8003bf6:	4b40      	ldr	r3, [pc, #256]	; (8003cf8 <flowmodbus+0x288>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f640 424d 	movw	r2, #3149	; 0xc4d
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d90a      	bls.n	8003c18 <flowmodbus+0x1a8>
				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, JoystickSpeed);
 8003c02:	4b3e      	ldr	r3, [pc, #248]	; (8003cfc <flowmodbus+0x28c>)
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	4b3e      	ldr	r3, [pc, #248]	; (8003d00 <flowmodbus+0x290>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	635a      	str	r2, [r3, #52]	; 0x34
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2180      	movs	r1, #128	; 0x80
 8003c10:	483c      	ldr	r0, [pc, #240]	; (8003d04 <flowmodbus+0x294>)
 8003c12:	f002 fceb 	bl	80065ec <HAL_GPIO_WritePin>
 8003c16:	e017      	b.n	8003c48 <flowmodbus+0x1d8>
			  }
			  else if (Joystick_position[1] <= 100) {
 8003c18:	4b37      	ldr	r3, [pc, #220]	; (8003cf8 <flowmodbus+0x288>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b64      	cmp	r3, #100	; 0x64
 8003c1e:	d80a      	bhi.n	8003c36 <flowmodbus+0x1c6>
				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, JoystickSpeed);
 8003c20:	4b36      	ldr	r3, [pc, #216]	; (8003cfc <flowmodbus+0x28c>)
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	4b36      	ldr	r3, [pc, #216]	; (8003d00 <flowmodbus+0x290>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	635a      	str	r2, [r3, #52]	; 0x34
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	2180      	movs	r1, #128	; 0x80
 8003c2e:	4835      	ldr	r0, [pc, #212]	; (8003d04 <flowmodbus+0x294>)
 8003c30:	f002 fcdc 	bl	80065ec <HAL_GPIO_WritePin>
 8003c34:	e008      	b.n	8003c48 <flowmodbus+0x1d8>
			  }
			  else{
				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8003c36:	4b32      	ldr	r3, [pc, #200]	; (8003d00 <flowmodbus+0x290>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	635a      	str	r2, [r3, #52]	; 0x34
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2180      	movs	r1, #128	; 0x80
 8003c42:	4830      	ldr	r0, [pc, #192]	; (8003d04 <flowmodbus+0x294>)
 8003c44:	f002 fcd2 	bl	80065ec <HAL_GPIO_WritePin>
			  }
				//x-axis jogging
			  if (Joystick_position[0] >= 3150)
 8003c48:	4b2b      	ldr	r3, [pc, #172]	; (8003cf8 <flowmodbus+0x288>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f640 424d 	movw	r2, #3149	; 0xc4d
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d904      	bls.n	8003c5e <flowmodbus+0x1ee>
			  {
				  registerFrame[64].U16 = 8;
 8003c54:	4b21      	ldr	r3, [pc, #132]	; (8003cdc <flowmodbus+0x26c>)
 8003c56:	2208      	movs	r2, #8
 8003c58:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8003c5c:	e00c      	b.n	8003c78 <flowmodbus+0x208>
			  }
			  else if (Joystick_position[0] <= 100){
 8003c5e:	4b26      	ldr	r3, [pc, #152]	; (8003cf8 <flowmodbus+0x288>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b64      	cmp	r3, #100	; 0x64
 8003c64:	d804      	bhi.n	8003c70 <flowmodbus+0x200>
				  registerFrame[64].U16 = 4;
 8003c66:	4b1d      	ldr	r3, [pc, #116]	; (8003cdc <flowmodbus+0x26c>)
 8003c68:	2204      	movs	r2, #4
 8003c6a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8003c6e:	e003      	b.n	8003c78 <flowmodbus+0x208>
			  }
			  else{
				  registerFrame[64].U16 = 0;
 8003c70:	4b1a      	ldr	r3, [pc, #104]	; (8003cdc <flowmodbus+0x26c>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			  }

			  // Set position
			  	  buttonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8003c78:	2120      	movs	r1, #32
 8003c7a:	4823      	ldr	r0, [pc, #140]	; (8003d08 <flowmodbus+0x298>)
 8003c7c:	f002 fc9e 	bl	80065bc <HAL_GPIO_ReadPin>
 8003c80:	4603      	mov	r3, r0
 8003c82:	461a      	mov	r2, r3
 8003c84:	4b21      	ldr	r3, [pc, #132]	; (8003d0c <flowmodbus+0x29c>)
 8003c86:	701a      	strb	r2, [r3, #0]
			        if (buttonState != lastButtonState) {
 8003c88:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <flowmodbus+0x29c>)
 8003c8a:	781a      	ldrb	r2, [r3, #0]
 8003c8c:	4b20      	ldr	r3, [pc, #128]	; (8003d10 <flowmodbus+0x2a0>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	f000 810e 	beq.w	8003eb2 <flowmodbus+0x442>
			            // Button press is valid, perform desired action
						  if(CheckTray == 0){
 8003c96:	4b1f      	ldr	r3, [pc, #124]	; (8003d14 <flowmodbus+0x2a4>)
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d17e      	bne.n	8003d9c <flowmodbus+0x32c>
							  if(registerFrame[68].U16 > 60000){
 8003c9e:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <flowmodbus+0x26c>)
 8003ca0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003ca4:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d939      	bls.n	8003d20 <flowmodbus+0x2b0>
								posx = registerFrame[68].U16 - UINT16_MAX-1;
 8003cac:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <flowmodbus+0x26c>)
 8003cae:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003cb2:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003cb6:	4a18      	ldr	r2, [pc, #96]	; (8003d18 <flowmodbus+0x2a8>)
 8003cb8:	6013      	str	r3, [r2, #0]
								bottom_left_jog2[0] = (float)(posx)/10;
 8003cba:	4b17      	ldr	r3, [pc, #92]	; (8003d18 <flowmodbus+0x2a8>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	ee07 3a90 	vmov	s15, r3
 8003cc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cc6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003cca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cce:	4b13      	ldr	r3, [pc, #76]	; (8003d1c <flowmodbus+0x2ac>)
 8003cd0:	edc3 7a00 	vstr	s15, [r3]
 8003cd4:	e037      	b.n	8003d46 <flowmodbus+0x2d6>
 8003cd6:	bf00      	nop
 8003cd8:	20000cfc 	.word	0x20000cfc
 8003cdc:	200011d8 	.word	0x200011d8
 8003ce0:	20000330 	.word	0x20000330
 8003ce4:	20000940 	.word	0x20000940
 8003ce8:	20000c74 	.word	0x20000c74
 8003cec:	20000200 	.word	0x20000200
 8003cf0:	20000acc 	.word	0x20000acc
 8003cf4:	20000964 	.word	0x20000964
 8003cf8:	20001280 	.word	0x20001280
 8003cfc:	20000334 	.word	0x20000334
 8003d00:	2000064c 	.word	0x2000064c
 8003d04:	40020000 	.word	0x40020000
 8003d08:	40020800 	.word	0x40020800
 8003d0c:	20000946 	.word	0x20000946
 8003d10:	20000945 	.word	0x20000945
 8003d14:	20001288 	.word	0x20001288
 8003d18:	2000095c 	.word	0x2000095c
 8003d1c:	20000cec 	.word	0x20000cec
							}
							else{
								posx = registerFrame[68].U16;
 8003d20:	4ba1      	ldr	r3, [pc, #644]	; (8003fa8 <flowmodbus+0x538>)
 8003d22:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003d26:	461a      	mov	r2, r3
 8003d28:	4ba0      	ldr	r3, [pc, #640]	; (8003fac <flowmodbus+0x53c>)
 8003d2a:	601a      	str	r2, [r3, #0]
								bottom_left_jog2[0] = (float)(posx)/10;
 8003d2c:	4b9f      	ldr	r3, [pc, #636]	; (8003fac <flowmodbus+0x53c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	ee07 3a90 	vmov	s15, r3
 8003d34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d38:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003d3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d40:	4b9b      	ldr	r3, [pc, #620]	; (8003fb0 <flowmodbus+0x540>)
 8003d42:	edc3 7a00 	vstr	s15, [r3]
							} // Calculate Point x-axis
							  bottom_left_jog2[1] = (float)(ReadDegree-350); // Calulate Point y-axis
 8003d46:	4b9b      	ldr	r3, [pc, #620]	; (8003fb4 <flowmodbus+0x544>)
 8003d48:	edd3 7a00 	vldr	s15, [r3]
 8003d4c:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8003fb8 <flowmodbus+0x548>
 8003d50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d54:	4b96      	ldr	r3, [pc, #600]	; (8003fb0 <flowmodbus+0x540>)
 8003d56:	edc3 7a01 	vstr	s15, [r3, #4]
							  registerFrame[35].U16 = (int)posx; // Place Tray Origin x
 8003d5a:	4b94      	ldr	r3, [pc, #592]	; (8003fac <flowmodbus+0x53c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	4b91      	ldr	r3, [pc, #580]	; (8003fa8 <flowmodbus+0x538>)
 8003d62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
							  registerFrame[36].U16 = (int)(ReadDegree-350)*10; // Place Tray Origin y
 8003d66:	4b93      	ldr	r3, [pc, #588]	; (8003fb4 <flowmodbus+0x544>)
 8003d68:	edd3 7a00 	vldr	s15, [r3]
 8003d6c:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8003fb8 <flowmodbus+0x548>
 8003d70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d78:	ee17 3a90 	vmov	r3, s15
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	461a      	mov	r2, r3
 8003d80:	0092      	lsls	r2, r2, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	4b87      	ldr	r3, [pc, #540]	; (8003fa8 <flowmodbus+0x538>)
 8003d8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
							  CheckTray++;
 8003d8e:	4b8b      	ldr	r3, [pc, #556]	; (8003fbc <flowmodbus+0x54c>)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	3301      	adds	r3, #1
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	4b89      	ldr	r3, [pc, #548]	; (8003fbc <flowmodbus+0x54c>)
 8003d98:	701a      	strb	r2, [r3, #0]
 8003d9a:	e08a      	b.n	8003eb2 <flowmodbus+0x442>
						  }
						  else if(CheckTray == 1){
 8003d9c:	4b87      	ldr	r3, [pc, #540]	; (8003fbc <flowmodbus+0x54c>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d152      	bne.n	8003e4a <flowmodbus+0x3da>
							  if(registerFrame[68].U16 > 60000){
 8003da4:	4b80      	ldr	r3, [pc, #512]	; (8003fa8 <flowmodbus+0x538>)
 8003da6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003daa:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d914      	bls.n	8003ddc <flowmodbus+0x36c>
									posx = registerFrame[68].U16 - UINT16_MAX-1;
 8003db2:	4b7d      	ldr	r3, [pc, #500]	; (8003fa8 <flowmodbus+0x538>)
 8003db4:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003db8:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003dbc:	4a7b      	ldr	r2, [pc, #492]	; (8003fac <flowmodbus+0x53c>)
 8003dbe:	6013      	str	r3, [r2, #0]
									bottom_right_jog2[0] = (float)(posx)/10;
 8003dc0:	4b7a      	ldr	r3, [pc, #488]	; (8003fac <flowmodbus+0x53c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	ee07 3a90 	vmov	s15, r3
 8003dc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dcc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003dd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003dd4:	4b7a      	ldr	r3, [pc, #488]	; (8003fc0 <flowmodbus+0x550>)
 8003dd6:	edc3 7a00 	vstr	s15, [r3]
 8003dda:	e012      	b.n	8003e02 <flowmodbus+0x392>
								}
								else{
									posx = registerFrame[68].U16;
 8003ddc:	4b72      	ldr	r3, [pc, #456]	; (8003fa8 <flowmodbus+0x538>)
 8003dde:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003de2:	461a      	mov	r2, r3
 8003de4:	4b71      	ldr	r3, [pc, #452]	; (8003fac <flowmodbus+0x53c>)
 8003de6:	601a      	str	r2, [r3, #0]
									bottom_right_jog2[0] = (float)(posx)/10;
 8003de8:	4b70      	ldr	r3, [pc, #448]	; (8003fac <flowmodbus+0x53c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	ee07 3a90 	vmov	s15, r3
 8003df0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003df4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003df8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003dfc:	4b70      	ldr	r3, [pc, #448]	; (8003fc0 <flowmodbus+0x550>)
 8003dfe:	edc3 7a00 	vstr	s15, [r3]
								}
							  posx = registerFrame[68].U16;
 8003e02:	4b69      	ldr	r3, [pc, #420]	; (8003fa8 <flowmodbus+0x538>)
 8003e04:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4b68      	ldr	r3, [pc, #416]	; (8003fac <flowmodbus+0x53c>)
 8003e0c:	601a      	str	r2, [r3, #0]
							  bottom_right_jog2[0] = (float)(posx)/10;
 8003e0e:	4b67      	ldr	r3, [pc, #412]	; (8003fac <flowmodbus+0x53c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e1a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003e1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e22:	4b67      	ldr	r3, [pc, #412]	; (8003fc0 <flowmodbus+0x550>)
 8003e24:	edc3 7a00 	vstr	s15, [r3]
							  bottom_right_jog2[1] = (float)(ReadDegree-350); // Calculate Point y-axis
 8003e28:	4b62      	ldr	r3, [pc, #392]	; (8003fb4 <flowmodbus+0x544>)
 8003e2a:	edd3 7a00 	vldr	s15, [r3]
 8003e2e:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8003fb8 <flowmodbus+0x548>
 8003e32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e36:	4b62      	ldr	r3, [pc, #392]	; (8003fc0 <flowmodbus+0x550>)
 8003e38:	edc3 7a01 	vstr	s15, [r3, #4]
							  CheckTray++;
 8003e3c:	4b5f      	ldr	r3, [pc, #380]	; (8003fbc <flowmodbus+0x54c>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	3301      	adds	r3, #1
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	4b5d      	ldr	r3, [pc, #372]	; (8003fbc <flowmodbus+0x54c>)
 8003e46:	701a      	strb	r2, [r3, #0]
 8003e48:	e033      	b.n	8003eb2 <flowmodbus+0x442>
						  }
						  else if(CheckTray == 2){
 8003e4a:	4b5c      	ldr	r3, [pc, #368]	; (8003fbc <flowmodbus+0x54c>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d12f      	bne.n	8003eb2 <flowmodbus+0x442>
							  transformRectangleAndPointsPlace();
 8003e52:	f7ff fb8b 	bl	800356c <transformRectangleAndPointsPlace>
							  orenationtray = abs((theta2)*57.2958*100);
 8003e56:	4b5b      	ldr	r3, [pc, #364]	; (8003fc4 <flowmodbus+0x554>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fc fb20 	bl	80004a0 <__aeabi_f2d>
 8003e60:	a34f      	add	r3, pc, #316	; (adr r3, 8003fa0 <flowmodbus+0x530>)
 8003e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e66:	f7fc fb73 	bl	8000550 <__aeabi_dmul>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4610      	mov	r0, r2
 8003e70:	4619      	mov	r1, r3
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	4b54      	ldr	r3, [pc, #336]	; (8003fc8 <flowmodbus+0x558>)
 8003e78:	f7fc fb6a 	bl	8000550 <__aeabi_dmul>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4610      	mov	r0, r2
 8003e82:	4619      	mov	r1, r3
 8003e84:	f7fc fe14 	bl	8000ab0 <__aeabi_d2iz>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	bfb8      	it	lt
 8003e8e:	425b      	neglt	r3, r3
 8003e90:	4a4e      	ldr	r2, [pc, #312]	; (8003fcc <flowmodbus+0x55c>)
 8003e92:	6013      	str	r3, [r2, #0]
							  registerFrame[37].U16 = orenationtray;
 8003e94:	4b4d      	ldr	r3, [pc, #308]	; (8003fcc <flowmodbus+0x55c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	4b43      	ldr	r3, [pc, #268]	; (8003fa8 <flowmodbus+0x538>)
 8003e9c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
							  registerFrame[16].U16 = 0; //0x10 y-status jogging fisnish reset to 0
 8003ea0:	4b41      	ldr	r3, [pc, #260]	; (8003fa8 <flowmodbus+0x538>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	841a      	strh	r2, [r3, #32]
							  CheckTray = 0;
 8003ea6:	4b45      	ldr	r3, [pc, #276]	; (8003fbc <flowmodbus+0x54c>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	701a      	strb	r2, [r3, #0]
							  Mobus = Initial;
 8003eac:	4b48      	ldr	r3, [pc, #288]	; (8003fd0 <flowmodbus+0x560>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	701a      	strb	r2, [r3, #0]
						  }
			        }

			    // Update the previous state
			    lastButtonState = buttonState;
 8003eb2:	4b48      	ldr	r3, [pc, #288]	; (8003fd4 <flowmodbus+0x564>)
 8003eb4:	781a      	ldrb	r2, [r3, #0]
 8003eb6:	4b48      	ldr	r3, [pc, #288]	; (8003fd8 <flowmodbus+0x568>)
 8003eb8:	701a      	strb	r2, [r3, #0]
		break;
 8003eba:	e264      	b.n	8004386 <flowmodbus+0x916>
	case Jogging_Pick:
		//y-axis jogging
					if (Joystick_position[1] >= 3150) {
 8003ebc:	4b47      	ldr	r3, [pc, #284]	; (8003fdc <flowmodbus+0x56c>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f640 424d 	movw	r2, #3149	; 0xc4d
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d90a      	bls.n	8003ede <flowmodbus+0x46e>
						  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, JoystickSpeed);
 8003ec8:	4b45      	ldr	r3, [pc, #276]	; (8003fe0 <flowmodbus+0x570>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	4b45      	ldr	r3, [pc, #276]	; (8003fe4 <flowmodbus+0x574>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	635a      	str	r2, [r3, #52]	; 0x34
						  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	2180      	movs	r1, #128	; 0x80
 8003ed6:	4844      	ldr	r0, [pc, #272]	; (8003fe8 <flowmodbus+0x578>)
 8003ed8:	f002 fb88 	bl	80065ec <HAL_GPIO_WritePin>
 8003edc:	e017      	b.n	8003f0e <flowmodbus+0x49e>
					  }
					  else if (Joystick_position[1] <= 100) {
 8003ede:	4b3f      	ldr	r3, [pc, #252]	; (8003fdc <flowmodbus+0x56c>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b64      	cmp	r3, #100	; 0x64
 8003ee4:	d80a      	bhi.n	8003efc <flowmodbus+0x48c>
						  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, JoystickSpeed);
 8003ee6:	4b3e      	ldr	r3, [pc, #248]	; (8003fe0 <flowmodbus+0x570>)
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	4b3e      	ldr	r3, [pc, #248]	; (8003fe4 <flowmodbus+0x574>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	635a      	str	r2, [r3, #52]	; 0x34
						  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	2180      	movs	r1, #128	; 0x80
 8003ef4:	483c      	ldr	r0, [pc, #240]	; (8003fe8 <flowmodbus+0x578>)
 8003ef6:	f002 fb79 	bl	80065ec <HAL_GPIO_WritePin>
 8003efa:	e008      	b.n	8003f0e <flowmodbus+0x49e>
					  }
					  else{
						  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8003efc:	4b39      	ldr	r3, [pc, #228]	; (8003fe4 <flowmodbus+0x574>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2200      	movs	r2, #0
 8003f02:	635a      	str	r2, [r3, #52]	; 0x34
						  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003f04:	2200      	movs	r2, #0
 8003f06:	2180      	movs	r1, #128	; 0x80
 8003f08:	4837      	ldr	r0, [pc, #220]	; (8003fe8 <flowmodbus+0x578>)
 8003f0a:	f002 fb6f 	bl	80065ec <HAL_GPIO_WritePin>
					  }
						//x-axis jogging
					  if (Joystick_position[0] >= 3150)
 8003f0e:	4b33      	ldr	r3, [pc, #204]	; (8003fdc <flowmodbus+0x56c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f640 424d 	movw	r2, #3149	; 0xc4d
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d904      	bls.n	8003f24 <flowmodbus+0x4b4>
					  {
						  registerFrame[64].U16 = 8;
 8003f1a:	4b23      	ldr	r3, [pc, #140]	; (8003fa8 <flowmodbus+0x538>)
 8003f1c:	2208      	movs	r2, #8
 8003f1e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8003f22:	e00c      	b.n	8003f3e <flowmodbus+0x4ce>
					  }
					  else if (Joystick_position[0] <= 100){
 8003f24:	4b2d      	ldr	r3, [pc, #180]	; (8003fdc <flowmodbus+0x56c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b64      	cmp	r3, #100	; 0x64
 8003f2a:	d804      	bhi.n	8003f36 <flowmodbus+0x4c6>
						  registerFrame[64].U16 = 4;
 8003f2c:	4b1e      	ldr	r3, [pc, #120]	; (8003fa8 <flowmodbus+0x538>)
 8003f2e:	2204      	movs	r2, #4
 8003f30:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8003f34:	e003      	b.n	8003f3e <flowmodbus+0x4ce>
					  }
					  else{
						  registerFrame[64].U16 = 0;
 8003f36:	4b1c      	ldr	r3, [pc, #112]	; (8003fa8 <flowmodbus+0x538>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
					  }

			  // Set position
						buttonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8003f3e:	2120      	movs	r1, #32
 8003f40:	482a      	ldr	r0, [pc, #168]	; (8003fec <flowmodbus+0x57c>)
 8003f42:	f002 fb3b 	bl	80065bc <HAL_GPIO_ReadPin>
 8003f46:	4603      	mov	r3, r0
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4b22      	ldr	r3, [pc, #136]	; (8003fd4 <flowmodbus+0x564>)
 8003f4c:	701a      	strb	r2, [r3, #0]
						if (buttonState != lastButtonState) {
 8003f4e:	4b21      	ldr	r3, [pc, #132]	; (8003fd4 <flowmodbus+0x564>)
 8003f50:	781a      	ldrb	r2, [r3, #0]
 8003f52:	4b21      	ldr	r3, [pc, #132]	; (8003fd8 <flowmodbus+0x568>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	f000 8102 	beq.w	8004160 <flowmodbus+0x6f0>
							// Button press is valid, perform desired action
							if (CheckTray == 0) {
 8003f5c:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <flowmodbus+0x54c>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f040 8085 	bne.w	8004070 <flowmodbus+0x600>
								if(registerFrame[68].U16 > 60000){
 8003f66:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <flowmodbus+0x538>)
 8003f68:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003f6c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d93f      	bls.n	8003ff4 <flowmodbus+0x584>
									posx = registerFrame[68].U16 - UINT16_MAX-1;
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <flowmodbus+0x538>)
 8003f76:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003f7a:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003f7e:	4a0b      	ldr	r2, [pc, #44]	; (8003fac <flowmodbus+0x53c>)
 8003f80:	6013      	str	r3, [r2, #0]
									bottom_left_jog[0] = (float)(posx)/10;
 8003f82:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <flowmodbus+0x53c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	ee07 3a90 	vmov	s15, r3
 8003f8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f8e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003f92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f96:	4b16      	ldr	r3, [pc, #88]	; (8003ff0 <flowmodbus+0x580>)
 8003f98:	edc3 7a00 	vstr	s15, [r3]
 8003f9c:	e03d      	b.n	800401a <flowmodbus+0x5aa>
 8003f9e:	bf00      	nop
 8003fa0:	c63f1412 	.word	0xc63f1412
 8003fa4:	404ca5dc 	.word	0x404ca5dc
 8003fa8:	200011d8 	.word	0x200011d8
 8003fac:	2000095c 	.word	0x2000095c
 8003fb0:	20000cec 	.word	0x20000cec
 8003fb4:	20001300 	.word	0x20001300
 8003fb8:	43af0000 	.word	0x43af0000
 8003fbc:	20001288 	.word	0x20001288
 8003fc0:	20000cf4 	.word	0x20000cf4
 8003fc4:	20000ce4 	.word	0x20000ce4
 8003fc8:	40590000 	.word	0x40590000
 8003fcc:	20000960 	.word	0x20000960
 8003fd0:	20000cfc 	.word	0x20000cfc
 8003fd4:	20000946 	.word	0x20000946
 8003fd8:	20000945 	.word	0x20000945
 8003fdc:	20001280 	.word	0x20001280
 8003fe0:	20000334 	.word	0x20000334
 8003fe4:	2000064c 	.word	0x2000064c
 8003fe8:	40020000 	.word	0x40020000
 8003fec:	40020800 	.word	0x40020800
 8003ff0:	20000b44 	.word	0x20000b44
								}
								else{
									posx = registerFrame[68].U16;
 8003ff4:	4b7c      	ldr	r3, [pc, #496]	; (80041e8 <flowmodbus+0x778>)
 8003ff6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	4b7b      	ldr	r3, [pc, #492]	; (80041ec <flowmodbus+0x77c>)
 8003ffe:	601a      	str	r2, [r3, #0]
									bottom_left_jog[0] = (float)(posx)/10;
 8004000:	4b7a      	ldr	r3, [pc, #488]	; (80041ec <flowmodbus+0x77c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	ee07 3a90 	vmov	s15, r3
 8004008:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800400c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004010:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004014:	4b76      	ldr	r3, [pc, #472]	; (80041f0 <flowmodbus+0x780>)
 8004016:	edc3 7a00 	vstr	s15, [r3]
								}
								bottom_left_jog[1] = ((float)ReadDegree-350); // Calulate Point y-axis
 800401a:	4b76      	ldr	r3, [pc, #472]	; (80041f4 <flowmodbus+0x784>)
 800401c:	edd3 7a00 	vldr	s15, [r3]
 8004020:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80041f8 <flowmodbus+0x788>
 8004024:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004028:	4b71      	ldr	r3, [pc, #452]	; (80041f0 <flowmodbus+0x780>)
 800402a:	edc3 7a01 	vstr	s15, [r3, #4]
								registerFrame[32].U16 = (int)posx; // Place Tray Origin x
 800402e:	4b6f      	ldr	r3, [pc, #444]	; (80041ec <flowmodbus+0x77c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	b29a      	uxth	r2, r3
 8004034:	4b6c      	ldr	r3, [pc, #432]	; (80041e8 <flowmodbus+0x778>)
 8004036:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
								registerFrame[33].U16 = (int)(ReadDegree-350)*10; // Place Tray Origin y
 800403a:	4b6e      	ldr	r3, [pc, #440]	; (80041f4 <flowmodbus+0x784>)
 800403c:	edd3 7a00 	vldr	s15, [r3]
 8004040:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80041f8 <flowmodbus+0x788>
 8004044:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800404c:	ee17 3a90 	vmov	r3, s15
 8004050:	b29b      	uxth	r3, r3
 8004052:	461a      	mov	r2, r3
 8004054:	0092      	lsls	r2, r2, #2
 8004056:	4413      	add	r3, r2
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	4b62      	ldr	r3, [pc, #392]	; (80041e8 <flowmodbus+0x778>)
 800405e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
								CheckTray++;
 8004062:	4b66      	ldr	r3, [pc, #408]	; (80041fc <flowmodbus+0x78c>)
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	3301      	adds	r3, #1
 8004068:	b2da      	uxtb	r2, r3
 800406a:	4b64      	ldr	r3, [pc, #400]	; (80041fc <flowmodbus+0x78c>)
 800406c:	701a      	strb	r2, [r3, #0]
 800406e:	e077      	b.n	8004160 <flowmodbus+0x6f0>
							}
							else if (CheckTray == 1) {
 8004070:	4b62      	ldr	r3, [pc, #392]	; (80041fc <flowmodbus+0x78c>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d13f      	bne.n	80040f8 <flowmodbus+0x688>
								if(registerFrame[68].U16 > 60000){
 8004078:	4b5b      	ldr	r3, [pc, #364]	; (80041e8 <flowmodbus+0x778>)
 800407a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800407e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004082:	4293      	cmp	r3, r2
 8004084:	d914      	bls.n	80040b0 <flowmodbus+0x640>
									posx = registerFrame[68].U16 - UINT16_MAX-1;
 8004086:	4b58      	ldr	r3, [pc, #352]	; (80041e8 <flowmodbus+0x778>)
 8004088:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800408c:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8004090:	4a56      	ldr	r2, [pc, #344]	; (80041ec <flowmodbus+0x77c>)
 8004092:	6013      	str	r3, [r2, #0]
									bottom_right_jog[0] = (float)(posx)/10;
 8004094:	4b55      	ldr	r3, [pc, #340]	; (80041ec <flowmodbus+0x77c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	ee07 3a90 	vmov	s15, r3
 800409c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040a0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80040a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040a8:	4b55      	ldr	r3, [pc, #340]	; (8004200 <flowmodbus+0x790>)
 80040aa:	edc3 7a00 	vstr	s15, [r3]
 80040ae:	e012      	b.n	80040d6 <flowmodbus+0x666>
								}
								else{
									posx = registerFrame[68].U16;
 80040b0:	4b4d      	ldr	r3, [pc, #308]	; (80041e8 <flowmodbus+0x778>)
 80040b2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80040b6:	461a      	mov	r2, r3
 80040b8:	4b4c      	ldr	r3, [pc, #304]	; (80041ec <flowmodbus+0x77c>)
 80040ba:	601a      	str	r2, [r3, #0]
									bottom_right_jog[0] = (float)(posx)/10;
 80040bc:	4b4b      	ldr	r3, [pc, #300]	; (80041ec <flowmodbus+0x77c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	ee07 3a90 	vmov	s15, r3
 80040c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040c8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80040cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040d0:	4b4b      	ldr	r3, [pc, #300]	; (8004200 <flowmodbus+0x790>)
 80040d2:	edc3 7a00 	vstr	s15, [r3]
								}
								bottom_right_jog[1] = (float)(ReadDegree-(float)350); // Calculate Point y-axis
 80040d6:	4b47      	ldr	r3, [pc, #284]	; (80041f4 <flowmodbus+0x784>)
 80040d8:	edd3 7a00 	vldr	s15, [r3]
 80040dc:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80041f8 <flowmodbus+0x788>
 80040e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80040e4:	4b46      	ldr	r3, [pc, #280]	; (8004200 <flowmodbus+0x790>)
 80040e6:	edc3 7a01 	vstr	s15, [r3, #4]
								CheckTray++;
 80040ea:	4b44      	ldr	r3, [pc, #272]	; (80041fc <flowmodbus+0x78c>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	3301      	adds	r3, #1
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	4b42      	ldr	r3, [pc, #264]	; (80041fc <flowmodbus+0x78c>)
 80040f4:	701a      	strb	r2, [r3, #0]
 80040f6:	e033      	b.n	8004160 <flowmodbus+0x6f0>
							}
							else if (CheckTray == 2) {
 80040f8:	4b40      	ldr	r3, [pc, #256]	; (80041fc <flowmodbus+0x78c>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d12f      	bne.n	8004160 <flowmodbus+0x6f0>
								transformRectangleAndPointsPick();
 8004100:	f7fe ffb4 	bl	800306c <transformRectangleAndPointsPick>
								orenationtray = abs((theta)*57.2958*100);
 8004104:	4b3f      	ldr	r3, [pc, #252]	; (8004204 <flowmodbus+0x794>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4618      	mov	r0, r3
 800410a:	f7fc f9c9 	bl	80004a0 <__aeabi_f2d>
 800410e:	a334      	add	r3, pc, #208	; (adr r3, 80041e0 <flowmodbus+0x770>)
 8004110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004114:	f7fc fa1c 	bl	8000550 <__aeabi_dmul>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4610      	mov	r0, r2
 800411e:	4619      	mov	r1, r3
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	4b38      	ldr	r3, [pc, #224]	; (8004208 <flowmodbus+0x798>)
 8004126:	f7fc fa13 	bl	8000550 <__aeabi_dmul>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	4610      	mov	r0, r2
 8004130:	4619      	mov	r1, r3
 8004132:	f7fc fcbd 	bl	8000ab0 <__aeabi_d2iz>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	bfb8      	it	lt
 800413c:	425b      	neglt	r3, r3
 800413e:	4a33      	ldr	r2, [pc, #204]	; (800420c <flowmodbus+0x79c>)
 8004140:	6013      	str	r3, [r2, #0]
								registerFrame[34].U16 = orenationtray;
 8004142:	4b32      	ldr	r3, [pc, #200]	; (800420c <flowmodbus+0x79c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	b29a      	uxth	r2, r3
 8004148:	4b27      	ldr	r3, [pc, #156]	; (80041e8 <flowmodbus+0x778>)
 800414a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
								registerFrame[16].U16 = 0; // 0x10 y-status jogging finish reset to 0
 800414e:	4b26      	ldr	r3, [pc, #152]	; (80041e8 <flowmodbus+0x778>)
 8004150:	2200      	movs	r2, #0
 8004152:	841a      	strh	r2, [r3, #32]
								CheckTray = 0;
 8004154:	4b29      	ldr	r3, [pc, #164]	; (80041fc <flowmodbus+0x78c>)
 8004156:	2200      	movs	r2, #0
 8004158:	701a      	strb	r2, [r3, #0]
								Mobus = Initial;
 800415a:	4b2d      	ldr	r3, [pc, #180]	; (8004210 <flowmodbus+0x7a0>)
 800415c:	2200      	movs	r2, #0
 800415e:	701a      	strb	r2, [r3, #0]
							}
						}
				// Update the previous state
				lastButtonState = buttonState;
 8004160:	4b2c      	ldr	r3, [pc, #176]	; (8004214 <flowmodbus+0x7a4>)
 8004162:	781a      	ldrb	r2, [r3, #0]
 8004164:	4b2c      	ldr	r3, [pc, #176]	; (8004218 <flowmodbus+0x7a8>)
 8004166:	701a      	strb	r2, [r3, #0]
		break;
 8004168:	e10d      	b.n	8004386 <flowmodbus+0x916>
	case Home:
		// x axis
			registerFrame[64].U16 = 1; // 0x40 Moving Status x-axis - Home
 800416a:	4b1f      	ldr	r3, [pc, #124]	; (80041e8 <flowmodbus+0x778>)
 800416c:	2201      	movs	r2, #1
 800416e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			Mobus = Initial;
 8004172:	4b27      	ldr	r3, [pc, #156]	; (8004210 <flowmodbus+0x7a0>)
 8004174:	2200      	movs	r2, #0
 8004176:	701a      	strb	r2, [r3, #0]
		// y axis
		break;
 8004178:	e105      	b.n	8004386 <flowmodbus+0x916>
	case Run_PointMode:
		// x axis
			registerFrame[65].U16 = registerFrame[48].U16; // position Tray pick/place
 800417a:	4b1b      	ldr	r3, [pc, #108]	; (80041e8 <flowmodbus+0x778>)
 800417c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8004180:	4b19      	ldr	r3, [pc, #100]	; (80041e8 <flowmodbus+0x778>)
 8004182:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
			registerFrame[66].U16 = 3000; // speed x-axis 300mm
 8004186:	4b18      	ldr	r3, [pc, #96]	; (80041e8 <flowmodbus+0x778>)
 8004188:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800418c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
			registerFrame[67].U16 = 1; // Acc time 1mms
 8004190:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <flowmodbus+0x778>)
 8004192:	2201      	movs	r2, #1
 8004194:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
			registerFrame[64].U16 = 2; //0x40 Moving Status x-axis - run mode
 8004198:	4b13      	ldr	r3, [pc, #76]	; (80041e8 <flowmodbus+0x778>)
 800419a:	2202      	movs	r2, #2
 800419c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		// y axis
			if(registerFrame[49].U16 > 60000)SetDegree = ((350-(UINT16_MAX - registerFrame[49].U16)/10));
 80041a0:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <flowmodbus+0x778>)
 80041a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80041a6:	f64e 2260 	movw	r2, #60000	; 0xea60
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d93a      	bls.n	8004224 <flowmodbus+0x7b4>
 80041ae:	4b0e      	ldr	r3, [pc, #56]	; (80041e8 <flowmodbus+0x778>)
 80041b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80041b4:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80041b8:	33ff      	adds	r3, #255	; 0xff
 80041ba:	4a18      	ldr	r2, [pc, #96]	; (800421c <flowmodbus+0x7ac>)
 80041bc:	fb82 1203 	smull	r1, r2, r2, r3
 80041c0:	1092      	asrs	r2, r2, #2
 80041c2:	17db      	asrs	r3, r3, #31
 80041c4:	1a9b      	subs	r3, r3, r2
 80041c6:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 80041ca:	ee07 3a90 	vmov	s15, r3
 80041ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041d2:	4b13      	ldr	r3, [pc, #76]	; (8004220 <flowmodbus+0x7b0>)
 80041d4:	edc3 7a00 	vstr	s15, [r3]
 80041d8:	e03c      	b.n	8004254 <flowmodbus+0x7e4>
 80041da:	bf00      	nop
 80041dc:	f3af 8000 	nop.w
 80041e0:	c63f1412 	.word	0xc63f1412
 80041e4:	404ca5dc 	.word	0x404ca5dc
 80041e8:	200011d8 	.word	0x200011d8
 80041ec:	2000095c 	.word	0x2000095c
 80041f0:	20000b44 	.word	0x20000b44
 80041f4:	20001300 	.word	0x20001300
 80041f8:	43af0000 	.word	0x43af0000
 80041fc:	20001288 	.word	0x20001288
 8004200:	20000b4c 	.word	0x20000b4c
 8004204:	20000b3c 	.word	0x20000b3c
 8004208:	40590000 	.word	0x40590000
 800420c:	20000960 	.word	0x20000960
 8004210:	20000cfc 	.word	0x20000cfc
 8004214:	20000946 	.word	0x20000946
 8004218:	20000945 	.word	0x20000945
 800421c:	66666667 	.word	0x66666667
 8004220:	20001304 	.word	0x20001304
			else if (registerFrame[49].U16 <= 3500){
 8004224:	4b5c      	ldr	r3, [pc, #368]	; (8004398 <flowmodbus+0x928>)
 8004226:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800422a:	f640 52ac 	movw	r2, #3500	; 0xdac
 800422e:	4293      	cmp	r3, r2
 8004230:	d810      	bhi.n	8004254 <flowmodbus+0x7e4>
			SetDegree = (registerFrame[49].U16 / 10)+350;
 8004232:	4b59      	ldr	r3, [pc, #356]	; (8004398 <flowmodbus+0x928>)
 8004234:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004238:	4a58      	ldr	r2, [pc, #352]	; (800439c <flowmodbus+0x92c>)
 800423a:	fba2 2303 	umull	r2, r3, r2, r3
 800423e:	08db      	lsrs	r3, r3, #3
 8004240:	b29b      	uxth	r3, r3
 8004242:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 8004246:	ee07 3a90 	vmov	s15, r3
 800424a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800424e:	4b54      	ldr	r3, [pc, #336]	; (80043a0 <flowmodbus+0x930>)
 8004250:	edc3 7a00 	vstr	s15, [r3]
			}
			SetVelocity = 400;
 8004254:	4b53      	ldr	r3, [pc, #332]	; (80043a4 <flowmodbus+0x934>)
 8004256:	4a54      	ldr	r2, [pc, #336]	; (80043a8 <flowmodbus+0x938>)
 8004258:	601a      	str	r2, [r3, #0]
			if (error > 0) { // setpoint > read_encoder
 800425a:	4b54      	ldr	r3, [pc, #336]	; (80043ac <flowmodbus+0x93c>)
 800425c:	edd3 7a00 	vldr	s15, [r3]
 8004260:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004268:	dd38      	ble.n	80042dc <flowmodbus+0x86c>
			  SetVelocity = abs(SetVelocity);
 800426a:	4b4e      	ldr	r3, [pc, #312]	; (80043a4 <flowmodbus+0x934>)
 800426c:	edd3 7a00 	vldr	s15, [r3]
 8004270:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004274:	ee17 3a90 	vmov	r3, s15
 8004278:	2b00      	cmp	r3, #0
 800427a:	bfb8      	it	lt
 800427c:	425b      	neglt	r3, r3
 800427e:	ee07 3a90 	vmov	s15, r3
 8004282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004286:	4b47      	ldr	r3, [pc, #284]	; (80043a4 <flowmodbus+0x934>)
 8004288:	edc3 7a00 	vstr	s15, [r3]
			 if (error < 0.2) {
 800428c:	4b47      	ldr	r3, [pc, #284]	; (80043ac <flowmodbus+0x93c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4618      	mov	r0, r3
 8004292:	f7fc f905 	bl	80004a0 <__aeabi_f2d>
 8004296:	a33e      	add	r3, pc, #248	; (adr r3, 8004390 <flowmodbus+0x920>)
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	f7fc fbca 	bl	8000a34 <__aeabi_dcmplt>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <flowmodbus+0x84e>
				  DegreeFeedback = 0; // Limit Position
 80042a6:	4b42      	ldr	r3, [pc, #264]	; (80043b0 <flowmodbus+0x940>)
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
				  s = 0;
 80042ae:	4b41      	ldr	r3, [pc, #260]	; (80043b4 <flowmodbus+0x944>)
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
				  s2 = 0;
 80042b6:	4b40      	ldr	r3, [pc, #256]	; (80043b8 <flowmodbus+0x948>)
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
			  }
			  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, DegreeFeedback);
 80042be:	4b3c      	ldr	r3, [pc, #240]	; (80043b0 <flowmodbus+0x940>)
 80042c0:	edd3 7a00 	vldr	s15, [r3]
 80042c4:	4b3d      	ldr	r3, [pc, #244]	; (80043bc <flowmodbus+0x94c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042cc:	ee17 2a90 	vmov	r2, s15
 80042d0:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80042d2:	2200      	movs	r2, #0
 80042d4:	2180      	movs	r1, #128	; 0x80
 80042d6:	483a      	ldr	r0, [pc, #232]	; (80043c0 <flowmodbus+0x950>)
 80042d8:	f002 f988 	bl	80065ec <HAL_GPIO_WritePin>
		  }
			if (error < 0 ) { // setpoint < read_encoder
 80042dc:	4b33      	ldr	r3, [pc, #204]	; (80043ac <flowmodbus+0x93c>)
 80042de:	edd3 7a00 	vldr	s15, [r3]
 80042e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ea:	d53e      	bpl.n	800436a <flowmodbus+0x8fa>
			  if(SetVelocity > 0)SetVelocity = -SetVelocity;
 80042ec:	4b2d      	ldr	r3, [pc, #180]	; (80043a4 <flowmodbus+0x934>)
 80042ee:	edd3 7a00 	vldr	s15, [r3]
 80042f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042fa:	dd07      	ble.n	800430c <flowmodbus+0x89c>
 80042fc:	4b29      	ldr	r3, [pc, #164]	; (80043a4 <flowmodbus+0x934>)
 80042fe:	edd3 7a00 	vldr	s15, [r3]
 8004302:	eef1 7a67 	vneg.f32	s15, s15
 8004306:	4b27      	ldr	r3, [pc, #156]	; (80043a4 <flowmodbus+0x934>)
 8004308:	edc3 7a00 	vstr	s15, [r3]
			  if (error * -1 < 0.2) {
 800430c:	4b27      	ldr	r3, [pc, #156]	; (80043ac <flowmodbus+0x93c>)
 800430e:	edd3 7a00 	vldr	s15, [r3]
 8004312:	eef1 7a67 	vneg.f32	s15, s15
 8004316:	ee17 3a90 	vmov	r3, s15
 800431a:	4618      	mov	r0, r3
 800431c:	f7fc f8c0 	bl	80004a0 <__aeabi_f2d>
 8004320:	a31b      	add	r3, pc, #108	; (adr r3, 8004390 <flowmodbus+0x920>)
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	f7fc fb85 	bl	8000a34 <__aeabi_dcmplt>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00b      	beq.n	8004348 <flowmodbus+0x8d8>
				  DegreeFeedback = 0; // Limit Position
 8004330:	4b1f      	ldr	r3, [pc, #124]	; (80043b0 <flowmodbus+0x940>)
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
				  s = 0;
 8004338:	4b1e      	ldr	r3, [pc, #120]	; (80043b4 <flowmodbus+0x944>)
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	601a      	str	r2, [r3, #0]
				  s2 = 0;
 8004340:	4b1d      	ldr	r3, [pc, #116]	; (80043b8 <flowmodbus+0x948>)
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	601a      	str	r2, [r3, #0]
			  }
			  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, DegreeFeedback * -1);
 8004348:	4b19      	ldr	r3, [pc, #100]	; (80043b0 <flowmodbus+0x940>)
 800434a:	edd3 7a00 	vldr	s15, [r3]
 800434e:	eef1 7a67 	vneg.f32	s15, s15
 8004352:	4b1a      	ldr	r3, [pc, #104]	; (80043bc <flowmodbus+0x94c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800435a:	ee17 2a90 	vmov	r2, s15
 800435e:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8004360:	2201      	movs	r2, #1
 8004362:	2180      	movs	r1, #128	; 0x80
 8004364:	4816      	ldr	r0, [pc, #88]	; (80043c0 <flowmodbus+0x950>)
 8004366:	f002 f941 	bl	80065ec <HAL_GPIO_WritePin>
		  }
			registerFrame[16].U16 = 0;
 800436a:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <flowmodbus+0x928>)
 800436c:	2200      	movs	r2, #0
 800436e:	841a      	strh	r2, [r3, #32]
			Mobus = Initial;
 8004370:	4b14      	ldr	r3, [pc, #80]	; (80043c4 <flowmodbus+0x954>)
 8004372:	2200      	movs	r2, #0
 8004374:	701a      	strb	r2, [r3, #0]
		break;
 8004376:	e006      	b.n	8004386 <flowmodbus+0x916>
	case Run_TrayMode:
		registerFrame[1].U16 = 4 ;// Basesystem reset position
 8004378:	4b07      	ldr	r3, [pc, #28]	; (8004398 <flowmodbus+0x928>)
 800437a:	2204      	movs	r2, #4
 800437c:	805a      	strh	r2, [r3, #2]
		feedtrayposition();
 800437e:	f7fe fdbf 	bl	8002f00 <feedtrayposition>
		break;
 8004382:	e000      	b.n	8004386 <flowmodbus+0x916>
		break;
 8004384:	bf00      	nop
		}
	}
 8004386:	bf00      	nop
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	9999999a 	.word	0x9999999a
 8004394:	3fc99999 	.word	0x3fc99999
 8004398:	200011d8 	.word	0x200011d8
 800439c:	cccccccd 	.word	0xcccccccd
 80043a0:	20001304 	.word	0x20001304
 80043a4:	20000344 	.word	0x20000344
 80043a8:	43c80000 	.word	0x43c80000
 80043ac:	2000130c 	.word	0x2000130c
 80043b0:	20001308 	.word	0x20001308
 80043b4:	200012e0 	.word	0x200012e0
 80043b8:	200012ec 	.word	0x200012ec
 80043bc:	2000064c 	.word	0x2000064c
 80043c0:	40020000 	.word	0x40020000
 80043c4:	20000cfc 	.word	0x20000cfc

080043c8 <control_interrupt>:
float control_interrupt(){
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
    //loop 1
	error = SetDegree - ReadDegree;
 80043cc:	4b52      	ldr	r3, [pc, #328]	; (8004518 <control_interrupt+0x150>)
 80043ce:	ed93 7a00 	vldr	s14, [r3]
 80043d2:	4b52      	ldr	r3, [pc, #328]	; (800451c <control_interrupt+0x154>)
 80043d4:	edd3 7a00 	vldr	s15, [r3]
 80043d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043dc:	4b50      	ldr	r3, [pc, #320]	; (8004520 <control_interrupt+0x158>)
 80043de:	edc3 7a00 	vstr	s15, [r3]
	s = s + error;
 80043e2:	4b50      	ldr	r3, [pc, #320]	; (8004524 <control_interrupt+0x15c>)
 80043e4:	ed93 7a00 	vldr	s14, [r3]
 80043e8:	4b4d      	ldr	r3, [pc, #308]	; (8004520 <control_interrupt+0x158>)
 80043ea:	edd3 7a00 	vldr	s15, [r3]
 80043ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043f2:	4b4c      	ldr	r3, [pc, #304]	; (8004524 <control_interrupt+0x15c>)
 80043f4:	edc3 7a00 	vstr	s15, [r3]
	u = K_P*error+K_I*s+K_D*(error-p);
 80043f8:	4b4b      	ldr	r3, [pc, #300]	; (8004528 <control_interrupt+0x160>)
 80043fa:	ed93 7a00 	vldr	s14, [r3]
 80043fe:	4b48      	ldr	r3, [pc, #288]	; (8004520 <control_interrupt+0x158>)
 8004400:	edd3 7a00 	vldr	s15, [r3]
 8004404:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004408:	4b48      	ldr	r3, [pc, #288]	; (800452c <control_interrupt+0x164>)
 800440a:	edd3 6a00 	vldr	s13, [r3]
 800440e:	4b45      	ldr	r3, [pc, #276]	; (8004524 <control_interrupt+0x15c>)
 8004410:	edd3 7a00 	vldr	s15, [r3]
 8004414:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004418:	ee37 7a27 	vadd.f32	s14, s14, s15
 800441c:	4b40      	ldr	r3, [pc, #256]	; (8004520 <control_interrupt+0x158>)
 800441e:	edd3 6a00 	vldr	s13, [r3]
 8004422:	4b43      	ldr	r3, [pc, #268]	; (8004530 <control_interrupt+0x168>)
 8004424:	edd3 7a00 	vldr	s15, [r3]
 8004428:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800442c:	4b41      	ldr	r3, [pc, #260]	; (8004534 <control_interrupt+0x16c>)
 800442e:	edd3 7a00 	vldr	s15, [r3]
 8004432:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800443a:	4b3f      	ldr	r3, [pc, #252]	; (8004538 <control_interrupt+0x170>)
 800443c:	edc3 7a00 	vstr	s15, [r3]
	p = error;
 8004440:	4b37      	ldr	r3, [pc, #220]	; (8004520 <control_interrupt+0x158>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a3a      	ldr	r2, [pc, #232]	; (8004530 <control_interrupt+0x168>)
 8004446:	6013      	str	r3, [r2, #0]
	// loop 2
	error2 = (u + SetVelocity) - speed;
 8004448:	4b3b      	ldr	r3, [pc, #236]	; (8004538 <control_interrupt+0x170>)
 800444a:	ed93 7a00 	vldr	s14, [r3]
 800444e:	4b3b      	ldr	r3, [pc, #236]	; (800453c <control_interrupt+0x174>)
 8004450:	edd3 7a00 	vldr	s15, [r3]
 8004454:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004458:	4b39      	ldr	r3, [pc, #228]	; (8004540 <control_interrupt+0x178>)
 800445a:	edd3 7a00 	vldr	s15, [r3]
 800445e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004462:	4b38      	ldr	r3, [pc, #224]	; (8004544 <control_interrupt+0x17c>)
 8004464:	edc3 7a00 	vstr	s15, [r3]
	s2 = s2 + error2;
 8004468:	4b37      	ldr	r3, [pc, #220]	; (8004548 <control_interrupt+0x180>)
 800446a:	ed93 7a00 	vldr	s14, [r3]
 800446e:	4b35      	ldr	r3, [pc, #212]	; (8004544 <control_interrupt+0x17c>)
 8004470:	edd3 7a00 	vldr	s15, [r3]
 8004474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004478:	4b33      	ldr	r3, [pc, #204]	; (8004548 <control_interrupt+0x180>)
 800447a:	edc3 7a00 	vstr	s15, [r3]
	u2 = K_Pvelo*error2+K_Ivelo*s2+K_Dvelo*(error2-p2);
 800447e:	4b33      	ldr	r3, [pc, #204]	; (800454c <control_interrupt+0x184>)
 8004480:	ed93 7a00 	vldr	s14, [r3]
 8004484:	4b2f      	ldr	r3, [pc, #188]	; (8004544 <control_interrupt+0x17c>)
 8004486:	edd3 7a00 	vldr	s15, [r3]
 800448a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800448e:	4b30      	ldr	r3, [pc, #192]	; (8004550 <control_interrupt+0x188>)
 8004490:	edd3 6a00 	vldr	s13, [r3]
 8004494:	4b2c      	ldr	r3, [pc, #176]	; (8004548 <control_interrupt+0x180>)
 8004496:	edd3 7a00 	vldr	s15, [r3]
 800449a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800449e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044a2:	4b28      	ldr	r3, [pc, #160]	; (8004544 <control_interrupt+0x17c>)
 80044a4:	edd3 6a00 	vldr	s13, [r3]
 80044a8:	4b2a      	ldr	r3, [pc, #168]	; (8004554 <control_interrupt+0x18c>)
 80044aa:	edd3 7a00 	vldr	s15, [r3]
 80044ae:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80044b2:	4b29      	ldr	r3, [pc, #164]	; (8004558 <control_interrupt+0x190>)
 80044b4:	edd3 7a00 	vldr	s15, [r3]
 80044b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044c0:	4b26      	ldr	r3, [pc, #152]	; (800455c <control_interrupt+0x194>)
 80044c2:	edc3 7a00 	vstr	s15, [r3]
	if(u2>65534)u2=65535;
 80044c6:	4b25      	ldr	r3, [pc, #148]	; (800455c <control_interrupt+0x194>)
 80044c8:	edd3 7a00 	vldr	s15, [r3]
 80044cc:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8004560 <control_interrupt+0x198>
 80044d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d8:	dd02      	ble.n	80044e0 <control_interrupt+0x118>
 80044da:	4b20      	ldr	r3, [pc, #128]	; (800455c <control_interrupt+0x194>)
 80044dc:	4a21      	ldr	r2, [pc, #132]	; (8004564 <control_interrupt+0x19c>)
 80044de:	601a      	str	r2, [r3, #0]
	if(u2<-65534)u2=-65535;
 80044e0:	4b1e      	ldr	r3, [pc, #120]	; (800455c <control_interrupt+0x194>)
 80044e2:	edd3 7a00 	vldr	s15, [r3]
 80044e6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8004568 <control_interrupt+0x1a0>
 80044ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044f2:	d502      	bpl.n	80044fa <control_interrupt+0x132>
 80044f4:	4b19      	ldr	r3, [pc, #100]	; (800455c <control_interrupt+0x194>)
 80044f6:	4a1d      	ldr	r2, [pc, #116]	; (800456c <control_interrupt+0x1a4>)
 80044f8:	601a      	str	r2, [r3, #0]
	p2 = error2;
 80044fa:	4b12      	ldr	r3, [pc, #72]	; (8004544 <control_interrupt+0x17c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a15      	ldr	r2, [pc, #84]	; (8004554 <control_interrupt+0x18c>)
 8004500:	6013      	str	r3, [r2, #0]
return u2;
 8004502:	4b16      	ldr	r3, [pc, #88]	; (800455c <control_interrupt+0x194>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	ee07 3a90 	vmov	s15, r3
}
 800450a:	eeb0 0a67 	vmov.f32	s0, s15
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	20001304 	.word	0x20001304
 800451c:	20001300 	.word	0x20001300
 8004520:	2000130c 	.word	0x2000130c
 8004524:	200012e0 	.word	0x200012e0
 8004528:	200012f4 	.word	0x200012f4
 800452c:	20000338 	.word	0x20000338
 8004530:	200012dc 	.word	0x200012dc
 8004534:	200012f8 	.word	0x200012f8
 8004538:	200012d8 	.word	0x200012d8
 800453c:	20000344 	.word	0x20000344
 8004540:	20001268 	.word	0x20001268
 8004544:	200012f0 	.word	0x200012f0
 8004548:	200012ec 	.word	0x200012ec
 800454c:	2000033c 	.word	0x2000033c
 8004550:	20000340 	.word	0x20000340
 8004554:	200012e8 	.word	0x200012e8
 8004558:	200012fc 	.word	0x200012fc
 800455c:	200012e4 	.word	0x200012e4
 8004560:	477ffe00 	.word	0x477ffe00
 8004564:	477fff00 	.word	0x477fff00
 8004568:	c77ffe00 	.word	0xc77ffe00
 800456c:	c77fff00 	.word	0xc77fff00

08004570 <velocity>:
	if(u2>65535)u2=65535;
	if(u2<-65535)u2=-65535;
	p2 = error2;
return u2;
}
void velocity(){
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
	QEIData.data[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8004576:	4b2c      	ldr	r3, [pc, #176]	; (8004628 <velocity+0xb8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	4a2b      	ldr	r2, [pc, #172]	; (800462c <velocity+0xbc>)
 800457e:	6013      	str	r3, [r2, #0]
	QEIData.timestamp[0] = micros();
 8004580:	f000 f8c2 	bl	8004708 <micros>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4b28      	ldr	r3, [pc, #160]	; (800462c <velocity+0xbc>)
 800458a:	609a      	str	r2, [r3, #8]

	int32_t diffposition = QEIData.data[0] - QEIData.data[1];
 800458c:	4b27      	ldr	r3, [pc, #156]	; (800462c <velocity+0xbc>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	4b26      	ldr	r3, [pc, #152]	; (800462c <velocity+0xbc>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	607b      	str	r3, [r7, #4]
	float difftime = QEIData.timestamp[0] - QEIData.timestamp[1];
 8004598:	4b24      	ldr	r3, [pc, #144]	; (800462c <velocity+0xbc>)
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	4b23      	ldr	r3, [pc, #140]	; (800462c <velocity+0xbc>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045aa:	edc7 7a00 	vstr	s15, [r7]

	if(ReadDegree > 750){
 80045ae:	4b20      	ldr	r3, [pc, #128]	; (8004630 <velocity+0xc0>)
 80045b0:	edd3 7a00 	vldr	s15, [r3]
 80045b4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004634 <velocity+0xc4>
 80045b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c0:	dd03      	ble.n	80045ca <velocity+0x5a>
		SetDegree = 0;
 80045c2:	4b1d      	ldr	r3, [pc, #116]	; (8004638 <velocity+0xc8>)
 80045c4:	f04f 0200 	mov.w	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]
	}
	if(diffposition < -(QEI_PERIOD >> 1)){
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f513 4fa0 	cmn.w	r3, #20480	; 0x5000
 80045d0:	da03      	bge.n	80045da <velocity+0x6a>
		diffposition += QEI_PERIOD;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 80045d8:	607b      	str	r3, [r7, #4]
	}

	QEIData.QEIPosition = __HAL_TIM_GET_COUNTER(&htim2) % 8192;
 80045da:	4b13      	ldr	r3, [pc, #76]	; (8004628 <velocity+0xb8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045e4:	ee07 3a90 	vmov	s15, r3
 80045e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ec:	4b0f      	ldr	r3, [pc, #60]	; (800462c <velocity+0xbc>)
 80045ee:	edc3 7a04 	vstr	s15, [r3, #16]
	QEIData.QEIVelocity = (diffposition*1000000)/difftime;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a11      	ldr	r2, [pc, #68]	; (800463c <velocity+0xcc>)
 80045f6:	fb02 f303 	mul.w	r3, r2, r3
 80045fa:	ee07 3a90 	vmov	s15, r3
 80045fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004602:	ed97 7a00 	vldr	s14, [r7]
 8004606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800460a:	4b08      	ldr	r3, [pc, #32]	; (800462c <velocity+0xbc>)
 800460c:	edc3 7a05 	vstr	s15, [r3, #20]

	QEIData.data[1] = QEIData.data[0];
 8004610:	4b06      	ldr	r3, [pc, #24]	; (800462c <velocity+0xbc>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a05      	ldr	r2, [pc, #20]	; (800462c <velocity+0xbc>)
 8004616:	6053      	str	r3, [r2, #4]
	QEIData.timestamp[1] = QEIData.timestamp[0];
 8004618:	4b04      	ldr	r3, [pc, #16]	; (800462c <velocity+0xbc>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	4a03      	ldr	r2, [pc, #12]	; (800462c <velocity+0xbc>)
 800461e:	60d3      	str	r3, [r2, #12]

}
 8004620:	bf00      	nop
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	200004e4 	.word	0x200004e4
 800462c:	2000128c 	.word	0x2000128c
 8004630:	20001300 	.word	0x20001300
 8004634:	443b8000 	.word	0x443b8000
 8004638:	20001304 	.word	0x20001304
 800463c:	000f4240 	.word	0x000f4240

08004640 <accelerate>:
void accelerate(){
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
	QEIAcc.data[0] = speed;
 8004646:	4b20      	ldr	r3, [pc, #128]	; (80046c8 <accelerate+0x88>)
 8004648:	edd3 7a00 	vldr	s15, [r3]
 800464c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004650:	ee17 2a90 	vmov	r2, s15
 8004654:	4b1d      	ldr	r3, [pc, #116]	; (80046cc <accelerate+0x8c>)
 8004656:	601a      	str	r2, [r3, #0]
	QEIAcc.timestamp[0] = micros();
 8004658:	f000 f856 	bl	8004708 <micros>
 800465c:	4602      	mov	r2, r0
 800465e:	460b      	mov	r3, r1
 8004660:	4b1a      	ldr	r3, [pc, #104]	; (80046cc <accelerate+0x8c>)
 8004662:	609a      	str	r2, [r3, #8]

	int32_t diffposition = QEIAcc.data[0] - QEIAcc.data[1];
 8004664:	4b19      	ldr	r3, [pc, #100]	; (80046cc <accelerate+0x8c>)
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	4b18      	ldr	r3, [pc, #96]	; (80046cc <accelerate+0x8c>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	607b      	str	r3, [r7, #4]
	float difftime = QEIAcc.timestamp[0] - QEIAcc.timestamp[1];
 8004670:	4b16      	ldr	r3, [pc, #88]	; (80046cc <accelerate+0x8c>)
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	4b15      	ldr	r3, [pc, #84]	; (80046cc <accelerate+0x8c>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004682:	edc7 7a00 	vstr	s15, [r7]
	difftime = difftime/1000000;
 8004686:	ed97 7a00 	vldr	s14, [r7]
 800468a:	eddf 6a11 	vldr	s13, [pc, #68]	; 80046d0 <accelerate+0x90>
 800468e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004692:	edc7 7a00 	vstr	s15, [r7]

	QEIAcc.QEIVelocity = (diffposition/difftime);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	ee07 3a90 	vmov	s15, r3
 800469c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80046a0:	ed97 7a00 	vldr	s14, [r7]
 80046a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046a8:	4b08      	ldr	r3, [pc, #32]	; (80046cc <accelerate+0x8c>)
 80046aa:	edc3 7a05 	vstr	s15, [r3, #20]

	QEIAcc.data[1] = QEIAcc.data[0];
 80046ae:	4b07      	ldr	r3, [pc, #28]	; (80046cc <accelerate+0x8c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a06      	ldr	r2, [pc, #24]	; (80046cc <accelerate+0x8c>)
 80046b4:	6053      	str	r3, [r2, #4]
	QEIAcc.timestamp[1] = QEIAcc.timestamp[0];
 80046b6:	4b05      	ldr	r3, [pc, #20]	; (80046cc <accelerate+0x8c>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	4a04      	ldr	r2, [pc, #16]	; (80046cc <accelerate+0x8c>)
 80046bc:	60d3      	str	r3, [r2, #12]
}
 80046be:	bf00      	nop
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	20001268 	.word	0x20001268
 80046cc:	200012a4 	.word	0x200012a4
 80046d0:	49742400 	.word	0x49742400

080046d4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046d4:	b4b0      	push	{r4, r5, r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
	if(htim == &htim5){
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a08      	ldr	r2, [pc, #32]	; (8004700 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d108      	bne.n	80046f6 <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 80046e4:	4b07      	ldr	r3, [pc, #28]	; (8004704 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80046e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ea:	1e54      	subs	r4, r2, #1
 80046ec:	f143 0500 	adc.w	r5, r3, #0
 80046f0:	4b04      	ldr	r3, [pc, #16]	; (8004704 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80046f2:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bcb0      	pop	{r4, r5, r7}
 80046fe:	4770      	bx	lr
 8004700:	20000700 	.word	0x20000700
 8004704:	200012c0 	.word	0x200012c0

08004708 <micros>:
uint64_t micros(){
 8004708:	b4b0      	push	{r4, r5, r7}
 800470a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 800470c:	4b09      	ldr	r3, [pc, #36]	; (8004734 <micros+0x2c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	2200      	movs	r2, #0
 8004714:	4618      	mov	r0, r3
 8004716:	4611      	mov	r1, r2
 8004718:	4b07      	ldr	r3, [pc, #28]	; (8004738 <micros+0x30>)
 800471a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471e:	1884      	adds	r4, r0, r2
 8004720:	eb41 0503 	adc.w	r5, r1, r3
 8004724:	4622      	mov	r2, r4
 8004726:	462b      	mov	r3, r5
}
 8004728:	4610      	mov	r0, r2
 800472a:	4619      	mov	r1, r3
 800472c:	46bd      	mov	sp, r7
 800472e:	bcb0      	pop	{r4, r5, r7}
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	20000700 	.word	0x20000700
 8004738:	200012c0 	.word	0x200012c0

0800473c <main_Qubic>:
void main_Qubic()
{
 800473c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004740:	ed2d 8b02 	vpush	{d8}
 8004744:	b086      	sub	sp, #24
 8004746:	af00      	add	r7, sp, #0
  emxArray_real_T *q_acc;
  emxArray_real_T *q_position;
  emxArray_real_T *q_velocity;
  double q_k1_tmp;
  /* Initialize function 'Qubic' input arguments. */
  q_k1_tmp = argInit_real_T();
 8004748:	f7fd fce4 	bl	8002114 <argInit_real_T>
 800474c:	ed87 0b04 	vstr	d0, [r7, #16]
  /* Call the entry-point 'Qubic'. */
  emxInitArray_real_T(&q_position, 2);
 8004750:	f107 0308 	add.w	r3, r7, #8
 8004754:	2102      	movs	r1, #2
 8004756:	4618      	mov	r0, r3
 8004758:	f7fd fbee 	bl	8001f38 <emxInitArray_real_T>
  emxInitArray_real_T(&q_velocity, 2);
 800475c:	1d3b      	adds	r3, r7, #4
 800475e:	2102      	movs	r1, #2
 8004760:	4618      	mov	r0, r3
 8004762:	f7fd fbe9 	bl	8001f38 <emxInitArray_real_T>
  emxInitArray_real_T(&q_acc, 2);
 8004766:	f107 030c 	add.w	r3, r7, #12
 800476a:	2102      	movs	r1, #2
 800476c:	4618      	mov	r0, r3
 800476e:	f7fd fbe3 	bl	8001f38 <emxInitArray_real_T>
  Qubic(start_p, stop_p, start_v, stop_v, timecycle, q_position,
 8004772:	4b29      	ldr	r3, [pc, #164]	; (8004818 <main_Qubic+0xdc>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f7fb fe92 	bl	80004a0 <__aeabi_f2d>
 800477c:	4604      	mov	r4, r0
 800477e:	460d      	mov	r5, r1
 8004780:	4b26      	ldr	r3, [pc, #152]	; (800481c <main_Qubic+0xe0>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4618      	mov	r0, r3
 8004786:	f7fb fe8b 	bl	80004a0 <__aeabi_f2d>
 800478a:	4680      	mov	r8, r0
 800478c:	4689      	mov	r9, r1
 800478e:	4b24      	ldr	r3, [pc, #144]	; (8004820 <main_Qubic+0xe4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f7fb fe84 	bl	80004a0 <__aeabi_f2d>
 8004798:	4682      	mov	sl, r0
 800479a:	468b      	mov	fp, r1
 800479c:	4b21      	ldr	r3, [pc, #132]	; (8004824 <main_Qubic+0xe8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fb fe7d 	bl	80004a0 <__aeabi_f2d>
 80047a6:	ec41 0b18 	vmov	d8, r0, r1
 80047aa:	4b1f      	ldr	r3, [pc, #124]	; (8004828 <main_Qubic+0xec>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fb fe76 	bl	80004a0 <__aeabi_f2d>
 80047b4:	ec41 0b17 	vmov	d7, r0, r1
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4618      	mov	r0, r3
 80047c0:	eeb0 4a47 	vmov.f32	s8, s14
 80047c4:	eef0 4a67 	vmov.f32	s9, s15
 80047c8:	eeb0 3a48 	vmov.f32	s6, s16
 80047cc:	eef0 3a68 	vmov.f32	s7, s17
 80047d0:	ec4b ab12 	vmov	d2, sl, fp
 80047d4:	ec49 8b11 	vmov	d1, r8, r9
 80047d8:	ec45 4b10 	vmov	d0, r4, r5
 80047dc:	f7fd f81c 	bl	8001818 <Qubic>
        q_velocity, q_acc);
  q_positionN = q_position;
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4a12      	ldr	r2, [pc, #72]	; (800482c <main_Qubic+0xf0>)
 80047e4:	6013      	str	r3, [r2, #0]
  q_velocityN = q_velocity;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a11      	ldr	r2, [pc, #68]	; (8004830 <main_Qubic+0xf4>)
 80047ea:	6013      	str	r3, [r2, #0]
  q_accN = q_acc;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4a11      	ldr	r2, [pc, #68]	; (8004834 <main_Qubic+0xf8>)
 80047f0:	6013      	str	r3, [r2, #0]
  emxDestroyArray_real_T(q_position);
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7fd fb93 	bl	8001f20 <emxDestroyArray_real_T>
  emxDestroyArray_real_T(q_velocity);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fd fb8f 	bl	8001f20 <emxDestroyArray_real_T>
  emxDestroyArray_real_T(q_acc);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4618      	mov	r0, r3
 8004806:	f7fd fb8b 	bl	8001f20 <emxDestroyArray_real_T>
}
 800480a:	bf00      	nop
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	ecbd 8b02 	vpop	{d8}
 8004814:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004818:	20000948 	.word	0x20000948
 800481c:	2000094c 	.word	0x2000094c
 8004820:	20000950 	.word	0x20000950
 8004824:	20000954 	.word	0x20000954
 8004828:	20000958 	.word	0x20000958
 800482c:	200012cc 	.word	0x200012cc
 8004830:	200012c8 	.word	0x200012c8
 8004834:	200012d0 	.word	0x200012d0

08004838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800483c:	b672      	cpsid	i
}
 800483e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004840:	e7fe      	b.n	8004840 <Error_Handler+0x8>
	...

08004844 <rtIsInf>:
 * Function: rtIsInf ==================================================
 *  Abstract:
 *  Test if value is infinite
 */
boolean_T rtIsInf(real_T value)
{
 8004844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	ed87 0b00 	vstr	d0, [r7]
  return (isinf(value) != 0U);
 800484e:	683c      	ldr	r4, [r7, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004856:	2301      	movs	r3, #1
 8004858:	461e      	mov	r6, r3
 800485a:	f04f 32ff 	mov.w	r2, #4294967295
 800485e:	4b0f      	ldr	r3, [pc, #60]	; (800489c <rtIsInf+0x58>)
 8004860:	4620      	mov	r0, r4
 8004862:	4629      	mov	r1, r5
 8004864:	f7fc f90e 	bl	8000a84 <__aeabi_dcmpun>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10b      	bne.n	8004886 <rtIsInf+0x42>
 800486e:	f04f 32ff 	mov.w	r2, #4294967295
 8004872:	4b0a      	ldr	r3, [pc, #40]	; (800489c <rtIsInf+0x58>)
 8004874:	4620      	mov	r0, r4
 8004876:	4629      	mov	r1, r5
 8004878:	f7fc f8e6 	bl	8000a48 <__aeabi_dcmple>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <rtIsInf+0x42>
 8004882:	2300      	movs	r3, #0
 8004884:	461e      	mov	r6, r3
 8004886:	b2f3      	uxtb	r3, r6
 8004888:	f083 0301 	eor.w	r3, r3, #1
 800488c:	b2db      	uxtb	r3, r3
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	b2db      	uxtb	r3, r3
}
 8004894:	4618      	mov	r0, r3
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800489c:	7fefffff 	.word	0x7fefffff

080048a0 <rtIsNaN>:
 * Function: rtIsNaN ==================================================
 *  Abstract:
 *  Test if value is not a number
 */
boolean_T rtIsNaN(real_T value)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	ed87 0b00 	vstr	d0, [r7]
  return (isnan(value) != 0U);
 80048aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048b2:	f7fc f8e7 	bl	8000a84 <__aeabi_dcmpun>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <rtIsNaN+0x20>
 80048bc:	2301      	movs	r3, #1
 80048be:	e000      	b.n	80048c2 <rtIsNaN+0x22>
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
	...

080048cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048d2:	2300      	movs	r3, #0
 80048d4:	607b      	str	r3, [r7, #4]
 80048d6:	4b10      	ldr	r3, [pc, #64]	; (8004918 <HAL_MspInit+0x4c>)
 80048d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048da:	4a0f      	ldr	r2, [pc, #60]	; (8004918 <HAL_MspInit+0x4c>)
 80048dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048e0:	6453      	str	r3, [r2, #68]	; 0x44
 80048e2:	4b0d      	ldr	r3, [pc, #52]	; (8004918 <HAL_MspInit+0x4c>)
 80048e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ea:	607b      	str	r3, [r7, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048ee:	2300      	movs	r3, #0
 80048f0:	603b      	str	r3, [r7, #0]
 80048f2:	4b09      	ldr	r3, [pc, #36]	; (8004918 <HAL_MspInit+0x4c>)
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	4a08      	ldr	r2, [pc, #32]	; (8004918 <HAL_MspInit+0x4c>)
 80048f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048fc:	6413      	str	r3, [r2, #64]	; 0x40
 80048fe:	4b06      	ldr	r3, [pc, #24]	; (8004918 <HAL_MspInit+0x4c>)
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004906:	603b      	str	r3, [r7, #0]
 8004908:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800490a:	2007      	movs	r0, #7
 800490c:	f001 f882 	bl	8005a14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004910:	bf00      	nop
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40023800 	.word	0x40023800

0800491c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08a      	sub	sp, #40	; 0x28
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004924:	f107 0314 	add.w	r3, r7, #20
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	605a      	str	r2, [r3, #4]
 800492e:	609a      	str	r2, [r3, #8]
 8004930:	60da      	str	r2, [r3, #12]
 8004932:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a3c      	ldr	r2, [pc, #240]	; (8004a2c <HAL_ADC_MspInit+0x110>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d171      	bne.n	8004a22 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800493e:	2300      	movs	r3, #0
 8004940:	613b      	str	r3, [r7, #16]
 8004942:	4b3b      	ldr	r3, [pc, #236]	; (8004a30 <HAL_ADC_MspInit+0x114>)
 8004944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004946:	4a3a      	ldr	r2, [pc, #232]	; (8004a30 <HAL_ADC_MspInit+0x114>)
 8004948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800494c:	6453      	str	r3, [r2, #68]	; 0x44
 800494e:	4b38      	ldr	r3, [pc, #224]	; (8004a30 <HAL_ADC_MspInit+0x114>)
 8004950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004956:	613b      	str	r3, [r7, #16]
 8004958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800495a:	2300      	movs	r3, #0
 800495c:	60fb      	str	r3, [r7, #12]
 800495e:	4b34      	ldr	r3, [pc, #208]	; (8004a30 <HAL_ADC_MspInit+0x114>)
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	4a33      	ldr	r2, [pc, #204]	; (8004a30 <HAL_ADC_MspInit+0x114>)
 8004964:	f043 0301 	orr.w	r3, r3, #1
 8004968:	6313      	str	r3, [r2, #48]	; 0x30
 800496a:	4b31      	ldr	r3, [pc, #196]	; (8004a30 <HAL_ADC_MspInit+0x114>)
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004976:	2300      	movs	r3, #0
 8004978:	60bb      	str	r3, [r7, #8]
 800497a:	4b2d      	ldr	r3, [pc, #180]	; (8004a30 <HAL_ADC_MspInit+0x114>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	4a2c      	ldr	r2, [pc, #176]	; (8004a30 <HAL_ADC_MspInit+0x114>)
 8004980:	f043 0302 	orr.w	r3, r3, #2
 8004984:	6313      	str	r3, [r2, #48]	; 0x30
 8004986:	4b2a      	ldr	r3, [pc, #168]	; (8004a30 <HAL_ADC_MspInit+0x114>)
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	60bb      	str	r3, [r7, #8]
 8004990:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Joystick_Y_Pin;
 8004992:	2310      	movs	r3, #16
 8004994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004996:	2303      	movs	r3, #3
 8004998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499a:	2300      	movs	r3, #0
 800499c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Joystick_Y_GPIO_Port, &GPIO_InitStruct);
 800499e:	f107 0314 	add.w	r3, r7, #20
 80049a2:	4619      	mov	r1, r3
 80049a4:	4823      	ldr	r0, [pc, #140]	; (8004a34 <HAL_ADC_MspInit+0x118>)
 80049a6:	f001 fc85 	bl	80062b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Joystick_X_Pin;
 80049aa:	2301      	movs	r3, #1
 80049ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049ae:	2303      	movs	r3, #3
 80049b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Joystick_X_GPIO_Port, &GPIO_InitStruct);
 80049b6:	f107 0314 	add.w	r3, r7, #20
 80049ba:	4619      	mov	r1, r3
 80049bc:	481e      	ldr	r0, [pc, #120]	; (8004a38 <HAL_ADC_MspInit+0x11c>)
 80049be:	f001 fc79 	bl	80062b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80049c2:	4b1e      	ldr	r3, [pc, #120]	; (8004a3c <HAL_ADC_MspInit+0x120>)
 80049c4:	4a1e      	ldr	r2, [pc, #120]	; (8004a40 <HAL_ADC_MspInit+0x124>)
 80049c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80049c8:	4b1c      	ldr	r3, [pc, #112]	; (8004a3c <HAL_ADC_MspInit+0x120>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049ce:	4b1b      	ldr	r3, [pc, #108]	; (8004a3c <HAL_ADC_MspInit+0x120>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80049d4:	4b19      	ldr	r3, [pc, #100]	; (8004a3c <HAL_ADC_MspInit+0x120>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80049da:	4b18      	ldr	r3, [pc, #96]	; (8004a3c <HAL_ADC_MspInit+0x120>)
 80049dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80049e2:	4b16      	ldr	r3, [pc, #88]	; (8004a3c <HAL_ADC_MspInit+0x120>)
 80049e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80049e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80049ea:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <HAL_ADC_MspInit+0x120>)
 80049ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80049f2:	4b12      	ldr	r3, [pc, #72]	; (8004a3c <HAL_ADC_MspInit+0x120>)
 80049f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80049fa:	4b10      	ldr	r3, [pc, #64]	; (8004a3c <HAL_ADC_MspInit+0x120>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a00:	4b0e      	ldr	r3, [pc, #56]	; (8004a3c <HAL_ADC_MspInit+0x120>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004a06:	480d      	ldr	r0, [pc, #52]	; (8004a3c <HAL_ADC_MspInit+0x120>)
 8004a08:	f001 f846 	bl	8005a98 <HAL_DMA_Init>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8004a12:	f7ff ff11 	bl	8004838 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a08      	ldr	r2, [pc, #32]	; (8004a3c <HAL_ADC_MspInit+0x120>)
 8004a1a:	639a      	str	r2, [r3, #56]	; 0x38
 8004a1c:	4a07      	ldr	r2, [pc, #28]	; (8004a3c <HAL_ADC_MspInit+0x120>)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004a22:	bf00      	nop
 8004a24:	3728      	adds	r7, #40	; 0x28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40012000 	.word	0x40012000
 8004a30:	40023800 	.word	0x40023800
 8004a34:	40020000 	.word	0x40020000
 8004a38:	40020400 	.word	0x40020400
 8004a3c:	20000430 	.word	0x20000430
 8004a40:	40026410 	.word	0x40026410

08004a44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08a      	sub	sp, #40	; 0x28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a4c:	f107 0314 	add.w	r3, r7, #20
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	605a      	str	r2, [r3, #4]
 8004a56:	609a      	str	r2, [r3, #8]
 8004a58:	60da      	str	r2, [r3, #12]
 8004a5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a19      	ldr	r2, [pc, #100]	; (8004ac8 <HAL_I2C_MspInit+0x84>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d12c      	bne.n	8004ac0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a66:	2300      	movs	r3, #0
 8004a68:	613b      	str	r3, [r7, #16]
 8004a6a:	4b18      	ldr	r3, [pc, #96]	; (8004acc <HAL_I2C_MspInit+0x88>)
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6e:	4a17      	ldr	r2, [pc, #92]	; (8004acc <HAL_I2C_MspInit+0x88>)
 8004a70:	f043 0302 	orr.w	r3, r3, #2
 8004a74:	6313      	str	r3, [r2, #48]	; 0x30
 8004a76:	4b15      	ldr	r3, [pc, #84]	; (8004acc <HAL_I2C_MspInit+0x88>)
 8004a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	613b      	str	r3, [r7, #16]
 8004a80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004a82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a88:	2312      	movs	r3, #18
 8004a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a90:	2303      	movs	r3, #3
 8004a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004a94:	2304      	movs	r3, #4
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a98:	f107 0314 	add.w	r3, r7, #20
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	480c      	ldr	r0, [pc, #48]	; (8004ad0 <HAL_I2C_MspInit+0x8c>)
 8004aa0:	f001 fc08 	bl	80062b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	4b08      	ldr	r3, [pc, #32]	; (8004acc <HAL_I2C_MspInit+0x88>)
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	4a07      	ldr	r2, [pc, #28]	; (8004acc <HAL_I2C_MspInit+0x88>)
 8004aae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8004ab4:	4b05      	ldr	r3, [pc, #20]	; (8004acc <HAL_I2C_MspInit+0x88>)
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004ac0:	bf00      	nop
 8004ac2:	3728      	adds	r7, #40	; 0x28
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40005400 	.word	0x40005400
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	40020400 	.word	0x40020400

08004ad4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08a      	sub	sp, #40	; 0x28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004adc:	f107 0314 	add.w	r3, r7, #20
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	605a      	str	r2, [r3, #4]
 8004ae6:	609a      	str	r2, [r3, #8]
 8004ae8:	60da      	str	r2, [r3, #12]
 8004aea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af4:	d12b      	bne.n	8004b4e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004af6:	2300      	movs	r3, #0
 8004af8:	613b      	str	r3, [r7, #16]
 8004afa:	4b17      	ldr	r3, [pc, #92]	; (8004b58 <HAL_TIM_Encoder_MspInit+0x84>)
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	4a16      	ldr	r2, [pc, #88]	; (8004b58 <HAL_TIM_Encoder_MspInit+0x84>)
 8004b00:	f043 0301 	orr.w	r3, r3, #1
 8004b04:	6413      	str	r3, [r2, #64]	; 0x40
 8004b06:	4b14      	ldr	r3, [pc, #80]	; (8004b58 <HAL_TIM_Encoder_MspInit+0x84>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	613b      	str	r3, [r7, #16]
 8004b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b12:	2300      	movs	r3, #0
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	4b10      	ldr	r3, [pc, #64]	; (8004b58 <HAL_TIM_Encoder_MspInit+0x84>)
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	4a0f      	ldr	r2, [pc, #60]	; (8004b58 <HAL_TIM_Encoder_MspInit+0x84>)
 8004b1c:	f043 0301 	orr.w	r3, r3, #1
 8004b20:	6313      	str	r3, [r2, #48]	; 0x30
 8004b22:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <HAL_TIM_Encoder_MspInit+0x84>)
 8004b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Encoder_B_Pin|Encoder_A_Pin;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b32:	2302      	movs	r3, #2
 8004b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b42:	f107 0314 	add.w	r3, r7, #20
 8004b46:	4619      	mov	r1, r3
 8004b48:	4804      	ldr	r0, [pc, #16]	; (8004b5c <HAL_TIM_Encoder_MspInit+0x88>)
 8004b4a:	f001 fbb3 	bl	80062b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004b4e:	bf00      	nop
 8004b50:	3728      	adds	r7, #40	; 0x28
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	40020000 	.word	0x40020000

08004b60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a34      	ldr	r2, [pc, #208]	; (8004c40 <HAL_TIM_Base_MspInit+0xe0>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d116      	bne.n	8004ba0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004b72:	2300      	movs	r3, #0
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	4b33      	ldr	r3, [pc, #204]	; (8004c44 <HAL_TIM_Base_MspInit+0xe4>)
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	4a32      	ldr	r2, [pc, #200]	; (8004c44 <HAL_TIM_Base_MspInit+0xe4>)
 8004b7c:	f043 0302 	orr.w	r3, r3, #2
 8004b80:	6413      	str	r3, [r2, #64]	; 0x40
 8004b82:	4b30      	ldr	r3, [pc, #192]	; (8004c44 <HAL_TIM_Base_MspInit+0xe4>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004b8e:	2200      	movs	r2, #0
 8004b90:	2100      	movs	r1, #0
 8004b92:	201d      	movs	r0, #29
 8004b94:	f000 ff49 	bl	8005a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004b98:	201d      	movs	r0, #29
 8004b9a:	f000 ff62 	bl	8005a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004b9e:	e04a      	b.n	8004c36 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a28      	ldr	r2, [pc, #160]	; (8004c48 <HAL_TIM_Base_MspInit+0xe8>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d116      	bne.n	8004bd8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004baa:	2300      	movs	r3, #0
 8004bac:	613b      	str	r3, [r7, #16]
 8004bae:	4b25      	ldr	r3, [pc, #148]	; (8004c44 <HAL_TIM_Base_MspInit+0xe4>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	4a24      	ldr	r2, [pc, #144]	; (8004c44 <HAL_TIM_Base_MspInit+0xe4>)
 8004bb4:	f043 0304 	orr.w	r3, r3, #4
 8004bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bba:	4b22      	ldr	r3, [pc, #136]	; (8004c44 <HAL_TIM_Base_MspInit+0xe4>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	2100      	movs	r1, #0
 8004bca:	201e      	movs	r0, #30
 8004bcc:	f000 ff2d 	bl	8005a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004bd0:	201e      	movs	r0, #30
 8004bd2:	f000 ff46 	bl	8005a62 <HAL_NVIC_EnableIRQ>
}
 8004bd6:	e02e      	b.n	8004c36 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a1b      	ldr	r2, [pc, #108]	; (8004c4c <HAL_TIM_Base_MspInit+0xec>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d10e      	bne.n	8004c00 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	4b17      	ldr	r3, [pc, #92]	; (8004c44 <HAL_TIM_Base_MspInit+0xe4>)
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	4a16      	ldr	r2, [pc, #88]	; (8004c44 <HAL_TIM_Base_MspInit+0xe4>)
 8004bec:	f043 0308 	orr.w	r3, r3, #8
 8004bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8004bf2:	4b14      	ldr	r3, [pc, #80]	; (8004c44 <HAL_TIM_Base_MspInit+0xe4>)
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
}
 8004bfe:	e01a      	b.n	8004c36 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM11)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a12      	ldr	r2, [pc, #72]	; (8004c50 <HAL_TIM_Base_MspInit+0xf0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d115      	bne.n	8004c36 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60bb      	str	r3, [r7, #8]
 8004c0e:	4b0d      	ldr	r3, [pc, #52]	; (8004c44 <HAL_TIM_Base_MspInit+0xe4>)
 8004c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c12:	4a0c      	ldr	r2, [pc, #48]	; (8004c44 <HAL_TIM_Base_MspInit+0xe4>)
 8004c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c18:	6453      	str	r3, [r2, #68]	; 0x44
 8004c1a:	4b0a      	ldr	r3, [pc, #40]	; (8004c44 <HAL_TIM_Base_MspInit+0xe4>)
 8004c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c22:	60bb      	str	r3, [r7, #8]
 8004c24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004c26:	2200      	movs	r2, #0
 8004c28:	2100      	movs	r1, #0
 8004c2a:	201a      	movs	r0, #26
 8004c2c:	f000 fefd 	bl	8005a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004c30:	201a      	movs	r0, #26
 8004c32:	f000 ff16 	bl	8005a62 <HAL_NVIC_EnableIRQ>
}
 8004c36:	bf00      	nop
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	40000400 	.word	0x40000400
 8004c44:	40023800 	.word	0x40023800
 8004c48:	40000800 	.word	0x40000800
 8004c4c:	40000c00 	.word	0x40000c00
 8004c50:	40014800 	.word	0x40014800

08004c54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c5c:	f107 030c 	add.w	r3, r7, #12
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	605a      	str	r2, [r3, #4]
 8004c66:	609a      	str	r2, [r3, #8]
 8004c68:	60da      	str	r2, [r3, #12]
 8004c6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a12      	ldr	r2, [pc, #72]	; (8004cbc <HAL_TIM_MspPostInit+0x68>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d11d      	bne.n	8004cb2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c76:	2300      	movs	r3, #0
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	4b11      	ldr	r3, [pc, #68]	; (8004cc0 <HAL_TIM_MspPostInit+0x6c>)
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	4a10      	ldr	r2, [pc, #64]	; (8004cc0 <HAL_TIM_MspPostInit+0x6c>)
 8004c80:	f043 0302 	orr.w	r3, r3, #2
 8004c84:	6313      	str	r3, [r2, #48]	; 0x30
 8004c86:	4b0e      	ldr	r3, [pc, #56]	; (8004cc0 <HAL_TIM_MspPostInit+0x6c>)
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	60bb      	str	r3, [r7, #8]
 8004c90:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004c92:	2340      	movs	r3, #64	; 0x40
 8004c94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c96:	2302      	movs	r3, #2
 8004c98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ca6:	f107 030c 	add.w	r3, r7, #12
 8004caa:	4619      	mov	r1, r3
 8004cac:	4805      	ldr	r0, [pc, #20]	; (8004cc4 <HAL_TIM_MspPostInit+0x70>)
 8004cae:	f001 fb01 	bl	80062b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004cb2:	bf00      	nop
 8004cb4:	3720      	adds	r7, #32
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	40000800 	.word	0x40000800
 8004cc0:	40023800 	.word	0x40023800
 8004cc4:	40020400 	.word	0x40020400

08004cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08a      	sub	sp, #40	; 0x28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cd0:	f107 0314 	add.w	r3, r7, #20
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	605a      	str	r2, [r3, #4]
 8004cda:	609a      	str	r2, [r3, #8]
 8004cdc:	60da      	str	r2, [r3, #12]
 8004cde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a34      	ldr	r2, [pc, #208]	; (8004db8 <HAL_UART_MspInit+0xf0>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d161      	bne.n	8004dae <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004cea:	2300      	movs	r3, #0
 8004cec:	613b      	str	r3, [r7, #16]
 8004cee:	4b33      	ldr	r3, [pc, #204]	; (8004dbc <HAL_UART_MspInit+0xf4>)
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	4a32      	ldr	r2, [pc, #200]	; (8004dbc <HAL_UART_MspInit+0xf4>)
 8004cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cfa:	4b30      	ldr	r3, [pc, #192]	; (8004dbc <HAL_UART_MspInit+0xf4>)
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	4b2c      	ldr	r3, [pc, #176]	; (8004dbc <HAL_UART_MspInit+0xf4>)
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	4a2b      	ldr	r2, [pc, #172]	; (8004dbc <HAL_UART_MspInit+0xf4>)
 8004d10:	f043 0301 	orr.w	r3, r3, #1
 8004d14:	6313      	str	r3, [r2, #48]	; 0x30
 8004d16:	4b29      	ldr	r3, [pc, #164]	; (8004dbc <HAL_UART_MspInit+0xf4>)
 8004d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004d22:	230c      	movs	r3, #12
 8004d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d26:	2302      	movs	r3, #2
 8004d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004d32:	2307      	movs	r3, #7
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d36:	f107 0314 	add.w	r3, r7, #20
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4820      	ldr	r0, [pc, #128]	; (8004dc0 <HAL_UART_MspInit+0xf8>)
 8004d3e:	f001 fab9 	bl	80062b4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004d42:	4b20      	ldr	r3, [pc, #128]	; (8004dc4 <HAL_UART_MspInit+0xfc>)
 8004d44:	4a20      	ldr	r2, [pc, #128]	; (8004dc8 <HAL_UART_MspInit+0x100>)
 8004d46:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004d48:	4b1e      	ldr	r3, [pc, #120]	; (8004dc4 <HAL_UART_MspInit+0xfc>)
 8004d4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d4e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d50:	4b1c      	ldr	r3, [pc, #112]	; (8004dc4 <HAL_UART_MspInit+0xfc>)
 8004d52:	2240      	movs	r2, #64	; 0x40
 8004d54:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d56:	4b1b      	ldr	r3, [pc, #108]	; (8004dc4 <HAL_UART_MspInit+0xfc>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d5c:	4b19      	ldr	r3, [pc, #100]	; (8004dc4 <HAL_UART_MspInit+0xfc>)
 8004d5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d62:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d64:	4b17      	ldr	r3, [pc, #92]	; (8004dc4 <HAL_UART_MspInit+0xfc>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d6a:	4b16      	ldr	r3, [pc, #88]	; (8004dc4 <HAL_UART_MspInit+0xfc>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004d70:	4b14      	ldr	r3, [pc, #80]	; (8004dc4 <HAL_UART_MspInit+0xfc>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d76:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <HAL_UART_MspInit+0xfc>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d7c:	4b11      	ldr	r3, [pc, #68]	; (8004dc4 <HAL_UART_MspInit+0xfc>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004d82:	4810      	ldr	r0, [pc, #64]	; (8004dc4 <HAL_UART_MspInit+0xfc>)
 8004d84:	f000 fe88 	bl	8005a98 <HAL_DMA_Init>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004d8e:	f7ff fd53 	bl	8004838 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a0b      	ldr	r2, [pc, #44]	; (8004dc4 <HAL_UART_MspInit+0xfc>)
 8004d96:	635a      	str	r2, [r3, #52]	; 0x34
 8004d98:	4a0a      	ldr	r2, [pc, #40]	; (8004dc4 <HAL_UART_MspInit+0xfc>)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2100      	movs	r1, #0
 8004da2:	2026      	movs	r0, #38	; 0x26
 8004da4:	f000 fe41 	bl	8005a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004da8:	2026      	movs	r0, #38	; 0x26
 8004daa:	f000 fe5a 	bl	8005a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004dae:	bf00      	nop
 8004db0:	3728      	adds	r7, #40	; 0x28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	40004400 	.word	0x40004400
 8004dbc:	40023800 	.word	0x40023800
 8004dc0:	40020000 	.word	0x40020000
 8004dc4:	200008dc 	.word	0x200008dc
 8004dc8:	400260a0 	.word	0x400260a0

08004dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004dd0:	e7fe      	b.n	8004dd0 <NMI_Handler+0x4>

08004dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004dd6:	e7fe      	b.n	8004dd6 <HardFault_Handler+0x4>

08004dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ddc:	e7fe      	b.n	8004ddc <MemManage_Handler+0x4>

08004dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004dde:	b480      	push	{r7}
 8004de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004de2:	e7fe      	b.n	8004de2 <BusFault_Handler+0x4>

08004de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004de8:	e7fe      	b.n	8004de8 <UsageFault_Handler+0x4>

08004dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004dea:	b480      	push	{r7}
 8004dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004dee:	bf00      	nop
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004dfc:	bf00      	nop
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e06:	b480      	push	{r7}
 8004e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e0a:	bf00      	nop
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e18:	f000 f90a 	bl	8005030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e1c:	bf00      	nop
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004e24:	4802      	ldr	r0, [pc, #8]	; (8004e30 <DMA1_Stream6_IRQHandler+0x10>)
 8004e26:	f000 ffcf 	bl	8005dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004e2a:	bf00      	nop
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	200008dc 	.word	0x200008dc

08004e34 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8004e38:	4802      	ldr	r0, [pc, #8]	; (8004e44 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004e3a:	f002 fe95 	bl	8007b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004e3e:	bf00      	nop
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	200007b4 	.word	0x200007b4

08004e48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004e4c:	4802      	ldr	r0, [pc, #8]	; (8004e58 <TIM3_IRQHandler+0x10>)
 8004e4e:	f002 fe8b 	bl	8007b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004e52:	bf00      	nop
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20000598 	.word	0x20000598

08004e5c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004e60:	4802      	ldr	r0, [pc, #8]	; (8004e6c <TIM4_IRQHandler+0x10>)
 8004e62:	f002 fe81 	bl	8007b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004e66:	bf00      	nop
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	2000064c 	.word	0x2000064c

08004e70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004e74:	4802      	ldr	r0, [pc, #8]	; (8004e80 <USART2_IRQHandler+0x10>)
 8004e76:	f004 f92d 	bl	80090d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004e7a:	bf00      	nop
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20000868 	.word	0x20000868

08004e84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004e88:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004e8c:	f001 fbc8 	bl	8006620 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004e90:	bf00      	nop
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e98:	4802      	ldr	r0, [pc, #8]	; (8004ea4 <DMA2_Stream0_IRQHandler+0x10>)
 8004e9a:	f000 ff95 	bl	8005dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004e9e:	bf00      	nop
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	20000430 	.word	0x20000430

08004ea8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004eb0:	4a14      	ldr	r2, [pc, #80]	; (8004f04 <_sbrk+0x5c>)
 8004eb2:	4b15      	ldr	r3, [pc, #84]	; (8004f08 <_sbrk+0x60>)
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ebc:	4b13      	ldr	r3, [pc, #76]	; (8004f0c <_sbrk+0x64>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d102      	bne.n	8004eca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ec4:	4b11      	ldr	r3, [pc, #68]	; (8004f0c <_sbrk+0x64>)
 8004ec6:	4a12      	ldr	r2, [pc, #72]	; (8004f10 <_sbrk+0x68>)
 8004ec8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004eca:	4b10      	ldr	r3, [pc, #64]	; (8004f0c <_sbrk+0x64>)
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d207      	bcs.n	8004ee8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ed8:	f005 f94a 	bl	800a170 <__errno>
 8004edc:	4603      	mov	r3, r0
 8004ede:	220c      	movs	r2, #12
 8004ee0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee6:	e009      	b.n	8004efc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ee8:	4b08      	ldr	r3, [pc, #32]	; (8004f0c <_sbrk+0x64>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004eee:	4b07      	ldr	r3, [pc, #28]	; (8004f0c <_sbrk+0x64>)
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	4a05      	ldr	r2, [pc, #20]	; (8004f0c <_sbrk+0x64>)
 8004ef8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004efa:	68fb      	ldr	r3, [r7, #12]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3718      	adds	r7, #24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	20020000 	.word	0x20020000
 8004f08:	00000400 	.word	0x00000400
 8004f0c:	20001330 	.word	0x20001330
 8004f10:	20001348 	.word	0x20001348

08004f14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f18:	4b06      	ldr	r3, [pc, #24]	; (8004f34 <SystemInit+0x20>)
 8004f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1e:	4a05      	ldr	r2, [pc, #20]	; (8004f34 <SystemInit+0x20>)
 8004f20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f28:	bf00      	nop
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	e000ed00 	.word	0xe000ed00

08004f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004f38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004f3c:	480d      	ldr	r0, [pc, #52]	; (8004f74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004f3e:	490e      	ldr	r1, [pc, #56]	; (8004f78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004f40:	4a0e      	ldr	r2, [pc, #56]	; (8004f7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f44:	e002      	b.n	8004f4c <LoopCopyDataInit>

08004f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f4a:	3304      	adds	r3, #4

08004f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f50:	d3f9      	bcc.n	8004f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f52:	4a0b      	ldr	r2, [pc, #44]	; (8004f80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004f54:	4c0b      	ldr	r4, [pc, #44]	; (8004f84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f58:	e001      	b.n	8004f5e <LoopFillZerobss>

08004f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f5c:	3204      	adds	r2, #4

08004f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f60:	d3fb      	bcc.n	8004f5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004f62:	f7ff ffd7 	bl	8004f14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f66:	f005 f909 	bl	800a17c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f6a:	f7fd f8e5 	bl	8002138 <main>
  bx  lr    
 8004f6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004f70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f78:	200003c8 	.word	0x200003c8
  ldr r2, =_sidata
 8004f7c:	0800ca80 	.word	0x0800ca80
  ldr r2, =_sbss
 8004f80:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 8004f84:	20001348 	.word	0x20001348

08004f88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f88:	e7fe      	b.n	8004f88 <ADC_IRQHandler>
	...

08004f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f90:	4b0e      	ldr	r3, [pc, #56]	; (8004fcc <HAL_Init+0x40>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a0d      	ldr	r2, [pc, #52]	; (8004fcc <HAL_Init+0x40>)
 8004f96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f9c:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <HAL_Init+0x40>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a0a      	ldr	r2, [pc, #40]	; (8004fcc <HAL_Init+0x40>)
 8004fa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004fa8:	4b08      	ldr	r3, [pc, #32]	; (8004fcc <HAL_Init+0x40>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a07      	ldr	r2, [pc, #28]	; (8004fcc <HAL_Init+0x40>)
 8004fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fb4:	2003      	movs	r0, #3
 8004fb6:	f000 fd2d 	bl	8005a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004fba:	2000      	movs	r0, #0
 8004fbc:	f000 f808 	bl	8004fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004fc0:	f7ff fc84 	bl	80048cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	40023c00 	.word	0x40023c00

08004fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004fd8:	4b12      	ldr	r3, [pc, #72]	; (8005024 <HAL_InitTick+0x54>)
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	4b12      	ldr	r3, [pc, #72]	; (8005028 <HAL_InitTick+0x58>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fd45 	bl	8005a7e <HAL_SYSTICK_Config>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e00e      	b.n	800501c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b0f      	cmp	r3, #15
 8005002:	d80a      	bhi.n	800501a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005004:	2200      	movs	r2, #0
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	f04f 30ff 	mov.w	r0, #4294967295
 800500c:	f000 fd0d 	bl	8005a2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005010:	4a06      	ldr	r2, [pc, #24]	; (800502c <HAL_InitTick+0x5c>)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	e000      	b.n	800501c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
}
 800501c:	4618      	mov	r0, r3
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	20000358 	.word	0x20000358
 8005028:	20000360 	.word	0x20000360
 800502c:	2000035c 	.word	0x2000035c

08005030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005034:	4b06      	ldr	r3, [pc, #24]	; (8005050 <HAL_IncTick+0x20>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	461a      	mov	r2, r3
 800503a:	4b06      	ldr	r3, [pc, #24]	; (8005054 <HAL_IncTick+0x24>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4413      	add	r3, r2
 8005040:	4a04      	ldr	r2, [pc, #16]	; (8005054 <HAL_IncTick+0x24>)
 8005042:	6013      	str	r3, [r2, #0]
}
 8005044:	bf00      	nop
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	20000360 	.word	0x20000360
 8005054:	20001334 	.word	0x20001334

08005058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
  return uwTick;
 800505c:	4b03      	ldr	r3, [pc, #12]	; (800506c <HAL_GetTick+0x14>)
 800505e:	681b      	ldr	r3, [r3, #0]
}
 8005060:	4618      	mov	r0, r3
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	20001334 	.word	0x20001334

08005070 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e033      	b.n	80050ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	2b00      	cmp	r3, #0
 800508c:	d109      	bne.n	80050a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7ff fc44 	bl	800491c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	f003 0310 	and.w	r3, r3, #16
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d118      	bne.n	80050e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80050b6:	f023 0302 	bic.w	r3, r3, #2
 80050ba:	f043 0202 	orr.w	r2, r3, #2
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fa58 	bl	8005578 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	f023 0303 	bic.w	r3, r3, #3
 80050d6:	f043 0201 	orr.w	r2, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	641a      	str	r2, [r3, #64]	; 0x40
 80050de:	e001      	b.n	80050e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
	...

080050f8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_ADC_Start_DMA+0x1e>
 8005112:	2302      	movs	r3, #2
 8005114:	e0ce      	b.n	80052b4 <HAL_ADC_Start_DMA+0x1bc>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b01      	cmp	r3, #1
 800512a:	d018      	beq.n	800515e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689a      	ldr	r2, [r3, #8]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0201 	orr.w	r2, r2, #1
 800513a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800513c:	4b5f      	ldr	r3, [pc, #380]	; (80052bc <HAL_ADC_Start_DMA+0x1c4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a5f      	ldr	r2, [pc, #380]	; (80052c0 <HAL_ADC_Start_DMA+0x1c8>)
 8005142:	fba2 2303 	umull	r2, r3, r2, r3
 8005146:	0c9a      	lsrs	r2, r3, #18
 8005148:	4613      	mov	r3, r2
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	4413      	add	r3, r2
 800514e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005150:	e002      	b.n	8005158 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	3b01      	subs	r3, #1
 8005156:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1f9      	bne.n	8005152 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800516c:	d107      	bne.n	800517e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689a      	ldr	r2, [r3, #8]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800517c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b01      	cmp	r3, #1
 800518a:	f040 8086 	bne.w	800529a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005196:	f023 0301 	bic.w	r3, r3, #1
 800519a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d007      	beq.n	80051c0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80051b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051cc:	d106      	bne.n	80051dc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d2:	f023 0206 	bic.w	r2, r3, #6
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	645a      	str	r2, [r3, #68]	; 0x44
 80051da:	e002      	b.n	80051e2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80051ea:	4b36      	ldr	r3, [pc, #216]	; (80052c4 <HAL_ADC_Start_DMA+0x1cc>)
 80051ec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f2:	4a35      	ldr	r2, [pc, #212]	; (80052c8 <HAL_ADC_Start_DMA+0x1d0>)
 80051f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fa:	4a34      	ldr	r2, [pc, #208]	; (80052cc <HAL_ADC_Start_DMA+0x1d4>)
 80051fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005202:	4a33      	ldr	r2, [pc, #204]	; (80052d0 <HAL_ADC_Start_DMA+0x1d8>)
 8005204:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800520e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800521e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689a      	ldr	r2, [r3, #8]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800522e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	334c      	adds	r3, #76	; 0x4c
 800523a:	4619      	mov	r1, r3
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f000 fcd8 	bl	8005bf4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f003 031f 	and.w	r3, r3, #31
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10f      	bne.n	8005270 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d129      	bne.n	80052b2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800526c:	609a      	str	r2, [r3, #8]
 800526e:	e020      	b.n	80052b2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a17      	ldr	r2, [pc, #92]	; (80052d4 <HAL_ADC_Start_DMA+0x1dc>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d11b      	bne.n	80052b2 <HAL_ADC_Start_DMA+0x1ba>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d114      	bne.n	80052b2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689a      	ldr	r2, [r3, #8]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005296:	609a      	str	r2, [r3, #8]
 8005298:	e00b      	b.n	80052b2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	f043 0210 	orr.w	r2, r3, #16
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052aa:	f043 0201 	orr.w	r2, r3, #1
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	20000358 	.word	0x20000358
 80052c0:	431bde83 	.word	0x431bde83
 80052c4:	40012300 	.word	0x40012300
 80052c8:	08005771 	.word	0x08005771
 80052cc:	0800582b 	.word	0x0800582b
 80052d0:	08005847 	.word	0x08005847
 80052d4:	40012000 	.word	0x40012000

080052d8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005328:	2b01      	cmp	r3, #1
 800532a:	d101      	bne.n	8005330 <HAL_ADC_ConfigChannel+0x1c>
 800532c:	2302      	movs	r3, #2
 800532e:	e113      	b.n	8005558 <HAL_ADC_ConfigChannel+0x244>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b09      	cmp	r3, #9
 800533e:	d925      	bls.n	800538c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68d9      	ldr	r1, [r3, #12]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	b29b      	uxth	r3, r3
 800534c:	461a      	mov	r2, r3
 800534e:	4613      	mov	r3, r2
 8005350:	005b      	lsls	r3, r3, #1
 8005352:	4413      	add	r3, r2
 8005354:	3b1e      	subs	r3, #30
 8005356:	2207      	movs	r2, #7
 8005358:	fa02 f303 	lsl.w	r3, r2, r3
 800535c:	43da      	mvns	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	400a      	ands	r2, r1
 8005364:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68d9      	ldr	r1, [r3, #12]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	b29b      	uxth	r3, r3
 8005376:	4618      	mov	r0, r3
 8005378:	4603      	mov	r3, r0
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	4403      	add	r3, r0
 800537e:	3b1e      	subs	r3, #30
 8005380:	409a      	lsls	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	60da      	str	r2, [r3, #12]
 800538a:	e022      	b.n	80053d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6919      	ldr	r1, [r3, #16]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	b29b      	uxth	r3, r3
 8005398:	461a      	mov	r2, r3
 800539a:	4613      	mov	r3, r2
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	4413      	add	r3, r2
 80053a0:	2207      	movs	r2, #7
 80053a2:	fa02 f303 	lsl.w	r3, r2, r3
 80053a6:	43da      	mvns	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	400a      	ands	r2, r1
 80053ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6919      	ldr	r1, [r3, #16]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	689a      	ldr	r2, [r3, #8]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	b29b      	uxth	r3, r3
 80053c0:	4618      	mov	r0, r3
 80053c2:	4603      	mov	r3, r0
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	4403      	add	r3, r0
 80053c8:	409a      	lsls	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2b06      	cmp	r3, #6
 80053d8:	d824      	bhi.n	8005424 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	4613      	mov	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	3b05      	subs	r3, #5
 80053ec:	221f      	movs	r2, #31
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	43da      	mvns	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	400a      	ands	r2, r1
 80053fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	b29b      	uxth	r3, r3
 8005408:	4618      	mov	r0, r3
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	4613      	mov	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	3b05      	subs	r3, #5
 8005416:	fa00 f203 	lsl.w	r2, r0, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	635a      	str	r2, [r3, #52]	; 0x34
 8005422:	e04c      	b.n	80054be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	2b0c      	cmp	r3, #12
 800542a:	d824      	bhi.n	8005476 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	4613      	mov	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4413      	add	r3, r2
 800543c:	3b23      	subs	r3, #35	; 0x23
 800543e:	221f      	movs	r2, #31
 8005440:	fa02 f303 	lsl.w	r3, r2, r3
 8005444:	43da      	mvns	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	400a      	ands	r2, r1
 800544c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	b29b      	uxth	r3, r3
 800545a:	4618      	mov	r0, r3
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	4613      	mov	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	3b23      	subs	r3, #35	; 0x23
 8005468:	fa00 f203 	lsl.w	r2, r0, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	631a      	str	r2, [r3, #48]	; 0x30
 8005474:	e023      	b.n	80054be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	4613      	mov	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	3b41      	subs	r3, #65	; 0x41
 8005488:	221f      	movs	r2, #31
 800548a:	fa02 f303 	lsl.w	r3, r2, r3
 800548e:	43da      	mvns	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	400a      	ands	r2, r1
 8005496:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	4618      	mov	r0, r3
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	4613      	mov	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4413      	add	r3, r2
 80054b0:	3b41      	subs	r3, #65	; 0x41
 80054b2:	fa00 f203 	lsl.w	r2, r0, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80054be:	4b29      	ldr	r3, [pc, #164]	; (8005564 <HAL_ADC_ConfigChannel+0x250>)
 80054c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a28      	ldr	r2, [pc, #160]	; (8005568 <HAL_ADC_ConfigChannel+0x254>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d10f      	bne.n	80054ec <HAL_ADC_ConfigChannel+0x1d8>
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b12      	cmp	r3, #18
 80054d2:	d10b      	bne.n	80054ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a1d      	ldr	r2, [pc, #116]	; (8005568 <HAL_ADC_ConfigChannel+0x254>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d12b      	bne.n	800554e <HAL_ADC_ConfigChannel+0x23a>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a1c      	ldr	r2, [pc, #112]	; (800556c <HAL_ADC_ConfigChannel+0x258>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d003      	beq.n	8005508 <HAL_ADC_ConfigChannel+0x1f4>
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b11      	cmp	r3, #17
 8005506:	d122      	bne.n	800554e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a11      	ldr	r2, [pc, #68]	; (800556c <HAL_ADC_ConfigChannel+0x258>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d111      	bne.n	800554e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800552a:	4b11      	ldr	r3, [pc, #68]	; (8005570 <HAL_ADC_ConfigChannel+0x25c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a11      	ldr	r2, [pc, #68]	; (8005574 <HAL_ADC_ConfigChannel+0x260>)
 8005530:	fba2 2303 	umull	r2, r3, r2, r3
 8005534:	0c9a      	lsrs	r2, r3, #18
 8005536:	4613      	mov	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005540:	e002      	b.n	8005548 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	3b01      	subs	r3, #1
 8005546:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1f9      	bne.n	8005542 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	40012300 	.word	0x40012300
 8005568:	40012000 	.word	0x40012000
 800556c:	10000012 	.word	0x10000012
 8005570:	20000358 	.word	0x20000358
 8005574:	431bde83 	.word	0x431bde83

08005578 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005580:	4b79      	ldr	r3, [pc, #484]	; (8005768 <ADC_Init+0x1f0>)
 8005582:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	431a      	orrs	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6859      	ldr	r1, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	021a      	lsls	r2, r3, #8
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80055d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6859      	ldr	r1, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689a      	ldr	r2, [r3, #8]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6899      	ldr	r1, [r3, #8]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68da      	ldr	r2, [r3, #12]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560a:	4a58      	ldr	r2, [pc, #352]	; (800576c <ADC_Init+0x1f4>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d022      	beq.n	8005656 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689a      	ldr	r2, [r3, #8]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800561e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6899      	ldr	r1, [r3, #8]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005640:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6899      	ldr	r1, [r3, #8]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	609a      	str	r2, [r3, #8]
 8005654:	e00f      	b.n	8005676 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005664:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005674:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0202 	bic.w	r2, r2, #2
 8005684:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6899      	ldr	r1, [r3, #8]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	7e1b      	ldrb	r3, [r3, #24]
 8005690:	005a      	lsls	r2, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d01b      	beq.n	80056dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80056c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6859      	ldr	r1, [r3, #4]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	3b01      	subs	r3, #1
 80056d0:	035a      	lsls	r2, r3, #13
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	605a      	str	r2, [r3, #4]
 80056da:	e007      	b.n	80056ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80056fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	3b01      	subs	r3, #1
 8005708:	051a      	lsls	r2, r3, #20
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005720:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6899      	ldr	r1, [r3, #8]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800572e:	025a      	lsls	r2, r3, #9
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005746:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6899      	ldr	r1, [r3, #8]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	029a      	lsls	r2, r3, #10
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	609a      	str	r2, [r3, #8]
}
 800575c:	bf00      	nop
 800575e:	3714      	adds	r7, #20
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	40012300 	.word	0x40012300
 800576c:	0f000001 	.word	0x0f000001

08005770 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005786:	2b00      	cmp	r3, #0
 8005788:	d13c      	bne.n	8005804 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d12b      	bne.n	80057fc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d127      	bne.n	80057fc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d006      	beq.n	80057c8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d119      	bne.n	80057fc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f022 0220 	bic.w	r2, r2, #32
 80057d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d105      	bne.n	80057fc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f4:	f043 0201 	orr.w	r2, r3, #1
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f7ff fd6b 	bl	80052d8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005802:	e00e      	b.n	8005822 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005808:	f003 0310 	and.w	r3, r3, #16
 800580c:	2b00      	cmp	r3, #0
 800580e:	d003      	beq.n	8005818 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f7ff fd75 	bl	8005300 <HAL_ADC_ErrorCallback>
}
 8005816:	e004      	b.n	8005822 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	4798      	blx	r3
}
 8005822:	bf00      	nop
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b084      	sub	sp, #16
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005836:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f7ff fd57 	bl	80052ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800583e:	bf00      	nop
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b084      	sub	sp, #16
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005852:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2240      	movs	r2, #64	; 0x40
 8005858:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585e:	f043 0204 	orr.w	r2, r3, #4
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f7ff fd4a 	bl	8005300 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800586c:	bf00      	nop
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <__NVIC_SetPriorityGrouping>:
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005884:	4b0c      	ldr	r3, [pc, #48]	; (80058b8 <__NVIC_SetPriorityGrouping+0x44>)
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005890:	4013      	ands	r3, r2
 8005892:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800589c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80058a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058a6:	4a04      	ldr	r2, [pc, #16]	; (80058b8 <__NVIC_SetPriorityGrouping+0x44>)
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	60d3      	str	r3, [r2, #12]
}
 80058ac:	bf00      	nop
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	e000ed00 	.word	0xe000ed00

080058bc <__NVIC_GetPriorityGrouping>:
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058c0:	4b04      	ldr	r3, [pc, #16]	; (80058d4 <__NVIC_GetPriorityGrouping+0x18>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	0a1b      	lsrs	r3, r3, #8
 80058c6:	f003 0307 	and.w	r3, r3, #7
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	e000ed00 	.word	0xe000ed00

080058d8 <__NVIC_EnableIRQ>:
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	4603      	mov	r3, r0
 80058e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	db0b      	blt.n	8005902 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058ea:	79fb      	ldrb	r3, [r7, #7]
 80058ec:	f003 021f 	and.w	r2, r3, #31
 80058f0:	4907      	ldr	r1, [pc, #28]	; (8005910 <__NVIC_EnableIRQ+0x38>)
 80058f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058f6:	095b      	lsrs	r3, r3, #5
 80058f8:	2001      	movs	r0, #1
 80058fa:	fa00 f202 	lsl.w	r2, r0, r2
 80058fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	e000e100 	.word	0xe000e100

08005914 <__NVIC_SetPriority>:
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	4603      	mov	r3, r0
 800591c:	6039      	str	r1, [r7, #0]
 800591e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005924:	2b00      	cmp	r3, #0
 8005926:	db0a      	blt.n	800593e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	b2da      	uxtb	r2, r3
 800592c:	490c      	ldr	r1, [pc, #48]	; (8005960 <__NVIC_SetPriority+0x4c>)
 800592e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005932:	0112      	lsls	r2, r2, #4
 8005934:	b2d2      	uxtb	r2, r2
 8005936:	440b      	add	r3, r1
 8005938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800593c:	e00a      	b.n	8005954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	b2da      	uxtb	r2, r3
 8005942:	4908      	ldr	r1, [pc, #32]	; (8005964 <__NVIC_SetPriority+0x50>)
 8005944:	79fb      	ldrb	r3, [r7, #7]
 8005946:	f003 030f 	and.w	r3, r3, #15
 800594a:	3b04      	subs	r3, #4
 800594c:	0112      	lsls	r2, r2, #4
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	440b      	add	r3, r1
 8005952:	761a      	strb	r2, [r3, #24]
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	e000e100 	.word	0xe000e100
 8005964:	e000ed00 	.word	0xe000ed00

08005968 <NVIC_EncodePriority>:
{
 8005968:	b480      	push	{r7}
 800596a:	b089      	sub	sp, #36	; 0x24
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f1c3 0307 	rsb	r3, r3, #7
 8005982:	2b04      	cmp	r3, #4
 8005984:	bf28      	it	cs
 8005986:	2304      	movcs	r3, #4
 8005988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	3304      	adds	r3, #4
 800598e:	2b06      	cmp	r3, #6
 8005990:	d902      	bls.n	8005998 <NVIC_EncodePriority+0x30>
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	3b03      	subs	r3, #3
 8005996:	e000      	b.n	800599a <NVIC_EncodePriority+0x32>
 8005998:	2300      	movs	r3, #0
 800599a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800599c:	f04f 32ff 	mov.w	r2, #4294967295
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	fa02 f303 	lsl.w	r3, r2, r3
 80059a6:	43da      	mvns	r2, r3
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	401a      	ands	r2, r3
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059b0:	f04f 31ff 	mov.w	r1, #4294967295
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	fa01 f303 	lsl.w	r3, r1, r3
 80059ba:	43d9      	mvns	r1, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059c0:	4313      	orrs	r3, r2
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3724      	adds	r7, #36	; 0x24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
	...

080059d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3b01      	subs	r3, #1
 80059dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059e0:	d301      	bcc.n	80059e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059e2:	2301      	movs	r3, #1
 80059e4:	e00f      	b.n	8005a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059e6:	4a0a      	ldr	r2, [pc, #40]	; (8005a10 <SysTick_Config+0x40>)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3b01      	subs	r3, #1
 80059ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059ee:	210f      	movs	r1, #15
 80059f0:	f04f 30ff 	mov.w	r0, #4294967295
 80059f4:	f7ff ff8e 	bl	8005914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059f8:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <SysTick_Config+0x40>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059fe:	4b04      	ldr	r3, [pc, #16]	; (8005a10 <SysTick_Config+0x40>)
 8005a00:	2207      	movs	r2, #7
 8005a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	e000e010 	.word	0xe000e010

08005a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff ff29 	bl	8005874 <__NVIC_SetPriorityGrouping>
}
 8005a22:	bf00      	nop
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b086      	sub	sp, #24
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	4603      	mov	r3, r0
 8005a32:	60b9      	str	r1, [r7, #8]
 8005a34:	607a      	str	r2, [r7, #4]
 8005a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a3c:	f7ff ff3e 	bl	80058bc <__NVIC_GetPriorityGrouping>
 8005a40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	68b9      	ldr	r1, [r7, #8]
 8005a46:	6978      	ldr	r0, [r7, #20]
 8005a48:	f7ff ff8e 	bl	8005968 <NVIC_EncodePriority>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a52:	4611      	mov	r1, r2
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff ff5d 	bl	8005914 <__NVIC_SetPriority>
}
 8005a5a:	bf00      	nop
 8005a5c:	3718      	adds	r7, #24
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b082      	sub	sp, #8
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	4603      	mov	r3, r0
 8005a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7ff ff31 	bl	80058d8 <__NVIC_EnableIRQ>
}
 8005a76:	bf00      	nop
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b082      	sub	sp, #8
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7ff ffa2 	bl	80059d0 <SysTick_Config>
 8005a8c:	4603      	mov	r3, r0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
	...

08005a98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005aa4:	f7ff fad8 	bl	8005058 <HAL_GetTick>
 8005aa8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e099      	b.n	8005be8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0201 	bic.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ad4:	e00f      	b.n	8005af6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ad6:	f7ff fabf 	bl	8005058 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b05      	cmp	r3, #5
 8005ae2:	d908      	bls.n	8005af6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2203      	movs	r2, #3
 8005aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e078      	b.n	8005be8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1e8      	bne.n	8005ad6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	4b38      	ldr	r3, [pc, #224]	; (8005bf0 <HAL_DMA_Init+0x158>)
 8005b10:	4013      	ands	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d107      	bne.n	8005b60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f023 0307 	bic.w	r3, r3, #7
 8005b76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	2b04      	cmp	r3, #4
 8005b88:	d117      	bne.n	8005bba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00e      	beq.n	8005bba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 fb0d 	bl	80061bc <DMA_CheckFifoParam>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d008      	beq.n	8005bba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2240      	movs	r2, #64	; 0x40
 8005bac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e016      	b.n	8005be8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fac4 	bl	8006150 <DMA_CalcBaseAndBitshift>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd0:	223f      	movs	r2, #63	; 0x3f
 8005bd2:	409a      	lsls	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	f010803f 	.word	0xf010803f

08005bf4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
 8005c00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d101      	bne.n	8005c1a <HAL_DMA_Start_IT+0x26>
 8005c16:	2302      	movs	r3, #2
 8005c18:	e040      	b.n	8005c9c <HAL_DMA_Start_IT+0xa8>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d12f      	bne.n	8005c8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2202      	movs	r2, #2
 8005c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 fa56 	bl	80060f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c4c:	223f      	movs	r2, #63	; 0x3f
 8005c4e:	409a      	lsls	r2, r3
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0216 	orr.w	r2, r2, #22
 8005c62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d007      	beq.n	8005c7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0208 	orr.w	r2, r2, #8
 8005c7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0201 	orr.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	e005      	b.n	8005c9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005c96:	2302      	movs	r3, #2
 8005c98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005cb2:	f7ff f9d1 	bl	8005058 <HAL_GetTick>
 8005cb6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d008      	beq.n	8005cd6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2280      	movs	r2, #128	; 0x80
 8005cc8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e052      	b.n	8005d7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0216 	bic.w	r2, r2, #22
 8005ce4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	695a      	ldr	r2, [r3, #20]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cf4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d103      	bne.n	8005d06 <HAL_DMA_Abort+0x62>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d007      	beq.n	8005d16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0208 	bic.w	r2, r2, #8
 8005d14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0201 	bic.w	r2, r2, #1
 8005d24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d26:	e013      	b.n	8005d50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d28:	f7ff f996 	bl	8005058 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b05      	cmp	r3, #5
 8005d34:	d90c      	bls.n	8005d50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2203      	movs	r2, #3
 8005d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e015      	b.n	8005d7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1e4      	bne.n	8005d28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d62:	223f      	movs	r2, #63	; 0x3f
 8005d64:	409a      	lsls	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d004      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2280      	movs	r2, #128	; 0x80
 8005d9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e00c      	b.n	8005dbc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2205      	movs	r2, #5
 8005da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0201 	bic.w	r2, r2, #1
 8005db8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005dd4:	4b8e      	ldr	r3, [pc, #568]	; (8006010 <HAL_DMA_IRQHandler+0x248>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a8e      	ldr	r2, [pc, #568]	; (8006014 <HAL_DMA_IRQHandler+0x24c>)
 8005dda:	fba2 2303 	umull	r2, r3, r2, r3
 8005dde:	0a9b      	lsrs	r3, r3, #10
 8005de0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df2:	2208      	movs	r2, #8
 8005df4:	409a      	lsls	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d01a      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d013      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 0204 	bic.w	r2, r2, #4
 8005e1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e20:	2208      	movs	r2, #8
 8005e22:	409a      	lsls	r2, r3
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2c:	f043 0201 	orr.w	r2, r3, #1
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e38:	2201      	movs	r2, #1
 8005e3a:	409a      	lsls	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d012      	beq.n	8005e6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00b      	beq.n	8005e6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e56:	2201      	movs	r2, #1
 8005e58:	409a      	lsls	r2, r3
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e62:	f043 0202 	orr.w	r2, r3, #2
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e6e:	2204      	movs	r2, #4
 8005e70:	409a      	lsls	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4013      	ands	r3, r2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d012      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00b      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e8c:	2204      	movs	r2, #4
 8005e8e:	409a      	lsls	r2, r3
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e98:	f043 0204 	orr.w	r2, r3, #4
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ea4:	2210      	movs	r2, #16
 8005ea6:	409a      	lsls	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d043      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0308 	and.w	r3, r3, #8
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d03c      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ec2:	2210      	movs	r2, #16
 8005ec4:	409a      	lsls	r2, r3
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d018      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d108      	bne.n	8005ef8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d024      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	4798      	blx	r3
 8005ef6:	e01f      	b.n	8005f38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01b      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	4798      	blx	r3
 8005f08:	e016      	b.n	8005f38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d107      	bne.n	8005f28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 0208 	bic.w	r2, r2, #8
 8005f26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	409a      	lsls	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4013      	ands	r3, r2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 808f 	beq.w	8006068 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0310 	and.w	r3, r3, #16
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 8087 	beq.w	8006068 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f5e:	2220      	movs	r2, #32
 8005f60:	409a      	lsls	r2, r3
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b05      	cmp	r3, #5
 8005f70:	d136      	bne.n	8005fe0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 0216 	bic.w	r2, r2, #22
 8005f80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	695a      	ldr	r2, [r3, #20]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d103      	bne.n	8005fa2 <HAL_DMA_IRQHandler+0x1da>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d007      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 0208 	bic.w	r2, r2, #8
 8005fb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fb6:	223f      	movs	r2, #63	; 0x3f
 8005fb8:	409a      	lsls	r2, r3
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d07e      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	4798      	blx	r3
        }
        return;
 8005fde:	e079      	b.n	80060d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d01d      	beq.n	800602a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10d      	bne.n	8006018 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006000:	2b00      	cmp	r3, #0
 8006002:	d031      	beq.n	8006068 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	4798      	blx	r3
 800600c:	e02c      	b.n	8006068 <HAL_DMA_IRQHandler+0x2a0>
 800600e:	bf00      	nop
 8006010:	20000358 	.word	0x20000358
 8006014:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601c:	2b00      	cmp	r3, #0
 800601e:	d023      	beq.n	8006068 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	4798      	blx	r3
 8006028:	e01e      	b.n	8006068 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10f      	bne.n	8006058 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 0210 	bic.w	r2, r2, #16
 8006046:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606c:	2b00      	cmp	r3, #0
 800606e:	d032      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	d022      	beq.n	80060c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2205      	movs	r2, #5
 8006080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f022 0201 	bic.w	r2, r2, #1
 8006092:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	3301      	adds	r3, #1
 8006098:	60bb      	str	r3, [r7, #8]
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	429a      	cmp	r2, r3
 800609e:	d307      	bcc.n	80060b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1f2      	bne.n	8006094 <HAL_DMA_IRQHandler+0x2cc>
 80060ae:	e000      	b.n	80060b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80060b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d005      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	4798      	blx	r3
 80060d2:	e000      	b.n	80060d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80060d4:	bf00      	nop
    }
  }
}
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006110:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	2b40      	cmp	r3, #64	; 0x40
 8006120:	d108      	bne.n	8006134 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006132:	e007      	b.n	8006144 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	60da      	str	r2, [r3, #12]
}
 8006144:	bf00      	nop
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	b2db      	uxtb	r3, r3
 800615e:	3b10      	subs	r3, #16
 8006160:	4a14      	ldr	r2, [pc, #80]	; (80061b4 <DMA_CalcBaseAndBitshift+0x64>)
 8006162:	fba2 2303 	umull	r2, r3, r2, r3
 8006166:	091b      	lsrs	r3, r3, #4
 8006168:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800616a:	4a13      	ldr	r2, [pc, #76]	; (80061b8 <DMA_CalcBaseAndBitshift+0x68>)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4413      	add	r3, r2
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2b03      	cmp	r3, #3
 800617c:	d909      	bls.n	8006192 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006186:	f023 0303 	bic.w	r3, r3, #3
 800618a:	1d1a      	adds	r2, r3, #4
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	659a      	str	r2, [r3, #88]	; 0x58
 8006190:	e007      	b.n	80061a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800619a:	f023 0303 	bic.w	r3, r3, #3
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	aaaaaaab 	.word	0xaaaaaaab
 80061b8:	0800c858 	.word	0x0800c858

080061bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061c4:	2300      	movs	r3, #0
 80061c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d11f      	bne.n	8006216 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b03      	cmp	r3, #3
 80061da:	d856      	bhi.n	800628a <DMA_CheckFifoParam+0xce>
 80061dc:	a201      	add	r2, pc, #4	; (adr r2, 80061e4 <DMA_CheckFifoParam+0x28>)
 80061de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e2:	bf00      	nop
 80061e4:	080061f5 	.word	0x080061f5
 80061e8:	08006207 	.word	0x08006207
 80061ec:	080061f5 	.word	0x080061f5
 80061f0:	0800628b 	.word	0x0800628b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d046      	beq.n	800628e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006204:	e043      	b.n	800628e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800620e:	d140      	bne.n	8006292 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006214:	e03d      	b.n	8006292 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800621e:	d121      	bne.n	8006264 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2b03      	cmp	r3, #3
 8006224:	d837      	bhi.n	8006296 <DMA_CheckFifoParam+0xda>
 8006226:	a201      	add	r2, pc, #4	; (adr r2, 800622c <DMA_CheckFifoParam+0x70>)
 8006228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622c:	0800623d 	.word	0x0800623d
 8006230:	08006243 	.word	0x08006243
 8006234:	0800623d 	.word	0x0800623d
 8006238:	08006255 	.word	0x08006255
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	73fb      	strb	r3, [r7, #15]
      break;
 8006240:	e030      	b.n	80062a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006246:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d025      	beq.n	800629a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006252:	e022      	b.n	800629a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006258:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800625c:	d11f      	bne.n	800629e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006262:	e01c      	b.n	800629e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b02      	cmp	r3, #2
 8006268:	d903      	bls.n	8006272 <DMA_CheckFifoParam+0xb6>
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2b03      	cmp	r3, #3
 800626e:	d003      	beq.n	8006278 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006270:	e018      	b.n	80062a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	73fb      	strb	r3, [r7, #15]
      break;
 8006276:	e015      	b.n	80062a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00e      	beq.n	80062a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	73fb      	strb	r3, [r7, #15]
      break;
 8006288:	e00b      	b.n	80062a2 <DMA_CheckFifoParam+0xe6>
      break;
 800628a:	bf00      	nop
 800628c:	e00a      	b.n	80062a4 <DMA_CheckFifoParam+0xe8>
      break;
 800628e:	bf00      	nop
 8006290:	e008      	b.n	80062a4 <DMA_CheckFifoParam+0xe8>
      break;
 8006292:	bf00      	nop
 8006294:	e006      	b.n	80062a4 <DMA_CheckFifoParam+0xe8>
      break;
 8006296:	bf00      	nop
 8006298:	e004      	b.n	80062a4 <DMA_CheckFifoParam+0xe8>
      break;
 800629a:	bf00      	nop
 800629c:	e002      	b.n	80062a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800629e:	bf00      	nop
 80062a0:	e000      	b.n	80062a4 <DMA_CheckFifoParam+0xe8>
      break;
 80062a2:	bf00      	nop
    }
  } 
  
  return status; 
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop

080062b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b089      	sub	sp, #36	; 0x24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80062be:	2300      	movs	r3, #0
 80062c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062ca:	2300      	movs	r3, #0
 80062cc:	61fb      	str	r3, [r7, #28]
 80062ce:	e159      	b.n	8006584 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80062d0:	2201      	movs	r2, #1
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	fa02 f303 	lsl.w	r3, r2, r3
 80062d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4013      	ands	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	f040 8148 	bne.w	800657e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f003 0303 	and.w	r3, r3, #3
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d005      	beq.n	8006306 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006302:	2b02      	cmp	r3, #2
 8006304:	d130      	bne.n	8006368 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	005b      	lsls	r3, r3, #1
 8006310:	2203      	movs	r2, #3
 8006312:	fa02 f303 	lsl.w	r3, r2, r3
 8006316:	43db      	mvns	r3, r3
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	4013      	ands	r3, r2
 800631c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	fa02 f303 	lsl.w	r3, r2, r3
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	4313      	orrs	r3, r2
 800632e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800633c:	2201      	movs	r2, #1
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	fa02 f303 	lsl.w	r3, r2, r3
 8006344:	43db      	mvns	r3, r3
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	4013      	ands	r3, r2
 800634a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	091b      	lsrs	r3, r3, #4
 8006352:	f003 0201 	and.w	r2, r3, #1
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	fa02 f303 	lsl.w	r3, r2, r3
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	4313      	orrs	r3, r2
 8006360:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f003 0303 	and.w	r3, r3, #3
 8006370:	2b03      	cmp	r3, #3
 8006372:	d017      	beq.n	80063a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	2203      	movs	r2, #3
 8006380:	fa02 f303 	lsl.w	r3, r2, r3
 8006384:	43db      	mvns	r3, r3
 8006386:	69ba      	ldr	r2, [r7, #24]
 8006388:	4013      	ands	r3, r2
 800638a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	fa02 f303 	lsl.w	r3, r2, r3
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	4313      	orrs	r3, r2
 800639c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f003 0303 	and.w	r3, r3, #3
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d123      	bne.n	80063f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	08da      	lsrs	r2, r3, #3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	3208      	adds	r2, #8
 80063b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	f003 0307 	and.w	r3, r3, #7
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	220f      	movs	r2, #15
 80063c8:	fa02 f303 	lsl.w	r3, r2, r3
 80063cc:	43db      	mvns	r3, r3
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	4013      	ands	r3, r2
 80063d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	691a      	ldr	r2, [r3, #16]
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	f003 0307 	and.w	r3, r3, #7
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	fa02 f303 	lsl.w	r3, r2, r3
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	08da      	lsrs	r2, r3, #3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	3208      	adds	r2, #8
 80063f2:	69b9      	ldr	r1, [r7, #24]
 80063f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	2203      	movs	r2, #3
 8006404:	fa02 f303 	lsl.w	r3, r2, r3
 8006408:	43db      	mvns	r3, r3
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	4013      	ands	r3, r2
 800640e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f003 0203 	and.w	r2, r3, #3
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	005b      	lsls	r3, r3, #1
 800641c:	fa02 f303 	lsl.w	r3, r2, r3
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	4313      	orrs	r3, r2
 8006424:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 80a2 	beq.w	800657e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800643a:	2300      	movs	r3, #0
 800643c:	60fb      	str	r3, [r7, #12]
 800643e:	4b57      	ldr	r3, [pc, #348]	; (800659c <HAL_GPIO_Init+0x2e8>)
 8006440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006442:	4a56      	ldr	r2, [pc, #344]	; (800659c <HAL_GPIO_Init+0x2e8>)
 8006444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006448:	6453      	str	r3, [r2, #68]	; 0x44
 800644a:	4b54      	ldr	r3, [pc, #336]	; (800659c <HAL_GPIO_Init+0x2e8>)
 800644c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006456:	4a52      	ldr	r2, [pc, #328]	; (80065a0 <HAL_GPIO_Init+0x2ec>)
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	089b      	lsrs	r3, r3, #2
 800645c:	3302      	adds	r3, #2
 800645e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006462:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	f003 0303 	and.w	r3, r3, #3
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	220f      	movs	r2, #15
 800646e:	fa02 f303 	lsl.w	r3, r2, r3
 8006472:	43db      	mvns	r3, r3
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	4013      	ands	r3, r2
 8006478:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a49      	ldr	r2, [pc, #292]	; (80065a4 <HAL_GPIO_Init+0x2f0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d019      	beq.n	80064b6 <HAL_GPIO_Init+0x202>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a48      	ldr	r2, [pc, #288]	; (80065a8 <HAL_GPIO_Init+0x2f4>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d013      	beq.n	80064b2 <HAL_GPIO_Init+0x1fe>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a47      	ldr	r2, [pc, #284]	; (80065ac <HAL_GPIO_Init+0x2f8>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d00d      	beq.n	80064ae <HAL_GPIO_Init+0x1fa>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a46      	ldr	r2, [pc, #280]	; (80065b0 <HAL_GPIO_Init+0x2fc>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d007      	beq.n	80064aa <HAL_GPIO_Init+0x1f6>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a45      	ldr	r2, [pc, #276]	; (80065b4 <HAL_GPIO_Init+0x300>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d101      	bne.n	80064a6 <HAL_GPIO_Init+0x1f2>
 80064a2:	2304      	movs	r3, #4
 80064a4:	e008      	b.n	80064b8 <HAL_GPIO_Init+0x204>
 80064a6:	2307      	movs	r3, #7
 80064a8:	e006      	b.n	80064b8 <HAL_GPIO_Init+0x204>
 80064aa:	2303      	movs	r3, #3
 80064ac:	e004      	b.n	80064b8 <HAL_GPIO_Init+0x204>
 80064ae:	2302      	movs	r3, #2
 80064b0:	e002      	b.n	80064b8 <HAL_GPIO_Init+0x204>
 80064b2:	2301      	movs	r3, #1
 80064b4:	e000      	b.n	80064b8 <HAL_GPIO_Init+0x204>
 80064b6:	2300      	movs	r3, #0
 80064b8:	69fa      	ldr	r2, [r7, #28]
 80064ba:	f002 0203 	and.w	r2, r2, #3
 80064be:	0092      	lsls	r2, r2, #2
 80064c0:	4093      	lsls	r3, r2
 80064c2:	69ba      	ldr	r2, [r7, #24]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80064c8:	4935      	ldr	r1, [pc, #212]	; (80065a0 <HAL_GPIO_Init+0x2ec>)
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	089b      	lsrs	r3, r3, #2
 80064ce:	3302      	adds	r3, #2
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80064d6:	4b38      	ldr	r3, [pc, #224]	; (80065b8 <HAL_GPIO_Init+0x304>)
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	43db      	mvns	r3, r3
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	4013      	ands	r3, r2
 80064e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80064f2:	69ba      	ldr	r2, [r7, #24]
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064fa:	4a2f      	ldr	r2, [pc, #188]	; (80065b8 <HAL_GPIO_Init+0x304>)
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006500:	4b2d      	ldr	r3, [pc, #180]	; (80065b8 <HAL_GPIO_Init+0x304>)
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	43db      	mvns	r3, r3
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	4013      	ands	r3, r2
 800650e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	4313      	orrs	r3, r2
 8006522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006524:	4a24      	ldr	r2, [pc, #144]	; (80065b8 <HAL_GPIO_Init+0x304>)
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800652a:	4b23      	ldr	r3, [pc, #140]	; (80065b8 <HAL_GPIO_Init+0x304>)
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	43db      	mvns	r3, r3
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	4013      	ands	r3, r2
 8006538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	4313      	orrs	r3, r2
 800654c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800654e:	4a1a      	ldr	r2, [pc, #104]	; (80065b8 <HAL_GPIO_Init+0x304>)
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006554:	4b18      	ldr	r3, [pc, #96]	; (80065b8 <HAL_GPIO_Init+0x304>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	43db      	mvns	r3, r3
 800655e:	69ba      	ldr	r2, [r7, #24]
 8006560:	4013      	ands	r3, r2
 8006562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	4313      	orrs	r3, r2
 8006576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006578:	4a0f      	ldr	r2, [pc, #60]	; (80065b8 <HAL_GPIO_Init+0x304>)
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	3301      	adds	r3, #1
 8006582:	61fb      	str	r3, [r7, #28]
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	2b0f      	cmp	r3, #15
 8006588:	f67f aea2 	bls.w	80062d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800658c:	bf00      	nop
 800658e:	bf00      	nop
 8006590:	3724      	adds	r7, #36	; 0x24
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	40023800 	.word	0x40023800
 80065a0:	40013800 	.word	0x40013800
 80065a4:	40020000 	.word	0x40020000
 80065a8:	40020400 	.word	0x40020400
 80065ac:	40020800 	.word	0x40020800
 80065b0:	40020c00 	.word	0x40020c00
 80065b4:	40021000 	.word	0x40021000
 80065b8:	40013c00 	.word	0x40013c00

080065bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	691a      	ldr	r2, [r3, #16]
 80065cc:	887b      	ldrh	r3, [r7, #2]
 80065ce:	4013      	ands	r3, r2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80065d4:	2301      	movs	r3, #1
 80065d6:	73fb      	strb	r3, [r7, #15]
 80065d8:	e001      	b.n	80065de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80065da:	2300      	movs	r3, #0
 80065dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80065de:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	460b      	mov	r3, r1
 80065f6:	807b      	strh	r3, [r7, #2]
 80065f8:	4613      	mov	r3, r2
 80065fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80065fc:	787b      	ldrb	r3, [r7, #1]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006602:	887a      	ldrh	r2, [r7, #2]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006608:	e003      	b.n	8006612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800660a:	887b      	ldrh	r3, [r7, #2]
 800660c:	041a      	lsls	r2, r3, #16
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	619a      	str	r2, [r3, #24]
}
 8006612:	bf00      	nop
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
	...

08006620 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	4603      	mov	r3, r0
 8006628:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800662a:	4b08      	ldr	r3, [pc, #32]	; (800664c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800662c:	695a      	ldr	r2, [r3, #20]
 800662e:	88fb      	ldrh	r3, [r7, #6]
 8006630:	4013      	ands	r3, r2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d006      	beq.n	8006644 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006636:	4a05      	ldr	r2, [pc, #20]	; (800664c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006638:	88fb      	ldrh	r3, [r7, #6]
 800663a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800663c:	88fb      	ldrh	r3, [r7, #6]
 800663e:	4618      	mov	r0, r3
 8006640:	f000 f806 	bl	8006650 <HAL_GPIO_EXTI_Callback>
  }
}
 8006644:	bf00      	nop
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	40013c00 	.word	0x40013c00

08006650 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	4603      	mov	r3, r0
 8006658:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800665a:	bf00      	nop
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
	...

08006668 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e12b      	b.n	80068d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d106      	bne.n	8006694 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7fe f9d8 	bl	8004a44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2224      	movs	r2, #36	; 0x24
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 0201 	bic.w	r2, r2, #1
 80066aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80066cc:	f000 fd80 	bl	80071d0 <HAL_RCC_GetPCLK1Freq>
 80066d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	4a81      	ldr	r2, [pc, #516]	; (80068dc <HAL_I2C_Init+0x274>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d807      	bhi.n	80066ec <HAL_I2C_Init+0x84>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4a80      	ldr	r2, [pc, #512]	; (80068e0 <HAL_I2C_Init+0x278>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	bf94      	ite	ls
 80066e4:	2301      	movls	r3, #1
 80066e6:	2300      	movhi	r3, #0
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	e006      	b.n	80066fa <HAL_I2C_Init+0x92>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4a7d      	ldr	r2, [pc, #500]	; (80068e4 <HAL_I2C_Init+0x27c>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	bf94      	ite	ls
 80066f4:	2301      	movls	r3, #1
 80066f6:	2300      	movhi	r3, #0
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e0e7      	b.n	80068d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	4a78      	ldr	r2, [pc, #480]	; (80068e8 <HAL_I2C_Init+0x280>)
 8006706:	fba2 2303 	umull	r2, r3, r2, r3
 800670a:	0c9b      	lsrs	r3, r3, #18
 800670c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	430a      	orrs	r2, r1
 8006720:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	4a6a      	ldr	r2, [pc, #424]	; (80068dc <HAL_I2C_Init+0x274>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d802      	bhi.n	800673c <HAL_I2C_Init+0xd4>
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	3301      	adds	r3, #1
 800673a:	e009      	b.n	8006750 <HAL_I2C_Init+0xe8>
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006742:	fb02 f303 	mul.w	r3, r2, r3
 8006746:	4a69      	ldr	r2, [pc, #420]	; (80068ec <HAL_I2C_Init+0x284>)
 8006748:	fba2 2303 	umull	r2, r3, r2, r3
 800674c:	099b      	lsrs	r3, r3, #6
 800674e:	3301      	adds	r3, #1
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	6812      	ldr	r2, [r2, #0]
 8006754:	430b      	orrs	r3, r1
 8006756:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006762:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	495c      	ldr	r1, [pc, #368]	; (80068dc <HAL_I2C_Init+0x274>)
 800676c:	428b      	cmp	r3, r1
 800676e:	d819      	bhi.n	80067a4 <HAL_I2C_Init+0x13c>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	1e59      	subs	r1, r3, #1
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	fbb1 f3f3 	udiv	r3, r1, r3
 800677e:	1c59      	adds	r1, r3, #1
 8006780:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006784:	400b      	ands	r3, r1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <HAL_I2C_Init+0x138>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	1e59      	subs	r1, r3, #1
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	fbb1 f3f3 	udiv	r3, r1, r3
 8006798:	3301      	adds	r3, #1
 800679a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800679e:	e051      	b.n	8006844 <HAL_I2C_Init+0x1dc>
 80067a0:	2304      	movs	r3, #4
 80067a2:	e04f      	b.n	8006844 <HAL_I2C_Init+0x1dc>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d111      	bne.n	80067d0 <HAL_I2C_Init+0x168>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	1e58      	subs	r0, r3, #1
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6859      	ldr	r1, [r3, #4]
 80067b4:	460b      	mov	r3, r1
 80067b6:	005b      	lsls	r3, r3, #1
 80067b8:	440b      	add	r3, r1
 80067ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80067be:	3301      	adds	r3, #1
 80067c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	bf0c      	ite	eq
 80067c8:	2301      	moveq	r3, #1
 80067ca:	2300      	movne	r3, #0
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	e012      	b.n	80067f6 <HAL_I2C_Init+0x18e>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	1e58      	subs	r0, r3, #1
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6859      	ldr	r1, [r3, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	440b      	add	r3, r1
 80067de:	0099      	lsls	r1, r3, #2
 80067e0:	440b      	add	r3, r1
 80067e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80067e6:	3301      	adds	r3, #1
 80067e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	bf0c      	ite	eq
 80067f0:	2301      	moveq	r3, #1
 80067f2:	2300      	movne	r3, #0
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <HAL_I2C_Init+0x196>
 80067fa:	2301      	movs	r3, #1
 80067fc:	e022      	b.n	8006844 <HAL_I2C_Init+0x1dc>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10e      	bne.n	8006824 <HAL_I2C_Init+0x1bc>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	1e58      	subs	r0, r3, #1
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6859      	ldr	r1, [r3, #4]
 800680e:	460b      	mov	r3, r1
 8006810:	005b      	lsls	r3, r3, #1
 8006812:	440b      	add	r3, r1
 8006814:	fbb0 f3f3 	udiv	r3, r0, r3
 8006818:	3301      	adds	r3, #1
 800681a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800681e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006822:	e00f      	b.n	8006844 <HAL_I2C_Init+0x1dc>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	1e58      	subs	r0, r3, #1
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6859      	ldr	r1, [r3, #4]
 800682c:	460b      	mov	r3, r1
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	440b      	add	r3, r1
 8006832:	0099      	lsls	r1, r3, #2
 8006834:	440b      	add	r3, r1
 8006836:	fbb0 f3f3 	udiv	r3, r0, r3
 800683a:	3301      	adds	r3, #1
 800683c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006840:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006844:	6879      	ldr	r1, [r7, #4]
 8006846:	6809      	ldr	r1, [r1, #0]
 8006848:	4313      	orrs	r3, r2
 800684a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	69da      	ldr	r2, [r3, #28]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	431a      	orrs	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006872:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	6911      	ldr	r1, [r2, #16]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	68d2      	ldr	r2, [r2, #12]
 800687e:	4311      	orrs	r1, r2
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	6812      	ldr	r2, [r2, #0]
 8006884:	430b      	orrs	r3, r1
 8006886:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	695a      	ldr	r2, [r3, #20]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	431a      	orrs	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f042 0201 	orr.w	r2, r2, #1
 80068b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2220      	movs	r2, #32
 80068be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	000186a0 	.word	0x000186a0
 80068e0:	001e847f 	.word	0x001e847f
 80068e4:	003d08ff 	.word	0x003d08ff
 80068e8:	431bde83 	.word	0x431bde83
 80068ec:	10624dd3 	.word	0x10624dd3

080068f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e267      	b.n	8006dd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d075      	beq.n	80069fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800690e:	4b88      	ldr	r3, [pc, #544]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f003 030c 	and.w	r3, r3, #12
 8006916:	2b04      	cmp	r3, #4
 8006918:	d00c      	beq.n	8006934 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800691a:	4b85      	ldr	r3, [pc, #532]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006922:	2b08      	cmp	r3, #8
 8006924:	d112      	bne.n	800694c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006926:	4b82      	ldr	r3, [pc, #520]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800692e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006932:	d10b      	bne.n	800694c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006934:	4b7e      	ldr	r3, [pc, #504]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d05b      	beq.n	80069f8 <HAL_RCC_OscConfig+0x108>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d157      	bne.n	80069f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e242      	b.n	8006dd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006954:	d106      	bne.n	8006964 <HAL_RCC_OscConfig+0x74>
 8006956:	4b76      	ldr	r3, [pc, #472]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a75      	ldr	r2, [pc, #468]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 800695c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006960:	6013      	str	r3, [r2, #0]
 8006962:	e01d      	b.n	80069a0 <HAL_RCC_OscConfig+0xb0>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800696c:	d10c      	bne.n	8006988 <HAL_RCC_OscConfig+0x98>
 800696e:	4b70      	ldr	r3, [pc, #448]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a6f      	ldr	r2, [pc, #444]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 8006974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006978:	6013      	str	r3, [r2, #0]
 800697a:	4b6d      	ldr	r3, [pc, #436]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a6c      	ldr	r2, [pc, #432]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 8006980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006984:	6013      	str	r3, [r2, #0]
 8006986:	e00b      	b.n	80069a0 <HAL_RCC_OscConfig+0xb0>
 8006988:	4b69      	ldr	r3, [pc, #420]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a68      	ldr	r2, [pc, #416]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 800698e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006992:	6013      	str	r3, [r2, #0]
 8006994:	4b66      	ldr	r3, [pc, #408]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a65      	ldr	r2, [pc, #404]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 800699a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800699e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d013      	beq.n	80069d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069a8:	f7fe fb56 	bl	8005058 <HAL_GetTick>
 80069ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ae:	e008      	b.n	80069c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069b0:	f7fe fb52 	bl	8005058 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b64      	cmp	r3, #100	; 0x64
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e207      	b.n	8006dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069c2:	4b5b      	ldr	r3, [pc, #364]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d0f0      	beq.n	80069b0 <HAL_RCC_OscConfig+0xc0>
 80069ce:	e014      	b.n	80069fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069d0:	f7fe fb42 	bl	8005058 <HAL_GetTick>
 80069d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069d6:	e008      	b.n	80069ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069d8:	f7fe fb3e 	bl	8005058 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b64      	cmp	r3, #100	; 0x64
 80069e4:	d901      	bls.n	80069ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e1f3      	b.n	8006dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069ea:	4b51      	ldr	r3, [pc, #324]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1f0      	bne.n	80069d8 <HAL_RCC_OscConfig+0xe8>
 80069f6:	e000      	b.n	80069fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d063      	beq.n	8006ace <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a06:	4b4a      	ldr	r3, [pc, #296]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f003 030c 	and.w	r3, r3, #12
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00b      	beq.n	8006a2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a12:	4b47      	ldr	r3, [pc, #284]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a1a:	2b08      	cmp	r3, #8
 8006a1c:	d11c      	bne.n	8006a58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a1e:	4b44      	ldr	r3, [pc, #272]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d116      	bne.n	8006a58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a2a:	4b41      	ldr	r3, [pc, #260]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d005      	beq.n	8006a42 <HAL_RCC_OscConfig+0x152>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d001      	beq.n	8006a42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e1c7      	b.n	8006dd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a42:	4b3b      	ldr	r3, [pc, #236]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	4937      	ldr	r1, [pc, #220]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a56:	e03a      	b.n	8006ace <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d020      	beq.n	8006aa2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a60:	4b34      	ldr	r3, [pc, #208]	; (8006b34 <HAL_RCC_OscConfig+0x244>)
 8006a62:	2201      	movs	r2, #1
 8006a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a66:	f7fe faf7 	bl	8005058 <HAL_GetTick>
 8006a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a6c:	e008      	b.n	8006a80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a6e:	f7fe faf3 	bl	8005058 <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d901      	bls.n	8006a80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e1a8      	b.n	8006dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a80:	4b2b      	ldr	r3, [pc, #172]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0302 	and.w	r3, r3, #2
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d0f0      	beq.n	8006a6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a8c:	4b28      	ldr	r3, [pc, #160]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	00db      	lsls	r3, r3, #3
 8006a9a:	4925      	ldr	r1, [pc, #148]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	600b      	str	r3, [r1, #0]
 8006aa0:	e015      	b.n	8006ace <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006aa2:	4b24      	ldr	r3, [pc, #144]	; (8006b34 <HAL_RCC_OscConfig+0x244>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa8:	f7fe fad6 	bl	8005058 <HAL_GetTick>
 8006aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aae:	e008      	b.n	8006ac2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ab0:	f7fe fad2 	bl	8005058 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d901      	bls.n	8006ac2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e187      	b.n	8006dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ac2:	4b1b      	ldr	r3, [pc, #108]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1f0      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0308 	and.w	r3, r3, #8
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d036      	beq.n	8006b48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d016      	beq.n	8006b10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ae2:	4b15      	ldr	r3, [pc, #84]	; (8006b38 <HAL_RCC_OscConfig+0x248>)
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ae8:	f7fe fab6 	bl	8005058 <HAL_GetTick>
 8006aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aee:	e008      	b.n	8006b02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006af0:	f7fe fab2 	bl	8005058 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d901      	bls.n	8006b02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e167      	b.n	8006dd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b02:	4b0b      	ldr	r3, [pc, #44]	; (8006b30 <HAL_RCC_OscConfig+0x240>)
 8006b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b06:	f003 0302 	and.w	r3, r3, #2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0f0      	beq.n	8006af0 <HAL_RCC_OscConfig+0x200>
 8006b0e:	e01b      	b.n	8006b48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b10:	4b09      	ldr	r3, [pc, #36]	; (8006b38 <HAL_RCC_OscConfig+0x248>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b16:	f7fe fa9f 	bl	8005058 <HAL_GetTick>
 8006b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b1c:	e00e      	b.n	8006b3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b1e:	f7fe fa9b 	bl	8005058 <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d907      	bls.n	8006b3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e150      	b.n	8006dd2 <HAL_RCC_OscConfig+0x4e2>
 8006b30:	40023800 	.word	0x40023800
 8006b34:	42470000 	.word	0x42470000
 8006b38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b3c:	4b88      	ldr	r3, [pc, #544]	; (8006d60 <HAL_RCC_OscConfig+0x470>)
 8006b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1ea      	bne.n	8006b1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0304 	and.w	r3, r3, #4
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f000 8097 	beq.w	8006c84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b56:	2300      	movs	r3, #0
 8006b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b5a:	4b81      	ldr	r3, [pc, #516]	; (8006d60 <HAL_RCC_OscConfig+0x470>)
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10f      	bne.n	8006b86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b66:	2300      	movs	r3, #0
 8006b68:	60bb      	str	r3, [r7, #8]
 8006b6a:	4b7d      	ldr	r3, [pc, #500]	; (8006d60 <HAL_RCC_OscConfig+0x470>)
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	4a7c      	ldr	r2, [pc, #496]	; (8006d60 <HAL_RCC_OscConfig+0x470>)
 8006b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b74:	6413      	str	r3, [r2, #64]	; 0x40
 8006b76:	4b7a      	ldr	r3, [pc, #488]	; (8006d60 <HAL_RCC_OscConfig+0x470>)
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b7e:	60bb      	str	r3, [r7, #8]
 8006b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b82:	2301      	movs	r3, #1
 8006b84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b86:	4b77      	ldr	r3, [pc, #476]	; (8006d64 <HAL_RCC_OscConfig+0x474>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d118      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b92:	4b74      	ldr	r3, [pc, #464]	; (8006d64 <HAL_RCC_OscConfig+0x474>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a73      	ldr	r2, [pc, #460]	; (8006d64 <HAL_RCC_OscConfig+0x474>)
 8006b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b9e:	f7fe fa5b 	bl	8005058 <HAL_GetTick>
 8006ba2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ba4:	e008      	b.n	8006bb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ba6:	f7fe fa57 	bl	8005058 <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d901      	bls.n	8006bb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e10c      	b.n	8006dd2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bb8:	4b6a      	ldr	r3, [pc, #424]	; (8006d64 <HAL_RCC_OscConfig+0x474>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d0f0      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d106      	bne.n	8006bda <HAL_RCC_OscConfig+0x2ea>
 8006bcc:	4b64      	ldr	r3, [pc, #400]	; (8006d60 <HAL_RCC_OscConfig+0x470>)
 8006bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd0:	4a63      	ldr	r2, [pc, #396]	; (8006d60 <HAL_RCC_OscConfig+0x470>)
 8006bd2:	f043 0301 	orr.w	r3, r3, #1
 8006bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8006bd8:	e01c      	b.n	8006c14 <HAL_RCC_OscConfig+0x324>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	2b05      	cmp	r3, #5
 8006be0:	d10c      	bne.n	8006bfc <HAL_RCC_OscConfig+0x30c>
 8006be2:	4b5f      	ldr	r3, [pc, #380]	; (8006d60 <HAL_RCC_OscConfig+0x470>)
 8006be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be6:	4a5e      	ldr	r2, [pc, #376]	; (8006d60 <HAL_RCC_OscConfig+0x470>)
 8006be8:	f043 0304 	orr.w	r3, r3, #4
 8006bec:	6713      	str	r3, [r2, #112]	; 0x70
 8006bee:	4b5c      	ldr	r3, [pc, #368]	; (8006d60 <HAL_RCC_OscConfig+0x470>)
 8006bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf2:	4a5b      	ldr	r2, [pc, #364]	; (8006d60 <HAL_RCC_OscConfig+0x470>)
 8006bf4:	f043 0301 	orr.w	r3, r3, #1
 8006bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8006bfa:	e00b      	b.n	8006c14 <HAL_RCC_OscConfig+0x324>
 8006bfc:	4b58      	ldr	r3, [pc, #352]	; (8006d60 <HAL_RCC_OscConfig+0x470>)
 8006bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c00:	4a57      	ldr	r2, [pc, #348]	; (8006d60 <HAL_RCC_OscConfig+0x470>)
 8006c02:	f023 0301 	bic.w	r3, r3, #1
 8006c06:	6713      	str	r3, [r2, #112]	; 0x70
 8006c08:	4b55      	ldr	r3, [pc, #340]	; (8006d60 <HAL_RCC_OscConfig+0x470>)
 8006c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c0c:	4a54      	ldr	r2, [pc, #336]	; (8006d60 <HAL_RCC_OscConfig+0x470>)
 8006c0e:	f023 0304 	bic.w	r3, r3, #4
 8006c12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d015      	beq.n	8006c48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c1c:	f7fe fa1c 	bl	8005058 <HAL_GetTick>
 8006c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c22:	e00a      	b.n	8006c3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c24:	f7fe fa18 	bl	8005058 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d901      	bls.n	8006c3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e0cb      	b.n	8006dd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c3a:	4b49      	ldr	r3, [pc, #292]	; (8006d60 <HAL_RCC_OscConfig+0x470>)
 8006c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d0ee      	beq.n	8006c24 <HAL_RCC_OscConfig+0x334>
 8006c46:	e014      	b.n	8006c72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c48:	f7fe fa06 	bl	8005058 <HAL_GetTick>
 8006c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c4e:	e00a      	b.n	8006c66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c50:	f7fe fa02 	bl	8005058 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e0b5      	b.n	8006dd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c66:	4b3e      	ldr	r3, [pc, #248]	; (8006d60 <HAL_RCC_OscConfig+0x470>)
 8006c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1ee      	bne.n	8006c50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c72:	7dfb      	ldrb	r3, [r7, #23]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d105      	bne.n	8006c84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c78:	4b39      	ldr	r3, [pc, #228]	; (8006d60 <HAL_RCC_OscConfig+0x470>)
 8006c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7c:	4a38      	ldr	r2, [pc, #224]	; (8006d60 <HAL_RCC_OscConfig+0x470>)
 8006c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 80a1 	beq.w	8006dd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c8e:	4b34      	ldr	r3, [pc, #208]	; (8006d60 <HAL_RCC_OscConfig+0x470>)
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f003 030c 	and.w	r3, r3, #12
 8006c96:	2b08      	cmp	r3, #8
 8006c98:	d05c      	beq.n	8006d54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d141      	bne.n	8006d26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ca2:	4b31      	ldr	r3, [pc, #196]	; (8006d68 <HAL_RCC_OscConfig+0x478>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ca8:	f7fe f9d6 	bl	8005058 <HAL_GetTick>
 8006cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cae:	e008      	b.n	8006cc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cb0:	f7fe f9d2 	bl	8005058 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d901      	bls.n	8006cc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e087      	b.n	8006dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cc2:	4b27      	ldr	r3, [pc, #156]	; (8006d60 <HAL_RCC_OscConfig+0x470>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1f0      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	69da      	ldr	r2, [r3, #28]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cdc:	019b      	lsls	r3, r3, #6
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce4:	085b      	lsrs	r3, r3, #1
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	041b      	lsls	r3, r3, #16
 8006cea:	431a      	orrs	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf0:	061b      	lsls	r3, r3, #24
 8006cf2:	491b      	ldr	r1, [pc, #108]	; (8006d60 <HAL_RCC_OscConfig+0x470>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cf8:	4b1b      	ldr	r3, [pc, #108]	; (8006d68 <HAL_RCC_OscConfig+0x478>)
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cfe:	f7fe f9ab 	bl	8005058 <HAL_GetTick>
 8006d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d04:	e008      	b.n	8006d18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d06:	f7fe f9a7 	bl	8005058 <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d901      	bls.n	8006d18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e05c      	b.n	8006dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d18:	4b11      	ldr	r3, [pc, #68]	; (8006d60 <HAL_RCC_OscConfig+0x470>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d0f0      	beq.n	8006d06 <HAL_RCC_OscConfig+0x416>
 8006d24:	e054      	b.n	8006dd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d26:	4b10      	ldr	r3, [pc, #64]	; (8006d68 <HAL_RCC_OscConfig+0x478>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d2c:	f7fe f994 	bl	8005058 <HAL_GetTick>
 8006d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d32:	e008      	b.n	8006d46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d34:	f7fe f990 	bl	8005058 <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d901      	bls.n	8006d46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e045      	b.n	8006dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d46:	4b06      	ldr	r3, [pc, #24]	; (8006d60 <HAL_RCC_OscConfig+0x470>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1f0      	bne.n	8006d34 <HAL_RCC_OscConfig+0x444>
 8006d52:	e03d      	b.n	8006dd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d107      	bne.n	8006d6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e038      	b.n	8006dd2 <HAL_RCC_OscConfig+0x4e2>
 8006d60:	40023800 	.word	0x40023800
 8006d64:	40007000 	.word	0x40007000
 8006d68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d6c:	4b1b      	ldr	r3, [pc, #108]	; (8006ddc <HAL_RCC_OscConfig+0x4ec>)
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d028      	beq.n	8006dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d121      	bne.n	8006dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d11a      	bne.n	8006dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006da2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d111      	bne.n	8006dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db2:	085b      	lsrs	r3, r3, #1
 8006db4:	3b01      	subs	r3, #1
 8006db6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d107      	bne.n	8006dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d001      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e000      	b.n	8006dd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3718      	adds	r7, #24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	40023800 	.word	0x40023800

08006de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e0cc      	b.n	8006f8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006df4:	4b68      	ldr	r3, [pc, #416]	; (8006f98 <HAL_RCC_ClockConfig+0x1b8>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0307 	and.w	r3, r3, #7
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d90c      	bls.n	8006e1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e02:	4b65      	ldr	r3, [pc, #404]	; (8006f98 <HAL_RCC_ClockConfig+0x1b8>)
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	b2d2      	uxtb	r2, r2
 8006e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e0a:	4b63      	ldr	r3, [pc, #396]	; (8006f98 <HAL_RCC_ClockConfig+0x1b8>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0307 	and.w	r3, r3, #7
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d001      	beq.n	8006e1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e0b8      	b.n	8006f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0302 	and.w	r3, r3, #2
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d020      	beq.n	8006e6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0304 	and.w	r3, r3, #4
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d005      	beq.n	8006e40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e34:	4b59      	ldr	r3, [pc, #356]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	4a58      	ldr	r2, [pc, #352]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006e3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0308 	and.w	r3, r3, #8
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d005      	beq.n	8006e58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e4c:	4b53      	ldr	r3, [pc, #332]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	4a52      	ldr	r2, [pc, #328]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006e52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e58:	4b50      	ldr	r3, [pc, #320]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	494d      	ldr	r1, [pc, #308]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d044      	beq.n	8006f00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d107      	bne.n	8006e8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e7e:	4b47      	ldr	r3, [pc, #284]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d119      	bne.n	8006ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e07f      	b.n	8006f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d003      	beq.n	8006e9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	d107      	bne.n	8006eae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e9e:	4b3f      	ldr	r3, [pc, #252]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d109      	bne.n	8006ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e06f      	b.n	8006f8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eae:	4b3b      	ldr	r3, [pc, #236]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e067      	b.n	8006f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ebe:	4b37      	ldr	r3, [pc, #220]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f023 0203 	bic.w	r2, r3, #3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	4934      	ldr	r1, [pc, #208]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ed0:	f7fe f8c2 	bl	8005058 <HAL_GetTick>
 8006ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ed6:	e00a      	b.n	8006eee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ed8:	f7fe f8be 	bl	8005058 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d901      	bls.n	8006eee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e04f      	b.n	8006f8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eee:	4b2b      	ldr	r3, [pc, #172]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f003 020c 	and.w	r2, r3, #12
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d1eb      	bne.n	8006ed8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f00:	4b25      	ldr	r3, [pc, #148]	; (8006f98 <HAL_RCC_ClockConfig+0x1b8>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0307 	and.w	r3, r3, #7
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d20c      	bcs.n	8006f28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f0e:	4b22      	ldr	r3, [pc, #136]	; (8006f98 <HAL_RCC_ClockConfig+0x1b8>)
 8006f10:	683a      	ldr	r2, [r7, #0]
 8006f12:	b2d2      	uxtb	r2, r2
 8006f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f16:	4b20      	ldr	r3, [pc, #128]	; (8006f98 <HAL_RCC_ClockConfig+0x1b8>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0307 	and.w	r3, r3, #7
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d001      	beq.n	8006f28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e032      	b.n	8006f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0304 	and.w	r3, r3, #4
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d008      	beq.n	8006f46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f34:	4b19      	ldr	r3, [pc, #100]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	4916      	ldr	r1, [pc, #88]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0308 	and.w	r3, r3, #8
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d009      	beq.n	8006f66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f52:	4b12      	ldr	r3, [pc, #72]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	00db      	lsls	r3, r3, #3
 8006f60:	490e      	ldr	r1, [pc, #56]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f66:	f000 f821 	bl	8006fac <HAL_RCC_GetSysClockFreq>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	4b0b      	ldr	r3, [pc, #44]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	091b      	lsrs	r3, r3, #4
 8006f72:	f003 030f 	and.w	r3, r3, #15
 8006f76:	490a      	ldr	r1, [pc, #40]	; (8006fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8006f78:	5ccb      	ldrb	r3, [r1, r3]
 8006f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f7e:	4a09      	ldr	r2, [pc, #36]	; (8006fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f82:	4b09      	ldr	r3, [pc, #36]	; (8006fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fe f822 	bl	8004fd0 <HAL_InitTick>

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	40023c00 	.word	0x40023c00
 8006f9c:	40023800 	.word	0x40023800
 8006fa0:	0800c840 	.word	0x0800c840
 8006fa4:	20000358 	.word	0x20000358
 8006fa8:	2000035c 	.word	0x2000035c

08006fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fb0:	b094      	sub	sp, #80	; 0x50
 8006fb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	647b      	str	r3, [r7, #68]	; 0x44
 8006fb8:	2300      	movs	r3, #0
 8006fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fc4:	4b79      	ldr	r3, [pc, #484]	; (80071ac <HAL_RCC_GetSysClockFreq+0x200>)
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f003 030c 	and.w	r3, r3, #12
 8006fcc:	2b08      	cmp	r3, #8
 8006fce:	d00d      	beq.n	8006fec <HAL_RCC_GetSysClockFreq+0x40>
 8006fd0:	2b08      	cmp	r3, #8
 8006fd2:	f200 80e1 	bhi.w	8007198 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <HAL_RCC_GetSysClockFreq+0x34>
 8006fda:	2b04      	cmp	r3, #4
 8006fdc:	d003      	beq.n	8006fe6 <HAL_RCC_GetSysClockFreq+0x3a>
 8006fde:	e0db      	b.n	8007198 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006fe0:	4b73      	ldr	r3, [pc, #460]	; (80071b0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006fe2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006fe4:	e0db      	b.n	800719e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006fe6:	4b73      	ldr	r3, [pc, #460]	; (80071b4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006fe8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006fea:	e0d8      	b.n	800719e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fec:	4b6f      	ldr	r3, [pc, #444]	; (80071ac <HAL_RCC_GetSysClockFreq+0x200>)
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ff4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ff6:	4b6d      	ldr	r3, [pc, #436]	; (80071ac <HAL_RCC_GetSysClockFreq+0x200>)
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d063      	beq.n	80070ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007002:	4b6a      	ldr	r3, [pc, #424]	; (80071ac <HAL_RCC_GetSysClockFreq+0x200>)
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	099b      	lsrs	r3, r3, #6
 8007008:	2200      	movs	r2, #0
 800700a:	63bb      	str	r3, [r7, #56]	; 0x38
 800700c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800700e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007014:	633b      	str	r3, [r7, #48]	; 0x30
 8007016:	2300      	movs	r3, #0
 8007018:	637b      	str	r3, [r7, #52]	; 0x34
 800701a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800701e:	4622      	mov	r2, r4
 8007020:	462b      	mov	r3, r5
 8007022:	f04f 0000 	mov.w	r0, #0
 8007026:	f04f 0100 	mov.w	r1, #0
 800702a:	0159      	lsls	r1, r3, #5
 800702c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007030:	0150      	lsls	r0, r2, #5
 8007032:	4602      	mov	r2, r0
 8007034:	460b      	mov	r3, r1
 8007036:	4621      	mov	r1, r4
 8007038:	1a51      	subs	r1, r2, r1
 800703a:	6139      	str	r1, [r7, #16]
 800703c:	4629      	mov	r1, r5
 800703e:	eb63 0301 	sbc.w	r3, r3, r1
 8007042:	617b      	str	r3, [r7, #20]
 8007044:	f04f 0200 	mov.w	r2, #0
 8007048:	f04f 0300 	mov.w	r3, #0
 800704c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007050:	4659      	mov	r1, fp
 8007052:	018b      	lsls	r3, r1, #6
 8007054:	4651      	mov	r1, sl
 8007056:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800705a:	4651      	mov	r1, sl
 800705c:	018a      	lsls	r2, r1, #6
 800705e:	4651      	mov	r1, sl
 8007060:	ebb2 0801 	subs.w	r8, r2, r1
 8007064:	4659      	mov	r1, fp
 8007066:	eb63 0901 	sbc.w	r9, r3, r1
 800706a:	f04f 0200 	mov.w	r2, #0
 800706e:	f04f 0300 	mov.w	r3, #0
 8007072:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007076:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800707a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800707e:	4690      	mov	r8, r2
 8007080:	4699      	mov	r9, r3
 8007082:	4623      	mov	r3, r4
 8007084:	eb18 0303 	adds.w	r3, r8, r3
 8007088:	60bb      	str	r3, [r7, #8]
 800708a:	462b      	mov	r3, r5
 800708c:	eb49 0303 	adc.w	r3, r9, r3
 8007090:	60fb      	str	r3, [r7, #12]
 8007092:	f04f 0200 	mov.w	r2, #0
 8007096:	f04f 0300 	mov.w	r3, #0
 800709a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800709e:	4629      	mov	r1, r5
 80070a0:	024b      	lsls	r3, r1, #9
 80070a2:	4621      	mov	r1, r4
 80070a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80070a8:	4621      	mov	r1, r4
 80070aa:	024a      	lsls	r2, r1, #9
 80070ac:	4610      	mov	r0, r2
 80070ae:	4619      	mov	r1, r3
 80070b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070b2:	2200      	movs	r2, #0
 80070b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80070b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80070bc:	f7f9 fd70 	bl	8000ba0 <__aeabi_uldivmod>
 80070c0:	4602      	mov	r2, r0
 80070c2:	460b      	mov	r3, r1
 80070c4:	4613      	mov	r3, r2
 80070c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070c8:	e058      	b.n	800717c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070ca:	4b38      	ldr	r3, [pc, #224]	; (80071ac <HAL_RCC_GetSysClockFreq+0x200>)
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	099b      	lsrs	r3, r3, #6
 80070d0:	2200      	movs	r2, #0
 80070d2:	4618      	mov	r0, r3
 80070d4:	4611      	mov	r1, r2
 80070d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80070da:	623b      	str	r3, [r7, #32]
 80070dc:	2300      	movs	r3, #0
 80070de:	627b      	str	r3, [r7, #36]	; 0x24
 80070e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80070e4:	4642      	mov	r2, r8
 80070e6:	464b      	mov	r3, r9
 80070e8:	f04f 0000 	mov.w	r0, #0
 80070ec:	f04f 0100 	mov.w	r1, #0
 80070f0:	0159      	lsls	r1, r3, #5
 80070f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070f6:	0150      	lsls	r0, r2, #5
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	4641      	mov	r1, r8
 80070fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8007102:	4649      	mov	r1, r9
 8007104:	eb63 0b01 	sbc.w	fp, r3, r1
 8007108:	f04f 0200 	mov.w	r2, #0
 800710c:	f04f 0300 	mov.w	r3, #0
 8007110:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007114:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007118:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800711c:	ebb2 040a 	subs.w	r4, r2, sl
 8007120:	eb63 050b 	sbc.w	r5, r3, fp
 8007124:	f04f 0200 	mov.w	r2, #0
 8007128:	f04f 0300 	mov.w	r3, #0
 800712c:	00eb      	lsls	r3, r5, #3
 800712e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007132:	00e2      	lsls	r2, r4, #3
 8007134:	4614      	mov	r4, r2
 8007136:	461d      	mov	r5, r3
 8007138:	4643      	mov	r3, r8
 800713a:	18e3      	adds	r3, r4, r3
 800713c:	603b      	str	r3, [r7, #0]
 800713e:	464b      	mov	r3, r9
 8007140:	eb45 0303 	adc.w	r3, r5, r3
 8007144:	607b      	str	r3, [r7, #4]
 8007146:	f04f 0200 	mov.w	r2, #0
 800714a:	f04f 0300 	mov.w	r3, #0
 800714e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007152:	4629      	mov	r1, r5
 8007154:	028b      	lsls	r3, r1, #10
 8007156:	4621      	mov	r1, r4
 8007158:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800715c:	4621      	mov	r1, r4
 800715e:	028a      	lsls	r2, r1, #10
 8007160:	4610      	mov	r0, r2
 8007162:	4619      	mov	r1, r3
 8007164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007166:	2200      	movs	r2, #0
 8007168:	61bb      	str	r3, [r7, #24]
 800716a:	61fa      	str	r2, [r7, #28]
 800716c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007170:	f7f9 fd16 	bl	8000ba0 <__aeabi_uldivmod>
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	4613      	mov	r3, r2
 800717a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800717c:	4b0b      	ldr	r3, [pc, #44]	; (80071ac <HAL_RCC_GetSysClockFreq+0x200>)
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	0c1b      	lsrs	r3, r3, #16
 8007182:	f003 0303 	and.w	r3, r3, #3
 8007186:	3301      	adds	r3, #1
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800718c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800718e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007190:	fbb2 f3f3 	udiv	r3, r2, r3
 8007194:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007196:	e002      	b.n	800719e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007198:	4b05      	ldr	r3, [pc, #20]	; (80071b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800719a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800719c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800719e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3750      	adds	r7, #80	; 0x50
 80071a4:	46bd      	mov	sp, r7
 80071a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071aa:	bf00      	nop
 80071ac:	40023800 	.word	0x40023800
 80071b0:	00f42400 	.word	0x00f42400
 80071b4:	007a1200 	.word	0x007a1200

080071b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071b8:	b480      	push	{r7}
 80071ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071bc:	4b03      	ldr	r3, [pc, #12]	; (80071cc <HAL_RCC_GetHCLKFreq+0x14>)
 80071be:	681b      	ldr	r3, [r3, #0]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	20000358 	.word	0x20000358

080071d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80071d4:	f7ff fff0 	bl	80071b8 <HAL_RCC_GetHCLKFreq>
 80071d8:	4602      	mov	r2, r0
 80071da:	4b05      	ldr	r3, [pc, #20]	; (80071f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	0a9b      	lsrs	r3, r3, #10
 80071e0:	f003 0307 	and.w	r3, r3, #7
 80071e4:	4903      	ldr	r1, [pc, #12]	; (80071f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071e6:	5ccb      	ldrb	r3, [r1, r3]
 80071e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	40023800 	.word	0x40023800
 80071f4:	0800c850 	.word	0x0800c850

080071f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80071fc:	f7ff ffdc 	bl	80071b8 <HAL_RCC_GetHCLKFreq>
 8007200:	4602      	mov	r2, r0
 8007202:	4b05      	ldr	r3, [pc, #20]	; (8007218 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	0b5b      	lsrs	r3, r3, #13
 8007208:	f003 0307 	and.w	r3, r3, #7
 800720c:	4903      	ldr	r1, [pc, #12]	; (800721c <HAL_RCC_GetPCLK2Freq+0x24>)
 800720e:	5ccb      	ldrb	r3, [r1, r3]
 8007210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007214:	4618      	mov	r0, r3
 8007216:	bd80      	pop	{r7, pc}
 8007218:	40023800 	.word	0x40023800
 800721c:	0800c850 	.word	0x0800c850

08007220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e04c      	b.n	80072cc <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b00      	cmp	r3, #0
 800723c:	d111      	bne.n	8007262 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f001 fc0c 	bl	8008a64 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007250:	2b00      	cmp	r3, #0
 8007252:	d102      	bne.n	800725a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a1f      	ldr	r2, [pc, #124]	; (80072d4 <HAL_TIM_Base_Init+0xb4>)
 8007258:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2202      	movs	r2, #2
 8007266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	3304      	adds	r3, #4
 8007272:	4619      	mov	r1, r3
 8007274:	4610      	mov	r0, r2
 8007276:	f001 f929 	bl	80084cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	08004b61 	.word	0x08004b61

080072d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d001      	beq.n	80072f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e03c      	b.n	800736a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a1e      	ldr	r2, [pc, #120]	; (8007378 <HAL_TIM_Base_Start+0xa0>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d018      	beq.n	8007334 <HAL_TIM_Base_Start+0x5c>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800730a:	d013      	beq.n	8007334 <HAL_TIM_Base_Start+0x5c>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a1a      	ldr	r2, [pc, #104]	; (800737c <HAL_TIM_Base_Start+0xa4>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d00e      	beq.n	8007334 <HAL_TIM_Base_Start+0x5c>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a19      	ldr	r2, [pc, #100]	; (8007380 <HAL_TIM_Base_Start+0xa8>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d009      	beq.n	8007334 <HAL_TIM_Base_Start+0x5c>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a17      	ldr	r2, [pc, #92]	; (8007384 <HAL_TIM_Base_Start+0xac>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d004      	beq.n	8007334 <HAL_TIM_Base_Start+0x5c>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a16      	ldr	r2, [pc, #88]	; (8007388 <HAL_TIM_Base_Start+0xb0>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d111      	bne.n	8007358 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f003 0307 	and.w	r3, r3, #7
 800733e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2b06      	cmp	r3, #6
 8007344:	d010      	beq.n	8007368 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f042 0201 	orr.w	r2, r2, #1
 8007354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007356:	e007      	b.n	8007368 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f042 0201 	orr.w	r2, r2, #1
 8007366:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	40010000 	.word	0x40010000
 800737c:	40000400 	.word	0x40000400
 8007380:	40000800 	.word	0x40000800
 8007384:	40000c00 	.word	0x40000c00
 8007388:	40014000 	.word	0x40014000

0800738c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b01      	cmp	r3, #1
 800739e:	d001      	beq.n	80073a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e044      	b.n	800742e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2202      	movs	r2, #2
 80073a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68da      	ldr	r2, [r3, #12]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f042 0201 	orr.w	r2, r2, #1
 80073ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a1e      	ldr	r2, [pc, #120]	; (800743c <HAL_TIM_Base_Start_IT+0xb0>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d018      	beq.n	80073f8 <HAL_TIM_Base_Start_IT+0x6c>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ce:	d013      	beq.n	80073f8 <HAL_TIM_Base_Start_IT+0x6c>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a1a      	ldr	r2, [pc, #104]	; (8007440 <HAL_TIM_Base_Start_IT+0xb4>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d00e      	beq.n	80073f8 <HAL_TIM_Base_Start_IT+0x6c>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a19      	ldr	r2, [pc, #100]	; (8007444 <HAL_TIM_Base_Start_IT+0xb8>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d009      	beq.n	80073f8 <HAL_TIM_Base_Start_IT+0x6c>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a17      	ldr	r2, [pc, #92]	; (8007448 <HAL_TIM_Base_Start_IT+0xbc>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d004      	beq.n	80073f8 <HAL_TIM_Base_Start_IT+0x6c>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a16      	ldr	r2, [pc, #88]	; (800744c <HAL_TIM_Base_Start_IT+0xc0>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d111      	bne.n	800741c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f003 0307 	and.w	r3, r3, #7
 8007402:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2b06      	cmp	r3, #6
 8007408:	d010      	beq.n	800742c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f042 0201 	orr.w	r2, r2, #1
 8007418:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800741a:	e007      	b.n	800742c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f042 0201 	orr.w	r2, r2, #1
 800742a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3714      	adds	r7, #20
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	40010000 	.word	0x40010000
 8007440:	40000400 	.word	0x40000400
 8007444:	40000800 	.word	0x40000800
 8007448:	40000c00 	.word	0x40000c00
 800744c:	40014000 	.word	0x40014000

08007450 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e04c      	b.n	80074fc <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d111      	bne.n	8007492 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f001 faf4 	bl	8008a64 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007480:	2b00      	cmp	r3, #0
 8007482:	d102      	bne.n	800748a <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a1f      	ldr	r2, [pc, #124]	; (8007504 <HAL_TIM_OC_Init+0xb4>)
 8007488:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2202      	movs	r2, #2
 8007496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	3304      	adds	r3, #4
 80074a2:	4619      	mov	r1, r3
 80074a4:	4610      	mov	r0, r2
 80074a6:	f001 f811 	bl	80084cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	08007509 	.word	0x08007509

08007508 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d101      	bne.n	800752e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e04c      	b.n	80075c8 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d111      	bne.n	800755e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f001 fa8e 	bl	8008a64 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800754c:	2b00      	cmp	r3, #0
 800754e:	d102      	bne.n	8007556 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a1f      	ldr	r2, [pc, #124]	; (80075d0 <HAL_TIM_PWM_Init+0xb4>)
 8007554:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2202      	movs	r2, #2
 8007562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	3304      	adds	r3, #4
 800756e:	4619      	mov	r1, r3
 8007570:	4610      	mov	r0, r2
 8007572:	f000 ffab 	bl	80084cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	080075d5 	.word	0x080075d5

080075d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d109      	bne.n	800760c <HAL_TIM_PWM_Start+0x24>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b01      	cmp	r3, #1
 8007602:	bf14      	ite	ne
 8007604:	2301      	movne	r3, #1
 8007606:	2300      	moveq	r3, #0
 8007608:	b2db      	uxtb	r3, r3
 800760a:	e022      	b.n	8007652 <HAL_TIM_PWM_Start+0x6a>
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	2b04      	cmp	r3, #4
 8007610:	d109      	bne.n	8007626 <HAL_TIM_PWM_Start+0x3e>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b01      	cmp	r3, #1
 800761c:	bf14      	ite	ne
 800761e:	2301      	movne	r3, #1
 8007620:	2300      	moveq	r3, #0
 8007622:	b2db      	uxtb	r3, r3
 8007624:	e015      	b.n	8007652 <HAL_TIM_PWM_Start+0x6a>
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2b08      	cmp	r3, #8
 800762a:	d109      	bne.n	8007640 <HAL_TIM_PWM_Start+0x58>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b01      	cmp	r3, #1
 8007636:	bf14      	ite	ne
 8007638:	2301      	movne	r3, #1
 800763a:	2300      	moveq	r3, #0
 800763c:	b2db      	uxtb	r3, r3
 800763e:	e008      	b.n	8007652 <HAL_TIM_PWM_Start+0x6a>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007646:	b2db      	uxtb	r3, r3
 8007648:	2b01      	cmp	r3, #1
 800764a:	bf14      	ite	ne
 800764c:	2301      	movne	r3, #1
 800764e:	2300      	moveq	r3, #0
 8007650:	b2db      	uxtb	r3, r3
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e068      	b.n	800772c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d104      	bne.n	800766a <HAL_TIM_PWM_Start+0x82>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2202      	movs	r2, #2
 8007664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007668:	e013      	b.n	8007692 <HAL_TIM_PWM_Start+0xaa>
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	2b04      	cmp	r3, #4
 800766e:	d104      	bne.n	800767a <HAL_TIM_PWM_Start+0x92>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2202      	movs	r2, #2
 8007674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007678:	e00b      	b.n	8007692 <HAL_TIM_PWM_Start+0xaa>
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	2b08      	cmp	r3, #8
 800767e:	d104      	bne.n	800768a <HAL_TIM_PWM_Start+0xa2>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2202      	movs	r2, #2
 8007684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007688:	e003      	b.n	8007692 <HAL_TIM_PWM_Start+0xaa>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2202      	movs	r2, #2
 800768e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2201      	movs	r2, #1
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	4618      	mov	r0, r3
 800769c:	f001 f9bc 	bl	8008a18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a23      	ldr	r2, [pc, #140]	; (8007734 <HAL_TIM_PWM_Start+0x14c>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d107      	bne.n	80076ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a1d      	ldr	r2, [pc, #116]	; (8007734 <HAL_TIM_PWM_Start+0x14c>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d018      	beq.n	80076f6 <HAL_TIM_PWM_Start+0x10e>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076cc:	d013      	beq.n	80076f6 <HAL_TIM_PWM_Start+0x10e>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a19      	ldr	r2, [pc, #100]	; (8007738 <HAL_TIM_PWM_Start+0x150>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d00e      	beq.n	80076f6 <HAL_TIM_PWM_Start+0x10e>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a17      	ldr	r2, [pc, #92]	; (800773c <HAL_TIM_PWM_Start+0x154>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d009      	beq.n	80076f6 <HAL_TIM_PWM_Start+0x10e>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a16      	ldr	r2, [pc, #88]	; (8007740 <HAL_TIM_PWM_Start+0x158>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d004      	beq.n	80076f6 <HAL_TIM_PWM_Start+0x10e>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a14      	ldr	r2, [pc, #80]	; (8007744 <HAL_TIM_PWM_Start+0x15c>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d111      	bne.n	800771a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f003 0307 	and.w	r3, r3, #7
 8007700:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2b06      	cmp	r3, #6
 8007706:	d010      	beq.n	800772a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f042 0201 	orr.w	r2, r2, #1
 8007716:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007718:	e007      	b.n	800772a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f042 0201 	orr.w	r2, r2, #1
 8007728:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	40010000 	.word	0x40010000
 8007738:	40000400 	.word	0x40000400
 800773c:	40000800 	.word	0x40000800
 8007740:	40000c00 	.word	0x40000c00
 8007744:	40014000 	.word	0x40014000

08007748 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d101      	bne.n	800775c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e04c      	b.n	80077f6 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007762:	b2db      	uxtb	r3, r3
 8007764:	2b00      	cmp	r3, #0
 8007766:	d111      	bne.n	800778c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f001 f977 	bl	8008a64 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800777a:	2b00      	cmp	r3, #0
 800777c:	d102      	bne.n	8007784 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a1f      	ldr	r2, [pc, #124]	; (8007800 <HAL_TIM_OnePulse_Init+0xb8>)
 8007782:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2202      	movs	r2, #2
 8007790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3304      	adds	r3, #4
 800779c:	4619      	mov	r1, r3
 800779e:	4610      	mov	r0, r2
 80077a0:	f000 fe94 	bl	80084cc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f022 0208 	bic.w	r2, r2, #8
 80077b2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	6819      	ldr	r1, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	430a      	orrs	r2, r1
 80077c2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	08007805 	.word	0x08007805

08007804 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007828:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007830:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007838:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007840:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007842:	7bfb      	ldrb	r3, [r7, #15]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d108      	bne.n	800785a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007848:	7bbb      	ldrb	r3, [r7, #14]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d105      	bne.n	800785a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800784e:	7b7b      	ldrb	r3, [r7, #13]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d102      	bne.n	800785a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007854:	7b3b      	ldrb	r3, [r7, #12]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d001      	beq.n	800785e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e03b      	b.n	80078d6 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2202      	movs	r2, #2
 8007862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2202      	movs	r2, #2
 800786a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2202      	movs	r2, #2
 8007872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2202      	movs	r2, #2
 800787a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68da      	ldr	r2, [r3, #12]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f042 0202 	orr.w	r2, r2, #2
 800788c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68da      	ldr	r2, [r3, #12]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f042 0204 	orr.w	r2, r2, #4
 800789c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2201      	movs	r2, #1
 80078a4:	2100      	movs	r1, #0
 80078a6:	4618      	mov	r0, r3
 80078a8:	f001 f8b6 	bl	8008a18 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2201      	movs	r2, #1
 80078b2:	2104      	movs	r1, #4
 80078b4:	4618      	mov	r0, r3
 80078b6:	f001 f8af 	bl	8008a18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a08      	ldr	r2, [pc, #32]	; (80078e0 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d107      	bne.n	80078d4 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	40010000 	.word	0x40010000

080078e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b086      	sub	sp, #24
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d101      	bne.n	80078f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e0a2      	b.n	8007a3e <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	2b00      	cmp	r3, #0
 8007902:	d111      	bne.n	8007928 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f001 f8a9 	bl	8008a64 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007916:	2b00      	cmp	r3, #0
 8007918:	d102      	bne.n	8007920 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a4a      	ldr	r2, [pc, #296]	; (8007a48 <HAL_TIM_Encoder_Init+0x164>)
 800791e:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2202      	movs	r2, #2
 800792c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	6812      	ldr	r2, [r2, #0]
 800793a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800793e:	f023 0307 	bic.w	r3, r3, #7
 8007942:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	3304      	adds	r3, #4
 800794c:	4619      	mov	r1, r3
 800794e:	4610      	mov	r0, r2
 8007950:	f000 fdbc 	bl	80084cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	4313      	orrs	r3, r2
 8007974:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800797c:	f023 0303 	bic.w	r3, r3, #3
 8007980:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	689a      	ldr	r2, [r3, #8]
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	021b      	lsls	r3, r3, #8
 800798c:	4313      	orrs	r3, r2
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	4313      	orrs	r3, r2
 8007992:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800799a:	f023 030c 	bic.w	r3, r3, #12
 800799e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	68da      	ldr	r2, [r3, #12]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	69db      	ldr	r3, [r3, #28]
 80079b4:	021b      	lsls	r3, r3, #8
 80079b6:	4313      	orrs	r3, r2
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	011a      	lsls	r2, r3, #4
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	6a1b      	ldr	r3, [r3, #32]
 80079c8:	031b      	lsls	r3, r3, #12
 80079ca:	4313      	orrs	r3, r2
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80079d8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80079e0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	685a      	ldr	r2, [r3, #4]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	011b      	lsls	r3, r3, #4
 80079ec:	4313      	orrs	r3, r2
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3718      	adds	r7, #24
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	08004ad5 	.word	0x08004ad5

08007a4c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a5c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007a64:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a6c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007a74:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d110      	bne.n	8007a9e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d102      	bne.n	8007a88 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a82:	7b7b      	ldrb	r3, [r7, #13]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d001      	beq.n	8007a8c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e069      	b.n	8007b60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2202      	movs	r2, #2
 8007a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2202      	movs	r2, #2
 8007a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a9c:	e031      	b.n	8007b02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	2b04      	cmp	r3, #4
 8007aa2:	d110      	bne.n	8007ac6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007aa4:	7bbb      	ldrb	r3, [r7, #14]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d102      	bne.n	8007ab0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007aaa:	7b3b      	ldrb	r3, [r7, #12]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d001      	beq.n	8007ab4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e055      	b.n	8007b60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ac4:	e01d      	b.n	8007b02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d108      	bne.n	8007ade <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007acc:	7bbb      	ldrb	r3, [r7, #14]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d105      	bne.n	8007ade <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ad2:	7b7b      	ldrb	r3, [r7, #13]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d102      	bne.n	8007ade <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ad8:	7b3b      	ldrb	r3, [r7, #12]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d001      	beq.n	8007ae2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e03e      	b.n	8007b60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2202      	movs	r2, #2
 8007aee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2202      	movs	r2, #2
 8007af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2202      	movs	r2, #2
 8007afe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d003      	beq.n	8007b10 <HAL_TIM_Encoder_Start+0xc4>
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	d008      	beq.n	8007b20 <HAL_TIM_Encoder_Start+0xd4>
 8007b0e:	e00f      	b.n	8007b30 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2201      	movs	r2, #1
 8007b16:	2100      	movs	r1, #0
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f000 ff7d 	bl	8008a18 <TIM_CCxChannelCmd>
      break;
 8007b1e:	e016      	b.n	8007b4e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2201      	movs	r2, #1
 8007b26:	2104      	movs	r1, #4
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 ff75 	bl	8008a18 <TIM_CCxChannelCmd>
      break;
 8007b2e:	e00e      	b.n	8007b4e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2201      	movs	r2, #1
 8007b36:	2100      	movs	r1, #0
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f000 ff6d 	bl	8008a18 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2201      	movs	r2, #1
 8007b44:	2104      	movs	r1, #4
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 ff66 	bl	8008a18 <TIM_CCxChannelCmd>
      break;
 8007b4c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f042 0201 	orr.w	r2, r2, #1
 8007b5c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	f003 0302 	and.w	r3, r3, #2
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d128      	bne.n	8007bd0 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d121      	bne.n	8007bd0 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f06f 0202 	mvn.w	r2, #2
 8007b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	f003 0303 	and.w	r3, r3, #3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d005      	beq.n	8007bb6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	4798      	blx	r3
 8007bb4:	e009      	b.n	8007bca <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	f003 0304 	and.w	r3, r3, #4
 8007bda:	2b04      	cmp	r3, #4
 8007bdc:	d128      	bne.n	8007c30 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	f003 0304 	and.w	r3, r3, #4
 8007be8:	2b04      	cmp	r3, #4
 8007bea:	d121      	bne.n	8007c30 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f06f 0204 	mvn.w	r2, #4
 8007bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2202      	movs	r2, #2
 8007bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d005      	beq.n	8007c16 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	4798      	blx	r3
 8007c14:	e009      	b.n	8007c2a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	f003 0308 	and.w	r3, r3, #8
 8007c3a:	2b08      	cmp	r3, #8
 8007c3c:	d128      	bne.n	8007c90 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	f003 0308 	and.w	r3, r3, #8
 8007c48:	2b08      	cmp	r3, #8
 8007c4a:	d121      	bne.n	8007c90 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f06f 0208 	mvn.w	r2, #8
 8007c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2204      	movs	r2, #4
 8007c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	69db      	ldr	r3, [r3, #28]
 8007c62:	f003 0303 	and.w	r3, r3, #3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d005      	beq.n	8007c76 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	4798      	blx	r3
 8007c74:	e009      	b.n	8007c8a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	f003 0310 	and.w	r3, r3, #16
 8007c9a:	2b10      	cmp	r3, #16
 8007c9c:	d128      	bne.n	8007cf0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	f003 0310 	and.w	r3, r3, #16
 8007ca8:	2b10      	cmp	r3, #16
 8007caa:	d121      	bne.n	8007cf0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f06f 0210 	mvn.w	r2, #16
 8007cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2208      	movs	r2, #8
 8007cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	69db      	ldr	r3, [r3, #28]
 8007cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d005      	beq.n	8007cd6 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	4798      	blx	r3
 8007cd4:	e009      	b.n	8007cea <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d110      	bne.n	8007d20 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d109      	bne.n	8007d20 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f06f 0201 	mvn.w	r2, #1
 8007d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d2a:	2b80      	cmp	r3, #128	; 0x80
 8007d2c:	d110      	bne.n	8007d50 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d38:	2b80      	cmp	r3, #128	; 0x80
 8007d3a:	d109      	bne.n	8007d50 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d5a:	2b40      	cmp	r3, #64	; 0x40
 8007d5c:	d110      	bne.n	8007d80 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d68:	2b40      	cmp	r3, #64	; 0x40
 8007d6a:	d109      	bne.n	8007d80 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	f003 0320 	and.w	r3, r3, #32
 8007d8a:	2b20      	cmp	r3, #32
 8007d8c:	d110      	bne.n	8007db0 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	f003 0320 	and.w	r3, r3, #32
 8007d98:	2b20      	cmp	r3, #32
 8007d9a:	d109      	bne.n	8007db0 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f06f 0220 	mvn.w	r2, #32
 8007da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007db0:	bf00      	nop
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d101      	bne.n	8007dd6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	e048      	b.n	8007e68 <HAL_TIM_OC_ConfigChannel+0xb0>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b0c      	cmp	r3, #12
 8007de2:	d839      	bhi.n	8007e58 <HAL_TIM_OC_ConfigChannel+0xa0>
 8007de4:	a201      	add	r2, pc, #4	; (adr r2, 8007dec <HAL_TIM_OC_ConfigChannel+0x34>)
 8007de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dea:	bf00      	nop
 8007dec:	08007e21 	.word	0x08007e21
 8007df0:	08007e59 	.word	0x08007e59
 8007df4:	08007e59 	.word	0x08007e59
 8007df8:	08007e59 	.word	0x08007e59
 8007dfc:	08007e2f 	.word	0x08007e2f
 8007e00:	08007e59 	.word	0x08007e59
 8007e04:	08007e59 	.word	0x08007e59
 8007e08:	08007e59 	.word	0x08007e59
 8007e0c:	08007e3d 	.word	0x08007e3d
 8007e10:	08007e59 	.word	0x08007e59
 8007e14:	08007e59 	.word	0x08007e59
 8007e18:	08007e59 	.word	0x08007e59
 8007e1c:	08007e4b 	.word	0x08007e4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68b9      	ldr	r1, [r7, #8]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f000 fbd0 	bl	80085cc <TIM_OC1_SetConfig>
      break;
 8007e2c:	e017      	b.n	8007e5e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68b9      	ldr	r1, [r7, #8]
 8007e34:	4618      	mov	r0, r3
 8007e36:	f000 fc2f 	bl	8008698 <TIM_OC2_SetConfig>
      break;
 8007e3a:	e010      	b.n	8007e5e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68b9      	ldr	r1, [r7, #8]
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 fc94 	bl	8008770 <TIM_OC3_SetConfig>
      break;
 8007e48:	e009      	b.n	8007e5e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68b9      	ldr	r1, [r7, #8]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f000 fcf7 	bl	8008844 <TIM_OC4_SetConfig>
      break;
 8007e56:	e002      	b.n	8007e5e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3718      	adds	r7, #24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d101      	bne.n	8007e8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e8a:	2302      	movs	r3, #2
 8007e8c:	e0ae      	b.n	8007fec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2201      	movs	r2, #1
 8007e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b0c      	cmp	r3, #12
 8007e9a:	f200 809f 	bhi.w	8007fdc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007e9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ea4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea4:	08007ed9 	.word	0x08007ed9
 8007ea8:	08007fdd 	.word	0x08007fdd
 8007eac:	08007fdd 	.word	0x08007fdd
 8007eb0:	08007fdd 	.word	0x08007fdd
 8007eb4:	08007f19 	.word	0x08007f19
 8007eb8:	08007fdd 	.word	0x08007fdd
 8007ebc:	08007fdd 	.word	0x08007fdd
 8007ec0:	08007fdd 	.word	0x08007fdd
 8007ec4:	08007f5b 	.word	0x08007f5b
 8007ec8:	08007fdd 	.word	0x08007fdd
 8007ecc:	08007fdd 	.word	0x08007fdd
 8007ed0:	08007fdd 	.word	0x08007fdd
 8007ed4:	08007f9b 	.word	0x08007f9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68b9      	ldr	r1, [r7, #8]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f000 fb74 	bl	80085cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	699a      	ldr	r2, [r3, #24]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f042 0208 	orr.w	r2, r2, #8
 8007ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	699a      	ldr	r2, [r3, #24]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f022 0204 	bic.w	r2, r2, #4
 8007f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6999      	ldr	r1, [r3, #24]
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	691a      	ldr	r2, [r3, #16]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	619a      	str	r2, [r3, #24]
      break;
 8007f16:	e064      	b.n	8007fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68b9      	ldr	r1, [r7, #8]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 fbba 	bl	8008698 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	699a      	ldr	r2, [r3, #24]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	699a      	ldr	r2, [r3, #24]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6999      	ldr	r1, [r3, #24]
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	021a      	lsls	r2, r3, #8
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	430a      	orrs	r2, r1
 8007f56:	619a      	str	r2, [r3, #24]
      break;
 8007f58:	e043      	b.n	8007fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68b9      	ldr	r1, [r7, #8]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 fc05 	bl	8008770 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	69da      	ldr	r2, [r3, #28]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f042 0208 	orr.w	r2, r2, #8
 8007f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	69da      	ldr	r2, [r3, #28]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f022 0204 	bic.w	r2, r2, #4
 8007f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	69d9      	ldr	r1, [r3, #28]
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	691a      	ldr	r2, [r3, #16]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	430a      	orrs	r2, r1
 8007f96:	61da      	str	r2, [r3, #28]
      break;
 8007f98:	e023      	b.n	8007fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68b9      	ldr	r1, [r7, #8]
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f000 fc4f 	bl	8008844 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	69da      	ldr	r2, [r3, #28]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	69da      	ldr	r2, [r3, #28]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	69d9      	ldr	r1, [r3, #28]
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	021a      	lsls	r2, r3, #8
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	61da      	str	r2, [r3, #28]
      break;
 8007fda:	e002      	b.n	8007fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3718      	adds	r7, #24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008008:	2b01      	cmp	r3, #1
 800800a:	d101      	bne.n	8008010 <HAL_TIM_ConfigClockSource+0x1c>
 800800c:	2302      	movs	r3, #2
 800800e:	e0b4      	b.n	800817a <HAL_TIM_ConfigClockSource+0x186>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2202      	movs	r2, #2
 800801c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800802e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008036:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008048:	d03e      	beq.n	80080c8 <HAL_TIM_ConfigClockSource+0xd4>
 800804a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800804e:	f200 8087 	bhi.w	8008160 <HAL_TIM_ConfigClockSource+0x16c>
 8008052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008056:	f000 8086 	beq.w	8008166 <HAL_TIM_ConfigClockSource+0x172>
 800805a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800805e:	d87f      	bhi.n	8008160 <HAL_TIM_ConfigClockSource+0x16c>
 8008060:	2b70      	cmp	r3, #112	; 0x70
 8008062:	d01a      	beq.n	800809a <HAL_TIM_ConfigClockSource+0xa6>
 8008064:	2b70      	cmp	r3, #112	; 0x70
 8008066:	d87b      	bhi.n	8008160 <HAL_TIM_ConfigClockSource+0x16c>
 8008068:	2b60      	cmp	r3, #96	; 0x60
 800806a:	d050      	beq.n	800810e <HAL_TIM_ConfigClockSource+0x11a>
 800806c:	2b60      	cmp	r3, #96	; 0x60
 800806e:	d877      	bhi.n	8008160 <HAL_TIM_ConfigClockSource+0x16c>
 8008070:	2b50      	cmp	r3, #80	; 0x50
 8008072:	d03c      	beq.n	80080ee <HAL_TIM_ConfigClockSource+0xfa>
 8008074:	2b50      	cmp	r3, #80	; 0x50
 8008076:	d873      	bhi.n	8008160 <HAL_TIM_ConfigClockSource+0x16c>
 8008078:	2b40      	cmp	r3, #64	; 0x40
 800807a:	d058      	beq.n	800812e <HAL_TIM_ConfigClockSource+0x13a>
 800807c:	2b40      	cmp	r3, #64	; 0x40
 800807e:	d86f      	bhi.n	8008160 <HAL_TIM_ConfigClockSource+0x16c>
 8008080:	2b30      	cmp	r3, #48	; 0x30
 8008082:	d064      	beq.n	800814e <HAL_TIM_ConfigClockSource+0x15a>
 8008084:	2b30      	cmp	r3, #48	; 0x30
 8008086:	d86b      	bhi.n	8008160 <HAL_TIM_ConfigClockSource+0x16c>
 8008088:	2b20      	cmp	r3, #32
 800808a:	d060      	beq.n	800814e <HAL_TIM_ConfigClockSource+0x15a>
 800808c:	2b20      	cmp	r3, #32
 800808e:	d867      	bhi.n	8008160 <HAL_TIM_ConfigClockSource+0x16c>
 8008090:	2b00      	cmp	r3, #0
 8008092:	d05c      	beq.n	800814e <HAL_TIM_ConfigClockSource+0x15a>
 8008094:	2b10      	cmp	r3, #16
 8008096:	d05a      	beq.n	800814e <HAL_TIM_ConfigClockSource+0x15a>
 8008098:	e062      	b.n	8008160 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6818      	ldr	r0, [r3, #0]
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	6899      	ldr	r1, [r3, #8]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	f000 fc95 	bl	80089d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80080bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	609a      	str	r2, [r3, #8]
      break;
 80080c6:	e04f      	b.n	8008168 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6818      	ldr	r0, [r3, #0]
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	6899      	ldr	r1, [r3, #8]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	685a      	ldr	r2, [r3, #4]
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	f000 fc7e 	bl	80089d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689a      	ldr	r2, [r3, #8]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080ea:	609a      	str	r2, [r3, #8]
      break;
 80080ec:	e03c      	b.n	8008168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6818      	ldr	r0, [r3, #0]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	6859      	ldr	r1, [r3, #4]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	461a      	mov	r2, r3
 80080fc:	f000 fbf2 	bl	80088e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2150      	movs	r1, #80	; 0x50
 8008106:	4618      	mov	r0, r3
 8008108:	f000 fc4b 	bl	80089a2 <TIM_ITRx_SetConfig>
      break;
 800810c:	e02c      	b.n	8008168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6818      	ldr	r0, [r3, #0]
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	6859      	ldr	r1, [r3, #4]
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	461a      	mov	r2, r3
 800811c:	f000 fc11 	bl	8008942 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2160      	movs	r1, #96	; 0x60
 8008126:	4618      	mov	r0, r3
 8008128:	f000 fc3b 	bl	80089a2 <TIM_ITRx_SetConfig>
      break;
 800812c:	e01c      	b.n	8008168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6818      	ldr	r0, [r3, #0]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	6859      	ldr	r1, [r3, #4]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	461a      	mov	r2, r3
 800813c:	f000 fbd2 	bl	80088e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2140      	movs	r1, #64	; 0x40
 8008146:	4618      	mov	r0, r3
 8008148:	f000 fc2b 	bl	80089a2 <TIM_ITRx_SetConfig>
      break;
 800814c:	e00c      	b.n	8008168 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4619      	mov	r1, r3
 8008158:	4610      	mov	r0, r2
 800815a:	f000 fc22 	bl	80089a2 <TIM_ITRx_SetConfig>
      break;
 800815e:	e003      	b.n	8008168 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	73fb      	strb	r3, [r7, #15]
      break;
 8008164:	e000      	b.n	8008168 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008166:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008178:	7bfb      	ldrb	r3, [r7, #15]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008182:	b480      	push	{r7}
 8008184:	b083      	sub	sp, #12
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800818a:	bf00      	nop
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008196:	b480      	push	{r7}
 8008198:	b083      	sub	sp, #12
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800819e:	bf00      	nop
 80081a0:	370c      	adds	r7, #12
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b083      	sub	sp, #12
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081b2:	bf00      	nop
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80081be:	b480      	push	{r7}
 80081c0:	b083      	sub	sp, #12
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80081c6:	bf00      	nop
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b083      	sub	sp, #12
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081da:	bf00      	nop
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b083      	sub	sp, #12
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80081ee:	bf00      	nop
 80081f0:	370c      	adds	r7, #12
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081fa:	b480      	push	{r7}
 80081fc:	b083      	sub	sp, #12
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008202:	bf00      	nop
 8008204:	370c      	adds	r7, #12
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800820e:	b480      	push	{r7}
 8008210:	b083      	sub	sp, #12
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008216:	bf00      	nop
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008222:	b480      	push	{r7}
 8008224:	b083      	sub	sp, #12
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800822a:	bf00      	nop
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
	...

08008238 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008238:	b480      	push	{r7}
 800823a:	b087      	sub	sp, #28
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	460b      	mov	r3, r1
 8008242:	607a      	str	r2, [r7, #4]
 8008244:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008246:	2300      	movs	r3, #0
 8008248:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d101      	bne.n	8008254 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e135      	b.n	80084c0 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800825a:	2b01      	cmp	r3, #1
 800825c:	d101      	bne.n	8008262 <HAL_TIM_RegisterCallback+0x2a>
 800825e:	2302      	movs	r3, #2
 8008260:	e12e      	b.n	80084c0 <HAL_TIM_RegisterCallback+0x288>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008270:	b2db      	uxtb	r3, r3
 8008272:	2b01      	cmp	r3, #1
 8008274:	f040 80ba 	bne.w	80083ec <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8008278:	7afb      	ldrb	r3, [r7, #11]
 800827a:	2b1a      	cmp	r3, #26
 800827c:	f200 80b3 	bhi.w	80083e6 <HAL_TIM_RegisterCallback+0x1ae>
 8008280:	a201      	add	r2, pc, #4	; (adr r2, 8008288 <HAL_TIM_RegisterCallback+0x50>)
 8008282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008286:	bf00      	nop
 8008288:	080082f5 	.word	0x080082f5
 800828c:	080082fd 	.word	0x080082fd
 8008290:	08008305 	.word	0x08008305
 8008294:	0800830d 	.word	0x0800830d
 8008298:	08008315 	.word	0x08008315
 800829c:	0800831d 	.word	0x0800831d
 80082a0:	08008325 	.word	0x08008325
 80082a4:	0800832d 	.word	0x0800832d
 80082a8:	08008335 	.word	0x08008335
 80082ac:	0800833d 	.word	0x0800833d
 80082b0:	08008345 	.word	0x08008345
 80082b4:	0800834d 	.word	0x0800834d
 80082b8:	08008355 	.word	0x08008355
 80082bc:	0800835d 	.word	0x0800835d
 80082c0:	08008365 	.word	0x08008365
 80082c4:	0800836f 	.word	0x0800836f
 80082c8:	08008379 	.word	0x08008379
 80082cc:	08008383 	.word	0x08008383
 80082d0:	0800838d 	.word	0x0800838d
 80082d4:	08008397 	.word	0x08008397
 80082d8:	080083a1 	.word	0x080083a1
 80082dc:	080083ab 	.word	0x080083ab
 80082e0:	080083b5 	.word	0x080083b5
 80082e4:	080083bf 	.word	0x080083bf
 80082e8:	080083c9 	.word	0x080083c9
 80082ec:	080083d3 	.word	0x080083d3
 80082f0:	080083dd 	.word	0x080083dd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80082fa:	e0dc      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8008302:	e0d8      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800830a:	e0d4      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8008312:	e0d0      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800831a:	e0cc      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8008322:	e0c8      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800832a:	e0c4      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8008332:	e0c0      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800833a:	e0bc      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008342:	e0b8      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800834a:	e0b4      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8008352:	e0b0      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800835a:	e0ac      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8008362:	e0a8      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800836c:	e0a3      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8008376:	e09e      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8008380:	e099      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800838a:	e094      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8008394:	e08f      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800839e:	e08a      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 80083a8:	e085      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 80083b2:	e080      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 80083bc:	e07b      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 80083c6:	e076      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 80083d0:	e071      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 80083da:	e06c      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 80083e4:	e067      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	75fb      	strb	r3, [r7, #23]
        break;
 80083ea:	e064      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d15c      	bne.n	80084b2 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 80083f8:	7afb      	ldrb	r3, [r7, #11]
 80083fa:	2b0d      	cmp	r3, #13
 80083fc:	d856      	bhi.n	80084ac <HAL_TIM_RegisterCallback+0x274>
 80083fe:	a201      	add	r2, pc, #4	; (adr r2, 8008404 <HAL_TIM_RegisterCallback+0x1cc>)
 8008400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008404:	0800843d 	.word	0x0800843d
 8008408:	08008445 	.word	0x08008445
 800840c:	0800844d 	.word	0x0800844d
 8008410:	08008455 	.word	0x08008455
 8008414:	0800845d 	.word	0x0800845d
 8008418:	08008465 	.word	0x08008465
 800841c:	0800846d 	.word	0x0800846d
 8008420:	08008475 	.word	0x08008475
 8008424:	0800847d 	.word	0x0800847d
 8008428:	08008485 	.word	0x08008485
 800842c:	0800848d 	.word	0x0800848d
 8008430:	08008495 	.word	0x08008495
 8008434:	0800849d 	.word	0x0800849d
 8008438:	080084a5 	.word	0x080084a5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8008442:	e038      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800844a:	e034      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8008452:	e030      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800845a:	e02c      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8008462:	e028      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800846a:	e024      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8008472:	e020      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800847a:	e01c      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8008482:	e018      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800848a:	e014      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008492:	e010      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800849a:	e00c      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80084a2:	e008      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80084aa:	e004      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	75fb      	strb	r3, [r7, #23]
        break;
 80084b0:	e001      	b.n	80084b6 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084be:	7dfb      	ldrb	r3, [r7, #23]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	371c      	adds	r7, #28
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a34      	ldr	r2, [pc, #208]	; (80085b0 <TIM_Base_SetConfig+0xe4>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d00f      	beq.n	8008504 <TIM_Base_SetConfig+0x38>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ea:	d00b      	beq.n	8008504 <TIM_Base_SetConfig+0x38>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4a31      	ldr	r2, [pc, #196]	; (80085b4 <TIM_Base_SetConfig+0xe8>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d007      	beq.n	8008504 <TIM_Base_SetConfig+0x38>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a30      	ldr	r2, [pc, #192]	; (80085b8 <TIM_Base_SetConfig+0xec>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d003      	beq.n	8008504 <TIM_Base_SetConfig+0x38>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a2f      	ldr	r2, [pc, #188]	; (80085bc <TIM_Base_SetConfig+0xf0>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d108      	bne.n	8008516 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800850a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	4313      	orrs	r3, r2
 8008514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a25      	ldr	r2, [pc, #148]	; (80085b0 <TIM_Base_SetConfig+0xe4>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d01b      	beq.n	8008556 <TIM_Base_SetConfig+0x8a>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008524:	d017      	beq.n	8008556 <TIM_Base_SetConfig+0x8a>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a22      	ldr	r2, [pc, #136]	; (80085b4 <TIM_Base_SetConfig+0xe8>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d013      	beq.n	8008556 <TIM_Base_SetConfig+0x8a>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a21      	ldr	r2, [pc, #132]	; (80085b8 <TIM_Base_SetConfig+0xec>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d00f      	beq.n	8008556 <TIM_Base_SetConfig+0x8a>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a20      	ldr	r2, [pc, #128]	; (80085bc <TIM_Base_SetConfig+0xf0>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d00b      	beq.n	8008556 <TIM_Base_SetConfig+0x8a>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a1f      	ldr	r2, [pc, #124]	; (80085c0 <TIM_Base_SetConfig+0xf4>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d007      	beq.n	8008556 <TIM_Base_SetConfig+0x8a>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a1e      	ldr	r2, [pc, #120]	; (80085c4 <TIM_Base_SetConfig+0xf8>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d003      	beq.n	8008556 <TIM_Base_SetConfig+0x8a>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a1d      	ldr	r2, [pc, #116]	; (80085c8 <TIM_Base_SetConfig+0xfc>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d108      	bne.n	8008568 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800855c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	4313      	orrs	r3, r2
 8008566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	4313      	orrs	r3, r2
 8008574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	689a      	ldr	r2, [r3, #8]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a08      	ldr	r2, [pc, #32]	; (80085b0 <TIM_Base_SetConfig+0xe4>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d103      	bne.n	800859c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	691a      	ldr	r2, [r3, #16]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	615a      	str	r2, [r3, #20]
}
 80085a2:	bf00      	nop
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	40010000 	.word	0x40010000
 80085b4:	40000400 	.word	0x40000400
 80085b8:	40000800 	.word	0x40000800
 80085bc:	40000c00 	.word	0x40000c00
 80085c0:	40014000 	.word	0x40014000
 80085c4:	40014400 	.word	0x40014400
 80085c8:	40014800 	.word	0x40014800

080085cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b087      	sub	sp, #28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	f023 0201 	bic.w	r2, r3, #1
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f023 0303 	bic.w	r3, r3, #3
 8008602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	4313      	orrs	r3, r2
 800860c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	f023 0302 	bic.w	r3, r3, #2
 8008614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	697a      	ldr	r2, [r7, #20]
 800861c:	4313      	orrs	r3, r2
 800861e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a1c      	ldr	r2, [pc, #112]	; (8008694 <TIM_OC1_SetConfig+0xc8>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d10c      	bne.n	8008642 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	f023 0308 	bic.w	r3, r3, #8
 800862e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	4313      	orrs	r3, r2
 8008638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f023 0304 	bic.w	r3, r3, #4
 8008640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a13      	ldr	r2, [pc, #76]	; (8008694 <TIM_OC1_SetConfig+0xc8>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d111      	bne.n	800866e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	695b      	ldr	r3, [r3, #20]
 800865e:	693a      	ldr	r2, [r7, #16]
 8008660:	4313      	orrs	r3, r2
 8008662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	693a      	ldr	r2, [r7, #16]
 800866a:	4313      	orrs	r3, r2
 800866c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	693a      	ldr	r2, [r7, #16]
 8008672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	685a      	ldr	r2, [r3, #4]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	697a      	ldr	r2, [r7, #20]
 8008686:	621a      	str	r2, [r3, #32]
}
 8008688:	bf00      	nop
 800868a:	371c      	adds	r7, #28
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr
 8008694:	40010000 	.word	0x40010000

08008698 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008698:	b480      	push	{r7}
 800869a:	b087      	sub	sp, #28
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a1b      	ldr	r3, [r3, #32]
 80086a6:	f023 0210 	bic.w	r2, r3, #16
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	699b      	ldr	r3, [r3, #24]
 80086be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	021b      	lsls	r3, r3, #8
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	4313      	orrs	r3, r2
 80086da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	f023 0320 	bic.w	r3, r3, #32
 80086e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	011b      	lsls	r3, r3, #4
 80086ea:	697a      	ldr	r2, [r7, #20]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4a1e      	ldr	r2, [pc, #120]	; (800876c <TIM_OC2_SetConfig+0xd4>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d10d      	bne.n	8008714 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	011b      	lsls	r3, r3, #4
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	4313      	orrs	r3, r2
 800870a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008712:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a15      	ldr	r2, [pc, #84]	; (800876c <TIM_OC2_SetConfig+0xd4>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d113      	bne.n	8008744 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008722:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800872a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	695b      	ldr	r3, [r3, #20]
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	693a      	ldr	r2, [r7, #16]
 8008734:	4313      	orrs	r3, r2
 8008736:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	4313      	orrs	r3, r2
 8008742:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	685a      	ldr	r2, [r3, #4]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	697a      	ldr	r2, [r7, #20]
 800875c:	621a      	str	r2, [r3, #32]
}
 800875e:	bf00      	nop
 8008760:	371c      	adds	r7, #28
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	40010000 	.word	0x40010000

08008770 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008770:	b480      	push	{r7}
 8008772:	b087      	sub	sp, #28
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a1b      	ldr	r3, [r3, #32]
 800878a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	69db      	ldr	r3, [r3, #28]
 8008796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800879e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f023 0303 	bic.w	r3, r3, #3
 80087a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	021b      	lsls	r3, r3, #8
 80087c0:	697a      	ldr	r2, [r7, #20]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a1d      	ldr	r2, [pc, #116]	; (8008840 <TIM_OC3_SetConfig+0xd0>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d10d      	bne.n	80087ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	021b      	lsls	r3, r3, #8
 80087dc:	697a      	ldr	r2, [r7, #20]
 80087de:	4313      	orrs	r3, r2
 80087e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a14      	ldr	r2, [pc, #80]	; (8008840 <TIM_OC3_SetConfig+0xd0>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d113      	bne.n	800881a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	695b      	ldr	r3, [r3, #20]
 8008806:	011b      	lsls	r3, r3, #4
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	4313      	orrs	r3, r2
 800880c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	011b      	lsls	r3, r3, #4
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	4313      	orrs	r3, r2
 8008818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	693a      	ldr	r2, [r7, #16]
 800881e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	685a      	ldr	r2, [r3, #4]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	697a      	ldr	r2, [r7, #20]
 8008832:	621a      	str	r2, [r3, #32]
}
 8008834:	bf00      	nop
 8008836:	371c      	adds	r7, #28
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr
 8008840:	40010000 	.word	0x40010000

08008844 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008844:	b480      	push	{r7}
 8008846:	b087      	sub	sp, #28
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a1b      	ldr	r3, [r3, #32]
 8008852:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a1b      	ldr	r3, [r3, #32]
 800885e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	69db      	ldr	r3, [r3, #28]
 800886a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800887a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	021b      	lsls	r3, r3, #8
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	4313      	orrs	r3, r2
 8008886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800888e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	031b      	lsls	r3, r3, #12
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	4313      	orrs	r3, r2
 800889a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a10      	ldr	r2, [pc, #64]	; (80088e0 <TIM_OC4_SetConfig+0x9c>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d109      	bne.n	80088b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	695b      	ldr	r3, [r3, #20]
 80088b0:	019b      	lsls	r3, r3, #6
 80088b2:	697a      	ldr	r2, [r7, #20]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	697a      	ldr	r2, [r7, #20]
 80088bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	685a      	ldr	r2, [r3, #4]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	693a      	ldr	r2, [r7, #16]
 80088d0:	621a      	str	r2, [r3, #32]
}
 80088d2:	bf00      	nop
 80088d4:	371c      	adds	r7, #28
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	40010000 	.word	0x40010000

080088e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b087      	sub	sp, #28
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6a1b      	ldr	r3, [r3, #32]
 80088f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6a1b      	ldr	r3, [r3, #32]
 80088fa:	f023 0201 	bic.w	r2, r3, #1
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	699b      	ldr	r3, [r3, #24]
 8008906:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800890e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	011b      	lsls	r3, r3, #4
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	4313      	orrs	r3, r2
 8008918:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	f023 030a 	bic.w	r3, r3, #10
 8008920:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008922:	697a      	ldr	r2, [r7, #20]
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	4313      	orrs	r3, r2
 8008928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	621a      	str	r2, [r3, #32]
}
 8008936:	bf00      	nop
 8008938:	371c      	adds	r7, #28
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr

08008942 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008942:	b480      	push	{r7}
 8008944:	b087      	sub	sp, #28
 8008946:	af00      	add	r7, sp, #0
 8008948:	60f8      	str	r0, [r7, #12]
 800894a:	60b9      	str	r1, [r7, #8]
 800894c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6a1b      	ldr	r3, [r3, #32]
 8008952:	f023 0210 	bic.w	r2, r3, #16
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6a1b      	ldr	r3, [r3, #32]
 8008964:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800896c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	031b      	lsls	r3, r3, #12
 8008972:	697a      	ldr	r2, [r7, #20]
 8008974:	4313      	orrs	r3, r2
 8008976:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800897e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	011b      	lsls	r3, r3, #4
 8008984:	693a      	ldr	r2, [r7, #16]
 8008986:	4313      	orrs	r3, r2
 8008988:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	621a      	str	r2, [r3, #32]
}
 8008996:	bf00      	nop
 8008998:	371c      	adds	r7, #28
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr

080089a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089a2:	b480      	push	{r7}
 80089a4:	b085      	sub	sp, #20
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089ba:	683a      	ldr	r2, [r7, #0]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	4313      	orrs	r3, r2
 80089c0:	f043 0307 	orr.w	r3, r3, #7
 80089c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	609a      	str	r2, [r3, #8]
}
 80089cc:	bf00      	nop
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089d8:	b480      	push	{r7}
 80089da:	b087      	sub	sp, #28
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
 80089e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	021a      	lsls	r2, r3, #8
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	431a      	orrs	r2, r3
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	697a      	ldr	r2, [r7, #20]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	697a      	ldr	r2, [r7, #20]
 8008a0a:	609a      	str	r2, [r3, #8]
}
 8008a0c:	bf00      	nop
 8008a0e:	371c      	adds	r7, #28
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	f003 031f 	and.w	r3, r3, #31
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6a1a      	ldr	r2, [r3, #32]
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	43db      	mvns	r3, r3
 8008a3a:	401a      	ands	r2, r3
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6a1a      	ldr	r2, [r3, #32]
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	f003 031f 	and.w	r3, r3, #31
 8008a4a:	6879      	ldr	r1, [r7, #4]
 8008a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a50:	431a      	orrs	r2, r3
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	621a      	str	r2, [r3, #32]
}
 8008a56:	bf00      	nop
 8008a58:	371c      	adds	r7, #28
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
	...

08008a64 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a1c      	ldr	r2, [pc, #112]	; (8008ae0 <TIM_ResetCallback+0x7c>)
 8008a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a1b      	ldr	r2, [pc, #108]	; (8008ae4 <TIM_ResetCallback+0x80>)
 8008a78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a1a      	ldr	r2, [pc, #104]	; (8008ae8 <TIM_ResetCallback+0x84>)
 8008a80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a19      	ldr	r2, [pc, #100]	; (8008aec <TIM_ResetCallback+0x88>)
 8008a88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a18      	ldr	r2, [pc, #96]	; (8008af0 <TIM_ResetCallback+0x8c>)
 8008a90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a17      	ldr	r2, [pc, #92]	; (8008af4 <TIM_ResetCallback+0x90>)
 8008a98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a16      	ldr	r2, [pc, #88]	; (8008af8 <TIM_ResetCallback+0x94>)
 8008aa0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a15      	ldr	r2, [pc, #84]	; (8008afc <TIM_ResetCallback+0x98>)
 8008aa8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a14      	ldr	r2, [pc, #80]	; (8008b00 <TIM_ResetCallback+0x9c>)
 8008ab0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a13      	ldr	r2, [pc, #76]	; (8008b04 <TIM_ResetCallback+0xa0>)
 8008ab8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a12      	ldr	r2, [pc, #72]	; (8008b08 <TIM_ResetCallback+0xa4>)
 8008ac0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a11      	ldr	r2, [pc, #68]	; (8008b0c <TIM_ResetCallback+0xa8>)
 8008ac8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a10      	ldr	r2, [pc, #64]	; (8008b10 <TIM_ResetCallback+0xac>)
 8008ad0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	080046d5 	.word	0x080046d5
 8008ae4:	08008183 	.word	0x08008183
 8008ae8:	080081fb 	.word	0x080081fb
 8008aec:	0800820f 	.word	0x0800820f
 8008af0:	080081ab 	.word	0x080081ab
 8008af4:	080081bf 	.word	0x080081bf
 8008af8:	08008197 	.word	0x08008197
 8008afc:	080081d3 	.word	0x080081d3
 8008b00:	080081e7 	.word	0x080081e7
 8008b04:	08008223 	.word	0x08008223
 8008b08:	08008bf1 	.word	0x08008bf1
 8008b0c:	08008c05 	.word	0x08008c05
 8008b10:	08008c19 	.word	0x08008c19

08008b14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d101      	bne.n	8008b2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b28:	2302      	movs	r3, #2
 8008b2a:	e050      	b.n	8008bce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2202      	movs	r2, #2
 8008b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a1c      	ldr	r2, [pc, #112]	; (8008bdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d018      	beq.n	8008ba2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b78:	d013      	beq.n	8008ba2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a18      	ldr	r2, [pc, #96]	; (8008be0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d00e      	beq.n	8008ba2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a16      	ldr	r2, [pc, #88]	; (8008be4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d009      	beq.n	8008ba2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a15      	ldr	r2, [pc, #84]	; (8008be8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d004      	beq.n	8008ba2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a13      	ldr	r2, [pc, #76]	; (8008bec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d10c      	bne.n	8008bbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ba8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3714      	adds	r7, #20
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	40010000 	.word	0x40010000
 8008be0:	40000400 	.word	0x40000400
 8008be4:	40000800 	.word	0x40000800
 8008be8:	40000c00 	.word	0x40000c00
 8008bec:	40014000 	.word	0x40014000

08008bf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008bf8:	bf00      	nop
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008c0c:	bf00      	nop
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d101      	bne.n	8008c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e04a      	b.n	8008cd4 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d111      	bne.n	8008c6e <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 fd2c 	bl	80096b0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d102      	bne.n	8008c66 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a1e      	ldr	r2, [pc, #120]	; (8008cdc <HAL_UART_Init+0xb0>)
 8008c64:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2224      	movs	r2, #36	; 0x24
 8008c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68da      	ldr	r2, [r3, #12]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c84:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fff6 	bl	8009c78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	691a      	ldr	r2, [r3, #16]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c9a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	695a      	ldr	r2, [r3, #20]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008caa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68da      	ldr	r2, [r3, #12]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008cba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2220      	movs	r2, #32
 8008cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2220      	movs	r2, #32
 8008cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3708      	adds	r7, #8
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	08004cc9 	.word	0x08004cc9

08008ce0 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b087      	sub	sp, #28
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	607a      	str	r2, [r7, #4]
 8008cec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d107      	bne.n	8008d08 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfc:	f043 0220 	orr.w	r2, r3, #32
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e08c      	b.n	8008e22 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d101      	bne.n	8008d16 <HAL_UART_RegisterCallback+0x36>
 8008d12:	2302      	movs	r3, #2
 8008d14:	e085      	b.n	8008e22 <HAL_UART_RegisterCallback+0x142>
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b20      	cmp	r3, #32
 8008d28:	d151      	bne.n	8008dce <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8008d2a:	7afb      	ldrb	r3, [r7, #11]
 8008d2c:	2b0c      	cmp	r3, #12
 8008d2e:	d845      	bhi.n	8008dbc <HAL_UART_RegisterCallback+0xdc>
 8008d30:	a201      	add	r2, pc, #4	; (adr r2, 8008d38 <HAL_UART_RegisterCallback+0x58>)
 8008d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d36:	bf00      	nop
 8008d38:	08008d6d 	.word	0x08008d6d
 8008d3c:	08008d75 	.word	0x08008d75
 8008d40:	08008d7d 	.word	0x08008d7d
 8008d44:	08008d85 	.word	0x08008d85
 8008d48:	08008d8d 	.word	0x08008d8d
 8008d4c:	08008d95 	.word	0x08008d95
 8008d50:	08008d9d 	.word	0x08008d9d
 8008d54:	08008da5 	.word	0x08008da5
 8008d58:	08008dbd 	.word	0x08008dbd
 8008d5c:	08008dbd 	.word	0x08008dbd
 8008d60:	08008dbd 	.word	0x08008dbd
 8008d64:	08008dad 	.word	0x08008dad
 8008d68:	08008db5 	.word	0x08008db5
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8008d72:	e051      	b.n	8008e18 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8008d7a:	e04d      	b.n	8008e18 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8008d82:	e049      	b.n	8008e18 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8008d8a:	e045      	b.n	8008e18 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8008d92:	e041      	b.n	8008e18 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8008d9a:	e03d      	b.n	8008e18 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8008da2:	e039      	b.n	8008e18 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8008daa:	e035      	b.n	8008e18 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008db2:	e031      	b.n	8008e18 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008dba:	e02d      	b.n	8008e18 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc0:	f043 0220 	orr.w	r2, r3, #32
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	75fb      	strb	r3, [r7, #23]
        break;
 8008dcc:	e024      	b.n	8008e18 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d116      	bne.n	8008e08 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8008dda:	7afb      	ldrb	r3, [r7, #11]
 8008ddc:	2b0b      	cmp	r3, #11
 8008dde:	d002      	beq.n	8008de6 <HAL_UART_RegisterCallback+0x106>
 8008de0:	2b0c      	cmp	r3, #12
 8008de2:	d004      	beq.n	8008dee <HAL_UART_RegisterCallback+0x10e>
 8008de4:	e007      	b.n	8008df6 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008dec:	e014      	b.n	8008e18 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008df4:	e010      	b.n	8008e18 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfa:	f043 0220 	orr.w	r2, r3, #32
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	75fb      	strb	r3, [r7, #23]
        break;
 8008e06:	e007      	b.n	8008e18 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e0c:	f043 0220 	orr.w	r2, r3, #32
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	371c      	adds	r7, #28
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop

08008e30 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	2b20      	cmp	r3, #32
 8008e48:	d11d      	bne.n	8008e86 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d002      	beq.n	8008e56 <HAL_UART_Receive_IT+0x26>
 8008e50:	88fb      	ldrh	r3, [r7, #6]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d101      	bne.n	8008e5a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e016      	b.n	8008e88 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d101      	bne.n	8008e68 <HAL_UART_Receive_IT+0x38>
 8008e64:	2302      	movs	r3, #2
 8008e66:	e00f      	b.n	8008e88 <HAL_UART_Receive_IT+0x58>
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2200      	movs	r2, #0
 8008e74:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008e76:	88fb      	ldrh	r3, [r7, #6]
 8008e78:	461a      	mov	r2, r3
 8008e7a:	68b9      	ldr	r1, [r7, #8]
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f000 fcf7 	bl	8009870 <UART_Start_Receive_IT>
 8008e82:	4603      	mov	r3, r0
 8008e84:	e000      	b.n	8008e88 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008e86:	2302      	movs	r3, #2
  }
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3710      	adds	r7, #16
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b08c      	sub	sp, #48	; 0x30
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	2b20      	cmp	r3, #32
 8008ea8:	d165      	bne.n	8008f76 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d002      	beq.n	8008eb6 <HAL_UART_Transmit_DMA+0x26>
 8008eb0:	88fb      	ldrh	r3, [r7, #6]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d101      	bne.n	8008eba <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e05e      	b.n	8008f78 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d101      	bne.n	8008ec8 <HAL_UART_Transmit_DMA+0x38>
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	e057      	b.n	8008f78 <HAL_UART_Transmit_DMA+0xe8>
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008ed0:	68ba      	ldr	r2, [r7, #8]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	88fa      	ldrh	r2, [r7, #6]
 8008eda:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	88fa      	ldrh	r2, [r7, #6]
 8008ee0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2221      	movs	r2, #33	; 0x21
 8008eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ef4:	4a22      	ldr	r2, [pc, #136]	; (8008f80 <HAL_UART_Transmit_DMA+0xf0>)
 8008ef6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008efc:	4a21      	ldr	r2, [pc, #132]	; (8008f84 <HAL_UART_Transmit_DMA+0xf4>)
 8008efe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f04:	4a20      	ldr	r2, [pc, #128]	; (8008f88 <HAL_UART_Transmit_DMA+0xf8>)
 8008f06:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008f10:	f107 0308 	add.w	r3, r7, #8
 8008f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1c:	6819      	ldr	r1, [r3, #0]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	3304      	adds	r3, #4
 8008f24:	461a      	mov	r2, r3
 8008f26:	88fb      	ldrh	r3, [r7, #6]
 8008f28:	f7fc fe64 	bl	8005bf4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f34:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3314      	adds	r3, #20
 8008f44:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	e853 3f00 	ldrex	r3, [r3]
 8008f4c:	617b      	str	r3, [r7, #20]
   return(result);
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3314      	adds	r3, #20
 8008f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f5e:	627a      	str	r2, [r7, #36]	; 0x24
 8008f60:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f62:	6a39      	ldr	r1, [r7, #32]
 8008f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f66:	e841 2300 	strex	r3, r2, [r1]
 8008f6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1e5      	bne.n	8008f3e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008f72:	2300      	movs	r3, #0
 8008f74:	e000      	b.n	8008f78 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008f76:	2302      	movs	r3, #2
  }
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3730      	adds	r7, #48	; 0x30
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	08009721 	.word	0x08009721
 8008f84:	080097bd 	.word	0x080097bd
 8008f88:	080097db 	.word	0x080097db

08008f8c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b09a      	sub	sp, #104	; 0x68
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	330c      	adds	r3, #12
 8008f9a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f9e:	e853 3f00 	ldrex	r3, [r3]
 8008fa2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008faa:	667b      	str	r3, [r7, #100]	; 0x64
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	330c      	adds	r3, #12
 8008fb2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008fb4:	657a      	str	r2, [r7, #84]	; 0x54
 8008fb6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008fba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008fbc:	e841 2300 	strex	r3, r2, [r1]
 8008fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1e5      	bne.n	8008f94 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	3314      	adds	r3, #20
 8008fce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd2:	e853 3f00 	ldrex	r3, [r3]
 8008fd6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fda:	f023 0301 	bic.w	r3, r3, #1
 8008fde:	663b      	str	r3, [r7, #96]	; 0x60
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	3314      	adds	r3, #20
 8008fe6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008fe8:	643a      	str	r2, [r7, #64]	; 0x40
 8008fea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ff0:	e841 2300 	strex	r3, r2, [r1]
 8008ff4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1e5      	bne.n	8008fc8 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009000:	2b01      	cmp	r3, #1
 8009002:	d119      	bne.n	8009038 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	330c      	adds	r3, #12
 800900a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900c:	6a3b      	ldr	r3, [r7, #32]
 800900e:	e853 3f00 	ldrex	r3, [r3]
 8009012:	61fb      	str	r3, [r7, #28]
   return(result);
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	f023 0310 	bic.w	r3, r3, #16
 800901a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	330c      	adds	r3, #12
 8009022:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009024:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009026:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009028:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800902a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800902c:	e841 2300 	strex	r3, r2, [r1]
 8009030:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1e5      	bne.n	8009004 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	695b      	ldr	r3, [r3, #20]
 800903e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009042:	2b40      	cmp	r3, #64	; 0x40
 8009044:	d136      	bne.n	80090b4 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	3314      	adds	r3, #20
 800904c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	e853 3f00 	ldrex	r3, [r3]
 8009054:	60bb      	str	r3, [r7, #8]
   return(result);
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800905c:	65bb      	str	r3, [r7, #88]	; 0x58
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	3314      	adds	r3, #20
 8009064:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009066:	61ba      	str	r2, [r7, #24]
 8009068:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906a:	6979      	ldr	r1, [r7, #20]
 800906c:	69ba      	ldr	r2, [r7, #24]
 800906e:	e841 2300 	strex	r3, r2, [r1]
 8009072:	613b      	str	r3, [r7, #16]
   return(result);
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1e5      	bne.n	8009046 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800907e:	2b00      	cmp	r3, #0
 8009080:	d018      	beq.n	80090b4 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009086:	2200      	movs	r2, #0
 8009088:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908e:	4618      	mov	r0, r3
 8009090:	f7fc fe08 	bl	8005ca4 <HAL_DMA_Abort>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00c      	beq.n	80090b4 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fd f81c 	bl	80060dc <HAL_DMA_GetError>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b20      	cmp	r3, #32
 80090a8:	d104      	bne.n	80090b4 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2210      	movs	r2, #16
 80090ae:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80090b0:	2303      	movs	r3, #3
 80090b2:	e00a      	b.n	80090ca <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2220      	movs	r2, #32
 80090be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3768      	adds	r7, #104	; 0x68
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
	...

080090d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b0ba      	sub	sp, #232	; 0xe8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80090fa:	2300      	movs	r3, #0
 80090fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009100:	2300      	movs	r3, #0
 8009102:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800910a:	f003 030f 	and.w	r3, r3, #15
 800910e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009112:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10f      	bne.n	800913a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800911a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800911e:	f003 0320 	and.w	r3, r3, #32
 8009122:	2b00      	cmp	r3, #0
 8009124:	d009      	beq.n	800913a <HAL_UART_IRQHandler+0x66>
 8009126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800912a:	f003 0320 	and.w	r3, r3, #32
 800912e:	2b00      	cmp	r3, #0
 8009130:	d003      	beq.n	800913a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 fce3 	bl	8009afe <UART_Receive_IT>
      return;
 8009138:	e25b      	b.n	80095f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800913a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800913e:	2b00      	cmp	r3, #0
 8009140:	f000 80e1 	beq.w	8009306 <HAL_UART_IRQHandler+0x232>
 8009144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009148:	f003 0301 	and.w	r3, r3, #1
 800914c:	2b00      	cmp	r3, #0
 800914e:	d106      	bne.n	800915e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009154:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009158:	2b00      	cmp	r3, #0
 800915a:	f000 80d4 	beq.w	8009306 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800915e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009162:	f003 0301 	and.w	r3, r3, #1
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00b      	beq.n	8009182 <HAL_UART_IRQHandler+0xae>
 800916a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800916e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009172:	2b00      	cmp	r3, #0
 8009174:	d005      	beq.n	8009182 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917a:	f043 0201 	orr.w	r2, r3, #1
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009186:	f003 0304 	and.w	r3, r3, #4
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00b      	beq.n	80091a6 <HAL_UART_IRQHandler+0xd2>
 800918e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009192:	f003 0301 	and.w	r3, r3, #1
 8009196:	2b00      	cmp	r3, #0
 8009198:	d005      	beq.n	80091a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919e:	f043 0202 	orr.w	r2, r3, #2
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80091a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091aa:	f003 0302 	and.w	r3, r3, #2
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00b      	beq.n	80091ca <HAL_UART_IRQHandler+0xf6>
 80091b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091b6:	f003 0301 	and.w	r3, r3, #1
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d005      	beq.n	80091ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c2:	f043 0204 	orr.w	r2, r3, #4
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80091ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091ce:	f003 0308 	and.w	r3, r3, #8
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d011      	beq.n	80091fa <HAL_UART_IRQHandler+0x126>
 80091d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091da:	f003 0320 	and.w	r3, r3, #32
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d105      	bne.n	80091ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80091e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091e6:	f003 0301 	and.w	r3, r3, #1
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d005      	beq.n	80091fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f2:	f043 0208 	orr.w	r2, r3, #8
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091fe:	2b00      	cmp	r3, #0
 8009200:	f000 81f2 	beq.w	80095e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009208:	f003 0320 	and.w	r3, r3, #32
 800920c:	2b00      	cmp	r3, #0
 800920e:	d008      	beq.n	8009222 <HAL_UART_IRQHandler+0x14e>
 8009210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009214:	f003 0320 	and.w	r3, r3, #32
 8009218:	2b00      	cmp	r3, #0
 800921a:	d002      	beq.n	8009222 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 fc6e 	bl	8009afe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	695b      	ldr	r3, [r3, #20]
 8009228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800922c:	2b40      	cmp	r3, #64	; 0x40
 800922e:	bf0c      	ite	eq
 8009230:	2301      	moveq	r3, #1
 8009232:	2300      	movne	r3, #0
 8009234:	b2db      	uxtb	r3, r3
 8009236:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800923e:	f003 0308 	and.w	r3, r3, #8
 8009242:	2b00      	cmp	r3, #0
 8009244:	d103      	bne.n	800924e <HAL_UART_IRQHandler+0x17a>
 8009246:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800924a:	2b00      	cmp	r3, #0
 800924c:	d051      	beq.n	80092f2 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 fb74 	bl	800993c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	695b      	ldr	r3, [r3, #20]
 800925a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800925e:	2b40      	cmp	r3, #64	; 0x40
 8009260:	d142      	bne.n	80092e8 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	3314      	adds	r3, #20
 8009268:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009270:	e853 3f00 	ldrex	r3, [r3]
 8009274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009278:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800927c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009280:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	3314      	adds	r3, #20
 800928a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800928e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009292:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009296:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800929a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800929e:	e841 2300 	strex	r3, r2, [r1]
 80092a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80092a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1d9      	bne.n	8009262 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d013      	beq.n	80092de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ba:	4a7f      	ldr	r2, [pc, #508]	; (80094b8 <HAL_UART_IRQHandler+0x3e4>)
 80092bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7fc fd5e 	bl	8005d84 <HAL_DMA_Abort_IT>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d019      	beq.n	8009302 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80092d8:	4610      	mov	r0, r2
 80092da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092dc:	e011      	b.n	8009302 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092e6:	e00c      	b.n	8009302 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092f0:	e007      	b.n	8009302 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009300:	e172      	b.n	80095e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009302:	bf00      	nop
    return;
 8009304:	e170      	b.n	80095e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800930a:	2b01      	cmp	r3, #1
 800930c:	f040 814c 	bne.w	80095a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009314:	f003 0310 	and.w	r3, r3, #16
 8009318:	2b00      	cmp	r3, #0
 800931a:	f000 8145 	beq.w	80095a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800931e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009322:	f003 0310 	and.w	r3, r3, #16
 8009326:	2b00      	cmp	r3, #0
 8009328:	f000 813e 	beq.w	80095a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800932c:	2300      	movs	r3, #0
 800932e:	60bb      	str	r3, [r7, #8]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	60bb      	str	r3, [r7, #8]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	60bb      	str	r3, [r7, #8]
 8009340:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	695b      	ldr	r3, [r3, #20]
 8009348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800934c:	2b40      	cmp	r3, #64	; 0x40
 800934e:	f040 80b5 	bne.w	80094bc <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800935e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009362:	2b00      	cmp	r3, #0
 8009364:	f000 8142 	beq.w	80095ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800936c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009370:	429a      	cmp	r2, r3
 8009372:	f080 813b 	bcs.w	80095ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800937c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009382:	69db      	ldr	r3, [r3, #28]
 8009384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009388:	f000 8088 	beq.w	800949c <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	330c      	adds	r3, #12
 8009392:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009396:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800939a:	e853 3f00 	ldrex	r3, [r3]
 800939e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80093a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80093a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	330c      	adds	r3, #12
 80093b4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80093b8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80093bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80093c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80093c8:	e841 2300 	strex	r3, r2, [r1]
 80093cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80093d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1d9      	bne.n	800938c <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	3314      	adds	r3, #20
 80093de:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093e2:	e853 3f00 	ldrex	r3, [r3]
 80093e6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80093e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093ea:	f023 0301 	bic.w	r3, r3, #1
 80093ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	3314      	adds	r3, #20
 80093f8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80093fc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009400:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009402:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009404:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009408:	e841 2300 	strex	r3, r2, [r1]
 800940c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800940e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1e1      	bne.n	80093d8 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	3314      	adds	r3, #20
 800941a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800941e:	e853 3f00 	ldrex	r3, [r3]
 8009422:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800942a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	3314      	adds	r3, #20
 8009434:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009438:	66fa      	str	r2, [r7, #108]	; 0x6c
 800943a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800943e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009440:	e841 2300 	strex	r3, r2, [r1]
 8009444:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009446:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1e3      	bne.n	8009414 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2220      	movs	r2, #32
 8009450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	330c      	adds	r3, #12
 8009460:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009464:	e853 3f00 	ldrex	r3, [r3]
 8009468:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800946a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800946c:	f023 0310 	bic.w	r3, r3, #16
 8009470:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	330c      	adds	r3, #12
 800947a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800947e:	65ba      	str	r2, [r7, #88]	; 0x58
 8009480:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009482:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009484:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009486:	e841 2300 	strex	r3, r2, [r1]
 800948a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800948c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1e3      	bne.n	800945a <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009496:	4618      	mov	r0, r3
 8009498:	f7fc fc04 	bl	8005ca4 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80094a8:	b292      	uxth	r2, r2
 80094aa:	1a8a      	subs	r2, r1, r2
 80094ac:	b292      	uxth	r2, r2
 80094ae:	4611      	mov	r1, r2
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80094b4:	e09a      	b.n	80095ec <HAL_UART_IRQHandler+0x518>
 80094b6:	bf00      	nop
 80094b8:	08009a03 	.word	0x08009a03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	1ad3      	subs	r3, r2, r3
 80094c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f000 808c 	beq.w	80095f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80094d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f000 8087 	beq.w	80095f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	330c      	adds	r3, #12
 80094e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ec:	e853 3f00 	ldrex	r3, [r3]
 80094f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	330c      	adds	r3, #12
 8009502:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009506:	647a      	str	r2, [r7, #68]	; 0x44
 8009508:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800950c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800950e:	e841 2300 	strex	r3, r2, [r1]
 8009512:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1e3      	bne.n	80094e2 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	3314      	adds	r3, #20
 8009520:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009524:	e853 3f00 	ldrex	r3, [r3]
 8009528:	623b      	str	r3, [r7, #32]
   return(result);
 800952a:	6a3b      	ldr	r3, [r7, #32]
 800952c:	f023 0301 	bic.w	r3, r3, #1
 8009530:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	3314      	adds	r3, #20
 800953a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800953e:	633a      	str	r2, [r7, #48]	; 0x30
 8009540:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009542:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009546:	e841 2300 	strex	r3, r2, [r1]
 800954a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800954c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1e3      	bne.n	800951a <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2220      	movs	r2, #32
 8009556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	330c      	adds	r3, #12
 8009566:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	e853 3f00 	ldrex	r3, [r3]
 800956e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f023 0310 	bic.w	r3, r3, #16
 8009576:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	330c      	adds	r3, #12
 8009580:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009584:	61fa      	str	r2, [r7, #28]
 8009586:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009588:	69b9      	ldr	r1, [r7, #24]
 800958a:	69fa      	ldr	r2, [r7, #28]
 800958c:	e841 2300 	strex	r3, r2, [r1]
 8009590:	617b      	str	r3, [r7, #20]
   return(result);
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1e3      	bne.n	8009560 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800959c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80095a0:	4611      	mov	r1, r2
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80095a6:	e023      	b.n	80095f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80095a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d009      	beq.n	80095c8 <HAL_UART_IRQHandler+0x4f4>
 80095b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d003      	beq.n	80095c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fa33 	bl	8009a2c <UART_Transmit_IT>
    return;
 80095c6:	e014      	b.n	80095f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80095c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d00e      	beq.n	80095f2 <HAL_UART_IRQHandler+0x51e>
 80095d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d008      	beq.n	80095f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 fa73 	bl	8009acc <UART_EndTransmit_IT>
    return;
 80095e6:	e004      	b.n	80095f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80095e8:	bf00      	nop
 80095ea:	e002      	b.n	80095f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80095ec:	bf00      	nop
 80095ee:	e000      	b.n	80095f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80095f0:	bf00      	nop
  }
}
 80095f2:	37e8      	adds	r7, #232	; 0xe8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009600:	bf00      	nop
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009614:	bf00      	nop
 8009616:	370c      	adds	r7, #12
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009628:	bf00      	nop
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800963c:	bf00      	nop
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009650:	bf00      	nop
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009664:	bf00      	nop
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800968c:	bf00      	nop
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	460b      	mov	r3, r1
 80096a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80096a4:	bf00      	nop
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a10      	ldr	r2, [pc, #64]	; (80096fc <UART_InitCallbacksToDefault+0x4c>)
 80096bc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a0f      	ldr	r2, [pc, #60]	; (8009700 <UART_InitCallbacksToDefault+0x50>)
 80096c2:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a0f      	ldr	r2, [pc, #60]	; (8009704 <UART_InitCallbacksToDefault+0x54>)
 80096c8:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a0e      	ldr	r2, [pc, #56]	; (8009708 <UART_InitCallbacksToDefault+0x58>)
 80096ce:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a0e      	ldr	r2, [pc, #56]	; (800970c <UART_InitCallbacksToDefault+0x5c>)
 80096d4:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a0d      	ldr	r2, [pc, #52]	; (8009710 <UART_InitCallbacksToDefault+0x60>)
 80096da:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a0d      	ldr	r2, [pc, #52]	; (8009714 <UART_InitCallbacksToDefault+0x64>)
 80096e0:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a0c      	ldr	r2, [pc, #48]	; (8009718 <UART_InitCallbacksToDefault+0x68>)
 80096e6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	4a0c      	ldr	r2, [pc, #48]	; (800971c <UART_InitCallbacksToDefault+0x6c>)
 80096ec:	669a      	str	r2, [r3, #104]	; 0x68

}
 80096ee:	bf00      	nop
 80096f0:	370c      	adds	r7, #12
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	0800960d 	.word	0x0800960d
 8009700:	080095f9 	.word	0x080095f9
 8009704:	08009635 	.word	0x08009635
 8009708:	08009621 	.word	0x08009621
 800970c:	08009649 	.word	0x08009649
 8009710:	0800965d 	.word	0x0800965d
 8009714:	08009671 	.word	0x08009671
 8009718:	08009685 	.word	0x08009685
 800971c:	08009699 	.word	0x08009699

08009720 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b090      	sub	sp, #64	; 0x40
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009738:	2b00      	cmp	r3, #0
 800973a:	d137      	bne.n	80097ac <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800973c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800973e:	2200      	movs	r2, #0
 8009740:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	3314      	adds	r3, #20
 8009748:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800974a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974c:	e853 3f00 	ldrex	r3, [r3]
 8009750:	623b      	str	r3, [r7, #32]
   return(result);
 8009752:	6a3b      	ldr	r3, [r7, #32]
 8009754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009758:	63bb      	str	r3, [r7, #56]	; 0x38
 800975a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	3314      	adds	r3, #20
 8009760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009762:	633a      	str	r2, [r7, #48]	; 0x30
 8009764:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009766:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800976a:	e841 2300 	strex	r3, r2, [r1]
 800976e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009772:	2b00      	cmp	r3, #0
 8009774:	d1e5      	bne.n	8009742 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	330c      	adds	r3, #12
 800977c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	e853 3f00 	ldrex	r3, [r3]
 8009784:	60fb      	str	r3, [r7, #12]
   return(result);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800978c:	637b      	str	r3, [r7, #52]	; 0x34
 800978e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	330c      	adds	r3, #12
 8009794:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009796:	61fa      	str	r2, [r7, #28]
 8009798:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979a:	69b9      	ldr	r1, [r7, #24]
 800979c:	69fa      	ldr	r2, [r7, #28]
 800979e:	e841 2300 	strex	r3, r2, [r1]
 80097a2:	617b      	str	r3, [r7, #20]
   return(result);
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1e5      	bne.n	8009776 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80097aa:	e003      	b.n	80097b4 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 80097ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80097b2:	4798      	blx	r3
}
 80097b4:	bf00      	nop
 80097b6:	3740      	adds	r7, #64	; 0x40
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097d2:	bf00      	nop
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}

080097da <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80097da:	b580      	push	{r7, lr}
 80097dc:	b084      	sub	sp, #16
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80097e2:	2300      	movs	r3, #0
 80097e4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ea:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	695b      	ldr	r3, [r3, #20]
 80097f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097f6:	2b80      	cmp	r3, #128	; 0x80
 80097f8:	bf0c      	ite	eq
 80097fa:	2301      	moveq	r3, #1
 80097fc:	2300      	movne	r3, #0
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009808:	b2db      	uxtb	r3, r3
 800980a:	2b21      	cmp	r3, #33	; 0x21
 800980c:	d108      	bne.n	8009820 <UART_DMAError+0x46>
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d005      	beq.n	8009820 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	2200      	movs	r2, #0
 8009818:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800981a:	68b8      	ldr	r0, [r7, #8]
 800981c:	f000 f866 	bl	80098ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	695b      	ldr	r3, [r3, #20]
 8009826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800982a:	2b40      	cmp	r3, #64	; 0x40
 800982c:	bf0c      	ite	eq
 800982e:	2301      	moveq	r3, #1
 8009830:	2300      	movne	r3, #0
 8009832:	b2db      	uxtb	r3, r3
 8009834:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800983c:	b2db      	uxtb	r3, r3
 800983e:	2b22      	cmp	r3, #34	; 0x22
 8009840:	d108      	bne.n	8009854 <UART_DMAError+0x7a>
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d005      	beq.n	8009854 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	2200      	movs	r2, #0
 800984c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800984e:	68b8      	ldr	r0, [r7, #8]
 8009850:	f000 f874 	bl	800993c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009858:	f043 0210 	orr.w	r2, r3, #16
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009864:	68b8      	ldr	r0, [r7, #8]
 8009866:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009868:	bf00      	nop
 800986a:	3710      	adds	r7, #16
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	4613      	mov	r3, r2
 800987c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	68ba      	ldr	r2, [r7, #8]
 8009882:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	88fa      	ldrh	r2, [r7, #6]
 8009888:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	88fa      	ldrh	r2, [r7, #6]
 800988e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2200      	movs	r2, #0
 8009894:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2222      	movs	r2, #34	; 0x22
 800989a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d007      	beq.n	80098be <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68da      	ldr	r2, [r3, #12]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098bc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	695a      	ldr	r2, [r3, #20]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f042 0201 	orr.w	r2, r2, #1
 80098cc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68da      	ldr	r2, [r3, #12]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f042 0220 	orr.w	r2, r2, #32
 80098dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3714      	adds	r7, #20
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b089      	sub	sp, #36	; 0x24
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	330c      	adds	r3, #12
 80098fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	e853 3f00 	ldrex	r3, [r3]
 8009902:	60bb      	str	r3, [r7, #8]
   return(result);
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800990a:	61fb      	str	r3, [r7, #28]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	330c      	adds	r3, #12
 8009912:	69fa      	ldr	r2, [r7, #28]
 8009914:	61ba      	str	r2, [r7, #24]
 8009916:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009918:	6979      	ldr	r1, [r7, #20]
 800991a:	69ba      	ldr	r2, [r7, #24]
 800991c:	e841 2300 	strex	r3, r2, [r1]
 8009920:	613b      	str	r3, [r7, #16]
   return(result);
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d1e5      	bne.n	80098f4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2220      	movs	r2, #32
 800992c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009930:	bf00      	nop
 8009932:	3724      	adds	r7, #36	; 0x24
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800993c:	b480      	push	{r7}
 800993e:	b095      	sub	sp, #84	; 0x54
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	330c      	adds	r3, #12
 800994a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800994e:	e853 3f00 	ldrex	r3, [r3]
 8009952:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009956:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800995a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	330c      	adds	r3, #12
 8009962:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009964:	643a      	str	r2, [r7, #64]	; 0x40
 8009966:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009968:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800996a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800996c:	e841 2300 	strex	r3, r2, [r1]
 8009970:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1e5      	bne.n	8009944 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	3314      	adds	r3, #20
 800997e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009980:	6a3b      	ldr	r3, [r7, #32]
 8009982:	e853 3f00 	ldrex	r3, [r3]
 8009986:	61fb      	str	r3, [r7, #28]
   return(result);
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	f023 0301 	bic.w	r3, r3, #1
 800998e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	3314      	adds	r3, #20
 8009996:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009998:	62fa      	str	r2, [r7, #44]	; 0x2c
 800999a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800999e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099a0:	e841 2300 	strex	r3, r2, [r1]
 80099a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1e5      	bne.n	8009978 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d119      	bne.n	80099e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	330c      	adds	r3, #12
 80099ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	e853 3f00 	ldrex	r3, [r3]
 80099c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	f023 0310 	bic.w	r3, r3, #16
 80099ca:	647b      	str	r3, [r7, #68]	; 0x44
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	330c      	adds	r3, #12
 80099d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099d4:	61ba      	str	r2, [r7, #24]
 80099d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d8:	6979      	ldr	r1, [r7, #20]
 80099da:	69ba      	ldr	r2, [r7, #24]
 80099dc:	e841 2300 	strex	r3, r2, [r1]
 80099e0:	613b      	str	r3, [r7, #16]
   return(result);
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d1e5      	bne.n	80099b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2220      	movs	r2, #32
 80099ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80099f6:	bf00      	nop
 80099f8:	3754      	adds	r7, #84	; 0x54
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr

08009a02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b084      	sub	sp, #16
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2200      	movs	r2, #0
 8009a14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a24:	bf00      	nop
 8009a26:	3710      	adds	r7, #16
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b085      	sub	sp, #20
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	2b21      	cmp	r3, #33	; 0x21
 8009a3e:	d13e      	bne.n	8009abe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a48:	d114      	bne.n	8009a74 <UART_Transmit_IT+0x48>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d110      	bne.n	8009a74 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6a1b      	ldr	r3, [r3, #32]
 8009a56:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	881b      	ldrh	r3, [r3, #0]
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a66:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6a1b      	ldr	r3, [r3, #32]
 8009a6c:	1c9a      	adds	r2, r3, #2
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	621a      	str	r2, [r3, #32]
 8009a72:	e008      	b.n	8009a86 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a1b      	ldr	r3, [r3, #32]
 8009a78:	1c59      	adds	r1, r3, #1
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	6211      	str	r1, [r2, #32]
 8009a7e:	781a      	ldrb	r2, [r3, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	4619      	mov	r1, r3
 8009a94:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d10f      	bne.n	8009aba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	68da      	ldr	r2, [r3, #12]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009aa8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	68da      	ldr	r2, [r3, #12]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ab8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009aba:	2300      	movs	r3, #0
 8009abc:	e000      	b.n	8009ac0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009abe:	2302      	movs	r3, #2
  }
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3714      	adds	r7, #20
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68da      	ldr	r2, [r3, #12]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ae2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2220      	movs	r2, #32
 8009ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b08c      	sub	sp, #48	; 0x30
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	2b22      	cmp	r3, #34	; 0x22
 8009b10:	f040 80ad 	bne.w	8009c6e <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b1c:	d117      	bne.n	8009b4e <UART_Receive_IT+0x50>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d113      	bne.n	8009b4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009b26:	2300      	movs	r3, #0
 8009b28:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b2e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b46:	1c9a      	adds	r2, r3, #2
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	629a      	str	r2, [r3, #40]	; 0x28
 8009b4c:	e026      	b.n	8009b9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b52:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009b54:	2300      	movs	r3, #0
 8009b56:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b60:	d007      	beq.n	8009b72 <UART_Receive_IT+0x74>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	689b      	ldr	r3, [r3, #8]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d10a      	bne.n	8009b80 <UART_Receive_IT+0x82>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d106      	bne.n	8009b80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	b2da      	uxtb	r2, r3
 8009b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7c:	701a      	strb	r2, [r3, #0]
 8009b7e:	e008      	b.n	8009b92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b8c:	b2da      	uxtb	r2, r3
 8009b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b96:	1c5a      	adds	r2, r3, #1
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	3b01      	subs	r3, #1
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	4619      	mov	r1, r3
 8009baa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d15c      	bne.n	8009c6a <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	68da      	ldr	r2, [r3, #12]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f022 0220 	bic.w	r2, r2, #32
 8009bbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	68da      	ldr	r2, [r3, #12]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009bce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	695a      	ldr	r2, [r3, #20]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f022 0201 	bic.w	r2, r2, #1
 8009bde:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2220      	movs	r2, #32
 8009be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d136      	bne.n	8009c5e <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	330c      	adds	r3, #12
 8009bfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	e853 3f00 	ldrex	r3, [r3]
 8009c04:	613b      	str	r3, [r7, #16]
   return(result);
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	f023 0310 	bic.w	r3, r3, #16
 8009c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	330c      	adds	r3, #12
 8009c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c16:	623a      	str	r2, [r7, #32]
 8009c18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1a:	69f9      	ldr	r1, [r7, #28]
 8009c1c:	6a3a      	ldr	r2, [r7, #32]
 8009c1e:	e841 2300 	strex	r3, r2, [r1]
 8009c22:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1e5      	bne.n	8009bf6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f003 0310 	and.w	r3, r3, #16
 8009c34:	2b10      	cmp	r3, #16
 8009c36:	d10a      	bne.n	8009c4e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c38:	2300      	movs	r3, #0
 8009c3a:	60fb      	str	r3, [r7, #12]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	60fb      	str	r3, [r7, #12]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	60fb      	str	r3, [r7, #12]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8009c56:	4611      	mov	r1, r2
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	4798      	blx	r3
 8009c5c:	e003      	b.n	8009c66 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009c66:	2300      	movs	r3, #0
 8009c68:	e002      	b.n	8009c70 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	e000      	b.n	8009c70 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8009c6e:	2302      	movs	r3, #2
  }
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3730      	adds	r7, #48	; 0x30
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c7c:	b0c0      	sub	sp, #256	; 0x100
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	691b      	ldr	r3, [r3, #16]
 8009c8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c94:	68d9      	ldr	r1, [r3, #12]
 8009c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	ea40 0301 	orr.w	r3, r0, r1
 8009ca0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ca6:	689a      	ldr	r2, [r3, #8]
 8009ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	431a      	orrs	r2, r3
 8009cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cb4:	695b      	ldr	r3, [r3, #20]
 8009cb6:	431a      	orrs	r2, r3
 8009cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cbc:	69db      	ldr	r3, [r3, #28]
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009cd0:	f021 010c 	bic.w	r1, r1, #12
 8009cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009cde:	430b      	orrs	r3, r1
 8009ce0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	695b      	ldr	r3, [r3, #20]
 8009cea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cf2:	6999      	ldr	r1, [r3, #24]
 8009cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	ea40 0301 	orr.w	r3, r0, r1
 8009cfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	4b8f      	ldr	r3, [pc, #572]	; (8009f44 <UART_SetConfig+0x2cc>)
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d005      	beq.n	8009d18 <UART_SetConfig+0xa0>
 8009d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	4b8d      	ldr	r3, [pc, #564]	; (8009f48 <UART_SetConfig+0x2d0>)
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d104      	bne.n	8009d22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009d18:	f7fd fa6e 	bl	80071f8 <HAL_RCC_GetPCLK2Freq>
 8009d1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009d20:	e003      	b.n	8009d2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009d22:	f7fd fa55 	bl	80071d0 <HAL_RCC_GetPCLK1Freq>
 8009d26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d2e:	69db      	ldr	r3, [r3, #28]
 8009d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d34:	f040 810c 	bne.w	8009f50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009d38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009d42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009d46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009d4a:	4622      	mov	r2, r4
 8009d4c:	462b      	mov	r3, r5
 8009d4e:	1891      	adds	r1, r2, r2
 8009d50:	65b9      	str	r1, [r7, #88]	; 0x58
 8009d52:	415b      	adcs	r3, r3
 8009d54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009d5a:	4621      	mov	r1, r4
 8009d5c:	eb12 0801 	adds.w	r8, r2, r1
 8009d60:	4629      	mov	r1, r5
 8009d62:	eb43 0901 	adc.w	r9, r3, r1
 8009d66:	f04f 0200 	mov.w	r2, #0
 8009d6a:	f04f 0300 	mov.w	r3, #0
 8009d6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009d72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009d76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009d7a:	4690      	mov	r8, r2
 8009d7c:	4699      	mov	r9, r3
 8009d7e:	4623      	mov	r3, r4
 8009d80:	eb18 0303 	adds.w	r3, r8, r3
 8009d84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009d88:	462b      	mov	r3, r5
 8009d8a:	eb49 0303 	adc.w	r3, r9, r3
 8009d8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009d9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009da2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009da6:	460b      	mov	r3, r1
 8009da8:	18db      	adds	r3, r3, r3
 8009daa:	653b      	str	r3, [r7, #80]	; 0x50
 8009dac:	4613      	mov	r3, r2
 8009dae:	eb42 0303 	adc.w	r3, r2, r3
 8009db2:	657b      	str	r3, [r7, #84]	; 0x54
 8009db4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009db8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009dbc:	f7f6 fef0 	bl	8000ba0 <__aeabi_uldivmod>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	4b61      	ldr	r3, [pc, #388]	; (8009f4c <UART_SetConfig+0x2d4>)
 8009dc6:	fba3 2302 	umull	r2, r3, r3, r2
 8009dca:	095b      	lsrs	r3, r3, #5
 8009dcc:	011c      	lsls	r4, r3, #4
 8009dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009dd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009ddc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009de0:	4642      	mov	r2, r8
 8009de2:	464b      	mov	r3, r9
 8009de4:	1891      	adds	r1, r2, r2
 8009de6:	64b9      	str	r1, [r7, #72]	; 0x48
 8009de8:	415b      	adcs	r3, r3
 8009dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009dec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009df0:	4641      	mov	r1, r8
 8009df2:	eb12 0a01 	adds.w	sl, r2, r1
 8009df6:	4649      	mov	r1, r9
 8009df8:	eb43 0b01 	adc.w	fp, r3, r1
 8009dfc:	f04f 0200 	mov.w	r2, #0
 8009e00:	f04f 0300 	mov.w	r3, #0
 8009e04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009e08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009e0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e10:	4692      	mov	sl, r2
 8009e12:	469b      	mov	fp, r3
 8009e14:	4643      	mov	r3, r8
 8009e16:	eb1a 0303 	adds.w	r3, sl, r3
 8009e1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e1e:	464b      	mov	r3, r9
 8009e20:	eb4b 0303 	adc.w	r3, fp, r3
 8009e24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009e38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	18db      	adds	r3, r3, r3
 8009e40:	643b      	str	r3, [r7, #64]	; 0x40
 8009e42:	4613      	mov	r3, r2
 8009e44:	eb42 0303 	adc.w	r3, r2, r3
 8009e48:	647b      	str	r3, [r7, #68]	; 0x44
 8009e4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009e4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009e52:	f7f6 fea5 	bl	8000ba0 <__aeabi_uldivmod>
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	4611      	mov	r1, r2
 8009e5c:	4b3b      	ldr	r3, [pc, #236]	; (8009f4c <UART_SetConfig+0x2d4>)
 8009e5e:	fba3 2301 	umull	r2, r3, r3, r1
 8009e62:	095b      	lsrs	r3, r3, #5
 8009e64:	2264      	movs	r2, #100	; 0x64
 8009e66:	fb02 f303 	mul.w	r3, r2, r3
 8009e6a:	1acb      	subs	r3, r1, r3
 8009e6c:	00db      	lsls	r3, r3, #3
 8009e6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009e72:	4b36      	ldr	r3, [pc, #216]	; (8009f4c <UART_SetConfig+0x2d4>)
 8009e74:	fba3 2302 	umull	r2, r3, r3, r2
 8009e78:	095b      	lsrs	r3, r3, #5
 8009e7a:	005b      	lsls	r3, r3, #1
 8009e7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009e80:	441c      	add	r4, r3
 8009e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e86:	2200      	movs	r2, #0
 8009e88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009e90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009e94:	4642      	mov	r2, r8
 8009e96:	464b      	mov	r3, r9
 8009e98:	1891      	adds	r1, r2, r2
 8009e9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8009e9c:	415b      	adcs	r3, r3
 8009e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ea0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009ea4:	4641      	mov	r1, r8
 8009ea6:	1851      	adds	r1, r2, r1
 8009ea8:	6339      	str	r1, [r7, #48]	; 0x30
 8009eaa:	4649      	mov	r1, r9
 8009eac:	414b      	adcs	r3, r1
 8009eae:	637b      	str	r3, [r7, #52]	; 0x34
 8009eb0:	f04f 0200 	mov.w	r2, #0
 8009eb4:	f04f 0300 	mov.w	r3, #0
 8009eb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009ebc:	4659      	mov	r1, fp
 8009ebe:	00cb      	lsls	r3, r1, #3
 8009ec0:	4651      	mov	r1, sl
 8009ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ec6:	4651      	mov	r1, sl
 8009ec8:	00ca      	lsls	r2, r1, #3
 8009eca:	4610      	mov	r0, r2
 8009ecc:	4619      	mov	r1, r3
 8009ece:	4603      	mov	r3, r0
 8009ed0:	4642      	mov	r2, r8
 8009ed2:	189b      	adds	r3, r3, r2
 8009ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ed8:	464b      	mov	r3, r9
 8009eda:	460a      	mov	r2, r1
 8009edc:	eb42 0303 	adc.w	r3, r2, r3
 8009ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009ef0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009ef4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009ef8:	460b      	mov	r3, r1
 8009efa:	18db      	adds	r3, r3, r3
 8009efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8009efe:	4613      	mov	r3, r2
 8009f00:	eb42 0303 	adc.w	r3, r2, r3
 8009f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009f0e:	f7f6 fe47 	bl	8000ba0 <__aeabi_uldivmod>
 8009f12:	4602      	mov	r2, r0
 8009f14:	460b      	mov	r3, r1
 8009f16:	4b0d      	ldr	r3, [pc, #52]	; (8009f4c <UART_SetConfig+0x2d4>)
 8009f18:	fba3 1302 	umull	r1, r3, r3, r2
 8009f1c:	095b      	lsrs	r3, r3, #5
 8009f1e:	2164      	movs	r1, #100	; 0x64
 8009f20:	fb01 f303 	mul.w	r3, r1, r3
 8009f24:	1ad3      	subs	r3, r2, r3
 8009f26:	00db      	lsls	r3, r3, #3
 8009f28:	3332      	adds	r3, #50	; 0x32
 8009f2a:	4a08      	ldr	r2, [pc, #32]	; (8009f4c <UART_SetConfig+0x2d4>)
 8009f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f30:	095b      	lsrs	r3, r3, #5
 8009f32:	f003 0207 	and.w	r2, r3, #7
 8009f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4422      	add	r2, r4
 8009f3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009f40:	e105      	b.n	800a14e <UART_SetConfig+0x4d6>
 8009f42:	bf00      	nop
 8009f44:	40011000 	.word	0x40011000
 8009f48:	40011400 	.word	0x40011400
 8009f4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f54:	2200      	movs	r2, #0
 8009f56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009f5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009f5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009f62:	4642      	mov	r2, r8
 8009f64:	464b      	mov	r3, r9
 8009f66:	1891      	adds	r1, r2, r2
 8009f68:	6239      	str	r1, [r7, #32]
 8009f6a:	415b      	adcs	r3, r3
 8009f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8009f6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009f72:	4641      	mov	r1, r8
 8009f74:	1854      	adds	r4, r2, r1
 8009f76:	4649      	mov	r1, r9
 8009f78:	eb43 0501 	adc.w	r5, r3, r1
 8009f7c:	f04f 0200 	mov.w	r2, #0
 8009f80:	f04f 0300 	mov.w	r3, #0
 8009f84:	00eb      	lsls	r3, r5, #3
 8009f86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f8a:	00e2      	lsls	r2, r4, #3
 8009f8c:	4614      	mov	r4, r2
 8009f8e:	461d      	mov	r5, r3
 8009f90:	4643      	mov	r3, r8
 8009f92:	18e3      	adds	r3, r4, r3
 8009f94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009f98:	464b      	mov	r3, r9
 8009f9a:	eb45 0303 	adc.w	r3, r5, r3
 8009f9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009fae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009fb2:	f04f 0200 	mov.w	r2, #0
 8009fb6:	f04f 0300 	mov.w	r3, #0
 8009fba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009fbe:	4629      	mov	r1, r5
 8009fc0:	008b      	lsls	r3, r1, #2
 8009fc2:	4621      	mov	r1, r4
 8009fc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fc8:	4621      	mov	r1, r4
 8009fca:	008a      	lsls	r2, r1, #2
 8009fcc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009fd0:	f7f6 fde6 	bl	8000ba0 <__aeabi_uldivmod>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	4b60      	ldr	r3, [pc, #384]	; (800a15c <UART_SetConfig+0x4e4>)
 8009fda:	fba3 2302 	umull	r2, r3, r3, r2
 8009fde:	095b      	lsrs	r3, r3, #5
 8009fe0:	011c      	lsls	r4, r3, #4
 8009fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009fec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009ff0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009ff4:	4642      	mov	r2, r8
 8009ff6:	464b      	mov	r3, r9
 8009ff8:	1891      	adds	r1, r2, r2
 8009ffa:	61b9      	str	r1, [r7, #24]
 8009ffc:	415b      	adcs	r3, r3
 8009ffe:	61fb      	str	r3, [r7, #28]
 800a000:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a004:	4641      	mov	r1, r8
 800a006:	1851      	adds	r1, r2, r1
 800a008:	6139      	str	r1, [r7, #16]
 800a00a:	4649      	mov	r1, r9
 800a00c:	414b      	adcs	r3, r1
 800a00e:	617b      	str	r3, [r7, #20]
 800a010:	f04f 0200 	mov.w	r2, #0
 800a014:	f04f 0300 	mov.w	r3, #0
 800a018:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a01c:	4659      	mov	r1, fp
 800a01e:	00cb      	lsls	r3, r1, #3
 800a020:	4651      	mov	r1, sl
 800a022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a026:	4651      	mov	r1, sl
 800a028:	00ca      	lsls	r2, r1, #3
 800a02a:	4610      	mov	r0, r2
 800a02c:	4619      	mov	r1, r3
 800a02e:	4603      	mov	r3, r0
 800a030:	4642      	mov	r2, r8
 800a032:	189b      	adds	r3, r3, r2
 800a034:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a038:	464b      	mov	r3, r9
 800a03a:	460a      	mov	r2, r1
 800a03c:	eb42 0303 	adc.w	r3, r2, r3
 800a040:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	2200      	movs	r2, #0
 800a04c:	67bb      	str	r3, [r7, #120]	; 0x78
 800a04e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a050:	f04f 0200 	mov.w	r2, #0
 800a054:	f04f 0300 	mov.w	r3, #0
 800a058:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a05c:	4649      	mov	r1, r9
 800a05e:	008b      	lsls	r3, r1, #2
 800a060:	4641      	mov	r1, r8
 800a062:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a066:	4641      	mov	r1, r8
 800a068:	008a      	lsls	r2, r1, #2
 800a06a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a06e:	f7f6 fd97 	bl	8000ba0 <__aeabi_uldivmod>
 800a072:	4602      	mov	r2, r0
 800a074:	460b      	mov	r3, r1
 800a076:	4b39      	ldr	r3, [pc, #228]	; (800a15c <UART_SetConfig+0x4e4>)
 800a078:	fba3 1302 	umull	r1, r3, r3, r2
 800a07c:	095b      	lsrs	r3, r3, #5
 800a07e:	2164      	movs	r1, #100	; 0x64
 800a080:	fb01 f303 	mul.w	r3, r1, r3
 800a084:	1ad3      	subs	r3, r2, r3
 800a086:	011b      	lsls	r3, r3, #4
 800a088:	3332      	adds	r3, #50	; 0x32
 800a08a:	4a34      	ldr	r2, [pc, #208]	; (800a15c <UART_SetConfig+0x4e4>)
 800a08c:	fba2 2303 	umull	r2, r3, r2, r3
 800a090:	095b      	lsrs	r3, r3, #5
 800a092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a096:	441c      	add	r4, r3
 800a098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a09c:	2200      	movs	r2, #0
 800a09e:	673b      	str	r3, [r7, #112]	; 0x70
 800a0a0:	677a      	str	r2, [r7, #116]	; 0x74
 800a0a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a0a6:	4642      	mov	r2, r8
 800a0a8:	464b      	mov	r3, r9
 800a0aa:	1891      	adds	r1, r2, r2
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	415b      	adcs	r3, r3
 800a0b0:	60fb      	str	r3, [r7, #12]
 800a0b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a0b6:	4641      	mov	r1, r8
 800a0b8:	1851      	adds	r1, r2, r1
 800a0ba:	6039      	str	r1, [r7, #0]
 800a0bc:	4649      	mov	r1, r9
 800a0be:	414b      	adcs	r3, r1
 800a0c0:	607b      	str	r3, [r7, #4]
 800a0c2:	f04f 0200 	mov.w	r2, #0
 800a0c6:	f04f 0300 	mov.w	r3, #0
 800a0ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a0ce:	4659      	mov	r1, fp
 800a0d0:	00cb      	lsls	r3, r1, #3
 800a0d2:	4651      	mov	r1, sl
 800a0d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a0d8:	4651      	mov	r1, sl
 800a0da:	00ca      	lsls	r2, r1, #3
 800a0dc:	4610      	mov	r0, r2
 800a0de:	4619      	mov	r1, r3
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	4642      	mov	r2, r8
 800a0e4:	189b      	adds	r3, r3, r2
 800a0e6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0e8:	464b      	mov	r3, r9
 800a0ea:	460a      	mov	r2, r1
 800a0ec:	eb42 0303 	adc.w	r3, r2, r3
 800a0f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a0f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	663b      	str	r3, [r7, #96]	; 0x60
 800a0fc:	667a      	str	r2, [r7, #100]	; 0x64
 800a0fe:	f04f 0200 	mov.w	r2, #0
 800a102:	f04f 0300 	mov.w	r3, #0
 800a106:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a10a:	4649      	mov	r1, r9
 800a10c:	008b      	lsls	r3, r1, #2
 800a10e:	4641      	mov	r1, r8
 800a110:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a114:	4641      	mov	r1, r8
 800a116:	008a      	lsls	r2, r1, #2
 800a118:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a11c:	f7f6 fd40 	bl	8000ba0 <__aeabi_uldivmod>
 800a120:	4602      	mov	r2, r0
 800a122:	460b      	mov	r3, r1
 800a124:	4b0d      	ldr	r3, [pc, #52]	; (800a15c <UART_SetConfig+0x4e4>)
 800a126:	fba3 1302 	umull	r1, r3, r3, r2
 800a12a:	095b      	lsrs	r3, r3, #5
 800a12c:	2164      	movs	r1, #100	; 0x64
 800a12e:	fb01 f303 	mul.w	r3, r1, r3
 800a132:	1ad3      	subs	r3, r2, r3
 800a134:	011b      	lsls	r3, r3, #4
 800a136:	3332      	adds	r3, #50	; 0x32
 800a138:	4a08      	ldr	r2, [pc, #32]	; (800a15c <UART_SetConfig+0x4e4>)
 800a13a:	fba2 2303 	umull	r2, r3, r2, r3
 800a13e:	095b      	lsrs	r3, r3, #5
 800a140:	f003 020f 	and.w	r2, r3, #15
 800a144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4422      	add	r2, r4
 800a14c:	609a      	str	r2, [r3, #8]
}
 800a14e:	bf00      	nop
 800a150:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a154:	46bd      	mov	sp, r7
 800a156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a15a:	bf00      	nop
 800a15c:	51eb851f 	.word	0x51eb851f

0800a160 <calloc>:
 800a160:	4b02      	ldr	r3, [pc, #8]	; (800a16c <calloc+0xc>)
 800a162:	460a      	mov	r2, r1
 800a164:	4601      	mov	r1, r0
 800a166:	6818      	ldr	r0, [r3, #0]
 800a168:	f000 b852 	b.w	800a210 <_calloc_r>
 800a16c:	20000364 	.word	0x20000364

0800a170 <__errno>:
 800a170:	4b01      	ldr	r3, [pc, #4]	; (800a178 <__errno+0x8>)
 800a172:	6818      	ldr	r0, [r3, #0]
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	20000364 	.word	0x20000364

0800a17c <__libc_init_array>:
 800a17c:	b570      	push	{r4, r5, r6, lr}
 800a17e:	4d0d      	ldr	r5, [pc, #52]	; (800a1b4 <__libc_init_array+0x38>)
 800a180:	4c0d      	ldr	r4, [pc, #52]	; (800a1b8 <__libc_init_array+0x3c>)
 800a182:	1b64      	subs	r4, r4, r5
 800a184:	10a4      	asrs	r4, r4, #2
 800a186:	2600      	movs	r6, #0
 800a188:	42a6      	cmp	r6, r4
 800a18a:	d109      	bne.n	800a1a0 <__libc_init_array+0x24>
 800a18c:	4d0b      	ldr	r5, [pc, #44]	; (800a1bc <__libc_init_array+0x40>)
 800a18e:	4c0c      	ldr	r4, [pc, #48]	; (800a1c0 <__libc_init_array+0x44>)
 800a190:	f002 fb48 	bl	800c824 <_init>
 800a194:	1b64      	subs	r4, r4, r5
 800a196:	10a4      	asrs	r4, r4, #2
 800a198:	2600      	movs	r6, #0
 800a19a:	42a6      	cmp	r6, r4
 800a19c:	d105      	bne.n	800a1aa <__libc_init_array+0x2e>
 800a19e:	bd70      	pop	{r4, r5, r6, pc}
 800a1a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1a4:	4798      	blx	r3
 800a1a6:	3601      	adds	r6, #1
 800a1a8:	e7ee      	b.n	800a188 <__libc_init_array+0xc>
 800a1aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1ae:	4798      	blx	r3
 800a1b0:	3601      	adds	r6, #1
 800a1b2:	e7f2      	b.n	800a19a <__libc_init_array+0x1e>
 800a1b4:	0800ca78 	.word	0x0800ca78
 800a1b8:	0800ca78 	.word	0x0800ca78
 800a1bc:	0800ca78 	.word	0x0800ca78
 800a1c0:	0800ca7c 	.word	0x0800ca7c

0800a1c4 <malloc>:
 800a1c4:	4b02      	ldr	r3, [pc, #8]	; (800a1d0 <malloc+0xc>)
 800a1c6:	4601      	mov	r1, r0
 800a1c8:	6818      	ldr	r0, [r3, #0]
 800a1ca:	f000 b8a3 	b.w	800a314 <_malloc_r>
 800a1ce:	bf00      	nop
 800a1d0:	20000364 	.word	0x20000364

0800a1d4 <free>:
 800a1d4:	4b02      	ldr	r3, [pc, #8]	; (800a1e0 <free+0xc>)
 800a1d6:	4601      	mov	r1, r0
 800a1d8:	6818      	ldr	r0, [r3, #0]
 800a1da:	f000 b82f 	b.w	800a23c <_free_r>
 800a1de:	bf00      	nop
 800a1e0:	20000364 	.word	0x20000364

0800a1e4 <memcpy>:
 800a1e4:	440a      	add	r2, r1
 800a1e6:	4291      	cmp	r1, r2
 800a1e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1ec:	d100      	bne.n	800a1f0 <memcpy+0xc>
 800a1ee:	4770      	bx	lr
 800a1f0:	b510      	push	{r4, lr}
 800a1f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1fa:	4291      	cmp	r1, r2
 800a1fc:	d1f9      	bne.n	800a1f2 <memcpy+0xe>
 800a1fe:	bd10      	pop	{r4, pc}

0800a200 <memset>:
 800a200:	4402      	add	r2, r0
 800a202:	4603      	mov	r3, r0
 800a204:	4293      	cmp	r3, r2
 800a206:	d100      	bne.n	800a20a <memset+0xa>
 800a208:	4770      	bx	lr
 800a20a:	f803 1b01 	strb.w	r1, [r3], #1
 800a20e:	e7f9      	b.n	800a204 <memset+0x4>

0800a210 <_calloc_r>:
 800a210:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a212:	fba1 2402 	umull	r2, r4, r1, r2
 800a216:	b94c      	cbnz	r4, 800a22c <_calloc_r+0x1c>
 800a218:	4611      	mov	r1, r2
 800a21a:	9201      	str	r2, [sp, #4]
 800a21c:	f000 f87a 	bl	800a314 <_malloc_r>
 800a220:	9a01      	ldr	r2, [sp, #4]
 800a222:	4605      	mov	r5, r0
 800a224:	b930      	cbnz	r0, 800a234 <_calloc_r+0x24>
 800a226:	4628      	mov	r0, r5
 800a228:	b003      	add	sp, #12
 800a22a:	bd30      	pop	{r4, r5, pc}
 800a22c:	220c      	movs	r2, #12
 800a22e:	6002      	str	r2, [r0, #0]
 800a230:	2500      	movs	r5, #0
 800a232:	e7f8      	b.n	800a226 <_calloc_r+0x16>
 800a234:	4621      	mov	r1, r4
 800a236:	f7ff ffe3 	bl	800a200 <memset>
 800a23a:	e7f4      	b.n	800a226 <_calloc_r+0x16>

0800a23c <_free_r>:
 800a23c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a23e:	2900      	cmp	r1, #0
 800a240:	d044      	beq.n	800a2cc <_free_r+0x90>
 800a242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a246:	9001      	str	r0, [sp, #4]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f1a1 0404 	sub.w	r4, r1, #4
 800a24e:	bfb8      	it	lt
 800a250:	18e4      	addlt	r4, r4, r3
 800a252:	f000 f8e3 	bl	800a41c <__malloc_lock>
 800a256:	4a1e      	ldr	r2, [pc, #120]	; (800a2d0 <_free_r+0x94>)
 800a258:	9801      	ldr	r0, [sp, #4]
 800a25a:	6813      	ldr	r3, [r2, #0]
 800a25c:	b933      	cbnz	r3, 800a26c <_free_r+0x30>
 800a25e:	6063      	str	r3, [r4, #4]
 800a260:	6014      	str	r4, [r2, #0]
 800a262:	b003      	add	sp, #12
 800a264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a268:	f000 b8de 	b.w	800a428 <__malloc_unlock>
 800a26c:	42a3      	cmp	r3, r4
 800a26e:	d908      	bls.n	800a282 <_free_r+0x46>
 800a270:	6825      	ldr	r5, [r4, #0]
 800a272:	1961      	adds	r1, r4, r5
 800a274:	428b      	cmp	r3, r1
 800a276:	bf01      	itttt	eq
 800a278:	6819      	ldreq	r1, [r3, #0]
 800a27a:	685b      	ldreq	r3, [r3, #4]
 800a27c:	1949      	addeq	r1, r1, r5
 800a27e:	6021      	streq	r1, [r4, #0]
 800a280:	e7ed      	b.n	800a25e <_free_r+0x22>
 800a282:	461a      	mov	r2, r3
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	b10b      	cbz	r3, 800a28c <_free_r+0x50>
 800a288:	42a3      	cmp	r3, r4
 800a28a:	d9fa      	bls.n	800a282 <_free_r+0x46>
 800a28c:	6811      	ldr	r1, [r2, #0]
 800a28e:	1855      	adds	r5, r2, r1
 800a290:	42a5      	cmp	r5, r4
 800a292:	d10b      	bne.n	800a2ac <_free_r+0x70>
 800a294:	6824      	ldr	r4, [r4, #0]
 800a296:	4421      	add	r1, r4
 800a298:	1854      	adds	r4, r2, r1
 800a29a:	42a3      	cmp	r3, r4
 800a29c:	6011      	str	r1, [r2, #0]
 800a29e:	d1e0      	bne.n	800a262 <_free_r+0x26>
 800a2a0:	681c      	ldr	r4, [r3, #0]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	6053      	str	r3, [r2, #4]
 800a2a6:	4421      	add	r1, r4
 800a2a8:	6011      	str	r1, [r2, #0]
 800a2aa:	e7da      	b.n	800a262 <_free_r+0x26>
 800a2ac:	d902      	bls.n	800a2b4 <_free_r+0x78>
 800a2ae:	230c      	movs	r3, #12
 800a2b0:	6003      	str	r3, [r0, #0]
 800a2b2:	e7d6      	b.n	800a262 <_free_r+0x26>
 800a2b4:	6825      	ldr	r5, [r4, #0]
 800a2b6:	1961      	adds	r1, r4, r5
 800a2b8:	428b      	cmp	r3, r1
 800a2ba:	bf04      	itt	eq
 800a2bc:	6819      	ldreq	r1, [r3, #0]
 800a2be:	685b      	ldreq	r3, [r3, #4]
 800a2c0:	6063      	str	r3, [r4, #4]
 800a2c2:	bf04      	itt	eq
 800a2c4:	1949      	addeq	r1, r1, r5
 800a2c6:	6021      	streq	r1, [r4, #0]
 800a2c8:	6054      	str	r4, [r2, #4]
 800a2ca:	e7ca      	b.n	800a262 <_free_r+0x26>
 800a2cc:	b003      	add	sp, #12
 800a2ce:	bd30      	pop	{r4, r5, pc}
 800a2d0:	20001338 	.word	0x20001338

0800a2d4 <sbrk_aligned>:
 800a2d4:	b570      	push	{r4, r5, r6, lr}
 800a2d6:	4e0e      	ldr	r6, [pc, #56]	; (800a310 <sbrk_aligned+0x3c>)
 800a2d8:	460c      	mov	r4, r1
 800a2da:	6831      	ldr	r1, [r6, #0]
 800a2dc:	4605      	mov	r5, r0
 800a2de:	b911      	cbnz	r1, 800a2e6 <sbrk_aligned+0x12>
 800a2e0:	f000 f88c 	bl	800a3fc <_sbrk_r>
 800a2e4:	6030      	str	r0, [r6, #0]
 800a2e6:	4621      	mov	r1, r4
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	f000 f887 	bl	800a3fc <_sbrk_r>
 800a2ee:	1c43      	adds	r3, r0, #1
 800a2f0:	d00a      	beq.n	800a308 <sbrk_aligned+0x34>
 800a2f2:	1cc4      	adds	r4, r0, #3
 800a2f4:	f024 0403 	bic.w	r4, r4, #3
 800a2f8:	42a0      	cmp	r0, r4
 800a2fa:	d007      	beq.n	800a30c <sbrk_aligned+0x38>
 800a2fc:	1a21      	subs	r1, r4, r0
 800a2fe:	4628      	mov	r0, r5
 800a300:	f000 f87c 	bl	800a3fc <_sbrk_r>
 800a304:	3001      	adds	r0, #1
 800a306:	d101      	bne.n	800a30c <sbrk_aligned+0x38>
 800a308:	f04f 34ff 	mov.w	r4, #4294967295
 800a30c:	4620      	mov	r0, r4
 800a30e:	bd70      	pop	{r4, r5, r6, pc}
 800a310:	2000133c 	.word	0x2000133c

0800a314 <_malloc_r>:
 800a314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a318:	1ccd      	adds	r5, r1, #3
 800a31a:	f025 0503 	bic.w	r5, r5, #3
 800a31e:	3508      	adds	r5, #8
 800a320:	2d0c      	cmp	r5, #12
 800a322:	bf38      	it	cc
 800a324:	250c      	movcc	r5, #12
 800a326:	2d00      	cmp	r5, #0
 800a328:	4607      	mov	r7, r0
 800a32a:	db01      	blt.n	800a330 <_malloc_r+0x1c>
 800a32c:	42a9      	cmp	r1, r5
 800a32e:	d905      	bls.n	800a33c <_malloc_r+0x28>
 800a330:	230c      	movs	r3, #12
 800a332:	603b      	str	r3, [r7, #0]
 800a334:	2600      	movs	r6, #0
 800a336:	4630      	mov	r0, r6
 800a338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a33c:	4e2e      	ldr	r6, [pc, #184]	; (800a3f8 <_malloc_r+0xe4>)
 800a33e:	f000 f86d 	bl	800a41c <__malloc_lock>
 800a342:	6833      	ldr	r3, [r6, #0]
 800a344:	461c      	mov	r4, r3
 800a346:	bb34      	cbnz	r4, 800a396 <_malloc_r+0x82>
 800a348:	4629      	mov	r1, r5
 800a34a:	4638      	mov	r0, r7
 800a34c:	f7ff ffc2 	bl	800a2d4 <sbrk_aligned>
 800a350:	1c43      	adds	r3, r0, #1
 800a352:	4604      	mov	r4, r0
 800a354:	d14d      	bne.n	800a3f2 <_malloc_r+0xde>
 800a356:	6834      	ldr	r4, [r6, #0]
 800a358:	4626      	mov	r6, r4
 800a35a:	2e00      	cmp	r6, #0
 800a35c:	d140      	bne.n	800a3e0 <_malloc_r+0xcc>
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	4631      	mov	r1, r6
 800a362:	4638      	mov	r0, r7
 800a364:	eb04 0803 	add.w	r8, r4, r3
 800a368:	f000 f848 	bl	800a3fc <_sbrk_r>
 800a36c:	4580      	cmp	r8, r0
 800a36e:	d13a      	bne.n	800a3e6 <_malloc_r+0xd2>
 800a370:	6821      	ldr	r1, [r4, #0]
 800a372:	3503      	adds	r5, #3
 800a374:	1a6d      	subs	r5, r5, r1
 800a376:	f025 0503 	bic.w	r5, r5, #3
 800a37a:	3508      	adds	r5, #8
 800a37c:	2d0c      	cmp	r5, #12
 800a37e:	bf38      	it	cc
 800a380:	250c      	movcc	r5, #12
 800a382:	4629      	mov	r1, r5
 800a384:	4638      	mov	r0, r7
 800a386:	f7ff ffa5 	bl	800a2d4 <sbrk_aligned>
 800a38a:	3001      	adds	r0, #1
 800a38c:	d02b      	beq.n	800a3e6 <_malloc_r+0xd2>
 800a38e:	6823      	ldr	r3, [r4, #0]
 800a390:	442b      	add	r3, r5
 800a392:	6023      	str	r3, [r4, #0]
 800a394:	e00e      	b.n	800a3b4 <_malloc_r+0xa0>
 800a396:	6822      	ldr	r2, [r4, #0]
 800a398:	1b52      	subs	r2, r2, r5
 800a39a:	d41e      	bmi.n	800a3da <_malloc_r+0xc6>
 800a39c:	2a0b      	cmp	r2, #11
 800a39e:	d916      	bls.n	800a3ce <_malloc_r+0xba>
 800a3a0:	1961      	adds	r1, r4, r5
 800a3a2:	42a3      	cmp	r3, r4
 800a3a4:	6025      	str	r5, [r4, #0]
 800a3a6:	bf18      	it	ne
 800a3a8:	6059      	strne	r1, [r3, #4]
 800a3aa:	6863      	ldr	r3, [r4, #4]
 800a3ac:	bf08      	it	eq
 800a3ae:	6031      	streq	r1, [r6, #0]
 800a3b0:	5162      	str	r2, [r4, r5]
 800a3b2:	604b      	str	r3, [r1, #4]
 800a3b4:	4638      	mov	r0, r7
 800a3b6:	f104 060b 	add.w	r6, r4, #11
 800a3ba:	f000 f835 	bl	800a428 <__malloc_unlock>
 800a3be:	f026 0607 	bic.w	r6, r6, #7
 800a3c2:	1d23      	adds	r3, r4, #4
 800a3c4:	1af2      	subs	r2, r6, r3
 800a3c6:	d0b6      	beq.n	800a336 <_malloc_r+0x22>
 800a3c8:	1b9b      	subs	r3, r3, r6
 800a3ca:	50a3      	str	r3, [r4, r2]
 800a3cc:	e7b3      	b.n	800a336 <_malloc_r+0x22>
 800a3ce:	6862      	ldr	r2, [r4, #4]
 800a3d0:	42a3      	cmp	r3, r4
 800a3d2:	bf0c      	ite	eq
 800a3d4:	6032      	streq	r2, [r6, #0]
 800a3d6:	605a      	strne	r2, [r3, #4]
 800a3d8:	e7ec      	b.n	800a3b4 <_malloc_r+0xa0>
 800a3da:	4623      	mov	r3, r4
 800a3dc:	6864      	ldr	r4, [r4, #4]
 800a3de:	e7b2      	b.n	800a346 <_malloc_r+0x32>
 800a3e0:	4634      	mov	r4, r6
 800a3e2:	6876      	ldr	r6, [r6, #4]
 800a3e4:	e7b9      	b.n	800a35a <_malloc_r+0x46>
 800a3e6:	230c      	movs	r3, #12
 800a3e8:	603b      	str	r3, [r7, #0]
 800a3ea:	4638      	mov	r0, r7
 800a3ec:	f000 f81c 	bl	800a428 <__malloc_unlock>
 800a3f0:	e7a1      	b.n	800a336 <_malloc_r+0x22>
 800a3f2:	6025      	str	r5, [r4, #0]
 800a3f4:	e7de      	b.n	800a3b4 <_malloc_r+0xa0>
 800a3f6:	bf00      	nop
 800a3f8:	20001338 	.word	0x20001338

0800a3fc <_sbrk_r>:
 800a3fc:	b538      	push	{r3, r4, r5, lr}
 800a3fe:	4d06      	ldr	r5, [pc, #24]	; (800a418 <_sbrk_r+0x1c>)
 800a400:	2300      	movs	r3, #0
 800a402:	4604      	mov	r4, r0
 800a404:	4608      	mov	r0, r1
 800a406:	602b      	str	r3, [r5, #0]
 800a408:	f7fa fd4e 	bl	8004ea8 <_sbrk>
 800a40c:	1c43      	adds	r3, r0, #1
 800a40e:	d102      	bne.n	800a416 <_sbrk_r+0x1a>
 800a410:	682b      	ldr	r3, [r5, #0]
 800a412:	b103      	cbz	r3, 800a416 <_sbrk_r+0x1a>
 800a414:	6023      	str	r3, [r4, #0]
 800a416:	bd38      	pop	{r3, r4, r5, pc}
 800a418:	20001340 	.word	0x20001340

0800a41c <__malloc_lock>:
 800a41c:	4801      	ldr	r0, [pc, #4]	; (800a424 <__malloc_lock+0x8>)
 800a41e:	f000 b809 	b.w	800a434 <__retarget_lock_acquire_recursive>
 800a422:	bf00      	nop
 800a424:	20001344 	.word	0x20001344

0800a428 <__malloc_unlock>:
 800a428:	4801      	ldr	r0, [pc, #4]	; (800a430 <__malloc_unlock+0x8>)
 800a42a:	f000 b804 	b.w	800a436 <__retarget_lock_release_recursive>
 800a42e:	bf00      	nop
 800a430:	20001344 	.word	0x20001344

0800a434 <__retarget_lock_acquire_recursive>:
 800a434:	4770      	bx	lr

0800a436 <__retarget_lock_release_recursive>:
 800a436:	4770      	bx	lr

0800a438 <cos>:
 800a438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a43a:	ec53 2b10 	vmov	r2, r3, d0
 800a43e:	4826      	ldr	r0, [pc, #152]	; (800a4d8 <cos+0xa0>)
 800a440:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a444:	4281      	cmp	r1, r0
 800a446:	dc06      	bgt.n	800a456 <cos+0x1e>
 800a448:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a4d0 <cos+0x98>
 800a44c:	b005      	add	sp, #20
 800a44e:	f85d eb04 	ldr.w	lr, [sp], #4
 800a452:	f001 bc3d 	b.w	800bcd0 <__kernel_cos>
 800a456:	4821      	ldr	r0, [pc, #132]	; (800a4dc <cos+0xa4>)
 800a458:	4281      	cmp	r1, r0
 800a45a:	dd09      	ble.n	800a470 <cos+0x38>
 800a45c:	ee10 0a10 	vmov	r0, s0
 800a460:	4619      	mov	r1, r3
 800a462:	f7f5 febd 	bl	80001e0 <__aeabi_dsub>
 800a466:	ec41 0b10 	vmov	d0, r0, r1
 800a46a:	b005      	add	sp, #20
 800a46c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a470:	4668      	mov	r0, sp
 800a472:	f001 f96d 	bl	800b750 <__ieee754_rem_pio2>
 800a476:	f000 0003 	and.w	r0, r0, #3
 800a47a:	2801      	cmp	r0, #1
 800a47c:	d00b      	beq.n	800a496 <cos+0x5e>
 800a47e:	2802      	cmp	r0, #2
 800a480:	d016      	beq.n	800a4b0 <cos+0x78>
 800a482:	b9e0      	cbnz	r0, 800a4be <cos+0x86>
 800a484:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a488:	ed9d 0b00 	vldr	d0, [sp]
 800a48c:	f001 fc20 	bl	800bcd0 <__kernel_cos>
 800a490:	ec51 0b10 	vmov	r0, r1, d0
 800a494:	e7e7      	b.n	800a466 <cos+0x2e>
 800a496:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a49a:	ed9d 0b00 	vldr	d0, [sp]
 800a49e:	f002 f82f 	bl	800c500 <__kernel_sin>
 800a4a2:	ec53 2b10 	vmov	r2, r3, d0
 800a4a6:	ee10 0a10 	vmov	r0, s0
 800a4aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a4ae:	e7da      	b.n	800a466 <cos+0x2e>
 800a4b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a4b4:	ed9d 0b00 	vldr	d0, [sp]
 800a4b8:	f001 fc0a 	bl	800bcd0 <__kernel_cos>
 800a4bc:	e7f1      	b.n	800a4a2 <cos+0x6a>
 800a4be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a4c2:	ed9d 0b00 	vldr	d0, [sp]
 800a4c6:	2001      	movs	r0, #1
 800a4c8:	f002 f81a 	bl	800c500 <__kernel_sin>
 800a4cc:	e7e0      	b.n	800a490 <cos+0x58>
 800a4ce:	bf00      	nop
	...
 800a4d8:	3fe921fb 	.word	0x3fe921fb
 800a4dc:	7fefffff 	.word	0x7fefffff

0800a4e0 <floor>:
 800a4e0:	ec51 0b10 	vmov	r0, r1, d0
 800a4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a4ec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a4f0:	2e13      	cmp	r6, #19
 800a4f2:	ee10 5a10 	vmov	r5, s0
 800a4f6:	ee10 8a10 	vmov	r8, s0
 800a4fa:	460c      	mov	r4, r1
 800a4fc:	dc32      	bgt.n	800a564 <floor+0x84>
 800a4fe:	2e00      	cmp	r6, #0
 800a500:	da14      	bge.n	800a52c <floor+0x4c>
 800a502:	a333      	add	r3, pc, #204	; (adr r3, 800a5d0 <floor+0xf0>)
 800a504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a508:	f7f5 fe6c 	bl	80001e4 <__adddf3>
 800a50c:	2200      	movs	r2, #0
 800a50e:	2300      	movs	r3, #0
 800a510:	f7f6 faae 	bl	8000a70 <__aeabi_dcmpgt>
 800a514:	b138      	cbz	r0, 800a526 <floor+0x46>
 800a516:	2c00      	cmp	r4, #0
 800a518:	da57      	bge.n	800a5ca <floor+0xea>
 800a51a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a51e:	431d      	orrs	r5, r3
 800a520:	d001      	beq.n	800a526 <floor+0x46>
 800a522:	4c2d      	ldr	r4, [pc, #180]	; (800a5d8 <floor+0xf8>)
 800a524:	2500      	movs	r5, #0
 800a526:	4621      	mov	r1, r4
 800a528:	4628      	mov	r0, r5
 800a52a:	e025      	b.n	800a578 <floor+0x98>
 800a52c:	4f2b      	ldr	r7, [pc, #172]	; (800a5dc <floor+0xfc>)
 800a52e:	4137      	asrs	r7, r6
 800a530:	ea01 0307 	and.w	r3, r1, r7
 800a534:	4303      	orrs	r3, r0
 800a536:	d01f      	beq.n	800a578 <floor+0x98>
 800a538:	a325      	add	r3, pc, #148	; (adr r3, 800a5d0 <floor+0xf0>)
 800a53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53e:	f7f5 fe51 	bl	80001e4 <__adddf3>
 800a542:	2200      	movs	r2, #0
 800a544:	2300      	movs	r3, #0
 800a546:	f7f6 fa93 	bl	8000a70 <__aeabi_dcmpgt>
 800a54a:	2800      	cmp	r0, #0
 800a54c:	d0eb      	beq.n	800a526 <floor+0x46>
 800a54e:	2c00      	cmp	r4, #0
 800a550:	bfbe      	ittt	lt
 800a552:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a556:	fa43 f606 	asrlt.w	r6, r3, r6
 800a55a:	19a4      	addlt	r4, r4, r6
 800a55c:	ea24 0407 	bic.w	r4, r4, r7
 800a560:	2500      	movs	r5, #0
 800a562:	e7e0      	b.n	800a526 <floor+0x46>
 800a564:	2e33      	cmp	r6, #51	; 0x33
 800a566:	dd0b      	ble.n	800a580 <floor+0xa0>
 800a568:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a56c:	d104      	bne.n	800a578 <floor+0x98>
 800a56e:	ee10 2a10 	vmov	r2, s0
 800a572:	460b      	mov	r3, r1
 800a574:	f7f5 fe36 	bl	80001e4 <__adddf3>
 800a578:	ec41 0b10 	vmov	d0, r0, r1
 800a57c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a580:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a584:	f04f 33ff 	mov.w	r3, #4294967295
 800a588:	fa23 f707 	lsr.w	r7, r3, r7
 800a58c:	4207      	tst	r7, r0
 800a58e:	d0f3      	beq.n	800a578 <floor+0x98>
 800a590:	a30f      	add	r3, pc, #60	; (adr r3, 800a5d0 <floor+0xf0>)
 800a592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a596:	f7f5 fe25 	bl	80001e4 <__adddf3>
 800a59a:	2200      	movs	r2, #0
 800a59c:	2300      	movs	r3, #0
 800a59e:	f7f6 fa67 	bl	8000a70 <__aeabi_dcmpgt>
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	d0bf      	beq.n	800a526 <floor+0x46>
 800a5a6:	2c00      	cmp	r4, #0
 800a5a8:	da02      	bge.n	800a5b0 <floor+0xd0>
 800a5aa:	2e14      	cmp	r6, #20
 800a5ac:	d103      	bne.n	800a5b6 <floor+0xd6>
 800a5ae:	3401      	adds	r4, #1
 800a5b0:	ea25 0507 	bic.w	r5, r5, r7
 800a5b4:	e7b7      	b.n	800a526 <floor+0x46>
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a5bc:	fa03 f606 	lsl.w	r6, r3, r6
 800a5c0:	4435      	add	r5, r6
 800a5c2:	4545      	cmp	r5, r8
 800a5c4:	bf38      	it	cc
 800a5c6:	18e4      	addcc	r4, r4, r3
 800a5c8:	e7f2      	b.n	800a5b0 <floor+0xd0>
 800a5ca:	2500      	movs	r5, #0
 800a5cc:	462c      	mov	r4, r5
 800a5ce:	e7aa      	b.n	800a526 <floor+0x46>
 800a5d0:	8800759c 	.word	0x8800759c
 800a5d4:	7e37e43c 	.word	0x7e37e43c
 800a5d8:	bff00000 	.word	0xbff00000
 800a5dc:	000fffff 	.word	0x000fffff

0800a5e0 <sin>:
 800a5e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5e2:	ec53 2b10 	vmov	r2, r3, d0
 800a5e6:	4828      	ldr	r0, [pc, #160]	; (800a688 <sin+0xa8>)
 800a5e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a5ec:	4281      	cmp	r1, r0
 800a5ee:	dc07      	bgt.n	800a600 <sin+0x20>
 800a5f0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a680 <sin+0xa0>
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	b005      	add	sp, #20
 800a5f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5fc:	f001 bf80 	b.w	800c500 <__kernel_sin>
 800a600:	4822      	ldr	r0, [pc, #136]	; (800a68c <sin+0xac>)
 800a602:	4281      	cmp	r1, r0
 800a604:	dd09      	ble.n	800a61a <sin+0x3a>
 800a606:	ee10 0a10 	vmov	r0, s0
 800a60a:	4619      	mov	r1, r3
 800a60c:	f7f5 fde8 	bl	80001e0 <__aeabi_dsub>
 800a610:	ec41 0b10 	vmov	d0, r0, r1
 800a614:	b005      	add	sp, #20
 800a616:	f85d fb04 	ldr.w	pc, [sp], #4
 800a61a:	4668      	mov	r0, sp
 800a61c:	f001 f898 	bl	800b750 <__ieee754_rem_pio2>
 800a620:	f000 0003 	and.w	r0, r0, #3
 800a624:	2801      	cmp	r0, #1
 800a626:	d00c      	beq.n	800a642 <sin+0x62>
 800a628:	2802      	cmp	r0, #2
 800a62a:	d011      	beq.n	800a650 <sin+0x70>
 800a62c:	b9f0      	cbnz	r0, 800a66c <sin+0x8c>
 800a62e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a632:	ed9d 0b00 	vldr	d0, [sp]
 800a636:	2001      	movs	r0, #1
 800a638:	f001 ff62 	bl	800c500 <__kernel_sin>
 800a63c:	ec51 0b10 	vmov	r0, r1, d0
 800a640:	e7e6      	b.n	800a610 <sin+0x30>
 800a642:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a646:	ed9d 0b00 	vldr	d0, [sp]
 800a64a:	f001 fb41 	bl	800bcd0 <__kernel_cos>
 800a64e:	e7f5      	b.n	800a63c <sin+0x5c>
 800a650:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a654:	ed9d 0b00 	vldr	d0, [sp]
 800a658:	2001      	movs	r0, #1
 800a65a:	f001 ff51 	bl	800c500 <__kernel_sin>
 800a65e:	ec53 2b10 	vmov	r2, r3, d0
 800a662:	ee10 0a10 	vmov	r0, s0
 800a666:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a66a:	e7d1      	b.n	800a610 <sin+0x30>
 800a66c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a670:	ed9d 0b00 	vldr	d0, [sp]
 800a674:	f001 fb2c 	bl	800bcd0 <__kernel_cos>
 800a678:	e7f1      	b.n	800a65e <sin+0x7e>
 800a67a:	bf00      	nop
 800a67c:	f3af 8000 	nop.w
	...
 800a688:	3fe921fb 	.word	0x3fe921fb
 800a68c:	7fefffff 	.word	0x7fefffff

0800a690 <acos>:
 800a690:	b538      	push	{r3, r4, r5, lr}
 800a692:	ed2d 8b02 	vpush	{d8}
 800a696:	ec55 4b10 	vmov	r4, r5, d0
 800a69a:	f000 f8c9 	bl	800a830 <__ieee754_acos>
 800a69e:	4622      	mov	r2, r4
 800a6a0:	462b      	mov	r3, r5
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	4629      	mov	r1, r5
 800a6a6:	eeb0 8a40 	vmov.f32	s16, s0
 800a6aa:	eef0 8a60 	vmov.f32	s17, s1
 800a6ae:	f7f6 f9e9 	bl	8000a84 <__aeabi_dcmpun>
 800a6b2:	b9a8      	cbnz	r0, 800a6e0 <acos+0x50>
 800a6b4:	ec45 4b10 	vmov	d0, r4, r5
 800a6b8:	f002 f810 	bl	800c6dc <fabs>
 800a6bc:	4b0c      	ldr	r3, [pc, #48]	; (800a6f0 <acos+0x60>)
 800a6be:	ec51 0b10 	vmov	r0, r1, d0
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f7f6 f9d4 	bl	8000a70 <__aeabi_dcmpgt>
 800a6c8:	b150      	cbz	r0, 800a6e0 <acos+0x50>
 800a6ca:	f7ff fd51 	bl	800a170 <__errno>
 800a6ce:	ecbd 8b02 	vpop	{d8}
 800a6d2:	2321      	movs	r3, #33	; 0x21
 800a6d4:	6003      	str	r3, [r0, #0]
 800a6d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6da:	4806      	ldr	r0, [pc, #24]	; (800a6f4 <acos+0x64>)
 800a6dc:	f002 b814 	b.w	800c708 <nan>
 800a6e0:	eeb0 0a48 	vmov.f32	s0, s16
 800a6e4:	eef0 0a68 	vmov.f32	s1, s17
 800a6e8:	ecbd 8b02 	vpop	{d8}
 800a6ec:	bd38      	pop	{r3, r4, r5, pc}
 800a6ee:	bf00      	nop
 800a6f0:	3ff00000 	.word	0x3ff00000
 800a6f4:	0800c860 	.word	0x0800c860

0800a6f8 <pow>:
 800a6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6fa:	ed2d 8b02 	vpush	{d8}
 800a6fe:	eeb0 8a40 	vmov.f32	s16, s0
 800a702:	eef0 8a60 	vmov.f32	s17, s1
 800a706:	ec55 4b11 	vmov	r4, r5, d1
 800a70a:	f000 faf1 	bl	800acf0 <__ieee754_pow>
 800a70e:	4622      	mov	r2, r4
 800a710:	462b      	mov	r3, r5
 800a712:	4620      	mov	r0, r4
 800a714:	4629      	mov	r1, r5
 800a716:	ec57 6b10 	vmov	r6, r7, d0
 800a71a:	f7f6 f9b3 	bl	8000a84 <__aeabi_dcmpun>
 800a71e:	2800      	cmp	r0, #0
 800a720:	d13b      	bne.n	800a79a <pow+0xa2>
 800a722:	ec51 0b18 	vmov	r0, r1, d8
 800a726:	2200      	movs	r2, #0
 800a728:	2300      	movs	r3, #0
 800a72a:	f7f6 f979 	bl	8000a20 <__aeabi_dcmpeq>
 800a72e:	b1b8      	cbz	r0, 800a760 <pow+0x68>
 800a730:	2200      	movs	r2, #0
 800a732:	2300      	movs	r3, #0
 800a734:	4620      	mov	r0, r4
 800a736:	4629      	mov	r1, r5
 800a738:	f7f6 f972 	bl	8000a20 <__aeabi_dcmpeq>
 800a73c:	2800      	cmp	r0, #0
 800a73e:	d146      	bne.n	800a7ce <pow+0xd6>
 800a740:	ec45 4b10 	vmov	d0, r4, r5
 800a744:	f001 ffd3 	bl	800c6ee <finite>
 800a748:	b338      	cbz	r0, 800a79a <pow+0xa2>
 800a74a:	2200      	movs	r2, #0
 800a74c:	2300      	movs	r3, #0
 800a74e:	4620      	mov	r0, r4
 800a750:	4629      	mov	r1, r5
 800a752:	f7f6 f96f 	bl	8000a34 <__aeabi_dcmplt>
 800a756:	b300      	cbz	r0, 800a79a <pow+0xa2>
 800a758:	f7ff fd0a 	bl	800a170 <__errno>
 800a75c:	2322      	movs	r3, #34	; 0x22
 800a75e:	e01b      	b.n	800a798 <pow+0xa0>
 800a760:	ec47 6b10 	vmov	d0, r6, r7
 800a764:	f001 ffc3 	bl	800c6ee <finite>
 800a768:	b9e0      	cbnz	r0, 800a7a4 <pow+0xac>
 800a76a:	eeb0 0a48 	vmov.f32	s0, s16
 800a76e:	eef0 0a68 	vmov.f32	s1, s17
 800a772:	f001 ffbc 	bl	800c6ee <finite>
 800a776:	b1a8      	cbz	r0, 800a7a4 <pow+0xac>
 800a778:	ec45 4b10 	vmov	d0, r4, r5
 800a77c:	f001 ffb7 	bl	800c6ee <finite>
 800a780:	b180      	cbz	r0, 800a7a4 <pow+0xac>
 800a782:	4632      	mov	r2, r6
 800a784:	463b      	mov	r3, r7
 800a786:	4630      	mov	r0, r6
 800a788:	4639      	mov	r1, r7
 800a78a:	f7f6 f97b 	bl	8000a84 <__aeabi_dcmpun>
 800a78e:	2800      	cmp	r0, #0
 800a790:	d0e2      	beq.n	800a758 <pow+0x60>
 800a792:	f7ff fced 	bl	800a170 <__errno>
 800a796:	2321      	movs	r3, #33	; 0x21
 800a798:	6003      	str	r3, [r0, #0]
 800a79a:	ecbd 8b02 	vpop	{d8}
 800a79e:	ec47 6b10 	vmov	d0, r6, r7
 800a7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	4630      	mov	r0, r6
 800a7aa:	4639      	mov	r1, r7
 800a7ac:	f7f6 f938 	bl	8000a20 <__aeabi_dcmpeq>
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	d0f2      	beq.n	800a79a <pow+0xa2>
 800a7b4:	eeb0 0a48 	vmov.f32	s0, s16
 800a7b8:	eef0 0a68 	vmov.f32	s1, s17
 800a7bc:	f001 ff97 	bl	800c6ee <finite>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	d0ea      	beq.n	800a79a <pow+0xa2>
 800a7c4:	ec45 4b10 	vmov	d0, r4, r5
 800a7c8:	f001 ff91 	bl	800c6ee <finite>
 800a7cc:	e7c3      	b.n	800a756 <pow+0x5e>
 800a7ce:	4f01      	ldr	r7, [pc, #4]	; (800a7d4 <pow+0xdc>)
 800a7d0:	2600      	movs	r6, #0
 800a7d2:	e7e2      	b.n	800a79a <pow+0xa2>
 800a7d4:	3ff00000 	.word	0x3ff00000

0800a7d8 <sqrt>:
 800a7d8:	b538      	push	{r3, r4, r5, lr}
 800a7da:	ed2d 8b02 	vpush	{d8}
 800a7de:	ec55 4b10 	vmov	r4, r5, d0
 800a7e2:	f001 f9c1 	bl	800bb68 <__ieee754_sqrt>
 800a7e6:	4622      	mov	r2, r4
 800a7e8:	462b      	mov	r3, r5
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	4629      	mov	r1, r5
 800a7ee:	eeb0 8a40 	vmov.f32	s16, s0
 800a7f2:	eef0 8a60 	vmov.f32	s17, s1
 800a7f6:	f7f6 f945 	bl	8000a84 <__aeabi_dcmpun>
 800a7fa:	b990      	cbnz	r0, 800a822 <sqrt+0x4a>
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	2300      	movs	r3, #0
 800a800:	4620      	mov	r0, r4
 800a802:	4629      	mov	r1, r5
 800a804:	f7f6 f916 	bl	8000a34 <__aeabi_dcmplt>
 800a808:	b158      	cbz	r0, 800a822 <sqrt+0x4a>
 800a80a:	f7ff fcb1 	bl	800a170 <__errno>
 800a80e:	2321      	movs	r3, #33	; 0x21
 800a810:	6003      	str	r3, [r0, #0]
 800a812:	2200      	movs	r2, #0
 800a814:	2300      	movs	r3, #0
 800a816:	4610      	mov	r0, r2
 800a818:	4619      	mov	r1, r3
 800a81a:	f7f5 ffc3 	bl	80007a4 <__aeabi_ddiv>
 800a81e:	ec41 0b18 	vmov	d8, r0, r1
 800a822:	eeb0 0a48 	vmov.f32	s0, s16
 800a826:	eef0 0a68 	vmov.f32	s1, s17
 800a82a:	ecbd 8b02 	vpop	{d8}
 800a82e:	bd38      	pop	{r3, r4, r5, pc}

0800a830 <__ieee754_acos>:
 800a830:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a834:	ec55 4b10 	vmov	r4, r5, d0
 800a838:	49b7      	ldr	r1, [pc, #732]	; (800ab18 <__ieee754_acos+0x2e8>)
 800a83a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a83e:	428b      	cmp	r3, r1
 800a840:	dd1b      	ble.n	800a87a <__ieee754_acos+0x4a>
 800a842:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800a846:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a84a:	4323      	orrs	r3, r4
 800a84c:	d106      	bne.n	800a85c <__ieee754_acos+0x2c>
 800a84e:	2d00      	cmp	r5, #0
 800a850:	f300 8211 	bgt.w	800ac76 <__ieee754_acos+0x446>
 800a854:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800aab0 <__ieee754_acos+0x280>
 800a858:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a85c:	ee10 2a10 	vmov	r2, s0
 800a860:	462b      	mov	r3, r5
 800a862:	ee10 0a10 	vmov	r0, s0
 800a866:	4629      	mov	r1, r5
 800a868:	f7f5 fcba 	bl	80001e0 <__aeabi_dsub>
 800a86c:	4602      	mov	r2, r0
 800a86e:	460b      	mov	r3, r1
 800a870:	f7f5 ff98 	bl	80007a4 <__aeabi_ddiv>
 800a874:	ec41 0b10 	vmov	d0, r0, r1
 800a878:	e7ee      	b.n	800a858 <__ieee754_acos+0x28>
 800a87a:	49a8      	ldr	r1, [pc, #672]	; (800ab1c <__ieee754_acos+0x2ec>)
 800a87c:	428b      	cmp	r3, r1
 800a87e:	f300 8087 	bgt.w	800a990 <__ieee754_acos+0x160>
 800a882:	4aa7      	ldr	r2, [pc, #668]	; (800ab20 <__ieee754_acos+0x2f0>)
 800a884:	4293      	cmp	r3, r2
 800a886:	f340 81f9 	ble.w	800ac7c <__ieee754_acos+0x44c>
 800a88a:	ee10 2a10 	vmov	r2, s0
 800a88e:	ee10 0a10 	vmov	r0, s0
 800a892:	462b      	mov	r3, r5
 800a894:	4629      	mov	r1, r5
 800a896:	f7f5 fe5b 	bl	8000550 <__aeabi_dmul>
 800a89a:	a387      	add	r3, pc, #540	; (adr r3, 800aab8 <__ieee754_acos+0x288>)
 800a89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a0:	4606      	mov	r6, r0
 800a8a2:	460f      	mov	r7, r1
 800a8a4:	f7f5 fe54 	bl	8000550 <__aeabi_dmul>
 800a8a8:	a385      	add	r3, pc, #532	; (adr r3, 800aac0 <__ieee754_acos+0x290>)
 800a8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ae:	f7f5 fc99 	bl	80001e4 <__adddf3>
 800a8b2:	4632      	mov	r2, r6
 800a8b4:	463b      	mov	r3, r7
 800a8b6:	f7f5 fe4b 	bl	8000550 <__aeabi_dmul>
 800a8ba:	a383      	add	r3, pc, #524	; (adr r3, 800aac8 <__ieee754_acos+0x298>)
 800a8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c0:	f7f5 fc8e 	bl	80001e0 <__aeabi_dsub>
 800a8c4:	4632      	mov	r2, r6
 800a8c6:	463b      	mov	r3, r7
 800a8c8:	f7f5 fe42 	bl	8000550 <__aeabi_dmul>
 800a8cc:	a380      	add	r3, pc, #512	; (adr r3, 800aad0 <__ieee754_acos+0x2a0>)
 800a8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d2:	f7f5 fc87 	bl	80001e4 <__adddf3>
 800a8d6:	4632      	mov	r2, r6
 800a8d8:	463b      	mov	r3, r7
 800a8da:	f7f5 fe39 	bl	8000550 <__aeabi_dmul>
 800a8de:	a37e      	add	r3, pc, #504	; (adr r3, 800aad8 <__ieee754_acos+0x2a8>)
 800a8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e4:	f7f5 fc7c 	bl	80001e0 <__aeabi_dsub>
 800a8e8:	4632      	mov	r2, r6
 800a8ea:	463b      	mov	r3, r7
 800a8ec:	f7f5 fe30 	bl	8000550 <__aeabi_dmul>
 800a8f0:	a37b      	add	r3, pc, #492	; (adr r3, 800aae0 <__ieee754_acos+0x2b0>)
 800a8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f6:	f7f5 fc75 	bl	80001e4 <__adddf3>
 800a8fa:	4632      	mov	r2, r6
 800a8fc:	463b      	mov	r3, r7
 800a8fe:	f7f5 fe27 	bl	8000550 <__aeabi_dmul>
 800a902:	a379      	add	r3, pc, #484	; (adr r3, 800aae8 <__ieee754_acos+0x2b8>)
 800a904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a908:	4680      	mov	r8, r0
 800a90a:	4689      	mov	r9, r1
 800a90c:	4630      	mov	r0, r6
 800a90e:	4639      	mov	r1, r7
 800a910:	f7f5 fe1e 	bl	8000550 <__aeabi_dmul>
 800a914:	a376      	add	r3, pc, #472	; (adr r3, 800aaf0 <__ieee754_acos+0x2c0>)
 800a916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91a:	f7f5 fc61 	bl	80001e0 <__aeabi_dsub>
 800a91e:	4632      	mov	r2, r6
 800a920:	463b      	mov	r3, r7
 800a922:	f7f5 fe15 	bl	8000550 <__aeabi_dmul>
 800a926:	a374      	add	r3, pc, #464	; (adr r3, 800aaf8 <__ieee754_acos+0x2c8>)
 800a928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92c:	f7f5 fc5a 	bl	80001e4 <__adddf3>
 800a930:	4632      	mov	r2, r6
 800a932:	463b      	mov	r3, r7
 800a934:	f7f5 fe0c 	bl	8000550 <__aeabi_dmul>
 800a938:	a371      	add	r3, pc, #452	; (adr r3, 800ab00 <__ieee754_acos+0x2d0>)
 800a93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93e:	f7f5 fc4f 	bl	80001e0 <__aeabi_dsub>
 800a942:	4632      	mov	r2, r6
 800a944:	463b      	mov	r3, r7
 800a946:	f7f5 fe03 	bl	8000550 <__aeabi_dmul>
 800a94a:	4b76      	ldr	r3, [pc, #472]	; (800ab24 <__ieee754_acos+0x2f4>)
 800a94c:	2200      	movs	r2, #0
 800a94e:	f7f5 fc49 	bl	80001e4 <__adddf3>
 800a952:	4602      	mov	r2, r0
 800a954:	460b      	mov	r3, r1
 800a956:	4640      	mov	r0, r8
 800a958:	4649      	mov	r1, r9
 800a95a:	f7f5 ff23 	bl	80007a4 <__aeabi_ddiv>
 800a95e:	4622      	mov	r2, r4
 800a960:	462b      	mov	r3, r5
 800a962:	f7f5 fdf5 	bl	8000550 <__aeabi_dmul>
 800a966:	4602      	mov	r2, r0
 800a968:	460b      	mov	r3, r1
 800a96a:	a167      	add	r1, pc, #412	; (adr r1, 800ab08 <__ieee754_acos+0x2d8>)
 800a96c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a970:	f7f5 fc36 	bl	80001e0 <__aeabi_dsub>
 800a974:	4602      	mov	r2, r0
 800a976:	460b      	mov	r3, r1
 800a978:	4620      	mov	r0, r4
 800a97a:	4629      	mov	r1, r5
 800a97c:	f7f5 fc30 	bl	80001e0 <__aeabi_dsub>
 800a980:	4602      	mov	r2, r0
 800a982:	460b      	mov	r3, r1
 800a984:	a162      	add	r1, pc, #392	; (adr r1, 800ab10 <__ieee754_acos+0x2e0>)
 800a986:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a98a:	f7f5 fc29 	bl	80001e0 <__aeabi_dsub>
 800a98e:	e771      	b.n	800a874 <__ieee754_acos+0x44>
 800a990:	2d00      	cmp	r5, #0
 800a992:	f280 80cb 	bge.w	800ab2c <__ieee754_acos+0x2fc>
 800a996:	ee10 0a10 	vmov	r0, s0
 800a99a:	4b62      	ldr	r3, [pc, #392]	; (800ab24 <__ieee754_acos+0x2f4>)
 800a99c:	2200      	movs	r2, #0
 800a99e:	4629      	mov	r1, r5
 800a9a0:	f7f5 fc20 	bl	80001e4 <__adddf3>
 800a9a4:	4b60      	ldr	r3, [pc, #384]	; (800ab28 <__ieee754_acos+0x2f8>)
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f7f5 fdd2 	bl	8000550 <__aeabi_dmul>
 800a9ac:	a342      	add	r3, pc, #264	; (adr r3, 800aab8 <__ieee754_acos+0x288>)
 800a9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b2:	4604      	mov	r4, r0
 800a9b4:	460d      	mov	r5, r1
 800a9b6:	f7f5 fdcb 	bl	8000550 <__aeabi_dmul>
 800a9ba:	a341      	add	r3, pc, #260	; (adr r3, 800aac0 <__ieee754_acos+0x290>)
 800a9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c0:	f7f5 fc10 	bl	80001e4 <__adddf3>
 800a9c4:	4622      	mov	r2, r4
 800a9c6:	462b      	mov	r3, r5
 800a9c8:	f7f5 fdc2 	bl	8000550 <__aeabi_dmul>
 800a9cc:	a33e      	add	r3, pc, #248	; (adr r3, 800aac8 <__ieee754_acos+0x298>)
 800a9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d2:	f7f5 fc05 	bl	80001e0 <__aeabi_dsub>
 800a9d6:	4622      	mov	r2, r4
 800a9d8:	462b      	mov	r3, r5
 800a9da:	f7f5 fdb9 	bl	8000550 <__aeabi_dmul>
 800a9de:	a33c      	add	r3, pc, #240	; (adr r3, 800aad0 <__ieee754_acos+0x2a0>)
 800a9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e4:	f7f5 fbfe 	bl	80001e4 <__adddf3>
 800a9e8:	4622      	mov	r2, r4
 800a9ea:	462b      	mov	r3, r5
 800a9ec:	f7f5 fdb0 	bl	8000550 <__aeabi_dmul>
 800a9f0:	a339      	add	r3, pc, #228	; (adr r3, 800aad8 <__ieee754_acos+0x2a8>)
 800a9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f6:	f7f5 fbf3 	bl	80001e0 <__aeabi_dsub>
 800a9fa:	4622      	mov	r2, r4
 800a9fc:	462b      	mov	r3, r5
 800a9fe:	f7f5 fda7 	bl	8000550 <__aeabi_dmul>
 800aa02:	a337      	add	r3, pc, #220	; (adr r3, 800aae0 <__ieee754_acos+0x2b0>)
 800aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa08:	f7f5 fbec 	bl	80001e4 <__adddf3>
 800aa0c:	4622      	mov	r2, r4
 800aa0e:	462b      	mov	r3, r5
 800aa10:	f7f5 fd9e 	bl	8000550 <__aeabi_dmul>
 800aa14:	ec45 4b10 	vmov	d0, r4, r5
 800aa18:	4680      	mov	r8, r0
 800aa1a:	4689      	mov	r9, r1
 800aa1c:	f001 f8a4 	bl	800bb68 <__ieee754_sqrt>
 800aa20:	a331      	add	r3, pc, #196	; (adr r3, 800aae8 <__ieee754_acos+0x2b8>)
 800aa22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa26:	4620      	mov	r0, r4
 800aa28:	4629      	mov	r1, r5
 800aa2a:	ec57 6b10 	vmov	r6, r7, d0
 800aa2e:	f7f5 fd8f 	bl	8000550 <__aeabi_dmul>
 800aa32:	a32f      	add	r3, pc, #188	; (adr r3, 800aaf0 <__ieee754_acos+0x2c0>)
 800aa34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa38:	f7f5 fbd2 	bl	80001e0 <__aeabi_dsub>
 800aa3c:	4622      	mov	r2, r4
 800aa3e:	462b      	mov	r3, r5
 800aa40:	f7f5 fd86 	bl	8000550 <__aeabi_dmul>
 800aa44:	a32c      	add	r3, pc, #176	; (adr r3, 800aaf8 <__ieee754_acos+0x2c8>)
 800aa46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4a:	f7f5 fbcb 	bl	80001e4 <__adddf3>
 800aa4e:	4622      	mov	r2, r4
 800aa50:	462b      	mov	r3, r5
 800aa52:	f7f5 fd7d 	bl	8000550 <__aeabi_dmul>
 800aa56:	a32a      	add	r3, pc, #168	; (adr r3, 800ab00 <__ieee754_acos+0x2d0>)
 800aa58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5c:	f7f5 fbc0 	bl	80001e0 <__aeabi_dsub>
 800aa60:	4622      	mov	r2, r4
 800aa62:	462b      	mov	r3, r5
 800aa64:	f7f5 fd74 	bl	8000550 <__aeabi_dmul>
 800aa68:	4b2e      	ldr	r3, [pc, #184]	; (800ab24 <__ieee754_acos+0x2f4>)
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f7f5 fbba 	bl	80001e4 <__adddf3>
 800aa70:	4602      	mov	r2, r0
 800aa72:	460b      	mov	r3, r1
 800aa74:	4640      	mov	r0, r8
 800aa76:	4649      	mov	r1, r9
 800aa78:	f7f5 fe94 	bl	80007a4 <__aeabi_ddiv>
 800aa7c:	4632      	mov	r2, r6
 800aa7e:	463b      	mov	r3, r7
 800aa80:	f7f5 fd66 	bl	8000550 <__aeabi_dmul>
 800aa84:	a320      	add	r3, pc, #128	; (adr r3, 800ab08 <__ieee754_acos+0x2d8>)
 800aa86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8a:	f7f5 fba9 	bl	80001e0 <__aeabi_dsub>
 800aa8e:	4632      	mov	r2, r6
 800aa90:	463b      	mov	r3, r7
 800aa92:	f7f5 fba7 	bl	80001e4 <__adddf3>
 800aa96:	4602      	mov	r2, r0
 800aa98:	460b      	mov	r3, r1
 800aa9a:	f7f5 fba3 	bl	80001e4 <__adddf3>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	a103      	add	r1, pc, #12	; (adr r1, 800aab0 <__ieee754_acos+0x280>)
 800aaa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aaa8:	e76f      	b.n	800a98a <__ieee754_acos+0x15a>
 800aaaa:	bf00      	nop
 800aaac:	f3af 8000 	nop.w
 800aab0:	54442d18 	.word	0x54442d18
 800aab4:	400921fb 	.word	0x400921fb
 800aab8:	0dfdf709 	.word	0x0dfdf709
 800aabc:	3f023de1 	.word	0x3f023de1
 800aac0:	7501b288 	.word	0x7501b288
 800aac4:	3f49efe0 	.word	0x3f49efe0
 800aac8:	b5688f3b 	.word	0xb5688f3b
 800aacc:	3fa48228 	.word	0x3fa48228
 800aad0:	0e884455 	.word	0x0e884455
 800aad4:	3fc9c155 	.word	0x3fc9c155
 800aad8:	03eb6f7d 	.word	0x03eb6f7d
 800aadc:	3fd4d612 	.word	0x3fd4d612
 800aae0:	55555555 	.word	0x55555555
 800aae4:	3fc55555 	.word	0x3fc55555
 800aae8:	b12e9282 	.word	0xb12e9282
 800aaec:	3fb3b8c5 	.word	0x3fb3b8c5
 800aaf0:	1b8d0159 	.word	0x1b8d0159
 800aaf4:	3fe6066c 	.word	0x3fe6066c
 800aaf8:	9c598ac8 	.word	0x9c598ac8
 800aafc:	40002ae5 	.word	0x40002ae5
 800ab00:	1c8a2d4b 	.word	0x1c8a2d4b
 800ab04:	40033a27 	.word	0x40033a27
 800ab08:	33145c07 	.word	0x33145c07
 800ab0c:	3c91a626 	.word	0x3c91a626
 800ab10:	54442d18 	.word	0x54442d18
 800ab14:	3ff921fb 	.word	0x3ff921fb
 800ab18:	3fefffff 	.word	0x3fefffff
 800ab1c:	3fdfffff 	.word	0x3fdfffff
 800ab20:	3c600000 	.word	0x3c600000
 800ab24:	3ff00000 	.word	0x3ff00000
 800ab28:	3fe00000 	.word	0x3fe00000
 800ab2c:	ee10 2a10 	vmov	r2, s0
 800ab30:	462b      	mov	r3, r5
 800ab32:	496d      	ldr	r1, [pc, #436]	; (800ace8 <__ieee754_acos+0x4b8>)
 800ab34:	2000      	movs	r0, #0
 800ab36:	f7f5 fb53 	bl	80001e0 <__aeabi_dsub>
 800ab3a:	4b6c      	ldr	r3, [pc, #432]	; (800acec <__ieee754_acos+0x4bc>)
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f7f5 fd07 	bl	8000550 <__aeabi_dmul>
 800ab42:	4604      	mov	r4, r0
 800ab44:	460d      	mov	r5, r1
 800ab46:	ec45 4b10 	vmov	d0, r4, r5
 800ab4a:	f001 f80d 	bl	800bb68 <__ieee754_sqrt>
 800ab4e:	a34e      	add	r3, pc, #312	; (adr r3, 800ac88 <__ieee754_acos+0x458>)
 800ab50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab54:	4620      	mov	r0, r4
 800ab56:	4629      	mov	r1, r5
 800ab58:	ec59 8b10 	vmov	r8, r9, d0
 800ab5c:	f7f5 fcf8 	bl	8000550 <__aeabi_dmul>
 800ab60:	a34b      	add	r3, pc, #300	; (adr r3, 800ac90 <__ieee754_acos+0x460>)
 800ab62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab66:	f7f5 fb3d 	bl	80001e4 <__adddf3>
 800ab6a:	4622      	mov	r2, r4
 800ab6c:	462b      	mov	r3, r5
 800ab6e:	f7f5 fcef 	bl	8000550 <__aeabi_dmul>
 800ab72:	a349      	add	r3, pc, #292	; (adr r3, 800ac98 <__ieee754_acos+0x468>)
 800ab74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab78:	f7f5 fb32 	bl	80001e0 <__aeabi_dsub>
 800ab7c:	4622      	mov	r2, r4
 800ab7e:	462b      	mov	r3, r5
 800ab80:	f7f5 fce6 	bl	8000550 <__aeabi_dmul>
 800ab84:	a346      	add	r3, pc, #280	; (adr r3, 800aca0 <__ieee754_acos+0x470>)
 800ab86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8a:	f7f5 fb2b 	bl	80001e4 <__adddf3>
 800ab8e:	4622      	mov	r2, r4
 800ab90:	462b      	mov	r3, r5
 800ab92:	f7f5 fcdd 	bl	8000550 <__aeabi_dmul>
 800ab96:	a344      	add	r3, pc, #272	; (adr r3, 800aca8 <__ieee754_acos+0x478>)
 800ab98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9c:	f7f5 fb20 	bl	80001e0 <__aeabi_dsub>
 800aba0:	4622      	mov	r2, r4
 800aba2:	462b      	mov	r3, r5
 800aba4:	f7f5 fcd4 	bl	8000550 <__aeabi_dmul>
 800aba8:	a341      	add	r3, pc, #260	; (adr r3, 800acb0 <__ieee754_acos+0x480>)
 800abaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abae:	f7f5 fb19 	bl	80001e4 <__adddf3>
 800abb2:	4622      	mov	r2, r4
 800abb4:	462b      	mov	r3, r5
 800abb6:	f7f5 fccb 	bl	8000550 <__aeabi_dmul>
 800abba:	a33f      	add	r3, pc, #252	; (adr r3, 800acb8 <__ieee754_acos+0x488>)
 800abbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc0:	4682      	mov	sl, r0
 800abc2:	468b      	mov	fp, r1
 800abc4:	4620      	mov	r0, r4
 800abc6:	4629      	mov	r1, r5
 800abc8:	f7f5 fcc2 	bl	8000550 <__aeabi_dmul>
 800abcc:	a33c      	add	r3, pc, #240	; (adr r3, 800acc0 <__ieee754_acos+0x490>)
 800abce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd2:	f7f5 fb05 	bl	80001e0 <__aeabi_dsub>
 800abd6:	4622      	mov	r2, r4
 800abd8:	462b      	mov	r3, r5
 800abda:	f7f5 fcb9 	bl	8000550 <__aeabi_dmul>
 800abde:	a33a      	add	r3, pc, #232	; (adr r3, 800acc8 <__ieee754_acos+0x498>)
 800abe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe4:	f7f5 fafe 	bl	80001e4 <__adddf3>
 800abe8:	4622      	mov	r2, r4
 800abea:	462b      	mov	r3, r5
 800abec:	f7f5 fcb0 	bl	8000550 <__aeabi_dmul>
 800abf0:	a337      	add	r3, pc, #220	; (adr r3, 800acd0 <__ieee754_acos+0x4a0>)
 800abf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf6:	f7f5 faf3 	bl	80001e0 <__aeabi_dsub>
 800abfa:	4622      	mov	r2, r4
 800abfc:	462b      	mov	r3, r5
 800abfe:	f7f5 fca7 	bl	8000550 <__aeabi_dmul>
 800ac02:	4b39      	ldr	r3, [pc, #228]	; (800ace8 <__ieee754_acos+0x4b8>)
 800ac04:	2200      	movs	r2, #0
 800ac06:	f7f5 faed 	bl	80001e4 <__adddf3>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	4650      	mov	r0, sl
 800ac10:	4659      	mov	r1, fp
 800ac12:	f7f5 fdc7 	bl	80007a4 <__aeabi_ddiv>
 800ac16:	4642      	mov	r2, r8
 800ac18:	464b      	mov	r3, r9
 800ac1a:	f7f5 fc99 	bl	8000550 <__aeabi_dmul>
 800ac1e:	2600      	movs	r6, #0
 800ac20:	4682      	mov	sl, r0
 800ac22:	468b      	mov	fp, r1
 800ac24:	4632      	mov	r2, r6
 800ac26:	464b      	mov	r3, r9
 800ac28:	4630      	mov	r0, r6
 800ac2a:	4649      	mov	r1, r9
 800ac2c:	f7f5 fc90 	bl	8000550 <__aeabi_dmul>
 800ac30:	4602      	mov	r2, r0
 800ac32:	460b      	mov	r3, r1
 800ac34:	4620      	mov	r0, r4
 800ac36:	4629      	mov	r1, r5
 800ac38:	f7f5 fad2 	bl	80001e0 <__aeabi_dsub>
 800ac3c:	4632      	mov	r2, r6
 800ac3e:	4604      	mov	r4, r0
 800ac40:	460d      	mov	r5, r1
 800ac42:	464b      	mov	r3, r9
 800ac44:	4640      	mov	r0, r8
 800ac46:	4649      	mov	r1, r9
 800ac48:	f7f5 facc 	bl	80001e4 <__adddf3>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	460b      	mov	r3, r1
 800ac50:	4620      	mov	r0, r4
 800ac52:	4629      	mov	r1, r5
 800ac54:	f7f5 fda6 	bl	80007a4 <__aeabi_ddiv>
 800ac58:	4602      	mov	r2, r0
 800ac5a:	460b      	mov	r3, r1
 800ac5c:	4650      	mov	r0, sl
 800ac5e:	4659      	mov	r1, fp
 800ac60:	f7f5 fac0 	bl	80001e4 <__adddf3>
 800ac64:	4632      	mov	r2, r6
 800ac66:	464b      	mov	r3, r9
 800ac68:	f7f5 fabc 	bl	80001e4 <__adddf3>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	460b      	mov	r3, r1
 800ac70:	f7f5 fab8 	bl	80001e4 <__adddf3>
 800ac74:	e5fe      	b.n	800a874 <__ieee754_acos+0x44>
 800ac76:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800acd8 <__ieee754_acos+0x4a8>
 800ac7a:	e5ed      	b.n	800a858 <__ieee754_acos+0x28>
 800ac7c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800ace0 <__ieee754_acos+0x4b0>
 800ac80:	e5ea      	b.n	800a858 <__ieee754_acos+0x28>
 800ac82:	bf00      	nop
 800ac84:	f3af 8000 	nop.w
 800ac88:	0dfdf709 	.word	0x0dfdf709
 800ac8c:	3f023de1 	.word	0x3f023de1
 800ac90:	7501b288 	.word	0x7501b288
 800ac94:	3f49efe0 	.word	0x3f49efe0
 800ac98:	b5688f3b 	.word	0xb5688f3b
 800ac9c:	3fa48228 	.word	0x3fa48228
 800aca0:	0e884455 	.word	0x0e884455
 800aca4:	3fc9c155 	.word	0x3fc9c155
 800aca8:	03eb6f7d 	.word	0x03eb6f7d
 800acac:	3fd4d612 	.word	0x3fd4d612
 800acb0:	55555555 	.word	0x55555555
 800acb4:	3fc55555 	.word	0x3fc55555
 800acb8:	b12e9282 	.word	0xb12e9282
 800acbc:	3fb3b8c5 	.word	0x3fb3b8c5
 800acc0:	1b8d0159 	.word	0x1b8d0159
 800acc4:	3fe6066c 	.word	0x3fe6066c
 800acc8:	9c598ac8 	.word	0x9c598ac8
 800accc:	40002ae5 	.word	0x40002ae5
 800acd0:	1c8a2d4b 	.word	0x1c8a2d4b
 800acd4:	40033a27 	.word	0x40033a27
	...
 800ace0:	54442d18 	.word	0x54442d18
 800ace4:	3ff921fb 	.word	0x3ff921fb
 800ace8:	3ff00000 	.word	0x3ff00000
 800acec:	3fe00000 	.word	0x3fe00000

0800acf0 <__ieee754_pow>:
 800acf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf4:	ed2d 8b06 	vpush	{d8-d10}
 800acf8:	b089      	sub	sp, #36	; 0x24
 800acfa:	ed8d 1b00 	vstr	d1, [sp]
 800acfe:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ad02:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ad06:	ea58 0102 	orrs.w	r1, r8, r2
 800ad0a:	ec57 6b10 	vmov	r6, r7, d0
 800ad0e:	d115      	bne.n	800ad3c <__ieee754_pow+0x4c>
 800ad10:	19b3      	adds	r3, r6, r6
 800ad12:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ad16:	4152      	adcs	r2, r2
 800ad18:	4299      	cmp	r1, r3
 800ad1a:	4b89      	ldr	r3, [pc, #548]	; (800af40 <__ieee754_pow+0x250>)
 800ad1c:	4193      	sbcs	r3, r2
 800ad1e:	f080 84d2 	bcs.w	800b6c6 <__ieee754_pow+0x9d6>
 800ad22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad26:	4630      	mov	r0, r6
 800ad28:	4639      	mov	r1, r7
 800ad2a:	f7f5 fa5b 	bl	80001e4 <__adddf3>
 800ad2e:	ec41 0b10 	vmov	d0, r0, r1
 800ad32:	b009      	add	sp, #36	; 0x24
 800ad34:	ecbd 8b06 	vpop	{d8-d10}
 800ad38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad3c:	4b81      	ldr	r3, [pc, #516]	; (800af44 <__ieee754_pow+0x254>)
 800ad3e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ad42:	429c      	cmp	r4, r3
 800ad44:	ee10 aa10 	vmov	sl, s0
 800ad48:	463d      	mov	r5, r7
 800ad4a:	dc06      	bgt.n	800ad5a <__ieee754_pow+0x6a>
 800ad4c:	d101      	bne.n	800ad52 <__ieee754_pow+0x62>
 800ad4e:	2e00      	cmp	r6, #0
 800ad50:	d1e7      	bne.n	800ad22 <__ieee754_pow+0x32>
 800ad52:	4598      	cmp	r8, r3
 800ad54:	dc01      	bgt.n	800ad5a <__ieee754_pow+0x6a>
 800ad56:	d10f      	bne.n	800ad78 <__ieee754_pow+0x88>
 800ad58:	b172      	cbz	r2, 800ad78 <__ieee754_pow+0x88>
 800ad5a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ad5e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ad62:	ea55 050a 	orrs.w	r5, r5, sl
 800ad66:	d1dc      	bne.n	800ad22 <__ieee754_pow+0x32>
 800ad68:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ad6c:	18db      	adds	r3, r3, r3
 800ad6e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ad72:	4152      	adcs	r2, r2
 800ad74:	429d      	cmp	r5, r3
 800ad76:	e7d0      	b.n	800ad1a <__ieee754_pow+0x2a>
 800ad78:	2d00      	cmp	r5, #0
 800ad7a:	da3b      	bge.n	800adf4 <__ieee754_pow+0x104>
 800ad7c:	4b72      	ldr	r3, [pc, #456]	; (800af48 <__ieee754_pow+0x258>)
 800ad7e:	4598      	cmp	r8, r3
 800ad80:	dc51      	bgt.n	800ae26 <__ieee754_pow+0x136>
 800ad82:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ad86:	4598      	cmp	r8, r3
 800ad88:	f340 84ac 	ble.w	800b6e4 <__ieee754_pow+0x9f4>
 800ad8c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ad90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ad94:	2b14      	cmp	r3, #20
 800ad96:	dd0f      	ble.n	800adb8 <__ieee754_pow+0xc8>
 800ad98:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ad9c:	fa22 f103 	lsr.w	r1, r2, r3
 800ada0:	fa01 f303 	lsl.w	r3, r1, r3
 800ada4:	4293      	cmp	r3, r2
 800ada6:	f040 849d 	bne.w	800b6e4 <__ieee754_pow+0x9f4>
 800adaa:	f001 0101 	and.w	r1, r1, #1
 800adae:	f1c1 0302 	rsb	r3, r1, #2
 800adb2:	9304      	str	r3, [sp, #16]
 800adb4:	b182      	cbz	r2, 800add8 <__ieee754_pow+0xe8>
 800adb6:	e05f      	b.n	800ae78 <__ieee754_pow+0x188>
 800adb8:	2a00      	cmp	r2, #0
 800adba:	d15b      	bne.n	800ae74 <__ieee754_pow+0x184>
 800adbc:	f1c3 0314 	rsb	r3, r3, #20
 800adc0:	fa48 f103 	asr.w	r1, r8, r3
 800adc4:	fa01 f303 	lsl.w	r3, r1, r3
 800adc8:	4543      	cmp	r3, r8
 800adca:	f040 8488 	bne.w	800b6de <__ieee754_pow+0x9ee>
 800adce:	f001 0101 	and.w	r1, r1, #1
 800add2:	f1c1 0302 	rsb	r3, r1, #2
 800add6:	9304      	str	r3, [sp, #16]
 800add8:	4b5c      	ldr	r3, [pc, #368]	; (800af4c <__ieee754_pow+0x25c>)
 800adda:	4598      	cmp	r8, r3
 800addc:	d132      	bne.n	800ae44 <__ieee754_pow+0x154>
 800adde:	f1b9 0f00 	cmp.w	r9, #0
 800ade2:	f280 8478 	bge.w	800b6d6 <__ieee754_pow+0x9e6>
 800ade6:	4959      	ldr	r1, [pc, #356]	; (800af4c <__ieee754_pow+0x25c>)
 800ade8:	4632      	mov	r2, r6
 800adea:	463b      	mov	r3, r7
 800adec:	2000      	movs	r0, #0
 800adee:	f7f5 fcd9 	bl	80007a4 <__aeabi_ddiv>
 800adf2:	e79c      	b.n	800ad2e <__ieee754_pow+0x3e>
 800adf4:	2300      	movs	r3, #0
 800adf6:	9304      	str	r3, [sp, #16]
 800adf8:	2a00      	cmp	r2, #0
 800adfa:	d13d      	bne.n	800ae78 <__ieee754_pow+0x188>
 800adfc:	4b51      	ldr	r3, [pc, #324]	; (800af44 <__ieee754_pow+0x254>)
 800adfe:	4598      	cmp	r8, r3
 800ae00:	d1ea      	bne.n	800add8 <__ieee754_pow+0xe8>
 800ae02:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ae06:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ae0a:	ea53 030a 	orrs.w	r3, r3, sl
 800ae0e:	f000 845a 	beq.w	800b6c6 <__ieee754_pow+0x9d6>
 800ae12:	4b4f      	ldr	r3, [pc, #316]	; (800af50 <__ieee754_pow+0x260>)
 800ae14:	429c      	cmp	r4, r3
 800ae16:	dd08      	ble.n	800ae2a <__ieee754_pow+0x13a>
 800ae18:	f1b9 0f00 	cmp.w	r9, #0
 800ae1c:	f2c0 8457 	blt.w	800b6ce <__ieee754_pow+0x9de>
 800ae20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae24:	e783      	b.n	800ad2e <__ieee754_pow+0x3e>
 800ae26:	2302      	movs	r3, #2
 800ae28:	e7e5      	b.n	800adf6 <__ieee754_pow+0x106>
 800ae2a:	f1b9 0f00 	cmp.w	r9, #0
 800ae2e:	f04f 0000 	mov.w	r0, #0
 800ae32:	f04f 0100 	mov.w	r1, #0
 800ae36:	f6bf af7a 	bge.w	800ad2e <__ieee754_pow+0x3e>
 800ae3a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ae3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ae42:	e774      	b.n	800ad2e <__ieee754_pow+0x3e>
 800ae44:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ae48:	d106      	bne.n	800ae58 <__ieee754_pow+0x168>
 800ae4a:	4632      	mov	r2, r6
 800ae4c:	463b      	mov	r3, r7
 800ae4e:	4630      	mov	r0, r6
 800ae50:	4639      	mov	r1, r7
 800ae52:	f7f5 fb7d 	bl	8000550 <__aeabi_dmul>
 800ae56:	e76a      	b.n	800ad2e <__ieee754_pow+0x3e>
 800ae58:	4b3e      	ldr	r3, [pc, #248]	; (800af54 <__ieee754_pow+0x264>)
 800ae5a:	4599      	cmp	r9, r3
 800ae5c:	d10c      	bne.n	800ae78 <__ieee754_pow+0x188>
 800ae5e:	2d00      	cmp	r5, #0
 800ae60:	db0a      	blt.n	800ae78 <__ieee754_pow+0x188>
 800ae62:	ec47 6b10 	vmov	d0, r6, r7
 800ae66:	b009      	add	sp, #36	; 0x24
 800ae68:	ecbd 8b06 	vpop	{d8-d10}
 800ae6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae70:	f000 be7a 	b.w	800bb68 <__ieee754_sqrt>
 800ae74:	2300      	movs	r3, #0
 800ae76:	9304      	str	r3, [sp, #16]
 800ae78:	ec47 6b10 	vmov	d0, r6, r7
 800ae7c:	f001 fc2e 	bl	800c6dc <fabs>
 800ae80:	ec51 0b10 	vmov	r0, r1, d0
 800ae84:	f1ba 0f00 	cmp.w	sl, #0
 800ae88:	d129      	bne.n	800aede <__ieee754_pow+0x1ee>
 800ae8a:	b124      	cbz	r4, 800ae96 <__ieee754_pow+0x1a6>
 800ae8c:	4b2f      	ldr	r3, [pc, #188]	; (800af4c <__ieee754_pow+0x25c>)
 800ae8e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d123      	bne.n	800aede <__ieee754_pow+0x1ee>
 800ae96:	f1b9 0f00 	cmp.w	r9, #0
 800ae9a:	da05      	bge.n	800aea8 <__ieee754_pow+0x1b8>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	460b      	mov	r3, r1
 800aea0:	2000      	movs	r0, #0
 800aea2:	492a      	ldr	r1, [pc, #168]	; (800af4c <__ieee754_pow+0x25c>)
 800aea4:	f7f5 fc7e 	bl	80007a4 <__aeabi_ddiv>
 800aea8:	2d00      	cmp	r5, #0
 800aeaa:	f6bf af40 	bge.w	800ad2e <__ieee754_pow+0x3e>
 800aeae:	9b04      	ldr	r3, [sp, #16]
 800aeb0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800aeb4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800aeb8:	4323      	orrs	r3, r4
 800aeba:	d108      	bne.n	800aece <__ieee754_pow+0x1de>
 800aebc:	4602      	mov	r2, r0
 800aebe:	460b      	mov	r3, r1
 800aec0:	4610      	mov	r0, r2
 800aec2:	4619      	mov	r1, r3
 800aec4:	f7f5 f98c 	bl	80001e0 <__aeabi_dsub>
 800aec8:	4602      	mov	r2, r0
 800aeca:	460b      	mov	r3, r1
 800aecc:	e78f      	b.n	800adee <__ieee754_pow+0xfe>
 800aece:	9b04      	ldr	r3, [sp, #16]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	f47f af2c 	bne.w	800ad2e <__ieee754_pow+0x3e>
 800aed6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aeda:	4619      	mov	r1, r3
 800aedc:	e727      	b.n	800ad2e <__ieee754_pow+0x3e>
 800aede:	0feb      	lsrs	r3, r5, #31
 800aee0:	3b01      	subs	r3, #1
 800aee2:	9306      	str	r3, [sp, #24]
 800aee4:	9a06      	ldr	r2, [sp, #24]
 800aee6:	9b04      	ldr	r3, [sp, #16]
 800aee8:	4313      	orrs	r3, r2
 800aeea:	d102      	bne.n	800aef2 <__ieee754_pow+0x202>
 800aeec:	4632      	mov	r2, r6
 800aeee:	463b      	mov	r3, r7
 800aef0:	e7e6      	b.n	800aec0 <__ieee754_pow+0x1d0>
 800aef2:	4b19      	ldr	r3, [pc, #100]	; (800af58 <__ieee754_pow+0x268>)
 800aef4:	4598      	cmp	r8, r3
 800aef6:	f340 80fb 	ble.w	800b0f0 <__ieee754_pow+0x400>
 800aefa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800aefe:	4598      	cmp	r8, r3
 800af00:	4b13      	ldr	r3, [pc, #76]	; (800af50 <__ieee754_pow+0x260>)
 800af02:	dd0c      	ble.n	800af1e <__ieee754_pow+0x22e>
 800af04:	429c      	cmp	r4, r3
 800af06:	dc0f      	bgt.n	800af28 <__ieee754_pow+0x238>
 800af08:	f1b9 0f00 	cmp.w	r9, #0
 800af0c:	da0f      	bge.n	800af2e <__ieee754_pow+0x23e>
 800af0e:	2000      	movs	r0, #0
 800af10:	b009      	add	sp, #36	; 0x24
 800af12:	ecbd 8b06 	vpop	{d8-d10}
 800af16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af1a:	f001 bbd6 	b.w	800c6ca <__math_oflow>
 800af1e:	429c      	cmp	r4, r3
 800af20:	dbf2      	blt.n	800af08 <__ieee754_pow+0x218>
 800af22:	4b0a      	ldr	r3, [pc, #40]	; (800af4c <__ieee754_pow+0x25c>)
 800af24:	429c      	cmp	r4, r3
 800af26:	dd19      	ble.n	800af5c <__ieee754_pow+0x26c>
 800af28:	f1b9 0f00 	cmp.w	r9, #0
 800af2c:	dcef      	bgt.n	800af0e <__ieee754_pow+0x21e>
 800af2e:	2000      	movs	r0, #0
 800af30:	b009      	add	sp, #36	; 0x24
 800af32:	ecbd 8b06 	vpop	{d8-d10}
 800af36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af3a:	f001 bbbd 	b.w	800c6b8 <__math_uflow>
 800af3e:	bf00      	nop
 800af40:	fff00000 	.word	0xfff00000
 800af44:	7ff00000 	.word	0x7ff00000
 800af48:	433fffff 	.word	0x433fffff
 800af4c:	3ff00000 	.word	0x3ff00000
 800af50:	3fefffff 	.word	0x3fefffff
 800af54:	3fe00000 	.word	0x3fe00000
 800af58:	41e00000 	.word	0x41e00000
 800af5c:	4b60      	ldr	r3, [pc, #384]	; (800b0e0 <__ieee754_pow+0x3f0>)
 800af5e:	2200      	movs	r2, #0
 800af60:	f7f5 f93e 	bl	80001e0 <__aeabi_dsub>
 800af64:	a354      	add	r3, pc, #336	; (adr r3, 800b0b8 <__ieee754_pow+0x3c8>)
 800af66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6a:	4604      	mov	r4, r0
 800af6c:	460d      	mov	r5, r1
 800af6e:	f7f5 faef 	bl	8000550 <__aeabi_dmul>
 800af72:	a353      	add	r3, pc, #332	; (adr r3, 800b0c0 <__ieee754_pow+0x3d0>)
 800af74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af78:	4606      	mov	r6, r0
 800af7a:	460f      	mov	r7, r1
 800af7c:	4620      	mov	r0, r4
 800af7e:	4629      	mov	r1, r5
 800af80:	f7f5 fae6 	bl	8000550 <__aeabi_dmul>
 800af84:	4b57      	ldr	r3, [pc, #348]	; (800b0e4 <__ieee754_pow+0x3f4>)
 800af86:	4682      	mov	sl, r0
 800af88:	468b      	mov	fp, r1
 800af8a:	2200      	movs	r2, #0
 800af8c:	4620      	mov	r0, r4
 800af8e:	4629      	mov	r1, r5
 800af90:	f7f5 fade 	bl	8000550 <__aeabi_dmul>
 800af94:	4602      	mov	r2, r0
 800af96:	460b      	mov	r3, r1
 800af98:	a14b      	add	r1, pc, #300	; (adr r1, 800b0c8 <__ieee754_pow+0x3d8>)
 800af9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af9e:	f7f5 f91f 	bl	80001e0 <__aeabi_dsub>
 800afa2:	4622      	mov	r2, r4
 800afa4:	462b      	mov	r3, r5
 800afa6:	f7f5 fad3 	bl	8000550 <__aeabi_dmul>
 800afaa:	4602      	mov	r2, r0
 800afac:	460b      	mov	r3, r1
 800afae:	2000      	movs	r0, #0
 800afb0:	494d      	ldr	r1, [pc, #308]	; (800b0e8 <__ieee754_pow+0x3f8>)
 800afb2:	f7f5 f915 	bl	80001e0 <__aeabi_dsub>
 800afb6:	4622      	mov	r2, r4
 800afb8:	4680      	mov	r8, r0
 800afba:	4689      	mov	r9, r1
 800afbc:	462b      	mov	r3, r5
 800afbe:	4620      	mov	r0, r4
 800afc0:	4629      	mov	r1, r5
 800afc2:	f7f5 fac5 	bl	8000550 <__aeabi_dmul>
 800afc6:	4602      	mov	r2, r0
 800afc8:	460b      	mov	r3, r1
 800afca:	4640      	mov	r0, r8
 800afcc:	4649      	mov	r1, r9
 800afce:	f7f5 fabf 	bl	8000550 <__aeabi_dmul>
 800afd2:	a33f      	add	r3, pc, #252	; (adr r3, 800b0d0 <__ieee754_pow+0x3e0>)
 800afd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd8:	f7f5 faba 	bl	8000550 <__aeabi_dmul>
 800afdc:	4602      	mov	r2, r0
 800afde:	460b      	mov	r3, r1
 800afe0:	4650      	mov	r0, sl
 800afe2:	4659      	mov	r1, fp
 800afe4:	f7f5 f8fc 	bl	80001e0 <__aeabi_dsub>
 800afe8:	4602      	mov	r2, r0
 800afea:	460b      	mov	r3, r1
 800afec:	4680      	mov	r8, r0
 800afee:	4689      	mov	r9, r1
 800aff0:	4630      	mov	r0, r6
 800aff2:	4639      	mov	r1, r7
 800aff4:	f7f5 f8f6 	bl	80001e4 <__adddf3>
 800aff8:	2000      	movs	r0, #0
 800affa:	4632      	mov	r2, r6
 800affc:	463b      	mov	r3, r7
 800affe:	4604      	mov	r4, r0
 800b000:	460d      	mov	r5, r1
 800b002:	f7f5 f8ed 	bl	80001e0 <__aeabi_dsub>
 800b006:	4602      	mov	r2, r0
 800b008:	460b      	mov	r3, r1
 800b00a:	4640      	mov	r0, r8
 800b00c:	4649      	mov	r1, r9
 800b00e:	f7f5 f8e7 	bl	80001e0 <__aeabi_dsub>
 800b012:	9b04      	ldr	r3, [sp, #16]
 800b014:	9a06      	ldr	r2, [sp, #24]
 800b016:	3b01      	subs	r3, #1
 800b018:	4313      	orrs	r3, r2
 800b01a:	4682      	mov	sl, r0
 800b01c:	468b      	mov	fp, r1
 800b01e:	f040 81e7 	bne.w	800b3f0 <__ieee754_pow+0x700>
 800b022:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b0d8 <__ieee754_pow+0x3e8>
 800b026:	eeb0 8a47 	vmov.f32	s16, s14
 800b02a:	eef0 8a67 	vmov.f32	s17, s15
 800b02e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b032:	2600      	movs	r6, #0
 800b034:	4632      	mov	r2, r6
 800b036:	463b      	mov	r3, r7
 800b038:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b03c:	f7f5 f8d0 	bl	80001e0 <__aeabi_dsub>
 800b040:	4622      	mov	r2, r4
 800b042:	462b      	mov	r3, r5
 800b044:	f7f5 fa84 	bl	8000550 <__aeabi_dmul>
 800b048:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b04c:	4680      	mov	r8, r0
 800b04e:	4689      	mov	r9, r1
 800b050:	4650      	mov	r0, sl
 800b052:	4659      	mov	r1, fp
 800b054:	f7f5 fa7c 	bl	8000550 <__aeabi_dmul>
 800b058:	4602      	mov	r2, r0
 800b05a:	460b      	mov	r3, r1
 800b05c:	4640      	mov	r0, r8
 800b05e:	4649      	mov	r1, r9
 800b060:	f7f5 f8c0 	bl	80001e4 <__adddf3>
 800b064:	4632      	mov	r2, r6
 800b066:	463b      	mov	r3, r7
 800b068:	4680      	mov	r8, r0
 800b06a:	4689      	mov	r9, r1
 800b06c:	4620      	mov	r0, r4
 800b06e:	4629      	mov	r1, r5
 800b070:	f7f5 fa6e 	bl	8000550 <__aeabi_dmul>
 800b074:	460b      	mov	r3, r1
 800b076:	4604      	mov	r4, r0
 800b078:	460d      	mov	r5, r1
 800b07a:	4602      	mov	r2, r0
 800b07c:	4649      	mov	r1, r9
 800b07e:	4640      	mov	r0, r8
 800b080:	f7f5 f8b0 	bl	80001e4 <__adddf3>
 800b084:	4b19      	ldr	r3, [pc, #100]	; (800b0ec <__ieee754_pow+0x3fc>)
 800b086:	4299      	cmp	r1, r3
 800b088:	ec45 4b19 	vmov	d9, r4, r5
 800b08c:	4606      	mov	r6, r0
 800b08e:	460f      	mov	r7, r1
 800b090:	468b      	mov	fp, r1
 800b092:	f340 82f1 	ble.w	800b678 <__ieee754_pow+0x988>
 800b096:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b09a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b09e:	4303      	orrs	r3, r0
 800b0a0:	f000 81e4 	beq.w	800b46c <__ieee754_pow+0x77c>
 800b0a4:	ec51 0b18 	vmov	r0, r1, d8
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	f7f5 fcc2 	bl	8000a34 <__aeabi_dcmplt>
 800b0b0:	3800      	subs	r0, #0
 800b0b2:	bf18      	it	ne
 800b0b4:	2001      	movne	r0, #1
 800b0b6:	e72b      	b.n	800af10 <__ieee754_pow+0x220>
 800b0b8:	60000000 	.word	0x60000000
 800b0bc:	3ff71547 	.word	0x3ff71547
 800b0c0:	f85ddf44 	.word	0xf85ddf44
 800b0c4:	3e54ae0b 	.word	0x3e54ae0b
 800b0c8:	55555555 	.word	0x55555555
 800b0cc:	3fd55555 	.word	0x3fd55555
 800b0d0:	652b82fe 	.word	0x652b82fe
 800b0d4:	3ff71547 	.word	0x3ff71547
 800b0d8:	00000000 	.word	0x00000000
 800b0dc:	bff00000 	.word	0xbff00000
 800b0e0:	3ff00000 	.word	0x3ff00000
 800b0e4:	3fd00000 	.word	0x3fd00000
 800b0e8:	3fe00000 	.word	0x3fe00000
 800b0ec:	408fffff 	.word	0x408fffff
 800b0f0:	4bd5      	ldr	r3, [pc, #852]	; (800b448 <__ieee754_pow+0x758>)
 800b0f2:	402b      	ands	r3, r5
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	b92b      	cbnz	r3, 800b104 <__ieee754_pow+0x414>
 800b0f8:	4bd4      	ldr	r3, [pc, #848]	; (800b44c <__ieee754_pow+0x75c>)
 800b0fa:	f7f5 fa29 	bl	8000550 <__aeabi_dmul>
 800b0fe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b102:	460c      	mov	r4, r1
 800b104:	1523      	asrs	r3, r4, #20
 800b106:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b10a:	4413      	add	r3, r2
 800b10c:	9305      	str	r3, [sp, #20]
 800b10e:	4bd0      	ldr	r3, [pc, #832]	; (800b450 <__ieee754_pow+0x760>)
 800b110:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b114:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b118:	429c      	cmp	r4, r3
 800b11a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b11e:	dd08      	ble.n	800b132 <__ieee754_pow+0x442>
 800b120:	4bcc      	ldr	r3, [pc, #816]	; (800b454 <__ieee754_pow+0x764>)
 800b122:	429c      	cmp	r4, r3
 800b124:	f340 8162 	ble.w	800b3ec <__ieee754_pow+0x6fc>
 800b128:	9b05      	ldr	r3, [sp, #20]
 800b12a:	3301      	adds	r3, #1
 800b12c:	9305      	str	r3, [sp, #20]
 800b12e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b132:	2400      	movs	r4, #0
 800b134:	00e3      	lsls	r3, r4, #3
 800b136:	9307      	str	r3, [sp, #28]
 800b138:	4bc7      	ldr	r3, [pc, #796]	; (800b458 <__ieee754_pow+0x768>)
 800b13a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b13e:	ed93 7b00 	vldr	d7, [r3]
 800b142:	4629      	mov	r1, r5
 800b144:	ec53 2b17 	vmov	r2, r3, d7
 800b148:	eeb0 9a47 	vmov.f32	s18, s14
 800b14c:	eef0 9a67 	vmov.f32	s19, s15
 800b150:	4682      	mov	sl, r0
 800b152:	f7f5 f845 	bl	80001e0 <__aeabi_dsub>
 800b156:	4652      	mov	r2, sl
 800b158:	4606      	mov	r6, r0
 800b15a:	460f      	mov	r7, r1
 800b15c:	462b      	mov	r3, r5
 800b15e:	ec51 0b19 	vmov	r0, r1, d9
 800b162:	f7f5 f83f 	bl	80001e4 <__adddf3>
 800b166:	4602      	mov	r2, r0
 800b168:	460b      	mov	r3, r1
 800b16a:	2000      	movs	r0, #0
 800b16c:	49bb      	ldr	r1, [pc, #748]	; (800b45c <__ieee754_pow+0x76c>)
 800b16e:	f7f5 fb19 	bl	80007a4 <__aeabi_ddiv>
 800b172:	ec41 0b1a 	vmov	d10, r0, r1
 800b176:	4602      	mov	r2, r0
 800b178:	460b      	mov	r3, r1
 800b17a:	4630      	mov	r0, r6
 800b17c:	4639      	mov	r1, r7
 800b17e:	f7f5 f9e7 	bl	8000550 <__aeabi_dmul>
 800b182:	2300      	movs	r3, #0
 800b184:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b188:	9302      	str	r3, [sp, #8]
 800b18a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b18e:	46ab      	mov	fp, r5
 800b190:	106d      	asrs	r5, r5, #1
 800b192:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b196:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b19a:	ec41 0b18 	vmov	d8, r0, r1
 800b19e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	4640      	mov	r0, r8
 800b1a6:	4649      	mov	r1, r9
 800b1a8:	4614      	mov	r4, r2
 800b1aa:	461d      	mov	r5, r3
 800b1ac:	f7f5 f9d0 	bl	8000550 <__aeabi_dmul>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	4630      	mov	r0, r6
 800b1b6:	4639      	mov	r1, r7
 800b1b8:	f7f5 f812 	bl	80001e0 <__aeabi_dsub>
 800b1bc:	ec53 2b19 	vmov	r2, r3, d9
 800b1c0:	4606      	mov	r6, r0
 800b1c2:	460f      	mov	r7, r1
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	4629      	mov	r1, r5
 800b1c8:	f7f5 f80a 	bl	80001e0 <__aeabi_dsub>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	4650      	mov	r0, sl
 800b1d2:	4659      	mov	r1, fp
 800b1d4:	f7f5 f804 	bl	80001e0 <__aeabi_dsub>
 800b1d8:	4642      	mov	r2, r8
 800b1da:	464b      	mov	r3, r9
 800b1dc:	f7f5 f9b8 	bl	8000550 <__aeabi_dmul>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	4630      	mov	r0, r6
 800b1e6:	4639      	mov	r1, r7
 800b1e8:	f7f4 fffa 	bl	80001e0 <__aeabi_dsub>
 800b1ec:	ec53 2b1a 	vmov	r2, r3, d10
 800b1f0:	f7f5 f9ae 	bl	8000550 <__aeabi_dmul>
 800b1f4:	ec53 2b18 	vmov	r2, r3, d8
 800b1f8:	ec41 0b19 	vmov	d9, r0, r1
 800b1fc:	ec51 0b18 	vmov	r0, r1, d8
 800b200:	f7f5 f9a6 	bl	8000550 <__aeabi_dmul>
 800b204:	a37c      	add	r3, pc, #496	; (adr r3, 800b3f8 <__ieee754_pow+0x708>)
 800b206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20a:	4604      	mov	r4, r0
 800b20c:	460d      	mov	r5, r1
 800b20e:	f7f5 f99f 	bl	8000550 <__aeabi_dmul>
 800b212:	a37b      	add	r3, pc, #492	; (adr r3, 800b400 <__ieee754_pow+0x710>)
 800b214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b218:	f7f4 ffe4 	bl	80001e4 <__adddf3>
 800b21c:	4622      	mov	r2, r4
 800b21e:	462b      	mov	r3, r5
 800b220:	f7f5 f996 	bl	8000550 <__aeabi_dmul>
 800b224:	a378      	add	r3, pc, #480	; (adr r3, 800b408 <__ieee754_pow+0x718>)
 800b226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22a:	f7f4 ffdb 	bl	80001e4 <__adddf3>
 800b22e:	4622      	mov	r2, r4
 800b230:	462b      	mov	r3, r5
 800b232:	f7f5 f98d 	bl	8000550 <__aeabi_dmul>
 800b236:	a376      	add	r3, pc, #472	; (adr r3, 800b410 <__ieee754_pow+0x720>)
 800b238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23c:	f7f4 ffd2 	bl	80001e4 <__adddf3>
 800b240:	4622      	mov	r2, r4
 800b242:	462b      	mov	r3, r5
 800b244:	f7f5 f984 	bl	8000550 <__aeabi_dmul>
 800b248:	a373      	add	r3, pc, #460	; (adr r3, 800b418 <__ieee754_pow+0x728>)
 800b24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24e:	f7f4 ffc9 	bl	80001e4 <__adddf3>
 800b252:	4622      	mov	r2, r4
 800b254:	462b      	mov	r3, r5
 800b256:	f7f5 f97b 	bl	8000550 <__aeabi_dmul>
 800b25a:	a371      	add	r3, pc, #452	; (adr r3, 800b420 <__ieee754_pow+0x730>)
 800b25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b260:	f7f4 ffc0 	bl	80001e4 <__adddf3>
 800b264:	4622      	mov	r2, r4
 800b266:	4606      	mov	r6, r0
 800b268:	460f      	mov	r7, r1
 800b26a:	462b      	mov	r3, r5
 800b26c:	4620      	mov	r0, r4
 800b26e:	4629      	mov	r1, r5
 800b270:	f7f5 f96e 	bl	8000550 <__aeabi_dmul>
 800b274:	4602      	mov	r2, r0
 800b276:	460b      	mov	r3, r1
 800b278:	4630      	mov	r0, r6
 800b27a:	4639      	mov	r1, r7
 800b27c:	f7f5 f968 	bl	8000550 <__aeabi_dmul>
 800b280:	4642      	mov	r2, r8
 800b282:	4604      	mov	r4, r0
 800b284:	460d      	mov	r5, r1
 800b286:	464b      	mov	r3, r9
 800b288:	ec51 0b18 	vmov	r0, r1, d8
 800b28c:	f7f4 ffaa 	bl	80001e4 <__adddf3>
 800b290:	ec53 2b19 	vmov	r2, r3, d9
 800b294:	f7f5 f95c 	bl	8000550 <__aeabi_dmul>
 800b298:	4622      	mov	r2, r4
 800b29a:	462b      	mov	r3, r5
 800b29c:	f7f4 ffa2 	bl	80001e4 <__adddf3>
 800b2a0:	4642      	mov	r2, r8
 800b2a2:	4682      	mov	sl, r0
 800b2a4:	468b      	mov	fp, r1
 800b2a6:	464b      	mov	r3, r9
 800b2a8:	4640      	mov	r0, r8
 800b2aa:	4649      	mov	r1, r9
 800b2ac:	f7f5 f950 	bl	8000550 <__aeabi_dmul>
 800b2b0:	4b6b      	ldr	r3, [pc, #428]	; (800b460 <__ieee754_pow+0x770>)
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	4606      	mov	r6, r0
 800b2b6:	460f      	mov	r7, r1
 800b2b8:	f7f4 ff94 	bl	80001e4 <__adddf3>
 800b2bc:	4652      	mov	r2, sl
 800b2be:	465b      	mov	r3, fp
 800b2c0:	f7f4 ff90 	bl	80001e4 <__adddf3>
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	460d      	mov	r5, r1
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	4640      	mov	r0, r8
 800b2d0:	4649      	mov	r1, r9
 800b2d2:	f7f5 f93d 	bl	8000550 <__aeabi_dmul>
 800b2d6:	4b62      	ldr	r3, [pc, #392]	; (800b460 <__ieee754_pow+0x770>)
 800b2d8:	4680      	mov	r8, r0
 800b2da:	4689      	mov	r9, r1
 800b2dc:	2200      	movs	r2, #0
 800b2de:	4620      	mov	r0, r4
 800b2e0:	4629      	mov	r1, r5
 800b2e2:	f7f4 ff7d 	bl	80001e0 <__aeabi_dsub>
 800b2e6:	4632      	mov	r2, r6
 800b2e8:	463b      	mov	r3, r7
 800b2ea:	f7f4 ff79 	bl	80001e0 <__aeabi_dsub>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	4650      	mov	r0, sl
 800b2f4:	4659      	mov	r1, fp
 800b2f6:	f7f4 ff73 	bl	80001e0 <__aeabi_dsub>
 800b2fa:	ec53 2b18 	vmov	r2, r3, d8
 800b2fe:	f7f5 f927 	bl	8000550 <__aeabi_dmul>
 800b302:	4622      	mov	r2, r4
 800b304:	4606      	mov	r6, r0
 800b306:	460f      	mov	r7, r1
 800b308:	462b      	mov	r3, r5
 800b30a:	ec51 0b19 	vmov	r0, r1, d9
 800b30e:	f7f5 f91f 	bl	8000550 <__aeabi_dmul>
 800b312:	4602      	mov	r2, r0
 800b314:	460b      	mov	r3, r1
 800b316:	4630      	mov	r0, r6
 800b318:	4639      	mov	r1, r7
 800b31a:	f7f4 ff63 	bl	80001e4 <__adddf3>
 800b31e:	4606      	mov	r6, r0
 800b320:	460f      	mov	r7, r1
 800b322:	4602      	mov	r2, r0
 800b324:	460b      	mov	r3, r1
 800b326:	4640      	mov	r0, r8
 800b328:	4649      	mov	r1, r9
 800b32a:	f7f4 ff5b 	bl	80001e4 <__adddf3>
 800b32e:	a33e      	add	r3, pc, #248	; (adr r3, 800b428 <__ieee754_pow+0x738>)
 800b330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b334:	2000      	movs	r0, #0
 800b336:	4604      	mov	r4, r0
 800b338:	460d      	mov	r5, r1
 800b33a:	f7f5 f909 	bl	8000550 <__aeabi_dmul>
 800b33e:	4642      	mov	r2, r8
 800b340:	ec41 0b18 	vmov	d8, r0, r1
 800b344:	464b      	mov	r3, r9
 800b346:	4620      	mov	r0, r4
 800b348:	4629      	mov	r1, r5
 800b34a:	f7f4 ff49 	bl	80001e0 <__aeabi_dsub>
 800b34e:	4602      	mov	r2, r0
 800b350:	460b      	mov	r3, r1
 800b352:	4630      	mov	r0, r6
 800b354:	4639      	mov	r1, r7
 800b356:	f7f4 ff43 	bl	80001e0 <__aeabi_dsub>
 800b35a:	a335      	add	r3, pc, #212	; (adr r3, 800b430 <__ieee754_pow+0x740>)
 800b35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b360:	f7f5 f8f6 	bl	8000550 <__aeabi_dmul>
 800b364:	a334      	add	r3, pc, #208	; (adr r3, 800b438 <__ieee754_pow+0x748>)
 800b366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36a:	4606      	mov	r6, r0
 800b36c:	460f      	mov	r7, r1
 800b36e:	4620      	mov	r0, r4
 800b370:	4629      	mov	r1, r5
 800b372:	f7f5 f8ed 	bl	8000550 <__aeabi_dmul>
 800b376:	4602      	mov	r2, r0
 800b378:	460b      	mov	r3, r1
 800b37a:	4630      	mov	r0, r6
 800b37c:	4639      	mov	r1, r7
 800b37e:	f7f4 ff31 	bl	80001e4 <__adddf3>
 800b382:	9a07      	ldr	r2, [sp, #28]
 800b384:	4b37      	ldr	r3, [pc, #220]	; (800b464 <__ieee754_pow+0x774>)
 800b386:	4413      	add	r3, r2
 800b388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38c:	f7f4 ff2a 	bl	80001e4 <__adddf3>
 800b390:	4682      	mov	sl, r0
 800b392:	9805      	ldr	r0, [sp, #20]
 800b394:	468b      	mov	fp, r1
 800b396:	f7f5 f871 	bl	800047c <__aeabi_i2d>
 800b39a:	9a07      	ldr	r2, [sp, #28]
 800b39c:	4b32      	ldr	r3, [pc, #200]	; (800b468 <__ieee754_pow+0x778>)
 800b39e:	4413      	add	r3, r2
 800b3a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b3a4:	4606      	mov	r6, r0
 800b3a6:	460f      	mov	r7, r1
 800b3a8:	4652      	mov	r2, sl
 800b3aa:	465b      	mov	r3, fp
 800b3ac:	ec51 0b18 	vmov	r0, r1, d8
 800b3b0:	f7f4 ff18 	bl	80001e4 <__adddf3>
 800b3b4:	4642      	mov	r2, r8
 800b3b6:	464b      	mov	r3, r9
 800b3b8:	f7f4 ff14 	bl	80001e4 <__adddf3>
 800b3bc:	4632      	mov	r2, r6
 800b3be:	463b      	mov	r3, r7
 800b3c0:	f7f4 ff10 	bl	80001e4 <__adddf3>
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	4632      	mov	r2, r6
 800b3c8:	463b      	mov	r3, r7
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	460d      	mov	r5, r1
 800b3ce:	f7f4 ff07 	bl	80001e0 <__aeabi_dsub>
 800b3d2:	4642      	mov	r2, r8
 800b3d4:	464b      	mov	r3, r9
 800b3d6:	f7f4 ff03 	bl	80001e0 <__aeabi_dsub>
 800b3da:	ec53 2b18 	vmov	r2, r3, d8
 800b3de:	f7f4 feff 	bl	80001e0 <__aeabi_dsub>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	4650      	mov	r0, sl
 800b3e8:	4659      	mov	r1, fp
 800b3ea:	e610      	b.n	800b00e <__ieee754_pow+0x31e>
 800b3ec:	2401      	movs	r4, #1
 800b3ee:	e6a1      	b.n	800b134 <__ieee754_pow+0x444>
 800b3f0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b440 <__ieee754_pow+0x750>
 800b3f4:	e617      	b.n	800b026 <__ieee754_pow+0x336>
 800b3f6:	bf00      	nop
 800b3f8:	4a454eef 	.word	0x4a454eef
 800b3fc:	3fca7e28 	.word	0x3fca7e28
 800b400:	93c9db65 	.word	0x93c9db65
 800b404:	3fcd864a 	.word	0x3fcd864a
 800b408:	a91d4101 	.word	0xa91d4101
 800b40c:	3fd17460 	.word	0x3fd17460
 800b410:	518f264d 	.word	0x518f264d
 800b414:	3fd55555 	.word	0x3fd55555
 800b418:	db6fabff 	.word	0xdb6fabff
 800b41c:	3fdb6db6 	.word	0x3fdb6db6
 800b420:	33333303 	.word	0x33333303
 800b424:	3fe33333 	.word	0x3fe33333
 800b428:	e0000000 	.word	0xe0000000
 800b42c:	3feec709 	.word	0x3feec709
 800b430:	dc3a03fd 	.word	0xdc3a03fd
 800b434:	3feec709 	.word	0x3feec709
 800b438:	145b01f5 	.word	0x145b01f5
 800b43c:	be3e2fe0 	.word	0xbe3e2fe0
 800b440:	00000000 	.word	0x00000000
 800b444:	3ff00000 	.word	0x3ff00000
 800b448:	7ff00000 	.word	0x7ff00000
 800b44c:	43400000 	.word	0x43400000
 800b450:	0003988e 	.word	0x0003988e
 800b454:	000bb679 	.word	0x000bb679
 800b458:	0800c868 	.word	0x0800c868
 800b45c:	3ff00000 	.word	0x3ff00000
 800b460:	40080000 	.word	0x40080000
 800b464:	0800c888 	.word	0x0800c888
 800b468:	0800c878 	.word	0x0800c878
 800b46c:	a3b5      	add	r3, pc, #724	; (adr r3, 800b744 <__ieee754_pow+0xa54>)
 800b46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b472:	4640      	mov	r0, r8
 800b474:	4649      	mov	r1, r9
 800b476:	f7f4 feb5 	bl	80001e4 <__adddf3>
 800b47a:	4622      	mov	r2, r4
 800b47c:	ec41 0b1a 	vmov	d10, r0, r1
 800b480:	462b      	mov	r3, r5
 800b482:	4630      	mov	r0, r6
 800b484:	4639      	mov	r1, r7
 800b486:	f7f4 feab 	bl	80001e0 <__aeabi_dsub>
 800b48a:	4602      	mov	r2, r0
 800b48c:	460b      	mov	r3, r1
 800b48e:	ec51 0b1a 	vmov	r0, r1, d10
 800b492:	f7f5 faed 	bl	8000a70 <__aeabi_dcmpgt>
 800b496:	2800      	cmp	r0, #0
 800b498:	f47f ae04 	bne.w	800b0a4 <__ieee754_pow+0x3b4>
 800b49c:	4aa4      	ldr	r2, [pc, #656]	; (800b730 <__ieee754_pow+0xa40>)
 800b49e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	f340 8108 	ble.w	800b6b8 <__ieee754_pow+0x9c8>
 800b4a8:	151b      	asrs	r3, r3, #20
 800b4aa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b4ae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b4b2:	fa4a f303 	asr.w	r3, sl, r3
 800b4b6:	445b      	add	r3, fp
 800b4b8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b4bc:	4e9d      	ldr	r6, [pc, #628]	; (800b734 <__ieee754_pow+0xa44>)
 800b4be:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b4c2:	4116      	asrs	r6, r2
 800b4c4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b4c8:	2000      	movs	r0, #0
 800b4ca:	ea23 0106 	bic.w	r1, r3, r6
 800b4ce:	f1c2 0214 	rsb	r2, r2, #20
 800b4d2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b4d6:	fa4a fa02 	asr.w	sl, sl, r2
 800b4da:	f1bb 0f00 	cmp.w	fp, #0
 800b4de:	4602      	mov	r2, r0
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	4629      	mov	r1, r5
 800b4e6:	bfb8      	it	lt
 800b4e8:	f1ca 0a00 	rsblt	sl, sl, #0
 800b4ec:	f7f4 fe78 	bl	80001e0 <__aeabi_dsub>
 800b4f0:	ec41 0b19 	vmov	d9, r0, r1
 800b4f4:	4642      	mov	r2, r8
 800b4f6:	464b      	mov	r3, r9
 800b4f8:	ec51 0b19 	vmov	r0, r1, d9
 800b4fc:	f7f4 fe72 	bl	80001e4 <__adddf3>
 800b500:	a37b      	add	r3, pc, #492	; (adr r3, 800b6f0 <__ieee754_pow+0xa00>)
 800b502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b506:	2000      	movs	r0, #0
 800b508:	4604      	mov	r4, r0
 800b50a:	460d      	mov	r5, r1
 800b50c:	f7f5 f820 	bl	8000550 <__aeabi_dmul>
 800b510:	ec53 2b19 	vmov	r2, r3, d9
 800b514:	4606      	mov	r6, r0
 800b516:	460f      	mov	r7, r1
 800b518:	4620      	mov	r0, r4
 800b51a:	4629      	mov	r1, r5
 800b51c:	f7f4 fe60 	bl	80001e0 <__aeabi_dsub>
 800b520:	4602      	mov	r2, r0
 800b522:	460b      	mov	r3, r1
 800b524:	4640      	mov	r0, r8
 800b526:	4649      	mov	r1, r9
 800b528:	f7f4 fe5a 	bl	80001e0 <__aeabi_dsub>
 800b52c:	a372      	add	r3, pc, #456	; (adr r3, 800b6f8 <__ieee754_pow+0xa08>)
 800b52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b532:	f7f5 f80d 	bl	8000550 <__aeabi_dmul>
 800b536:	a372      	add	r3, pc, #456	; (adr r3, 800b700 <__ieee754_pow+0xa10>)
 800b538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53c:	4680      	mov	r8, r0
 800b53e:	4689      	mov	r9, r1
 800b540:	4620      	mov	r0, r4
 800b542:	4629      	mov	r1, r5
 800b544:	f7f5 f804 	bl	8000550 <__aeabi_dmul>
 800b548:	4602      	mov	r2, r0
 800b54a:	460b      	mov	r3, r1
 800b54c:	4640      	mov	r0, r8
 800b54e:	4649      	mov	r1, r9
 800b550:	f7f4 fe48 	bl	80001e4 <__adddf3>
 800b554:	4604      	mov	r4, r0
 800b556:	460d      	mov	r5, r1
 800b558:	4602      	mov	r2, r0
 800b55a:	460b      	mov	r3, r1
 800b55c:	4630      	mov	r0, r6
 800b55e:	4639      	mov	r1, r7
 800b560:	f7f4 fe40 	bl	80001e4 <__adddf3>
 800b564:	4632      	mov	r2, r6
 800b566:	463b      	mov	r3, r7
 800b568:	4680      	mov	r8, r0
 800b56a:	4689      	mov	r9, r1
 800b56c:	f7f4 fe38 	bl	80001e0 <__aeabi_dsub>
 800b570:	4602      	mov	r2, r0
 800b572:	460b      	mov	r3, r1
 800b574:	4620      	mov	r0, r4
 800b576:	4629      	mov	r1, r5
 800b578:	f7f4 fe32 	bl	80001e0 <__aeabi_dsub>
 800b57c:	4642      	mov	r2, r8
 800b57e:	4606      	mov	r6, r0
 800b580:	460f      	mov	r7, r1
 800b582:	464b      	mov	r3, r9
 800b584:	4640      	mov	r0, r8
 800b586:	4649      	mov	r1, r9
 800b588:	f7f4 ffe2 	bl	8000550 <__aeabi_dmul>
 800b58c:	a35e      	add	r3, pc, #376	; (adr r3, 800b708 <__ieee754_pow+0xa18>)
 800b58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b592:	4604      	mov	r4, r0
 800b594:	460d      	mov	r5, r1
 800b596:	f7f4 ffdb 	bl	8000550 <__aeabi_dmul>
 800b59a:	a35d      	add	r3, pc, #372	; (adr r3, 800b710 <__ieee754_pow+0xa20>)
 800b59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a0:	f7f4 fe1e 	bl	80001e0 <__aeabi_dsub>
 800b5a4:	4622      	mov	r2, r4
 800b5a6:	462b      	mov	r3, r5
 800b5a8:	f7f4 ffd2 	bl	8000550 <__aeabi_dmul>
 800b5ac:	a35a      	add	r3, pc, #360	; (adr r3, 800b718 <__ieee754_pow+0xa28>)
 800b5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b2:	f7f4 fe17 	bl	80001e4 <__adddf3>
 800b5b6:	4622      	mov	r2, r4
 800b5b8:	462b      	mov	r3, r5
 800b5ba:	f7f4 ffc9 	bl	8000550 <__aeabi_dmul>
 800b5be:	a358      	add	r3, pc, #352	; (adr r3, 800b720 <__ieee754_pow+0xa30>)
 800b5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c4:	f7f4 fe0c 	bl	80001e0 <__aeabi_dsub>
 800b5c8:	4622      	mov	r2, r4
 800b5ca:	462b      	mov	r3, r5
 800b5cc:	f7f4 ffc0 	bl	8000550 <__aeabi_dmul>
 800b5d0:	a355      	add	r3, pc, #340	; (adr r3, 800b728 <__ieee754_pow+0xa38>)
 800b5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d6:	f7f4 fe05 	bl	80001e4 <__adddf3>
 800b5da:	4622      	mov	r2, r4
 800b5dc:	462b      	mov	r3, r5
 800b5de:	f7f4 ffb7 	bl	8000550 <__aeabi_dmul>
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	4640      	mov	r0, r8
 800b5e8:	4649      	mov	r1, r9
 800b5ea:	f7f4 fdf9 	bl	80001e0 <__aeabi_dsub>
 800b5ee:	4604      	mov	r4, r0
 800b5f0:	460d      	mov	r5, r1
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	4640      	mov	r0, r8
 800b5f8:	4649      	mov	r1, r9
 800b5fa:	f7f4 ffa9 	bl	8000550 <__aeabi_dmul>
 800b5fe:	2200      	movs	r2, #0
 800b600:	ec41 0b19 	vmov	d9, r0, r1
 800b604:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b608:	4620      	mov	r0, r4
 800b60a:	4629      	mov	r1, r5
 800b60c:	f7f4 fde8 	bl	80001e0 <__aeabi_dsub>
 800b610:	4602      	mov	r2, r0
 800b612:	460b      	mov	r3, r1
 800b614:	ec51 0b19 	vmov	r0, r1, d9
 800b618:	f7f5 f8c4 	bl	80007a4 <__aeabi_ddiv>
 800b61c:	4632      	mov	r2, r6
 800b61e:	4604      	mov	r4, r0
 800b620:	460d      	mov	r5, r1
 800b622:	463b      	mov	r3, r7
 800b624:	4640      	mov	r0, r8
 800b626:	4649      	mov	r1, r9
 800b628:	f7f4 ff92 	bl	8000550 <__aeabi_dmul>
 800b62c:	4632      	mov	r2, r6
 800b62e:	463b      	mov	r3, r7
 800b630:	f7f4 fdd8 	bl	80001e4 <__adddf3>
 800b634:	4602      	mov	r2, r0
 800b636:	460b      	mov	r3, r1
 800b638:	4620      	mov	r0, r4
 800b63a:	4629      	mov	r1, r5
 800b63c:	f7f4 fdd0 	bl	80001e0 <__aeabi_dsub>
 800b640:	4642      	mov	r2, r8
 800b642:	464b      	mov	r3, r9
 800b644:	f7f4 fdcc 	bl	80001e0 <__aeabi_dsub>
 800b648:	460b      	mov	r3, r1
 800b64a:	4602      	mov	r2, r0
 800b64c:	493a      	ldr	r1, [pc, #232]	; (800b738 <__ieee754_pow+0xa48>)
 800b64e:	2000      	movs	r0, #0
 800b650:	f7f4 fdc6 	bl	80001e0 <__aeabi_dsub>
 800b654:	ec41 0b10 	vmov	d0, r0, r1
 800b658:	ee10 3a90 	vmov	r3, s1
 800b65c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b660:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b664:	da2b      	bge.n	800b6be <__ieee754_pow+0x9ce>
 800b666:	4650      	mov	r0, sl
 800b668:	f001 f856 	bl	800c718 <scalbn>
 800b66c:	ec51 0b10 	vmov	r0, r1, d0
 800b670:	ec53 2b18 	vmov	r2, r3, d8
 800b674:	f7ff bbed 	b.w	800ae52 <__ieee754_pow+0x162>
 800b678:	4b30      	ldr	r3, [pc, #192]	; (800b73c <__ieee754_pow+0xa4c>)
 800b67a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b67e:	429e      	cmp	r6, r3
 800b680:	f77f af0c 	ble.w	800b49c <__ieee754_pow+0x7ac>
 800b684:	4b2e      	ldr	r3, [pc, #184]	; (800b740 <__ieee754_pow+0xa50>)
 800b686:	440b      	add	r3, r1
 800b688:	4303      	orrs	r3, r0
 800b68a:	d009      	beq.n	800b6a0 <__ieee754_pow+0x9b0>
 800b68c:	ec51 0b18 	vmov	r0, r1, d8
 800b690:	2200      	movs	r2, #0
 800b692:	2300      	movs	r3, #0
 800b694:	f7f5 f9ce 	bl	8000a34 <__aeabi_dcmplt>
 800b698:	3800      	subs	r0, #0
 800b69a:	bf18      	it	ne
 800b69c:	2001      	movne	r0, #1
 800b69e:	e447      	b.n	800af30 <__ieee754_pow+0x240>
 800b6a0:	4622      	mov	r2, r4
 800b6a2:	462b      	mov	r3, r5
 800b6a4:	f7f4 fd9c 	bl	80001e0 <__aeabi_dsub>
 800b6a8:	4642      	mov	r2, r8
 800b6aa:	464b      	mov	r3, r9
 800b6ac:	f7f5 f9d6 	bl	8000a5c <__aeabi_dcmpge>
 800b6b0:	2800      	cmp	r0, #0
 800b6b2:	f43f aef3 	beq.w	800b49c <__ieee754_pow+0x7ac>
 800b6b6:	e7e9      	b.n	800b68c <__ieee754_pow+0x99c>
 800b6b8:	f04f 0a00 	mov.w	sl, #0
 800b6bc:	e71a      	b.n	800b4f4 <__ieee754_pow+0x804>
 800b6be:	ec51 0b10 	vmov	r0, r1, d0
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	e7d4      	b.n	800b670 <__ieee754_pow+0x980>
 800b6c6:	491c      	ldr	r1, [pc, #112]	; (800b738 <__ieee754_pow+0xa48>)
 800b6c8:	2000      	movs	r0, #0
 800b6ca:	f7ff bb30 	b.w	800ad2e <__ieee754_pow+0x3e>
 800b6ce:	2000      	movs	r0, #0
 800b6d0:	2100      	movs	r1, #0
 800b6d2:	f7ff bb2c 	b.w	800ad2e <__ieee754_pow+0x3e>
 800b6d6:	4630      	mov	r0, r6
 800b6d8:	4639      	mov	r1, r7
 800b6da:	f7ff bb28 	b.w	800ad2e <__ieee754_pow+0x3e>
 800b6de:	9204      	str	r2, [sp, #16]
 800b6e0:	f7ff bb7a 	b.w	800add8 <__ieee754_pow+0xe8>
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	f7ff bb64 	b.w	800adb2 <__ieee754_pow+0xc2>
 800b6ea:	bf00      	nop
 800b6ec:	f3af 8000 	nop.w
 800b6f0:	00000000 	.word	0x00000000
 800b6f4:	3fe62e43 	.word	0x3fe62e43
 800b6f8:	fefa39ef 	.word	0xfefa39ef
 800b6fc:	3fe62e42 	.word	0x3fe62e42
 800b700:	0ca86c39 	.word	0x0ca86c39
 800b704:	be205c61 	.word	0xbe205c61
 800b708:	72bea4d0 	.word	0x72bea4d0
 800b70c:	3e663769 	.word	0x3e663769
 800b710:	c5d26bf1 	.word	0xc5d26bf1
 800b714:	3ebbbd41 	.word	0x3ebbbd41
 800b718:	af25de2c 	.word	0xaf25de2c
 800b71c:	3f11566a 	.word	0x3f11566a
 800b720:	16bebd93 	.word	0x16bebd93
 800b724:	3f66c16c 	.word	0x3f66c16c
 800b728:	5555553e 	.word	0x5555553e
 800b72c:	3fc55555 	.word	0x3fc55555
 800b730:	3fe00000 	.word	0x3fe00000
 800b734:	000fffff 	.word	0x000fffff
 800b738:	3ff00000 	.word	0x3ff00000
 800b73c:	4090cbff 	.word	0x4090cbff
 800b740:	3f6f3400 	.word	0x3f6f3400
 800b744:	652b82fe 	.word	0x652b82fe
 800b748:	3c971547 	.word	0x3c971547
 800b74c:	00000000 	.word	0x00000000

0800b750 <__ieee754_rem_pio2>:
 800b750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b754:	ed2d 8b02 	vpush	{d8}
 800b758:	ec55 4b10 	vmov	r4, r5, d0
 800b75c:	4bca      	ldr	r3, [pc, #808]	; (800ba88 <__ieee754_rem_pio2+0x338>)
 800b75e:	b08b      	sub	sp, #44	; 0x2c
 800b760:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b764:	4598      	cmp	r8, r3
 800b766:	4682      	mov	sl, r0
 800b768:	9502      	str	r5, [sp, #8]
 800b76a:	dc08      	bgt.n	800b77e <__ieee754_rem_pio2+0x2e>
 800b76c:	2200      	movs	r2, #0
 800b76e:	2300      	movs	r3, #0
 800b770:	ed80 0b00 	vstr	d0, [r0]
 800b774:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b778:	f04f 0b00 	mov.w	fp, #0
 800b77c:	e028      	b.n	800b7d0 <__ieee754_rem_pio2+0x80>
 800b77e:	4bc3      	ldr	r3, [pc, #780]	; (800ba8c <__ieee754_rem_pio2+0x33c>)
 800b780:	4598      	cmp	r8, r3
 800b782:	dc78      	bgt.n	800b876 <__ieee754_rem_pio2+0x126>
 800b784:	9b02      	ldr	r3, [sp, #8]
 800b786:	4ec2      	ldr	r6, [pc, #776]	; (800ba90 <__ieee754_rem_pio2+0x340>)
 800b788:	2b00      	cmp	r3, #0
 800b78a:	ee10 0a10 	vmov	r0, s0
 800b78e:	a3b0      	add	r3, pc, #704	; (adr r3, 800ba50 <__ieee754_rem_pio2+0x300>)
 800b790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b794:	4629      	mov	r1, r5
 800b796:	dd39      	ble.n	800b80c <__ieee754_rem_pio2+0xbc>
 800b798:	f7f4 fd22 	bl	80001e0 <__aeabi_dsub>
 800b79c:	45b0      	cmp	r8, r6
 800b79e:	4604      	mov	r4, r0
 800b7a0:	460d      	mov	r5, r1
 800b7a2:	d01b      	beq.n	800b7dc <__ieee754_rem_pio2+0x8c>
 800b7a4:	a3ac      	add	r3, pc, #688	; (adr r3, 800ba58 <__ieee754_rem_pio2+0x308>)
 800b7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7aa:	f7f4 fd19 	bl	80001e0 <__aeabi_dsub>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	e9ca 2300 	strd	r2, r3, [sl]
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	4629      	mov	r1, r5
 800b7ba:	f7f4 fd11 	bl	80001e0 <__aeabi_dsub>
 800b7be:	a3a6      	add	r3, pc, #664	; (adr r3, 800ba58 <__ieee754_rem_pio2+0x308>)
 800b7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c4:	f7f4 fd0c 	bl	80001e0 <__aeabi_dsub>
 800b7c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b7cc:	f04f 0b01 	mov.w	fp, #1
 800b7d0:	4658      	mov	r0, fp
 800b7d2:	b00b      	add	sp, #44	; 0x2c
 800b7d4:	ecbd 8b02 	vpop	{d8}
 800b7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7dc:	a3a0      	add	r3, pc, #640	; (adr r3, 800ba60 <__ieee754_rem_pio2+0x310>)
 800b7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e2:	f7f4 fcfd 	bl	80001e0 <__aeabi_dsub>
 800b7e6:	a3a0      	add	r3, pc, #640	; (adr r3, 800ba68 <__ieee754_rem_pio2+0x318>)
 800b7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ec:	4604      	mov	r4, r0
 800b7ee:	460d      	mov	r5, r1
 800b7f0:	f7f4 fcf6 	bl	80001e0 <__aeabi_dsub>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	460b      	mov	r3, r1
 800b7f8:	e9ca 2300 	strd	r2, r3, [sl]
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	4629      	mov	r1, r5
 800b800:	f7f4 fcee 	bl	80001e0 <__aeabi_dsub>
 800b804:	a398      	add	r3, pc, #608	; (adr r3, 800ba68 <__ieee754_rem_pio2+0x318>)
 800b806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80a:	e7db      	b.n	800b7c4 <__ieee754_rem_pio2+0x74>
 800b80c:	f7f4 fcea 	bl	80001e4 <__adddf3>
 800b810:	45b0      	cmp	r8, r6
 800b812:	4604      	mov	r4, r0
 800b814:	460d      	mov	r5, r1
 800b816:	d016      	beq.n	800b846 <__ieee754_rem_pio2+0xf6>
 800b818:	a38f      	add	r3, pc, #572	; (adr r3, 800ba58 <__ieee754_rem_pio2+0x308>)
 800b81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81e:	f7f4 fce1 	bl	80001e4 <__adddf3>
 800b822:	4602      	mov	r2, r0
 800b824:	460b      	mov	r3, r1
 800b826:	e9ca 2300 	strd	r2, r3, [sl]
 800b82a:	4620      	mov	r0, r4
 800b82c:	4629      	mov	r1, r5
 800b82e:	f7f4 fcd7 	bl	80001e0 <__aeabi_dsub>
 800b832:	a389      	add	r3, pc, #548	; (adr r3, 800ba58 <__ieee754_rem_pio2+0x308>)
 800b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b838:	f7f4 fcd4 	bl	80001e4 <__adddf3>
 800b83c:	f04f 3bff 	mov.w	fp, #4294967295
 800b840:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b844:	e7c4      	b.n	800b7d0 <__ieee754_rem_pio2+0x80>
 800b846:	a386      	add	r3, pc, #536	; (adr r3, 800ba60 <__ieee754_rem_pio2+0x310>)
 800b848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84c:	f7f4 fcca 	bl	80001e4 <__adddf3>
 800b850:	a385      	add	r3, pc, #532	; (adr r3, 800ba68 <__ieee754_rem_pio2+0x318>)
 800b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b856:	4604      	mov	r4, r0
 800b858:	460d      	mov	r5, r1
 800b85a:	f7f4 fcc3 	bl	80001e4 <__adddf3>
 800b85e:	4602      	mov	r2, r0
 800b860:	460b      	mov	r3, r1
 800b862:	e9ca 2300 	strd	r2, r3, [sl]
 800b866:	4620      	mov	r0, r4
 800b868:	4629      	mov	r1, r5
 800b86a:	f7f4 fcb9 	bl	80001e0 <__aeabi_dsub>
 800b86e:	a37e      	add	r3, pc, #504	; (adr r3, 800ba68 <__ieee754_rem_pio2+0x318>)
 800b870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b874:	e7e0      	b.n	800b838 <__ieee754_rem_pio2+0xe8>
 800b876:	4b87      	ldr	r3, [pc, #540]	; (800ba94 <__ieee754_rem_pio2+0x344>)
 800b878:	4598      	cmp	r8, r3
 800b87a:	f300 80d9 	bgt.w	800ba30 <__ieee754_rem_pio2+0x2e0>
 800b87e:	f000 ff2d 	bl	800c6dc <fabs>
 800b882:	ec55 4b10 	vmov	r4, r5, d0
 800b886:	ee10 0a10 	vmov	r0, s0
 800b88a:	a379      	add	r3, pc, #484	; (adr r3, 800ba70 <__ieee754_rem_pio2+0x320>)
 800b88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b890:	4629      	mov	r1, r5
 800b892:	f7f4 fe5d 	bl	8000550 <__aeabi_dmul>
 800b896:	4b80      	ldr	r3, [pc, #512]	; (800ba98 <__ieee754_rem_pio2+0x348>)
 800b898:	2200      	movs	r2, #0
 800b89a:	f7f4 fca3 	bl	80001e4 <__adddf3>
 800b89e:	f7f5 f907 	bl	8000ab0 <__aeabi_d2iz>
 800b8a2:	4683      	mov	fp, r0
 800b8a4:	f7f4 fdea 	bl	800047c <__aeabi_i2d>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	ec43 2b18 	vmov	d8, r2, r3
 800b8b0:	a367      	add	r3, pc, #412	; (adr r3, 800ba50 <__ieee754_rem_pio2+0x300>)
 800b8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b6:	f7f4 fe4b 	bl	8000550 <__aeabi_dmul>
 800b8ba:	4602      	mov	r2, r0
 800b8bc:	460b      	mov	r3, r1
 800b8be:	4620      	mov	r0, r4
 800b8c0:	4629      	mov	r1, r5
 800b8c2:	f7f4 fc8d 	bl	80001e0 <__aeabi_dsub>
 800b8c6:	a364      	add	r3, pc, #400	; (adr r3, 800ba58 <__ieee754_rem_pio2+0x308>)
 800b8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8cc:	4606      	mov	r6, r0
 800b8ce:	460f      	mov	r7, r1
 800b8d0:	ec51 0b18 	vmov	r0, r1, d8
 800b8d4:	f7f4 fe3c 	bl	8000550 <__aeabi_dmul>
 800b8d8:	f1bb 0f1f 	cmp.w	fp, #31
 800b8dc:	4604      	mov	r4, r0
 800b8de:	460d      	mov	r5, r1
 800b8e0:	dc0d      	bgt.n	800b8fe <__ieee754_rem_pio2+0x1ae>
 800b8e2:	4b6e      	ldr	r3, [pc, #440]	; (800ba9c <__ieee754_rem_pio2+0x34c>)
 800b8e4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b8e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ec:	4543      	cmp	r3, r8
 800b8ee:	d006      	beq.n	800b8fe <__ieee754_rem_pio2+0x1ae>
 800b8f0:	4622      	mov	r2, r4
 800b8f2:	462b      	mov	r3, r5
 800b8f4:	4630      	mov	r0, r6
 800b8f6:	4639      	mov	r1, r7
 800b8f8:	f7f4 fc72 	bl	80001e0 <__aeabi_dsub>
 800b8fc:	e00f      	b.n	800b91e <__ieee754_rem_pio2+0x1ce>
 800b8fe:	462b      	mov	r3, r5
 800b900:	4622      	mov	r2, r4
 800b902:	4630      	mov	r0, r6
 800b904:	4639      	mov	r1, r7
 800b906:	f7f4 fc6b 	bl	80001e0 <__aeabi_dsub>
 800b90a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b90e:	9303      	str	r3, [sp, #12]
 800b910:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b914:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b918:	f1b8 0f10 	cmp.w	r8, #16
 800b91c:	dc02      	bgt.n	800b924 <__ieee754_rem_pio2+0x1d4>
 800b91e:	e9ca 0100 	strd	r0, r1, [sl]
 800b922:	e039      	b.n	800b998 <__ieee754_rem_pio2+0x248>
 800b924:	a34e      	add	r3, pc, #312	; (adr r3, 800ba60 <__ieee754_rem_pio2+0x310>)
 800b926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92a:	ec51 0b18 	vmov	r0, r1, d8
 800b92e:	f7f4 fe0f 	bl	8000550 <__aeabi_dmul>
 800b932:	4604      	mov	r4, r0
 800b934:	460d      	mov	r5, r1
 800b936:	4602      	mov	r2, r0
 800b938:	460b      	mov	r3, r1
 800b93a:	4630      	mov	r0, r6
 800b93c:	4639      	mov	r1, r7
 800b93e:	f7f4 fc4f 	bl	80001e0 <__aeabi_dsub>
 800b942:	4602      	mov	r2, r0
 800b944:	460b      	mov	r3, r1
 800b946:	4680      	mov	r8, r0
 800b948:	4689      	mov	r9, r1
 800b94a:	4630      	mov	r0, r6
 800b94c:	4639      	mov	r1, r7
 800b94e:	f7f4 fc47 	bl	80001e0 <__aeabi_dsub>
 800b952:	4622      	mov	r2, r4
 800b954:	462b      	mov	r3, r5
 800b956:	f7f4 fc43 	bl	80001e0 <__aeabi_dsub>
 800b95a:	a343      	add	r3, pc, #268	; (adr r3, 800ba68 <__ieee754_rem_pio2+0x318>)
 800b95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b960:	4604      	mov	r4, r0
 800b962:	460d      	mov	r5, r1
 800b964:	ec51 0b18 	vmov	r0, r1, d8
 800b968:	f7f4 fdf2 	bl	8000550 <__aeabi_dmul>
 800b96c:	4622      	mov	r2, r4
 800b96e:	462b      	mov	r3, r5
 800b970:	f7f4 fc36 	bl	80001e0 <__aeabi_dsub>
 800b974:	4602      	mov	r2, r0
 800b976:	460b      	mov	r3, r1
 800b978:	4604      	mov	r4, r0
 800b97a:	460d      	mov	r5, r1
 800b97c:	4640      	mov	r0, r8
 800b97e:	4649      	mov	r1, r9
 800b980:	f7f4 fc2e 	bl	80001e0 <__aeabi_dsub>
 800b984:	9a03      	ldr	r2, [sp, #12]
 800b986:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b98a:	1ad3      	subs	r3, r2, r3
 800b98c:	2b31      	cmp	r3, #49	; 0x31
 800b98e:	dc24      	bgt.n	800b9da <__ieee754_rem_pio2+0x28a>
 800b990:	e9ca 0100 	strd	r0, r1, [sl]
 800b994:	4646      	mov	r6, r8
 800b996:	464f      	mov	r7, r9
 800b998:	e9da 8900 	ldrd	r8, r9, [sl]
 800b99c:	4630      	mov	r0, r6
 800b99e:	4642      	mov	r2, r8
 800b9a0:	464b      	mov	r3, r9
 800b9a2:	4639      	mov	r1, r7
 800b9a4:	f7f4 fc1c 	bl	80001e0 <__aeabi_dsub>
 800b9a8:	462b      	mov	r3, r5
 800b9aa:	4622      	mov	r2, r4
 800b9ac:	f7f4 fc18 	bl	80001e0 <__aeabi_dsub>
 800b9b0:	9b02      	ldr	r3, [sp, #8]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b9b8:	f6bf af0a 	bge.w	800b7d0 <__ieee754_rem_pio2+0x80>
 800b9bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b9c0:	f8ca 3004 	str.w	r3, [sl, #4]
 800b9c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9c8:	f8ca 8000 	str.w	r8, [sl]
 800b9cc:	f8ca 0008 	str.w	r0, [sl, #8]
 800b9d0:	f8ca 300c 	str.w	r3, [sl, #12]
 800b9d4:	f1cb 0b00 	rsb	fp, fp, #0
 800b9d8:	e6fa      	b.n	800b7d0 <__ieee754_rem_pio2+0x80>
 800b9da:	a327      	add	r3, pc, #156	; (adr r3, 800ba78 <__ieee754_rem_pio2+0x328>)
 800b9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e0:	ec51 0b18 	vmov	r0, r1, d8
 800b9e4:	f7f4 fdb4 	bl	8000550 <__aeabi_dmul>
 800b9e8:	4604      	mov	r4, r0
 800b9ea:	460d      	mov	r5, r1
 800b9ec:	4602      	mov	r2, r0
 800b9ee:	460b      	mov	r3, r1
 800b9f0:	4640      	mov	r0, r8
 800b9f2:	4649      	mov	r1, r9
 800b9f4:	f7f4 fbf4 	bl	80001e0 <__aeabi_dsub>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	4606      	mov	r6, r0
 800b9fe:	460f      	mov	r7, r1
 800ba00:	4640      	mov	r0, r8
 800ba02:	4649      	mov	r1, r9
 800ba04:	f7f4 fbec 	bl	80001e0 <__aeabi_dsub>
 800ba08:	4622      	mov	r2, r4
 800ba0a:	462b      	mov	r3, r5
 800ba0c:	f7f4 fbe8 	bl	80001e0 <__aeabi_dsub>
 800ba10:	a31b      	add	r3, pc, #108	; (adr r3, 800ba80 <__ieee754_rem_pio2+0x330>)
 800ba12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba16:	4604      	mov	r4, r0
 800ba18:	460d      	mov	r5, r1
 800ba1a:	ec51 0b18 	vmov	r0, r1, d8
 800ba1e:	f7f4 fd97 	bl	8000550 <__aeabi_dmul>
 800ba22:	4622      	mov	r2, r4
 800ba24:	462b      	mov	r3, r5
 800ba26:	f7f4 fbdb 	bl	80001e0 <__aeabi_dsub>
 800ba2a:	4604      	mov	r4, r0
 800ba2c:	460d      	mov	r5, r1
 800ba2e:	e75f      	b.n	800b8f0 <__ieee754_rem_pio2+0x1a0>
 800ba30:	4b1b      	ldr	r3, [pc, #108]	; (800baa0 <__ieee754_rem_pio2+0x350>)
 800ba32:	4598      	cmp	r8, r3
 800ba34:	dd36      	ble.n	800baa4 <__ieee754_rem_pio2+0x354>
 800ba36:	ee10 2a10 	vmov	r2, s0
 800ba3a:	462b      	mov	r3, r5
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	4629      	mov	r1, r5
 800ba40:	f7f4 fbce 	bl	80001e0 <__aeabi_dsub>
 800ba44:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ba48:	e9ca 0100 	strd	r0, r1, [sl]
 800ba4c:	e694      	b.n	800b778 <__ieee754_rem_pio2+0x28>
 800ba4e:	bf00      	nop
 800ba50:	54400000 	.word	0x54400000
 800ba54:	3ff921fb 	.word	0x3ff921fb
 800ba58:	1a626331 	.word	0x1a626331
 800ba5c:	3dd0b461 	.word	0x3dd0b461
 800ba60:	1a600000 	.word	0x1a600000
 800ba64:	3dd0b461 	.word	0x3dd0b461
 800ba68:	2e037073 	.word	0x2e037073
 800ba6c:	3ba3198a 	.word	0x3ba3198a
 800ba70:	6dc9c883 	.word	0x6dc9c883
 800ba74:	3fe45f30 	.word	0x3fe45f30
 800ba78:	2e000000 	.word	0x2e000000
 800ba7c:	3ba3198a 	.word	0x3ba3198a
 800ba80:	252049c1 	.word	0x252049c1
 800ba84:	397b839a 	.word	0x397b839a
 800ba88:	3fe921fb 	.word	0x3fe921fb
 800ba8c:	4002d97b 	.word	0x4002d97b
 800ba90:	3ff921fb 	.word	0x3ff921fb
 800ba94:	413921fb 	.word	0x413921fb
 800ba98:	3fe00000 	.word	0x3fe00000
 800ba9c:	0800c898 	.word	0x0800c898
 800baa0:	7fefffff 	.word	0x7fefffff
 800baa4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800baa8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800baac:	ee10 0a10 	vmov	r0, s0
 800bab0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800bab4:	ee10 6a10 	vmov	r6, s0
 800bab8:	460f      	mov	r7, r1
 800baba:	f7f4 fff9 	bl	8000ab0 <__aeabi_d2iz>
 800babe:	f7f4 fcdd 	bl	800047c <__aeabi_i2d>
 800bac2:	4602      	mov	r2, r0
 800bac4:	460b      	mov	r3, r1
 800bac6:	4630      	mov	r0, r6
 800bac8:	4639      	mov	r1, r7
 800baca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bace:	f7f4 fb87 	bl	80001e0 <__aeabi_dsub>
 800bad2:	4b23      	ldr	r3, [pc, #140]	; (800bb60 <__ieee754_rem_pio2+0x410>)
 800bad4:	2200      	movs	r2, #0
 800bad6:	f7f4 fd3b 	bl	8000550 <__aeabi_dmul>
 800bada:	460f      	mov	r7, r1
 800badc:	4606      	mov	r6, r0
 800bade:	f7f4 ffe7 	bl	8000ab0 <__aeabi_d2iz>
 800bae2:	f7f4 fccb 	bl	800047c <__aeabi_i2d>
 800bae6:	4602      	mov	r2, r0
 800bae8:	460b      	mov	r3, r1
 800baea:	4630      	mov	r0, r6
 800baec:	4639      	mov	r1, r7
 800baee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800baf2:	f7f4 fb75 	bl	80001e0 <__aeabi_dsub>
 800baf6:	4b1a      	ldr	r3, [pc, #104]	; (800bb60 <__ieee754_rem_pio2+0x410>)
 800baf8:	2200      	movs	r2, #0
 800bafa:	f7f4 fd29 	bl	8000550 <__aeabi_dmul>
 800bafe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bb02:	ad04      	add	r5, sp, #16
 800bb04:	f04f 0803 	mov.w	r8, #3
 800bb08:	46a9      	mov	r9, r5
 800bb0a:	2600      	movs	r6, #0
 800bb0c:	2700      	movs	r7, #0
 800bb0e:	4632      	mov	r2, r6
 800bb10:	463b      	mov	r3, r7
 800bb12:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800bb16:	46c3      	mov	fp, r8
 800bb18:	3d08      	subs	r5, #8
 800bb1a:	f108 38ff 	add.w	r8, r8, #4294967295
 800bb1e:	f7f4 ff7f 	bl	8000a20 <__aeabi_dcmpeq>
 800bb22:	2800      	cmp	r0, #0
 800bb24:	d1f3      	bne.n	800bb0e <__ieee754_rem_pio2+0x3be>
 800bb26:	4b0f      	ldr	r3, [pc, #60]	; (800bb64 <__ieee754_rem_pio2+0x414>)
 800bb28:	9301      	str	r3, [sp, #4]
 800bb2a:	2302      	movs	r3, #2
 800bb2c:	9300      	str	r3, [sp, #0]
 800bb2e:	4622      	mov	r2, r4
 800bb30:	465b      	mov	r3, fp
 800bb32:	4651      	mov	r1, sl
 800bb34:	4648      	mov	r0, r9
 800bb36:	f000 f993 	bl	800be60 <__kernel_rem_pio2>
 800bb3a:	9b02      	ldr	r3, [sp, #8]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	4683      	mov	fp, r0
 800bb40:	f6bf ae46 	bge.w	800b7d0 <__ieee754_rem_pio2+0x80>
 800bb44:	e9da 2100 	ldrd	r2, r1, [sl]
 800bb48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb4c:	e9ca 2300 	strd	r2, r3, [sl]
 800bb50:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800bb54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb58:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800bb5c:	e73a      	b.n	800b9d4 <__ieee754_rem_pio2+0x284>
 800bb5e:	bf00      	nop
 800bb60:	41700000 	.word	0x41700000
 800bb64:	0800c918 	.word	0x0800c918

0800bb68 <__ieee754_sqrt>:
 800bb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb6c:	ec55 4b10 	vmov	r4, r5, d0
 800bb70:	4e55      	ldr	r6, [pc, #340]	; (800bcc8 <__ieee754_sqrt+0x160>)
 800bb72:	43ae      	bics	r6, r5
 800bb74:	ee10 0a10 	vmov	r0, s0
 800bb78:	ee10 3a10 	vmov	r3, s0
 800bb7c:	462a      	mov	r2, r5
 800bb7e:	4629      	mov	r1, r5
 800bb80:	d110      	bne.n	800bba4 <__ieee754_sqrt+0x3c>
 800bb82:	ee10 2a10 	vmov	r2, s0
 800bb86:	462b      	mov	r3, r5
 800bb88:	f7f4 fce2 	bl	8000550 <__aeabi_dmul>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	460b      	mov	r3, r1
 800bb90:	4620      	mov	r0, r4
 800bb92:	4629      	mov	r1, r5
 800bb94:	f7f4 fb26 	bl	80001e4 <__adddf3>
 800bb98:	4604      	mov	r4, r0
 800bb9a:	460d      	mov	r5, r1
 800bb9c:	ec45 4b10 	vmov	d0, r4, r5
 800bba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bba4:	2d00      	cmp	r5, #0
 800bba6:	dc10      	bgt.n	800bbca <__ieee754_sqrt+0x62>
 800bba8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bbac:	4330      	orrs	r0, r6
 800bbae:	d0f5      	beq.n	800bb9c <__ieee754_sqrt+0x34>
 800bbb0:	b15d      	cbz	r5, 800bbca <__ieee754_sqrt+0x62>
 800bbb2:	ee10 2a10 	vmov	r2, s0
 800bbb6:	462b      	mov	r3, r5
 800bbb8:	ee10 0a10 	vmov	r0, s0
 800bbbc:	f7f4 fb10 	bl	80001e0 <__aeabi_dsub>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	f7f4 fdee 	bl	80007a4 <__aeabi_ddiv>
 800bbc8:	e7e6      	b.n	800bb98 <__ieee754_sqrt+0x30>
 800bbca:	1512      	asrs	r2, r2, #20
 800bbcc:	d074      	beq.n	800bcb8 <__ieee754_sqrt+0x150>
 800bbce:	07d4      	lsls	r4, r2, #31
 800bbd0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800bbd4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800bbd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bbdc:	bf5e      	ittt	pl
 800bbde:	0fda      	lsrpl	r2, r3, #31
 800bbe0:	005b      	lslpl	r3, r3, #1
 800bbe2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800bbe6:	2400      	movs	r4, #0
 800bbe8:	0fda      	lsrs	r2, r3, #31
 800bbea:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800bbee:	107f      	asrs	r7, r7, #1
 800bbf0:	005b      	lsls	r3, r3, #1
 800bbf2:	2516      	movs	r5, #22
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800bbfa:	1886      	adds	r6, r0, r2
 800bbfc:	428e      	cmp	r6, r1
 800bbfe:	bfde      	ittt	le
 800bc00:	1b89      	suble	r1, r1, r6
 800bc02:	18b0      	addle	r0, r6, r2
 800bc04:	18a4      	addle	r4, r4, r2
 800bc06:	0049      	lsls	r1, r1, #1
 800bc08:	3d01      	subs	r5, #1
 800bc0a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800bc0e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800bc12:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bc16:	d1f0      	bne.n	800bbfa <__ieee754_sqrt+0x92>
 800bc18:	462a      	mov	r2, r5
 800bc1a:	f04f 0e20 	mov.w	lr, #32
 800bc1e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bc22:	4281      	cmp	r1, r0
 800bc24:	eb06 0c05 	add.w	ip, r6, r5
 800bc28:	dc02      	bgt.n	800bc30 <__ieee754_sqrt+0xc8>
 800bc2a:	d113      	bne.n	800bc54 <__ieee754_sqrt+0xec>
 800bc2c:	459c      	cmp	ip, r3
 800bc2e:	d811      	bhi.n	800bc54 <__ieee754_sqrt+0xec>
 800bc30:	f1bc 0f00 	cmp.w	ip, #0
 800bc34:	eb0c 0506 	add.w	r5, ip, r6
 800bc38:	da43      	bge.n	800bcc2 <__ieee754_sqrt+0x15a>
 800bc3a:	2d00      	cmp	r5, #0
 800bc3c:	db41      	blt.n	800bcc2 <__ieee754_sqrt+0x15a>
 800bc3e:	f100 0801 	add.w	r8, r0, #1
 800bc42:	1a09      	subs	r1, r1, r0
 800bc44:	459c      	cmp	ip, r3
 800bc46:	bf88      	it	hi
 800bc48:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800bc4c:	eba3 030c 	sub.w	r3, r3, ip
 800bc50:	4432      	add	r2, r6
 800bc52:	4640      	mov	r0, r8
 800bc54:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800bc58:	f1be 0e01 	subs.w	lr, lr, #1
 800bc5c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800bc60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bc64:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bc68:	d1db      	bne.n	800bc22 <__ieee754_sqrt+0xba>
 800bc6a:	430b      	orrs	r3, r1
 800bc6c:	d006      	beq.n	800bc7c <__ieee754_sqrt+0x114>
 800bc6e:	1c50      	adds	r0, r2, #1
 800bc70:	bf13      	iteet	ne
 800bc72:	3201      	addne	r2, #1
 800bc74:	3401      	addeq	r4, #1
 800bc76:	4672      	moveq	r2, lr
 800bc78:	f022 0201 	bicne.w	r2, r2, #1
 800bc7c:	1063      	asrs	r3, r4, #1
 800bc7e:	0852      	lsrs	r2, r2, #1
 800bc80:	07e1      	lsls	r1, r4, #31
 800bc82:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bc86:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bc8a:	bf48      	it	mi
 800bc8c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800bc90:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800bc94:	4614      	mov	r4, r2
 800bc96:	e781      	b.n	800bb9c <__ieee754_sqrt+0x34>
 800bc98:	0ad9      	lsrs	r1, r3, #11
 800bc9a:	3815      	subs	r0, #21
 800bc9c:	055b      	lsls	r3, r3, #21
 800bc9e:	2900      	cmp	r1, #0
 800bca0:	d0fa      	beq.n	800bc98 <__ieee754_sqrt+0x130>
 800bca2:	02cd      	lsls	r5, r1, #11
 800bca4:	d50a      	bpl.n	800bcbc <__ieee754_sqrt+0x154>
 800bca6:	f1c2 0420 	rsb	r4, r2, #32
 800bcaa:	fa23 f404 	lsr.w	r4, r3, r4
 800bcae:	1e55      	subs	r5, r2, #1
 800bcb0:	4093      	lsls	r3, r2
 800bcb2:	4321      	orrs	r1, r4
 800bcb4:	1b42      	subs	r2, r0, r5
 800bcb6:	e78a      	b.n	800bbce <__ieee754_sqrt+0x66>
 800bcb8:	4610      	mov	r0, r2
 800bcba:	e7f0      	b.n	800bc9e <__ieee754_sqrt+0x136>
 800bcbc:	0049      	lsls	r1, r1, #1
 800bcbe:	3201      	adds	r2, #1
 800bcc0:	e7ef      	b.n	800bca2 <__ieee754_sqrt+0x13a>
 800bcc2:	4680      	mov	r8, r0
 800bcc4:	e7bd      	b.n	800bc42 <__ieee754_sqrt+0xda>
 800bcc6:	bf00      	nop
 800bcc8:	7ff00000 	.word	0x7ff00000
 800bccc:	00000000 	.word	0x00000000

0800bcd0 <__kernel_cos>:
 800bcd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd4:	ec57 6b10 	vmov	r6, r7, d0
 800bcd8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bcdc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800bce0:	ed8d 1b00 	vstr	d1, [sp]
 800bce4:	da07      	bge.n	800bcf6 <__kernel_cos+0x26>
 800bce6:	ee10 0a10 	vmov	r0, s0
 800bcea:	4639      	mov	r1, r7
 800bcec:	f7f4 fee0 	bl	8000ab0 <__aeabi_d2iz>
 800bcf0:	2800      	cmp	r0, #0
 800bcf2:	f000 8088 	beq.w	800be06 <__kernel_cos+0x136>
 800bcf6:	4632      	mov	r2, r6
 800bcf8:	463b      	mov	r3, r7
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	4639      	mov	r1, r7
 800bcfe:	f7f4 fc27 	bl	8000550 <__aeabi_dmul>
 800bd02:	4b51      	ldr	r3, [pc, #324]	; (800be48 <__kernel_cos+0x178>)
 800bd04:	2200      	movs	r2, #0
 800bd06:	4604      	mov	r4, r0
 800bd08:	460d      	mov	r5, r1
 800bd0a:	f7f4 fc21 	bl	8000550 <__aeabi_dmul>
 800bd0e:	a340      	add	r3, pc, #256	; (adr r3, 800be10 <__kernel_cos+0x140>)
 800bd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd14:	4682      	mov	sl, r0
 800bd16:	468b      	mov	fp, r1
 800bd18:	4620      	mov	r0, r4
 800bd1a:	4629      	mov	r1, r5
 800bd1c:	f7f4 fc18 	bl	8000550 <__aeabi_dmul>
 800bd20:	a33d      	add	r3, pc, #244	; (adr r3, 800be18 <__kernel_cos+0x148>)
 800bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd26:	f7f4 fa5d 	bl	80001e4 <__adddf3>
 800bd2a:	4622      	mov	r2, r4
 800bd2c:	462b      	mov	r3, r5
 800bd2e:	f7f4 fc0f 	bl	8000550 <__aeabi_dmul>
 800bd32:	a33b      	add	r3, pc, #236	; (adr r3, 800be20 <__kernel_cos+0x150>)
 800bd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd38:	f7f4 fa52 	bl	80001e0 <__aeabi_dsub>
 800bd3c:	4622      	mov	r2, r4
 800bd3e:	462b      	mov	r3, r5
 800bd40:	f7f4 fc06 	bl	8000550 <__aeabi_dmul>
 800bd44:	a338      	add	r3, pc, #224	; (adr r3, 800be28 <__kernel_cos+0x158>)
 800bd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4a:	f7f4 fa4b 	bl	80001e4 <__adddf3>
 800bd4e:	4622      	mov	r2, r4
 800bd50:	462b      	mov	r3, r5
 800bd52:	f7f4 fbfd 	bl	8000550 <__aeabi_dmul>
 800bd56:	a336      	add	r3, pc, #216	; (adr r3, 800be30 <__kernel_cos+0x160>)
 800bd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5c:	f7f4 fa40 	bl	80001e0 <__aeabi_dsub>
 800bd60:	4622      	mov	r2, r4
 800bd62:	462b      	mov	r3, r5
 800bd64:	f7f4 fbf4 	bl	8000550 <__aeabi_dmul>
 800bd68:	a333      	add	r3, pc, #204	; (adr r3, 800be38 <__kernel_cos+0x168>)
 800bd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6e:	f7f4 fa39 	bl	80001e4 <__adddf3>
 800bd72:	4622      	mov	r2, r4
 800bd74:	462b      	mov	r3, r5
 800bd76:	f7f4 fbeb 	bl	8000550 <__aeabi_dmul>
 800bd7a:	4622      	mov	r2, r4
 800bd7c:	462b      	mov	r3, r5
 800bd7e:	f7f4 fbe7 	bl	8000550 <__aeabi_dmul>
 800bd82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd86:	4604      	mov	r4, r0
 800bd88:	460d      	mov	r5, r1
 800bd8a:	4630      	mov	r0, r6
 800bd8c:	4639      	mov	r1, r7
 800bd8e:	f7f4 fbdf 	bl	8000550 <__aeabi_dmul>
 800bd92:	460b      	mov	r3, r1
 800bd94:	4602      	mov	r2, r0
 800bd96:	4629      	mov	r1, r5
 800bd98:	4620      	mov	r0, r4
 800bd9a:	f7f4 fa21 	bl	80001e0 <__aeabi_dsub>
 800bd9e:	4b2b      	ldr	r3, [pc, #172]	; (800be4c <__kernel_cos+0x17c>)
 800bda0:	4598      	cmp	r8, r3
 800bda2:	4606      	mov	r6, r0
 800bda4:	460f      	mov	r7, r1
 800bda6:	dc10      	bgt.n	800bdca <__kernel_cos+0xfa>
 800bda8:	4602      	mov	r2, r0
 800bdaa:	460b      	mov	r3, r1
 800bdac:	4650      	mov	r0, sl
 800bdae:	4659      	mov	r1, fp
 800bdb0:	f7f4 fa16 	bl	80001e0 <__aeabi_dsub>
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	4926      	ldr	r1, [pc, #152]	; (800be50 <__kernel_cos+0x180>)
 800bdb8:	4602      	mov	r2, r0
 800bdba:	2000      	movs	r0, #0
 800bdbc:	f7f4 fa10 	bl	80001e0 <__aeabi_dsub>
 800bdc0:	ec41 0b10 	vmov	d0, r0, r1
 800bdc4:	b003      	add	sp, #12
 800bdc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdca:	4b22      	ldr	r3, [pc, #136]	; (800be54 <__kernel_cos+0x184>)
 800bdcc:	4920      	ldr	r1, [pc, #128]	; (800be50 <__kernel_cos+0x180>)
 800bdce:	4598      	cmp	r8, r3
 800bdd0:	bfcc      	ite	gt
 800bdd2:	4d21      	ldrgt	r5, [pc, #132]	; (800be58 <__kernel_cos+0x188>)
 800bdd4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800bdd8:	2400      	movs	r4, #0
 800bdda:	4622      	mov	r2, r4
 800bddc:	462b      	mov	r3, r5
 800bdde:	2000      	movs	r0, #0
 800bde0:	f7f4 f9fe 	bl	80001e0 <__aeabi_dsub>
 800bde4:	4622      	mov	r2, r4
 800bde6:	4680      	mov	r8, r0
 800bde8:	4689      	mov	r9, r1
 800bdea:	462b      	mov	r3, r5
 800bdec:	4650      	mov	r0, sl
 800bdee:	4659      	mov	r1, fp
 800bdf0:	f7f4 f9f6 	bl	80001e0 <__aeabi_dsub>
 800bdf4:	4632      	mov	r2, r6
 800bdf6:	463b      	mov	r3, r7
 800bdf8:	f7f4 f9f2 	bl	80001e0 <__aeabi_dsub>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	460b      	mov	r3, r1
 800be00:	4640      	mov	r0, r8
 800be02:	4649      	mov	r1, r9
 800be04:	e7da      	b.n	800bdbc <__kernel_cos+0xec>
 800be06:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800be40 <__kernel_cos+0x170>
 800be0a:	e7db      	b.n	800bdc4 <__kernel_cos+0xf4>
 800be0c:	f3af 8000 	nop.w
 800be10:	be8838d4 	.word	0xbe8838d4
 800be14:	bda8fae9 	.word	0xbda8fae9
 800be18:	bdb4b1c4 	.word	0xbdb4b1c4
 800be1c:	3e21ee9e 	.word	0x3e21ee9e
 800be20:	809c52ad 	.word	0x809c52ad
 800be24:	3e927e4f 	.word	0x3e927e4f
 800be28:	19cb1590 	.word	0x19cb1590
 800be2c:	3efa01a0 	.word	0x3efa01a0
 800be30:	16c15177 	.word	0x16c15177
 800be34:	3f56c16c 	.word	0x3f56c16c
 800be38:	5555554c 	.word	0x5555554c
 800be3c:	3fa55555 	.word	0x3fa55555
 800be40:	00000000 	.word	0x00000000
 800be44:	3ff00000 	.word	0x3ff00000
 800be48:	3fe00000 	.word	0x3fe00000
 800be4c:	3fd33332 	.word	0x3fd33332
 800be50:	3ff00000 	.word	0x3ff00000
 800be54:	3fe90000 	.word	0x3fe90000
 800be58:	3fd20000 	.word	0x3fd20000
 800be5c:	00000000 	.word	0x00000000

0800be60 <__kernel_rem_pio2>:
 800be60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be64:	ed2d 8b02 	vpush	{d8}
 800be68:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800be6c:	f112 0f14 	cmn.w	r2, #20
 800be70:	9308      	str	r3, [sp, #32]
 800be72:	9101      	str	r1, [sp, #4]
 800be74:	4bc4      	ldr	r3, [pc, #784]	; (800c188 <__kernel_rem_pio2+0x328>)
 800be76:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800be78:	900b      	str	r0, [sp, #44]	; 0x2c
 800be7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800be7e:	9302      	str	r3, [sp, #8]
 800be80:	9b08      	ldr	r3, [sp, #32]
 800be82:	f103 33ff 	add.w	r3, r3, #4294967295
 800be86:	bfa8      	it	ge
 800be88:	1ed4      	subge	r4, r2, #3
 800be8a:	9306      	str	r3, [sp, #24]
 800be8c:	bfb2      	itee	lt
 800be8e:	2400      	movlt	r4, #0
 800be90:	2318      	movge	r3, #24
 800be92:	fb94 f4f3 	sdivge	r4, r4, r3
 800be96:	f06f 0317 	mvn.w	r3, #23
 800be9a:	fb04 3303 	mla	r3, r4, r3, r3
 800be9e:	eb03 0a02 	add.w	sl, r3, r2
 800bea2:	9b02      	ldr	r3, [sp, #8]
 800bea4:	9a06      	ldr	r2, [sp, #24]
 800bea6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800c178 <__kernel_rem_pio2+0x318>
 800beaa:	eb03 0802 	add.w	r8, r3, r2
 800beae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800beb0:	1aa7      	subs	r7, r4, r2
 800beb2:	ae22      	add	r6, sp, #136	; 0x88
 800beb4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800beb8:	2500      	movs	r5, #0
 800beba:	4545      	cmp	r5, r8
 800bebc:	dd13      	ble.n	800bee6 <__kernel_rem_pio2+0x86>
 800bebe:	9b08      	ldr	r3, [sp, #32]
 800bec0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800c178 <__kernel_rem_pio2+0x318>
 800bec4:	aa22      	add	r2, sp, #136	; 0x88
 800bec6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800beca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800bece:	f04f 0800 	mov.w	r8, #0
 800bed2:	9b02      	ldr	r3, [sp, #8]
 800bed4:	4598      	cmp	r8, r3
 800bed6:	dc2f      	bgt.n	800bf38 <__kernel_rem_pio2+0xd8>
 800bed8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800bedc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800bee0:	462f      	mov	r7, r5
 800bee2:	2600      	movs	r6, #0
 800bee4:	e01b      	b.n	800bf1e <__kernel_rem_pio2+0xbe>
 800bee6:	42ef      	cmn	r7, r5
 800bee8:	d407      	bmi.n	800befa <__kernel_rem_pio2+0x9a>
 800beea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800beee:	f7f4 fac5 	bl	800047c <__aeabi_i2d>
 800bef2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bef6:	3501      	adds	r5, #1
 800bef8:	e7df      	b.n	800beba <__kernel_rem_pio2+0x5a>
 800befa:	ec51 0b18 	vmov	r0, r1, d8
 800befe:	e7f8      	b.n	800bef2 <__kernel_rem_pio2+0x92>
 800bf00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf04:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bf08:	f7f4 fb22 	bl	8000550 <__aeabi_dmul>
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	460b      	mov	r3, r1
 800bf10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf14:	f7f4 f966 	bl	80001e4 <__adddf3>
 800bf18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf1c:	3601      	adds	r6, #1
 800bf1e:	9b06      	ldr	r3, [sp, #24]
 800bf20:	429e      	cmp	r6, r3
 800bf22:	f1a7 0708 	sub.w	r7, r7, #8
 800bf26:	ddeb      	ble.n	800bf00 <__kernel_rem_pio2+0xa0>
 800bf28:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bf2c:	f108 0801 	add.w	r8, r8, #1
 800bf30:	ecab 7b02 	vstmia	fp!, {d7}
 800bf34:	3508      	adds	r5, #8
 800bf36:	e7cc      	b.n	800bed2 <__kernel_rem_pio2+0x72>
 800bf38:	9b02      	ldr	r3, [sp, #8]
 800bf3a:	aa0e      	add	r2, sp, #56	; 0x38
 800bf3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bf40:	930d      	str	r3, [sp, #52]	; 0x34
 800bf42:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800bf44:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bf48:	9c02      	ldr	r4, [sp, #8]
 800bf4a:	930c      	str	r3, [sp, #48]	; 0x30
 800bf4c:	00e3      	lsls	r3, r4, #3
 800bf4e:	930a      	str	r3, [sp, #40]	; 0x28
 800bf50:	ab9a      	add	r3, sp, #616	; 0x268
 800bf52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bf56:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800bf5a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800bf5e:	ab72      	add	r3, sp, #456	; 0x1c8
 800bf60:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800bf64:	46c3      	mov	fp, r8
 800bf66:	46a1      	mov	r9, r4
 800bf68:	f1b9 0f00 	cmp.w	r9, #0
 800bf6c:	f1a5 0508 	sub.w	r5, r5, #8
 800bf70:	dc77      	bgt.n	800c062 <__kernel_rem_pio2+0x202>
 800bf72:	ec47 6b10 	vmov	d0, r6, r7
 800bf76:	4650      	mov	r0, sl
 800bf78:	f000 fbce 	bl	800c718 <scalbn>
 800bf7c:	ec57 6b10 	vmov	r6, r7, d0
 800bf80:	2200      	movs	r2, #0
 800bf82:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bf86:	ee10 0a10 	vmov	r0, s0
 800bf8a:	4639      	mov	r1, r7
 800bf8c:	f7f4 fae0 	bl	8000550 <__aeabi_dmul>
 800bf90:	ec41 0b10 	vmov	d0, r0, r1
 800bf94:	f7fe faa4 	bl	800a4e0 <floor>
 800bf98:	4b7c      	ldr	r3, [pc, #496]	; (800c18c <__kernel_rem_pio2+0x32c>)
 800bf9a:	ec51 0b10 	vmov	r0, r1, d0
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	f7f4 fad6 	bl	8000550 <__aeabi_dmul>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	4630      	mov	r0, r6
 800bfaa:	4639      	mov	r1, r7
 800bfac:	f7f4 f918 	bl	80001e0 <__aeabi_dsub>
 800bfb0:	460f      	mov	r7, r1
 800bfb2:	4606      	mov	r6, r0
 800bfb4:	f7f4 fd7c 	bl	8000ab0 <__aeabi_d2iz>
 800bfb8:	9004      	str	r0, [sp, #16]
 800bfba:	f7f4 fa5f 	bl	800047c <__aeabi_i2d>
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	460b      	mov	r3, r1
 800bfc2:	4630      	mov	r0, r6
 800bfc4:	4639      	mov	r1, r7
 800bfc6:	f7f4 f90b 	bl	80001e0 <__aeabi_dsub>
 800bfca:	f1ba 0f00 	cmp.w	sl, #0
 800bfce:	4606      	mov	r6, r0
 800bfd0:	460f      	mov	r7, r1
 800bfd2:	dd6d      	ble.n	800c0b0 <__kernel_rem_pio2+0x250>
 800bfd4:	1e62      	subs	r2, r4, #1
 800bfd6:	ab0e      	add	r3, sp, #56	; 0x38
 800bfd8:	9d04      	ldr	r5, [sp, #16]
 800bfda:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bfde:	f1ca 0118 	rsb	r1, sl, #24
 800bfe2:	fa40 f301 	asr.w	r3, r0, r1
 800bfe6:	441d      	add	r5, r3
 800bfe8:	408b      	lsls	r3, r1
 800bfea:	1ac0      	subs	r0, r0, r3
 800bfec:	ab0e      	add	r3, sp, #56	; 0x38
 800bfee:	9504      	str	r5, [sp, #16]
 800bff0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800bff4:	f1ca 0317 	rsb	r3, sl, #23
 800bff8:	fa40 fb03 	asr.w	fp, r0, r3
 800bffc:	f1bb 0f00 	cmp.w	fp, #0
 800c000:	dd65      	ble.n	800c0ce <__kernel_rem_pio2+0x26e>
 800c002:	9b04      	ldr	r3, [sp, #16]
 800c004:	2200      	movs	r2, #0
 800c006:	3301      	adds	r3, #1
 800c008:	9304      	str	r3, [sp, #16]
 800c00a:	4615      	mov	r5, r2
 800c00c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c010:	4294      	cmp	r4, r2
 800c012:	f300 809c 	bgt.w	800c14e <__kernel_rem_pio2+0x2ee>
 800c016:	f1ba 0f00 	cmp.w	sl, #0
 800c01a:	dd07      	ble.n	800c02c <__kernel_rem_pio2+0x1cc>
 800c01c:	f1ba 0f01 	cmp.w	sl, #1
 800c020:	f000 80c0 	beq.w	800c1a4 <__kernel_rem_pio2+0x344>
 800c024:	f1ba 0f02 	cmp.w	sl, #2
 800c028:	f000 80c6 	beq.w	800c1b8 <__kernel_rem_pio2+0x358>
 800c02c:	f1bb 0f02 	cmp.w	fp, #2
 800c030:	d14d      	bne.n	800c0ce <__kernel_rem_pio2+0x26e>
 800c032:	4632      	mov	r2, r6
 800c034:	463b      	mov	r3, r7
 800c036:	4956      	ldr	r1, [pc, #344]	; (800c190 <__kernel_rem_pio2+0x330>)
 800c038:	2000      	movs	r0, #0
 800c03a:	f7f4 f8d1 	bl	80001e0 <__aeabi_dsub>
 800c03e:	4606      	mov	r6, r0
 800c040:	460f      	mov	r7, r1
 800c042:	2d00      	cmp	r5, #0
 800c044:	d043      	beq.n	800c0ce <__kernel_rem_pio2+0x26e>
 800c046:	4650      	mov	r0, sl
 800c048:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800c180 <__kernel_rem_pio2+0x320>
 800c04c:	f000 fb64 	bl	800c718 <scalbn>
 800c050:	4630      	mov	r0, r6
 800c052:	4639      	mov	r1, r7
 800c054:	ec53 2b10 	vmov	r2, r3, d0
 800c058:	f7f4 f8c2 	bl	80001e0 <__aeabi_dsub>
 800c05c:	4606      	mov	r6, r0
 800c05e:	460f      	mov	r7, r1
 800c060:	e035      	b.n	800c0ce <__kernel_rem_pio2+0x26e>
 800c062:	4b4c      	ldr	r3, [pc, #304]	; (800c194 <__kernel_rem_pio2+0x334>)
 800c064:	2200      	movs	r2, #0
 800c066:	4630      	mov	r0, r6
 800c068:	4639      	mov	r1, r7
 800c06a:	f7f4 fa71 	bl	8000550 <__aeabi_dmul>
 800c06e:	f7f4 fd1f 	bl	8000ab0 <__aeabi_d2iz>
 800c072:	f7f4 fa03 	bl	800047c <__aeabi_i2d>
 800c076:	4602      	mov	r2, r0
 800c078:	460b      	mov	r3, r1
 800c07a:	ec43 2b18 	vmov	d8, r2, r3
 800c07e:	4b46      	ldr	r3, [pc, #280]	; (800c198 <__kernel_rem_pio2+0x338>)
 800c080:	2200      	movs	r2, #0
 800c082:	f7f4 fa65 	bl	8000550 <__aeabi_dmul>
 800c086:	4602      	mov	r2, r0
 800c088:	460b      	mov	r3, r1
 800c08a:	4630      	mov	r0, r6
 800c08c:	4639      	mov	r1, r7
 800c08e:	f7f4 f8a7 	bl	80001e0 <__aeabi_dsub>
 800c092:	f7f4 fd0d 	bl	8000ab0 <__aeabi_d2iz>
 800c096:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c09a:	f84b 0b04 	str.w	r0, [fp], #4
 800c09e:	ec51 0b18 	vmov	r0, r1, d8
 800c0a2:	f7f4 f89f 	bl	80001e4 <__adddf3>
 800c0a6:	f109 39ff 	add.w	r9, r9, #4294967295
 800c0aa:	4606      	mov	r6, r0
 800c0ac:	460f      	mov	r7, r1
 800c0ae:	e75b      	b.n	800bf68 <__kernel_rem_pio2+0x108>
 800c0b0:	d106      	bne.n	800c0c0 <__kernel_rem_pio2+0x260>
 800c0b2:	1e63      	subs	r3, r4, #1
 800c0b4:	aa0e      	add	r2, sp, #56	; 0x38
 800c0b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c0ba:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800c0be:	e79d      	b.n	800bffc <__kernel_rem_pio2+0x19c>
 800c0c0:	4b36      	ldr	r3, [pc, #216]	; (800c19c <__kernel_rem_pio2+0x33c>)
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	f7f4 fcca 	bl	8000a5c <__aeabi_dcmpge>
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	d13d      	bne.n	800c148 <__kernel_rem_pio2+0x2e8>
 800c0cc:	4683      	mov	fp, r0
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	4630      	mov	r0, r6
 800c0d4:	4639      	mov	r1, r7
 800c0d6:	f7f4 fca3 	bl	8000a20 <__aeabi_dcmpeq>
 800c0da:	2800      	cmp	r0, #0
 800c0dc:	f000 80c0 	beq.w	800c260 <__kernel_rem_pio2+0x400>
 800c0e0:	1e65      	subs	r5, r4, #1
 800c0e2:	462b      	mov	r3, r5
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	9902      	ldr	r1, [sp, #8]
 800c0e8:	428b      	cmp	r3, r1
 800c0ea:	da6c      	bge.n	800c1c6 <__kernel_rem_pio2+0x366>
 800c0ec:	2a00      	cmp	r2, #0
 800c0ee:	f000 8089 	beq.w	800c204 <__kernel_rem_pio2+0x3a4>
 800c0f2:	ab0e      	add	r3, sp, #56	; 0x38
 800c0f4:	f1aa 0a18 	sub.w	sl, sl, #24
 800c0f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	f000 80ad 	beq.w	800c25c <__kernel_rem_pio2+0x3fc>
 800c102:	4650      	mov	r0, sl
 800c104:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800c180 <__kernel_rem_pio2+0x320>
 800c108:	f000 fb06 	bl	800c718 <scalbn>
 800c10c:	ab9a      	add	r3, sp, #616	; 0x268
 800c10e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c112:	ec57 6b10 	vmov	r6, r7, d0
 800c116:	00ec      	lsls	r4, r5, #3
 800c118:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800c11c:	46aa      	mov	sl, r5
 800c11e:	f1ba 0f00 	cmp.w	sl, #0
 800c122:	f280 80d6 	bge.w	800c2d2 <__kernel_rem_pio2+0x472>
 800c126:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800c178 <__kernel_rem_pio2+0x318>
 800c12a:	462e      	mov	r6, r5
 800c12c:	2e00      	cmp	r6, #0
 800c12e:	f2c0 8104 	blt.w	800c33a <__kernel_rem_pio2+0x4da>
 800c132:	ab72      	add	r3, sp, #456	; 0x1c8
 800c134:	ed8d 8b06 	vstr	d8, [sp, #24]
 800c138:	f8df a064 	ldr.w	sl, [pc, #100]	; 800c1a0 <__kernel_rem_pio2+0x340>
 800c13c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c140:	f04f 0800 	mov.w	r8, #0
 800c144:	1baf      	subs	r7, r5, r6
 800c146:	e0ea      	b.n	800c31e <__kernel_rem_pio2+0x4be>
 800c148:	f04f 0b02 	mov.w	fp, #2
 800c14c:	e759      	b.n	800c002 <__kernel_rem_pio2+0x1a2>
 800c14e:	f8d8 3000 	ldr.w	r3, [r8]
 800c152:	b955      	cbnz	r5, 800c16a <__kernel_rem_pio2+0x30a>
 800c154:	b123      	cbz	r3, 800c160 <__kernel_rem_pio2+0x300>
 800c156:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c15a:	f8c8 3000 	str.w	r3, [r8]
 800c15e:	2301      	movs	r3, #1
 800c160:	3201      	adds	r2, #1
 800c162:	f108 0804 	add.w	r8, r8, #4
 800c166:	461d      	mov	r5, r3
 800c168:	e752      	b.n	800c010 <__kernel_rem_pio2+0x1b0>
 800c16a:	1acb      	subs	r3, r1, r3
 800c16c:	f8c8 3000 	str.w	r3, [r8]
 800c170:	462b      	mov	r3, r5
 800c172:	e7f5      	b.n	800c160 <__kernel_rem_pio2+0x300>
 800c174:	f3af 8000 	nop.w
	...
 800c184:	3ff00000 	.word	0x3ff00000
 800c188:	0800ca60 	.word	0x0800ca60
 800c18c:	40200000 	.word	0x40200000
 800c190:	3ff00000 	.word	0x3ff00000
 800c194:	3e700000 	.word	0x3e700000
 800c198:	41700000 	.word	0x41700000
 800c19c:	3fe00000 	.word	0x3fe00000
 800c1a0:	0800ca20 	.word	0x0800ca20
 800c1a4:	1e62      	subs	r2, r4, #1
 800c1a6:	ab0e      	add	r3, sp, #56	; 0x38
 800c1a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ac:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c1b0:	a90e      	add	r1, sp, #56	; 0x38
 800c1b2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c1b6:	e739      	b.n	800c02c <__kernel_rem_pio2+0x1cc>
 800c1b8:	1e62      	subs	r2, r4, #1
 800c1ba:	ab0e      	add	r3, sp, #56	; 0x38
 800c1bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c1c4:	e7f4      	b.n	800c1b0 <__kernel_rem_pio2+0x350>
 800c1c6:	a90e      	add	r1, sp, #56	; 0x38
 800c1c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c1cc:	3b01      	subs	r3, #1
 800c1ce:	430a      	orrs	r2, r1
 800c1d0:	e789      	b.n	800c0e6 <__kernel_rem_pio2+0x286>
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c1d8:	2900      	cmp	r1, #0
 800c1da:	d0fa      	beq.n	800c1d2 <__kernel_rem_pio2+0x372>
 800c1dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1de:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800c1e2:	446a      	add	r2, sp
 800c1e4:	3a98      	subs	r2, #152	; 0x98
 800c1e6:	920a      	str	r2, [sp, #40]	; 0x28
 800c1e8:	9a08      	ldr	r2, [sp, #32]
 800c1ea:	18e3      	adds	r3, r4, r3
 800c1ec:	18a5      	adds	r5, r4, r2
 800c1ee:	aa22      	add	r2, sp, #136	; 0x88
 800c1f0:	f104 0801 	add.w	r8, r4, #1
 800c1f4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800c1f8:	9304      	str	r3, [sp, #16]
 800c1fa:	9b04      	ldr	r3, [sp, #16]
 800c1fc:	4543      	cmp	r3, r8
 800c1fe:	da04      	bge.n	800c20a <__kernel_rem_pio2+0x3aa>
 800c200:	461c      	mov	r4, r3
 800c202:	e6a3      	b.n	800bf4c <__kernel_rem_pio2+0xec>
 800c204:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c206:	2301      	movs	r3, #1
 800c208:	e7e4      	b.n	800c1d4 <__kernel_rem_pio2+0x374>
 800c20a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c20c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c210:	f7f4 f934 	bl	800047c <__aeabi_i2d>
 800c214:	e8e5 0102 	strd	r0, r1, [r5], #8
 800c218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c21a:	46ab      	mov	fp, r5
 800c21c:	461c      	mov	r4, r3
 800c21e:	f04f 0900 	mov.w	r9, #0
 800c222:	2600      	movs	r6, #0
 800c224:	2700      	movs	r7, #0
 800c226:	9b06      	ldr	r3, [sp, #24]
 800c228:	4599      	cmp	r9, r3
 800c22a:	dd06      	ble.n	800c23a <__kernel_rem_pio2+0x3da>
 800c22c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c22e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800c232:	f108 0801 	add.w	r8, r8, #1
 800c236:	930a      	str	r3, [sp, #40]	; 0x28
 800c238:	e7df      	b.n	800c1fa <__kernel_rem_pio2+0x39a>
 800c23a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c23e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c242:	f7f4 f985 	bl	8000550 <__aeabi_dmul>
 800c246:	4602      	mov	r2, r0
 800c248:	460b      	mov	r3, r1
 800c24a:	4630      	mov	r0, r6
 800c24c:	4639      	mov	r1, r7
 800c24e:	f7f3 ffc9 	bl	80001e4 <__adddf3>
 800c252:	f109 0901 	add.w	r9, r9, #1
 800c256:	4606      	mov	r6, r0
 800c258:	460f      	mov	r7, r1
 800c25a:	e7e4      	b.n	800c226 <__kernel_rem_pio2+0x3c6>
 800c25c:	3d01      	subs	r5, #1
 800c25e:	e748      	b.n	800c0f2 <__kernel_rem_pio2+0x292>
 800c260:	ec47 6b10 	vmov	d0, r6, r7
 800c264:	f1ca 0000 	rsb	r0, sl, #0
 800c268:	f000 fa56 	bl	800c718 <scalbn>
 800c26c:	ec57 6b10 	vmov	r6, r7, d0
 800c270:	4ba0      	ldr	r3, [pc, #640]	; (800c4f4 <__kernel_rem_pio2+0x694>)
 800c272:	ee10 0a10 	vmov	r0, s0
 800c276:	2200      	movs	r2, #0
 800c278:	4639      	mov	r1, r7
 800c27a:	f7f4 fbef 	bl	8000a5c <__aeabi_dcmpge>
 800c27e:	b1f8      	cbz	r0, 800c2c0 <__kernel_rem_pio2+0x460>
 800c280:	4b9d      	ldr	r3, [pc, #628]	; (800c4f8 <__kernel_rem_pio2+0x698>)
 800c282:	2200      	movs	r2, #0
 800c284:	4630      	mov	r0, r6
 800c286:	4639      	mov	r1, r7
 800c288:	f7f4 f962 	bl	8000550 <__aeabi_dmul>
 800c28c:	f7f4 fc10 	bl	8000ab0 <__aeabi_d2iz>
 800c290:	4680      	mov	r8, r0
 800c292:	f7f4 f8f3 	bl	800047c <__aeabi_i2d>
 800c296:	4b97      	ldr	r3, [pc, #604]	; (800c4f4 <__kernel_rem_pio2+0x694>)
 800c298:	2200      	movs	r2, #0
 800c29a:	f7f4 f959 	bl	8000550 <__aeabi_dmul>
 800c29e:	460b      	mov	r3, r1
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	4639      	mov	r1, r7
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	f7f3 ff9b 	bl	80001e0 <__aeabi_dsub>
 800c2aa:	f7f4 fc01 	bl	8000ab0 <__aeabi_d2iz>
 800c2ae:	1c65      	adds	r5, r4, #1
 800c2b0:	ab0e      	add	r3, sp, #56	; 0x38
 800c2b2:	f10a 0a18 	add.w	sl, sl, #24
 800c2b6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c2ba:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c2be:	e720      	b.n	800c102 <__kernel_rem_pio2+0x2a2>
 800c2c0:	4630      	mov	r0, r6
 800c2c2:	4639      	mov	r1, r7
 800c2c4:	f7f4 fbf4 	bl	8000ab0 <__aeabi_d2iz>
 800c2c8:	ab0e      	add	r3, sp, #56	; 0x38
 800c2ca:	4625      	mov	r5, r4
 800c2cc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c2d0:	e717      	b.n	800c102 <__kernel_rem_pio2+0x2a2>
 800c2d2:	ab0e      	add	r3, sp, #56	; 0x38
 800c2d4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c2d8:	f7f4 f8d0 	bl	800047c <__aeabi_i2d>
 800c2dc:	4632      	mov	r2, r6
 800c2de:	463b      	mov	r3, r7
 800c2e0:	f7f4 f936 	bl	8000550 <__aeabi_dmul>
 800c2e4:	4b84      	ldr	r3, [pc, #528]	; (800c4f8 <__kernel_rem_pio2+0x698>)
 800c2e6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	4630      	mov	r0, r6
 800c2ee:	4639      	mov	r1, r7
 800c2f0:	f7f4 f92e 	bl	8000550 <__aeabi_dmul>
 800c2f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c2f8:	4606      	mov	r6, r0
 800c2fa:	460f      	mov	r7, r1
 800c2fc:	e70f      	b.n	800c11e <__kernel_rem_pio2+0x2be>
 800c2fe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c302:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c306:	f7f4 f923 	bl	8000550 <__aeabi_dmul>
 800c30a:	4602      	mov	r2, r0
 800c30c:	460b      	mov	r3, r1
 800c30e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c312:	f7f3 ff67 	bl	80001e4 <__adddf3>
 800c316:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c31a:	f108 0801 	add.w	r8, r8, #1
 800c31e:	9b02      	ldr	r3, [sp, #8]
 800c320:	4598      	cmp	r8, r3
 800c322:	dc01      	bgt.n	800c328 <__kernel_rem_pio2+0x4c8>
 800c324:	45b8      	cmp	r8, r7
 800c326:	ddea      	ble.n	800c2fe <__kernel_rem_pio2+0x49e>
 800c328:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c32c:	ab4a      	add	r3, sp, #296	; 0x128
 800c32e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c332:	ed87 7b00 	vstr	d7, [r7]
 800c336:	3e01      	subs	r6, #1
 800c338:	e6f8      	b.n	800c12c <__kernel_rem_pio2+0x2cc>
 800c33a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c33c:	2b02      	cmp	r3, #2
 800c33e:	dc0b      	bgt.n	800c358 <__kernel_rem_pio2+0x4f8>
 800c340:	2b00      	cmp	r3, #0
 800c342:	dc35      	bgt.n	800c3b0 <__kernel_rem_pio2+0x550>
 800c344:	d059      	beq.n	800c3fa <__kernel_rem_pio2+0x59a>
 800c346:	9b04      	ldr	r3, [sp, #16]
 800c348:	f003 0007 	and.w	r0, r3, #7
 800c34c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800c350:	ecbd 8b02 	vpop	{d8}
 800c354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c358:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c35a:	2b03      	cmp	r3, #3
 800c35c:	d1f3      	bne.n	800c346 <__kernel_rem_pio2+0x4e6>
 800c35e:	ab4a      	add	r3, sp, #296	; 0x128
 800c360:	4423      	add	r3, r4
 800c362:	9306      	str	r3, [sp, #24]
 800c364:	461c      	mov	r4, r3
 800c366:	469a      	mov	sl, r3
 800c368:	9502      	str	r5, [sp, #8]
 800c36a:	9b02      	ldr	r3, [sp, #8]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f1aa 0a08 	sub.w	sl, sl, #8
 800c372:	dc6b      	bgt.n	800c44c <__kernel_rem_pio2+0x5ec>
 800c374:	46aa      	mov	sl, r5
 800c376:	f1ba 0f01 	cmp.w	sl, #1
 800c37a:	f1a4 0408 	sub.w	r4, r4, #8
 800c37e:	f300 8085 	bgt.w	800c48c <__kernel_rem_pio2+0x62c>
 800c382:	9c06      	ldr	r4, [sp, #24]
 800c384:	2000      	movs	r0, #0
 800c386:	3408      	adds	r4, #8
 800c388:	2100      	movs	r1, #0
 800c38a:	2d01      	cmp	r5, #1
 800c38c:	f300 809d 	bgt.w	800c4ca <__kernel_rem_pio2+0x66a>
 800c390:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800c394:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800c398:	f1bb 0f00 	cmp.w	fp, #0
 800c39c:	f040 809b 	bne.w	800c4d6 <__kernel_rem_pio2+0x676>
 800c3a0:	9b01      	ldr	r3, [sp, #4]
 800c3a2:	e9c3 5600 	strd	r5, r6, [r3]
 800c3a6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c3aa:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c3ae:	e7ca      	b.n	800c346 <__kernel_rem_pio2+0x4e6>
 800c3b0:	3408      	adds	r4, #8
 800c3b2:	ab4a      	add	r3, sp, #296	; 0x128
 800c3b4:	441c      	add	r4, r3
 800c3b6:	462e      	mov	r6, r5
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	2100      	movs	r1, #0
 800c3bc:	2e00      	cmp	r6, #0
 800c3be:	da36      	bge.n	800c42e <__kernel_rem_pio2+0x5ce>
 800c3c0:	f1bb 0f00 	cmp.w	fp, #0
 800c3c4:	d039      	beq.n	800c43a <__kernel_rem_pio2+0x5da>
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3cc:	9c01      	ldr	r4, [sp, #4]
 800c3ce:	e9c4 2300 	strd	r2, r3, [r4]
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800c3da:	f7f3 ff01 	bl	80001e0 <__aeabi_dsub>
 800c3de:	ae4c      	add	r6, sp, #304	; 0x130
 800c3e0:	2401      	movs	r4, #1
 800c3e2:	42a5      	cmp	r5, r4
 800c3e4:	da2c      	bge.n	800c440 <__kernel_rem_pio2+0x5e0>
 800c3e6:	f1bb 0f00 	cmp.w	fp, #0
 800c3ea:	d002      	beq.n	800c3f2 <__kernel_rem_pio2+0x592>
 800c3ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	9b01      	ldr	r3, [sp, #4]
 800c3f4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c3f8:	e7a5      	b.n	800c346 <__kernel_rem_pio2+0x4e6>
 800c3fa:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800c3fe:	eb0d 0403 	add.w	r4, sp, r3
 800c402:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800c406:	2000      	movs	r0, #0
 800c408:	2100      	movs	r1, #0
 800c40a:	2d00      	cmp	r5, #0
 800c40c:	da09      	bge.n	800c422 <__kernel_rem_pio2+0x5c2>
 800c40e:	f1bb 0f00 	cmp.w	fp, #0
 800c412:	d002      	beq.n	800c41a <__kernel_rem_pio2+0x5ba>
 800c414:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c418:	4619      	mov	r1, r3
 800c41a:	9b01      	ldr	r3, [sp, #4]
 800c41c:	e9c3 0100 	strd	r0, r1, [r3]
 800c420:	e791      	b.n	800c346 <__kernel_rem_pio2+0x4e6>
 800c422:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c426:	f7f3 fedd 	bl	80001e4 <__adddf3>
 800c42a:	3d01      	subs	r5, #1
 800c42c:	e7ed      	b.n	800c40a <__kernel_rem_pio2+0x5aa>
 800c42e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c432:	f7f3 fed7 	bl	80001e4 <__adddf3>
 800c436:	3e01      	subs	r6, #1
 800c438:	e7c0      	b.n	800c3bc <__kernel_rem_pio2+0x55c>
 800c43a:	4602      	mov	r2, r0
 800c43c:	460b      	mov	r3, r1
 800c43e:	e7c5      	b.n	800c3cc <__kernel_rem_pio2+0x56c>
 800c440:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c444:	f7f3 fece 	bl	80001e4 <__adddf3>
 800c448:	3401      	adds	r4, #1
 800c44a:	e7ca      	b.n	800c3e2 <__kernel_rem_pio2+0x582>
 800c44c:	e9da 8900 	ldrd	r8, r9, [sl]
 800c450:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c454:	9b02      	ldr	r3, [sp, #8]
 800c456:	3b01      	subs	r3, #1
 800c458:	9302      	str	r3, [sp, #8]
 800c45a:	4632      	mov	r2, r6
 800c45c:	463b      	mov	r3, r7
 800c45e:	4640      	mov	r0, r8
 800c460:	4649      	mov	r1, r9
 800c462:	f7f3 febf 	bl	80001e4 <__adddf3>
 800c466:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c46a:	4602      	mov	r2, r0
 800c46c:	460b      	mov	r3, r1
 800c46e:	4640      	mov	r0, r8
 800c470:	4649      	mov	r1, r9
 800c472:	f7f3 feb5 	bl	80001e0 <__aeabi_dsub>
 800c476:	4632      	mov	r2, r6
 800c478:	463b      	mov	r3, r7
 800c47a:	f7f3 feb3 	bl	80001e4 <__adddf3>
 800c47e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800c482:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c486:	ed8a 7b00 	vstr	d7, [sl]
 800c48a:	e76e      	b.n	800c36a <__kernel_rem_pio2+0x50a>
 800c48c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c490:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c494:	4640      	mov	r0, r8
 800c496:	4632      	mov	r2, r6
 800c498:	463b      	mov	r3, r7
 800c49a:	4649      	mov	r1, r9
 800c49c:	f7f3 fea2 	bl	80001e4 <__adddf3>
 800c4a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	460b      	mov	r3, r1
 800c4a8:	4640      	mov	r0, r8
 800c4aa:	4649      	mov	r1, r9
 800c4ac:	f7f3 fe98 	bl	80001e0 <__aeabi_dsub>
 800c4b0:	4632      	mov	r2, r6
 800c4b2:	463b      	mov	r3, r7
 800c4b4:	f7f3 fe96 	bl	80001e4 <__adddf3>
 800c4b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c4bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c4c0:	ed84 7b00 	vstr	d7, [r4]
 800c4c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c4c8:	e755      	b.n	800c376 <__kernel_rem_pio2+0x516>
 800c4ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c4ce:	f7f3 fe89 	bl	80001e4 <__adddf3>
 800c4d2:	3d01      	subs	r5, #1
 800c4d4:	e759      	b.n	800c38a <__kernel_rem_pio2+0x52a>
 800c4d6:	9b01      	ldr	r3, [sp, #4]
 800c4d8:	9a01      	ldr	r2, [sp, #4]
 800c4da:	601d      	str	r5, [r3, #0]
 800c4dc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c4e0:	605c      	str	r4, [r3, #4]
 800c4e2:	609f      	str	r7, [r3, #8]
 800c4e4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c4e8:	60d3      	str	r3, [r2, #12]
 800c4ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c4ee:	6110      	str	r0, [r2, #16]
 800c4f0:	6153      	str	r3, [r2, #20]
 800c4f2:	e728      	b.n	800c346 <__kernel_rem_pio2+0x4e6>
 800c4f4:	41700000 	.word	0x41700000
 800c4f8:	3e700000 	.word	0x3e700000
 800c4fc:	00000000 	.word	0x00000000

0800c500 <__kernel_sin>:
 800c500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c504:	ed2d 8b04 	vpush	{d8-d9}
 800c508:	eeb0 8a41 	vmov.f32	s16, s2
 800c50c:	eef0 8a61 	vmov.f32	s17, s3
 800c510:	ec55 4b10 	vmov	r4, r5, d0
 800c514:	b083      	sub	sp, #12
 800c516:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c51a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c51e:	9001      	str	r0, [sp, #4]
 800c520:	da06      	bge.n	800c530 <__kernel_sin+0x30>
 800c522:	ee10 0a10 	vmov	r0, s0
 800c526:	4629      	mov	r1, r5
 800c528:	f7f4 fac2 	bl	8000ab0 <__aeabi_d2iz>
 800c52c:	2800      	cmp	r0, #0
 800c52e:	d051      	beq.n	800c5d4 <__kernel_sin+0xd4>
 800c530:	4622      	mov	r2, r4
 800c532:	462b      	mov	r3, r5
 800c534:	4620      	mov	r0, r4
 800c536:	4629      	mov	r1, r5
 800c538:	f7f4 f80a 	bl	8000550 <__aeabi_dmul>
 800c53c:	4682      	mov	sl, r0
 800c53e:	468b      	mov	fp, r1
 800c540:	4602      	mov	r2, r0
 800c542:	460b      	mov	r3, r1
 800c544:	4620      	mov	r0, r4
 800c546:	4629      	mov	r1, r5
 800c548:	f7f4 f802 	bl	8000550 <__aeabi_dmul>
 800c54c:	a341      	add	r3, pc, #260	; (adr r3, 800c654 <__kernel_sin+0x154>)
 800c54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c552:	4680      	mov	r8, r0
 800c554:	4689      	mov	r9, r1
 800c556:	4650      	mov	r0, sl
 800c558:	4659      	mov	r1, fp
 800c55a:	f7f3 fff9 	bl	8000550 <__aeabi_dmul>
 800c55e:	a33f      	add	r3, pc, #252	; (adr r3, 800c65c <__kernel_sin+0x15c>)
 800c560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c564:	f7f3 fe3c 	bl	80001e0 <__aeabi_dsub>
 800c568:	4652      	mov	r2, sl
 800c56a:	465b      	mov	r3, fp
 800c56c:	f7f3 fff0 	bl	8000550 <__aeabi_dmul>
 800c570:	a33c      	add	r3, pc, #240	; (adr r3, 800c664 <__kernel_sin+0x164>)
 800c572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c576:	f7f3 fe35 	bl	80001e4 <__adddf3>
 800c57a:	4652      	mov	r2, sl
 800c57c:	465b      	mov	r3, fp
 800c57e:	f7f3 ffe7 	bl	8000550 <__aeabi_dmul>
 800c582:	a33a      	add	r3, pc, #232	; (adr r3, 800c66c <__kernel_sin+0x16c>)
 800c584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c588:	f7f3 fe2a 	bl	80001e0 <__aeabi_dsub>
 800c58c:	4652      	mov	r2, sl
 800c58e:	465b      	mov	r3, fp
 800c590:	f7f3 ffde 	bl	8000550 <__aeabi_dmul>
 800c594:	a337      	add	r3, pc, #220	; (adr r3, 800c674 <__kernel_sin+0x174>)
 800c596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59a:	f7f3 fe23 	bl	80001e4 <__adddf3>
 800c59e:	9b01      	ldr	r3, [sp, #4]
 800c5a0:	4606      	mov	r6, r0
 800c5a2:	460f      	mov	r7, r1
 800c5a4:	b9eb      	cbnz	r3, 800c5e2 <__kernel_sin+0xe2>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	460b      	mov	r3, r1
 800c5aa:	4650      	mov	r0, sl
 800c5ac:	4659      	mov	r1, fp
 800c5ae:	f7f3 ffcf 	bl	8000550 <__aeabi_dmul>
 800c5b2:	a325      	add	r3, pc, #148	; (adr r3, 800c648 <__kernel_sin+0x148>)
 800c5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b8:	f7f3 fe12 	bl	80001e0 <__aeabi_dsub>
 800c5bc:	4642      	mov	r2, r8
 800c5be:	464b      	mov	r3, r9
 800c5c0:	f7f3 ffc6 	bl	8000550 <__aeabi_dmul>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	460b      	mov	r3, r1
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	4629      	mov	r1, r5
 800c5cc:	f7f3 fe0a 	bl	80001e4 <__adddf3>
 800c5d0:	4604      	mov	r4, r0
 800c5d2:	460d      	mov	r5, r1
 800c5d4:	ec45 4b10 	vmov	d0, r4, r5
 800c5d8:	b003      	add	sp, #12
 800c5da:	ecbd 8b04 	vpop	{d8-d9}
 800c5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e2:	4b1b      	ldr	r3, [pc, #108]	; (800c650 <__kernel_sin+0x150>)
 800c5e4:	ec51 0b18 	vmov	r0, r1, d8
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	f7f3 ffb1 	bl	8000550 <__aeabi_dmul>
 800c5ee:	4632      	mov	r2, r6
 800c5f0:	ec41 0b19 	vmov	d9, r0, r1
 800c5f4:	463b      	mov	r3, r7
 800c5f6:	4640      	mov	r0, r8
 800c5f8:	4649      	mov	r1, r9
 800c5fa:	f7f3 ffa9 	bl	8000550 <__aeabi_dmul>
 800c5fe:	4602      	mov	r2, r0
 800c600:	460b      	mov	r3, r1
 800c602:	ec51 0b19 	vmov	r0, r1, d9
 800c606:	f7f3 fdeb 	bl	80001e0 <__aeabi_dsub>
 800c60a:	4652      	mov	r2, sl
 800c60c:	465b      	mov	r3, fp
 800c60e:	f7f3 ff9f 	bl	8000550 <__aeabi_dmul>
 800c612:	ec53 2b18 	vmov	r2, r3, d8
 800c616:	f7f3 fde3 	bl	80001e0 <__aeabi_dsub>
 800c61a:	a30b      	add	r3, pc, #44	; (adr r3, 800c648 <__kernel_sin+0x148>)
 800c61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c620:	4606      	mov	r6, r0
 800c622:	460f      	mov	r7, r1
 800c624:	4640      	mov	r0, r8
 800c626:	4649      	mov	r1, r9
 800c628:	f7f3 ff92 	bl	8000550 <__aeabi_dmul>
 800c62c:	4602      	mov	r2, r0
 800c62e:	460b      	mov	r3, r1
 800c630:	4630      	mov	r0, r6
 800c632:	4639      	mov	r1, r7
 800c634:	f7f3 fdd6 	bl	80001e4 <__adddf3>
 800c638:	4602      	mov	r2, r0
 800c63a:	460b      	mov	r3, r1
 800c63c:	4620      	mov	r0, r4
 800c63e:	4629      	mov	r1, r5
 800c640:	f7f3 fdce 	bl	80001e0 <__aeabi_dsub>
 800c644:	e7c4      	b.n	800c5d0 <__kernel_sin+0xd0>
 800c646:	bf00      	nop
 800c648:	55555549 	.word	0x55555549
 800c64c:	3fc55555 	.word	0x3fc55555
 800c650:	3fe00000 	.word	0x3fe00000
 800c654:	5acfd57c 	.word	0x5acfd57c
 800c658:	3de5d93a 	.word	0x3de5d93a
 800c65c:	8a2b9ceb 	.word	0x8a2b9ceb
 800c660:	3e5ae5e6 	.word	0x3e5ae5e6
 800c664:	57b1fe7d 	.word	0x57b1fe7d
 800c668:	3ec71de3 	.word	0x3ec71de3
 800c66c:	19c161d5 	.word	0x19c161d5
 800c670:	3f2a01a0 	.word	0x3f2a01a0
 800c674:	1110f8a6 	.word	0x1110f8a6
 800c678:	3f811111 	.word	0x3f811111

0800c67c <with_errno>:
 800c67c:	b570      	push	{r4, r5, r6, lr}
 800c67e:	4604      	mov	r4, r0
 800c680:	460d      	mov	r5, r1
 800c682:	4616      	mov	r6, r2
 800c684:	f7fd fd74 	bl	800a170 <__errno>
 800c688:	4629      	mov	r1, r5
 800c68a:	6006      	str	r6, [r0, #0]
 800c68c:	4620      	mov	r0, r4
 800c68e:	bd70      	pop	{r4, r5, r6, pc}

0800c690 <xflow>:
 800c690:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c692:	4614      	mov	r4, r2
 800c694:	461d      	mov	r5, r3
 800c696:	b108      	cbz	r0, 800c69c <xflow+0xc>
 800c698:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c69c:	e9cd 2300 	strd	r2, r3, [sp]
 800c6a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	4629      	mov	r1, r5
 800c6a8:	f7f3 ff52 	bl	8000550 <__aeabi_dmul>
 800c6ac:	2222      	movs	r2, #34	; 0x22
 800c6ae:	b003      	add	sp, #12
 800c6b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6b4:	f7ff bfe2 	b.w	800c67c <with_errno>

0800c6b8 <__math_uflow>:
 800c6b8:	b508      	push	{r3, lr}
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c6c0:	f7ff ffe6 	bl	800c690 <xflow>
 800c6c4:	ec41 0b10 	vmov	d0, r0, r1
 800c6c8:	bd08      	pop	{r3, pc}

0800c6ca <__math_oflow>:
 800c6ca:	b508      	push	{r3, lr}
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c6d2:	f7ff ffdd 	bl	800c690 <xflow>
 800c6d6:	ec41 0b10 	vmov	d0, r0, r1
 800c6da:	bd08      	pop	{r3, pc}

0800c6dc <fabs>:
 800c6dc:	ec51 0b10 	vmov	r0, r1, d0
 800c6e0:	ee10 2a10 	vmov	r2, s0
 800c6e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c6e8:	ec43 2b10 	vmov	d0, r2, r3
 800c6ec:	4770      	bx	lr

0800c6ee <finite>:
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	ed8d 0b00 	vstr	d0, [sp]
 800c6f4:	9801      	ldr	r0, [sp, #4]
 800c6f6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c6fa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c6fe:	0fc0      	lsrs	r0, r0, #31
 800c700:	b002      	add	sp, #8
 800c702:	4770      	bx	lr
 800c704:	0000      	movs	r0, r0
	...

0800c708 <nan>:
 800c708:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c710 <nan+0x8>
 800c70c:	4770      	bx	lr
 800c70e:	bf00      	nop
 800c710:	00000000 	.word	0x00000000
 800c714:	7ff80000 	.word	0x7ff80000

0800c718 <scalbn>:
 800c718:	b570      	push	{r4, r5, r6, lr}
 800c71a:	ec55 4b10 	vmov	r4, r5, d0
 800c71e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c722:	4606      	mov	r6, r0
 800c724:	462b      	mov	r3, r5
 800c726:	b99a      	cbnz	r2, 800c750 <scalbn+0x38>
 800c728:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c72c:	4323      	orrs	r3, r4
 800c72e:	d036      	beq.n	800c79e <scalbn+0x86>
 800c730:	4b39      	ldr	r3, [pc, #228]	; (800c818 <scalbn+0x100>)
 800c732:	4629      	mov	r1, r5
 800c734:	ee10 0a10 	vmov	r0, s0
 800c738:	2200      	movs	r2, #0
 800c73a:	f7f3 ff09 	bl	8000550 <__aeabi_dmul>
 800c73e:	4b37      	ldr	r3, [pc, #220]	; (800c81c <scalbn+0x104>)
 800c740:	429e      	cmp	r6, r3
 800c742:	4604      	mov	r4, r0
 800c744:	460d      	mov	r5, r1
 800c746:	da10      	bge.n	800c76a <scalbn+0x52>
 800c748:	a32b      	add	r3, pc, #172	; (adr r3, 800c7f8 <scalbn+0xe0>)
 800c74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74e:	e03a      	b.n	800c7c6 <scalbn+0xae>
 800c750:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c754:	428a      	cmp	r2, r1
 800c756:	d10c      	bne.n	800c772 <scalbn+0x5a>
 800c758:	ee10 2a10 	vmov	r2, s0
 800c75c:	4620      	mov	r0, r4
 800c75e:	4629      	mov	r1, r5
 800c760:	f7f3 fd40 	bl	80001e4 <__adddf3>
 800c764:	4604      	mov	r4, r0
 800c766:	460d      	mov	r5, r1
 800c768:	e019      	b.n	800c79e <scalbn+0x86>
 800c76a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c76e:	460b      	mov	r3, r1
 800c770:	3a36      	subs	r2, #54	; 0x36
 800c772:	4432      	add	r2, r6
 800c774:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c778:	428a      	cmp	r2, r1
 800c77a:	dd08      	ble.n	800c78e <scalbn+0x76>
 800c77c:	2d00      	cmp	r5, #0
 800c77e:	a120      	add	r1, pc, #128	; (adr r1, 800c800 <scalbn+0xe8>)
 800c780:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c784:	da1c      	bge.n	800c7c0 <scalbn+0xa8>
 800c786:	a120      	add	r1, pc, #128	; (adr r1, 800c808 <scalbn+0xf0>)
 800c788:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c78c:	e018      	b.n	800c7c0 <scalbn+0xa8>
 800c78e:	2a00      	cmp	r2, #0
 800c790:	dd08      	ble.n	800c7a4 <scalbn+0x8c>
 800c792:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c796:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c79a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c79e:	ec45 4b10 	vmov	d0, r4, r5
 800c7a2:	bd70      	pop	{r4, r5, r6, pc}
 800c7a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c7a8:	da19      	bge.n	800c7de <scalbn+0xc6>
 800c7aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c7ae:	429e      	cmp	r6, r3
 800c7b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c7b4:	dd0a      	ble.n	800c7cc <scalbn+0xb4>
 800c7b6:	a112      	add	r1, pc, #72	; (adr r1, 800c800 <scalbn+0xe8>)
 800c7b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d1e2      	bne.n	800c786 <scalbn+0x6e>
 800c7c0:	a30f      	add	r3, pc, #60	; (adr r3, 800c800 <scalbn+0xe8>)
 800c7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c6:	f7f3 fec3 	bl	8000550 <__aeabi_dmul>
 800c7ca:	e7cb      	b.n	800c764 <scalbn+0x4c>
 800c7cc:	a10a      	add	r1, pc, #40	; (adr r1, 800c7f8 <scalbn+0xe0>)
 800c7ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d0b8      	beq.n	800c748 <scalbn+0x30>
 800c7d6:	a10e      	add	r1, pc, #56	; (adr r1, 800c810 <scalbn+0xf8>)
 800c7d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7dc:	e7b4      	b.n	800c748 <scalbn+0x30>
 800c7de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c7e2:	3236      	adds	r2, #54	; 0x36
 800c7e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c7e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	4b0c      	ldr	r3, [pc, #48]	; (800c820 <scalbn+0x108>)
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	e7e8      	b.n	800c7c6 <scalbn+0xae>
 800c7f4:	f3af 8000 	nop.w
 800c7f8:	c2f8f359 	.word	0xc2f8f359
 800c7fc:	01a56e1f 	.word	0x01a56e1f
 800c800:	8800759c 	.word	0x8800759c
 800c804:	7e37e43c 	.word	0x7e37e43c
 800c808:	8800759c 	.word	0x8800759c
 800c80c:	fe37e43c 	.word	0xfe37e43c
 800c810:	c2f8f359 	.word	0xc2f8f359
 800c814:	81a56e1f 	.word	0x81a56e1f
 800c818:	43500000 	.word	0x43500000
 800c81c:	ffff3cb0 	.word	0xffff3cb0
 800c820:	3c900000 	.word	0x3c900000

0800c824 <_init>:
 800c824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c826:	bf00      	nop
 800c828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c82a:	bc08      	pop	{r3}
 800c82c:	469e      	mov	lr, r3
 800c82e:	4770      	bx	lr

0800c830 <_fini>:
 800c830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c832:	bf00      	nop
 800c834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c836:	bc08      	pop	{r3}
 800c838:	469e      	mov	lr, r3
 800c83a:	4770      	bx	lr
